   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"cmsis_os.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.align	2
  19              		.thumb
  20              		.thumb_func
  22              	makeFreeRtosPriority:
  23              	.LFB13:
  24              		.file 1 "../system/cmsis_os.c"
   1:../system/cmsis_os.c **** 
   2:../system/cmsis_os.c **** #include <string.h>
   3:../system/cmsis_os.c **** #include "cmsis_os.h"
   4:../system/cmsis_os.c **** 
   5:../system/cmsis_os.c **** 
   6:../system/cmsis_os.c **** /* Convert from CMSIS type osPriority to FreeRTOS priority number */
   7:../system/cmsis_os.c **** static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
   8:../system/cmsis_os.c **** {
  25              		.loc 1 8 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 16
  28              		@ frame_needed = 1, uses_anonymous_args = 0
  29              		@ link register save eliminated.
  30 0000 80B4     		push	{r7}
  31              		.cfi_def_cfa_offset 4
  32              		.cfi_offset 7, -4
  33 0002 85B0     		sub	sp, sp, #20
  34              		.cfi_def_cfa_offset 24
  35 0004 00AF     		add	r7, sp, #0
  36              		.cfi_def_cfa_register 7
  37 0006 0346     		mov	r3, r0
  38 0008 FB80     		strh	r3, [r7, #6]	@ movhi
   9:../system/cmsis_os.c ****   unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  39              		.loc 1 9 0
  40 000a 0023     		movs	r3, #0
  41 000c FB60     		str	r3, [r7, #12]
  10:../system/cmsis_os.c ****   
  11:../system/cmsis_os.c ****   if (priority != osPriorityError) {
  42              		.loc 1 11 0
  43 000e B7F90630 		ldrsh	r3, [r7, #6]
  44 0012 842B     		cmp	r3, #132
  45 0014 05D0     		beq	.L2
  12:../system/cmsis_os.c ****     fpriority += (priority - osPriorityIdle);
  46              		.loc 1 12 0
  47 0016 B7F90620 		ldrsh	r2, [r7, #6]
  48 001a FB68     		ldr	r3, [r7, #12]
  49 001c 1344     		add	r3, r3, r2
  50 001e 0333     		adds	r3, r3, #3
  51 0020 FB60     		str	r3, [r7, #12]
  52              	.L2:
  13:../system/cmsis_os.c ****   }
  14:../system/cmsis_os.c ****   
  15:../system/cmsis_os.c ****   return fpriority;
  53              		.loc 1 15 0
  54 0022 FB68     		ldr	r3, [r7, #12]
  16:../system/cmsis_os.c **** }
  55              		.loc 1 16 0
  56 0024 1846     		mov	r0, r3
  57 0026 1437     		adds	r7, r7, #20
  58 0028 BD46     		mov	sp, r7
  59              		@ sp needed
  60 002a 5DF8047B 		ldr	r7, [sp], #4
  61 002e 7047     		bx	lr
  62              		.cfi_endproc
  63              	.LFE13:
  65              		.align	2
  66              		.thumb
  67              		.thumb_func
  69              	makeCmsisPriority:
  70              	.LFB14:
  17:../system/cmsis_os.c **** 
  18:../system/cmsis_os.c **** 
  19:../system/cmsis_os.c **** /* Convert from FreeRTOS priority number to CMSIS type osPriority */
  20:../system/cmsis_os.c **** static osPriority makeCmsisPriority (unsigned portBASE_TYPE fpriority)
  21:../system/cmsis_os.c **** {
  71              		.loc 1 21 0
  72              		.cfi_startproc
  73              		@ args = 0, pretend = 0, frame = 16
  74              		@ frame_needed = 1, uses_anonymous_args = 0
  75              		@ link register save eliminated.
  76 0030 80B4     		push	{r7}
  77              		.cfi_def_cfa_offset 4
  78              		.cfi_offset 7, -4
  79 0032 85B0     		sub	sp, sp, #20
  80              		.cfi_def_cfa_offset 24
  81 0034 00AF     		add	r7, sp, #0
  82              		.cfi_def_cfa_register 7
  83 0036 7860     		str	r0, [r7, #4]
  22:../system/cmsis_os.c ****   osPriority priority = osPriorityError;
  84              		.loc 1 22 0
  85 0038 8423     		movs	r3, #132
  86 003a FB81     		strh	r3, [r7, #14]	@ movhi
  23:../system/cmsis_os.c ****   
  24:../system/cmsis_os.c ****   if ((fpriority - tskIDLE_PRIORITY) <= (osPriorityRealtime - osPriorityIdle)) {
  87              		.loc 1 24 0
  88 003c 7B68     		ldr	r3, [r7, #4]
  89 003e 062B     		cmp	r3, #6
  90 0040 04D8     		bhi	.L5
  25:../system/cmsis_os.c ****     priority = (osPriority)((int)osPriorityIdle + (int)(fpriority - tskIDLE_PRIORITY));
  91              		.loc 1 25 0
  92 0042 7B68     		ldr	r3, [r7, #4]
  93 0044 9BB2     		uxth	r3, r3
  94 0046 033B     		subs	r3, r3, #3
  95 0048 9BB2     		uxth	r3, r3
  96 004a FB81     		strh	r3, [r7, #14]	@ movhi
  97              	.L5:
  26:../system/cmsis_os.c ****   }
  27:../system/cmsis_os.c ****   
  28:../system/cmsis_os.c ****   return priority;
  98              		.loc 1 28 0
  99 004c FB89     		ldrh	r3, [r7, #14]
 100 004e 1BB2     		sxth	r3, r3
  29:../system/cmsis_os.c **** }
 101              		.loc 1 29 0
 102 0050 1846     		mov	r0, r3
 103 0052 1437     		adds	r7, r7, #20
 104 0054 BD46     		mov	sp, r7
 105              		@ sp needed
 106 0056 5DF8047B 		ldr	r7, [sp], #4
 107 005a 7047     		bx	lr
 108              		.cfi_endproc
 109              	.LFE14:
 111              		.align	2
 112              		.thumb
 113              		.thumb_func
 115              	inHandlerMode:
 116              	.LFB15:
  30:../system/cmsis_os.c **** 
  31:../system/cmsis_os.c **** 
  32:../system/cmsis_os.c **** /* Determine whether we are in thread mode or handler mode. */
  33:../system/cmsis_os.c **** static int inHandlerMode (void)
  34:../system/cmsis_os.c **** {
 117              		.loc 1 34 0
 118              		.cfi_startproc
 119              		@ args = 0, pretend = 0, frame = 8
 120              		@ frame_needed = 1, uses_anonymous_args = 0
 121              		@ link register save eliminated.
 122 005c 80B4     		push	{r7}
 123              		.cfi_def_cfa_offset 4
 124              		.cfi_offset 7, -4
 125 005e 83B0     		sub	sp, sp, #12
 126              		.cfi_def_cfa_offset 16
 127 0060 00AF     		add	r7, sp, #0
 128              		.cfi_def_cfa_register 7
 129              	.LBB4:
 130              	.LBB5:
 131              		.file 2 "../system/core_cmFunc.h"
   1:../system/core_cmFunc.h **** /**************************************************************************//**
   2:../system/core_cmFunc.h ****  * @file     core_cmFunc.h
   3:../system/core_cmFunc.h ****  * @brief    CMSIS Cortex-M Core Function Access Header File
   4:../system/core_cmFunc.h ****  * @version  V2.10
   5:../system/core_cmFunc.h ****  * @date     26. July 2011
   6:../system/core_cmFunc.h ****  *
   7:../system/core_cmFunc.h ****  * @note
   8:../system/core_cmFunc.h ****  * Copyright (C) 2009-2011 ARM Limited. All rights reserved.
   9:../system/core_cmFunc.h ****  *
  10:../system/core_cmFunc.h ****  * @par
  11:../system/core_cmFunc.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:../system/core_cmFunc.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:../system/core_cmFunc.h ****  * within development tools that are supporting such ARM based processors. 
  14:../system/core_cmFunc.h ****  *
  15:../system/core_cmFunc.h ****  * @par
  16:../system/core_cmFunc.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:../system/core_cmFunc.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:../system/core_cmFunc.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:../system/core_cmFunc.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:../system/core_cmFunc.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:../system/core_cmFunc.h ****  *
  22:../system/core_cmFunc.h ****  ******************************************************************************/
  23:../system/core_cmFunc.h **** 
  24:../system/core_cmFunc.h **** #ifndef __CORE_CMFUNC_H
  25:../system/core_cmFunc.h **** #define __CORE_CMFUNC_H
  26:../system/core_cmFunc.h **** 
  27:../system/core_cmFunc.h **** 
  28:../system/core_cmFunc.h **** /* ###########################  Core Function Access  ########################### */
  29:../system/core_cmFunc.h **** /** \ingroup  CMSIS_Core_FunctionInterface   
  30:../system/core_cmFunc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  31:../system/core_cmFunc.h ****   @{
  32:../system/core_cmFunc.h ****  */
  33:../system/core_cmFunc.h **** 
  34:../system/core_cmFunc.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  35:../system/core_cmFunc.h **** /* ARM armcc specific functions */
  36:../system/core_cmFunc.h **** 
  37:../system/core_cmFunc.h **** #if (__ARMCC_VERSION < 400677)
  38:../system/core_cmFunc.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  39:../system/core_cmFunc.h **** #endif
  40:../system/core_cmFunc.h **** 
  41:../system/core_cmFunc.h **** /* intrinsic void __enable_irq();     */
  42:../system/core_cmFunc.h **** /* intrinsic void __disable_irq();    */
  43:../system/core_cmFunc.h **** 
  44:../system/core_cmFunc.h **** /** \brief  Get Control Register
  45:../system/core_cmFunc.h **** 
  46:../system/core_cmFunc.h ****     This function returns the content of the Control Register.
  47:../system/core_cmFunc.h **** 
  48:../system/core_cmFunc.h ****     \return               Control Register value
  49:../system/core_cmFunc.h ****  */
  50:../system/core_cmFunc.h **** static __INLINE uint32_t __get_CONTROL(void)
  51:../system/core_cmFunc.h **** {
  52:../system/core_cmFunc.h ****   register uint32_t __regControl         __ASM("control");
  53:../system/core_cmFunc.h ****   return(__regControl);
  54:../system/core_cmFunc.h **** }
  55:../system/core_cmFunc.h **** 
  56:../system/core_cmFunc.h **** 
  57:../system/core_cmFunc.h **** /** \brief  Set Control Register
  58:../system/core_cmFunc.h **** 
  59:../system/core_cmFunc.h ****     This function writes the given value to the Control Register.
  60:../system/core_cmFunc.h **** 
  61:../system/core_cmFunc.h ****     \param [in]    control  Control Register value to set
  62:../system/core_cmFunc.h ****  */
  63:../system/core_cmFunc.h **** static __INLINE void __set_CONTROL(uint32_t control)
  64:../system/core_cmFunc.h **** {
  65:../system/core_cmFunc.h ****   register uint32_t __regControl         __ASM("control");
  66:../system/core_cmFunc.h ****   __regControl = control;
  67:../system/core_cmFunc.h **** }
  68:../system/core_cmFunc.h **** 
  69:../system/core_cmFunc.h **** 
  70:../system/core_cmFunc.h **** /** \brief  Get ISPR Register
  71:../system/core_cmFunc.h **** 
  72:../system/core_cmFunc.h ****     This function returns the content of the ISPR Register.
  73:../system/core_cmFunc.h **** 
  74:../system/core_cmFunc.h ****     \return               ISPR Register value
  75:../system/core_cmFunc.h ****  */
  76:../system/core_cmFunc.h **** static __INLINE uint32_t __get_IPSR(void)
  77:../system/core_cmFunc.h **** {
  78:../system/core_cmFunc.h ****   register uint32_t __regIPSR          __ASM("ipsr");
  79:../system/core_cmFunc.h ****   return(__regIPSR);
  80:../system/core_cmFunc.h **** }
  81:../system/core_cmFunc.h **** 
  82:../system/core_cmFunc.h **** 
  83:../system/core_cmFunc.h **** /** \brief  Get APSR Register
  84:../system/core_cmFunc.h **** 
  85:../system/core_cmFunc.h ****     This function returns the content of the APSR Register.
  86:../system/core_cmFunc.h **** 
  87:../system/core_cmFunc.h ****     \return               APSR Register value
  88:../system/core_cmFunc.h ****  */
  89:../system/core_cmFunc.h **** static __INLINE uint32_t __get_APSR(void)
  90:../system/core_cmFunc.h **** {
  91:../system/core_cmFunc.h ****   register uint32_t __regAPSR          __ASM("apsr");
  92:../system/core_cmFunc.h ****   return(__regAPSR);
  93:../system/core_cmFunc.h **** }
  94:../system/core_cmFunc.h **** 
  95:../system/core_cmFunc.h **** 
  96:../system/core_cmFunc.h **** /** \brief  Get xPSR Register
  97:../system/core_cmFunc.h **** 
  98:../system/core_cmFunc.h ****     This function returns the content of the xPSR Register.
  99:../system/core_cmFunc.h **** 
 100:../system/core_cmFunc.h ****     \return               xPSR Register value
 101:../system/core_cmFunc.h ****  */
 102:../system/core_cmFunc.h **** static __INLINE uint32_t __get_xPSR(void)
 103:../system/core_cmFunc.h **** {
 104:../system/core_cmFunc.h ****   register uint32_t __regXPSR          __ASM("xpsr");
 105:../system/core_cmFunc.h ****   return(__regXPSR);
 106:../system/core_cmFunc.h **** }
 107:../system/core_cmFunc.h **** 
 108:../system/core_cmFunc.h **** 
 109:../system/core_cmFunc.h **** /** \brief  Get Process Stack Pointer
 110:../system/core_cmFunc.h **** 
 111:../system/core_cmFunc.h ****     This function returns the current value of the Process Stack Pointer (PSP).
 112:../system/core_cmFunc.h **** 
 113:../system/core_cmFunc.h ****     \return               PSP Register value
 114:../system/core_cmFunc.h ****  */
 115:../system/core_cmFunc.h **** static __INLINE uint32_t __get_PSP(void)
 116:../system/core_cmFunc.h **** {
 117:../system/core_cmFunc.h ****   register uint32_t __regProcessStackPointer  __ASM("psp");
 118:../system/core_cmFunc.h ****   return(__regProcessStackPointer);
 119:../system/core_cmFunc.h **** }
 120:../system/core_cmFunc.h **** 
 121:../system/core_cmFunc.h **** 
 122:../system/core_cmFunc.h **** /** \brief  Set Process Stack Pointer
 123:../system/core_cmFunc.h **** 
 124:../system/core_cmFunc.h ****     This function assigns the given value to the Process Stack Pointer (PSP).
 125:../system/core_cmFunc.h **** 
 126:../system/core_cmFunc.h ****     \param [in]    topOfProcStack  Process Stack Pointer value to set
 127:../system/core_cmFunc.h ****  */
 128:../system/core_cmFunc.h **** static __INLINE void __set_PSP(uint32_t topOfProcStack)
 129:../system/core_cmFunc.h **** {
 130:../system/core_cmFunc.h ****   register uint32_t __regProcessStackPointer  __ASM("psp");
 131:../system/core_cmFunc.h ****   __regProcessStackPointer = topOfProcStack;
 132:../system/core_cmFunc.h **** }
 133:../system/core_cmFunc.h **** 
 134:../system/core_cmFunc.h **** 
 135:../system/core_cmFunc.h **** /** \brief  Get Main Stack Pointer
 136:../system/core_cmFunc.h **** 
 137:../system/core_cmFunc.h ****     This function returns the current value of the Main Stack Pointer (MSP).
 138:../system/core_cmFunc.h **** 
 139:../system/core_cmFunc.h ****     \return               MSP Register value
 140:../system/core_cmFunc.h ****  */
 141:../system/core_cmFunc.h **** static __INLINE uint32_t __get_MSP(void)
 142:../system/core_cmFunc.h **** {
 143:../system/core_cmFunc.h ****   register uint32_t __regMainStackPointer     __ASM("msp");
 144:../system/core_cmFunc.h ****   return(__regMainStackPointer);
 145:../system/core_cmFunc.h **** }
 146:../system/core_cmFunc.h **** 
 147:../system/core_cmFunc.h **** 
 148:../system/core_cmFunc.h **** /** \brief  Set Main Stack Pointer
 149:../system/core_cmFunc.h **** 
 150:../system/core_cmFunc.h ****     This function assigns the given value to the Main Stack Pointer (MSP).
 151:../system/core_cmFunc.h **** 
 152:../system/core_cmFunc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 153:../system/core_cmFunc.h ****  */
 154:../system/core_cmFunc.h **** static __INLINE void __set_MSP(uint32_t topOfMainStack)
 155:../system/core_cmFunc.h **** {
 156:../system/core_cmFunc.h ****   register uint32_t __regMainStackPointer     __ASM("msp");
 157:../system/core_cmFunc.h ****   __regMainStackPointer = topOfMainStack;
 158:../system/core_cmFunc.h **** }
 159:../system/core_cmFunc.h **** 
 160:../system/core_cmFunc.h **** 
 161:../system/core_cmFunc.h **** /** \brief  Get Priority Mask
 162:../system/core_cmFunc.h **** 
 163:../system/core_cmFunc.h ****     This function returns the current state of the priority mask bit from the Priority Mask Registe
 164:../system/core_cmFunc.h **** 
 165:../system/core_cmFunc.h ****     \return               Priority Mask value
 166:../system/core_cmFunc.h ****  */
 167:../system/core_cmFunc.h **** static __INLINE uint32_t __get_PRIMASK(void)
 168:../system/core_cmFunc.h **** {
 169:../system/core_cmFunc.h ****   register uint32_t __regPriMask         __ASM("primask");
 170:../system/core_cmFunc.h ****   return(__regPriMask);
 171:../system/core_cmFunc.h **** }
 172:../system/core_cmFunc.h **** 
 173:../system/core_cmFunc.h **** 
 174:../system/core_cmFunc.h **** /** \brief  Set Priority Mask
 175:../system/core_cmFunc.h **** 
 176:../system/core_cmFunc.h ****     This function assigns the given value to the Priority Mask Register.
 177:../system/core_cmFunc.h **** 
 178:../system/core_cmFunc.h ****     \param [in]    priMask  Priority Mask
 179:../system/core_cmFunc.h ****  */
 180:../system/core_cmFunc.h **** static __INLINE void __set_PRIMASK(uint32_t priMask)
 181:../system/core_cmFunc.h **** {
 182:../system/core_cmFunc.h ****   register uint32_t __regPriMask         __ASM("primask");
 183:../system/core_cmFunc.h ****   __regPriMask = (priMask);
 184:../system/core_cmFunc.h **** }
 185:../system/core_cmFunc.h ****  
 186:../system/core_cmFunc.h **** 
 187:../system/core_cmFunc.h **** #if       (__CORTEX_M >= 0x03)
 188:../system/core_cmFunc.h **** 
 189:../system/core_cmFunc.h **** /** \brief  Enable FIQ
 190:../system/core_cmFunc.h **** 
 191:../system/core_cmFunc.h ****     This function enables FIQ interrupts by clearing the F-bit in the CPSR.
 192:../system/core_cmFunc.h ****     Can only be executed in Privileged modes.
 193:../system/core_cmFunc.h ****  */
 194:../system/core_cmFunc.h **** #define __enable_fault_irq                __enable_fiq
 195:../system/core_cmFunc.h **** 
 196:../system/core_cmFunc.h **** 
 197:../system/core_cmFunc.h **** /** \brief  Disable FIQ
 198:../system/core_cmFunc.h **** 
 199:../system/core_cmFunc.h ****     This function disables FIQ interrupts by setting the F-bit in the CPSR.
 200:../system/core_cmFunc.h ****     Can only be executed in Privileged modes.
 201:../system/core_cmFunc.h ****  */
 202:../system/core_cmFunc.h **** #define __disable_fault_irq               __disable_fiq
 203:../system/core_cmFunc.h **** 
 204:../system/core_cmFunc.h **** 
 205:../system/core_cmFunc.h **** /** \brief  Get Base Priority
 206:../system/core_cmFunc.h **** 
 207:../system/core_cmFunc.h ****     This function returns the current value of the Base Priority register.
 208:../system/core_cmFunc.h **** 
 209:../system/core_cmFunc.h ****     \return               Base Priority register value
 210:../system/core_cmFunc.h ****  */
 211:../system/core_cmFunc.h **** static __INLINE uint32_t  __get_BASEPRI(void)
 212:../system/core_cmFunc.h **** {
 213:../system/core_cmFunc.h ****   register uint32_t __regBasePri         __ASM("basepri");
 214:../system/core_cmFunc.h ****   return(__regBasePri);
 215:../system/core_cmFunc.h **** }
 216:../system/core_cmFunc.h **** 
 217:../system/core_cmFunc.h **** 
 218:../system/core_cmFunc.h **** /** \brief  Set Base Priority
 219:../system/core_cmFunc.h **** 
 220:../system/core_cmFunc.h ****     This function assigns the given value to the Base Priority register.
 221:../system/core_cmFunc.h **** 
 222:../system/core_cmFunc.h ****     \param [in]    basePri  Base Priority value to set
 223:../system/core_cmFunc.h ****  */
 224:../system/core_cmFunc.h **** static __INLINE void __set_BASEPRI(uint32_t basePri)
 225:../system/core_cmFunc.h **** {
 226:../system/core_cmFunc.h ****   register uint32_t __regBasePri         __ASM("basepri");
 227:../system/core_cmFunc.h ****   __regBasePri = (basePri & 0xff);
 228:../system/core_cmFunc.h **** }
 229:../system/core_cmFunc.h ****  
 230:../system/core_cmFunc.h **** 
 231:../system/core_cmFunc.h **** /** \brief  Get Fault Mask
 232:../system/core_cmFunc.h **** 
 233:../system/core_cmFunc.h ****     This function returns the current value of the Fault Mask register.
 234:../system/core_cmFunc.h **** 
 235:../system/core_cmFunc.h ****     \return               Fault Mask register value
 236:../system/core_cmFunc.h ****  */
 237:../system/core_cmFunc.h **** static __INLINE uint32_t __get_FAULTMASK(void)
 238:../system/core_cmFunc.h **** {
 239:../system/core_cmFunc.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
 240:../system/core_cmFunc.h ****   return(__regFaultMask);
 241:../system/core_cmFunc.h **** }
 242:../system/core_cmFunc.h **** 
 243:../system/core_cmFunc.h **** 
 244:../system/core_cmFunc.h **** /** \brief  Set Fault Mask
 245:../system/core_cmFunc.h **** 
 246:../system/core_cmFunc.h ****     This function assigns the given value to the Fault Mask register.
 247:../system/core_cmFunc.h **** 
 248:../system/core_cmFunc.h ****     \param [in]    faultMask  Fault Mask value to set
 249:../system/core_cmFunc.h ****  */
 250:../system/core_cmFunc.h **** static __INLINE void __set_FAULTMASK(uint32_t faultMask)
 251:../system/core_cmFunc.h **** {
 252:../system/core_cmFunc.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
 253:../system/core_cmFunc.h ****   __regFaultMask = (faultMask & (uint32_t)1);
 254:../system/core_cmFunc.h **** }
 255:../system/core_cmFunc.h **** 
 256:../system/core_cmFunc.h **** #endif /* (__CORTEX_M >= 0x03) */
 257:../system/core_cmFunc.h **** 
 258:../system/core_cmFunc.h **** 
 259:../system/core_cmFunc.h **** #if       (__CORTEX_M == 0x04)
 260:../system/core_cmFunc.h **** 
 261:../system/core_cmFunc.h **** /** \brief  Get FPSCR
 262:../system/core_cmFunc.h **** 
 263:../system/core_cmFunc.h ****     This function returns the current value of the Floating Point Status/Control register.
 264:../system/core_cmFunc.h **** 
 265:../system/core_cmFunc.h ****     \return               Floating Point Status/Control register value
 266:../system/core_cmFunc.h ****  */
 267:../system/core_cmFunc.h **** static __INLINE uint32_t __get_FPSCR(void)
 268:../system/core_cmFunc.h **** {
 269:../system/core_cmFunc.h **** #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
 270:../system/core_cmFunc.h ****   register uint32_t __regfpscr         __ASM("fpscr");
 271:../system/core_cmFunc.h ****   return(__regfpscr);
 272:../system/core_cmFunc.h **** #else
 273:../system/core_cmFunc.h ****    return(0);
 274:../system/core_cmFunc.h **** #endif
 275:../system/core_cmFunc.h **** }
 276:../system/core_cmFunc.h **** 
 277:../system/core_cmFunc.h **** 
 278:../system/core_cmFunc.h **** /** \brief  Set FPSCR
 279:../system/core_cmFunc.h **** 
 280:../system/core_cmFunc.h ****     This function assigns the given value to the Floating Point Status/Control register.
 281:../system/core_cmFunc.h **** 
 282:../system/core_cmFunc.h ****     \param [in]    fpscr  Floating Point Status/Control value to set
 283:../system/core_cmFunc.h ****  */
 284:../system/core_cmFunc.h **** static __INLINE void __set_FPSCR(uint32_t fpscr)
 285:../system/core_cmFunc.h **** {
 286:../system/core_cmFunc.h **** #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
 287:../system/core_cmFunc.h ****   register uint32_t __regfpscr         __ASM("fpscr");
 288:../system/core_cmFunc.h ****   __regfpscr = (fpscr);
 289:../system/core_cmFunc.h **** #endif
 290:../system/core_cmFunc.h **** }
 291:../system/core_cmFunc.h **** 
 292:../system/core_cmFunc.h **** #endif /* (__CORTEX_M == 0x04) */
 293:../system/core_cmFunc.h **** 
 294:../system/core_cmFunc.h **** 
 295:../system/core_cmFunc.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 296:../system/core_cmFunc.h **** /* IAR iccarm specific functions */
 297:../system/core_cmFunc.h **** 
 298:../system/core_cmFunc.h **** #include <cmsis_iar.h>
 299:../system/core_cmFunc.h **** 
 300:../system/core_cmFunc.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 301:../system/core_cmFunc.h **** /* GNU gcc specific functions */
 302:../system/core_cmFunc.h **** 
 303:../system/core_cmFunc.h **** /** \brief  Enable IRQ Interrupts
 304:../system/core_cmFunc.h **** 
 305:../system/core_cmFunc.h ****   This function enables IRQ interrupts by clearing the I-bit in the CPSR.
 306:../system/core_cmFunc.h ****   Can only be executed in Privileged modes.
 307:../system/core_cmFunc.h ****  */
 308:../system/core_cmFunc.h **** __attribute__( ( always_inline ) ) static __INLINE void __enable_irq(void)
 309:../system/core_cmFunc.h **** {
 310:../system/core_cmFunc.h ****   __ASM volatile ("cpsie i");
 311:../system/core_cmFunc.h **** }
 312:../system/core_cmFunc.h **** 
 313:../system/core_cmFunc.h **** 
 314:../system/core_cmFunc.h **** /** \brief  Disable IRQ Interrupts
 315:../system/core_cmFunc.h **** 
 316:../system/core_cmFunc.h ****   This function disables IRQ interrupts by setting the I-bit in the CPSR.
 317:../system/core_cmFunc.h ****   Can only be executed in Privileged modes.
 318:../system/core_cmFunc.h ****  */
 319:../system/core_cmFunc.h **** __attribute__( ( always_inline ) ) static __INLINE void __disable_irq(void)
 320:../system/core_cmFunc.h **** {
 321:../system/core_cmFunc.h ****   __ASM volatile ("cpsid i");
 322:../system/core_cmFunc.h **** }
 323:../system/core_cmFunc.h **** 
 324:../system/core_cmFunc.h **** 
 325:../system/core_cmFunc.h **** /** \brief  Get Control Register
 326:../system/core_cmFunc.h **** 
 327:../system/core_cmFunc.h ****     This function returns the content of the Control Register.
 328:../system/core_cmFunc.h **** 
 329:../system/core_cmFunc.h ****     \return               Control Register value
 330:../system/core_cmFunc.h ****  */
 331:../system/core_cmFunc.h **** __attribute__( ( always_inline ) ) static __INLINE uint32_t __get_CONTROL(void)
 332:../system/core_cmFunc.h **** {
 333:../system/core_cmFunc.h ****   uint32_t result;
 334:../system/core_cmFunc.h **** 
 335:../system/core_cmFunc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 336:../system/core_cmFunc.h ****   return(result);
 337:../system/core_cmFunc.h **** }
 338:../system/core_cmFunc.h **** 
 339:../system/core_cmFunc.h **** 
 340:../system/core_cmFunc.h **** /** \brief  Set Control Register
 341:../system/core_cmFunc.h **** 
 342:../system/core_cmFunc.h ****     This function writes the given value to the Control Register.
 343:../system/core_cmFunc.h **** 
 344:../system/core_cmFunc.h ****     \param [in]    control  Control Register value to set
 345:../system/core_cmFunc.h ****  */
 346:../system/core_cmFunc.h **** __attribute__( ( always_inline ) ) static __INLINE void __set_CONTROL(uint32_t control)
 347:../system/core_cmFunc.h **** {
 348:../system/core_cmFunc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) );
 349:../system/core_cmFunc.h **** }
 350:../system/core_cmFunc.h **** 
 351:../system/core_cmFunc.h **** 
 352:../system/core_cmFunc.h **** /** \brief  Get ISPR Register
 353:../system/core_cmFunc.h **** 
 354:../system/core_cmFunc.h ****     This function returns the content of the ISPR Register.
 355:../system/core_cmFunc.h **** 
 356:../system/core_cmFunc.h ****     \return               ISPR Register value
 357:../system/core_cmFunc.h ****  */
 358:../system/core_cmFunc.h **** __attribute__( ( always_inline ) ) static __INLINE uint32_t __get_IPSR(void)
 359:../system/core_cmFunc.h **** {
 360:../system/core_cmFunc.h ****   uint32_t result;
 361:../system/core_cmFunc.h **** 
 362:../system/core_cmFunc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 132              		.loc 2 362 0
 133              	@ 362 "../system/core_cmFunc.h" 1
 134 0062 EFF30583 		MRS r3, ipsr
 135              	@ 0 "" 2
 136              		.thumb
 137 0066 7B60     		str	r3, [r7, #4]
 363:../system/core_cmFunc.h ****   return(result);
 138              		.loc 2 363 0
 139 0068 7B68     		ldr	r3, [r7, #4]
 140              	.LBE5:
 141              	.LBE4:
  35:../system/cmsis_os.c ****   return __get_IPSR() != 0;
 142              		.loc 1 35 0
 143 006a 002B     		cmp	r3, #0
 144 006c 0CBF     		ite	eq
 145 006e 0023     		moveq	r3, #0
 146 0070 0123     		movne	r3, #1
 147 0072 DBB2     		uxtb	r3, r3
  36:../system/cmsis_os.c **** }
 148              		.loc 1 36 0
 149 0074 1846     		mov	r0, r3
 150 0076 0C37     		adds	r7, r7, #12
 151 0078 BD46     		mov	sp, r7
 152              		@ sp needed
 153 007a 5DF8047B 		ldr	r7, [sp], #4
 154 007e 7047     		bx	lr
 155              		.cfi_endproc
 156              	.LFE15:
 158              		.align	2
 159              		.global	osKernelStart
 160              		.thumb
 161              		.thumb_func
 163              	osKernelStart:
 164              	.LFB16:
  37:../system/cmsis_os.c **** 
  38:../system/cmsis_os.c **** /*********************** Kernel Control Functions *****************************/
  39:../system/cmsis_os.c **** /**
  40:../system/cmsis_os.c **** * @brief  Start the RTOS Kernel with executing the specified thread.
  41:../system/cmsis_os.c **** * @param  thread_def    thread definition referenced with \ref osThread.
  42:../system/cmsis_os.c **** * @param  argument      pointer that is passed to the thread function as start argument.
  43:../system/cmsis_os.c **** * @retval status code that indicates the execution status of the function
  44:../system/cmsis_os.c **** * @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
  45:../system/cmsis_os.c **** */
  46:../system/cmsis_os.c **** osStatus osKernelStart (osThreadDef_t *thread_def, void *argument)
  47:../system/cmsis_os.c **** {
 165              		.loc 1 47 0
 166              		.cfi_startproc
 167              		@ args = 0, pretend = 0, frame = 8
 168              		@ frame_needed = 1, uses_anonymous_args = 0
 169 0080 80B5     		push	{r7, lr}
 170              		.cfi_def_cfa_offset 8
 171              		.cfi_offset 7, -8
 172              		.cfi_offset 14, -4
 173 0082 82B0     		sub	sp, sp, #8
 174              		.cfi_def_cfa_offset 16
 175 0084 00AF     		add	r7, sp, #0
 176              		.cfi_def_cfa_register 7
 177 0086 7860     		str	r0, [r7, #4]
 178 0088 3960     		str	r1, [r7]
  48:../system/cmsis_os.c ****   (void) argument;
  49:../system/cmsis_os.c ****   
  50:../system/cmsis_os.c ****   if(thread_def != NULL)
 179              		.loc 1 50 0
 180 008a 7B68     		ldr	r3, [r7, #4]
 181 008c 002B     		cmp	r3, #0
 182 008e 03D0     		beq	.L11
  51:../system/cmsis_os.c ****   {
  52:../system/cmsis_os.c ****     osThreadCreate(thread_def, argument);
 183              		.loc 1 52 0
 184 0090 7868     		ldr	r0, [r7, #4]
 185 0092 3968     		ldr	r1, [r7]
 186 0094 FFF7FEFF 		bl	osThreadCreate
 187              	.L11:
  53:../system/cmsis_os.c ****   }
  54:../system/cmsis_os.c ****   
  55:../system/cmsis_os.c ****   vTaskStartScheduler();
 188              		.loc 1 55 0
 189 0098 FFF7FEFF 		bl	vTaskStartScheduler
  56:../system/cmsis_os.c ****   
  57:../system/cmsis_os.c ****   return osOK;
 190              		.loc 1 57 0
 191 009c 0023     		movs	r3, #0
  58:../system/cmsis_os.c **** }
 192              		.loc 1 58 0
 193 009e 1846     		mov	r0, r3
 194 00a0 0837     		adds	r7, r7, #8
 195 00a2 BD46     		mov	sp, r7
 196              		@ sp needed
 197 00a4 80BD     		pop	{r7, pc}
 198              		.cfi_endproc
 199              	.LFE16:
 201 00a6 00BF     		.align	2
 202              		.global	osKernelSysTick
 203              		.thumb
 204              		.thumb_func
 206              	osKernelSysTick:
 207              	.LFB17:
  59:../system/cmsis_os.c **** 
  60:../system/cmsis_os.c **** /**
  61:../system/cmsis_os.c **** * @brief  Get the value of the Kernel SysTick timer
  62:../system/cmsis_os.c **** * @param  None
  63:../system/cmsis_os.c **** * @retval None
  64:../system/cmsis_os.c **** * @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
  65:../system/cmsis_os.c **** */
  66:../system/cmsis_os.c **** uint32_t osKernelSysTick(void)
  67:../system/cmsis_os.c **** {
 208              		.loc 1 67 0
 209              		.cfi_startproc
 210              		@ args = 0, pretend = 0, frame = 0
 211              		@ frame_needed = 1, uses_anonymous_args = 0
 212 00a8 80B5     		push	{r7, lr}
 213              		.cfi_def_cfa_offset 8
 214              		.cfi_offset 7, -8
 215              		.cfi_offset 14, -4
 216 00aa 00AF     		add	r7, sp, #0
 217              		.cfi_def_cfa_register 7
  68:../system/cmsis_os.c ****   if (inHandlerMode()) {
 218              		.loc 1 68 0
 219 00ac FFF7D6FF 		bl	inHandlerMode
 220 00b0 0346     		mov	r3, r0
 221 00b2 002B     		cmp	r3, #0
 222 00b4 03D0     		beq	.L14
  69:../system/cmsis_os.c ****     return xTaskGetTickCountFromISR();
 223              		.loc 1 69 0
 224 00b6 FFF7FEFF 		bl	xTaskGetTickCountFromISR
 225 00ba 0346     		mov	r3, r0
 226 00bc 02E0     		b	.L15
 227              	.L14:
  70:../system/cmsis_os.c ****   }
  71:../system/cmsis_os.c ****   else {
  72:../system/cmsis_os.c ****     return xTaskGetTickCount();
 228              		.loc 1 72 0
 229 00be FFF7FEFF 		bl	xTaskGetTickCount
 230 00c2 0346     		mov	r3, r0
 231              	.L15:
  73:../system/cmsis_os.c ****   }
  74:../system/cmsis_os.c **** }
 232              		.loc 1 74 0
 233 00c4 1846     		mov	r0, r3
 234 00c6 80BD     		pop	{r7, pc}
 235              		.cfi_endproc
 236              	.LFE17:
 238              		.align	2
 239              		.global	osKernelRunning
 240              		.thumb
 241              		.thumb_func
 243              	osKernelRunning:
 244              	.LFB18:
  75:../system/cmsis_os.c **** 
  76:../system/cmsis_os.c **** /**
  77:../system/cmsis_os.c **** * @brief  Check if the RTOS kernel is already started
  78:../system/cmsis_os.c **** * @param  None
  79:../system/cmsis_os.c **** * @retval (0) RTOS is not started
  80:../system/cmsis_os.c **** *         (1) RTOS is started
  81:../system/cmsis_os.c **** *         (-1) if this feature is disabled in FreeRTOSConfig.h 
  82:../system/cmsis_os.c **** * @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
  83:../system/cmsis_os.c **** */
  84:../system/cmsis_os.c **** int32_t osKernelRunning(void)
  85:../system/cmsis_os.c **** {
 245              		.loc 1 85 0
 246              		.cfi_startproc
 247              		@ args = 0, pretend = 0, frame = 0
 248              		@ frame_needed = 1, uses_anonymous_args = 0
 249              		@ link register save eliminated.
 250 00c8 80B4     		push	{r7}
 251              		.cfi_def_cfa_offset 4
 252              		.cfi_offset 7, -4
 253 00ca 00AF     		add	r7, sp, #0
 254              		.cfi_def_cfa_register 7
  86:../system/cmsis_os.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  87:../system/cmsis_os.c ****   if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
  88:../system/cmsis_os.c ****     return 0;
  89:../system/cmsis_os.c ****   else
  90:../system/cmsis_os.c ****     return 1;
  91:../system/cmsis_os.c **** #else
  92:../system/cmsis_os.c **** 	return (-1);
 255              		.loc 1 92 0
 256 00cc 4FF0FF33 		mov	r3, #-1
  93:../system/cmsis_os.c **** #endif
  94:../system/cmsis_os.c **** 	
  95:../system/cmsis_os.c **** }
 257              		.loc 1 95 0
 258 00d0 1846     		mov	r0, r3
 259 00d2 BD46     		mov	sp, r7
 260              		@ sp needed
 261 00d4 5DF8047B 		ldr	r7, [sp], #4
 262 00d8 7047     		bx	lr
 263              		.cfi_endproc
 264              	.LFE18:
 266 00da 00BF     		.align	2
 267              		.global	osThreadCreate
 268              		.thumb
 269              		.thumb_func
 271              	osThreadCreate:
 272              	.LFB19:
  96:../system/cmsis_os.c **** 
  97:../system/cmsis_os.c **** /*********************** Thread Management *****************************/
  98:../system/cmsis_os.c **** /**
  99:../system/cmsis_os.c **** * @brief  Create a thread and add it to Active Threads and set it to state READY.
 100:../system/cmsis_os.c **** * @param  thread_def    thread definition referenced with \ref osThread.
 101:../system/cmsis_os.c **** * @param  argument      pointer that is passed to the thread function as start argument.
 102:../system/cmsis_os.c **** * @retval thread ID for reference by other functions or NULL in case of error.
 103:../system/cmsis_os.c **** * @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
 104:../system/cmsis_os.c **** */
 105:../system/cmsis_os.c **** osThreadId osThreadCreate (osThreadDef_t *thread_def, void *argument)
 106:../system/cmsis_os.c **** {
 273              		.loc 1 106 0
 274              		.cfi_startproc
 275              		@ args = 0, pretend = 0, frame = 16
 276              		@ frame_needed = 1, uses_anonymous_args = 0
 277 00dc F0B5     		push	{r4, r5, r6, r7, lr}
 278              		.cfi_def_cfa_offset 20
 279              		.cfi_offset 4, -20
 280              		.cfi_offset 5, -16
 281              		.cfi_offset 6, -12
 282              		.cfi_offset 7, -8
 283              		.cfi_offset 14, -4
 284 00de 89B0     		sub	sp, sp, #36
 285              		.cfi_def_cfa_offset 56
 286 00e0 04AF     		add	r7, sp, #16
 287              		.cfi_def_cfa 7, 40
 288 00e2 7860     		str	r0, [r7, #4]
 289 00e4 3960     		str	r1, [r7]
 107:../system/cmsis_os.c ****   xTaskHandle handle;
 108:../system/cmsis_os.c ****   
 109:../system/cmsis_os.c ****   
 110:../system/cmsis_os.c ****   xTaskCreate((pdTASK_CODE)thread_def->pthread,
 290              		.loc 1 110 0
 291 00e6 7B68     		ldr	r3, [r7, #4]
 292 00e8 5E68     		ldr	r6, [r3, #4]
 293 00ea 7B68     		ldr	r3, [r7, #4]
 294 00ec 1D68     		ldr	r5, [r3]
 295 00ee 7B68     		ldr	r3, [r7, #4]
 296 00f0 1B69     		ldr	r3, [r3, #16]
 297 00f2 9CB2     		uxth	r4, r3
 298 00f4 7B68     		ldr	r3, [r7, #4]
 299 00f6 1B89     		ldrh	r3, [r3, #8]
 300 00f8 1BB2     		sxth	r3, r3
 301 00fa 1846     		mov	r0, r3
 302 00fc FFF780FF 		bl	makeFreeRtosPriority
 303 0100 0346     		mov	r3, r0
 304 0102 0093     		str	r3, [sp]
 305 0104 07F10C03 		add	r3, r7, #12
 306 0108 0193     		str	r3, [sp, #4]
 307 010a 0023     		movs	r3, #0
 308 010c 0293     		str	r3, [sp, #8]
 309 010e 0023     		movs	r3, #0
 310 0110 0393     		str	r3, [sp, #12]
 311 0112 3046     		mov	r0, r6
 312 0114 2946     		mov	r1, r5
 313 0116 2246     		mov	r2, r4
 314 0118 3B68     		ldr	r3, [r7]
 315 011a FFF7FEFF 		bl	xTaskGenericCreate
 111:../system/cmsis_os.c ****               (const signed portCHAR *)thread_def->name,
 112:../system/cmsis_os.c ****               thread_def->stacksize,
 113:../system/cmsis_os.c ****               argument,
 114:../system/cmsis_os.c ****               makeFreeRtosPriority(thread_def->tpriority),
 115:../system/cmsis_os.c ****               &handle);
 116:../system/cmsis_os.c ****   
 117:../system/cmsis_os.c ****   return handle;
 316              		.loc 1 117 0
 317 011e FB68     		ldr	r3, [r7, #12]
 118:../system/cmsis_os.c **** }
 318              		.loc 1 118 0
 319 0120 1846     		mov	r0, r3
 320 0122 1437     		adds	r7, r7, #20
 321 0124 BD46     		mov	sp, r7
 322              		@ sp needed
 323 0126 F0BD     		pop	{r4, r5, r6, r7, pc}
 324              		.cfi_endproc
 325              	.LFE19:
 327              		.align	2
 328              		.global	osThreadGetId
 329              		.thumb
 330              		.thumb_func
 332              	osThreadGetId:
 333              	.LFB20:
 119:../system/cmsis_os.c **** 
 120:../system/cmsis_os.c **** /**
 121:../system/cmsis_os.c **** * @brief  Return the thread ID of the current running thread.
 122:../system/cmsis_os.c **** * @retval thread ID for reference by other functions or NULL in case of error.
 123:../system/cmsis_os.c **** * @note   MUST REMAIN UNCHANGED: \b osThreadGetId shall be consistent in every CMSIS-RTOS.
 124:../system/cmsis_os.c **** */
 125:../system/cmsis_os.c **** osThreadId osThreadGetId (void)
 126:../system/cmsis_os.c **** {
 334              		.loc 1 126 0
 335              		.cfi_startproc
 336              		@ args = 0, pretend = 0, frame = 0
 337              		@ frame_needed = 1, uses_anonymous_args = 0
 338 0128 80B5     		push	{r7, lr}
 339              		.cfi_def_cfa_offset 8
 340              		.cfi_offset 7, -8
 341              		.cfi_offset 14, -4
 342 012a 00AF     		add	r7, sp, #0
 343              		.cfi_def_cfa_register 7
 127:../system/cmsis_os.c ****   return xTaskGetCurrentTaskHandle();
 344              		.loc 1 127 0
 345 012c FFF7FEFF 		bl	xTaskGetCurrentTaskHandle
 346 0130 0346     		mov	r3, r0
 128:../system/cmsis_os.c **** }
 347              		.loc 1 128 0
 348 0132 1846     		mov	r0, r3
 349 0134 80BD     		pop	{r7, pc}
 350              		.cfi_endproc
 351              	.LFE20:
 353 0136 00BF     		.align	2
 354              		.global	osThreadTerminate
 355              		.thumb
 356              		.thumb_func
 358              	osThreadTerminate:
 359              	.LFB21:
 129:../system/cmsis_os.c **** 
 130:../system/cmsis_os.c **** /**
 131:../system/cmsis_os.c **** * @brief  Terminate execution of a thread and remove it from Active Threads.
 132:../system/cmsis_os.c **** * @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
 133:../system/cmsis_os.c **** * @retval  status code that indicates the execution status of the function.
 134:../system/cmsis_os.c **** * @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
 135:../system/cmsis_os.c **** */
 136:../system/cmsis_os.c **** osStatus osThreadTerminate (osThreadId thread_id)
 137:../system/cmsis_os.c **** {
 360              		.loc 1 137 0
 361              		.cfi_startproc
 362              		@ args = 0, pretend = 0, frame = 8
 363              		@ frame_needed = 1, uses_anonymous_args = 0
 364 0138 80B5     		push	{r7, lr}
 365              		.cfi_def_cfa_offset 8
 366              		.cfi_offset 7, -8
 367              		.cfi_offset 14, -4
 368 013a 82B0     		sub	sp, sp, #8
 369              		.cfi_def_cfa_offset 16
 370 013c 00AF     		add	r7, sp, #0
 371              		.cfi_def_cfa_register 7
 372 013e 7860     		str	r0, [r7, #4]
 138:../system/cmsis_os.c ****   vTaskDelete(thread_id);
 373              		.loc 1 138 0
 374 0140 7868     		ldr	r0, [r7, #4]
 375 0142 FFF7FEFF 		bl	vTaskDelete
 139:../system/cmsis_os.c ****   
 140:../system/cmsis_os.c ****   return osOK;
 376              		.loc 1 140 0
 377 0146 0023     		movs	r3, #0
 141:../system/cmsis_os.c **** }
 378              		.loc 1 141 0
 379 0148 1846     		mov	r0, r3
 380 014a 0837     		adds	r7, r7, #8
 381 014c BD46     		mov	sp, r7
 382              		@ sp needed
 383 014e 80BD     		pop	{r7, pc}
 384              		.cfi_endproc
 385              	.LFE21:
 387              		.align	2
 388              		.global	osThreadYield
 389              		.thumb
 390              		.thumb_func
 392              	osThreadYield:
 393              	.LFB22:
 142:../system/cmsis_os.c **** 
 143:../system/cmsis_os.c **** /**
 144:../system/cmsis_os.c **** * @brief  Pass control to next thread that is in state \b READY.
 145:../system/cmsis_os.c **** * @retval status code that indicates the execution status of the function.
 146:../system/cmsis_os.c **** * @note   MUST REMAIN UNCHANGED: \b osThreadYield shall be consistent in every CMSIS-RTOS.
 147:../system/cmsis_os.c **** */
 148:../system/cmsis_os.c **** osStatus osThreadYield (void)
 149:../system/cmsis_os.c **** {
 394              		.loc 1 149 0
 395              		.cfi_startproc
 396              		@ args = 0, pretend = 0, frame = 0
 397              		@ frame_needed = 1, uses_anonymous_args = 0
 398 0150 80B5     		push	{r7, lr}
 399              		.cfi_def_cfa_offset 8
 400              		.cfi_offset 7, -8
 401              		.cfi_offset 14, -4
 402 0152 00AF     		add	r7, sp, #0
 403              		.cfi_def_cfa_register 7
 150:../system/cmsis_os.c ****   taskYIELD();
 404              		.loc 1 150 0
 405 0154 FFF7FEFF 		bl	vPortYield
 151:../system/cmsis_os.c ****   
 152:../system/cmsis_os.c ****   return osOK;
 406              		.loc 1 152 0
 407 0158 0023     		movs	r3, #0
 153:../system/cmsis_os.c **** }
 408              		.loc 1 153 0
 409 015a 1846     		mov	r0, r3
 410 015c 80BD     		pop	{r7, pc}
 411              		.cfi_endproc
 412              	.LFE22:
 414 015e 00BF     		.align	2
 415              		.global	osThreadSetPriority
 416              		.thumb
 417              		.thumb_func
 419              	osThreadSetPriority:
 420              	.LFB23:
 154:../system/cmsis_os.c **** 
 155:../system/cmsis_os.c **** /**
 156:../system/cmsis_os.c **** * @brief   Change priority of an active thread.
 157:../system/cmsis_os.c **** * @param   thread_id     thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
 158:../system/cmsis_os.c **** * @param   priority      new priority value for the thread function.
 159:../system/cmsis_os.c **** * @retval  status code that indicates the execution status of the function.
 160:../system/cmsis_os.c **** * @note   MUST REMAIN UNCHANGED: \b osThreadSetPriority shall be consistent in every CMSIS-RTOS.
 161:../system/cmsis_os.c **** */
 162:../system/cmsis_os.c **** osStatus osThreadSetPriority (osThreadId thread_id, osPriority priority)
 163:../system/cmsis_os.c **** {
 421              		.loc 1 163 0
 422              		.cfi_startproc
 423              		@ args = 0, pretend = 0, frame = 8
 424              		@ frame_needed = 1, uses_anonymous_args = 0
 425 0160 80B5     		push	{r7, lr}
 426              		.cfi_def_cfa_offset 8
 427              		.cfi_offset 7, -8
 428              		.cfi_offset 14, -4
 429 0162 82B0     		sub	sp, sp, #8
 430              		.cfi_def_cfa_offset 16
 431 0164 00AF     		add	r7, sp, #0
 432              		.cfi_def_cfa_register 7
 433 0166 7860     		str	r0, [r7, #4]
 434 0168 0B46     		mov	r3, r1
 435 016a 7B80     		strh	r3, [r7, #2]	@ movhi
 164:../system/cmsis_os.c ****   vTaskPrioritySet(thread_id, makeFreeRtosPriority(priority));
 436              		.loc 1 164 0
 437 016c B7F90230 		ldrsh	r3, [r7, #2]
 438 0170 1846     		mov	r0, r3
 439 0172 FFF745FF 		bl	makeFreeRtosPriority
 440 0176 0346     		mov	r3, r0
 441 0178 7868     		ldr	r0, [r7, #4]
 442 017a 1946     		mov	r1, r3
 443 017c FFF7FEFF 		bl	vTaskPrioritySet
 165:../system/cmsis_os.c ****   
 166:../system/cmsis_os.c ****   return osOK;
 444              		.loc 1 166 0
 445 0180 0023     		movs	r3, #0
 167:../system/cmsis_os.c **** }
 446              		.loc 1 167 0
 447 0182 1846     		mov	r0, r3
 448 0184 0837     		adds	r7, r7, #8
 449 0186 BD46     		mov	sp, r7
 450              		@ sp needed
 451 0188 80BD     		pop	{r7, pc}
 452              		.cfi_endproc
 453              	.LFE23:
 455 018a 00BF     		.align	2
 456              		.global	osThreadGetPriority
 457              		.thumb
 458              		.thumb_func
 460              	osThreadGetPriority:
 461              	.LFB24:
 168:../system/cmsis_os.c **** 
 169:../system/cmsis_os.c **** /**
 170:../system/cmsis_os.c **** * @brief   Get current priority of an active thread.
 171:../system/cmsis_os.c **** * @param   thread_id     thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
 172:../system/cmsis_os.c **** * @retval  current priority value of the thread function.
 173:../system/cmsis_os.c **** * @note   MUST REMAIN UNCHANGED: \b osThreadGetPriority shall be consistent in every CMSIS-RTOS.
 174:../system/cmsis_os.c **** */
 175:../system/cmsis_os.c **** osPriority osThreadGetPriority (osThreadId thread_id)
 176:../system/cmsis_os.c **** {
 462              		.loc 1 176 0
 463              		.cfi_startproc
 464              		@ args = 0, pretend = 0, frame = 8
 465              		@ frame_needed = 1, uses_anonymous_args = 0
 466 018c 80B5     		push	{r7, lr}
 467              		.cfi_def_cfa_offset 8
 468              		.cfi_offset 7, -8
 469              		.cfi_offset 14, -4
 470 018e 82B0     		sub	sp, sp, #8
 471              		.cfi_def_cfa_offset 16
 472 0190 00AF     		add	r7, sp, #0
 473              		.cfi_def_cfa_register 7
 474 0192 7860     		str	r0, [r7, #4]
 177:../system/cmsis_os.c ****   return makeCmsisPriority(uxTaskPriorityGet(thread_id));
 475              		.loc 1 177 0
 476 0194 7868     		ldr	r0, [r7, #4]
 477 0196 FFF7FEFF 		bl	uxTaskPriorityGet
 478 019a 0346     		mov	r3, r0
 479 019c 1846     		mov	r0, r3
 480 019e FFF747FF 		bl	makeCmsisPriority
 481 01a2 0346     		mov	r3, r0
 178:../system/cmsis_os.c **** }
 482              		.loc 1 178 0
 483 01a4 1846     		mov	r0, r3
 484 01a6 0837     		adds	r7, r7, #8
 485 01a8 BD46     		mov	sp, r7
 486              		@ sp needed
 487 01aa 80BD     		pop	{r7, pc}
 488              		.cfi_endproc
 489              	.LFE24:
 491              		.align	2
 492              		.global	osDelay
 493              		.thumb
 494              		.thumb_func
 496              	osDelay:
 497              	.LFB25:
 179:../system/cmsis_os.c **** 
 180:../system/cmsis_os.c **** /*********************** Generic Wait Functions *******************************/
 181:../system/cmsis_os.c **** /**
 182:../system/cmsis_os.c **** * @brief   Wait for Timeout (Time Delay)
 183:../system/cmsis_os.c **** * @param   millisec      time delay value
 184:../system/cmsis_os.c **** * @retval  status code that indicates the execution status of the function.
 185:../system/cmsis_os.c **** */
 186:../system/cmsis_os.c **** osStatus osDelay (uint32_t millisec)
 187:../system/cmsis_os.c **** {
 498              		.loc 1 187 0
 499              		.cfi_startproc
 500              		@ args = 0, pretend = 0, frame = 16
 501              		@ frame_needed = 1, uses_anonymous_args = 0
 502 01ac 80B5     		push	{r7, lr}
 503              		.cfi_def_cfa_offset 8
 504              		.cfi_offset 7, -8
 505              		.cfi_offset 14, -4
 506 01ae 84B0     		sub	sp, sp, #16
 507              		.cfi_def_cfa_offset 24
 508 01b0 00AF     		add	r7, sp, #0
 509              		.cfi_def_cfa_register 7
 510 01b2 7860     		str	r0, [r7, #4]
 188:../system/cmsis_os.c **** #if INCLUDE_vTaskDelay
 189:../system/cmsis_os.c ****   portTickType ticks = millisec / portTICK_RATE_MS;
 511              		.loc 1 189 0
 512 01b4 7B68     		ldr	r3, [r7, #4]
 513 01b6 FB60     		str	r3, [r7, #12]
 190:../system/cmsis_os.c ****   
 191:../system/cmsis_os.c ****   vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 514              		.loc 1 191 0
 515 01b8 FB68     		ldr	r3, [r7, #12]
 516 01ba 002B     		cmp	r3, #0
 517 01bc 01D0     		beq	.L31
 518              		.loc 1 191 0 is_stmt 0 discriminator 1
 519 01be FB68     		ldr	r3, [r7, #12]
 520 01c0 00E0     		b	.L32
 521              	.L31:
 522              		.loc 1 191 0 discriminator 2
 523 01c2 0123     		movs	r3, #1
 524              	.L32:
 525              		.loc 1 191 0 discriminator 3
 526 01c4 1846     		mov	r0, r3
 527 01c6 FFF7FEFF 		bl	vTaskDelay
 192:../system/cmsis_os.c ****   
 193:../system/cmsis_os.c ****   return osOK;
 528              		.loc 1 193 0 is_stmt 1 discriminator 3
 529 01ca 0023     		movs	r3, #0
 194:../system/cmsis_os.c **** #else
 195:../system/cmsis_os.c ****   (void) millisec;
 196:../system/cmsis_os.c ****   
 197:../system/cmsis_os.c ****   return osErrorResource;
 198:../system/cmsis_os.c **** #endif
 199:../system/cmsis_os.c **** }
 530              		.loc 1 199 0 discriminator 3
 531 01cc 1846     		mov	r0, r3
 532 01ce 1037     		adds	r7, r7, #16
 533 01d0 BD46     		mov	sp, r7
 534              		@ sp needed
 535 01d2 80BD     		pop	{r7, pc}
 536              		.cfi_endproc
 537              	.LFE25:
 539              		.align	2
 540              		.global	osTimerCreate
 541              		.thumb
 542              		.thumb_func
 544              	osTimerCreate:
 545              	.LFB26:
 200:../system/cmsis_os.c **** 
 201:../system/cmsis_os.c **** #if (defined (osFeature_Wait)  &&  (osFeature_Wait != 0)) /* Generic Wait available */
 202:../system/cmsis_os.c **** /**
 203:../system/cmsis_os.c **** * @brief  Wait for Signal, Message, Mail, or Timeout
 204:../system/cmsis_os.c **** * @param   millisec  timeout value or 0 in case of no time-out
 205:../system/cmsis_os.c **** * @retval  event that contains signal, message, or mail information or error code.
 206:../system/cmsis_os.c **** * @note   MUST REMAIN UNCHANGED: \b osWait shall be consistent in every CMSIS-RTOS.
 207:../system/cmsis_os.c **** */
 208:../system/cmsis_os.c **** osEvent osWait (uint32_t millisec);
 209:../system/cmsis_os.c **** 
 210:../system/cmsis_os.c **** #endif  /* Generic Wait available */
 211:../system/cmsis_os.c **** 
 212:../system/cmsis_os.c **** /***********************  Timer Management Functions ***************************/
 213:../system/cmsis_os.c **** /**
 214:../system/cmsis_os.c **** * @brief  Create a timer.
 215:../system/cmsis_os.c **** * @param  timer_def     timer object referenced with \ref osTimer.
 216:../system/cmsis_os.c **** * @param  type          osTimerOnce for one-shot or osTimerPeriodic for periodic behavior.
 217:../system/cmsis_os.c **** * @param  argument      argument to the timer call back function.
 218:../system/cmsis_os.c **** * @retval  timer ID for reference by other functions or NULL in case of error.
 219:../system/cmsis_os.c **** * @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
 220:../system/cmsis_os.c **** */
 221:../system/cmsis_os.c **** osTimerId osTimerCreate (osTimerDef_t *timer_def, os_timer_type type, void *argument)
 222:../system/cmsis_os.c **** {
 546              		.loc 1 222 0
 547              		.cfi_startproc
 548              		@ args = 0, pretend = 0, frame = 16
 549              		@ frame_needed = 1, uses_anonymous_args = 0
 550              		@ link register save eliminated.
 551 01d4 80B4     		push	{r7}
 552              		.cfi_def_cfa_offset 4
 553              		.cfi_offset 7, -4
 554 01d6 85B0     		sub	sp, sp, #20
 555              		.cfi_def_cfa_offset 24
 556 01d8 00AF     		add	r7, sp, #0
 557              		.cfi_def_cfa_register 7
 558 01da F860     		str	r0, [r7, #12]
 559 01dc 0B46     		mov	r3, r1
 560 01de 7A60     		str	r2, [r7, #4]
 561 01e0 FB72     		strb	r3, [r7, #11]
 223:../system/cmsis_os.c **** #if (configUSE_TIMERS == 1)
 224:../system/cmsis_os.c ****   return xTimerCreate((const signed char *)"",
 225:../system/cmsis_os.c ****                       1, // period should be filled when starting the Timer using osTimerStart
 226:../system/cmsis_os.c ****                       (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
 227:../system/cmsis_os.c ****                       (void *) argument,
 228:../system/cmsis_os.c ****                       (pdTASK_CODE)timer_def->ptimer);
 229:../system/cmsis_os.c **** #else 
 230:../system/cmsis_os.c **** 	return NULL;
 562              		.loc 1 230 0
 563 01e2 0023     		movs	r3, #0
 231:../system/cmsis_os.c **** #endif
 232:../system/cmsis_os.c **** }
 564              		.loc 1 232 0
 565 01e4 1846     		mov	r0, r3
 566 01e6 1437     		adds	r7, r7, #20
 567 01e8 BD46     		mov	sp, r7
 568              		@ sp needed
 569 01ea 5DF8047B 		ldr	r7, [sp], #4
 570 01ee 7047     		bx	lr
 571              		.cfi_endproc
 572              	.LFE26:
 574              		.align	2
 575              		.global	osTimerStart
 576              		.thumb
 577              		.thumb_func
 579              	osTimerStart:
 580              	.LFB27:
 233:../system/cmsis_os.c **** 
 234:../system/cmsis_os.c **** /**
 235:../system/cmsis_os.c **** * @brief  Start or restart a timer.
 236:../system/cmsis_os.c **** * @param  timer_id      timer ID obtained by \ref osTimerCreate.
 237:../system/cmsis_os.c **** * @param  millisec      time delay value of the timer.
 238:../system/cmsis_os.c **** * @retval  status code that indicates the execution status of the function
 239:../system/cmsis_os.c **** * @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
 240:../system/cmsis_os.c **** */
 241:../system/cmsis_os.c **** osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
 242:../system/cmsis_os.c **** {
 581              		.loc 1 242 0
 582              		.cfi_startproc
 583              		@ args = 0, pretend = 0, frame = 16
 584              		@ frame_needed = 1, uses_anonymous_args = 0
 585              		@ link register save eliminated.
 586 01f0 80B4     		push	{r7}
 587              		.cfi_def_cfa_offset 4
 588              		.cfi_offset 7, -4
 589 01f2 85B0     		sub	sp, sp, #20
 590              		.cfi_def_cfa_offset 24
 591 01f4 00AF     		add	r7, sp, #0
 592              		.cfi_def_cfa_register 7
 593 01f6 7860     		str	r0, [r7, #4]
 594 01f8 3960     		str	r1, [r7]
 243:../system/cmsis_os.c ****   osStatus result = osOK;
 595              		.loc 1 243 0
 596 01fa 0023     		movs	r3, #0
 597 01fc FB60     		str	r3, [r7, #12]
 244:../system/cmsis_os.c **** #if (configUSE_TIMERS == 1)  
 245:../system/cmsis_os.c **** 	portBASE_TYPE taskWoken = pdFALSE;
 246:../system/cmsis_os.c ****   portTickType ticks = millisec / portTICK_RATE_MS;
 247:../system/cmsis_os.c ****   
 248:../system/cmsis_os.c ****   if (xTimerIsTimerActive(timer_id) != pdFALSE)
 249:../system/cmsis_os.c ****   {
 250:../system/cmsis_os.c ****     if (inHandlerMode()) 
 251:../system/cmsis_os.c ****     {
 252:../system/cmsis_os.c ****       if(xTimerResetFromISR(timer_id, &taskWoken) != pdPASS)
 253:../system/cmsis_os.c ****       {
 254:../system/cmsis_os.c ****         result = osErrorOS;
 255:../system/cmsis_os.c ****       }
 256:../system/cmsis_os.c ****       else
 257:../system/cmsis_os.c ****       {
 258:../system/cmsis_os.c ****         portEND_SWITCHING_ISR(taskWoken);
 259:../system/cmsis_os.c ****         result = osOK;
 260:../system/cmsis_os.c ****       }
 261:../system/cmsis_os.c ****     }
 262:../system/cmsis_os.c ****     else
 263:../system/cmsis_os.c ****     {
 264:../system/cmsis_os.c ****       if (xTimerReset(timer_id, 0) != pdPASS)
 265:../system/cmsis_os.c ****         result = osErrorOS;
 266:../system/cmsis_os.c ****       else   
 267:../system/cmsis_os.c ****         result = osOK;
 268:../system/cmsis_os.c ****     }
 269:../system/cmsis_os.c ****   }
 270:../system/cmsis_os.c ****   else
 271:../system/cmsis_os.c ****   {
 272:../system/cmsis_os.c ****     if (ticks == 0)
 273:../system/cmsis_os.c ****       ticks = 1;
 274:../system/cmsis_os.c ****     
 275:../system/cmsis_os.c ****     if (inHandlerMode()) 
 276:../system/cmsis_os.c ****     {
 277:../system/cmsis_os.c ****       if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS) 
 278:../system/cmsis_os.c ****         result = osErrorOS;
 279:../system/cmsis_os.c ****       else
 280:../system/cmsis_os.c ****       {
 281:../system/cmsis_os.c ****         xTimerStartFromISR(timer_id, &taskWoken);
 282:../system/cmsis_os.c ****         portEND_SWITCHING_ISR(taskWoken);
 283:../system/cmsis_os.c ****         result = osOK; 
 284:../system/cmsis_os.c ****       }
 285:../system/cmsis_os.c ****     }
 286:../system/cmsis_os.c ****     else 
 287:../system/cmsis_os.c ****     {
 288:../system/cmsis_os.c ****       if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 289:../system/cmsis_os.c ****         result = osErrorOS;
 290:../system/cmsis_os.c ****       else
 291:../system/cmsis_os.c ****       {
 292:../system/cmsis_os.c ****         if (xTimerStart(timer_id, 0) != pdPASS)
 293:../system/cmsis_os.c ****           result = osErrorOS;
 294:../system/cmsis_os.c ****       }
 295:../system/cmsis_os.c ****     }
 296:../system/cmsis_os.c ****   }
 297:../system/cmsis_os.c **** #else 
 298:../system/cmsis_os.c ****   result = osErrorOS;
 598              		.loc 1 298 0
 599 01fe FF23     		movs	r3, #255
 600 0200 FB60     		str	r3, [r7, #12]
 299:../system/cmsis_os.c **** #endif
 300:../system/cmsis_os.c ****   return result;
 601              		.loc 1 300 0
 602 0202 FB68     		ldr	r3, [r7, #12]
 301:../system/cmsis_os.c **** }
 603              		.loc 1 301 0
 604 0204 1846     		mov	r0, r3
 605 0206 1437     		adds	r7, r7, #20
 606 0208 BD46     		mov	sp, r7
 607              		@ sp needed
 608 020a 5DF8047B 		ldr	r7, [sp], #4
 609 020e 7047     		bx	lr
 610              		.cfi_endproc
 611              	.LFE27:
 613              		.align	2
 614              		.global	osTimerStop
 615              		.thumb
 616              		.thumb_func
 618              	osTimerStop:
 619              	.LFB28:
 302:../system/cmsis_os.c **** 
 303:../system/cmsis_os.c **** /**
 304:../system/cmsis_os.c **** * @brief  Stop a timer.
 305:../system/cmsis_os.c **** * @param  timer_id      timer ID obtained by \ref osTimerCreate
 306:../system/cmsis_os.c **** * @retval  status code that indicates the execution status of the function.
 307:../system/cmsis_os.c **** * @note   MUST REMAIN UNCHANGED: \b osTimerStop shall be consistent in every CMSIS-RTOS.
 308:../system/cmsis_os.c **** */
 309:../system/cmsis_os.c **** osStatus osTimerStop (osTimerId timer_id)
 310:../system/cmsis_os.c **** {
 620              		.loc 1 310 0
 621              		.cfi_startproc
 622              		@ args = 0, pretend = 0, frame = 16
 623              		@ frame_needed = 1, uses_anonymous_args = 0
 624              		@ link register save eliminated.
 625 0210 80B4     		push	{r7}
 626              		.cfi_def_cfa_offset 4
 627              		.cfi_offset 7, -4
 628 0212 85B0     		sub	sp, sp, #20
 629              		.cfi_def_cfa_offset 24
 630 0214 00AF     		add	r7, sp, #0
 631              		.cfi_def_cfa_register 7
 632 0216 7860     		str	r0, [r7, #4]
 311:../system/cmsis_os.c ****   osStatus result = osOK;
 633              		.loc 1 311 0
 634 0218 0023     		movs	r3, #0
 635 021a FB60     		str	r3, [r7, #12]
 312:../system/cmsis_os.c **** #if (configUSE_TIMERS == 1)  
 313:../system/cmsis_os.c ****   portBASE_TYPE taskWoken = pdFALSE;
 314:../system/cmsis_os.c **** 
 315:../system/cmsis_os.c ****   if (inHandlerMode()) {
 316:../system/cmsis_os.c ****     xTimerStopFromISR(timer_id, &taskWoken);
 317:../system/cmsis_os.c ****     portEND_SWITCHING_ISR(taskWoken);
 318:../system/cmsis_os.c ****   }
 319:../system/cmsis_os.c ****   else {
 320:../system/cmsis_os.c ****     if (xTimerStop(timer_id, 0) != pdPASS) {
 321:../system/cmsis_os.c ****       result = osErrorOS;
 322:../system/cmsis_os.c ****     }
 323:../system/cmsis_os.c ****   }
 324:../system/cmsis_os.c **** #else 
 325:../system/cmsis_os.c ****   result = osErrorOS;
 636              		.loc 1 325 0
 637 021c FF23     		movs	r3, #255
 638 021e FB60     		str	r3, [r7, #12]
 326:../system/cmsis_os.c **** #endif 
 327:../system/cmsis_os.c ****   return result;
 639              		.loc 1 327 0
 640 0220 FB68     		ldr	r3, [r7, #12]
 328:../system/cmsis_os.c **** }
 641              		.loc 1 328 0
 642 0222 1846     		mov	r0, r3
 643 0224 1437     		adds	r7, r7, #20
 644 0226 BD46     		mov	sp, r7
 645              		@ sp needed
 646 0228 5DF8047B 		ldr	r7, [sp], #4
 647 022c 7047     		bx	lr
 648              		.cfi_endproc
 649              	.LFE28:
 651 022e 00BF     		.align	2
 652              		.global	osMutexCreate
 653              		.thumb
 654              		.thumb_func
 656              	osMutexCreate:
 657              	.LFB29:
 329:../system/cmsis_os.c **** 
 330:../system/cmsis_os.c **** /***************************  Signal Management ********************************/
 331:../system/cmsis_os.c **** /**
 332:../system/cmsis_os.c **** * @brief  Set the specified Signal Flags of an active thread.
 333:../system/cmsis_os.c **** * @param  thread_id     thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
 334:../system/cmsis_os.c **** * @param  signals       specifies the signal flags of the thread that should be set.
 335:../system/cmsis_os.c **** * @retval  previous signal flags of the specified thread or 0x80000000 in case of incorrect paramet
 336:../system/cmsis_os.c **** * @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
 337:../system/cmsis_os.c **** */
 338:../system/cmsis_os.c **** int32_t osSignalSet (osThreadId thread_id, int32_t signal);
 339:../system/cmsis_os.c **** 
 340:../system/cmsis_os.c **** /**
 341:../system/cmsis_os.c **** * @brief  Clear the specified Signal Flags of an active thread.
 342:../system/cmsis_os.c **** * @param  thread_id  thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
 343:../system/cmsis_os.c **** * @param  signals    specifies the signal flags of the thread that shall be cleared.
 344:../system/cmsis_os.c **** * @retval  previous signal flags of the specified thread or 0x80000000 in case of incorrect paramet
 345:../system/cmsis_os.c **** * @note   MUST REMAIN UNCHANGED: \b osSignalClear shall be consistent in every CMSIS-RTOS.
 346:../system/cmsis_os.c **** */
 347:../system/cmsis_os.c **** int32_t osSignalClear (osThreadId thread_id, int32_t signal);
 348:../system/cmsis_os.c **** 
 349:../system/cmsis_os.c **** /**
 350:../system/cmsis_os.c **** * @brief  Get Signal Flags status of an active thread.
 351:../system/cmsis_os.c **** * @param  thread_id  thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
 352:../system/cmsis_os.c **** * @retval  previous signal flags of the specified thread or 0x80000000 in case of incorrect paramet
 353:../system/cmsis_os.c **** * @note   MUST REMAIN UNCHANGED: \b osSignalGet shall be consistent in every CMSIS-RTOS.
 354:../system/cmsis_os.c **** */
 355:../system/cmsis_os.c **** int32_t osSignalGet (osThreadId thread_id);
 356:../system/cmsis_os.c **** 
 357:../system/cmsis_os.c **** /**
 358:../system/cmsis_os.c **** * @brief  Wait for one or more Signal Flags to become signaled for the current \b RUNNING thread.
 359:../system/cmsis_os.c **** * @param  signals   wait until all specified signal flags set or 0 for any single signal flag.
 360:../system/cmsis_os.c **** * @param  millisec  timeout value or 0 in case of no time-out.
 361:../system/cmsis_os.c **** * @retval  event flag information or error code.
 362:../system/cmsis_os.c **** * @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
 363:../system/cmsis_os.c **** */
 364:../system/cmsis_os.c **** osEvent osSignalWait (int32_t signals, uint32_t millisec);
 365:../system/cmsis_os.c **** 
 366:../system/cmsis_os.c **** /****************************  Mutex Management ********************************/
 367:../system/cmsis_os.c **** /**
 368:../system/cmsis_os.c **** * @brief  Create and Initialize a Mutex object
 369:../system/cmsis_os.c **** * @param  mutex_def     mutex definition referenced with \ref osMutex.
 370:../system/cmsis_os.c **** * @retval  mutex ID for reference by other functions or NULL in case of error.
 371:../system/cmsis_os.c **** * @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
 372:../system/cmsis_os.c **** */
 373:../system/cmsis_os.c **** osMutexId osMutexCreate (osMutexDef_t *mutex_def)
 374:../system/cmsis_os.c **** {
 658              		.loc 1 374 0
 659              		.cfi_startproc
 660              		@ args = 0, pretend = 0, frame = 8
 661              		@ frame_needed = 1, uses_anonymous_args = 0
 662 0230 80B5     		push	{r7, lr}
 663              		.cfi_def_cfa_offset 8
 664              		.cfi_offset 7, -8
 665              		.cfi_offset 14, -4
 666 0232 82B0     		sub	sp, sp, #8
 667              		.cfi_def_cfa_offset 16
 668 0234 00AF     		add	r7, sp, #0
 669              		.cfi_def_cfa_register 7
 670 0236 7860     		str	r0, [r7, #4]
 375:../system/cmsis_os.c ****   return xSemaphoreCreateMutex(); 
 671              		.loc 1 375 0
 672 0238 0120     		movs	r0, #1
 673 023a FFF7FEFF 		bl	xQueueCreateMutex
 674 023e 0346     		mov	r3, r0
 376:../system/cmsis_os.c **** }
 675              		.loc 1 376 0
 676 0240 1846     		mov	r0, r3
 677 0242 0837     		adds	r7, r7, #8
 678 0244 BD46     		mov	sp, r7
 679              		@ sp needed
 680 0246 80BD     		pop	{r7, pc}
 681              		.cfi_endproc
 682              	.LFE29:
 684              		.align	2
 685              		.global	osMutexWait
 686              		.thumb
 687              		.thumb_func
 689              	osMutexWait:
 690              	.LFB30:
 377:../system/cmsis_os.c **** 
 378:../system/cmsis_os.c **** /**
 379:../system/cmsis_os.c **** * @brief Wait until a Mutex becomes available
 380:../system/cmsis_os.c **** * @param mutex_id      mutex ID obtained by \ref osMutexCreate.
 381:../system/cmsis_os.c **** * @param millisec      timeout value or 0 in case of no time-out.
 382:../system/cmsis_os.c **** * @retval  status code that indicates the execution status of the function.
 383:../system/cmsis_os.c **** * @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
 384:../system/cmsis_os.c **** */
 385:../system/cmsis_os.c **** osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
 386:../system/cmsis_os.c **** {
 691              		.loc 1 386 0
 692              		.cfi_startproc
 693              		@ args = 0, pretend = 0, frame = 16
 694              		@ frame_needed = 1, uses_anonymous_args = 0
 695 0248 80B5     		push	{r7, lr}
 696              		.cfi_def_cfa_offset 8
 697              		.cfi_offset 7, -8
 698              		.cfi_offset 14, -4
 699 024a 84B0     		sub	sp, sp, #16
 700              		.cfi_def_cfa_offset 24
 701 024c 00AF     		add	r7, sp, #0
 702              		.cfi_def_cfa_register 7
 703 024e 7860     		str	r0, [r7, #4]
 704 0250 3960     		str	r1, [r7]
 387:../system/cmsis_os.c ****   portTickType ticks;
 388:../system/cmsis_os.c ****   
 389:../system/cmsis_os.c ****   
 390:../system/cmsis_os.c ****   if (mutex_id == NULL) {
 705              		.loc 1 390 0
 706 0252 7B68     		ldr	r3, [r7, #4]
 707 0254 002B     		cmp	r3, #0
 708 0256 01D1     		bne	.L43
 391:../system/cmsis_os.c ****     return osErrorParameter;
 709              		.loc 1 391 0
 710 0258 8023     		movs	r3, #128
 711 025a 26E0     		b	.L44
 712              	.L43:
 392:../system/cmsis_os.c ****   }
 393:../system/cmsis_os.c ****   
 394:../system/cmsis_os.c ****   ticks = 0;
 713              		.loc 1 394 0
 714 025c 0023     		movs	r3, #0
 715 025e FB60     		str	r3, [r7, #12]
 395:../system/cmsis_os.c ****   if (millisec == osWaitForever) {
 716              		.loc 1 395 0
 717 0260 3B68     		ldr	r3, [r7]
 718 0262 B3F1FF3F 		cmp	r3, #-1
 719 0266 03D1     		bne	.L45
 396:../system/cmsis_os.c ****     ticks = portMAX_DELAY;
 720              		.loc 1 396 0
 721 0268 4FF0FF33 		mov	r3, #-1
 722 026c FB60     		str	r3, [r7, #12]
 723 026e 09E0     		b	.L46
 724              	.L45:
 397:../system/cmsis_os.c ****   }
 398:../system/cmsis_os.c ****   else if (millisec != 0) {
 725              		.loc 1 398 0
 726 0270 3B68     		ldr	r3, [r7]
 727 0272 002B     		cmp	r3, #0
 728 0274 06D0     		beq	.L46
 399:../system/cmsis_os.c ****     ticks = millisec / portTICK_RATE_MS;
 729              		.loc 1 399 0
 730 0276 3B68     		ldr	r3, [r7]
 731 0278 FB60     		str	r3, [r7, #12]
 400:../system/cmsis_os.c ****     if (ticks == 0) {
 732              		.loc 1 400 0
 733 027a FB68     		ldr	r3, [r7, #12]
 734 027c 002B     		cmp	r3, #0
 735 027e 01D1     		bne	.L46
 401:../system/cmsis_os.c ****       ticks = 1;
 736              		.loc 1 401 0
 737 0280 0123     		movs	r3, #1
 738 0282 FB60     		str	r3, [r7, #12]
 739              	.L46:
 402:../system/cmsis_os.c ****     }
 403:../system/cmsis_os.c ****   }
 404:../system/cmsis_os.c ****   
 405:../system/cmsis_os.c ****   if (inHandlerMode()) {
 740              		.loc 1 405 0
 741 0284 FFF7EAFE 		bl	inHandlerMode
 742 0288 0346     		mov	r3, r0
 743 028a 002B     		cmp	r3, #0
 744 028c 01D0     		beq	.L47
 406:../system/cmsis_os.c ****     return osErrorISR;
 745              		.loc 1 406 0
 746 028e 8223     		movs	r3, #130
 747 0290 0BE0     		b	.L44
 748              	.L47:
 407:../system/cmsis_os.c ****   }
 408:../system/cmsis_os.c ****   
 409:../system/cmsis_os.c ****   if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 749              		.loc 1 409 0
 750 0292 7868     		ldr	r0, [r7, #4]
 751 0294 0021     		movs	r1, #0
 752 0296 FA68     		ldr	r2, [r7, #12]
 753 0298 0023     		movs	r3, #0
 754 029a FFF7FEFF 		bl	xQueueGenericReceive
 755 029e 0346     		mov	r3, r0
 756 02a0 012B     		cmp	r3, #1
 757 02a2 01D0     		beq	.L48
 410:../system/cmsis_os.c ****     return osErrorOS;
 758              		.loc 1 410 0
 759 02a4 FF23     		movs	r3, #255
 760 02a6 00E0     		b	.L44
 761              	.L48:
 411:../system/cmsis_os.c ****   }
 412:../system/cmsis_os.c ****   
 413:../system/cmsis_os.c ****   return osOK;
 762              		.loc 1 413 0
 763 02a8 0023     		movs	r3, #0
 764              	.L44:
 414:../system/cmsis_os.c **** }
 765              		.loc 1 414 0
 766 02aa 1846     		mov	r0, r3
 767 02ac 1037     		adds	r7, r7, #16
 768 02ae BD46     		mov	sp, r7
 769              		@ sp needed
 770 02b0 80BD     		pop	{r7, pc}
 771              		.cfi_endproc
 772              	.LFE30:
 774 02b2 00BF     		.align	2
 775              		.global	osMutexRelease
 776              		.thumb
 777              		.thumb_func
 779              	osMutexRelease:
 780              	.LFB31:
 415:../system/cmsis_os.c **** 
 416:../system/cmsis_os.c **** /**
 417:../system/cmsis_os.c **** * @brief Release a Mutex that was obtained by \ref osMutexWait
 418:../system/cmsis_os.c **** * @param mutex_id      mutex ID obtained by \ref osMutexCreate.
 419:../system/cmsis_os.c **** * @retval  status code that indicates the execution status of the function.
 420:../system/cmsis_os.c **** * @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
 421:../system/cmsis_os.c **** */
 422:../system/cmsis_os.c **** osStatus osMutexRelease (osMutexId mutex_id)
 423:../system/cmsis_os.c **** {
 781              		.loc 1 423 0
 782              		.cfi_startproc
 783              		@ args = 0, pretend = 0, frame = 16
 784              		@ frame_needed = 1, uses_anonymous_args = 0
 785 02b4 80B5     		push	{r7, lr}
 786              		.cfi_def_cfa_offset 8
 787              		.cfi_offset 7, -8
 788              		.cfi_offset 14, -4
 789 02b6 84B0     		sub	sp, sp, #16
 790              		.cfi_def_cfa_offset 24
 791 02b8 00AF     		add	r7, sp, #0
 792              		.cfi_def_cfa_register 7
 793 02ba 7860     		str	r0, [r7, #4]
 424:../system/cmsis_os.c ****   osStatus result = osOK;
 794              		.loc 1 424 0
 795 02bc 0023     		movs	r3, #0
 796 02be FB60     		str	r3, [r7, #12]
 425:../system/cmsis_os.c ****   
 426:../system/cmsis_os.c ****   if (inHandlerMode()) {
 797              		.loc 1 426 0
 798 02c0 FFF7CCFE 		bl	inHandlerMode
 799 02c4 0346     		mov	r3, r0
 800 02c6 002B     		cmp	r3, #0
 801 02c8 01D0     		beq	.L50
 427:../system/cmsis_os.c ****     return osErrorISR;
 802              		.loc 1 427 0
 803 02ca 8223     		movs	r3, #130
 804 02cc 0BE0     		b	.L51
 805              	.L50:
 428:../system/cmsis_os.c ****   }
 429:../system/cmsis_os.c ****   
 430:../system/cmsis_os.c ****   if (xSemaphoreGive(mutex_id) != pdTRUE) 
 806              		.loc 1 430 0
 807 02ce 7868     		ldr	r0, [r7, #4]
 808 02d0 0021     		movs	r1, #0
 809 02d2 0022     		movs	r2, #0
 810 02d4 0023     		movs	r3, #0
 811 02d6 FFF7FEFF 		bl	xQueueGenericSend
 812 02da 0346     		mov	r3, r0
 813 02dc 012B     		cmp	r3, #1
 814 02de 01D0     		beq	.L52
 431:../system/cmsis_os.c ****   {
 432:../system/cmsis_os.c ****     result = osErrorOS;
 815              		.loc 1 432 0
 816 02e0 FF23     		movs	r3, #255
 817 02e2 FB60     		str	r3, [r7, #12]
 818              	.L52:
 433:../system/cmsis_os.c ****   }
 434:../system/cmsis_os.c ****   return result;
 819              		.loc 1 434 0
 820 02e4 FB68     		ldr	r3, [r7, #12]
 821              	.L51:
 435:../system/cmsis_os.c **** }
 822              		.loc 1 435 0
 823 02e6 1846     		mov	r0, r3
 824 02e8 1037     		adds	r7, r7, #16
 825 02ea BD46     		mov	sp, r7
 826              		@ sp needed
 827 02ec 80BD     		pop	{r7, pc}
 828              		.cfi_endproc
 829              	.LFE31:
 831 02ee 00BF     		.align	2
 832              		.global	osMutexDelete
 833              		.thumb
 834              		.thumb_func
 836              	osMutexDelete:
 837              	.LFB32:
 436:../system/cmsis_os.c **** 
 437:../system/cmsis_os.c **** /**
 438:../system/cmsis_os.c **** * @brief Delete a Mutex
 439:../system/cmsis_os.c **** * @param mutex_id  mutex ID obtained by \ref osMutexCreate.
 440:../system/cmsis_os.c **** * @retval  status code that indicates the execution status of the function.
 441:../system/cmsis_os.c **** * @note   MUST REMAIN UNCHANGED: \b osMutexDelete shall be consistent in every CMSIS-RTOS.
 442:../system/cmsis_os.c **** */
 443:../system/cmsis_os.c **** osStatus osMutexDelete (osMutexId mutex_id)
 444:../system/cmsis_os.c **** {
 838              		.loc 1 444 0
 839              		.cfi_startproc
 840              		@ args = 0, pretend = 0, frame = 8
 841              		@ frame_needed = 1, uses_anonymous_args = 0
 842 02f0 80B5     		push	{r7, lr}
 843              		.cfi_def_cfa_offset 8
 844              		.cfi_offset 7, -8
 845              		.cfi_offset 14, -4
 846 02f2 82B0     		sub	sp, sp, #8
 847              		.cfi_def_cfa_offset 16
 848 02f4 00AF     		add	r7, sp, #0
 849              		.cfi_def_cfa_register 7
 850 02f6 7860     		str	r0, [r7, #4]
 445:../system/cmsis_os.c ****   vQueueDelete(mutex_id);  
 851              		.loc 1 445 0
 852 02f8 7868     		ldr	r0, [r7, #4]
 853 02fa FFF7FEFF 		bl	vQueueDelete
 446:../system/cmsis_os.c ****   
 447:../system/cmsis_os.c ****   return osOK;
 854              		.loc 1 447 0
 855 02fe 0023     		movs	r3, #0
 448:../system/cmsis_os.c **** }
 856              		.loc 1 448 0
 857 0300 1846     		mov	r0, r3
 858 0302 0837     		adds	r7, r7, #8
 859 0304 BD46     		mov	sp, r7
 860              		@ sp needed
 861 0306 80BD     		pop	{r7, pc}
 862              		.cfi_endproc
 863              	.LFE32:
 865              		.align	2
 866              		.global	osSemaphoreCreate
 867              		.thumb
 868              		.thumb_func
 870              	osSemaphoreCreate:
 871              	.LFB33:
 449:../system/cmsis_os.c **** 
 450:../system/cmsis_os.c **** /********************  Semaphore Management Functions **************************/
 451:../system/cmsis_os.c **** 
 452:../system/cmsis_os.c **** #if (defined (osFeature_Semaphore)  &&  (osFeature_Semaphore != 0))
 453:../system/cmsis_os.c **** 
 454:../system/cmsis_os.c **** /**
 455:../system/cmsis_os.c **** * @brief Create and Initialize a Semaphore object used for managing resources
 456:../system/cmsis_os.c **** * @param semaphore_def semaphore definition referenced with \ref osSemaphore.
 457:../system/cmsis_os.c **** * @param count         number of available resources.
 458:../system/cmsis_os.c **** * @retval  semaphore ID for reference by other functions or NULL in case of error.
 459:../system/cmsis_os.c **** * @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
 460:../system/cmsis_os.c **** */
 461:../system/cmsis_os.c **** osSemaphoreId osSemaphoreCreate (osSemaphoreDef_t *semaphore_def, int32_t count)
 462:../system/cmsis_os.c **** {
 872              		.loc 1 462 0
 873              		.cfi_startproc
 874              		@ args = 0, pretend = 0, frame = 16
 875              		@ frame_needed = 1, uses_anonymous_args = 0
 876 0308 80B5     		push	{r7, lr}
 877              		.cfi_def_cfa_offset 8
 878              		.cfi_offset 7, -8
 879              		.cfi_offset 14, -4
 880 030a 84B0     		sub	sp, sp, #16
 881              		.cfi_def_cfa_offset 24
 882 030c 00AF     		add	r7, sp, #0
 883              		.cfi_def_cfa_register 7
 884 030e 7860     		str	r0, [r7, #4]
 885 0310 3960     		str	r1, [r7]
 463:../system/cmsis_os.c ****   (void) semaphore_def;
 464:../system/cmsis_os.c ****   osSemaphoreId sema;
 465:../system/cmsis_os.c ****   
 466:../system/cmsis_os.c ****   if (count == 1) {
 886              		.loc 1 466 0
 887 0312 3B68     		ldr	r3, [r7]
 888 0314 012B     		cmp	r3, #1
 889 0316 10D1     		bne	.L56
 467:../system/cmsis_os.c ****     vSemaphoreCreateBinary(sema);
 890              		.loc 1 467 0
 891 0318 0120     		movs	r0, #1
 892 031a 0021     		movs	r1, #0
 893 031c 0322     		movs	r2, #3
 894 031e FFF7FEFF 		bl	xQueueGenericCreate
 895 0322 F860     		str	r0, [r7, #12]
 896 0324 FB68     		ldr	r3, [r7, #12]
 897 0326 002B     		cmp	r3, #0
 898 0328 05D0     		beq	.L57
 899              		.loc 1 467 0 is_stmt 0 discriminator 1
 900 032a F868     		ldr	r0, [r7, #12]
 901 032c 0021     		movs	r1, #0
 902 032e 0022     		movs	r2, #0
 903 0330 0023     		movs	r3, #0
 904 0332 FFF7FEFF 		bl	xQueueGenericSend
 905              	.L57:
 468:../system/cmsis_os.c ****     return sema;
 906              		.loc 1 468 0 is_stmt 1
 907 0336 FB68     		ldr	r3, [r7, #12]
 908 0338 06E0     		b	.L58
 909              	.L56:
 469:../system/cmsis_os.c ****   }
 470:../system/cmsis_os.c ****   
 471:../system/cmsis_os.c ****   return xSemaphoreCreateCounting(count, count);
 910              		.loc 1 471 0
 911 033a 3A68     		ldr	r2, [r7]
 912 033c 3B68     		ldr	r3, [r7]
 913 033e 1046     		mov	r0, r2
 914 0340 1946     		mov	r1, r3
 915 0342 FFF7FEFF 		bl	xQueueCreateCountingSemaphore
 916 0346 0346     		mov	r3, r0
 917              	.L58:
 472:../system/cmsis_os.c **** }
 918              		.loc 1 472 0
 919 0348 1846     		mov	r0, r3
 920 034a 1037     		adds	r7, r7, #16
 921 034c BD46     		mov	sp, r7
 922              		@ sp needed
 923 034e 80BD     		pop	{r7, pc}
 924              		.cfi_endproc
 925              	.LFE33:
 927              		.align	2
 928              		.global	osSemaphoreWait
 929              		.thumb
 930              		.thumb_func
 932              	osSemaphoreWait:
 933              	.LFB34:
 473:../system/cmsis_os.c **** 
 474:../system/cmsis_os.c **** /**
 475:../system/cmsis_os.c **** * @brief Wait until a Semaphore token becomes available
 476:../system/cmsis_os.c **** * @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
 477:../system/cmsis_os.c **** * @param  millisec      timeout value or 0 in case of no time-out.
 478:../system/cmsis_os.c **** * @retval  number of available tokens, or -1 in case of incorrect parameters.
 479:../system/cmsis_os.c **** * @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
 480:../system/cmsis_os.c **** */
 481:../system/cmsis_os.c **** int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
 482:../system/cmsis_os.c **** {
 934              		.loc 1 482 0
 935              		.cfi_startproc
 936              		@ args = 0, pretend = 0, frame = 16
 937              		@ frame_needed = 1, uses_anonymous_args = 0
 938 0350 80B5     		push	{r7, lr}
 939              		.cfi_def_cfa_offset 8
 940              		.cfi_offset 7, -8
 941              		.cfi_offset 14, -4
 942 0352 84B0     		sub	sp, sp, #16
 943              		.cfi_def_cfa_offset 24
 944 0354 00AF     		add	r7, sp, #0
 945              		.cfi_def_cfa_register 7
 946 0356 7860     		str	r0, [r7, #4]
 947 0358 3960     		str	r1, [r7]
 483:../system/cmsis_os.c ****   portTickType ticks;
 484:../system/cmsis_os.c ****   
 485:../system/cmsis_os.c ****   
 486:../system/cmsis_os.c ****   if (semaphore_id == NULL) {
 948              		.loc 1 486 0
 949 035a 7B68     		ldr	r3, [r7, #4]
 950 035c 002B     		cmp	r3, #0
 951 035e 01D1     		bne	.L60
 487:../system/cmsis_os.c ****     return osErrorParameter;
 952              		.loc 1 487 0
 953 0360 8023     		movs	r3, #128
 954 0362 26E0     		b	.L61
 955              	.L60:
 488:../system/cmsis_os.c ****   }
 489:../system/cmsis_os.c ****   
 490:../system/cmsis_os.c ****   ticks = 0;
 956              		.loc 1 490 0
 957 0364 0023     		movs	r3, #0
 958 0366 FB60     		str	r3, [r7, #12]
 491:../system/cmsis_os.c ****   if (millisec == osWaitForever) {
 959              		.loc 1 491 0
 960 0368 3B68     		ldr	r3, [r7]
 961 036a B3F1FF3F 		cmp	r3, #-1
 962 036e 03D1     		bne	.L62
 492:../system/cmsis_os.c ****     ticks = portMAX_DELAY;
 963              		.loc 1 492 0
 964 0370 4FF0FF33 		mov	r3, #-1
 965 0374 FB60     		str	r3, [r7, #12]
 966 0376 09E0     		b	.L63
 967              	.L62:
 493:../system/cmsis_os.c ****   }
 494:../system/cmsis_os.c ****   else if (millisec != 0) {
 968              		.loc 1 494 0
 969 0378 3B68     		ldr	r3, [r7]
 970 037a 002B     		cmp	r3, #0
 971 037c 06D0     		beq	.L63
 495:../system/cmsis_os.c ****     ticks = millisec / portTICK_RATE_MS;
 972              		.loc 1 495 0
 973 037e 3B68     		ldr	r3, [r7]
 974 0380 FB60     		str	r3, [r7, #12]
 496:../system/cmsis_os.c ****     if (ticks == 0) {
 975              		.loc 1 496 0
 976 0382 FB68     		ldr	r3, [r7, #12]
 977 0384 002B     		cmp	r3, #0
 978 0386 01D1     		bne	.L63
 497:../system/cmsis_os.c ****       ticks = 1;
 979              		.loc 1 497 0
 980 0388 0123     		movs	r3, #1
 981 038a FB60     		str	r3, [r7, #12]
 982              	.L63:
 498:../system/cmsis_os.c ****     }
 499:../system/cmsis_os.c ****   }
 500:../system/cmsis_os.c ****   
 501:../system/cmsis_os.c ****   if (inHandlerMode()) {
 983              		.loc 1 501 0
 984 038c FFF766FE 		bl	inHandlerMode
 985 0390 0346     		mov	r3, r0
 986 0392 002B     		cmp	r3, #0
 987 0394 01D0     		beq	.L64
 502:../system/cmsis_os.c ****     return osErrorISR;
 988              		.loc 1 502 0
 989 0396 8223     		movs	r3, #130
 990 0398 0BE0     		b	.L61
 991              	.L64:
 503:../system/cmsis_os.c ****   }
 504:../system/cmsis_os.c ****   
 505:../system/cmsis_os.c ****   if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 992              		.loc 1 505 0
 993 039a 7868     		ldr	r0, [r7, #4]
 994 039c 0021     		movs	r1, #0
 995 039e FA68     		ldr	r2, [r7, #12]
 996 03a0 0023     		movs	r3, #0
 997 03a2 FFF7FEFF 		bl	xQueueGenericReceive
 998 03a6 0346     		mov	r3, r0
 999 03a8 012B     		cmp	r3, #1
 1000 03aa 01D0     		beq	.L65
 506:../system/cmsis_os.c ****     return osErrorOS;
 1001              		.loc 1 506 0
 1002 03ac FF23     		movs	r3, #255
 1003 03ae 00E0     		b	.L61
 1004              	.L65:
 507:../system/cmsis_os.c ****   }
 508:../system/cmsis_os.c ****   
 509:../system/cmsis_os.c ****   return osOK;
 1005              		.loc 1 509 0
 1006 03b0 0023     		movs	r3, #0
 1007              	.L61:
 510:../system/cmsis_os.c **** }
 1008              		.loc 1 510 0
 1009 03b2 1846     		mov	r0, r3
 1010 03b4 1037     		adds	r7, r7, #16
 1011 03b6 BD46     		mov	sp, r7
 1012              		@ sp needed
 1013 03b8 80BD     		pop	{r7, pc}
 1014              		.cfi_endproc
 1015              	.LFE34:
 1017 03ba 00BF     		.align	2
 1018              		.global	osSemaphoreRelease
 1019              		.thumb
 1020              		.thumb_func
 1022              	osSemaphoreRelease:
 1023              	.LFB35:
 511:../system/cmsis_os.c **** 
 512:../system/cmsis_os.c **** /**
 513:../system/cmsis_os.c **** * @brief Release a Semaphore token
 514:../system/cmsis_os.c **** * @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
 515:../system/cmsis_os.c **** * @retval  status code that indicates the execution status of the function.
 516:../system/cmsis_os.c **** * @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
 517:../system/cmsis_os.c **** */
 518:../system/cmsis_os.c **** osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
 519:../system/cmsis_os.c **** {
 1024              		.loc 1 519 0
 1025              		.cfi_startproc
 1026              		@ args = 0, pretend = 0, frame = 16
 1027              		@ frame_needed = 1, uses_anonymous_args = 0
 1028 03bc 80B5     		push	{r7, lr}
 1029              		.cfi_def_cfa_offset 8
 1030              		.cfi_offset 7, -8
 1031              		.cfi_offset 14, -4
 1032 03be 84B0     		sub	sp, sp, #16
 1033              		.cfi_def_cfa_offset 24
 1034 03c0 00AF     		add	r7, sp, #0
 1035              		.cfi_def_cfa_register 7
 1036 03c2 7860     		str	r0, [r7, #4]
 520:../system/cmsis_os.c ****   osStatus result = osOK;
 1037              		.loc 1 520 0
 1038 03c4 0023     		movs	r3, #0
 1039 03c6 FB60     		str	r3, [r7, #12]
 521:../system/cmsis_os.c ****   portBASE_TYPE taskWoken = pdFALSE;
 1040              		.loc 1 521 0
 1041 03c8 0023     		movs	r3, #0
 1042 03ca BB60     		str	r3, [r7, #8]
 522:../system/cmsis_os.c ****   
 523:../system/cmsis_os.c ****   
 524:../system/cmsis_os.c ****   if (inHandlerMode()) {
 1043              		.loc 1 524 0
 1044 03cc FFF746FE 		bl	inHandlerMode
 1045 03d0 0346     		mov	r3, r0
 1046 03d2 002B     		cmp	r3, #0
 1047 03d4 17D0     		beq	.L67
 525:../system/cmsis_os.c ****     if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 1048              		.loc 1 525 0
 1049 03d6 07F10803 		add	r3, r7, #8
 1050 03da 7868     		ldr	r0, [r7, #4]
 1051 03dc 0021     		movs	r1, #0
 1052 03de 1A46     		mov	r2, r3
 1053 03e0 0023     		movs	r3, #0
 1054 03e2 FFF7FEFF 		bl	xQueueGenericSendFromISR
 1055 03e6 0346     		mov	r3, r0
 1056 03e8 012B     		cmp	r3, #1
 1057 03ea 01D0     		beq	.L68
 526:../system/cmsis_os.c ****       result = osErrorOS;
 1058              		.loc 1 526 0
 1059 03ec FF23     		movs	r3, #255
 1060 03ee FB60     		str	r3, [r7, #12]
 1061              	.L68:
 527:../system/cmsis_os.c ****     }
 528:../system/cmsis_os.c ****     portEND_SWITCHING_ISR(taskWoken);
 1062              		.loc 1 528 0
 1063 03f0 BB68     		ldr	r3, [r7, #8]
 1064 03f2 002B     		cmp	r3, #0
 1065 03f4 12D0     		beq	.L70
 1066              		.loc 1 528 0 is_stmt 0 discriminator 1
 1067 03f6 4EF60453 		movw	r3, #60676
 1068 03fa CEF20003 		movt	r3, 57344
 1069 03fe 4FF08052 		mov	r2, #268435456
 1070 0402 1A60     		str	r2, [r3]
 1071 0404 0AE0     		b	.L70
 1072              	.L67:
 529:../system/cmsis_os.c ****   }
 530:../system/cmsis_os.c ****   else {
 531:../system/cmsis_os.c ****     if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 1073              		.loc 1 531 0 is_stmt 1
 1074 0406 7868     		ldr	r0, [r7, #4]
 1075 0408 0021     		movs	r1, #0
 1076 040a 0022     		movs	r2, #0
 1077 040c 0023     		movs	r3, #0
 1078 040e FFF7FEFF 		bl	xQueueGenericSend
 1079 0412 0346     		mov	r3, r0
 1080 0414 012B     		cmp	r3, #1
 1081 0416 01D0     		beq	.L70
 532:../system/cmsis_os.c ****       result = osErrorOS;
 1082              		.loc 1 532 0
 1083 0418 FF23     		movs	r3, #255
 1084 041a FB60     		str	r3, [r7, #12]
 1085              	.L70:
 533:../system/cmsis_os.c ****     }
 534:../system/cmsis_os.c ****   }
 535:../system/cmsis_os.c ****   
 536:../system/cmsis_os.c ****   return result;
 1086              		.loc 1 536 0
 1087 041c FB68     		ldr	r3, [r7, #12]
 537:../system/cmsis_os.c **** }
 1088              		.loc 1 537 0
 1089 041e 1846     		mov	r0, r3
 1090 0420 1037     		adds	r7, r7, #16
 1091 0422 BD46     		mov	sp, r7
 1092              		@ sp needed
 1093 0424 80BD     		pop	{r7, pc}
 1094              		.cfi_endproc
 1095              	.LFE35:
 1097 0426 00BF     		.align	2
 1098              		.global	osSemaphoreDelete
 1099              		.thumb
 1100              		.thumb_func
 1102              	osSemaphoreDelete:
 1103              	.LFB36:
 538:../system/cmsis_os.c **** 
 539:../system/cmsis_os.c **** /**
 540:../system/cmsis_os.c **** * @brief Delete a Semaphore
 541:../system/cmsis_os.c **** * @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
 542:../system/cmsis_os.c **** * @retval  status code that indicates the execution status of the function.
 543:../system/cmsis_os.c **** * @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
 544:../system/cmsis_os.c **** */
 545:../system/cmsis_os.c **** osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
 546:../system/cmsis_os.c **** {
 1104              		.loc 1 546 0
 1105              		.cfi_startproc
 1106              		@ args = 0, pretend = 0, frame = 8
 1107              		@ frame_needed = 1, uses_anonymous_args = 0
 1108 0428 80B5     		push	{r7, lr}
 1109              		.cfi_def_cfa_offset 8
 1110              		.cfi_offset 7, -8
 1111              		.cfi_offset 14, -4
 1112 042a 82B0     		sub	sp, sp, #8
 1113              		.cfi_def_cfa_offset 16
 1114 042c 00AF     		add	r7, sp, #0
 1115              		.cfi_def_cfa_register 7
 1116 042e 7860     		str	r0, [r7, #4]
 547:../system/cmsis_os.c ****   vSemaphoreDelete(semaphore_id);  
 1117              		.loc 1 547 0
 1118 0430 7868     		ldr	r0, [r7, #4]
 1119 0432 FFF7FEFF 		bl	vQueueDelete
 548:../system/cmsis_os.c ****   
 549:../system/cmsis_os.c ****   return osOK;
 1120              		.loc 1 549 0
 1121 0436 0023     		movs	r3, #0
 550:../system/cmsis_os.c **** }
 1122              		.loc 1 550 0
 1123 0438 1846     		mov	r0, r3
 1124 043a 0837     		adds	r7, r7, #8
 1125 043c BD46     		mov	sp, r7
 1126              		@ sp needed
 1127 043e 80BD     		pop	{r7, pc}
 1128              		.cfi_endproc
 1129              	.LFE36:
 1131              		.align	2
 1132              		.global	osPoolCreate
 1133              		.thumb
 1134              		.thumb_func
 1136              	osPoolCreate:
 1137              	.LFB37:
 551:../system/cmsis_os.c **** 
 552:../system/cmsis_os.c **** #endif    /* Use Semaphores */
 553:../system/cmsis_os.c **** 
 554:../system/cmsis_os.c **** /*******************   Memory Pool Management Functions  ***********************/
 555:../system/cmsis_os.c **** 
 556:../system/cmsis_os.c **** #if (defined (osFeature_Pool)  &&  (osFeature_Pool != 0)) 
 557:../system/cmsis_os.c **** 
 558:../system/cmsis_os.c **** //TODO
 559:../system/cmsis_os.c **** //This is a primitive and inefficient wrapper around the existing FreeRTOS memory management.
 560:../system/cmsis_os.c **** //A better implementation will have to modify heap_x.c!
 561:../system/cmsis_os.c **** 
 562:../system/cmsis_os.c **** 
 563:../system/cmsis_os.c **** typedef struct os_pool_cb {
 564:../system/cmsis_os.c ****   void *pool;
 565:../system/cmsis_os.c ****   uint8_t *markers;
 566:../system/cmsis_os.c ****   uint32_t pool_sz;
 567:../system/cmsis_os.c ****   uint32_t item_sz;
 568:../system/cmsis_os.c ****   uint32_t currentIndex;
 569:../system/cmsis_os.c **** } os_pool_cb_t;
 570:../system/cmsis_os.c **** 
 571:../system/cmsis_os.c **** 
 572:../system/cmsis_os.c **** /**
 573:../system/cmsis_os.c **** * @brief Create and Initialize a memory pool
 574:../system/cmsis_os.c **** * @param  pool_def      memory pool definition referenced with \ref osPool.
 575:../system/cmsis_os.c **** * @retval  memory pool ID for reference by other functions or NULL in case of error.
 576:../system/cmsis_os.c **** * @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
 577:../system/cmsis_os.c **** */
 578:../system/cmsis_os.c **** osPoolId osPoolCreate (osPoolDef_t *pool_def)
 579:../system/cmsis_os.c **** {
 1138              		.loc 1 579 0
 1139              		.cfi_startproc
 1140              		@ args = 0, pretend = 0, frame = 24
 1141              		@ frame_needed = 1, uses_anonymous_args = 0
 1142 0440 80B5     		push	{r7, lr}
 1143              		.cfi_def_cfa_offset 8
 1144              		.cfi_offset 7, -8
 1145              		.cfi_offset 14, -4
 1146 0442 86B0     		sub	sp, sp, #24
 1147              		.cfi_def_cfa_offset 32
 1148 0444 00AF     		add	r7, sp, #0
 1149              		.cfi_def_cfa_register 7
 1150 0446 7860     		str	r0, [r7, #4]
 580:../system/cmsis_os.c ****   osPoolId thePool;
 581:../system/cmsis_os.c ****   int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 1151              		.loc 1 581 0
 1152 0448 7B68     		ldr	r3, [r7, #4]
 1153 044a 5B68     		ldr	r3, [r3, #4]
 1154 044c 0333     		adds	r3, r3, #3
 1155 044e 9B08     		lsrs	r3, r3, #2
 1156 0450 9B00     		lsls	r3, r3, #2
 1157 0452 FB60     		str	r3, [r7, #12]
 582:../system/cmsis_os.c ****   uint32_t i;
 583:../system/cmsis_os.c ****   
 584:../system/cmsis_os.c ****   /* First have to allocate memory for the pool control block. */
 585:../system/cmsis_os.c ****   thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 1158              		.loc 1 585 0
 1159 0454 1420     		movs	r0, #20
 1160 0456 FFF7FEFF 		bl	pvPortMalloc
 1161 045a 7861     		str	r0, [r7, #20]
 586:../system/cmsis_os.c ****   if (thePool) {
 1162              		.loc 1 586 0
 1163 045c 7B69     		ldr	r3, [r7, #20]
 1164 045e 002B     		cmp	r3, #0
 1165 0460 46D0     		beq	.L75
 587:../system/cmsis_os.c ****     thePool->pool_sz = pool_def->pool_sz;
 1166              		.loc 1 587 0
 1167 0462 7B68     		ldr	r3, [r7, #4]
 1168 0464 1A68     		ldr	r2, [r3]
 1169 0466 7B69     		ldr	r3, [r7, #20]
 1170 0468 9A60     		str	r2, [r3, #8]
 588:../system/cmsis_os.c ****     thePool->item_sz = itemSize;
 1171              		.loc 1 588 0
 1172 046a FA68     		ldr	r2, [r7, #12]
 1173 046c 7B69     		ldr	r3, [r7, #20]
 1174 046e DA60     		str	r2, [r3, #12]
 589:../system/cmsis_os.c ****     thePool->currentIndex = 0;
 1175              		.loc 1 589 0
 1176 0470 7B69     		ldr	r3, [r7, #20]
 1177 0472 0022     		movs	r2, #0
 1178 0474 1A61     		str	r2, [r3, #16]
 590:../system/cmsis_os.c ****     
 591:../system/cmsis_os.c ****     /* Memory for markers */
 592:../system/cmsis_os.c ****     thePool->markers = pvPortMalloc(pool_def->pool_sz);
 1179              		.loc 1 592 0
 1180 0476 7B68     		ldr	r3, [r7, #4]
 1181 0478 1B68     		ldr	r3, [r3]
 1182 047a 1846     		mov	r0, r3
 1183 047c FFF7FEFF 		bl	pvPortMalloc
 1184 0480 0246     		mov	r2, r0
 1185 0482 7B69     		ldr	r3, [r7, #20]
 1186 0484 5A60     		str	r2, [r3, #4]
 593:../system/cmsis_os.c ****     if (thePool->markers) {
 1187              		.loc 1 593 0
 1188 0486 7B69     		ldr	r3, [r7, #20]
 1189 0488 5B68     		ldr	r3, [r3, #4]
 1190 048a 002B     		cmp	r3, #0
 1191 048c 2BD0     		beq	.L76
 594:../system/cmsis_os.c ****       /* Now allocate the pool itself. */
 595:../system/cmsis_os.c ****       thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 1192              		.loc 1 595 0
 1193 048e 7B68     		ldr	r3, [r7, #4]
 1194 0490 1B68     		ldr	r3, [r3]
 1195 0492 FA68     		ldr	r2, [r7, #12]
 1196 0494 02FB03F3 		mul	r3, r2, r3
 1197 0498 1846     		mov	r0, r3
 1198 049a FFF7FEFF 		bl	pvPortMalloc
 1199 049e 0246     		mov	r2, r0
 1200 04a0 7B69     		ldr	r3, [r7, #20]
 1201 04a2 1A60     		str	r2, [r3]
 596:../system/cmsis_os.c ****       
 597:../system/cmsis_os.c ****       if (thePool->pool) {
 1202              		.loc 1 597 0
 1203 04a4 7B69     		ldr	r3, [r7, #20]
 1204 04a6 1B68     		ldr	r3, [r3]
 1205 04a8 002B     		cmp	r3, #0
 1206 04aa 11D0     		beq	.L77
 598:../system/cmsis_os.c ****         for (i = 0; i < pool_def->pool_sz; i++) {
 1207              		.loc 1 598 0
 1208 04ac 0023     		movs	r3, #0
 1209 04ae 3B61     		str	r3, [r7, #16]
 1210 04b0 08E0     		b	.L78
 1211              	.L79:
 599:../system/cmsis_os.c ****           thePool->markers[i] = 0;
 1212              		.loc 1 599 0 discriminator 2
 1213 04b2 7B69     		ldr	r3, [r7, #20]
 1214 04b4 5A68     		ldr	r2, [r3, #4]
 1215 04b6 3B69     		ldr	r3, [r7, #16]
 1216 04b8 1344     		add	r3, r3, r2
 1217 04ba 0022     		movs	r2, #0
 1218 04bc 1A70     		strb	r2, [r3]
 598:../system/cmsis_os.c ****         for (i = 0; i < pool_def->pool_sz; i++) {
 1219              		.loc 1 598 0 discriminator 2
 1220 04be 3B69     		ldr	r3, [r7, #16]
 1221 04c0 0133     		adds	r3, r3, #1
 1222 04c2 3B61     		str	r3, [r7, #16]
 1223              	.L78:
 598:../system/cmsis_os.c ****         for (i = 0; i < pool_def->pool_sz; i++) {
 1224              		.loc 1 598 0 is_stmt 0 discriminator 1
 1225 04c4 7B68     		ldr	r3, [r7, #4]
 1226 04c6 1A68     		ldr	r2, [r3]
 1227 04c8 3B69     		ldr	r3, [r7, #16]
 1228 04ca 9A42     		cmp	r2, r3
 1229 04cc F1D8     		bhi	.L79
 1230 04ce 0FE0     		b	.L75
 1231              	.L77:
 600:../system/cmsis_os.c ****         }
 601:../system/cmsis_os.c ****       }
 602:../system/cmsis_os.c ****       else {
 603:../system/cmsis_os.c ****         vPortFree(thePool->markers);
 1232              		.loc 1 603 0 is_stmt 1
 1233 04d0 7B69     		ldr	r3, [r7, #20]
 1234 04d2 5B68     		ldr	r3, [r3, #4]
 1235 04d4 1846     		mov	r0, r3
 1236 04d6 FFF7FEFF 		bl	vPortFree
 604:../system/cmsis_os.c ****         vPortFree(thePool);
 1237              		.loc 1 604 0
 1238 04da 7869     		ldr	r0, [r7, #20]
 1239 04dc FFF7FEFF 		bl	vPortFree
 605:../system/cmsis_os.c ****         thePool = NULL;
 1240              		.loc 1 605 0
 1241 04e0 0023     		movs	r3, #0
 1242 04e2 7B61     		str	r3, [r7, #20]
 1243 04e4 04E0     		b	.L75
 1244              	.L76:
 606:../system/cmsis_os.c ****       }
 607:../system/cmsis_os.c ****     }
 608:../system/cmsis_os.c ****     else {
 609:../system/cmsis_os.c ****       vPortFree(thePool);
 1245              		.loc 1 609 0
 1246 04e6 7869     		ldr	r0, [r7, #20]
 1247 04e8 FFF7FEFF 		bl	vPortFree
 610:../system/cmsis_os.c ****       thePool = NULL;
 1248              		.loc 1 610 0
 1249 04ec 0023     		movs	r3, #0
 1250 04ee 7B61     		str	r3, [r7, #20]
 1251              	.L75:
 611:../system/cmsis_os.c ****     }
 612:../system/cmsis_os.c ****   }
 613:../system/cmsis_os.c ****   
 614:../system/cmsis_os.c ****   return thePool;
 1252              		.loc 1 614 0
 1253 04f0 7B69     		ldr	r3, [r7, #20]
 615:../system/cmsis_os.c **** }
 1254              		.loc 1 615 0
 1255 04f2 1846     		mov	r0, r3
 1256 04f4 1837     		adds	r7, r7, #24
 1257 04f6 BD46     		mov	sp, r7
 1258              		@ sp needed
 1259 04f8 80BD     		pop	{r7, pc}
 1260              		.cfi_endproc
 1261              	.LFE37:
 1263 04fa 00BF     		.align	2
 1264              		.global	osPoolAlloc
 1265              		.thumb
 1266              		.thumb_func
 1268              	osPoolAlloc:
 1269              	.LFB38:
 616:../system/cmsis_os.c **** 
 617:../system/cmsis_os.c **** /**
 618:../system/cmsis_os.c **** * @brief Allocate a memory block from a memory pool
 619:../system/cmsis_os.c **** * @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
 620:../system/cmsis_os.c **** * @retval  address of the allocated memory block or NULL in case of no memory available.
 621:../system/cmsis_os.c **** * @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
 622:../system/cmsis_os.c **** */
 623:../system/cmsis_os.c **** void *osPoolAlloc (osPoolId pool_id)
 624:../system/cmsis_os.c **** {
 1270              		.loc 1 624 0
 1271              		.cfi_startproc
 1272              		@ args = 0, pretend = 0, frame = 24
 1273              		@ frame_needed = 1, uses_anonymous_args = 0
 1274 04fc 80B5     		push	{r7, lr}
 1275              		.cfi_def_cfa_offset 8
 1276              		.cfi_offset 7, -8
 1277              		.cfi_offset 14, -4
 1278 04fe 86B0     		sub	sp, sp, #24
 1279              		.cfi_def_cfa_offset 32
 1280 0500 00AF     		add	r7, sp, #0
 1281              		.cfi_def_cfa_register 7
 1282 0502 7860     		str	r0, [r7, #4]
 625:../system/cmsis_os.c ****   int dummy = 0;
 1283              		.loc 1 625 0
 1284 0504 0023     		movs	r3, #0
 1285 0506 7B61     		str	r3, [r7, #20]
 626:../system/cmsis_os.c ****   void *p = NULL;
 1286              		.loc 1 626 0
 1287 0508 0023     		movs	r3, #0
 1288 050a 3B61     		str	r3, [r7, #16]
 627:../system/cmsis_os.c ****   uint32_t i;
 628:../system/cmsis_os.c ****   uint32_t index;
 629:../system/cmsis_os.c ****   
 630:../system/cmsis_os.c ****   if (inHandlerMode()) {
 1289              		.loc 1 630 0
 1290 050c FFF7A6FD 		bl	inHandlerMode
 1291 0510 0346     		mov	r3, r0
 1292 0512 002B     		cmp	r3, #0
 1293 0514 04D0     		beq	.L83
 631:../system/cmsis_os.c ****     dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 1294              		.loc 1 631 0
 1295 0516 FFF7FEFF 		bl	ulPortSetInterruptMask
 1296 051a 0346     		mov	r3, r0
 1297 051c 7B61     		str	r3, [r7, #20]
 1298 051e 01E0     		b	.L84
 1299              	.L83:
 632:../system/cmsis_os.c ****   }
 633:../system/cmsis_os.c ****   else {
 634:../system/cmsis_os.c ****     vPortEnterCritical();
 1300              		.loc 1 634 0
 1301 0520 FFF7FEFF 		bl	vPortEnterCritical
 1302              	.L84:
 635:../system/cmsis_os.c ****   }
 636:../system/cmsis_os.c ****   
 637:../system/cmsis_os.c ****   for (i = 0; i < pool_id->pool_sz; i++) {
 1303              		.loc 1 637 0
 1304 0524 0023     		movs	r3, #0
 1305 0526 FB60     		str	r3, [r7, #12]
 1306 0528 29E0     		b	.L85
 1307              	.L89:
 638:../system/cmsis_os.c ****     index = pool_id->currentIndex + i;
 1308              		.loc 1 638 0
 1309 052a 7B68     		ldr	r3, [r7, #4]
 1310 052c 1A69     		ldr	r2, [r3, #16]
 1311 052e FB68     		ldr	r3, [r7, #12]
 1312 0530 1344     		add	r3, r3, r2
 1313 0532 BB60     		str	r3, [r7, #8]
 639:../system/cmsis_os.c ****     if (index >= pool_id->pool_sz) {
 1314              		.loc 1 639 0
 1315 0534 7B68     		ldr	r3, [r7, #4]
 1316 0536 9A68     		ldr	r2, [r3, #8]
 1317 0538 BB68     		ldr	r3, [r7, #8]
 1318 053a 9A42     		cmp	r2, r3
 1319 053c 01D8     		bhi	.L86
 640:../system/cmsis_os.c ****       index = 0;
 1320              		.loc 1 640 0
 1321 053e 0023     		movs	r3, #0
 1322 0540 BB60     		str	r3, [r7, #8]
 1323              	.L86:
 641:../system/cmsis_os.c ****     }
 642:../system/cmsis_os.c ****     
 643:../system/cmsis_os.c ****     if (pool_id->markers[index] == 0) {
 1324              		.loc 1 643 0
 1325 0542 7B68     		ldr	r3, [r7, #4]
 1326 0544 5A68     		ldr	r2, [r3, #4]
 1327 0546 BB68     		ldr	r3, [r7, #8]
 1328 0548 1344     		add	r3, r3, r2
 1329 054a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1330 054c 002B     		cmp	r3, #0
 1331 054e 13D1     		bne	.L87
 644:../system/cmsis_os.c ****       pool_id->markers[index] = 1;
 1332              		.loc 1 644 0
 1333 0550 7B68     		ldr	r3, [r7, #4]
 1334 0552 5A68     		ldr	r2, [r3, #4]
 1335 0554 BB68     		ldr	r3, [r7, #8]
 1336 0556 1344     		add	r3, r3, r2
 1337 0558 0122     		movs	r2, #1
 1338 055a 1A70     		strb	r2, [r3]
 645:../system/cmsis_os.c ****       p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 1339              		.loc 1 645 0
 1340 055c 7B68     		ldr	r3, [r7, #4]
 1341 055e 1B68     		ldr	r3, [r3]
 1342 0560 1A46     		mov	r2, r3
 1343 0562 7B68     		ldr	r3, [r7, #4]
 1344 0564 DB68     		ldr	r3, [r3, #12]
 1345 0566 B968     		ldr	r1, [r7, #8]
 1346 0568 01FB03F3 		mul	r3, r1, r3
 1347 056c 1344     		add	r3, r3, r2
 1348 056e 3B61     		str	r3, [r7, #16]
 646:../system/cmsis_os.c ****       pool_id->currentIndex = index;
 1349              		.loc 1 646 0
 1350 0570 7B68     		ldr	r3, [r7, #4]
 1351 0572 BA68     		ldr	r2, [r7, #8]
 1352 0574 1A61     		str	r2, [r3, #16]
 647:../system/cmsis_os.c ****       break;
 1353              		.loc 1 647 0
 1354 0576 07E0     		b	.L88
 1355              	.L87:
 637:../system/cmsis_os.c ****     index = pool_id->currentIndex + i;
 1356              		.loc 1 637 0
 1357 0578 FB68     		ldr	r3, [r7, #12]
 1358 057a 0133     		adds	r3, r3, #1
 1359 057c FB60     		str	r3, [r7, #12]
 1360              	.L85:
 637:../system/cmsis_os.c ****     index = pool_id->currentIndex + i;
 1361              		.loc 1 637 0 is_stmt 0 discriminator 1
 1362 057e 7B68     		ldr	r3, [r7, #4]
 1363 0580 9A68     		ldr	r2, [r3, #8]
 1364 0582 FB68     		ldr	r3, [r7, #12]
 1365 0584 9A42     		cmp	r2, r3
 1366 0586 D0D8     		bhi	.L89
 1367              	.L88:
 648:../system/cmsis_os.c ****     }
 649:../system/cmsis_os.c ****   }
 650:../system/cmsis_os.c ****   
 651:../system/cmsis_os.c ****   if (inHandlerMode()) {
 1368              		.loc 1 651 0 is_stmt 1
 1369 0588 FFF768FD 		bl	inHandlerMode
 1370 058c 0346     		mov	r3, r0
 1371 058e 002B     		cmp	r3, #0
 1372 0590 04D0     		beq	.L90
 652:../system/cmsis_os.c ****     portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 1373              		.loc 1 652 0
 1374 0592 7B69     		ldr	r3, [r7, #20]
 1375 0594 1846     		mov	r0, r3
 1376 0596 FFF7FEFF 		bl	vPortClearInterruptMask
 1377 059a 01E0     		b	.L91
 1378              	.L90:
 653:../system/cmsis_os.c ****   }
 654:../system/cmsis_os.c ****   else {
 655:../system/cmsis_os.c ****     vPortExitCritical();
 1379              		.loc 1 655 0
 1380 059c FFF7FEFF 		bl	vPortExitCritical
 1381              	.L91:
 656:../system/cmsis_os.c ****   }
 657:../system/cmsis_os.c ****   
 658:../system/cmsis_os.c ****   return p;
 1382              		.loc 1 658 0
 1383 05a0 3B69     		ldr	r3, [r7, #16]
 659:../system/cmsis_os.c **** }
 1384              		.loc 1 659 0
 1385 05a2 1846     		mov	r0, r3
 1386 05a4 1837     		adds	r7, r7, #24
 1387 05a6 BD46     		mov	sp, r7
 1388              		@ sp needed
 1389 05a8 80BD     		pop	{r7, pc}
 1390              		.cfi_endproc
 1391              	.LFE38:
 1393 05aa 00BF     		.align	2
 1394              		.global	osPoolCAlloc
 1395              		.thumb
 1396              		.thumb_func
 1398              	osPoolCAlloc:
 1399              	.LFB39:
 660:../system/cmsis_os.c **** 
 661:../system/cmsis_os.c **** /**
 662:../system/cmsis_os.c **** * @brief Allocate a memory block from a memory pool and set memory block to zero
 663:../system/cmsis_os.c **** * @param  pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
 664:../system/cmsis_os.c **** * @retval  address of the allocated memory block or NULL in case of no memory available.
 665:../system/cmsis_os.c **** * @note   MUST REMAIN UNCHANGED: \b osPoolCAlloc shall be consistent in every CMSIS-RTOS.
 666:../system/cmsis_os.c **** */
 667:../system/cmsis_os.c **** void *osPoolCAlloc (osPoolId pool_id)
 668:../system/cmsis_os.c **** {
 1400              		.loc 1 668 0
 1401              		.cfi_startproc
 1402              		@ args = 0, pretend = 0, frame = 16
 1403              		@ frame_needed = 1, uses_anonymous_args = 0
 1404 05ac 80B5     		push	{r7, lr}
 1405              		.cfi_def_cfa_offset 8
 1406              		.cfi_offset 7, -8
 1407              		.cfi_offset 14, -4
 1408 05ae 84B0     		sub	sp, sp, #16
 1409              		.cfi_def_cfa_offset 24
 1410 05b0 00AF     		add	r7, sp, #0
 1411              		.cfi_def_cfa_register 7
 1412 05b2 7860     		str	r0, [r7, #4]
 669:../system/cmsis_os.c ****   void *p = osPoolAlloc(pool_id);
 1413              		.loc 1 669 0
 1414 05b4 7868     		ldr	r0, [r7, #4]
 1415 05b6 FFF7FEFF 		bl	osPoolAlloc
 1416 05ba F860     		str	r0, [r7, #12]
 670:../system/cmsis_os.c ****   
 671:../system/cmsis_os.c ****   if (p != NULL)
 1417              		.loc 1 671 0
 1418 05bc FB68     		ldr	r3, [r7, #12]
 1419 05be 002B     		cmp	r3, #0
 1420 05c0 04D0     		beq	.L94
 672:../system/cmsis_os.c ****   {
 673:../system/cmsis_os.c ****     memset(p, 0, sizeof(pool_id->pool_sz));
 1421              		.loc 1 673 0
 1422 05c2 F868     		ldr	r0, [r7, #12]
 1423 05c4 0021     		movs	r1, #0
 1424 05c6 0422     		movs	r2, #4
 1425 05c8 FFF7FEFF 		bl	memset
 1426              	.L94:
 674:../system/cmsis_os.c ****   }
 675:../system/cmsis_os.c ****   
 676:../system/cmsis_os.c ****   return p;
 1427              		.loc 1 676 0
 1428 05cc FB68     		ldr	r3, [r7, #12]
 677:../system/cmsis_os.c **** }
 1429              		.loc 1 677 0
 1430 05ce 1846     		mov	r0, r3
 1431 05d0 1037     		adds	r7, r7, #16
 1432 05d2 BD46     		mov	sp, r7
 1433              		@ sp needed
 1434 05d4 80BD     		pop	{r7, pc}
 1435              		.cfi_endproc
 1436              	.LFE39:
 1438 05d6 00BF     		.align	2
 1439              		.global	osPoolFree
 1440              		.thumb
 1441              		.thumb_func
 1443              	osPoolFree:
 1444              	.LFB40:
 678:../system/cmsis_os.c **** 
 679:../system/cmsis_os.c **** /**
 680:../system/cmsis_os.c **** * @brief Return an allocated memory block back to a specific memory pool
 681:../system/cmsis_os.c **** * @param  pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
 682:../system/cmsis_os.c **** * @param  block         address of the allocated memory block that is returned to the memory pool.
 683:../system/cmsis_os.c **** * @retval  status code that indicates the execution status of the function.
 684:../system/cmsis_os.c **** * @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
 685:../system/cmsis_os.c **** */
 686:../system/cmsis_os.c **** osStatus osPoolFree (osPoolId pool_id, void *block)
 687:../system/cmsis_os.c **** {
 1445              		.loc 1 687 0
 1446              		.cfi_startproc
 1447              		@ args = 0, pretend = 0, frame = 16
 1448              		@ frame_needed = 1, uses_anonymous_args = 0
 1449              		@ link register save eliminated.
 1450 05d8 80B4     		push	{r7}
 1451              		.cfi_def_cfa_offset 4
 1452              		.cfi_offset 7, -4
 1453 05da 85B0     		sub	sp, sp, #20
 1454              		.cfi_def_cfa_offset 24
 1455 05dc 00AF     		add	r7, sp, #0
 1456              		.cfi_def_cfa_register 7
 1457 05de 7860     		str	r0, [r7, #4]
 1458 05e0 3960     		str	r1, [r7]
 688:../system/cmsis_os.c ****   uint32_t index;
 689:../system/cmsis_os.c ****   
 690:../system/cmsis_os.c ****   if (pool_id == NULL) {
 1459              		.loc 1 690 0
 1460 05e2 7B68     		ldr	r3, [r7, #4]
 1461 05e4 002B     		cmp	r3, #0
 1462 05e6 01D1     		bne	.L97
 691:../system/cmsis_os.c ****     return osErrorParameter;
 1463              		.loc 1 691 0
 1464 05e8 8023     		movs	r3, #128
 1465 05ea 30E0     		b	.L98
 1466              	.L97:
 692:../system/cmsis_os.c ****   }
 693:../system/cmsis_os.c ****   
 694:../system/cmsis_os.c ****   if (block == NULL) {
 1467              		.loc 1 694 0
 1468 05ec 3B68     		ldr	r3, [r7]
 1469 05ee 002B     		cmp	r3, #0
 1470 05f0 01D1     		bne	.L99
 695:../system/cmsis_os.c ****     return osErrorParameter;
 1471              		.loc 1 695 0
 1472 05f2 8023     		movs	r3, #128
 1473 05f4 2BE0     		b	.L98
 1474              	.L99:
 696:../system/cmsis_os.c ****   }
 697:../system/cmsis_os.c ****   
 698:../system/cmsis_os.c ****   if (block < pool_id->pool) {
 1475              		.loc 1 698 0
 1476 05f6 7B68     		ldr	r3, [r7, #4]
 1477 05f8 1A68     		ldr	r2, [r3]
 1478 05fa 3B68     		ldr	r3, [r7]
 1479 05fc 9A42     		cmp	r2, r3
 1480 05fe 01D9     		bls	.L100
 699:../system/cmsis_os.c ****     return osErrorParameter;
 1481              		.loc 1 699 0
 1482 0600 8023     		movs	r3, #128
 1483 0602 24E0     		b	.L98
 1484              	.L100:
 700:../system/cmsis_os.c ****   }
 701:../system/cmsis_os.c ****   
 702:../system/cmsis_os.c ****   index = (uint32_t)block - (uint32_t)(pool_id->pool);
 1485              		.loc 1 702 0
 1486 0604 3A68     		ldr	r2, [r7]
 1487 0606 7B68     		ldr	r3, [r7, #4]
 1488 0608 1B68     		ldr	r3, [r3]
 1489 060a D31A     		subs	r3, r2, r3
 1490 060c FB60     		str	r3, [r7, #12]
 703:../system/cmsis_os.c ****   if (index % pool_id->item_sz) {
 1491              		.loc 1 703 0
 1492 060e 7B68     		ldr	r3, [r7, #4]
 1493 0610 DA68     		ldr	r2, [r3, #12]
 1494 0612 FB68     		ldr	r3, [r7, #12]
 1495 0614 B3FBF2F1 		udiv	r1, r3, r2
 1496 0618 02FB01F2 		mul	r2, r2, r1
 1497 061c 9B1A     		subs	r3, r3, r2
 1498 061e 002B     		cmp	r3, #0
 1499 0620 01D0     		beq	.L101
 704:../system/cmsis_os.c ****     return osErrorParameter;
 1500              		.loc 1 704 0
 1501 0622 8023     		movs	r3, #128
 1502 0624 13E0     		b	.L98
 1503              	.L101:
 705:../system/cmsis_os.c ****   }
 706:../system/cmsis_os.c ****   index = index / pool_id->item_sz;
 1504              		.loc 1 706 0
 1505 0626 7B68     		ldr	r3, [r7, #4]
 1506 0628 DB68     		ldr	r3, [r3, #12]
 1507 062a FA68     		ldr	r2, [r7, #12]
 1508 062c B2FBF3F3 		udiv	r3, r2, r3
 1509 0630 FB60     		str	r3, [r7, #12]
 707:../system/cmsis_os.c ****   if (index >= pool_id->pool_sz) {
 1510              		.loc 1 707 0
 1511 0632 7B68     		ldr	r3, [r7, #4]
 1512 0634 9A68     		ldr	r2, [r3, #8]
 1513 0636 FB68     		ldr	r3, [r7, #12]
 1514 0638 9A42     		cmp	r2, r3
 1515 063a 01D8     		bhi	.L102
 708:../system/cmsis_os.c ****     return osErrorParameter;
 1516              		.loc 1 708 0
 1517 063c 8023     		movs	r3, #128
 1518 063e 06E0     		b	.L98
 1519              	.L102:
 709:../system/cmsis_os.c ****   }
 710:../system/cmsis_os.c ****   
 711:../system/cmsis_os.c ****   pool_id->markers[index] = 0;
 1520              		.loc 1 711 0
 1521 0640 7B68     		ldr	r3, [r7, #4]
 1522 0642 5A68     		ldr	r2, [r3, #4]
 1523 0644 FB68     		ldr	r3, [r7, #12]
 1524 0646 1344     		add	r3, r3, r2
 1525 0648 0022     		movs	r2, #0
 1526 064a 1A70     		strb	r2, [r3]
 712:../system/cmsis_os.c ****   
 713:../system/cmsis_os.c ****   return osOK;
 1527              		.loc 1 713 0
 1528 064c 0023     		movs	r3, #0
 1529              	.L98:
 714:../system/cmsis_os.c **** }
 1530              		.loc 1 714 0
 1531 064e 1846     		mov	r0, r3
 1532 0650 1437     		adds	r7, r7, #20
 1533 0652 BD46     		mov	sp, r7
 1534              		@ sp needed
 1535 0654 5DF8047B 		ldr	r7, [sp], #4
 1536 0658 7047     		bx	lr
 1537              		.cfi_endproc
 1538              	.LFE40:
 1540 065a 00BF     		.align	2
 1541              		.global	osMessageCreate
 1542              		.thumb
 1543              		.thumb_func
 1545              	osMessageCreate:
 1546              	.LFB41:
 715:../system/cmsis_os.c **** 
 716:../system/cmsis_os.c **** 
 717:../system/cmsis_os.c **** #endif   /* Use Memory Pool Management */
 718:../system/cmsis_os.c **** 
 719:../system/cmsis_os.c **** /*******************   Message Queue Management Functions  *********************/
 720:../system/cmsis_os.c **** 
 721:../system/cmsis_os.c **** #if (defined (osFeature_MessageQ)  &&  (osFeature_MessageQ != 0)) /* Use Message Queues */
 722:../system/cmsis_os.c **** 
 723:../system/cmsis_os.c **** /**
 724:../system/cmsis_os.c **** * @brief Create and Initialize a Message Queue
 725:../system/cmsis_os.c **** * @param queue_def     queue definition referenced with \ref osMessageQ.
 726:../system/cmsis_os.c **** * @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
 727:../system/cmsis_os.c **** * @retval  message queue ID for reference by other functions or NULL in case of error.
 728:../system/cmsis_os.c **** * @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
 729:../system/cmsis_os.c **** */
 730:../system/cmsis_os.c **** osMessageQId osMessageCreate (osMessageQDef_t *queue_def, osThreadId thread_id)
 731:../system/cmsis_os.c **** {
 1547              		.loc 1 731 0
 1548              		.cfi_startproc
 1549              		@ args = 0, pretend = 0, frame = 8
 1550              		@ frame_needed = 1, uses_anonymous_args = 0
 1551 065c 80B5     		push	{r7, lr}
 1552              		.cfi_def_cfa_offset 8
 1553              		.cfi_offset 7, -8
 1554              		.cfi_offset 14, -4
 1555 065e 82B0     		sub	sp, sp, #8
 1556              		.cfi_def_cfa_offset 16
 1557 0660 00AF     		add	r7, sp, #0
 1558              		.cfi_def_cfa_register 7
 1559 0662 7860     		str	r0, [r7, #4]
 1560 0664 3960     		str	r1, [r7]
 732:../system/cmsis_os.c ****   (void) thread_id;
 733:../system/cmsis_os.c ****   
 734:../system/cmsis_os.c ****   return xQueueCreate(queue_def->queue_sz, (uint32_t) sizeof(queue_def->item_sz));
 1561              		.loc 1 734 0
 1562 0666 7B68     		ldr	r3, [r7, #4]
 1563 0668 1B68     		ldr	r3, [r3]
 1564 066a 1846     		mov	r0, r3
 1565 066c 0421     		movs	r1, #4
 1566 066e 0022     		movs	r2, #0
 1567 0670 FFF7FEFF 		bl	xQueueGenericCreate
 1568 0674 0346     		mov	r3, r0
 735:../system/cmsis_os.c **** }
 1569              		.loc 1 735 0
 1570 0676 1846     		mov	r0, r3
 1571 0678 0837     		adds	r7, r7, #8
 1572 067a BD46     		mov	sp, r7
 1573              		@ sp needed
 1574 067c 80BD     		pop	{r7, pc}
 1575              		.cfi_endproc
 1576              	.LFE41:
 1578 067e 00BF     		.align	2
 1579              		.global	osMessagePut
 1580              		.thumb
 1581              		.thumb_func
 1583              	osMessagePut:
 1584              	.LFB42:
 736:../system/cmsis_os.c **** 
 737:../system/cmsis_os.c **** /**
 738:../system/cmsis_os.c **** * @brief Put a Message to a Queue.
 739:../system/cmsis_os.c **** * @param  queue_id  message queue ID obtained with \ref osMessageCreate.
 740:../system/cmsis_os.c **** * @param  info      message information.
 741:../system/cmsis_os.c **** * @param  millisec  timeout value or 0 in case of no time-out.
 742:../system/cmsis_os.c **** * @retval status code that indicates the execution status of the function.
 743:../system/cmsis_os.c **** * @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
 744:../system/cmsis_os.c **** */
 745:../system/cmsis_os.c **** osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
 746:../system/cmsis_os.c **** {
 1585              		.loc 1 746 0
 1586              		.cfi_startproc
 1587              		@ args = 0, pretend = 0, frame = 24
 1588              		@ frame_needed = 1, uses_anonymous_args = 0
 1589 0680 80B5     		push	{r7, lr}
 1590              		.cfi_def_cfa_offset 8
 1591              		.cfi_offset 7, -8
 1592              		.cfi_offset 14, -4
 1593 0682 86B0     		sub	sp, sp, #24
 1594              		.cfi_def_cfa_offset 32
 1595 0684 00AF     		add	r7, sp, #0
 1596              		.cfi_def_cfa_register 7
 1597 0686 F860     		str	r0, [r7, #12]
 1598 0688 B960     		str	r1, [r7, #8]
 1599 068a 7A60     		str	r2, [r7, #4]
 747:../system/cmsis_os.c ****   portBASE_TYPE taskWoken = pdFALSE;
 1600              		.loc 1 747 0
 1601 068c 0023     		movs	r3, #0
 1602 068e 3B61     		str	r3, [r7, #16]
 748:../system/cmsis_os.c ****   portTickType ticks;
 749:../system/cmsis_os.c ****   
 750:../system/cmsis_os.c ****   ticks = millisec / portTICK_RATE_MS;
 1603              		.loc 1 750 0
 1604 0690 7B68     		ldr	r3, [r7, #4]
 1605 0692 7B61     		str	r3, [r7, #20]
 751:../system/cmsis_os.c ****   if (ticks == 0) {
 1606              		.loc 1 751 0
 1607 0694 7B69     		ldr	r3, [r7, #20]
 1608 0696 002B     		cmp	r3, #0
 1609 0698 01D1     		bne	.L106
 752:../system/cmsis_os.c ****     ticks = 1;
 1610              		.loc 1 752 0
 1611 069a 0123     		movs	r3, #1
 1612 069c 7B61     		str	r3, [r7, #20]
 1613              	.L106:
 753:../system/cmsis_os.c ****   }
 754:../system/cmsis_os.c ****   
 755:../system/cmsis_os.c ****   if (inHandlerMode()) {
 1614              		.loc 1 755 0
 1615 069e FFF7DDFC 		bl	inHandlerMode
 1616 06a2 0346     		mov	r3, r0
 1617 06a4 002B     		cmp	r3, #0
 1618 06a6 19D0     		beq	.L107
 756:../system/cmsis_os.c ****     if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 1619              		.loc 1 756 0
 1620 06a8 07F10802 		add	r2, r7, #8
 1621 06ac 07F11003 		add	r3, r7, #16
 1622 06b0 F868     		ldr	r0, [r7, #12]
 1623 06b2 1146     		mov	r1, r2
 1624 06b4 1A46     		mov	r2, r3
 1625 06b6 0023     		movs	r3, #0
 1626 06b8 FFF7FEFF 		bl	xQueueGenericSendFromISR
 1627 06bc 0346     		mov	r3, r0
 1628 06be 012B     		cmp	r3, #1
 1629 06c0 01D0     		beq	.L108
 757:../system/cmsis_os.c ****       return osErrorOS;
 1630              		.loc 1 757 0
 1631 06c2 FF23     		movs	r3, #255
 1632 06c4 18E0     		b	.L112
 1633              	.L108:
 758:../system/cmsis_os.c ****     }
 759:../system/cmsis_os.c ****     portEND_SWITCHING_ISR(taskWoken);
 1634              		.loc 1 759 0
 1635 06c6 3B69     		ldr	r3, [r7, #16]
 1636 06c8 002B     		cmp	r3, #0
 1637 06ca 14D0     		beq	.L111
 1638              		.loc 1 759 0 is_stmt 0 discriminator 1
 1639 06cc 4EF60453 		movw	r3, #60676
 1640 06d0 CEF20003 		movt	r3, 57344
 1641 06d4 4FF08052 		mov	r2, #268435456
 1642 06d8 1A60     		str	r2, [r3]
 1643 06da 0CE0     		b	.L111
 1644              	.L107:
 760:../system/cmsis_os.c ****   }
 761:../system/cmsis_os.c ****   else {
 762:../system/cmsis_os.c ****     if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 1645              		.loc 1 762 0 is_stmt 1
 1646 06dc 07F10803 		add	r3, r7, #8
 1647 06e0 F868     		ldr	r0, [r7, #12]
 1648 06e2 1946     		mov	r1, r3
 1649 06e4 7A69     		ldr	r2, [r7, #20]
 1650 06e6 0023     		movs	r3, #0
 1651 06e8 FFF7FEFF 		bl	xQueueGenericSend
 1652 06ec 0346     		mov	r3, r0
 1653 06ee 012B     		cmp	r3, #1
 1654 06f0 01D0     		beq	.L111
 763:../system/cmsis_os.c ****       return osErrorOS;
 1655              		.loc 1 763 0
 1656 06f2 FF23     		movs	r3, #255
 1657 06f4 00E0     		b	.L112
 1658              	.L111:
 764:../system/cmsis_os.c ****     }
 765:../system/cmsis_os.c ****   }
 766:../system/cmsis_os.c ****   
 767:../system/cmsis_os.c ****   return osOK;
 1659              		.loc 1 767 0
 1660 06f6 0023     		movs	r3, #0
 1661              	.L112:
 768:../system/cmsis_os.c **** }
 1662              		.loc 1 768 0
 1663 06f8 1846     		mov	r0, r3
 1664 06fa 1837     		adds	r7, r7, #24
 1665 06fc BD46     		mov	sp, r7
 1666              		@ sp needed
 1667 06fe 80BD     		pop	{r7, pc}
 1668              		.cfi_endproc
 1669              	.LFE42:
 1671              		.align	2
 1672              		.global	osMessageGet
 1673              		.thumb
 1674              		.thumb_func
 1676              	osMessageGet:
 1677              	.LFB43:
 769:../system/cmsis_os.c **** 
 770:../system/cmsis_os.c **** /**
 771:../system/cmsis_os.c **** * @brief Get a Message or Wait for a Message from a Queue.
 772:../system/cmsis_os.c **** * @param  queue_id  message queue ID obtained with \ref osMessageCreate.
 773:../system/cmsis_os.c **** * @param  millisec  timeout value or 0 in case of no time-out.
 774:../system/cmsis_os.c **** * @retval event information that includes status code.
 775:../system/cmsis_os.c **** * @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
 776:../system/cmsis_os.c **** */
 777:../system/cmsis_os.c **** osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
 778:../system/cmsis_os.c **** {
 1678              		.loc 1 778 0
 1679              		.cfi_startproc
 1680              		@ args = 0, pretend = 0, frame = 40
 1681              		@ frame_needed = 1, uses_anonymous_args = 0
 1682 0700 80B5     		push	{r7, lr}
 1683              		.cfi_def_cfa_offset 8
 1684              		.cfi_offset 7, -8
 1685              		.cfi_offset 14, -4
 1686 0702 8AB0     		sub	sp, sp, #40
 1687              		.cfi_def_cfa_offset 48
 1688 0704 00AF     		add	r7, sp, #0
 1689              		.cfi_def_cfa_register 7
 1690 0706 F860     		str	r0, [r7, #12]
 1691 0708 B960     		str	r1, [r7, #8]
 1692 070a 7A60     		str	r2, [r7, #4]
 779:../system/cmsis_os.c ****   portBASE_TYPE taskWoken;
 780:../system/cmsis_os.c ****   portTickType ticks;
 781:../system/cmsis_os.c ****   osEvent event;
 782:../system/cmsis_os.c ****   
 783:../system/cmsis_os.c ****   event.def.message_id = queue_id;
 1693              		.loc 1 783 0
 1694 070c BB68     		ldr	r3, [r7, #8]
 1695 070e FB61     		str	r3, [r7, #28]
 784:../system/cmsis_os.c ****   
 785:../system/cmsis_os.c ****   if (queue_id == NULL) {
 1696              		.loc 1 785 0
 1697 0710 BB68     		ldr	r3, [r7, #8]
 1698 0712 002B     		cmp	r3, #0
 1699 0714 08D1     		bne	.L114
 786:../system/cmsis_os.c ****     event.status = osErrorParameter;
 1700              		.loc 1 786 0
 1701 0716 8023     		movs	r3, #128
 1702 0718 7B61     		str	r3, [r7, #20]
 787:../system/cmsis_os.c ****     return event;
 1703              		.loc 1 787 0
 1704 071a FB68     		ldr	r3, [r7, #12]
 1705 071c 07F11402 		add	r2, r7, #20
 1706 0720 07CA     		ldmia	r2, {r0, r1, r2}
 1707 0722 83E80700 		stmia	r3, {r0, r1, r2}
 1708 0726 53E0     		b	.L113
 1709              	.L114:
 788:../system/cmsis_os.c ****   }
 789:../system/cmsis_os.c ****   
 790:../system/cmsis_os.c ****   taskWoken = pdFALSE;
 1710              		.loc 1 790 0
 1711 0728 0023     		movs	r3, #0
 1712 072a 3B62     		str	r3, [r7, #32]
 791:../system/cmsis_os.c ****   
 792:../system/cmsis_os.c ****   ticks = 0;
 1713              		.loc 1 792 0
 1714 072c 0023     		movs	r3, #0
 1715 072e 7B62     		str	r3, [r7, #36]
 793:../system/cmsis_os.c ****   if (millisec == osWaitForever) {
 1716              		.loc 1 793 0
 1717 0730 7B68     		ldr	r3, [r7, #4]
 1718 0732 B3F1FF3F 		cmp	r3, #-1
 1719 0736 03D1     		bne	.L116
 794:../system/cmsis_os.c ****     ticks = portMAX_DELAY;
 1720              		.loc 1 794 0
 1721 0738 4FF0FF33 		mov	r3, #-1
 1722 073c 7B62     		str	r3, [r7, #36]
 1723 073e 09E0     		b	.L117
 1724              	.L116:
 795:../system/cmsis_os.c ****   }
 796:../system/cmsis_os.c ****   else if (millisec != 0) {
 1725              		.loc 1 796 0
 1726 0740 7B68     		ldr	r3, [r7, #4]
 1727 0742 002B     		cmp	r3, #0
 1728 0744 06D0     		beq	.L117
 797:../system/cmsis_os.c ****     ticks = millisec / portTICK_RATE_MS;
 1729              		.loc 1 797 0
 1730 0746 7B68     		ldr	r3, [r7, #4]
 1731 0748 7B62     		str	r3, [r7, #36]
 798:../system/cmsis_os.c ****     if (ticks == 0) {
 1732              		.loc 1 798 0
 1733 074a 7B6A     		ldr	r3, [r7, #36]
 1734 074c 002B     		cmp	r3, #0
 1735 074e 01D1     		bne	.L117
 799:../system/cmsis_os.c ****       ticks = 1;
 1736              		.loc 1 799 0
 1737 0750 0123     		movs	r3, #1
 1738 0752 7B62     		str	r3, [r7, #36]
 1739              	.L117:
 800:../system/cmsis_os.c ****     }
 801:../system/cmsis_os.c ****   }
 802:../system/cmsis_os.c ****   
 803:../system/cmsis_os.c ****   if (inHandlerMode()) {
 1740              		.loc 1 803 0
 1741 0754 FFF782FC 		bl	inHandlerMode
 1742 0758 0346     		mov	r3, r0
 1743 075a 002B     		cmp	r3, #0
 1744 075c 1CD0     		beq	.L118
 804:../system/cmsis_os.c ****     if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 1745              		.loc 1 804 0
 1746 075e 07F11403 		add	r3, r7, #20
 1747 0762 1A1D     		adds	r2, r3, #4
 1748 0764 07F12003 		add	r3, r7, #32
 1749 0768 B868     		ldr	r0, [r7, #8]
 1750 076a 1146     		mov	r1, r2
 1751 076c 1A46     		mov	r2, r3
 1752 076e FFF7FEFF 		bl	xQueueReceiveFromISR
 1753 0772 0346     		mov	r3, r0
 1754 0774 012B     		cmp	r3, #1
 1755 0776 02D1     		bne	.L119
 805:../system/cmsis_os.c ****       /* We have mail */
 806:../system/cmsis_os.c ****       event.status = osEventMessage;
 1756              		.loc 1 806 0
 1757 0778 1023     		movs	r3, #16
 1758 077a 7B61     		str	r3, [r7, #20]
 1759 077c 01E0     		b	.L120
 1760              	.L119:
 807:../system/cmsis_os.c ****     }
 808:../system/cmsis_os.c ****     else {
 809:../system/cmsis_os.c ****       event.status = osOK;
 1761              		.loc 1 809 0
 1762 077e 0023     		movs	r3, #0
 1763 0780 7B61     		str	r3, [r7, #20]
 1764              	.L120:
 810:../system/cmsis_os.c ****     }
 811:../system/cmsis_os.c ****     portEND_SWITCHING_ISR(taskWoken);
 1765              		.loc 1 811 0
 1766 0782 3B6A     		ldr	r3, [r7, #32]
 1767 0784 002B     		cmp	r3, #0
 1768 0786 1DD0     		beq	.L122
 1769              		.loc 1 811 0 is_stmt 0 discriminator 1
 1770 0788 4EF60453 		movw	r3, #60676
 1771 078c CEF20003 		movt	r3, 57344
 1772 0790 4FF08052 		mov	r2, #268435456
 1773 0794 1A60     		str	r2, [r3]
 1774 0796 15E0     		b	.L122
 1775              	.L118:
 812:../system/cmsis_os.c ****   }
 813:../system/cmsis_os.c ****   else {
 814:../system/cmsis_os.c ****     if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 1776              		.loc 1 814 0 is_stmt 1
 1777 0798 07F11403 		add	r3, r7, #20
 1778 079c 0433     		adds	r3, r3, #4
 1779 079e B868     		ldr	r0, [r7, #8]
 1780 07a0 1946     		mov	r1, r3
 1781 07a2 7A6A     		ldr	r2, [r7, #36]
 1782 07a4 0023     		movs	r3, #0
 1783 07a6 FFF7FEFF 		bl	xQueueGenericReceive
 1784 07aa 0346     		mov	r3, r0
 1785 07ac 012B     		cmp	r3, #1
 1786 07ae 02D1     		bne	.L123
 815:../system/cmsis_os.c ****       /* We have mail */
 816:../system/cmsis_os.c ****       event.status = osEventMessage;
 1787              		.loc 1 816 0
 1788 07b0 1023     		movs	r3, #16
 1789 07b2 7B61     		str	r3, [r7, #20]
 1790 07b4 06E0     		b	.L122
 1791              	.L123:
 817:../system/cmsis_os.c ****     }
 818:../system/cmsis_os.c ****     else {
 819:../system/cmsis_os.c ****       event.status = (ticks == 0) ? osOK : osEventTimeout;
 1792              		.loc 1 819 0
 1793 07b6 7B6A     		ldr	r3, [r7, #36]
 1794 07b8 002B     		cmp	r3, #0
 1795 07ba 01D1     		bne	.L124
 1796              		.loc 1 819 0 is_stmt 0 discriminator 1
 1797 07bc 0023     		movs	r3, #0
 1798 07be 00E0     		b	.L125
 1799              	.L124:
 1800              		.loc 1 819 0 discriminator 2
 1801 07c0 4023     		movs	r3, #64
 1802              	.L125:
 1803              		.loc 1 819 0 discriminator 3
 1804 07c2 7B61     		str	r3, [r7, #20]
 1805              	.L122:
 820:../system/cmsis_os.c ****     }
 821:../system/cmsis_os.c ****   }
 822:../system/cmsis_os.c ****   
 823:../system/cmsis_os.c ****   return event;
 1806              		.loc 1 823 0 is_stmt 1
 1807 07c4 FB68     		ldr	r3, [r7, #12]
 1808 07c6 07F11402 		add	r2, r7, #20
 1809 07ca 07CA     		ldmia	r2, {r0, r1, r2}
 1810 07cc 83E80700 		stmia	r3, {r0, r1, r2}
 1811              	.L113:
 824:../system/cmsis_os.c **** }
 1812              		.loc 1 824 0
 1813 07d0 F868     		ldr	r0, [r7, #12]
 1814 07d2 2837     		adds	r7, r7, #40
 1815 07d4 BD46     		mov	sp, r7
 1816              		@ sp needed
 1817 07d6 80BD     		pop	{r7, pc}
 1818              		.cfi_endproc
 1819              	.LFE43:
 1821              		.align	2
 1822              		.global	osMailCreate
 1823              		.thumb
 1824              		.thumb_func
 1826              	osMailCreate:
 1827              	.LFB44:
 825:../system/cmsis_os.c **** 
 826:../system/cmsis_os.c **** #endif     /* Use Message Queues */
 827:../system/cmsis_os.c **** 
 828:../system/cmsis_os.c **** /********************   Mail Queue Management Functions  ***********************/
 829:../system/cmsis_os.c **** 
 830:../system/cmsis_os.c **** #if (defined (osFeature_MailQ)  &&  (osFeature_MailQ != 0))  /* Use Mail Queues */
 831:../system/cmsis_os.c **** 
 832:../system/cmsis_os.c **** 
 833:../system/cmsis_os.c **** typedef struct os_mailQ_cb {
 834:../system/cmsis_os.c ****   osMailQDef_t *queue_def;
 835:../system/cmsis_os.c ****   xQueueHandle handle;
 836:../system/cmsis_os.c ****   osPoolId pool;
 837:../system/cmsis_os.c **** } os_mailQ_cb_t;
 838:../system/cmsis_os.c **** 
 839:../system/cmsis_os.c **** /**
 840:../system/cmsis_os.c **** * @brief Create and Initialize mail queue
 841:../system/cmsis_os.c **** * @param  queue_def     reference to the mail queue definition obtain with \ref osMailQ
 842:../system/cmsis_os.c **** * @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
 843:../system/cmsis_os.c **** * @retval mail queue ID for reference by other functions or NULL in case of error.
 844:../system/cmsis_os.c **** * @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
 845:../system/cmsis_os.c **** */
 846:../system/cmsis_os.c **** osMailQId osMailCreate (osMailQDef_t *queue_def, osThreadId thread_id)
 847:../system/cmsis_os.c **** {
 1828              		.loc 1 847 0
 1829              		.cfi_startproc
 1830              		@ args = 0, pretend = 0, frame = 24
 1831              		@ frame_needed = 1, uses_anonymous_args = 0
 1832 07d8 90B5     		push	{r4, r7, lr}
 1833              		.cfi_def_cfa_offset 12
 1834              		.cfi_offset 4, -12
 1835              		.cfi_offset 7, -8
 1836              		.cfi_offset 14, -4
 1837 07da 87B0     		sub	sp, sp, #28
 1838              		.cfi_def_cfa_offset 40
 1839 07dc 00AF     		add	r7, sp, #0
 1840              		.cfi_def_cfa_register 7
 1841 07de 7860     		str	r0, [r7, #4]
 1842 07e0 3960     		str	r1, [r7]
 848:../system/cmsis_os.c ****   (void) thread_id;
 849:../system/cmsis_os.c ****   
 850:../system/cmsis_os.c ****   osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz};
 1843              		.loc 1 850 0
 1844 07e2 07F10C03 		add	r3, r7, #12
 1845 07e6 0022     		movs	r2, #0
 1846 07e8 1A60     		str	r2, [r3]
 1847 07ea 0433     		adds	r3, r3, #4
 1848 07ec 0022     		movs	r2, #0
 1849 07ee 1A60     		str	r2, [r3]
 1850 07f0 0433     		adds	r3, r3, #4
 1851 07f2 0022     		movs	r2, #0
 1852 07f4 1A60     		str	r2, [r3]
 1853 07f6 0433     		adds	r3, r3, #4
 1854 07f8 7B68     		ldr	r3, [r7, #4]
 1855 07fa 1B68     		ldr	r3, [r3]
 1856 07fc FB60     		str	r3, [r7, #12]
 1857 07fe 7B68     		ldr	r3, [r7, #4]
 1858 0800 5B68     		ldr	r3, [r3, #4]
 1859 0802 3B61     		str	r3, [r7, #16]
 851:../system/cmsis_os.c ****   
 852:../system/cmsis_os.c ****   
 853:../system/cmsis_os.c ****   /* Create a mail queue control block */
 854:../system/cmsis_os.c ****   *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 1860              		.loc 1 854 0
 1861 0804 7B68     		ldr	r3, [r7, #4]
 1862 0806 9C68     		ldr	r4, [r3, #8]
 1863 0808 0C20     		movs	r0, #12
 1864 080a FFF7FEFF 		bl	pvPortMalloc
 1865 080e 0346     		mov	r3, r0
 1866 0810 2360     		str	r3, [r4]
 855:../system/cmsis_os.c ****   if (*(queue_def->cb) == NULL) {
 1867              		.loc 1 855 0
 1868 0812 7B68     		ldr	r3, [r7, #4]
 1869 0814 9B68     		ldr	r3, [r3, #8]
 1870 0816 1B68     		ldr	r3, [r3]
 1871 0818 002B     		cmp	r3, #0
 1872 081a 01D1     		bne	.L128
 856:../system/cmsis_os.c ****     return NULL;
 1873              		.loc 1 856 0
 1874 081c 0023     		movs	r3, #0
 1875 081e 39E0     		b	.L132
 1876              	.L128:
 857:../system/cmsis_os.c ****   }
 858:../system/cmsis_os.c ****   (*(queue_def->cb))->queue_def = queue_def;
 1877              		.loc 1 858 0
 1878 0820 7B68     		ldr	r3, [r7, #4]
 1879 0822 9B68     		ldr	r3, [r3, #8]
 1880 0824 1B68     		ldr	r3, [r3]
 1881 0826 7A68     		ldr	r2, [r7, #4]
 1882 0828 1A60     		str	r2, [r3]
 859:../system/cmsis_os.c ****   
 860:../system/cmsis_os.c ****   /* Create a queue in FreeRTOS */
 861:../system/cmsis_os.c ****   (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 1883              		.loc 1 861 0
 1884 082a 7B68     		ldr	r3, [r7, #4]
 1885 082c 9B68     		ldr	r3, [r3, #8]
 1886 082e 1C68     		ldr	r4, [r3]
 1887 0830 7B68     		ldr	r3, [r7, #4]
 1888 0832 1B68     		ldr	r3, [r3]
 1889 0834 1846     		mov	r0, r3
 1890 0836 0421     		movs	r1, #4
 1891 0838 0022     		movs	r2, #0
 1892 083a FFF7FEFF 		bl	xQueueGenericCreate
 1893 083e 0346     		mov	r3, r0
 1894 0840 6360     		str	r3, [r4, #4]
 862:../system/cmsis_os.c ****   if ((*(queue_def->cb))->handle == NULL) {
 1895              		.loc 1 862 0
 1896 0842 7B68     		ldr	r3, [r7, #4]
 1897 0844 9B68     		ldr	r3, [r3, #8]
 1898 0846 1B68     		ldr	r3, [r3]
 1899 0848 5B68     		ldr	r3, [r3, #4]
 1900 084a 002B     		cmp	r3, #0
 1901 084c 07D1     		bne	.L130
 863:../system/cmsis_os.c ****     vPortFree(*(queue_def->cb));
 1902              		.loc 1 863 0
 1903 084e 7B68     		ldr	r3, [r7, #4]
 1904 0850 9B68     		ldr	r3, [r3, #8]
 1905 0852 1B68     		ldr	r3, [r3]
 1906 0854 1846     		mov	r0, r3
 1907 0856 FFF7FEFF 		bl	vPortFree
 864:../system/cmsis_os.c ****     return NULL;
 1908              		.loc 1 864 0
 1909 085a 0023     		movs	r3, #0
 1910 085c 1AE0     		b	.L132
 1911              	.L130:
 865:../system/cmsis_os.c ****   }
 866:../system/cmsis_os.c ****   
 867:../system/cmsis_os.c ****   /* Create a mail pool */
 868:../system/cmsis_os.c ****   (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 1912              		.loc 1 868 0
 1913 085e 7B68     		ldr	r3, [r7, #4]
 1914 0860 9B68     		ldr	r3, [r3, #8]
 1915 0862 1C68     		ldr	r4, [r3]
 1916 0864 07F10C03 		add	r3, r7, #12
 1917 0868 1846     		mov	r0, r3
 1918 086a FFF7FEFF 		bl	osPoolCreate
 1919 086e 0346     		mov	r3, r0
 1920 0870 A360     		str	r3, [r4, #8]
 869:../system/cmsis_os.c ****   if ((*(queue_def->cb))->pool == NULL) {
 1921              		.loc 1 869 0
 1922 0872 7B68     		ldr	r3, [r7, #4]
 1923 0874 9B68     		ldr	r3, [r3, #8]
 1924 0876 1B68     		ldr	r3, [r3]
 1925 0878 9B68     		ldr	r3, [r3, #8]
 1926 087a 002B     		cmp	r3, #0
 1927 087c 07D1     		bne	.L131
 870:../system/cmsis_os.c ****     //TODO: Delete queue. How to do it in FreeRTOS?
 871:../system/cmsis_os.c ****     vPortFree(*(queue_def->cb));
 1928              		.loc 1 871 0
 1929 087e 7B68     		ldr	r3, [r7, #4]
 1930 0880 9B68     		ldr	r3, [r3, #8]
 1931 0882 1B68     		ldr	r3, [r3]
 1932 0884 1846     		mov	r0, r3
 1933 0886 FFF7FEFF 		bl	vPortFree
 872:../system/cmsis_os.c ****     return NULL;
 1934              		.loc 1 872 0
 1935 088a 0023     		movs	r3, #0
 1936 088c 02E0     		b	.L132
 1937              	.L131:
 873:../system/cmsis_os.c ****   }
 874:../system/cmsis_os.c ****   
 875:../system/cmsis_os.c ****   return *(queue_def->cb);
 1938              		.loc 1 875 0
 1939 088e 7B68     		ldr	r3, [r7, #4]
 1940 0890 9B68     		ldr	r3, [r3, #8]
 1941 0892 1B68     		ldr	r3, [r3]
 1942              	.L132:
 876:../system/cmsis_os.c **** }
 1943              		.loc 1 876 0
 1944 0894 1846     		mov	r0, r3
 1945 0896 1C37     		adds	r7, r7, #28
 1946 0898 BD46     		mov	sp, r7
 1947              		@ sp needed
 1948 089a 90BD     		pop	{r4, r7, pc}
 1949              		.cfi_endproc
 1950              	.LFE44:
 1952              		.align	2
 1953              		.global	osMailAlloc
 1954              		.thumb
 1955              		.thumb_func
 1957              	osMailAlloc:
 1958              	.LFB45:
 877:../system/cmsis_os.c **** 
 878:../system/cmsis_os.c **** /**
 879:../system/cmsis_os.c **** * @brief Allocate a memory block from a mail
 880:../system/cmsis_os.c **** * @param  queue_id      mail queue ID obtained with \ref osMailCreate.
 881:../system/cmsis_os.c **** * @param  millisec      timeout value or 0 in case of no time-out.
 882:../system/cmsis_os.c **** * @retval pointer to memory block that can be filled with mail or NULL in case error.
 883:../system/cmsis_os.c **** * @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
 884:../system/cmsis_os.c **** */
 885:../system/cmsis_os.c **** void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
 886:../system/cmsis_os.c **** {
 1959              		.loc 1 886 0
 1960              		.cfi_startproc
 1961              		@ args = 0, pretend = 0, frame = 16
 1962              		@ frame_needed = 1, uses_anonymous_args = 0
 1963 089c 80B5     		push	{r7, lr}
 1964              		.cfi_def_cfa_offset 8
 1965              		.cfi_offset 7, -8
 1966              		.cfi_offset 14, -4
 1967 089e 84B0     		sub	sp, sp, #16
 1968              		.cfi_def_cfa_offset 24
 1969 08a0 00AF     		add	r7, sp, #0
 1970              		.cfi_def_cfa_register 7
 1971 08a2 7860     		str	r0, [r7, #4]
 1972 08a4 3960     		str	r1, [r7]
 887:../system/cmsis_os.c ****   (void) millisec;
 888:../system/cmsis_os.c ****   void *p;
 889:../system/cmsis_os.c ****   
 890:../system/cmsis_os.c ****   
 891:../system/cmsis_os.c ****   if (queue_id == NULL) {
 1973              		.loc 1 891 0
 1974 08a6 7B68     		ldr	r3, [r7, #4]
 1975 08a8 002B     		cmp	r3, #0
 1976 08aa 01D1     		bne	.L134
 892:../system/cmsis_os.c ****     return NULL;
 1977              		.loc 1 892 0
 1978 08ac 0023     		movs	r3, #0
 1979 08ae 06E0     		b	.L135
 1980              	.L134:
 893:../system/cmsis_os.c ****   }
 894:../system/cmsis_os.c ****   
 895:../system/cmsis_os.c ****   p = osPoolAlloc(queue_id->pool);
 1981              		.loc 1 895 0
 1982 08b0 7B68     		ldr	r3, [r7, #4]
 1983 08b2 9B68     		ldr	r3, [r3, #8]
 1984 08b4 1846     		mov	r0, r3
 1985 08b6 FFF7FEFF 		bl	osPoolAlloc
 1986 08ba F860     		str	r0, [r7, #12]
 896:../system/cmsis_os.c ****   
 897:../system/cmsis_os.c ****   return p;
 1987              		.loc 1 897 0
 1988 08bc FB68     		ldr	r3, [r7, #12]
 1989              	.L135:
 898:../system/cmsis_os.c **** }
 1990              		.loc 1 898 0
 1991 08be 1846     		mov	r0, r3
 1992 08c0 1037     		adds	r7, r7, #16
 1993 08c2 BD46     		mov	sp, r7
 1994              		@ sp needed
 1995 08c4 80BD     		pop	{r7, pc}
 1996              		.cfi_endproc
 1997              	.LFE45:
 1999 08c6 00BF     		.align	2
 2000              		.global	osMailCAlloc
 2001              		.thumb
 2002              		.thumb_func
 2004              	osMailCAlloc:
 2005              	.LFB46:
 899:../system/cmsis_os.c **** 
 900:../system/cmsis_os.c **** /**
 901:../system/cmsis_os.c **** * @brief Allocate a memory block from a mail and set memory block to zero
 902:../system/cmsis_os.c **** * @param  queue_id      mail queue ID obtained with \ref osMailCreate.
 903:../system/cmsis_os.c **** * @param  millisec      timeout value or 0 in case of no time-out.
 904:../system/cmsis_os.c **** * @retval pointer to memory block that can be filled with mail or NULL in case error.
 905:../system/cmsis_os.c **** * @note   MUST REMAIN UNCHANGED: \b osMailCAlloc shall be consistent in every CMSIS-RTOS.
 906:../system/cmsis_os.c **** */
 907:../system/cmsis_os.c **** void *osMailCAlloc (osMailQId queue_id, uint32_t millisec)
 908:../system/cmsis_os.c **** {
 2006              		.loc 1 908 0
 2007              		.cfi_startproc
 2008              		@ args = 0, pretend = 0, frame = 16
 2009              		@ frame_needed = 1, uses_anonymous_args = 0
 2010 08c8 80B5     		push	{r7, lr}
 2011              		.cfi_def_cfa_offset 8
 2012              		.cfi_offset 7, -8
 2013              		.cfi_offset 14, -4
 2014 08ca 84B0     		sub	sp, sp, #16
 2015              		.cfi_def_cfa_offset 24
 2016 08cc 00AF     		add	r7, sp, #0
 2017              		.cfi_def_cfa_register 7
 2018 08ce 7860     		str	r0, [r7, #4]
 2019 08d0 3960     		str	r1, [r7]
 909:../system/cmsis_os.c ****   uint32_t i;
 910:../system/cmsis_os.c ****   void *p = osMailAlloc(queue_id, millisec);
 2020              		.loc 1 910 0
 2021 08d2 7868     		ldr	r0, [r7, #4]
 2022 08d4 3968     		ldr	r1, [r7]
 2023 08d6 FFF7FEFF 		bl	osMailAlloc
 2024 08da B860     		str	r0, [r7, #8]
 911:../system/cmsis_os.c ****   
 912:../system/cmsis_os.c ****   if (p) {
 2025              		.loc 1 912 0
 2026 08dc BB68     		ldr	r3, [r7, #8]
 2027 08de 002B     		cmp	r3, #0
 2028 08e0 0DD0     		beq	.L137
 913:../system/cmsis_os.c ****     for (i = 0; i < sizeof(queue_id->queue_def->item_sz); i++) {
 2029              		.loc 1 913 0
 2030 08e2 0023     		movs	r3, #0
 2031 08e4 FB60     		str	r3, [r7, #12]
 2032 08e6 07E0     		b	.L138
 2033              	.L139:
 914:../system/cmsis_os.c ****       ((uint8_t *)p)[i] = 0;
 2034              		.loc 1 914 0 discriminator 2
 2035 08e8 BA68     		ldr	r2, [r7, #8]
 2036 08ea FB68     		ldr	r3, [r7, #12]
 2037 08ec 1344     		add	r3, r3, r2
 2038 08ee 0022     		movs	r2, #0
 2039 08f0 1A70     		strb	r2, [r3]
 913:../system/cmsis_os.c ****     for (i = 0; i < sizeof(queue_id->queue_def->item_sz); i++) {
 2040              		.loc 1 913 0 discriminator 2
 2041 08f2 FB68     		ldr	r3, [r7, #12]
 2042 08f4 0133     		adds	r3, r3, #1
 2043 08f6 FB60     		str	r3, [r7, #12]
 2044              	.L138:
 913:../system/cmsis_os.c ****     for (i = 0; i < sizeof(queue_id->queue_def->item_sz); i++) {
 2045              		.loc 1 913 0 is_stmt 0 discriminator 1
 2046 08f8 FB68     		ldr	r3, [r7, #12]
 2047 08fa 032B     		cmp	r3, #3
 2048 08fc F4D9     		bls	.L139
 2049              	.L137:
 915:../system/cmsis_os.c ****     }
 916:../system/cmsis_os.c ****   }
 917:../system/cmsis_os.c ****   
 918:../system/cmsis_os.c ****   return p;
 2050              		.loc 1 918 0 is_stmt 1
 2051 08fe BB68     		ldr	r3, [r7, #8]
 919:../system/cmsis_os.c **** }
 2052              		.loc 1 919 0
 2053 0900 1846     		mov	r0, r3
 2054 0902 1037     		adds	r7, r7, #16
 2055 0904 BD46     		mov	sp, r7
 2056              		@ sp needed
 2057 0906 80BD     		pop	{r7, pc}
 2058              		.cfi_endproc
 2059              	.LFE46:
 2061              		.align	2
 2062              		.global	osMailPut
 2063              		.thumb
 2064              		.thumb_func
 2066              	osMailPut:
 2067              	.LFB47:
 920:../system/cmsis_os.c **** 
 921:../system/cmsis_os.c **** /**
 922:../system/cmsis_os.c **** * @brief Put a mail to a queue
 923:../system/cmsis_os.c **** * @param  queue_id      mail queue ID obtained with \ref osMailCreate.
 924:../system/cmsis_os.c **** * @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAllo
 925:../system/cmsis_os.c **** * @retval status code that indicates the execution status of the function.
 926:../system/cmsis_os.c **** * @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
 927:../system/cmsis_os.c **** */
 928:../system/cmsis_os.c **** osStatus osMailPut (osMailQId queue_id, void *mail)
 929:../system/cmsis_os.c **** {
 2068              		.loc 1 929 0
 2069              		.cfi_startproc
 2070              		@ args = 0, pretend = 0, frame = 16
 2071              		@ frame_needed = 1, uses_anonymous_args = 0
 2072 0908 80B5     		push	{r7, lr}
 2073              		.cfi_def_cfa_offset 8
 2074              		.cfi_offset 7, -8
 2075              		.cfi_offset 14, -4
 2076 090a 84B0     		sub	sp, sp, #16
 2077              		.cfi_def_cfa_offset 24
 2078 090c 00AF     		add	r7, sp, #0
 2079              		.cfi_def_cfa_register 7
 2080 090e 7860     		str	r0, [r7, #4]
 2081 0910 3960     		str	r1, [r7]
 930:../system/cmsis_os.c ****   portBASE_TYPE taskWoken;
 931:../system/cmsis_os.c ****   
 932:../system/cmsis_os.c ****   
 933:../system/cmsis_os.c ****   if (queue_id == NULL) {
 2082              		.loc 1 933 0
 2083 0912 7B68     		ldr	r3, [r7, #4]
 2084 0914 002B     		cmp	r3, #0
 2085 0916 01D1     		bne	.L142
 934:../system/cmsis_os.c ****     return osErrorParameter;
 2086              		.loc 1 934 0
 2087 0918 8023     		movs	r3, #128
 2088 091a 30E0     		b	.L148
 2089              	.L142:
 935:../system/cmsis_os.c ****   }
 936:../system/cmsis_os.c ****   
 937:../system/cmsis_os.c ****   taskWoken = pdFALSE;
 2090              		.loc 1 937 0
 2091 091c 0023     		movs	r3, #0
 2092 091e FB60     		str	r3, [r7, #12]
 938:../system/cmsis_os.c ****   
 939:../system/cmsis_os.c ****   if (inHandlerMode()) {
 2093              		.loc 1 939 0
 2094 0920 FFF79CFB 		bl	inHandlerMode
 2095 0924 0346     		mov	r3, r0
 2096 0926 002B     		cmp	r3, #0
 2097 0928 1AD0     		beq	.L144
 940:../system/cmsis_os.c ****     if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 2098              		.loc 1 940 0
 2099 092a 7B68     		ldr	r3, [r7, #4]
 2100 092c 5968     		ldr	r1, [r3, #4]
 2101 092e 3A46     		mov	r2, r7
 2102 0930 07F10C03 		add	r3, r7, #12
 2103 0934 0846     		mov	r0, r1
 2104 0936 1146     		mov	r1, r2
 2105 0938 1A46     		mov	r2, r3
 2106 093a 0023     		movs	r3, #0
 2107 093c FFF7FEFF 		bl	xQueueGenericSendFromISR
 2108 0940 0346     		mov	r3, r0
 2109 0942 012B     		cmp	r3, #1
 2110 0944 01D0     		beq	.L145
 941:../system/cmsis_os.c ****       return osErrorOS;
 2111              		.loc 1 941 0
 2112 0946 FF23     		movs	r3, #255
 2113 0948 19E0     		b	.L148
 2114              	.L145:
 942:../system/cmsis_os.c ****     }
 943:../system/cmsis_os.c ****     portEND_SWITCHING_ISR(taskWoken);
 2115              		.loc 1 943 0
 2116 094a FB68     		ldr	r3, [r7, #12]
 2117 094c 002B     		cmp	r3, #0
 2118 094e 15D0     		beq	.L147
 2119              		.loc 1 943 0 is_stmt 0 discriminator 1
 2120 0950 4EF60453 		movw	r3, #60676
 2121 0954 CEF20003 		movt	r3, 57344
 2122 0958 4FF08052 		mov	r2, #268435456
 2123 095c 1A60     		str	r2, [r3]
 2124 095e 0DE0     		b	.L147
 2125              	.L144:
 944:../system/cmsis_os.c ****   }
 945:../system/cmsis_os.c ****   else {
 946:../system/cmsis_os.c ****     if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 2126              		.loc 1 946 0 is_stmt 1
 2127 0960 7B68     		ldr	r3, [r7, #4]
 2128 0962 5A68     		ldr	r2, [r3, #4]
 2129 0964 3B46     		mov	r3, r7
 2130 0966 1046     		mov	r0, r2
 2131 0968 1946     		mov	r1, r3
 2132 096a 0022     		movs	r2, #0
 2133 096c 0023     		movs	r3, #0
 2134 096e FFF7FEFF 		bl	xQueueGenericSend
 2135 0972 0346     		mov	r3, r0
 2136 0974 012B     		cmp	r3, #1
 2137 0976 01D0     		beq	.L147
 947:../system/cmsis_os.c ****       return osErrorOS;
 2138              		.loc 1 947 0
 2139 0978 FF23     		movs	r3, #255
 2140 097a 00E0     		b	.L148
 2141              	.L147:
 948:../system/cmsis_os.c ****     }
 949:../system/cmsis_os.c ****   }
 950:../system/cmsis_os.c ****   
 951:../system/cmsis_os.c ****   return osOK;
 2142              		.loc 1 951 0
 2143 097c 0023     		movs	r3, #0
 2144              	.L148:
 952:../system/cmsis_os.c **** }
 2145              		.loc 1 952 0
 2146 097e 1846     		mov	r0, r3
 2147 0980 1037     		adds	r7, r7, #16
 2148 0982 BD46     		mov	sp, r7
 2149              		@ sp needed
 2150 0984 80BD     		pop	{r7, pc}
 2151              		.cfi_endproc
 2152              	.LFE47:
 2154 0986 00BF     		.align	2
 2155              		.global	osMailGet
 2156              		.thumb
 2157              		.thumb_func
 2159              	osMailGet:
 2160              	.LFB48:
 953:../system/cmsis_os.c **** 
 954:../system/cmsis_os.c **** /**
 955:../system/cmsis_os.c **** * @brief Get a mail from a queue
 956:../system/cmsis_os.c **** * @param  queue_id   mail queue ID obtained with \ref osMailCreate.
 957:../system/cmsis_os.c **** * @param millisec    timeout value or 0 in case of no time-out
 958:../system/cmsis_os.c **** * @retval event that contains mail information or error code.
 959:../system/cmsis_os.c **** * @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
 960:../system/cmsis_os.c **** */
 961:../system/cmsis_os.c **** osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
 962:../system/cmsis_os.c **** {
 2161              		.loc 1 962 0
 2162              		.cfi_startproc
 2163              		@ args = 0, pretend = 0, frame = 40
 2164              		@ frame_needed = 1, uses_anonymous_args = 0
 2165 0988 80B5     		push	{r7, lr}
 2166              		.cfi_def_cfa_offset 8
 2167              		.cfi_offset 7, -8
 2168              		.cfi_offset 14, -4
 2169 098a 8AB0     		sub	sp, sp, #40
 2170              		.cfi_def_cfa_offset 48
 2171 098c 00AF     		add	r7, sp, #0
 2172              		.cfi_def_cfa_register 7
 2173 098e F860     		str	r0, [r7, #12]
 2174 0990 B960     		str	r1, [r7, #8]
 2175 0992 7A60     		str	r2, [r7, #4]
 963:../system/cmsis_os.c ****   portBASE_TYPE taskWoken;
 964:../system/cmsis_os.c ****   portTickType ticks;
 965:../system/cmsis_os.c ****   osEvent event;
 966:../system/cmsis_os.c ****   
 967:../system/cmsis_os.c ****   event.def.mail_id = queue_id;
 2176              		.loc 1 967 0
 2177 0994 BB68     		ldr	r3, [r7, #8]
 2178 0996 FB61     		str	r3, [r7, #28]
 968:../system/cmsis_os.c ****   
 969:../system/cmsis_os.c ****   if (queue_id == NULL) {
 2179              		.loc 1 969 0
 2180 0998 BB68     		ldr	r3, [r7, #8]
 2181 099a 002B     		cmp	r3, #0
 2182 099c 08D1     		bne	.L150
 970:../system/cmsis_os.c ****     event.status = osErrorParameter;
 2183              		.loc 1 970 0
 2184 099e 8023     		movs	r3, #128
 2185 09a0 7B61     		str	r3, [r7, #20]
 971:../system/cmsis_os.c ****     return event;
 2186              		.loc 1 971 0
 2187 09a2 FB68     		ldr	r3, [r7, #12]
 2188 09a4 07F11402 		add	r2, r7, #20
 2189 09a8 07CA     		ldmia	r2, {r0, r1, r2}
 2190 09aa 83E80700 		stmia	r3, {r0, r1, r2}
 2191 09ae 57E0     		b	.L149
 2192              	.L150:
 972:../system/cmsis_os.c ****   }
 973:../system/cmsis_os.c ****   
 974:../system/cmsis_os.c ****   taskWoken = pdFALSE;
 2193              		.loc 1 974 0
 2194 09b0 0023     		movs	r3, #0
 2195 09b2 3B62     		str	r3, [r7, #32]
 975:../system/cmsis_os.c ****   
 976:../system/cmsis_os.c ****   ticks = 0;
 2196              		.loc 1 976 0
 2197 09b4 0023     		movs	r3, #0
 2198 09b6 7B62     		str	r3, [r7, #36]
 977:../system/cmsis_os.c ****   if (millisec == osWaitForever) {
 2199              		.loc 1 977 0
 2200 09b8 7B68     		ldr	r3, [r7, #4]
 2201 09ba B3F1FF3F 		cmp	r3, #-1
 2202 09be 03D1     		bne	.L152
 978:../system/cmsis_os.c ****     ticks = portMAX_DELAY;
 2203              		.loc 1 978 0
 2204 09c0 4FF0FF33 		mov	r3, #-1
 2205 09c4 7B62     		str	r3, [r7, #36]
 2206 09c6 09E0     		b	.L153
 2207              	.L152:
 979:../system/cmsis_os.c ****   }
 980:../system/cmsis_os.c ****   else if (millisec != 0) {
 2208              		.loc 1 980 0
 2209 09c8 7B68     		ldr	r3, [r7, #4]
 2210 09ca 002B     		cmp	r3, #0
 2211 09cc 06D0     		beq	.L153
 981:../system/cmsis_os.c ****     ticks = millisec / portTICK_RATE_MS;
 2212              		.loc 1 981 0
 2213 09ce 7B68     		ldr	r3, [r7, #4]
 2214 09d0 7B62     		str	r3, [r7, #36]
 982:../system/cmsis_os.c ****     if (ticks == 0) {
 2215              		.loc 1 982 0
 2216 09d2 7B6A     		ldr	r3, [r7, #36]
 2217 09d4 002B     		cmp	r3, #0
 2218 09d6 01D1     		bne	.L153
 983:../system/cmsis_os.c ****       ticks = 1;
 2219              		.loc 1 983 0
 2220 09d8 0123     		movs	r3, #1
 2221 09da 7B62     		str	r3, [r7, #36]
 2222              	.L153:
 984:../system/cmsis_os.c ****     }
 985:../system/cmsis_os.c ****   }
 986:../system/cmsis_os.c ****   
 987:../system/cmsis_os.c ****   if (inHandlerMode()) {
 2223              		.loc 1 987 0
 2224 09dc FFF73EFB 		bl	inHandlerMode
 2225 09e0 0346     		mov	r3, r0
 2226 09e2 002B     		cmp	r3, #0
 2227 09e4 1ED0     		beq	.L154
 988:../system/cmsis_os.c ****     if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 2228              		.loc 1 988 0
 2229 09e6 BB68     		ldr	r3, [r7, #8]
 2230 09e8 5968     		ldr	r1, [r3, #4]
 2231 09ea 07F11403 		add	r3, r7, #20
 2232 09ee 1A1D     		adds	r2, r3, #4
 2233 09f0 07F12003 		add	r3, r7, #32
 2234 09f4 0846     		mov	r0, r1
 2235 09f6 1146     		mov	r1, r2
 2236 09f8 1A46     		mov	r2, r3
 2237 09fa FFF7FEFF 		bl	xQueueReceiveFromISR
 2238 09fe 0346     		mov	r3, r0
 2239 0a00 012B     		cmp	r3, #1
 2240 0a02 02D1     		bne	.L155
 989:../system/cmsis_os.c ****       /* We have mail */
 990:../system/cmsis_os.c ****       event.status = osEventMail;
 2241              		.loc 1 990 0
 2242 0a04 2023     		movs	r3, #32
 2243 0a06 7B61     		str	r3, [r7, #20]
 2244 0a08 01E0     		b	.L156
 2245              	.L155:
 991:../system/cmsis_os.c ****     }
 992:../system/cmsis_os.c ****     else {
 993:../system/cmsis_os.c ****       event.status = osOK;
 2246              		.loc 1 993 0
 2247 0a0a 0023     		movs	r3, #0
 2248 0a0c 7B61     		str	r3, [r7, #20]
 2249              	.L156:
 994:../system/cmsis_os.c ****     }
 995:../system/cmsis_os.c ****     portEND_SWITCHING_ISR(taskWoken);
 2250              		.loc 1 995 0
 2251 0a0e 3B6A     		ldr	r3, [r7, #32]
 2252 0a10 002B     		cmp	r3, #0
 2253 0a12 1FD0     		beq	.L158
 2254              		.loc 1 995 0 is_stmt 0 discriminator 1
 2255 0a14 4EF60453 		movw	r3, #60676
 2256 0a18 CEF20003 		movt	r3, 57344
 2257 0a1c 4FF08052 		mov	r2, #268435456
 2258 0a20 1A60     		str	r2, [r3]
 2259 0a22 17E0     		b	.L158
 2260              	.L154:
 996:../system/cmsis_os.c ****   }
 997:../system/cmsis_os.c ****   else {
 998:../system/cmsis_os.c ****     if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 2261              		.loc 1 998 0 is_stmt 1
 2262 0a24 BB68     		ldr	r3, [r7, #8]
 2263 0a26 5A68     		ldr	r2, [r3, #4]
 2264 0a28 07F11403 		add	r3, r7, #20
 2265 0a2c 0433     		adds	r3, r3, #4
 2266 0a2e 1046     		mov	r0, r2
 2267 0a30 1946     		mov	r1, r3
 2268 0a32 7A6A     		ldr	r2, [r7, #36]
 2269 0a34 0023     		movs	r3, #0
 2270 0a36 FFF7FEFF 		bl	xQueueGenericReceive
 2271 0a3a 0346     		mov	r3, r0
 2272 0a3c 012B     		cmp	r3, #1
 2273 0a3e 02D1     		bne	.L159
 999:../system/cmsis_os.c ****       /* We have mail */
1000:../system/cmsis_os.c ****       event.status = osEventMail;
 2274              		.loc 1 1000 0
 2275 0a40 2023     		movs	r3, #32
 2276 0a42 7B61     		str	r3, [r7, #20]
 2277 0a44 06E0     		b	.L158
 2278              	.L159:
1001:../system/cmsis_os.c ****     }
1002:../system/cmsis_os.c ****     else {
1003:../system/cmsis_os.c ****       event.status = (ticks == 0) ? osOK : osEventTimeout;
 2279              		.loc 1 1003 0
 2280 0a46 7B6A     		ldr	r3, [r7, #36]
 2281 0a48 002B     		cmp	r3, #0
 2282 0a4a 01D1     		bne	.L160
 2283              		.loc 1 1003 0 is_stmt 0 discriminator 1
 2284 0a4c 0023     		movs	r3, #0
 2285 0a4e 00E0     		b	.L161
 2286              	.L160:
 2287              		.loc 1 1003 0 discriminator 2
 2288 0a50 4023     		movs	r3, #64
 2289              	.L161:
 2290              		.loc 1 1003 0 discriminator 3
 2291 0a52 7B61     		str	r3, [r7, #20]
 2292              	.L158:
1004:../system/cmsis_os.c ****     }
1005:../system/cmsis_os.c ****   }
1006:../system/cmsis_os.c ****   
1007:../system/cmsis_os.c ****   return event;
 2293              		.loc 1 1007 0 is_stmt 1
 2294 0a54 FB68     		ldr	r3, [r7, #12]
 2295 0a56 07F11402 		add	r2, r7, #20
 2296 0a5a 07CA     		ldmia	r2, {r0, r1, r2}
 2297 0a5c 83E80700 		stmia	r3, {r0, r1, r2}
 2298              	.L149:
1008:../system/cmsis_os.c **** }
 2299              		.loc 1 1008 0
 2300 0a60 F868     		ldr	r0, [r7, #12]
 2301 0a62 2837     		adds	r7, r7, #40
 2302 0a64 BD46     		mov	sp, r7
 2303              		@ sp needed
 2304 0a66 80BD     		pop	{r7, pc}
 2305              		.cfi_endproc
 2306              	.LFE48:
 2308              		.align	2
 2309              		.global	osMailFree
 2310              		.thumb
 2311              		.thumb_func
 2313              	osMailFree:
 2314              	.LFB49:
1009:../system/cmsis_os.c **** 
1010:../system/cmsis_os.c **** /**
1011:../system/cmsis_os.c **** * @brief Free a memory block from a mail
1012:../system/cmsis_os.c **** * @param  queue_id mail queue ID obtained with \ref osMailCreate.
1013:../system/cmsis_os.c **** * @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
1014:../system/cmsis_os.c **** * @retval status code that indicates the execution status of the function.
1015:../system/cmsis_os.c **** * @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
1016:../system/cmsis_os.c **** */
1017:../system/cmsis_os.c **** osStatus osMailFree (osMailQId queue_id, void *mail)
1018:../system/cmsis_os.c **** {
 2315              		.loc 1 1018 0
 2316              		.cfi_startproc
 2317              		@ args = 0, pretend = 0, frame = 8
 2318              		@ frame_needed = 1, uses_anonymous_args = 0
 2319 0a68 80B5     		push	{r7, lr}
 2320              		.cfi_def_cfa_offset 8
 2321              		.cfi_offset 7, -8
 2322              		.cfi_offset 14, -4
 2323 0a6a 82B0     		sub	sp, sp, #8
 2324              		.cfi_def_cfa_offset 16
 2325 0a6c 00AF     		add	r7, sp, #0
 2326              		.cfi_def_cfa_register 7
 2327 0a6e 7860     		str	r0, [r7, #4]
 2328 0a70 3960     		str	r1, [r7]
1019:../system/cmsis_os.c ****   if (queue_id == NULL) {
 2329              		.loc 1 1019 0
 2330 0a72 7B68     		ldr	r3, [r7, #4]
 2331 0a74 002B     		cmp	r3, #0
 2332 0a76 01D1     		bne	.L164
1020:../system/cmsis_os.c ****     return osErrorParameter;
 2333              		.loc 1 1020 0
 2334 0a78 8023     		movs	r3, #128
 2335 0a7a 06E0     		b	.L165
 2336              	.L164:
1021:../system/cmsis_os.c ****   }
1022:../system/cmsis_os.c ****   
1023:../system/cmsis_os.c ****   osPoolFree(queue_id->pool, mail);
 2337              		.loc 1 1023 0
 2338 0a7c 7B68     		ldr	r3, [r7, #4]
 2339 0a7e 9B68     		ldr	r3, [r3, #8]
 2340 0a80 1846     		mov	r0, r3
 2341 0a82 3968     		ldr	r1, [r7]
 2342 0a84 FFF7FEFF 		bl	osPoolFree
1024:../system/cmsis_os.c ****   
1025:../system/cmsis_os.c ****   return osOK;
 2343              		.loc 1 1025 0
 2344 0a88 0023     		movs	r3, #0
 2345              	.L165:
1026:../system/cmsis_os.c **** }
 2346              		.loc 1 1026 0
 2347 0a8a 1846     		mov	r0, r3
 2348 0a8c 0837     		adds	r7, r7, #8
 2349 0a8e BD46     		mov	sp, r7
 2350              		@ sp needed
 2351 0a90 80BD     		pop	{r7, pc}
 2352              		.cfi_endproc
 2353              	.LFE49:
 2355 0a92 00BF     		.align	2
 2356              		.global	osThreadSuspend
 2357              		.thumb
 2358              		.thumb_func
 2360              	osThreadSuspend:
 2361              	.LFB50:
1027:../system/cmsis_os.c **** #endif  /* Use Mail Queues */
1028:../system/cmsis_os.c **** 
1029:../system/cmsis_os.c **** /*************************** Additional specific APIs to Free RTOS ************/
1030:../system/cmsis_os.c **** /**
1031:../system/cmsis_os.c **** * @brief  Suspend execution of a thread.
1032:../system/cmsis_os.c **** * @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
1033:../system/cmsis_os.c **** * @retval  status code that indicates the execution status of the function.
1034:../system/cmsis_os.c **** */
1035:../system/cmsis_os.c **** osStatus osThreadSuspend (osThreadId thread_id)
1036:../system/cmsis_os.c **** {
 2362              		.loc 1 1036 0
 2363              		.cfi_startproc
 2364              		@ args = 0, pretend = 0, frame = 8
 2365              		@ frame_needed = 1, uses_anonymous_args = 0
 2366 0a94 80B5     		push	{r7, lr}
 2367              		.cfi_def_cfa_offset 8
 2368              		.cfi_offset 7, -8
 2369              		.cfi_offset 14, -4
 2370 0a96 82B0     		sub	sp, sp, #8
 2371              		.cfi_def_cfa_offset 16
 2372 0a98 00AF     		add	r7, sp, #0
 2373              		.cfi_def_cfa_register 7
 2374 0a9a 7860     		str	r0, [r7, #4]
1037:../system/cmsis_os.c **** #if (INCLUDE_vTaskSuspend == 1)
1038:../system/cmsis_os.c ****     vTaskSuspend(thread_id);
 2375              		.loc 1 1038 0
 2376 0a9c 7868     		ldr	r0, [r7, #4]
 2377 0a9e FFF7FEFF 		bl	vTaskSuspend
1039:../system/cmsis_os.c ****   
1040:../system/cmsis_os.c ****   return osOK;
 2378              		.loc 1 1040 0
 2379 0aa2 0023     		movs	r3, #0
1041:../system/cmsis_os.c **** #else
1042:../system/cmsis_os.c ****   return osErrorResource;
1043:../system/cmsis_os.c **** #endif
1044:../system/cmsis_os.c **** }
 2380              		.loc 1 1044 0
 2381 0aa4 1846     		mov	r0, r3
 2382 0aa6 0837     		adds	r7, r7, #8
 2383 0aa8 BD46     		mov	sp, r7
 2384              		@ sp needed
 2385 0aaa 80BD     		pop	{r7, pc}
 2386              		.cfi_endproc
 2387              	.LFE50:
 2389              		.align	2
 2390              		.global	osThreadResume
 2391              		.thumb
 2392              		.thumb_func
 2394              	osThreadResume:
 2395              	.LFB51:
1045:../system/cmsis_os.c **** 
1046:../system/cmsis_os.c **** /**
1047:../system/cmsis_os.c **** * @brief  Resume execution of a suspended thread.
1048:../system/cmsis_os.c **** * @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
1049:../system/cmsis_os.c **** * @retval  status code that indicates the execution status of the function.
1050:../system/cmsis_os.c **** */
1051:../system/cmsis_os.c **** osStatus osThreadResume (osThreadId thread_id)
1052:../system/cmsis_os.c **** {
 2396              		.loc 1 1052 0
 2397              		.cfi_startproc
 2398              		@ args = 0, pretend = 0, frame = 8
 2399              		@ frame_needed = 1, uses_anonymous_args = 0
 2400 0aac 80B5     		push	{r7, lr}
 2401              		.cfi_def_cfa_offset 8
 2402              		.cfi_offset 7, -8
 2403              		.cfi_offset 14, -4
 2404 0aae 82B0     		sub	sp, sp, #8
 2405              		.cfi_def_cfa_offset 16
 2406 0ab0 00AF     		add	r7, sp, #0
 2407              		.cfi_def_cfa_register 7
 2408 0ab2 7860     		str	r0, [r7, #4]
1053:../system/cmsis_os.c **** #if (INCLUDE_vTaskSuspend == 1)
1054:../system/cmsis_os.c ****   if(inHandlerMode())
 2409              		.loc 1 1054 0
 2410 0ab4 FFF7D2FA 		bl	inHandlerMode
 2411 0ab8 0346     		mov	r3, r0
 2412 0aba 002B     		cmp	r3, #0
 2413 0abc 03D0     		beq	.L169
1055:../system/cmsis_os.c ****   {
1056:../system/cmsis_os.c ****     xTaskResumeFromISR(thread_id);
 2414              		.loc 1 1056 0
 2415 0abe 7868     		ldr	r0, [r7, #4]
 2416 0ac0 FFF7FEFF 		bl	xTaskResumeFromISR
 2417 0ac4 02E0     		b	.L170
 2418              	.L169:
1057:../system/cmsis_os.c ****   }
1058:../system/cmsis_os.c ****   else
1059:../system/cmsis_os.c ****   {
1060:../system/cmsis_os.c ****     vTaskResume(thread_id);
 2419              		.loc 1 1060 0
 2420 0ac6 7868     		ldr	r0, [r7, #4]
 2421 0ac8 FFF7FEFF 		bl	vTaskResume
 2422              	.L170:
1061:../system/cmsis_os.c ****   }
1062:../system/cmsis_os.c ****   return osOK;
 2423              		.loc 1 1062 0
 2424 0acc 0023     		movs	r3, #0
1063:../system/cmsis_os.c **** #else
1064:../system/cmsis_os.c ****   return osErrorResource;
1065:../system/cmsis_os.c **** #endif
1066:../system/cmsis_os.c **** }
 2425              		.loc 1 1066 0
 2426 0ace 1846     		mov	r0, r3
 2427 0ad0 0837     		adds	r7, r7, #8
 2428 0ad2 BD46     		mov	sp, r7
 2429              		@ sp needed
 2430 0ad4 80BD     		pop	{r7, pc}
 2431              		.cfi_endproc
 2432              	.LFE51:
 2434 0ad6 00BF     		.align	2
 2435              		.global	osThreadSuspendAll
 2436              		.thumb
 2437              		.thumb_func
 2439              	osThreadSuspendAll:
 2440              	.LFB52:
1067:../system/cmsis_os.c **** 
1068:../system/cmsis_os.c **** /**
1069:../system/cmsis_os.c **** * @brief  Suspend execution of a all active threads.
1070:../system/cmsis_os.c **** * @retval  status code that indicates the execution status of the function.
1071:../system/cmsis_os.c **** */
1072:../system/cmsis_os.c **** osStatus osThreadSuspendAll (void)
1073:../system/cmsis_os.c **** {
 2441              		.loc 1 1073 0
 2442              		.cfi_startproc
 2443              		@ args = 0, pretend = 0, frame = 0
 2444              		@ frame_needed = 1, uses_anonymous_args = 0
 2445 0ad8 80B5     		push	{r7, lr}
 2446              		.cfi_def_cfa_offset 8
 2447              		.cfi_offset 7, -8
 2448              		.cfi_offset 14, -4
 2449 0ada 00AF     		add	r7, sp, #0
 2450              		.cfi_def_cfa_register 7
1074:../system/cmsis_os.c ****   vTaskSuspendAll();
 2451              		.loc 1 1074 0
 2452 0adc FFF7FEFF 		bl	vTaskSuspendAll
1075:../system/cmsis_os.c ****   
1076:../system/cmsis_os.c ****   return osOK;
 2453              		.loc 1 1076 0
 2454 0ae0 0023     		movs	r3, #0
1077:../system/cmsis_os.c **** }
 2455              		.loc 1 1077 0
 2456 0ae2 1846     		mov	r0, r3
 2457 0ae4 80BD     		pop	{r7, pc}
 2458              		.cfi_endproc
 2459              	.LFE52:
 2461 0ae6 00BF     		.align	2
 2462              		.global	osThreadResumeAll
 2463              		.thumb
 2464              		.thumb_func
 2466              	osThreadResumeAll:
 2467              	.LFB53:
1078:../system/cmsis_os.c **** 
1079:../system/cmsis_os.c **** /**
1080:../system/cmsis_os.c **** * @brief  Resume execution of a all suspended threads.
1081:../system/cmsis_os.c **** * @retval  status code that indicates the execution status of the function.
1082:../system/cmsis_os.c **** */
1083:../system/cmsis_os.c **** osStatus osThreadResumeAll (void)
1084:../system/cmsis_os.c **** {
 2468              		.loc 1 1084 0
 2469              		.cfi_startproc
 2470              		@ args = 0, pretend = 0, frame = 0
 2471              		@ frame_needed = 1, uses_anonymous_args = 0
 2472 0ae8 80B5     		push	{r7, lr}
 2473              		.cfi_def_cfa_offset 8
 2474              		.cfi_offset 7, -8
 2475              		.cfi_offset 14, -4
 2476 0aea 00AF     		add	r7, sp, #0
 2477              		.cfi_def_cfa_register 7
1085:../system/cmsis_os.c ****   xTaskResumeAll();
 2478              		.loc 1 1085 0
 2479 0aec FFF7FEFF 		bl	xTaskResumeAll
1086:../system/cmsis_os.c ****   
1087:../system/cmsis_os.c ****   return osOK;
 2480              		.loc 1 1087 0
 2481 0af0 0023     		movs	r3, #0
1088:../system/cmsis_os.c **** }
 2482              		.loc 1 1088 0
 2483 0af2 1846     		mov	r0, r3
 2484 0af4 80BD     		pop	{r7, pc}
 2485              		.cfi_endproc
 2486              	.LFE53:
 2488 0af6 00BF     		.align	2
 2489              		.global	osThreadIsSuspended
 2490              		.thumb
 2491              		.thumb_func
 2493              	osThreadIsSuspended:
 2494              	.LFB54:
1089:../system/cmsis_os.c **** 
1090:../system/cmsis_os.c **** /**
1091:../system/cmsis_os.c **** * @brief  Check if a thread is already suspended or not.
1092:../system/cmsis_os.c **** * @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
1093:../system/cmsis_os.c **** * @retval  status code that indicates the execution status of the function.
1094:../system/cmsis_os.c **** */
1095:../system/cmsis_os.c **** osStatus osThreadIsSuspended(osThreadId thread_id)
1096:../system/cmsis_os.c **** {
 2495              		.loc 1 1096 0
 2496              		.cfi_startproc
 2497              		@ args = 0, pretend = 0, frame = 8
 2498              		@ frame_needed = 1, uses_anonymous_args = 0
 2499 0af8 80B5     		push	{r7, lr}
 2500              		.cfi_def_cfa_offset 8
 2501              		.cfi_offset 7, -8
 2502              		.cfi_offset 14, -4
 2503 0afa 82B0     		sub	sp, sp, #8
 2504              		.cfi_def_cfa_offset 16
 2505 0afc 00AF     		add	r7, sp, #0
 2506              		.cfi_def_cfa_register 7
 2507 0afe 7860     		str	r0, [r7, #4]
1097:../system/cmsis_os.c **** #if (INCLUDE_vTaskSuspend == 1)
1098:../system/cmsis_os.c ****   if (xTaskIsTaskSuspended(thread_id) != pdFALSE)
 2508              		.loc 1 1098 0
 2509 0b00 7868     		ldr	r0, [r7, #4]
 2510 0b02 FFF7FEFF 		bl	xTaskIsTaskSuspended
 2511 0b06 0346     		mov	r3, r0
 2512 0b08 002B     		cmp	r3, #0
 2513 0b0a 01D0     		beq	.L177
1099:../system/cmsis_os.c ****     return osOK;
 2514              		.loc 1 1099 0
 2515 0b0c 0023     		movs	r3, #0
 2516 0b0e 00E0     		b	.L178
 2517              	.L177:
1100:../system/cmsis_os.c ****   else
1101:../system/cmsis_os.c ****     return osErrorOS;
 2518              		.loc 1 1101 0
 2519 0b10 FF23     		movs	r3, #255
 2520              	.L178:
1102:../system/cmsis_os.c **** #else
1103:../system/cmsis_os.c ****   return osErrorResource;
1104:../system/cmsis_os.c **** #endif
1105:../system/cmsis_os.c **** }
 2521              		.loc 1 1105 0
 2522 0b12 1846     		mov	r0, r3
 2523 0b14 0837     		adds	r7, r7, #8
 2524 0b16 BD46     		mov	sp, r7
 2525              		@ sp needed
 2526 0b18 80BD     		pop	{r7, pc}
 2527              		.cfi_endproc
 2528              	.LFE54:
 2530 0b1a 00BF     		.align	2
 2531              		.global	osDelayUntil
 2532              		.thumb
 2533              		.thumb_func
 2535              	osDelayUntil:
 2536              	.LFB55:
1106:../system/cmsis_os.c **** 
1107:../system/cmsis_os.c **** /**
1108:../system/cmsis_os.c **** * @brief  Delay a task until a specified time
1109:../system/cmsis_os.c **** * @param   PreviousWakeTime   Pointer to a variable that holds the time at which the 
1110:../system/cmsis_os.c **** *          task was last unblocked.
1111:../system/cmsis_os.c **** * @param   millisec    time delay value
1112:../system/cmsis_os.c **** * @retval  status code that indicates the execution status of the function.
1113:../system/cmsis_os.c **** */
1114:../system/cmsis_os.c **** osStatus osDelayUntil (uint32_t PreviousWakeTime, uint32_t millisec)
1115:../system/cmsis_os.c **** {
 2537              		.loc 1 1115 0
 2538              		.cfi_startproc
 2539              		@ args = 0, pretend = 0, frame = 16
 2540              		@ frame_needed = 1, uses_anonymous_args = 0
 2541 0b1c 80B5     		push	{r7, lr}
 2542              		.cfi_def_cfa_offset 8
 2543              		.cfi_offset 7, -8
 2544              		.cfi_offset 14, -4
 2545 0b1e 84B0     		sub	sp, sp, #16
 2546              		.cfi_def_cfa_offset 24
 2547 0b20 00AF     		add	r7, sp, #0
 2548              		.cfi_def_cfa_register 7
 2549 0b22 7860     		str	r0, [r7, #4]
 2550 0b24 3960     		str	r1, [r7]
1116:../system/cmsis_os.c **** #if INCLUDE_vTaskDelayUntil
1117:../system/cmsis_os.c ****   portTickType ticks = (millisec / portTICK_RATE_MS);
 2551              		.loc 1 1117 0
 2552 0b26 3B68     		ldr	r3, [r7]
 2553 0b28 FB60     		str	r3, [r7, #12]
1118:../system/cmsis_os.c ****   portTickType previouswake = (portTickType) PreviousWakeTime; 
 2554              		.loc 1 1118 0
 2555 0b2a 7B68     		ldr	r3, [r7, #4]
 2556 0b2c BB60     		str	r3, [r7, #8]
1119:../system/cmsis_os.c ****   vTaskDelayUntil(&previouswake, ticks ? ticks : 1);
 2557              		.loc 1 1119 0
 2558 0b2e FB68     		ldr	r3, [r7, #12]
 2559 0b30 002B     		cmp	r3, #0
 2560 0b32 01D0     		beq	.L180
 2561              		.loc 1 1119 0 is_stmt 0 discriminator 1
 2562 0b34 FB68     		ldr	r3, [r7, #12]
 2563 0b36 00E0     		b	.L181
 2564              	.L180:
 2565              		.loc 1 1119 0 discriminator 2
 2566 0b38 0123     		movs	r3, #1
 2567              	.L181:
 2568              		.loc 1 1119 0 discriminator 3
 2569 0b3a 07F10802 		add	r2, r7, #8
 2570 0b3e 1046     		mov	r0, r2
 2571 0b40 1946     		mov	r1, r3
 2572 0b42 FFF7FEFF 		bl	vTaskDelayUntil
1120:../system/cmsis_os.c ****   
1121:../system/cmsis_os.c ****   return osOK;
 2573              		.loc 1 1121 0 is_stmt 1 discriminator 3
 2574 0b46 0023     		movs	r3, #0
1122:../system/cmsis_os.c **** #else
1123:../system/cmsis_os.c ****   (void) millisec;
1124:../system/cmsis_os.c ****   (void) PreviousWakeTime;
1125:../system/cmsis_os.c ****   
1126:../system/cmsis_os.c ****   return osErrorResource;
1127:../system/cmsis_os.c **** #endif
1128:../system/cmsis_os.c **** }
 2575              		.loc 1 1128 0 discriminator 3
 2576 0b48 1846     		mov	r0, r3
 2577 0b4a 1037     		adds	r7, r7, #16
 2578 0b4c BD46     		mov	sp, r7
 2579              		@ sp needed
 2580 0b4e 80BD     		pop	{r7, pc}
 2581              		.cfi_endproc
 2582              	.LFE55:
 2584              		.align	2
 2585              		.global	osThreadList
 2586              		.thumb
 2587              		.thumb_func
 2589              	osThreadList:
 2590              	.LFB56:
1129:../system/cmsis_os.c **** 
1130:../system/cmsis_os.c **** /**
1131:../system/cmsis_os.c **** * @brief   Lists all the current threads, along with their current state 
1132:../system/cmsis_os.c **** *          and stack usage high water mark.
1133:../system/cmsis_os.c **** * @param   buffer   A buffer into which the above mentioned details
1134:../system/cmsis_os.c **** *          will be written
1135:../system/cmsis_os.c **** * @retval  status code that indicates the execution status of the function.
1136:../system/cmsis_os.c **** */
1137:../system/cmsis_os.c **** osStatus osThreadList (int8_t *buffer)
1138:../system/cmsis_os.c **** {
 2591              		.loc 1 1138 0
 2592              		.cfi_startproc
 2593              		@ args = 0, pretend = 0, frame = 8
 2594              		@ frame_needed = 1, uses_anonymous_args = 0
 2595              		@ link register save eliminated.
 2596 0b50 80B4     		push	{r7}
 2597              		.cfi_def_cfa_offset 4
 2598              		.cfi_offset 7, -4
 2599 0b52 83B0     		sub	sp, sp, #12
 2600              		.cfi_def_cfa_offset 16
 2601 0b54 00AF     		add	r7, sp, #0
 2602              		.cfi_def_cfa_register 7
 2603 0b56 7860     		str	r0, [r7, #4]
1139:../system/cmsis_os.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) )
1140:../system/cmsis_os.c ****   vTaskList(buffer);
1141:../system/cmsis_os.c **** #endif
1142:../system/cmsis_os.c ****   return osOK;
 2604              		.loc 1 1142 0
 2605 0b58 0023     		movs	r3, #0
1143:../system/cmsis_os.c **** }
 2606              		.loc 1 1143 0
 2607 0b5a 1846     		mov	r0, r3
 2608 0b5c 0C37     		adds	r7, r7, #12
 2609 0b5e BD46     		mov	sp, r7
 2610              		@ sp needed
 2611 0b60 5DF8047B 		ldr	r7, [sp], #4
 2612 0b64 7047     		bx	lr
 2613              		.cfi_endproc
 2614              	.LFE56:
 2616 0b66 00BF     		.align	2
 2617              		.global	osMessagePeek
 2618              		.thumb
 2619              		.thumb_func
 2621              	osMessagePeek:
 2622              	.LFB57:
1144:../system/cmsis_os.c **** 
1145:../system/cmsis_os.c **** /**
1146:../system/cmsis_os.c **** * @brief  Receive an item from a queue without removing the item from the queue.
1147:../system/cmsis_os.c **** * @param  queue_id  message queue ID obtained with \ref osMessageCreate.
1148:../system/cmsis_os.c **** * @param  millisec  timeout value or 0 in case of no time-out.
1149:../system/cmsis_os.c **** * @retval event information that includes status code.
1150:../system/cmsis_os.c **** */
1151:../system/cmsis_os.c **** osEvent osMessagePeek (osMessageQId queue_id, uint32_t millisec)
1152:../system/cmsis_os.c **** {
 2623              		.loc 1 1152 0
 2624              		.cfi_startproc
 2625              		@ args = 0, pretend = 0, frame = 32
 2626              		@ frame_needed = 1, uses_anonymous_args = 0
 2627 0b68 80B5     		push	{r7, lr}
 2628              		.cfi_def_cfa_offset 8
 2629              		.cfi_offset 7, -8
 2630              		.cfi_offset 14, -4
 2631 0b6a 88B0     		sub	sp, sp, #32
 2632              		.cfi_def_cfa_offset 40
 2633 0b6c 00AF     		add	r7, sp, #0
 2634              		.cfi_def_cfa_register 7
 2635 0b6e F860     		str	r0, [r7, #12]
 2636 0b70 B960     		str	r1, [r7, #8]
 2637 0b72 7A60     		str	r2, [r7, #4]
1153:../system/cmsis_os.c ****   portTickType ticks;
1154:../system/cmsis_os.c ****   osEvent event;
1155:../system/cmsis_os.c ****   
1156:../system/cmsis_os.c ****   event.def.message_id = queue_id;
 2638              		.loc 1 1156 0
 2639 0b74 BB68     		ldr	r3, [r7, #8]
 2640 0b76 BB61     		str	r3, [r7, #24]
1157:../system/cmsis_os.c ****   
1158:../system/cmsis_os.c ****   if (queue_id == NULL) {
 2641              		.loc 1 1158 0
 2642 0b78 BB68     		ldr	r3, [r7, #8]
 2643 0b7a 002B     		cmp	r3, #0
 2644 0b7c 08D1     		bne	.L186
1159:../system/cmsis_os.c ****     event.status = osErrorParameter;
 2645              		.loc 1 1159 0
 2646 0b7e 8023     		movs	r3, #128
 2647 0b80 3B61     		str	r3, [r7, #16]
1160:../system/cmsis_os.c ****     return event;
 2648              		.loc 1 1160 0
 2649 0b82 FB68     		ldr	r3, [r7, #12]
 2650 0b84 07F11002 		add	r2, r7, #16
 2651 0b88 07CA     		ldmia	r2, {r0, r1, r2}
 2652 0b8a 83E80700 		stmia	r3, {r0, r1, r2}
 2653 0b8e 2FE0     		b	.L185
 2654              	.L186:
1161:../system/cmsis_os.c ****   }
1162:../system/cmsis_os.c ****   
1163:../system/cmsis_os.c ****   ticks = 0;
 2655              		.loc 1 1163 0
 2656 0b90 0023     		movs	r3, #0
 2657 0b92 FB61     		str	r3, [r7, #28]
1164:../system/cmsis_os.c ****   if (millisec == osWaitForever) {
 2658              		.loc 1 1164 0
 2659 0b94 7B68     		ldr	r3, [r7, #4]
 2660 0b96 B3F1FF3F 		cmp	r3, #-1
 2661 0b9a 03D1     		bne	.L188
1165:../system/cmsis_os.c ****     ticks = portMAX_DELAY;
 2662              		.loc 1 1165 0
 2663 0b9c 4FF0FF33 		mov	r3, #-1
 2664 0ba0 FB61     		str	r3, [r7, #28]
 2665 0ba2 09E0     		b	.L189
 2666              	.L188:
1166:../system/cmsis_os.c ****   }
1167:../system/cmsis_os.c ****   else if (millisec != 0) {
 2667              		.loc 1 1167 0
 2668 0ba4 7B68     		ldr	r3, [r7, #4]
 2669 0ba6 002B     		cmp	r3, #0
 2670 0ba8 06D0     		beq	.L189
1168:../system/cmsis_os.c ****     ticks = millisec / portTICK_RATE_MS;
 2671              		.loc 1 1168 0
 2672 0baa 7B68     		ldr	r3, [r7, #4]
 2673 0bac FB61     		str	r3, [r7, #28]
1169:../system/cmsis_os.c ****     if (ticks == 0) {
 2674              		.loc 1 1169 0
 2675 0bae FB69     		ldr	r3, [r7, #28]
 2676 0bb0 002B     		cmp	r3, #0
 2677 0bb2 01D1     		bne	.L189
1170:../system/cmsis_os.c ****       ticks = 1;
 2678              		.loc 1 1170 0
 2679 0bb4 0123     		movs	r3, #1
 2680 0bb6 FB61     		str	r3, [r7, #28]
 2681              	.L189:
1171:../system/cmsis_os.c ****     }
1172:../system/cmsis_os.c ****   }
1173:../system/cmsis_os.c ****   
1174:../system/cmsis_os.c ****   if (xQueuePeek(queue_id, &event.value.v, ticks) == pdTRUE) 
 2682              		.loc 1 1174 0
 2683 0bb8 07F11003 		add	r3, r7, #16
 2684 0bbc 0433     		adds	r3, r3, #4
 2685 0bbe B868     		ldr	r0, [r7, #8]
 2686 0bc0 1946     		mov	r1, r3
 2687 0bc2 FA69     		ldr	r2, [r7, #28]
 2688 0bc4 0123     		movs	r3, #1
 2689 0bc6 FFF7FEFF 		bl	xQueueGenericReceive
 2690 0bca 0346     		mov	r3, r0
 2691 0bcc 012B     		cmp	r3, #1
 2692 0bce 02D1     		bne	.L190
1175:../system/cmsis_os.c ****   {
1176:../system/cmsis_os.c ****     /* We have mail */
1177:../system/cmsis_os.c ****     event.status = osEventMessage;
 2693              		.loc 1 1177 0
 2694 0bd0 1023     		movs	r3, #16
 2695 0bd2 3B61     		str	r3, [r7, #16]
 2696 0bd4 06E0     		b	.L191
 2697              	.L190:
1178:../system/cmsis_os.c ****   }
1179:../system/cmsis_os.c ****   else 
1180:../system/cmsis_os.c ****   {
1181:../system/cmsis_os.c ****     event.status = (ticks == 0) ? osOK : osEventTimeout;
 2698              		.loc 1 1181 0
 2699 0bd6 FB69     		ldr	r3, [r7, #28]
 2700 0bd8 002B     		cmp	r3, #0
 2701 0bda 01D1     		bne	.L192
 2702              		.loc 1 1181 0 is_stmt 0 discriminator 1
 2703 0bdc 0023     		movs	r3, #0
 2704 0bde 00E0     		b	.L193
 2705              	.L192:
 2706              		.loc 1 1181 0 discriminator 2
 2707 0be0 4023     		movs	r3, #64
 2708              	.L193:
 2709              		.loc 1 1181 0 discriminator 3
 2710 0be2 3B61     		str	r3, [r7, #16]
 2711              	.L191:
1182:../system/cmsis_os.c ****   }
1183:../system/cmsis_os.c ****   
1184:../system/cmsis_os.c ****   return event;
 2712              		.loc 1 1184 0 is_stmt 1
 2713 0be4 FB68     		ldr	r3, [r7, #12]
 2714 0be6 07F11002 		add	r2, r7, #16
 2715 0bea 07CA     		ldmia	r2, {r0, r1, r2}
 2716 0bec 83E80700 		stmia	r3, {r0, r1, r2}
 2717              	.L185:
1185:../system/cmsis_os.c **** }
 2718              		.loc 1 1185 0
 2719 0bf0 F868     		ldr	r0, [r7, #12]
 2720 0bf2 2037     		adds	r7, r7, #32
 2721 0bf4 BD46     		mov	sp, r7
 2722              		@ sp needed
 2723 0bf6 80BD     		pop	{r7, pc}
 2724              		.cfi_endproc
 2725              	.LFE57:
 2727              		.align	2
 2728              		.global	osRecursiveMutexCreate
 2729              		.thumb
 2730              		.thumb_func
 2732              	osRecursiveMutexCreate:
 2733              	.LFB58:
1186:../system/cmsis_os.c **** 
1187:../system/cmsis_os.c **** /**
1188:../system/cmsis_os.c **** * @brief  Create and Initialize a Recursive Mutex
1189:../system/cmsis_os.c **** * @param  mutex_def     mutex definition referenced with \ref osMutex.
1190:../system/cmsis_os.c **** * @retval  mutex ID for reference by other functions or NULL in case of error..
1191:../system/cmsis_os.c **** */
1192:../system/cmsis_os.c **** osMutexId osRecursiveMutexCreate (osMutexDef_t *mutex_def)
1193:../system/cmsis_os.c **** {
 2734              		.loc 1 1193 0
 2735              		.cfi_startproc
 2736              		@ args = 0, pretend = 0, frame = 8
 2737              		@ frame_needed = 1, uses_anonymous_args = 0
 2738 0bf8 80B5     		push	{r7, lr}
 2739              		.cfi_def_cfa_offset 8
 2740              		.cfi_offset 7, -8
 2741              		.cfi_offset 14, -4
 2742 0bfa 82B0     		sub	sp, sp, #8
 2743              		.cfi_def_cfa_offset 16
 2744 0bfc 00AF     		add	r7, sp, #0
 2745              		.cfi_def_cfa_register 7
 2746 0bfe 7860     		str	r0, [r7, #4]
1194:../system/cmsis_os.c ****   (void) mutex_def;
1195:../system/cmsis_os.c ****   return xSemaphoreCreateRecursiveMutex(); 
 2747              		.loc 1 1195 0
 2748 0c00 0420     		movs	r0, #4
 2749 0c02 FFF7FEFF 		bl	xQueueCreateMutex
 2750 0c06 0346     		mov	r3, r0
1196:../system/cmsis_os.c **** }
 2751              		.loc 1 1196 0
 2752 0c08 1846     		mov	r0, r3
 2753 0c0a 0837     		adds	r7, r7, #8
 2754 0c0c BD46     		mov	sp, r7
 2755              		@ sp needed
 2756 0c0e 80BD     		pop	{r7, pc}
 2757              		.cfi_endproc
 2758              	.LFE58:
 2760              		.align	2
 2761              		.global	osRecursiveMutexRelease
 2762              		.thumb
 2763              		.thumb_func
 2765              	osRecursiveMutexRelease:
 2766              	.LFB59:
1197:../system/cmsis_os.c **** 
1198:../system/cmsis_os.c **** /**
1199:../system/cmsis_os.c **** * @brief  Release a Recursive Mutex
1200:../system/cmsis_os.c **** * @param   mutex_id      mutex ID obtained by \ref osRecursiveMutexCreate.
1201:../system/cmsis_os.c **** * @retval  status code that indicates the execution status of the function.
1202:../system/cmsis_os.c **** */
1203:../system/cmsis_os.c **** osStatus osRecursiveMutexRelease (osMutexId mutex_id)
1204:../system/cmsis_os.c **** {
 2767              		.loc 1 1204 0
 2768              		.cfi_startproc
 2769              		@ args = 0, pretend = 0, frame = 16
 2770              		@ frame_needed = 1, uses_anonymous_args = 0
 2771 0c10 80B5     		push	{r7, lr}
 2772              		.cfi_def_cfa_offset 8
 2773              		.cfi_offset 7, -8
 2774              		.cfi_offset 14, -4
 2775 0c12 84B0     		sub	sp, sp, #16
 2776              		.cfi_def_cfa_offset 24
 2777 0c14 00AF     		add	r7, sp, #0
 2778              		.cfi_def_cfa_register 7
 2779 0c16 7860     		str	r0, [r7, #4]
1205:../system/cmsis_os.c ****   osStatus result = osOK;
 2780              		.loc 1 1205 0
 2781 0c18 0023     		movs	r3, #0
 2782 0c1a FB60     		str	r3, [r7, #12]
1206:../system/cmsis_os.c ****   
1207:../system/cmsis_os.c ****   if (xSemaphoreGiveRecursive(mutex_id) != pdTRUE) 
 2783              		.loc 1 1207 0
 2784 0c1c 7868     		ldr	r0, [r7, #4]
 2785 0c1e FFF7FEFF 		bl	xQueueGiveMutexRecursive
 2786 0c22 0346     		mov	r3, r0
 2787 0c24 012B     		cmp	r3, #1
 2788 0c26 01D0     		beq	.L198
1208:../system/cmsis_os.c ****   {
1209:../system/cmsis_os.c ****     result = osErrorOS;
 2789              		.loc 1 1209 0
 2790 0c28 FF23     		movs	r3, #255
 2791 0c2a FB60     		str	r3, [r7, #12]
 2792              	.L198:
1210:../system/cmsis_os.c ****   }
1211:../system/cmsis_os.c ****   return result;
 2793              		.loc 1 1211 0
 2794 0c2c FB68     		ldr	r3, [r7, #12]
1212:../system/cmsis_os.c **** }
 2795              		.loc 1 1212 0
 2796 0c2e 1846     		mov	r0, r3
 2797 0c30 1037     		adds	r7, r7, #16
 2798 0c32 BD46     		mov	sp, r7
 2799              		@ sp needed
 2800 0c34 80BD     		pop	{r7, pc}
 2801              		.cfi_endproc
 2802              	.LFE59:
 2804 0c36 00BF     		.align	2
 2805              		.global	osRecursiveMutexWait
 2806              		.thumb
 2807              		.thumb_func
 2809              	osRecursiveMutexWait:
 2810              	.LFB60:
1213:../system/cmsis_os.c **** 
1214:../system/cmsis_os.c **** /**
1215:../system/cmsis_os.c **** * @brief  Release a Recursive Mutex
1216:../system/cmsis_os.c **** * @param   mutex_id    mutex ID obtained by \ref osRecursiveMutexCreate.
1217:../system/cmsis_os.c **** * @param millisec      timeout value or 0 in case of no time-out.
1218:../system/cmsis_os.c **** * @retval  status code that indicates the execution status of the function.
1219:../system/cmsis_os.c **** */
1220:../system/cmsis_os.c **** osStatus osRecursiveMutexWait (osMutexId mutex_id, uint32_t millisec)
1221:../system/cmsis_os.c **** {
 2811              		.loc 1 1221 0
 2812              		.cfi_startproc
 2813              		@ args = 0, pretend = 0, frame = 16
 2814              		@ frame_needed = 1, uses_anonymous_args = 0
 2815 0c38 80B5     		push	{r7, lr}
 2816              		.cfi_def_cfa_offset 8
 2817              		.cfi_offset 7, -8
 2818              		.cfi_offset 14, -4
 2819 0c3a 84B0     		sub	sp, sp, #16
 2820              		.cfi_def_cfa_offset 24
 2821 0c3c 00AF     		add	r7, sp, #0
 2822              		.cfi_def_cfa_register 7
 2823 0c3e 7860     		str	r0, [r7, #4]
 2824 0c40 3960     		str	r1, [r7]
1222:../system/cmsis_os.c ****   portTickType ticks;
1223:../system/cmsis_os.c ****   
1224:../system/cmsis_os.c ****   if (mutex_id == NULL)
 2825              		.loc 1 1224 0
 2826 0c42 7B68     		ldr	r3, [r7, #4]
 2827 0c44 002B     		cmp	r3, #0
 2828 0c46 01D1     		bne	.L201
1225:../system/cmsis_os.c ****   {
1226:../system/cmsis_os.c ****     return osErrorParameter;
 2829              		.loc 1 1226 0
 2830 0c48 8023     		movs	r3, #128
 2831 0c4a 1DE0     		b	.L202
 2832              	.L201:
1227:../system/cmsis_os.c ****   }
1228:../system/cmsis_os.c ****   
1229:../system/cmsis_os.c ****   ticks = 0;
 2833              		.loc 1 1229 0
 2834 0c4c 0023     		movs	r3, #0
 2835 0c4e FB60     		str	r3, [r7, #12]
1230:../system/cmsis_os.c ****   if (millisec == osWaitForever) 
 2836              		.loc 1 1230 0
 2837 0c50 3B68     		ldr	r3, [r7]
 2838 0c52 B3F1FF3F 		cmp	r3, #-1
 2839 0c56 03D1     		bne	.L203
1231:../system/cmsis_os.c ****   {
1232:../system/cmsis_os.c ****     ticks = portMAX_DELAY;
 2840              		.loc 1 1232 0
 2841 0c58 4FF0FF33 		mov	r3, #-1
 2842 0c5c FB60     		str	r3, [r7, #12]
 2843 0c5e 09E0     		b	.L204
 2844              	.L203:
1233:../system/cmsis_os.c ****   }
1234:../system/cmsis_os.c ****   else if (millisec != 0) 
 2845              		.loc 1 1234 0
 2846 0c60 3B68     		ldr	r3, [r7]
 2847 0c62 002B     		cmp	r3, #0
 2848 0c64 06D0     		beq	.L204
1235:../system/cmsis_os.c ****   {
1236:../system/cmsis_os.c ****     ticks = millisec / portTICK_RATE_MS;
 2849              		.loc 1 1236 0
 2850 0c66 3B68     		ldr	r3, [r7]
 2851 0c68 FB60     		str	r3, [r7, #12]
1237:../system/cmsis_os.c ****     if (ticks == 0) 
 2852              		.loc 1 1237 0
 2853 0c6a FB68     		ldr	r3, [r7, #12]
 2854 0c6c 002B     		cmp	r3, #0
 2855 0c6e 01D1     		bne	.L204
1238:../system/cmsis_os.c ****     {
1239:../system/cmsis_os.c ****       ticks = 1;
 2856              		.loc 1 1239 0
 2857 0c70 0123     		movs	r3, #1
 2858 0c72 FB60     		str	r3, [r7, #12]
 2859              	.L204:
1240:../system/cmsis_os.c ****     }
1241:../system/cmsis_os.c ****   }
1242:../system/cmsis_os.c ****   
1243:../system/cmsis_os.c ****   if (xSemaphoreTakeRecursive(mutex_id, ticks) != pdTRUE) 
 2860              		.loc 1 1243 0
 2861 0c74 7868     		ldr	r0, [r7, #4]
 2862 0c76 F968     		ldr	r1, [r7, #12]
 2863 0c78 FFF7FEFF 		bl	xQueueTakeMutexRecursive
 2864 0c7c 0346     		mov	r3, r0
 2865 0c7e 012B     		cmp	r3, #1
 2866 0c80 01D0     		beq	.L205
1244:../system/cmsis_os.c ****   {
1245:../system/cmsis_os.c ****     return osErrorOS;
 2867              		.loc 1 1245 0
 2868 0c82 FF23     		movs	r3, #255
 2869 0c84 00E0     		b	.L202
 2870              	.L205:
1246:../system/cmsis_os.c ****   }
1247:../system/cmsis_os.c ****   return osOK;
 2871              		.loc 1 1247 0
 2872 0c86 0023     		movs	r3, #0
 2873              	.L202:
1248:../system/cmsis_os.c **** }
 2874              		.loc 1 1248 0
 2875 0c88 1846     		mov	r0, r3
 2876 0c8a 1037     		adds	r7, r7, #16
 2877 0c8c BD46     		mov	sp, r7
 2878              		@ sp needed
 2879 0c8e 80BD     		pop	{r7, pc}
 2880              		.cfi_endproc
 2881              	.LFE60:
 2883              	.Letext0:
 2884              		.file 3 "c:\\program files (x86)\\codesourcery\\arm-none-eabi\\include\\stdint.h"
 2885              		.file 4 "D:\\workspace\\console800480\\FreeRTOS\\include/projdefs.h"
 2886              		.file 5 "D:\\workspace\\console800480\\FreeRTOS\\portable\\GCC\\ARM_CM3/portmacro.h"
 2887              		.file 6 "D:\\workspace\\console800480\\FreeRTOS\\include/task.h"
 2888              		.file 7 "D:\\workspace\\console800480\\FreeRTOS\\include/timers.h"
 2889              		.file 8 "D:\\workspace\\console800480\\FreeRTOS\\include/queue.h"
 2890              		.file 9 "D:\\workspace\\console800480\\FreeRTOS\\include/semphr.h"
 2891              		.file 10 "../system/cmsis_os.h"
DEFINED SYMBOLS
                            *ABS*:00000000 cmsis_os.c
C:\Users\sagok\AppData\Local\Temp\cc9u4pIb.s:18     .text:00000000 $t
C:\Users\sagok\AppData\Local\Temp\cc9u4pIb.s:22     .text:00000000 makeFreeRtosPriority
C:\Users\sagok\AppData\Local\Temp\cc9u4pIb.s:69     .text:00000030 makeCmsisPriority
C:\Users\sagok\AppData\Local\Temp\cc9u4pIb.s:115    .text:0000005c inHandlerMode
C:\Users\sagok\AppData\Local\Temp\cc9u4pIb.s:163    .text:00000080 osKernelStart
C:\Users\sagok\AppData\Local\Temp\cc9u4pIb.s:271    .text:000000dc osThreadCreate
C:\Users\sagok\AppData\Local\Temp\cc9u4pIb.s:206    .text:000000a8 osKernelSysTick
C:\Users\sagok\AppData\Local\Temp\cc9u4pIb.s:243    .text:000000c8 osKernelRunning
C:\Users\sagok\AppData\Local\Temp\cc9u4pIb.s:332    .text:00000128 osThreadGetId
C:\Users\sagok\AppData\Local\Temp\cc9u4pIb.s:358    .text:00000138 osThreadTerminate
C:\Users\sagok\AppData\Local\Temp\cc9u4pIb.s:392    .text:00000150 osThreadYield
C:\Users\sagok\AppData\Local\Temp\cc9u4pIb.s:419    .text:00000160 osThreadSetPriority
C:\Users\sagok\AppData\Local\Temp\cc9u4pIb.s:460    .text:0000018c osThreadGetPriority
C:\Users\sagok\AppData\Local\Temp\cc9u4pIb.s:496    .text:000001ac osDelay
C:\Users\sagok\AppData\Local\Temp\cc9u4pIb.s:544    .text:000001d4 osTimerCreate
C:\Users\sagok\AppData\Local\Temp\cc9u4pIb.s:579    .text:000001f0 osTimerStart
C:\Users\sagok\AppData\Local\Temp\cc9u4pIb.s:618    .text:00000210 osTimerStop
C:\Users\sagok\AppData\Local\Temp\cc9u4pIb.s:656    .text:00000230 osMutexCreate
C:\Users\sagok\AppData\Local\Temp\cc9u4pIb.s:689    .text:00000248 osMutexWait
C:\Users\sagok\AppData\Local\Temp\cc9u4pIb.s:779    .text:000002b4 osMutexRelease
C:\Users\sagok\AppData\Local\Temp\cc9u4pIb.s:836    .text:000002f0 osMutexDelete
C:\Users\sagok\AppData\Local\Temp\cc9u4pIb.s:870    .text:00000308 osSemaphoreCreate
C:\Users\sagok\AppData\Local\Temp\cc9u4pIb.s:932    .text:00000350 osSemaphoreWait
C:\Users\sagok\AppData\Local\Temp\cc9u4pIb.s:1022   .text:000003bc osSemaphoreRelease
C:\Users\sagok\AppData\Local\Temp\cc9u4pIb.s:1102   .text:00000428 osSemaphoreDelete
C:\Users\sagok\AppData\Local\Temp\cc9u4pIb.s:1136   .text:00000440 osPoolCreate
C:\Users\sagok\AppData\Local\Temp\cc9u4pIb.s:1268   .text:000004fc osPoolAlloc
C:\Users\sagok\AppData\Local\Temp\cc9u4pIb.s:1398   .text:000005ac osPoolCAlloc
C:\Users\sagok\AppData\Local\Temp\cc9u4pIb.s:1443   .text:000005d8 osPoolFree
C:\Users\sagok\AppData\Local\Temp\cc9u4pIb.s:1545   .text:0000065c osMessageCreate
C:\Users\sagok\AppData\Local\Temp\cc9u4pIb.s:1583   .text:00000680 osMessagePut
C:\Users\sagok\AppData\Local\Temp\cc9u4pIb.s:1676   .text:00000700 osMessageGet
C:\Users\sagok\AppData\Local\Temp\cc9u4pIb.s:1826   .text:000007d8 osMailCreate
C:\Users\sagok\AppData\Local\Temp\cc9u4pIb.s:1957   .text:0000089c osMailAlloc
C:\Users\sagok\AppData\Local\Temp\cc9u4pIb.s:2004   .text:000008c8 osMailCAlloc
C:\Users\sagok\AppData\Local\Temp\cc9u4pIb.s:2066   .text:00000908 osMailPut
C:\Users\sagok\AppData\Local\Temp\cc9u4pIb.s:2159   .text:00000988 osMailGet
C:\Users\sagok\AppData\Local\Temp\cc9u4pIb.s:2313   .text:00000a68 osMailFree
C:\Users\sagok\AppData\Local\Temp\cc9u4pIb.s:2360   .text:00000a94 osThreadSuspend
C:\Users\sagok\AppData\Local\Temp\cc9u4pIb.s:2394   .text:00000aac osThreadResume
C:\Users\sagok\AppData\Local\Temp\cc9u4pIb.s:2439   .text:00000ad8 osThreadSuspendAll
C:\Users\sagok\AppData\Local\Temp\cc9u4pIb.s:2466   .text:00000ae8 osThreadResumeAll
C:\Users\sagok\AppData\Local\Temp\cc9u4pIb.s:2493   .text:00000af8 osThreadIsSuspended
C:\Users\sagok\AppData\Local\Temp\cc9u4pIb.s:2535   .text:00000b1c osDelayUntil
C:\Users\sagok\AppData\Local\Temp\cc9u4pIb.s:2589   .text:00000b50 osThreadList
C:\Users\sagok\AppData\Local\Temp\cc9u4pIb.s:2621   .text:00000b68 osMessagePeek
C:\Users\sagok\AppData\Local\Temp\cc9u4pIb.s:2732   .text:00000bf8 osRecursiveMutexCreate
C:\Users\sagok\AppData\Local\Temp\cc9u4pIb.s:2765   .text:00000c10 osRecursiveMutexRelease
C:\Users\sagok\AppData\Local\Temp\cc9u4pIb.s:2809   .text:00000c38 osRecursiveMutexWait
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.7f551ac7fcad8b79b9df4bfdaa536673
                           .group:00000000 wm4.newlib.h.8.384a112feabb3bef7b573ae48cde2e3b
                           .group:00000000 wm4.features.h.22.6a4ca7cd053637cc1d0db6c16f39b2d7
                           .group:00000000 wm4.config.h.183.aa62afef667fb61d15fa64c48beb2f14
                           .group:00000000 wm4._ansi.h.23.5644b60c990a4800b02a6e654e88f93a
                           .group:00000000 wm4._default_types.h.6.5e12cd604db8ce00b62bb2f02708eaf3
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4._types.h.59.db8450f33c1f6150c0372fa1091a887a
                           .group:00000000 wm4.stddef.h.348.9a99de77b6ba3b4278b57e9cc6d6e349
                           .group:00000000 wm4.reent.h.16.567d760e6ae9ad7f917851a308bd7a57
                           .group:00000000 wm4.stddef.h.39.daafd3d79fe2f3a84d2d73d7d4e706f8
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.cdefs.h.56.efab90f4d89fbc41d6b3a5c5fb0d3d0f
                           .group:00000000 wm4.string.h.15.dab3980bf35408a4c507182805e2de3a
                           .group:00000000 wm4.stddef.h.158.a7efb00f6cbc6f43213b50e183c9830c
                           .group:00000000 wm4.string.h.126.6ff3aa59129e7f66b2c273baf353e066
                           .group:00000000 wm4.cmsis_os.h.27.729c0aba9bbe556e46768eb144057868
                           .group:00000000 wm4.projdefs.h.67.1891ed3aab788f154f6e7a8ff42f2cfd
                           .group:00000000 wm4.FreeRTOSConfig.h.51.b259e2e835793b5f31e6fb224a543b76
                           .group:00000000 wm4.portmacro.h.68.b9ad41c1c2fd3fb36d97939d17ebacd9
                           .group:00000000 wm4.portable.h.325.a31e8973a246cd28421ddb595e37fd13
                           .group:00000000 wm4.mpu_wrappers.h.67.4bcfd12ce15e5313ce3efd77400f8168
                           .group:00000000 wm4.FreeRTOS.h.177.d801ec107caaf24697618049ed7605b1
                           .group:00000000 wm4.list.h.96.eaa3d29743bd681933f9f5e726c756a1
                           .group:00000000 wm4.task.h.84.ff846741c7bdac87bd4a7636d5320d68
                           .group:00000000 wm4.timers.h.92.7e7e1a9bf65701faf3dfc9cf90e720c0
                           .group:00000000 wm4.queue.h.68.1266563298ebacb4a83c08ead1e4111f
                           .group:00000000 wm4.semphr.h.77.cfc41285e8d228b828c00c3fce52801f
                           .group:00000000 wm4.cmsis_os.h.120.d00ed217205e0c5a9dce79e03835190a
                           .group:00000000 wm4.cmsis_os.h.176.b548fc0555f37a733ee07e59683ebd50

UNDEFINED SYMBOLS
vTaskStartScheduler
xTaskGetTickCountFromISR
xTaskGetTickCount
xTaskGenericCreate
xTaskGetCurrentTaskHandle
vTaskDelete
vPortYield
vTaskPrioritySet
uxTaskPriorityGet
vTaskDelay
xQueueCreateMutex
xQueueGenericReceive
xQueueGenericSend
vQueueDelete
xQueueGenericCreate
xQueueCreateCountingSemaphore
xQueueGenericSendFromISR
pvPortMalloc
vPortFree
ulPortSetInterruptMask
vPortEnterCritical
vPortClearInterruptMask
vPortExitCritical
memset
xQueueReceiveFromISR
vTaskSuspend
xTaskResumeFromISR
vTaskResume
vTaskSuspendAll
xTaskResumeAll
xTaskIsTaskSuspended
vTaskDelayUntil
xQueueGiveMutexRecursive
xQueueTakeMutexRecursive
