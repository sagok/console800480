   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f2xx_hal_cortex.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.align	2
  19              		.thumb
  20              		.thumb_func
  22              	NVIC_SetPriorityGrouping:
  23              	.LFB38:
  24              		.file 1 "D:\\workspace\\console800480\\system/core_cm3.h"
   1:D:\workspace\console800480\system\core_cm3.h **** /**************************************************************************//**
   2:D:\workspace\console800480\system\core_cm3.h ****  * @file     core_cm3.h
   3:D:\workspace\console800480\system\core_cm3.h ****  * @brief    CMSIS Cortex-M3 Core Peripheral Access Layer Header File
   4:D:\workspace\console800480\system\core_cm3.h ****  * @version  V2.10
   5:D:\workspace\console800480\system\core_cm3.h ****  * @date     19. July 2011
   6:D:\workspace\console800480\system\core_cm3.h ****  *
   7:D:\workspace\console800480\system\core_cm3.h ****  * @note
   8:D:\workspace\console800480\system\core_cm3.h ****  * Copyright (C) 2009-2011 ARM Limited. All rights reserved.
   9:D:\workspace\console800480\system\core_cm3.h ****  *
  10:D:\workspace\console800480\system\core_cm3.h ****  * @par
  11:D:\workspace\console800480\system\core_cm3.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M
  12:D:\workspace\console800480\system\core_cm3.h ****  * processor based microcontrollers.  This file can be freely distributed
  13:D:\workspace\console800480\system\core_cm3.h ****  * within development tools that are supporting such ARM based processors.
  14:D:\workspace\console800480\system\core_cm3.h ****  *
  15:D:\workspace\console800480\system\core_cm3.h ****  * @par
  16:D:\workspace\console800480\system\core_cm3.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:D:\workspace\console800480\system\core_cm3.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:D:\workspace\console800480\system\core_cm3.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:D:\workspace\console800480\system\core_cm3.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:D:\workspace\console800480\system\core_cm3.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:D:\workspace\console800480\system\core_cm3.h ****  *
  22:D:\workspace\console800480\system\core_cm3.h ****  ******************************************************************************/
  23:D:\workspace\console800480\system\core_cm3.h **** #if defined ( __ICCARM__ )
  24:D:\workspace\console800480\system\core_cm3.h ****  #pragma system_include  /* treat file as system include file for MISRA check */
  25:D:\workspace\console800480\system\core_cm3.h **** #endif
  26:D:\workspace\console800480\system\core_cm3.h **** 
  27:D:\workspace\console800480\system\core_cm3.h **** #ifdef __cplusplus
  28:D:\workspace\console800480\system\core_cm3.h ****  extern "C" {
  29:D:\workspace\console800480\system\core_cm3.h **** #endif
  30:D:\workspace\console800480\system\core_cm3.h **** 
  31:D:\workspace\console800480\system\core_cm3.h **** #ifndef __CORE_CM3_H_GENERIC
  32:D:\workspace\console800480\system\core_cm3.h **** #define __CORE_CM3_H_GENERIC
  33:D:\workspace\console800480\system\core_cm3.h **** 
  34:D:\workspace\console800480\system\core_cm3.h **** 
  35:D:\workspace\console800480\system\core_cm3.h **** /** \mainpage CMSIS Cortex-M3
  36:D:\workspace\console800480\system\core_cm3.h **** 
  37:D:\workspace\console800480\system\core_cm3.h ****   This documentation describes the CMSIS Cortex-M Core Peripheral Access Layer.
  38:D:\workspace\console800480\system\core_cm3.h ****   It consists of:
  39:D:\workspace\console800480\system\core_cm3.h **** 
  40:D:\workspace\console800480\system\core_cm3.h ****      - Cortex-M Core Register Definitions
  41:D:\workspace\console800480\system\core_cm3.h ****      - Cortex-M functions
  42:D:\workspace\console800480\system\core_cm3.h ****      - Cortex-M instructions
  43:D:\workspace\console800480\system\core_cm3.h **** 
  44:D:\workspace\console800480\system\core_cm3.h ****   The CMSIS Cortex-M3 Core Peripheral Access Layer contains C and assembly functions that ease
  45:D:\workspace\console800480\system\core_cm3.h ****   access to the Cortex-M Core
  46:D:\workspace\console800480\system\core_cm3.h ****  */
  47:D:\workspace\console800480\system\core_cm3.h **** 
  48:D:\workspace\console800480\system\core_cm3.h **** /** \defgroup CMSIS_MISRA_Exceptions  CMSIS MISRA-C:2004 Compliance Exceptions
  49:D:\workspace\console800480\system\core_cm3.h ****   CMSIS violates following MISRA-C2004 Rules:
  50:D:\workspace\console800480\system\core_cm3.h ****   
  51:D:\workspace\console800480\system\core_cm3.h ****    - Violates MISRA 2004 Required Rule 8.5, object/function definition in header file.<br>
  52:D:\workspace\console800480\system\core_cm3.h ****      Function definitions in header files are used to allow 'inlining'. 
  53:D:\workspace\console800480\system\core_cm3.h **** 
  54:D:\workspace\console800480\system\core_cm3.h ****    - Violates MISRA 2004 Required Rule 18.4, declaration of union type or object of union type: '{.
  55:D:\workspace\console800480\system\core_cm3.h ****      Unions are used for effective representation of core registers.
  56:D:\workspace\console800480\system\core_cm3.h ****    
  57:D:\workspace\console800480\system\core_cm3.h ****    - Violates MISRA 2004 Advisory Rule 19.7, Function-like macro defined.<br>
  58:D:\workspace\console800480\system\core_cm3.h ****      Function-like macros are used to allow more efficient code. 
  59:D:\workspace\console800480\system\core_cm3.h **** 
  60:D:\workspace\console800480\system\core_cm3.h ****  */
  61:D:\workspace\console800480\system\core_cm3.h **** 
  62:D:\workspace\console800480\system\core_cm3.h **** 
  63:D:\workspace\console800480\system\core_cm3.h **** /*******************************************************************************
  64:D:\workspace\console800480\system\core_cm3.h ****  *                 CMSIS definitions
  65:D:\workspace\console800480\system\core_cm3.h ****  ******************************************************************************/
  66:D:\workspace\console800480\system\core_cm3.h **** /** \defgroup CMSIS_core_definitions CMSIS Core Definitions
  67:D:\workspace\console800480\system\core_cm3.h ****   This file defines all structures and symbols for CMSIS core:
  68:D:\workspace\console800480\system\core_cm3.h ****    - CMSIS version number
  69:D:\workspace\console800480\system\core_cm3.h ****    - Cortex-M core
  70:D:\workspace\console800480\system\core_cm3.h ****    - Cortex-M core Revision Number
  71:D:\workspace\console800480\system\core_cm3.h ****   @{
  72:D:\workspace\console800480\system\core_cm3.h ****  */
  73:D:\workspace\console800480\system\core_cm3.h **** 
  74:D:\workspace\console800480\system\core_cm3.h **** /*  CMSIS CM3 definitions */
  75:D:\workspace\console800480\system\core_cm3.h **** #define __CM3_CMSIS_VERSION_MAIN  (0x02)                                                       /*!<
  76:D:\workspace\console800480\system\core_cm3.h **** #define __CM3_CMSIS_VERSION_SUB   (0x10)                                                       /*!<
  77:D:\workspace\console800480\system\core_cm3.h **** #define __CM3_CMSIS_VERSION       ((__CM3_CMSIS_VERSION_MAIN << 16) | __CM3_CMSIS_VERSION_SUB) /*!<
  78:D:\workspace\console800480\system\core_cm3.h **** 
  79:D:\workspace\console800480\system\core_cm3.h **** #define __CORTEX_M                (0x03)                                                       /*!<
  80:D:\workspace\console800480\system\core_cm3.h **** 
  81:D:\workspace\console800480\system\core_cm3.h **** 
  82:D:\workspace\console800480\system\core_cm3.h **** #if   defined ( __CC_ARM )
  83:D:\workspace\console800480\system\core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  84:D:\workspace\console800480\system\core_cm3.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  85:D:\workspace\console800480\system\core_cm3.h **** 
  86:D:\workspace\console800480\system\core_cm3.h **** #elif defined ( __ICCARM__ )
  87:D:\workspace\console800480\system\core_cm3.h ****   #define __ASM           __asm                                       /*!< asm keyword for IAR Comp
  88:D:\workspace\console800480\system\core_cm3.h ****   #define __INLINE        inline                                      /*!< inline keyword for IAR C
  89:D:\workspace\console800480\system\core_cm3.h **** 
  90:D:\workspace\console800480\system\core_cm3.h **** #elif defined ( __GNUC__ )
  91:D:\workspace\console800480\system\core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  92:D:\workspace\console800480\system\core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  93:D:\workspace\console800480\system\core_cm3.h **** 
  94:D:\workspace\console800480\system\core_cm3.h **** #elif defined ( __TASKING__ )
  95:D:\workspace\console800480\system\core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
  96:D:\workspace\console800480\system\core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
  97:D:\workspace\console800480\system\core_cm3.h **** 
  98:D:\workspace\console800480\system\core_cm3.h **** #endif
  99:D:\workspace\console800480\system\core_cm3.h **** 
 100:D:\workspace\console800480\system\core_cm3.h **** /*!< __FPU_USED to be checked prior to making use of FPU specific registers and functions */
 101:D:\workspace\console800480\system\core_cm3.h **** #define __FPU_USED       0
 102:D:\workspace\console800480\system\core_cm3.h **** 
 103:D:\workspace\console800480\system\core_cm3.h **** #if defined ( __CC_ARM )
 104:D:\workspace\console800480\system\core_cm3.h ****   #if defined __TARGET_FPU_VFP
 105:D:\workspace\console800480\system\core_cm3.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 106:D:\workspace\console800480\system\core_cm3.h ****   #endif
 107:D:\workspace\console800480\system\core_cm3.h **** #elif defined ( __ICCARM__ )
 108:D:\workspace\console800480\system\core_cm3.h ****   #if defined __ARMVFP__
 109:D:\workspace\console800480\system\core_cm3.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 110:D:\workspace\console800480\system\core_cm3.h ****   #endif
 111:D:\workspace\console800480\system\core_cm3.h **** 
 112:D:\workspace\console800480\system\core_cm3.h **** #elif defined ( __GNUC__ )
 113:D:\workspace\console800480\system\core_cm3.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 114:D:\workspace\console800480\system\core_cm3.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 115:D:\workspace\console800480\system\core_cm3.h ****   #endif
 116:D:\workspace\console800480\system\core_cm3.h **** 
 117:D:\workspace\console800480\system\core_cm3.h **** #elif defined ( __TASKING__ )
 118:D:\workspace\console800480\system\core_cm3.h ****     /* add preprocessor checks */
 119:D:\workspace\console800480\system\core_cm3.h **** #endif
 120:D:\workspace\console800480\system\core_cm3.h **** 
 121:D:\workspace\console800480\system\core_cm3.h **** #include <stdint.h>                      /*!< standard types definitions                      */
 122:D:\workspace\console800480\system\core_cm3.h **** #include "core_cmInstr.h"                /*!< Core Instruction Access                         */
 123:D:\workspace\console800480\system\core_cm3.h **** #include "core_cmFunc.h"                 /*!< Core Function Access                            */
 124:D:\workspace\console800480\system\core_cm3.h **** 
 125:D:\workspace\console800480\system\core_cm3.h **** #endif /* __CORE_CM3_H_GENERIC */
 126:D:\workspace\console800480\system\core_cm3.h **** 
 127:D:\workspace\console800480\system\core_cm3.h **** #ifndef __CMSIS_GENERIC
 128:D:\workspace\console800480\system\core_cm3.h **** 
 129:D:\workspace\console800480\system\core_cm3.h **** #ifndef __CORE_CM3_H_DEPENDANT
 130:D:\workspace\console800480\system\core_cm3.h **** #define __CORE_CM3_H_DEPENDANT
 131:D:\workspace\console800480\system\core_cm3.h **** 
 132:D:\workspace\console800480\system\core_cm3.h **** /* check device defines and use defaults */
 133:D:\workspace\console800480\system\core_cm3.h **** #if defined __CHECK_DEVICE_DEFINES
 134:D:\workspace\console800480\system\core_cm3.h ****   #ifndef __CM3_REV
 135:D:\workspace\console800480\system\core_cm3.h ****     #define __CM3_REV               0x0200
 136:D:\workspace\console800480\system\core_cm3.h ****     #warning "__CM3_REV not defined in device header file; using default!"
 137:D:\workspace\console800480\system\core_cm3.h ****   #endif
 138:D:\workspace\console800480\system\core_cm3.h **** 
 139:D:\workspace\console800480\system\core_cm3.h ****   #ifndef __MPU_PRESENT
 140:D:\workspace\console800480\system\core_cm3.h ****     #define __MPU_PRESENT             0
 141:D:\workspace\console800480\system\core_cm3.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 142:D:\workspace\console800480\system\core_cm3.h ****   #endif
 143:D:\workspace\console800480\system\core_cm3.h **** 
 144:D:\workspace\console800480\system\core_cm3.h ****   #ifndef __NVIC_PRIO_BITS
 145:D:\workspace\console800480\system\core_cm3.h ****     #define __NVIC_PRIO_BITS          4
 146:D:\workspace\console800480\system\core_cm3.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 147:D:\workspace\console800480\system\core_cm3.h ****   #endif
 148:D:\workspace\console800480\system\core_cm3.h **** 
 149:D:\workspace\console800480\system\core_cm3.h ****   #ifndef __Vendor_SysTickConfig
 150:D:\workspace\console800480\system\core_cm3.h ****     #define __Vendor_SysTickConfig    0
 151:D:\workspace\console800480\system\core_cm3.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 152:D:\workspace\console800480\system\core_cm3.h ****   #endif
 153:D:\workspace\console800480\system\core_cm3.h **** #endif
 154:D:\workspace\console800480\system\core_cm3.h **** 
 155:D:\workspace\console800480\system\core_cm3.h **** /* IO definitions (access restrictions to peripheral registers) */
 156:D:\workspace\console800480\system\core_cm3.h **** #ifdef __cplusplus
 157:D:\workspace\console800480\system\core_cm3.h ****   #define   __I     volatile             /*!< defines 'read only' permissions                 */
 158:D:\workspace\console800480\system\core_cm3.h **** #else
 159:D:\workspace\console800480\system\core_cm3.h ****   #define   __I     volatile const       /*!< defines 'read only' permissions                 */
 160:D:\workspace\console800480\system\core_cm3.h **** #endif
 161:D:\workspace\console800480\system\core_cm3.h **** #define     __O     volatile             /*!< defines 'write only' permissions                */
 162:D:\workspace\console800480\system\core_cm3.h **** #define     __IO    volatile             /*!< defines 'read / write' permissions              */
 163:D:\workspace\console800480\system\core_cm3.h **** 
 164:D:\workspace\console800480\system\core_cm3.h **** /*@} end of group CMSIS_core_definitions */
 165:D:\workspace\console800480\system\core_cm3.h **** 
 166:D:\workspace\console800480\system\core_cm3.h **** 
 167:D:\workspace\console800480\system\core_cm3.h **** 
 168:D:\workspace\console800480\system\core_cm3.h **** /*******************************************************************************
 169:D:\workspace\console800480\system\core_cm3.h ****  *                 Register Abstraction
 170:D:\workspace\console800480\system\core_cm3.h ****  ******************************************************************************/
 171:D:\workspace\console800480\system\core_cm3.h **** /** \defgroup CMSIS_core_register CMSIS Core Register
 172:D:\workspace\console800480\system\core_cm3.h ****   Core Register contain:
 173:D:\workspace\console800480\system\core_cm3.h ****   - Core Register
 174:D:\workspace\console800480\system\core_cm3.h ****   - Core NVIC Register
 175:D:\workspace\console800480\system\core_cm3.h ****   - Core SCB Register
 176:D:\workspace\console800480\system\core_cm3.h ****   - Core SysTick Register
 177:D:\workspace\console800480\system\core_cm3.h ****   - Core Debug Register
 178:D:\workspace\console800480\system\core_cm3.h ****   - Core MPU Register
 179:D:\workspace\console800480\system\core_cm3.h **** */
 180:D:\workspace\console800480\system\core_cm3.h **** 
 181:D:\workspace\console800480\system\core_cm3.h **** /** \ingroup  CMSIS_core_register
 182:D:\workspace\console800480\system\core_cm3.h ****     \defgroup CMSIS_CORE CMSIS Core
 183:D:\workspace\console800480\system\core_cm3.h ****   Type definitions for the Cortex-M Core Registers
 184:D:\workspace\console800480\system\core_cm3.h ****   @{
 185:D:\workspace\console800480\system\core_cm3.h ****  */
 186:D:\workspace\console800480\system\core_cm3.h **** 
 187:D:\workspace\console800480\system\core_cm3.h **** /** \brief  Union type to access the Application Program Status Register (APSR).
 188:D:\workspace\console800480\system\core_cm3.h ****  */
 189:D:\workspace\console800480\system\core_cm3.h **** typedef union
 190:D:\workspace\console800480\system\core_cm3.h **** {
 191:D:\workspace\console800480\system\core_cm3.h ****   struct
 192:D:\workspace\console800480\system\core_cm3.h ****   {
 193:D:\workspace\console800480\system\core_cm3.h **** #if (__CORTEX_M != 0x04)
 194:D:\workspace\console800480\system\core_cm3.h ****     uint32_t _reserved0:27;              /*!< bit:  0..26  Reserved                           */
 195:D:\workspace\console800480\system\core_cm3.h **** #else
 196:D:\workspace\console800480\system\core_cm3.h ****     uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved                           */
 197:D:\workspace\console800480\system\core_cm3.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 198:D:\workspace\console800480\system\core_cm3.h ****     uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved                           */
 199:D:\workspace\console800480\system\core_cm3.h **** #endif
 200:D:\workspace\console800480\system\core_cm3.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 201:D:\workspace\console800480\system\core_cm3.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 202:D:\workspace\console800480\system\core_cm3.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 203:D:\workspace\console800480\system\core_cm3.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 204:D:\workspace\console800480\system\core_cm3.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 205:D:\workspace\console800480\system\core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 206:D:\workspace\console800480\system\core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 207:D:\workspace\console800480\system\core_cm3.h **** } APSR_Type;
 208:D:\workspace\console800480\system\core_cm3.h **** 
 209:D:\workspace\console800480\system\core_cm3.h **** 
 210:D:\workspace\console800480\system\core_cm3.h **** /** \brief  Union type to access the Interrupt Program Status Register (IPSR).
 211:D:\workspace\console800480\system\core_cm3.h ****  */
 212:D:\workspace\console800480\system\core_cm3.h **** typedef union
 213:D:\workspace\console800480\system\core_cm3.h **** {
 214:D:\workspace\console800480\system\core_cm3.h ****   struct
 215:D:\workspace\console800480\system\core_cm3.h ****   {
 216:D:\workspace\console800480\system\core_cm3.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 217:D:\workspace\console800480\system\core_cm3.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved                           */
 218:D:\workspace\console800480\system\core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 219:D:\workspace\console800480\system\core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 220:D:\workspace\console800480\system\core_cm3.h **** } IPSR_Type;
 221:D:\workspace\console800480\system\core_cm3.h **** 
 222:D:\workspace\console800480\system\core_cm3.h **** 
 223:D:\workspace\console800480\system\core_cm3.h **** /** \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 224:D:\workspace\console800480\system\core_cm3.h ****  */
 225:D:\workspace\console800480\system\core_cm3.h **** typedef union
 226:D:\workspace\console800480\system\core_cm3.h **** {
 227:D:\workspace\console800480\system\core_cm3.h ****   struct
 228:D:\workspace\console800480\system\core_cm3.h ****   {
 229:D:\workspace\console800480\system\core_cm3.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 230:D:\workspace\console800480\system\core_cm3.h **** #if (__CORTEX_M != 0x04)
 231:D:\workspace\console800480\system\core_cm3.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved                           */
 232:D:\workspace\console800480\system\core_cm3.h **** #else
 233:D:\workspace\console800480\system\core_cm3.h ****     uint32_t _reserved0:7;               /*!< bit:  9..15  Reserved                           */
 234:D:\workspace\console800480\system\core_cm3.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 235:D:\workspace\console800480\system\core_cm3.h ****     uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved                           */
 236:D:\workspace\console800480\system\core_cm3.h **** #endif
 237:D:\workspace\console800480\system\core_cm3.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0)          */
 238:D:\workspace\console800480\system\core_cm3.h ****     uint32_t IT:2;                       /*!< bit: 25..26  saved IT state   (read 0)          */
 239:D:\workspace\console800480\system\core_cm3.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 240:D:\workspace\console800480\system\core_cm3.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 241:D:\workspace\console800480\system\core_cm3.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 242:D:\workspace\console800480\system\core_cm3.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 243:D:\workspace\console800480\system\core_cm3.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 244:D:\workspace\console800480\system\core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 245:D:\workspace\console800480\system\core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 246:D:\workspace\console800480\system\core_cm3.h **** } xPSR_Type;
 247:D:\workspace\console800480\system\core_cm3.h **** 
 248:D:\workspace\console800480\system\core_cm3.h **** 
 249:D:\workspace\console800480\system\core_cm3.h **** /** \brief  Union type to access the Control Registers (CONTROL).
 250:D:\workspace\console800480\system\core_cm3.h ****  */
 251:D:\workspace\console800480\system\core_cm3.h **** typedef union
 252:D:\workspace\console800480\system\core_cm3.h **** {
 253:D:\workspace\console800480\system\core_cm3.h ****   struct
 254:D:\workspace\console800480\system\core_cm3.h ****   {
 255:D:\workspace\console800480\system\core_cm3.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 256:D:\workspace\console800480\system\core_cm3.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used                   */
 257:D:\workspace\console800480\system\core_cm3.h ****     uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag           */
 258:D:\workspace\console800480\system\core_cm3.h ****     uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved                           */
 259:D:\workspace\console800480\system\core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 260:D:\workspace\console800480\system\core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 261:D:\workspace\console800480\system\core_cm3.h **** } CONTROL_Type;
 262:D:\workspace\console800480\system\core_cm3.h **** 
 263:D:\workspace\console800480\system\core_cm3.h **** /*@} end of group CMSIS_CORE */
 264:D:\workspace\console800480\system\core_cm3.h **** 
 265:D:\workspace\console800480\system\core_cm3.h **** 
 266:D:\workspace\console800480\system\core_cm3.h **** /** \ingroup  CMSIS_core_register
 267:D:\workspace\console800480\system\core_cm3.h ****     \defgroup CMSIS_NVIC CMSIS NVIC
 268:D:\workspace\console800480\system\core_cm3.h ****   Type definitions for the Cortex-M NVIC Registers
 269:D:\workspace\console800480\system\core_cm3.h ****   @{
 270:D:\workspace\console800480\system\core_cm3.h ****  */
 271:D:\workspace\console800480\system\core_cm3.h **** 
 272:D:\workspace\console800480\system\core_cm3.h **** /** \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 273:D:\workspace\console800480\system\core_cm3.h ****  */
 274:D:\workspace\console800480\system\core_cm3.h **** typedef struct
 275:D:\workspace\console800480\system\core_cm3.h **** {
 276:D:\workspace\console800480\system\core_cm3.h ****   __IO uint32_t ISER[8];                 /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register   
 277:D:\workspace\console800480\system\core_cm3.h ****        uint32_t RESERVED0[24];
 278:D:\workspace\console800480\system\core_cm3.h ****   __IO uint32_t ICER[8];                 /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 279:D:\workspace\console800480\system\core_cm3.h ****        uint32_t RSERVED1[24];
 280:D:\workspace\console800480\system\core_cm3.h ****   __IO uint32_t ISPR[8];                 /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register  
 281:D:\workspace\console800480\system\core_cm3.h ****        uint32_t RESERVED2[24];
 282:D:\workspace\console800480\system\core_cm3.h ****   __IO uint32_t ICPR[8];                 /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 283:D:\workspace\console800480\system\core_cm3.h ****        uint32_t RESERVED3[24];
 284:D:\workspace\console800480\system\core_cm3.h ****   __IO uint32_t IABR[8];                 /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register   
 285:D:\workspace\console800480\system\core_cm3.h ****        uint32_t RESERVED4[56];
 286:D:\workspace\console800480\system\core_cm3.h ****   __IO uint8_t  IP[240];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 287:D:\workspace\console800480\system\core_cm3.h ****        uint32_t RESERVED5[644];
 288:D:\workspace\console800480\system\core_cm3.h ****   __O  uint32_t STIR;                    /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 289:D:\workspace\console800480\system\core_cm3.h **** }  NVIC_Type;
 290:D:\workspace\console800480\system\core_cm3.h **** 
 291:D:\workspace\console800480\system\core_cm3.h **** /* Software Triggered Interrupt Register Definitions */
 292:D:\workspace\console800480\system\core_cm3.h **** #define NVIC_STIR_INTID_Pos                 0                                          /*!< STIR: I
 293:D:\workspace\console800480\system\core_cm3.h **** #define NVIC_STIR_INTID_Msk                (0x1FFUL << NVIC_STIR_INTID_Pos)            /*!< STIR: I
 294:D:\workspace\console800480\system\core_cm3.h **** 
 295:D:\workspace\console800480\system\core_cm3.h **** /*@} end of group CMSIS_NVIC */
 296:D:\workspace\console800480\system\core_cm3.h **** 
 297:D:\workspace\console800480\system\core_cm3.h **** 
 298:D:\workspace\console800480\system\core_cm3.h **** /** \ingroup  CMSIS_core_register
 299:D:\workspace\console800480\system\core_cm3.h ****     \defgroup CMSIS_SCB CMSIS SCB
 300:D:\workspace\console800480\system\core_cm3.h ****   Type definitions for the Cortex-M System Control Block Registers
 301:D:\workspace\console800480\system\core_cm3.h ****   @{
 302:D:\workspace\console800480\system\core_cm3.h ****  */
 303:D:\workspace\console800480\system\core_cm3.h **** 
 304:D:\workspace\console800480\system\core_cm3.h **** /** \brief  Structure type to access the System Control Block (SCB).
 305:D:\workspace\console800480\system\core_cm3.h ****  */
 306:D:\workspace\console800480\system\core_cm3.h **** typedef struct
 307:D:\workspace\console800480\system\core_cm3.h **** {
 308:D:\workspace\console800480\system\core_cm3.h ****   __I  uint32_t CPUID;                   /*!< Offset: 0x000 (R/ )  CPUID Base Register             
 309:D:\workspace\console800480\system\core_cm3.h ****   __IO uint32_t ICSR;                    /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 310:D:\workspace\console800480\system\core_cm3.h ****   __IO uint32_t VTOR;                    /*!< Offset: 0x008 (R/W)  Vector Table Offset Register    
 311:D:\workspace\console800480\system\core_cm3.h ****   __IO uint32_t AIRCR;                   /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 312:D:\workspace\console800480\system\core_cm3.h ****   __IO uint32_t SCR;                     /*!< Offset: 0x010 (R/W)  System Control Register         
 313:D:\workspace\console800480\system\core_cm3.h ****   __IO uint32_t CCR;                     /*!< Offset: 0x014 (R/W)  Configuration Control Register  
 314:D:\workspace\console800480\system\core_cm3.h ****   __IO uint8_t  SHP[12];                 /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 315:D:\workspace\console800480\system\core_cm3.h ****   __IO uint32_t SHCSR;                   /*!< Offset: 0x024 (R/W)  System Handler Control and State
 316:D:\workspace\console800480\system\core_cm3.h ****   __IO uint32_t CFSR;                    /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 317:D:\workspace\console800480\system\core_cm3.h ****   __IO uint32_t HFSR;                    /*!< Offset: 0x02C (R/W)  HardFault Status Register       
 318:D:\workspace\console800480\system\core_cm3.h ****   __IO uint32_t DFSR;                    /*!< Offset: 0x030 (R/W)  Debug Fault Status Register     
 319:D:\workspace\console800480\system\core_cm3.h ****   __IO uint32_t MMFAR;                   /*!< Offset: 0x034 (R/W)  MemManage Fault Address Register
 320:D:\workspace\console800480\system\core_cm3.h ****   __IO uint32_t BFAR;                    /*!< Offset: 0x038 (R/W)  BusFault Address Register       
 321:D:\workspace\console800480\system\core_cm3.h ****   __IO uint32_t AFSR;                    /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
 322:D:\workspace\console800480\system\core_cm3.h ****   __I  uint32_t PFR[2];                  /*!< Offset: 0x040 (R/ )  Processor Feature Register      
 323:D:\workspace\console800480\system\core_cm3.h ****   __I  uint32_t DFR;                     /*!< Offset: 0x048 (R/ )  Debug Feature Register          
 324:D:\workspace\console800480\system\core_cm3.h ****   __I  uint32_t ADR;                     /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register      
 325:D:\workspace\console800480\system\core_cm3.h ****   __I  uint32_t MMFR[4];                 /*!< Offset: 0x050 (R/ )  Memory Model Feature Register   
 326:D:\workspace\console800480\system\core_cm3.h ****   __I  uint32_t ISAR[5];                 /*!< Offset: 0x060 (R/ )  Instruction Set Attributes Regis
 327:D:\workspace\console800480\system\core_cm3.h ****        uint32_t RESERVED0[5];
 328:D:\workspace\console800480\system\core_cm3.h ****   __IO uint32_t CPACR;                   /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Regis
 329:D:\workspace\console800480\system\core_cm3.h **** } SCB_Type;
 330:D:\workspace\console800480\system\core_cm3.h **** 
 331:D:\workspace\console800480\system\core_cm3.h **** /* SCB CPUID Register Definitions */
 332:D:\workspace\console800480\system\core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 333:D:\workspace\console800480\system\core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 334:D:\workspace\console800480\system\core_cm3.h **** 
 335:D:\workspace\console800480\system\core_cm3.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 336:D:\workspace\console800480\system\core_cm3.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 337:D:\workspace\console800480\system\core_cm3.h **** 
 338:D:\workspace\console800480\system\core_cm3.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16                                             /*!< SCB 
 339:D:\workspace\console800480\system\core_cm3.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 340:D:\workspace\console800480\system\core_cm3.h **** 
 341:D:\workspace\console800480\system\core_cm3.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 342:D:\workspace\console800480\system\core_cm3.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 343:D:\workspace\console800480\system\core_cm3.h **** 
 344:D:\workspace\console800480\system\core_cm3.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 345:D:\workspace\console800480\system\core_cm3.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 346:D:\workspace\console800480\system\core_cm3.h **** 
 347:D:\workspace\console800480\system\core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 348:D:\workspace\console800480\system\core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 349:D:\workspace\console800480\system\core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 350:D:\workspace\console800480\system\core_cm3.h **** 
 351:D:\workspace\console800480\system\core_cm3.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 352:D:\workspace\console800480\system\core_cm3.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 353:D:\workspace\console800480\system\core_cm3.h **** 
 354:D:\workspace\console800480\system\core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 355:D:\workspace\console800480\system\core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 356:D:\workspace\console800480\system\core_cm3.h **** 
 357:D:\workspace\console800480\system\core_cm3.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 358:D:\workspace\console800480\system\core_cm3.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 359:D:\workspace\console800480\system\core_cm3.h **** 
 360:D:\workspace\console800480\system\core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 361:D:\workspace\console800480\system\core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 362:D:\workspace\console800480\system\core_cm3.h **** 
 363:D:\workspace\console800480\system\core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 364:D:\workspace\console800480\system\core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 365:D:\workspace\console800480\system\core_cm3.h **** 
 366:D:\workspace\console800480\system\core_cm3.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 367:D:\workspace\console800480\system\core_cm3.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 368:D:\workspace\console800480\system\core_cm3.h **** 
 369:D:\workspace\console800480\system\core_cm3.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 370:D:\workspace\console800480\system\core_cm3.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 371:D:\workspace\console800480\system\core_cm3.h **** 
 372:D:\workspace\console800480\system\core_cm3.h **** #define SCB_ICSR_RETTOBASE_Pos             11                                             /*!< SCB 
 373:D:\workspace\console800480\system\core_cm3.h **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 374:D:\workspace\console800480\system\core_cm3.h **** 
 375:D:\workspace\console800480\system\core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 376:D:\workspace\console800480\system\core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 377:D:\workspace\console800480\system\core_cm3.h **** 
 378:D:\workspace\console800480\system\core_cm3.h **** /* SCB Vector Table Offset Register Definitions */
 379:D:\workspace\console800480\system\core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7                                             /*!< SCB 
 380:D:\workspace\console800480\system\core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB 
 381:D:\workspace\console800480\system\core_cm3.h **** 
 382:D:\workspace\console800480\system\core_cm3.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 383:D:\workspace\console800480\system\core_cm3.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 384:D:\workspace\console800480\system\core_cm3.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 385:D:\workspace\console800480\system\core_cm3.h **** 
 386:D:\workspace\console800480\system\core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 387:D:\workspace\console800480\system\core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 388:D:\workspace\console800480\system\core_cm3.h **** 
 389:D:\workspace\console800480\system\core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 390:D:\workspace\console800480\system\core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 391:D:\workspace\console800480\system\core_cm3.h **** 
 392:D:\workspace\console800480\system\core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Pos              8                                             /*!< SCB 
 393:D:\workspace\console800480\system\core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 394:D:\workspace\console800480\system\core_cm3.h **** 
 395:D:\workspace\console800480\system\core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 396:D:\workspace\console800480\system\core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 397:D:\workspace\console800480\system\core_cm3.h **** 
 398:D:\workspace\console800480\system\core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 399:D:\workspace\console800480\system\core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 400:D:\workspace\console800480\system\core_cm3.h **** 
 401:D:\workspace\console800480\system\core_cm3.h **** #define SCB_AIRCR_VECTRESET_Pos             0                                             /*!< SCB 
 402:D:\workspace\console800480\system\core_cm3.h **** #define SCB_AIRCR_VECTRESET_Msk            (1UL << SCB_AIRCR_VECTRESET_Pos)               /*!< SCB 
 403:D:\workspace\console800480\system\core_cm3.h **** 
 404:D:\workspace\console800480\system\core_cm3.h **** /* SCB System Control Register Definitions */
 405:D:\workspace\console800480\system\core_cm3.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 406:D:\workspace\console800480\system\core_cm3.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 407:D:\workspace\console800480\system\core_cm3.h **** 
 408:D:\workspace\console800480\system\core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 409:D:\workspace\console800480\system\core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 410:D:\workspace\console800480\system\core_cm3.h **** 
 411:D:\workspace\console800480\system\core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 412:D:\workspace\console800480\system\core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 413:D:\workspace\console800480\system\core_cm3.h **** 
 414:D:\workspace\console800480\system\core_cm3.h **** /* SCB Configuration Control Register Definitions */
 415:D:\workspace\console800480\system\core_cm3.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 416:D:\workspace\console800480\system\core_cm3.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 417:D:\workspace\console800480\system\core_cm3.h **** 
 418:D:\workspace\console800480\system\core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Pos               8                                             /*!< SCB 
 419:D:\workspace\console800480\system\core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 420:D:\workspace\console800480\system\core_cm3.h **** 
 421:D:\workspace\console800480\system\core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Pos               4                                             /*!< SCB 
 422:D:\workspace\console800480\system\core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 423:D:\workspace\console800480\system\core_cm3.h **** 
 424:D:\workspace\console800480\system\core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 425:D:\workspace\console800480\system\core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 426:D:\workspace\console800480\system\core_cm3.h **** 
 427:D:\workspace\console800480\system\core_cm3.h **** #define SCB_CCR_USERSETMPEND_Pos            1                                             /*!< SCB 
 428:D:\workspace\console800480\system\core_cm3.h **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 429:D:\workspace\console800480\system\core_cm3.h **** 
 430:D:\workspace\console800480\system\core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0                                             /*!< SCB 
 431:D:\workspace\console800480\system\core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL << SCB_CCR_NONBASETHRDENA_Pos)            /*!< SCB 
 432:D:\workspace\console800480\system\core_cm3.h **** 
 433:D:\workspace\console800480\system\core_cm3.h **** /* SCB System Handler Control and State Register Definitions */
 434:D:\workspace\console800480\system\core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18                                             /*!< SCB 
 435:D:\workspace\console800480\system\core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 436:D:\workspace\console800480\system\core_cm3.h **** 
 437:D:\workspace\console800480\system\core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17                                             /*!< SCB 
 438:D:\workspace\console800480\system\core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 439:D:\workspace\console800480\system\core_cm3.h **** 
 440:D:\workspace\console800480\system\core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16                                             /*!< SCB 
 441:D:\workspace\console800480\system\core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 442:D:\workspace\console800480\system\core_cm3.h **** 
 443:D:\workspace\console800480\system\core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 444:D:\workspace\console800480\system\core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 445:D:\workspace\console800480\system\core_cm3.h **** 
 446:D:\workspace\console800480\system\core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14                                             /*!< SCB 
 447:D:\workspace\console800480\system\core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 448:D:\workspace\console800480\system\core_cm3.h **** 
 449:D:\workspace\console800480\system\core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13                                             /*!< SCB 
 450:D:\workspace\console800480\system\core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 451:D:\workspace\console800480\system\core_cm3.h **** 
 452:D:\workspace\console800480\system\core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12                                             /*!< SCB 
 453:D:\workspace\console800480\system\core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 454:D:\workspace\console800480\system\core_cm3.h **** 
 455:D:\workspace\console800480\system\core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11                                             /*!< SCB 
 456:D:\workspace\console800480\system\core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 457:D:\workspace\console800480\system\core_cm3.h **** 
 458:D:\workspace\console800480\system\core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Pos            10                                             /*!< SCB 
 459:D:\workspace\console800480\system\core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 460:D:\workspace\console800480\system\core_cm3.h **** 
 461:D:\workspace\console800480\system\core_cm3.h **** #define SCB_SHCSR_MONITORACT_Pos            8                                             /*!< SCB 
 462:D:\workspace\console800480\system\core_cm3.h **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 463:D:\workspace\console800480\system\core_cm3.h **** 
 464:D:\workspace\console800480\system\core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Pos             7                                             /*!< SCB 
 465:D:\workspace\console800480\system\core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 466:D:\workspace\console800480\system\core_cm3.h **** 
 467:D:\workspace\console800480\system\core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3                                             /*!< SCB 
 468:D:\workspace\console800480\system\core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 469:D:\workspace\console800480\system\core_cm3.h **** 
 470:D:\workspace\console800480\system\core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1                                             /*!< SCB 
 471:D:\workspace\console800480\system\core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 472:D:\workspace\console800480\system\core_cm3.h **** 
 473:D:\workspace\console800480\system\core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0                                             /*!< SCB 
 474:D:\workspace\console800480\system\core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL << SCB_SHCSR_MEMFAULTACT_Pos)             /*!< SCB 
 475:D:\workspace\console800480\system\core_cm3.h **** 
 476:D:\workspace\console800480\system\core_cm3.h **** /* SCB Configurable Fault Status Registers Definitions */
 477:D:\workspace\console800480\system\core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Pos            16                                             /*!< SCB 
 478:D:\workspace\console800480\system\core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 479:D:\workspace\console800480\system\core_cm3.h **** 
 480:D:\workspace\console800480\system\core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8                                             /*!< SCB 
 481:D:\workspace\console800480\system\core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 482:D:\workspace\console800480\system\core_cm3.h **** 
 483:D:\workspace\console800480\system\core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0                                             /*!< SCB 
 484:D:\workspace\console800480\system\core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL << SCB_CFSR_MEMFAULTSR_Pos)            /*!< SCB 
 485:D:\workspace\console800480\system\core_cm3.h **** 
 486:D:\workspace\console800480\system\core_cm3.h **** /* SCB Hard Fault Status Registers Definitions */
 487:D:\workspace\console800480\system\core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Pos              31                                             /*!< SCB 
 488:D:\workspace\console800480\system\core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 489:D:\workspace\console800480\system\core_cm3.h **** 
 490:D:\workspace\console800480\system\core_cm3.h **** #define SCB_HFSR_FORCED_Pos                30                                             /*!< SCB 
 491:D:\workspace\console800480\system\core_cm3.h **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 492:D:\workspace\console800480\system\core_cm3.h **** 
 493:D:\workspace\console800480\system\core_cm3.h **** #define SCB_HFSR_VECTTBL_Pos                1                                             /*!< SCB 
 494:D:\workspace\console800480\system\core_cm3.h **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 495:D:\workspace\console800480\system\core_cm3.h **** 
 496:D:\workspace\console800480\system\core_cm3.h **** /* SCB Debug Fault Status Register Definitions */
 497:D:\workspace\console800480\system\core_cm3.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 498:D:\workspace\console800480\system\core_cm3.h **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 499:D:\workspace\console800480\system\core_cm3.h **** 
 500:D:\workspace\console800480\system\core_cm3.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 501:D:\workspace\console800480\system\core_cm3.h **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 502:D:\workspace\console800480\system\core_cm3.h **** 
 503:D:\workspace\console800480\system\core_cm3.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 504:D:\workspace\console800480\system\core_cm3.h **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 505:D:\workspace\console800480\system\core_cm3.h **** 
 506:D:\workspace\console800480\system\core_cm3.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 507:D:\workspace\console800480\system\core_cm3.h **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 508:D:\workspace\console800480\system\core_cm3.h **** 
 509:D:\workspace\console800480\system\core_cm3.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 510:D:\workspace\console800480\system\core_cm3.h **** #define SCB_DFSR_HALTED_Msk                (1UL << SCB_DFSR_HALTED_Pos)                   /*!< SCB 
 511:D:\workspace\console800480\system\core_cm3.h **** 
 512:D:\workspace\console800480\system\core_cm3.h **** /*@} end of group CMSIS_SCB */
 513:D:\workspace\console800480\system\core_cm3.h **** 
 514:D:\workspace\console800480\system\core_cm3.h **** 
 515:D:\workspace\console800480\system\core_cm3.h **** /** \ingroup  CMSIS_core_register
 516:D:\workspace\console800480\system\core_cm3.h ****     \defgroup CMSIS_SCnSCB CMSIS System Control and ID Register not in the SCB
 517:D:\workspace\console800480\system\core_cm3.h ****   Type definitions for the Cortex-M System Control and ID Register not in the SCB
 518:D:\workspace\console800480\system\core_cm3.h ****   @{
 519:D:\workspace\console800480\system\core_cm3.h ****  */
 520:D:\workspace\console800480\system\core_cm3.h **** 
 521:D:\workspace\console800480\system\core_cm3.h **** /** \brief  Structure type to access the System Control and ID Register not in the SCB.
 522:D:\workspace\console800480\system\core_cm3.h ****  */
 523:D:\workspace\console800480\system\core_cm3.h **** typedef struct
 524:D:\workspace\console800480\system\core_cm3.h **** {
 525:D:\workspace\console800480\system\core_cm3.h ****        uint32_t RESERVED0[1];
 526:D:\workspace\console800480\system\core_cm3.h ****   __I  uint32_t ICTR;                    /*!< Offset: 0x004 (R/ )  Interrupt Controller Type Regist
 527:D:\workspace\console800480\system\core_cm3.h **** #if ((defined __CM3_REV) && (__CM3_REV >= 0x200))
 528:D:\workspace\console800480\system\core_cm3.h ****   __IO uint32_t ACTLR;                   /*!< Offset: 0x008 (R/W)  Auxiliary Control Register      
 529:D:\workspace\console800480\system\core_cm3.h **** #else
 530:D:\workspace\console800480\system\core_cm3.h ****        uint32_t RESERVED1[1];
 531:D:\workspace\console800480\system\core_cm3.h **** #endif
 532:D:\workspace\console800480\system\core_cm3.h **** } SCnSCB_Type;
 533:D:\workspace\console800480\system\core_cm3.h **** 
 534:D:\workspace\console800480\system\core_cm3.h **** /* Interrupt Controller Type Register Definitions */
 535:D:\workspace\console800480\system\core_cm3.h **** #define SCnSCB_ICTR_INTLINESNUM_Pos         0                                          /*!< ICTR: I
 536:D:\workspace\console800480\system\core_cm3.h **** #define SCnSCB_ICTR_INTLINESNUM_Msk        (0xFUL << SCnSCB_ICTR_INTLINESNUM_Pos)      /*!< ICTR: I
 537:D:\workspace\console800480\system\core_cm3.h **** 
 538:D:\workspace\console800480\system\core_cm3.h **** /* Auxiliary Control Register Definitions */
 539:D:\workspace\console800480\system\core_cm3.h **** 
 540:D:\workspace\console800480\system\core_cm3.h **** #define SCnSCB_ACTLR_DISFOLD_Pos            2                                          /*!< ACTLR: 
 541:D:\workspace\console800480\system\core_cm3.h **** #define SCnSCB_ACTLR_DISFOLD_Msk           (1UL << SCnSCB_ACTLR_DISFOLD_Pos)           /*!< ACTLR: 
 542:D:\workspace\console800480\system\core_cm3.h **** 
 543:D:\workspace\console800480\system\core_cm3.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Pos         1                                          /*!< ACTLR: 
 544:D:\workspace\console800480\system\core_cm3.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Msk        (1UL << SCnSCB_ACTLR_DISDEFWBUF_Pos)        /*!< ACTLR: 
 545:D:\workspace\console800480\system\core_cm3.h **** 
 546:D:\workspace\console800480\system\core_cm3.h **** #define SCnSCB_ACTLR_DISMCYCINT_Pos         0                                          /*!< ACTLR: 
 547:D:\workspace\console800480\system\core_cm3.h **** #define SCnSCB_ACTLR_DISMCYCINT_Msk        (1UL << SCnSCB_ACTLR_DISMCYCINT_Pos)        /*!< ACTLR: 
 548:D:\workspace\console800480\system\core_cm3.h **** 
 549:D:\workspace\console800480\system\core_cm3.h **** /*@} end of group CMSIS_SCnotSCB */
 550:D:\workspace\console800480\system\core_cm3.h **** 
 551:D:\workspace\console800480\system\core_cm3.h **** 
 552:D:\workspace\console800480\system\core_cm3.h **** /** \ingroup  CMSIS_core_register
 553:D:\workspace\console800480\system\core_cm3.h ****     \defgroup CMSIS_SysTick CMSIS SysTick
 554:D:\workspace\console800480\system\core_cm3.h ****   Type definitions for the Cortex-M System Timer Registers
 555:D:\workspace\console800480\system\core_cm3.h ****   @{
 556:D:\workspace\console800480\system\core_cm3.h ****  */
 557:D:\workspace\console800480\system\core_cm3.h **** 
 558:D:\workspace\console800480\system\core_cm3.h **** /** \brief  Structure type to access the System Timer (SysTick).
 559:D:\workspace\console800480\system\core_cm3.h ****  */
 560:D:\workspace\console800480\system\core_cm3.h **** typedef struct
 561:D:\workspace\console800480\system\core_cm3.h **** {
 562:D:\workspace\console800480\system\core_cm3.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 563:D:\workspace\console800480\system\core_cm3.h ****   __IO uint32_t LOAD;                    /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register   
 564:D:\workspace\console800480\system\core_cm3.h ****   __IO uint32_t VAL;                     /*!< Offset: 0x008 (R/W)  SysTick Current Value Register  
 565:D:\workspace\console800480\system\core_cm3.h ****   __I  uint32_t CALIB;                   /*!< Offset: 0x00C (R/ )  SysTick Calibration Register    
 566:D:\workspace\console800480\system\core_cm3.h **** } SysTick_Type;
 567:D:\workspace\console800480\system\core_cm3.h **** 
 568:D:\workspace\console800480\system\core_cm3.h **** /* SysTick Control / Status Register Definitions */
 569:D:\workspace\console800480\system\core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 570:D:\workspace\console800480\system\core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 571:D:\workspace\console800480\system\core_cm3.h **** 
 572:D:\workspace\console800480\system\core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 573:D:\workspace\console800480\system\core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 574:D:\workspace\console800480\system\core_cm3.h **** 
 575:D:\workspace\console800480\system\core_cm3.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 576:D:\workspace\console800480\system\core_cm3.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 577:D:\workspace\console800480\system\core_cm3.h **** 
 578:D:\workspace\console800480\system\core_cm3.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 579:D:\workspace\console800480\system\core_cm3.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 580:D:\workspace\console800480\system\core_cm3.h **** 
 581:D:\workspace\console800480\system\core_cm3.h **** /* SysTick Reload Register Definitions */
 582:D:\workspace\console800480\system\core_cm3.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 583:D:\workspace\console800480\system\core_cm3.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 584:D:\workspace\console800480\system\core_cm3.h **** 
 585:D:\workspace\console800480\system\core_cm3.h **** /* SysTick Current Register Definitions */
 586:D:\workspace\console800480\system\core_cm3.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 587:D:\workspace\console800480\system\core_cm3.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 588:D:\workspace\console800480\system\core_cm3.h **** 
 589:D:\workspace\console800480\system\core_cm3.h **** /* SysTick Calibration Register Definitions */
 590:D:\workspace\console800480\system\core_cm3.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 591:D:\workspace\console800480\system\core_cm3.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 592:D:\workspace\console800480\system\core_cm3.h **** 
 593:D:\workspace\console800480\system\core_cm3.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 594:D:\workspace\console800480\system\core_cm3.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 595:D:\workspace\console800480\system\core_cm3.h **** 
 596:D:\workspace\console800480\system\core_cm3.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 597:D:\workspace\console800480\system\core_cm3.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 598:D:\workspace\console800480\system\core_cm3.h **** 
 599:D:\workspace\console800480\system\core_cm3.h **** /*@} end of group CMSIS_SysTick */
 600:D:\workspace\console800480\system\core_cm3.h **** 
 601:D:\workspace\console800480\system\core_cm3.h **** 
 602:D:\workspace\console800480\system\core_cm3.h **** /** \ingroup  CMSIS_core_register
 603:D:\workspace\console800480\system\core_cm3.h ****     \defgroup CMSIS_ITM CMSIS ITM
 604:D:\workspace\console800480\system\core_cm3.h ****   Type definitions for the Cortex-M Instrumentation Trace Macrocell (ITM)
 605:D:\workspace\console800480\system\core_cm3.h ****   @{
 606:D:\workspace\console800480\system\core_cm3.h ****  */
 607:D:\workspace\console800480\system\core_cm3.h **** 
 608:D:\workspace\console800480\system\core_cm3.h **** /** \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
 609:D:\workspace\console800480\system\core_cm3.h ****  */
 610:D:\workspace\console800480\system\core_cm3.h **** typedef struct
 611:D:\workspace\console800480\system\core_cm3.h **** {
 612:D:\workspace\console800480\system\core_cm3.h ****   __O  union
 613:D:\workspace\console800480\system\core_cm3.h ****   {
 614:D:\workspace\console800480\system\core_cm3.h ****     __O  uint8_t    u8;                  /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit         
 615:D:\workspace\console800480\system\core_cm3.h ****     __O  uint16_t   u16;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit        
 616:D:\workspace\console800480\system\core_cm3.h ****     __O  uint32_t   u32;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit        
 617:D:\workspace\console800480\system\core_cm3.h ****   }  PORT [32];                          /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers     
 618:D:\workspace\console800480\system\core_cm3.h ****        uint32_t RESERVED0[864];
 619:D:\workspace\console800480\system\core_cm3.h ****   __IO uint32_t TER;                     /*!< Offset: 0xE00 (R/W)  ITM Trace Enable Register       
 620:D:\workspace\console800480\system\core_cm3.h ****        uint32_t RESERVED1[15];
 621:D:\workspace\console800480\system\core_cm3.h ****   __IO uint32_t TPR;                     /*!< Offset: 0xE40 (R/W)  ITM Trace Privilege Register    
 622:D:\workspace\console800480\system\core_cm3.h ****        uint32_t RESERVED2[15];
 623:D:\workspace\console800480\system\core_cm3.h ****   __IO uint32_t TCR;                     /*!< Offset: 0xE80 (R/W)  ITM Trace Control Register      
 624:D:\workspace\console800480\system\core_cm3.h **** } ITM_Type;
 625:D:\workspace\console800480\system\core_cm3.h **** 
 626:D:\workspace\console800480\system\core_cm3.h **** /* ITM Trace Privilege Register Definitions */
 627:D:\workspace\console800480\system\core_cm3.h **** #define ITM_TPR_PRIVMASK_Pos                0                                          /*!< ITM TPR
 628:D:\workspace\console800480\system\core_cm3.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFUL << ITM_TPR_PRIVMASK_Pos)             /*!< ITM TPR
 629:D:\workspace\console800480\system\core_cm3.h **** 
 630:D:\workspace\console800480\system\core_cm3.h **** /* ITM Trace Control Register Definitions */
 631:D:\workspace\console800480\system\core_cm3.h **** #define ITM_TCR_BUSY_Pos                   23                                          /*!< ITM TCR
 632:D:\workspace\console800480\system\core_cm3.h **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                   /*!< ITM TCR
 633:D:\workspace\console800480\system\core_cm3.h **** 
 634:D:\workspace\console800480\system\core_cm3.h **** #define ITM_TCR_TraceBusID_Pos             16                                          /*!< ITM TCR
 635:D:\workspace\console800480\system\core_cm3.h **** #define ITM_TCR_TraceBusID_Msk             (0x7FUL << ITM_TCR_TraceBusID_Pos)          /*!< ITM TCR
 636:D:\workspace\console800480\system\core_cm3.h **** 
 637:D:\workspace\console800480\system\core_cm3.h **** #define ITM_TCR_GTSFREQ_Pos                10                                          /*!< ITM TCR
 638:D:\workspace\console800480\system\core_cm3.h **** #define ITM_TCR_GTSFREQ_Msk                (3UL << ITM_TCR_GTSFREQ_Pos)                /*!< ITM TCR
 639:D:\workspace\console800480\system\core_cm3.h **** 
 640:D:\workspace\console800480\system\core_cm3.h **** #define ITM_TCR_TSPrescale_Pos              8                                          /*!< ITM TCR
 641:D:\workspace\console800480\system\core_cm3.h **** #define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)             /*!< ITM TCR
 642:D:\workspace\console800480\system\core_cm3.h **** 
 643:D:\workspace\console800480\system\core_cm3.h **** #define ITM_TCR_SWOENA_Pos                  4                                          /*!< ITM TCR
 644:D:\workspace\console800480\system\core_cm3.h **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                 /*!< ITM TCR
 645:D:\workspace\console800480\system\core_cm3.h **** 
 646:D:\workspace\console800480\system\core_cm3.h **** #define ITM_TCR_TXENA_Pos                   3                                          /*!< ITM TCR
 647:D:\workspace\console800480\system\core_cm3.h **** #define ITM_TCR_TXENA_Msk                  (1UL << ITM_TCR_TXENA_Pos)                  /*!< ITM TCR
 648:D:\workspace\console800480\system\core_cm3.h **** 
 649:D:\workspace\console800480\system\core_cm3.h **** #define ITM_TCR_SYNCENA_Pos                 2                                          /*!< ITM TCR
 650:D:\workspace\console800480\system\core_cm3.h **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                /*!< ITM TCR
 651:D:\workspace\console800480\system\core_cm3.h **** 
 652:D:\workspace\console800480\system\core_cm3.h **** #define ITM_TCR_TSENA_Pos                   1                                          /*!< ITM TCR
 653:D:\workspace\console800480\system\core_cm3.h **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                  /*!< ITM TCR
 654:D:\workspace\console800480\system\core_cm3.h **** 
 655:D:\workspace\console800480\system\core_cm3.h **** #define ITM_TCR_ITMENA_Pos                  0                                          /*!< ITM TCR
 656:D:\workspace\console800480\system\core_cm3.h **** #define ITM_TCR_ITMENA_Msk                 (1UL << ITM_TCR_ITMENA_Pos)                 /*!< ITM TCR
 657:D:\workspace\console800480\system\core_cm3.h **** 
 658:D:\workspace\console800480\system\core_cm3.h **** /*@}*/ /* end of group CMSIS_ITM */
 659:D:\workspace\console800480\system\core_cm3.h **** 
 660:D:\workspace\console800480\system\core_cm3.h **** 
 661:D:\workspace\console800480\system\core_cm3.h **** #if (__MPU_PRESENT == 1)
 662:D:\workspace\console800480\system\core_cm3.h **** /** \ingroup  CMSIS_core_register
 663:D:\workspace\console800480\system\core_cm3.h ****     \defgroup CMSIS_MPU CMSIS MPU
 664:D:\workspace\console800480\system\core_cm3.h ****   Type definitions for the Cortex-M Memory Protection Unit (MPU)
 665:D:\workspace\console800480\system\core_cm3.h ****   @{
 666:D:\workspace\console800480\system\core_cm3.h ****  */
 667:D:\workspace\console800480\system\core_cm3.h **** 
 668:D:\workspace\console800480\system\core_cm3.h **** /** \brief  Structure type to access the Memory Protection Unit (MPU).
 669:D:\workspace\console800480\system\core_cm3.h ****  */
 670:D:\workspace\console800480\system\core_cm3.h **** typedef struct
 671:D:\workspace\console800480\system\core_cm3.h **** {
 672:D:\workspace\console800480\system\core_cm3.h ****   __I  uint32_t TYPE;                    /*!< Offset: 0x000 (R/ )  MPU Type Register               
 673:D:\workspace\console800480\system\core_cm3.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x004 (R/W)  MPU Control Register            
 674:D:\workspace\console800480\system\core_cm3.h ****   __IO uint32_t RNR;                     /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register      
 675:D:\workspace\console800480\system\core_cm3.h ****   __IO uint32_t RBAR;                    /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
 676:D:\workspace\console800480\system\core_cm3.h ****   __IO uint32_t RASR;                    /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
 677:D:\workspace\console800480\system\core_cm3.h ****   __IO uint32_t RBAR_A1;                 /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
 678:D:\workspace\console800480\system\core_cm3.h ****   __IO uint32_t RASR_A1;                 /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
 679:D:\workspace\console800480\system\core_cm3.h ****   __IO uint32_t RBAR_A2;                 /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
 680:D:\workspace\console800480\system\core_cm3.h ****   __IO uint32_t RASR_A2;                 /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
 681:D:\workspace\console800480\system\core_cm3.h ****   __IO uint32_t RBAR_A3;                 /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
 682:D:\workspace\console800480\system\core_cm3.h ****   __IO uint32_t RASR_A3;                 /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
 683:D:\workspace\console800480\system\core_cm3.h **** } MPU_Type;
 684:D:\workspace\console800480\system\core_cm3.h **** 
 685:D:\workspace\console800480\system\core_cm3.h **** /* MPU Type Register */
 686:D:\workspace\console800480\system\core_cm3.h **** #define MPU_TYPE_IREGION_Pos               16                                             /*!< MPU 
 687:D:\workspace\console800480\system\core_cm3.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
 688:D:\workspace\console800480\system\core_cm3.h **** 
 689:D:\workspace\console800480\system\core_cm3.h **** #define MPU_TYPE_DREGION_Pos                8                                             /*!< MPU 
 690:D:\workspace\console800480\system\core_cm3.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
 691:D:\workspace\console800480\system\core_cm3.h **** 
 692:D:\workspace\console800480\system\core_cm3.h **** #define MPU_TYPE_SEPARATE_Pos               0                                             /*!< MPU 
 693:D:\workspace\console800480\system\core_cm3.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL << MPU_TYPE_SEPARATE_Pos)                 /*!< MPU 
 694:D:\workspace\console800480\system\core_cm3.h **** 
 695:D:\workspace\console800480\system\core_cm3.h **** /* MPU Control Register */
 696:D:\workspace\console800480\system\core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2                                             /*!< MPU 
 697:D:\workspace\console800480\system\core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
 698:D:\workspace\console800480\system\core_cm3.h **** 
 699:D:\workspace\console800480\system\core_cm3.h **** #define MPU_CTRL_HFNMIENA_Pos               1                                             /*!< MPU 
 700:D:\workspace\console800480\system\core_cm3.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
 701:D:\workspace\console800480\system\core_cm3.h **** 
 702:D:\workspace\console800480\system\core_cm3.h **** #define MPU_CTRL_ENABLE_Pos                 0                                             /*!< MPU 
 703:D:\workspace\console800480\system\core_cm3.h **** #define MPU_CTRL_ENABLE_Msk                (1UL << MPU_CTRL_ENABLE_Pos)                   /*!< MPU 
 704:D:\workspace\console800480\system\core_cm3.h **** 
 705:D:\workspace\console800480\system\core_cm3.h **** /* MPU Region Number Register */
 706:D:\workspace\console800480\system\core_cm3.h **** #define MPU_RNR_REGION_Pos                  0                                             /*!< MPU 
 707:D:\workspace\console800480\system\core_cm3.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL << MPU_RNR_REGION_Pos)                 /*!< MPU 
 708:D:\workspace\console800480\system\core_cm3.h **** 
 709:D:\workspace\console800480\system\core_cm3.h **** /* MPU Region Base Address Register */
 710:D:\workspace\console800480\system\core_cm3.h **** #define MPU_RBAR_ADDR_Pos                   5                                             /*!< MPU 
 711:D:\workspace\console800480\system\core_cm3.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
 712:D:\workspace\console800480\system\core_cm3.h **** 
 713:D:\workspace\console800480\system\core_cm3.h **** #define MPU_RBAR_VALID_Pos                  4                                             /*!< MPU 
 714:D:\workspace\console800480\system\core_cm3.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
 715:D:\workspace\console800480\system\core_cm3.h **** 
 716:D:\workspace\console800480\system\core_cm3.h **** #define MPU_RBAR_REGION_Pos                 0                                             /*!< MPU 
 717:D:\workspace\console800480\system\core_cm3.h **** #define MPU_RBAR_REGION_Msk                (0xFUL << MPU_RBAR_REGION_Pos)                 /*!< MPU 
 718:D:\workspace\console800480\system\core_cm3.h **** 
 719:D:\workspace\console800480\system\core_cm3.h **** /* MPU Region Attribute and Size Register */
 720:D:\workspace\console800480\system\core_cm3.h **** #define MPU_RASR_ATTRS_Pos                 16                                             /*!< MPU 
 721:D:\workspace\console800480\system\core_cm3.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
 722:D:\workspace\console800480\system\core_cm3.h **** 
 723:D:\workspace\console800480\system\core_cm3.h **** #define MPU_RASR_SRD_Pos                    8                                             /*!< MPU 
 724:D:\workspace\console800480\system\core_cm3.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
 725:D:\workspace\console800480\system\core_cm3.h **** 
 726:D:\workspace\console800480\system\core_cm3.h **** #define MPU_RASR_SIZE_Pos                   1                                             /*!< MPU 
 727:D:\workspace\console800480\system\core_cm3.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
 728:D:\workspace\console800480\system\core_cm3.h **** 
 729:D:\workspace\console800480\system\core_cm3.h **** #define MPU_RASR_ENABLE_Pos                 0                                             /*!< MPU 
 730:D:\workspace\console800480\system\core_cm3.h **** #define MPU_RASR_ENABLE_Msk                (1UL << MPU_RASR_ENABLE_Pos)                   /*!< MPU 
 731:D:\workspace\console800480\system\core_cm3.h **** 
 732:D:\workspace\console800480\system\core_cm3.h **** /*@} end of group CMSIS_MPU */
 733:D:\workspace\console800480\system\core_cm3.h **** #endif
 734:D:\workspace\console800480\system\core_cm3.h **** 
 735:D:\workspace\console800480\system\core_cm3.h **** 
 736:D:\workspace\console800480\system\core_cm3.h **** /** \ingroup  CMSIS_core_register
 737:D:\workspace\console800480\system\core_cm3.h ****     \defgroup CMSIS_CoreDebug CMSIS Core Debug
 738:D:\workspace\console800480\system\core_cm3.h ****   Type definitions for the Cortex-M Core Debug Registers
 739:D:\workspace\console800480\system\core_cm3.h ****   @{
 740:D:\workspace\console800480\system\core_cm3.h ****  */
 741:D:\workspace\console800480\system\core_cm3.h **** 
 742:D:\workspace\console800480\system\core_cm3.h **** /** \brief  Structure type to access the Core Debug Register (CoreDebug).
 743:D:\workspace\console800480\system\core_cm3.h ****  */
 744:D:\workspace\console800480\system\core_cm3.h **** typedef struct
 745:D:\workspace\console800480\system\core_cm3.h **** {
 746:D:\workspace\console800480\system\core_cm3.h ****   __IO uint32_t DHCSR;                   /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
 747:D:\workspace\console800480\system\core_cm3.h ****   __O  uint32_t DCRSR;                   /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
 748:D:\workspace\console800480\system\core_cm3.h ****   __IO uint32_t DCRDR;                   /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
 749:D:\workspace\console800480\system\core_cm3.h ****   __IO uint32_t DEMCR;                   /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
 750:D:\workspace\console800480\system\core_cm3.h **** } CoreDebug_Type;
 751:D:\workspace\console800480\system\core_cm3.h **** 
 752:D:\workspace\console800480\system\core_cm3.h **** /* Debug Halting Control and Status Register */
 753:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
 754:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
 755:D:\workspace\console800480\system\core_cm3.h **** 
 756:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
 757:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
 758:D:\workspace\console800480\system\core_cm3.h **** 
 759:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
 760:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
 761:D:\workspace\console800480\system\core_cm3.h **** 
 762:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
 763:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
 764:D:\workspace\console800480\system\core_cm3.h **** 
 765:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
 766:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
 767:D:\workspace\console800480\system\core_cm3.h **** 
 768:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
 769:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
 770:D:\workspace\console800480\system\core_cm3.h **** 
 771:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
 772:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
 773:D:\workspace\console800480\system\core_cm3.h **** 
 774:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5                                             /*!< Core
 775:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
 776:D:\workspace\console800480\system\core_cm3.h **** 
 777:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
 778:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
 779:D:\workspace\console800480\system\core_cm3.h **** 
 780:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
 781:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
 782:D:\workspace\console800480\system\core_cm3.h **** 
 783:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
 784:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
 785:D:\workspace\console800480\system\core_cm3.h **** 
 786:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
 787:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< Core
 788:D:\workspace\console800480\system\core_cm3.h **** 
 789:D:\workspace\console800480\system\core_cm3.h **** /* Debug Core Register Selector Register */
 790:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
 791:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
 792:D:\workspace\console800480\system\core_cm3.h **** 
 793:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
 794:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL << CoreDebug_DCRSR_REGSEL_Pos)         /*!< Core
 795:D:\workspace\console800480\system\core_cm3.h **** 
 796:D:\workspace\console800480\system\core_cm3.h **** /* Debug Exception and Monitor Control Register */
 797:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24                                             /*!< Core
 798:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
 799:D:\workspace\console800480\system\core_cm3.h **** 
 800:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19                                             /*!< Core
 801:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
 802:D:\workspace\console800480\system\core_cm3.h **** 
 803:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18                                             /*!< Core
 804:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
 805:D:\workspace\console800480\system\core_cm3.h **** 
 806:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17                                             /*!< Core
 807:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
 808:D:\workspace\console800480\system\core_cm3.h **** 
 809:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16                                             /*!< Core
 810:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
 811:D:\workspace\console800480\system\core_cm3.h **** 
 812:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
 813:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
 814:D:\workspace\console800480\system\core_cm3.h **** 
 815:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9                                             /*!< Core
 816:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
 817:D:\workspace\console800480\system\core_cm3.h **** 
 818:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8                                             /*!< Core
 819:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
 820:D:\workspace\console800480\system\core_cm3.h **** 
 821:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7                                             /*!< Core
 822:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
 823:D:\workspace\console800480\system\core_cm3.h **** 
 824:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6                                             /*!< Core
 825:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
 826:D:\workspace\console800480\system\core_cm3.h **** 
 827:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5                                             /*!< Core
 828:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
 829:D:\workspace\console800480\system\core_cm3.h **** 
 830:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4                                             /*!< Core
 831:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
 832:D:\workspace\console800480\system\core_cm3.h **** 
 833:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
 834:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< Core
 835:D:\workspace\console800480\system\core_cm3.h **** 
 836:D:\workspace\console800480\system\core_cm3.h **** /*@} end of group CMSIS_CoreDebug */
 837:D:\workspace\console800480\system\core_cm3.h **** 
 838:D:\workspace\console800480\system\core_cm3.h **** 
 839:D:\workspace\console800480\system\core_cm3.h **** /** \ingroup  CMSIS_core_register
 840:D:\workspace\console800480\system\core_cm3.h ****   @{
 841:D:\workspace\console800480\system\core_cm3.h ****  */
 842:D:\workspace\console800480\system\core_cm3.h **** 
 843:D:\workspace\console800480\system\core_cm3.h **** /* Memory mapping of Cortex-M3 Hardware */
 844:D:\workspace\console800480\system\core_cm3.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 845:D:\workspace\console800480\system\core_cm3.h **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address        
 846:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
 847:D:\workspace\console800480\system\core_cm3.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address    
 848:D:\workspace\console800480\system\core_cm3.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address       
 849:D:\workspace\console800480\system\core_cm3.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 850:D:\workspace\console800480\system\core_cm3.h **** 
 851:D:\workspace\console800480\system\core_cm3.h **** #define SCnSCB              ((SCnSCB_Type    *)     SCS_BASE      )   /*!< System control Register 
 852:D:\workspace\console800480\system\core_cm3.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 853:D:\workspace\console800480\system\core_cm3.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 854:D:\workspace\console800480\system\core_cm3.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 855:D:\workspace\console800480\system\core_cm3.h **** #define ITM                 ((ITM_Type       *)     ITM_BASE      )   /*!< ITM configuration struct
 856:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
 857:D:\workspace\console800480\system\core_cm3.h **** 
 858:D:\workspace\console800480\system\core_cm3.h **** #if (__MPU_PRESENT == 1)
 859:D:\workspace\console800480\system\core_cm3.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit  
 860:D:\workspace\console800480\system\core_cm3.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit  
 861:D:\workspace\console800480\system\core_cm3.h **** #endif
 862:D:\workspace\console800480\system\core_cm3.h **** 
 863:D:\workspace\console800480\system\core_cm3.h **** /*@} */
 864:D:\workspace\console800480\system\core_cm3.h **** 
 865:D:\workspace\console800480\system\core_cm3.h **** 
 866:D:\workspace\console800480\system\core_cm3.h **** 
 867:D:\workspace\console800480\system\core_cm3.h **** /*******************************************************************************
 868:D:\workspace\console800480\system\core_cm3.h ****  *                Hardware Abstraction Layer
 869:D:\workspace\console800480\system\core_cm3.h ****  ******************************************************************************/
 870:D:\workspace\console800480\system\core_cm3.h **** /** \defgroup CMSIS_Core_FunctionInterface CMSIS Core Function Interface
 871:D:\workspace\console800480\system\core_cm3.h ****   Core Function Interface contains:
 872:D:\workspace\console800480\system\core_cm3.h ****   - Core NVIC Functions
 873:D:\workspace\console800480\system\core_cm3.h ****   - Core SysTick Functions
 874:D:\workspace\console800480\system\core_cm3.h ****   - Core Debug Functions
 875:D:\workspace\console800480\system\core_cm3.h ****   - Core Register Access Functions
 876:D:\workspace\console800480\system\core_cm3.h **** */
 877:D:\workspace\console800480\system\core_cm3.h **** 
 878:D:\workspace\console800480\system\core_cm3.h **** 
 879:D:\workspace\console800480\system\core_cm3.h **** 
 880:D:\workspace\console800480\system\core_cm3.h **** /* ##########################   NVIC functions  #################################### */
 881:D:\workspace\console800480\system\core_cm3.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 882:D:\workspace\console800480\system\core_cm3.h ****     \defgroup CMSIS_Core_NVICFunctions CMSIS Core NVIC Functions
 883:D:\workspace\console800480\system\core_cm3.h ****   @{
 884:D:\workspace\console800480\system\core_cm3.h ****  */
 885:D:\workspace\console800480\system\core_cm3.h **** 
 886:D:\workspace\console800480\system\core_cm3.h **** /** \brief  Set Priority Grouping
 887:D:\workspace\console800480\system\core_cm3.h **** 
 888:D:\workspace\console800480\system\core_cm3.h ****   This function sets the priority grouping field using the required unlock sequence.
 889:D:\workspace\console800480\system\core_cm3.h ****   The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
 890:D:\workspace\console800480\system\core_cm3.h ****   Only values from 0..7 are used.
 891:D:\workspace\console800480\system\core_cm3.h ****   In case of a conflict between priority grouping and available
 892:D:\workspace\console800480\system\core_cm3.h ****   priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
 893:D:\workspace\console800480\system\core_cm3.h **** 
 894:D:\workspace\console800480\system\core_cm3.h ****     \param [in]      PriorityGroup  Priority grouping field
 895:D:\workspace\console800480\system\core_cm3.h ****  */
 896:D:\workspace\console800480\system\core_cm3.h **** static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
 897:D:\workspace\console800480\system\core_cm3.h **** {
  25              		.loc 1 897 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 16
  28              		@ frame_needed = 1, uses_anonymous_args = 0
  29              		@ link register save eliminated.
  30 0000 80B4     		push	{r7}
  31              		.cfi_def_cfa_offset 4
  32              		.cfi_offset 7, -4
  33 0002 85B0     		sub	sp, sp, #20
  34              		.cfi_def_cfa_offset 24
  35 0004 00AF     		add	r7, sp, #0
  36              		.cfi_def_cfa_register 7
  37 0006 7860     		str	r0, [r7, #4]
 898:D:\workspace\console800480\system\core_cm3.h ****   uint32_t reg_value;
 899:D:\workspace\console800480\system\core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 a
  38              		.loc 1 899 0
  39 0008 7B68     		ldr	r3, [r7, #4]
  40 000a 03F00703 		and	r3, r3, #7
  41 000e FB60     		str	r3, [r7, #12]
 900:D:\workspace\console800480\system\core_cm3.h **** 
 901:D:\workspace\console800480\system\core_cm3.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
  42              		.loc 1 901 0
  43 0010 4FF46D43 		mov	r3, #60672
  44 0014 CEF20003 		movt	r3, 57344
  45 0018 DB68     		ldr	r3, [r3, #12]
  46 001a BB60     		str	r3, [r7, #8]
 902:D:\workspace\console800480\system\core_cm3.h ****   reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to chan
  47              		.loc 1 902 0
  48 001c BA68     		ldr	r2, [r7, #8]
  49 001e 4FF6FF03 		movw	r3, #63743
  50 0022 1340     		ands	r3, r3, r2
  51 0024 BB60     		str	r3, [r7, #8]
 903:D:\workspace\console800480\system\core_cm3.h ****   reg_value  =  (reg_value                                 |
 904:D:\workspace\console800480\system\core_cm3.h ****                 ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
 905:D:\workspace\console800480\system\core_cm3.h ****                 (PriorityGroupTmp << 8));                                     /* Insert write key a
  52              		.loc 1 905 0
  53 0026 FB68     		ldr	r3, [r7, #12]
  54 0028 1A02     		lsls	r2, r3, #8
 904:D:\workspace\console800480\system\core_cm3.h ****                 (PriorityGroupTmp << 8));                                     /* Insert write key a
  55              		.loc 1 904 0
  56 002a BB68     		ldr	r3, [r7, #8]
  57 002c 1343     		orrs	r3, r3, r2
 903:D:\workspace\console800480\system\core_cm3.h ****   reg_value  =  (reg_value                                 |
  58              		.loc 1 903 0
  59 002e 43F0BF63 		orr	r3, r3, #100139008
  60 0032 43F40033 		orr	r3, r3, #131072
  61 0036 BB60     		str	r3, [r7, #8]
 906:D:\workspace\console800480\system\core_cm3.h ****   SCB->AIRCR =  reg_value;
  62              		.loc 1 906 0
  63 0038 4FF46D43 		mov	r3, #60672
  64 003c CEF20003 		movt	r3, 57344
  65 0040 BA68     		ldr	r2, [r7, #8]
  66 0042 DA60     		str	r2, [r3, #12]
 907:D:\workspace\console800480\system\core_cm3.h **** }
  67              		.loc 1 907 0
  68 0044 1437     		adds	r7, r7, #20
  69 0046 BD46     		mov	sp, r7
  70              		@ sp needed
  71 0048 5DF8047B 		ldr	r7, [sp], #4
  72 004c 7047     		bx	lr
  73              		.cfi_endproc
  74              	.LFE38:
  76 004e 00BF     		.align	2
  77              		.thumb
  78              		.thumb_func
  80              	NVIC_GetPriorityGrouping:
  81              	.LFB39:
 908:D:\workspace\console800480\system\core_cm3.h **** 
 909:D:\workspace\console800480\system\core_cm3.h **** 
 910:D:\workspace\console800480\system\core_cm3.h **** /** \brief  Get Priority Grouping
 911:D:\workspace\console800480\system\core_cm3.h **** 
 912:D:\workspace\console800480\system\core_cm3.h ****   This function gets the priority grouping from NVIC Interrupt Controller.
 913:D:\workspace\console800480\system\core_cm3.h ****   Priority grouping is SCB->AIRCR [10:8] PRIGROUP field.
 914:D:\workspace\console800480\system\core_cm3.h **** 
 915:D:\workspace\console800480\system\core_cm3.h ****     \return                Priority grouping field
 916:D:\workspace\console800480\system\core_cm3.h ****  */
 917:D:\workspace\console800480\system\core_cm3.h **** static __INLINE uint32_t NVIC_GetPriorityGrouping(void)
 918:D:\workspace\console800480\system\core_cm3.h **** {
  82              		.loc 1 918 0
  83              		.cfi_startproc
  84              		@ args = 0, pretend = 0, frame = 0
  85              		@ frame_needed = 1, uses_anonymous_args = 0
  86              		@ link register save eliminated.
  87 0050 80B4     		push	{r7}
  88              		.cfi_def_cfa_offset 4
  89              		.cfi_offset 7, -4
  90 0052 00AF     		add	r7, sp, #0
  91              		.cfi_def_cfa_register 7
 919:D:\workspace\console800480\system\core_cm3.h ****   return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grou
  92              		.loc 1 919 0
  93 0054 4FF46D43 		mov	r3, #60672
  94 0058 CEF20003 		movt	r3, 57344
  95 005c DB68     		ldr	r3, [r3, #12]
  96 005e 03F4E063 		and	r3, r3, #1792
  97 0062 1B0A     		lsrs	r3, r3, #8
 920:D:\workspace\console800480\system\core_cm3.h **** }
  98              		.loc 1 920 0
  99 0064 1846     		mov	r0, r3
 100 0066 BD46     		mov	sp, r7
 101              		@ sp needed
 102 0068 5DF8047B 		ldr	r7, [sp], #4
 103 006c 7047     		bx	lr
 104              		.cfi_endproc
 105              	.LFE39:
 107 006e 00BF     		.align	2
 108              		.thumb
 109              		.thumb_func
 111              	NVIC_EnableIRQ:
 112              	.LFB40:
 921:D:\workspace\console800480\system\core_cm3.h **** 
 922:D:\workspace\console800480\system\core_cm3.h **** 
 923:D:\workspace\console800480\system\core_cm3.h **** /** \brief  Enable External Interrupt
 924:D:\workspace\console800480\system\core_cm3.h **** 
 925:D:\workspace\console800480\system\core_cm3.h ****     This function enables a device specific interrupt in the NVIC interrupt controller.
 926:D:\workspace\console800480\system\core_cm3.h ****     The interrupt number cannot be a negative value.
 927:D:\workspace\console800480\system\core_cm3.h **** 
 928:D:\workspace\console800480\system\core_cm3.h ****     \param [in]      IRQn  Number of the external interrupt to enable
 929:D:\workspace\console800480\system\core_cm3.h ****  */
 930:D:\workspace\console800480\system\core_cm3.h **** static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
 931:D:\workspace\console800480\system\core_cm3.h **** {
 113              		.loc 1 931 0
 114              		.cfi_startproc
 115              		@ args = 0, pretend = 0, frame = 8
 116              		@ frame_needed = 1, uses_anonymous_args = 0
 117              		@ link register save eliminated.
 118 0070 80B4     		push	{r7}
 119              		.cfi_def_cfa_offset 4
 120              		.cfi_offset 7, -4
 121 0072 83B0     		sub	sp, sp, #12
 122              		.cfi_def_cfa_offset 16
 123 0074 00AF     		add	r7, sp, #0
 124              		.cfi_def_cfa_register 7
 125 0076 0346     		mov	r3, r0
 126 0078 FB71     		strb	r3, [r7, #7]
 932:D:\workspace\console800480\system\core_cm3.h ****   NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 127              		.loc 1 932 0
 128 007a 4FF46143 		mov	r3, #57600
 129 007e CEF20003 		movt	r3, 57344
 130 0082 97F90720 		ldrsb	r2, [r7, #7]
 131 0086 5209     		lsrs	r2, r2, #5
 132 0088 F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 133 008a 01F01F01 		and	r1, r1, #31
 134 008e 0120     		movs	r0, #1
 135 0090 00FA01F1 		lsl	r1, r0, r1
 136 0094 43F82210 		str	r1, [r3, r2, lsl #2]
 933:D:\workspace\console800480\system\core_cm3.h **** }
 137              		.loc 1 933 0
 138 0098 0C37     		adds	r7, r7, #12
 139 009a BD46     		mov	sp, r7
 140              		@ sp needed
 141 009c 5DF8047B 		ldr	r7, [sp], #4
 142 00a0 7047     		bx	lr
 143              		.cfi_endproc
 144              	.LFE40:
 146 00a2 00BF     		.align	2
 147              		.thumb
 148              		.thumb_func
 150              	NVIC_DisableIRQ:
 151              	.LFB41:
 934:D:\workspace\console800480\system\core_cm3.h **** 
 935:D:\workspace\console800480\system\core_cm3.h **** 
 936:D:\workspace\console800480\system\core_cm3.h **** /** \brief  Disable External Interrupt
 937:D:\workspace\console800480\system\core_cm3.h **** 
 938:D:\workspace\console800480\system\core_cm3.h ****     This function disables a device specific interrupt in the NVIC interrupt controller.
 939:D:\workspace\console800480\system\core_cm3.h ****     The interrupt number cannot be a negative value.
 940:D:\workspace\console800480\system\core_cm3.h **** 
 941:D:\workspace\console800480\system\core_cm3.h ****     \param [in]      IRQn  Number of the external interrupt to disable
 942:D:\workspace\console800480\system\core_cm3.h ****  */
 943:D:\workspace\console800480\system\core_cm3.h **** static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
 944:D:\workspace\console800480\system\core_cm3.h **** {
 152              		.loc 1 944 0
 153              		.cfi_startproc
 154              		@ args = 0, pretend = 0, frame = 8
 155              		@ frame_needed = 1, uses_anonymous_args = 0
 156              		@ link register save eliminated.
 157 00a4 80B4     		push	{r7}
 158              		.cfi_def_cfa_offset 4
 159              		.cfi_offset 7, -4
 160 00a6 83B0     		sub	sp, sp, #12
 161              		.cfi_def_cfa_offset 16
 162 00a8 00AF     		add	r7, sp, #0
 163              		.cfi_def_cfa_register 7
 164 00aa 0346     		mov	r3, r0
 165 00ac FB71     		strb	r3, [r7, #7]
 945:D:\workspace\console800480\system\core_cm3.h ****   NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 166              		.loc 1 945 0
 167 00ae 4FF46143 		mov	r3, #57600
 168 00b2 CEF20003 		movt	r3, 57344
 169 00b6 97F90720 		ldrsb	r2, [r7, #7]
 170 00ba 5209     		lsrs	r2, r2, #5
 171 00bc F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 172 00be 01F01F01 		and	r1, r1, #31
 173 00c2 0120     		movs	r0, #1
 174 00c4 00FA01F1 		lsl	r1, r0, r1
 175 00c8 2032     		adds	r2, r2, #32
 176 00ca 43F82210 		str	r1, [r3, r2, lsl #2]
 946:D:\workspace\console800480\system\core_cm3.h **** }
 177              		.loc 1 946 0
 178 00ce 0C37     		adds	r7, r7, #12
 179 00d0 BD46     		mov	sp, r7
 180              		@ sp needed
 181 00d2 5DF8047B 		ldr	r7, [sp], #4
 182 00d6 7047     		bx	lr
 183              		.cfi_endproc
 184              	.LFE41:
 186              		.align	2
 187              		.thumb
 188              		.thumb_func
 190              	NVIC_GetPendingIRQ:
 191              	.LFB42:
 947:D:\workspace\console800480\system\core_cm3.h **** 
 948:D:\workspace\console800480\system\core_cm3.h **** 
 949:D:\workspace\console800480\system\core_cm3.h **** /** \brief  Get Pending Interrupt
 950:D:\workspace\console800480\system\core_cm3.h **** 
 951:D:\workspace\console800480\system\core_cm3.h ****     This function reads the pending register in the NVIC and returns the pending bit
 952:D:\workspace\console800480\system\core_cm3.h ****     for the specified interrupt.
 953:D:\workspace\console800480\system\core_cm3.h **** 
 954:D:\workspace\console800480\system\core_cm3.h ****     \param [in]      IRQn  Number of the interrupt for get pending
 955:D:\workspace\console800480\system\core_cm3.h ****     \return             0  Interrupt status is not pending
 956:D:\workspace\console800480\system\core_cm3.h ****     \return             1  Interrupt status is pending
 957:D:\workspace\console800480\system\core_cm3.h ****  */
 958:D:\workspace\console800480\system\core_cm3.h **** static __INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
 959:D:\workspace\console800480\system\core_cm3.h **** {
 192              		.loc 1 959 0
 193              		.cfi_startproc
 194              		@ args = 0, pretend = 0, frame = 8
 195              		@ frame_needed = 1, uses_anonymous_args = 0
 196              		@ link register save eliminated.
 197 00d8 80B4     		push	{r7}
 198              		.cfi_def_cfa_offset 4
 199              		.cfi_offset 7, -4
 200 00da 83B0     		sub	sp, sp, #12
 201              		.cfi_def_cfa_offset 16
 202 00dc 00AF     		add	r7, sp, #0
 203              		.cfi_def_cfa_register 7
 204 00de 0346     		mov	r3, r0
 205 00e0 FB71     		strb	r3, [r7, #7]
 960:D:\workspace\console800480\system\core_cm3.h ****   return((uint32_t) ((NVIC->ISPR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); 
 206              		.loc 1 960 0
 207 00e2 4FF46143 		mov	r3, #57600
 208 00e6 CEF20003 		movt	r3, 57344
 209 00ea 97F90720 		ldrsb	r2, [r7, #7]
 210 00ee 5209     		lsrs	r2, r2, #5
 211 00f0 4032     		adds	r2, r2, #64
 212 00f2 53F82220 		ldr	r2, [r3, r2, lsl #2]
 213 00f6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 214 00f8 03F01F03 		and	r3, r3, #31
 215 00fc 0121     		movs	r1, #1
 216 00fe 01FA03F3 		lsl	r3, r1, r3
 217 0102 1340     		ands	r3, r3, r2
 218 0104 002B     		cmp	r3, #0
 219 0106 01D0     		beq	.L7
 220              		.loc 1 960 0 is_stmt 0 discriminator 1
 221 0108 0123     		movs	r3, #1
 222 010a 00E0     		b	.L8
 223              	.L7:
 224              		.loc 1 960 0 discriminator 2
 225 010c 0023     		movs	r3, #0
 226              	.L8:
 961:D:\workspace\console800480\system\core_cm3.h **** }
 227              		.loc 1 961 0 is_stmt 1 discriminator 3
 228 010e 1846     		mov	r0, r3
 229 0110 0C37     		adds	r7, r7, #12
 230 0112 BD46     		mov	sp, r7
 231              		@ sp needed
 232 0114 5DF8047B 		ldr	r7, [sp], #4
 233 0118 7047     		bx	lr
 234              		.cfi_endproc
 235              	.LFE42:
 237 011a 00BF     		.align	2
 238              		.thumb
 239              		.thumb_func
 241              	NVIC_SetPendingIRQ:
 242              	.LFB43:
 962:D:\workspace\console800480\system\core_cm3.h **** 
 963:D:\workspace\console800480\system\core_cm3.h **** 
 964:D:\workspace\console800480\system\core_cm3.h **** /** \brief  Set Pending Interrupt
 965:D:\workspace\console800480\system\core_cm3.h **** 
 966:D:\workspace\console800480\system\core_cm3.h ****     This function sets the pending bit for the specified interrupt.
 967:D:\workspace\console800480\system\core_cm3.h ****     The interrupt number cannot be a negative value.
 968:D:\workspace\console800480\system\core_cm3.h **** 
 969:D:\workspace\console800480\system\core_cm3.h ****     \param [in]      IRQn  Number of the interrupt for set pending
 970:D:\workspace\console800480\system\core_cm3.h ****  */
 971:D:\workspace\console800480\system\core_cm3.h **** static __INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
 972:D:\workspace\console800480\system\core_cm3.h **** {
 243              		.loc 1 972 0
 244              		.cfi_startproc
 245              		@ args = 0, pretend = 0, frame = 8
 246              		@ frame_needed = 1, uses_anonymous_args = 0
 247              		@ link register save eliminated.
 248 011c 80B4     		push	{r7}
 249              		.cfi_def_cfa_offset 4
 250              		.cfi_offset 7, -4
 251 011e 83B0     		sub	sp, sp, #12
 252              		.cfi_def_cfa_offset 16
 253 0120 00AF     		add	r7, sp, #0
 254              		.cfi_def_cfa_register 7
 255 0122 0346     		mov	r3, r0
 256 0124 FB71     		strb	r3, [r7, #7]
 973:D:\workspace\console800480\system\core_cm3.h ****   NVIC->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending 
 257              		.loc 1 973 0
 258 0126 4FF46143 		mov	r3, #57600
 259 012a CEF20003 		movt	r3, 57344
 260 012e 97F90720 		ldrsb	r2, [r7, #7]
 261 0132 5209     		lsrs	r2, r2, #5
 262 0134 F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 263 0136 01F01F01 		and	r1, r1, #31
 264 013a 0120     		movs	r0, #1
 265 013c 00FA01F1 		lsl	r1, r0, r1
 266 0140 4032     		adds	r2, r2, #64
 267 0142 43F82210 		str	r1, [r3, r2, lsl #2]
 974:D:\workspace\console800480\system\core_cm3.h **** }
 268              		.loc 1 974 0
 269 0146 0C37     		adds	r7, r7, #12
 270 0148 BD46     		mov	sp, r7
 271              		@ sp needed
 272 014a 5DF8047B 		ldr	r7, [sp], #4
 273 014e 7047     		bx	lr
 274              		.cfi_endproc
 275              	.LFE43:
 277              		.align	2
 278              		.thumb
 279              		.thumb_func
 281              	NVIC_ClearPendingIRQ:
 282              	.LFB44:
 975:D:\workspace\console800480\system\core_cm3.h **** 
 976:D:\workspace\console800480\system\core_cm3.h **** 
 977:D:\workspace\console800480\system\core_cm3.h **** /** \brief  Clear Pending Interrupt
 978:D:\workspace\console800480\system\core_cm3.h **** 
 979:D:\workspace\console800480\system\core_cm3.h ****     This function clears the pending bit for the specified interrupt.
 980:D:\workspace\console800480\system\core_cm3.h ****     The interrupt number cannot be a negative value.
 981:D:\workspace\console800480\system\core_cm3.h **** 
 982:D:\workspace\console800480\system\core_cm3.h ****     \param [in]      IRQn  Number of the interrupt for clear pending
 983:D:\workspace\console800480\system\core_cm3.h ****  */
 984:D:\workspace\console800480\system\core_cm3.h **** static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 985:D:\workspace\console800480\system\core_cm3.h **** {
 283              		.loc 1 985 0
 284              		.cfi_startproc
 285              		@ args = 0, pretend = 0, frame = 8
 286              		@ frame_needed = 1, uses_anonymous_args = 0
 287              		@ link register save eliminated.
 288 0150 80B4     		push	{r7}
 289              		.cfi_def_cfa_offset 4
 290              		.cfi_offset 7, -4
 291 0152 83B0     		sub	sp, sp, #12
 292              		.cfi_def_cfa_offset 16
 293 0154 00AF     		add	r7, sp, #0
 294              		.cfi_def_cfa_register 7
 295 0156 0346     		mov	r3, r0
 296 0158 FB71     		strb	r3, [r7, #7]
 986:D:\workspace\console800480\system\core_cm3.h ****   NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrup
 297              		.loc 1 986 0
 298 015a 4FF46143 		mov	r3, #57600
 299 015e CEF20003 		movt	r3, 57344
 300 0162 97F90720 		ldrsb	r2, [r7, #7]
 301 0166 5209     		lsrs	r2, r2, #5
 302 0168 F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 303 016a 01F01F01 		and	r1, r1, #31
 304 016e 0120     		movs	r0, #1
 305 0170 00FA01F1 		lsl	r1, r0, r1
 306 0174 6032     		adds	r2, r2, #96
 307 0176 43F82210 		str	r1, [r3, r2, lsl #2]
 987:D:\workspace\console800480\system\core_cm3.h **** }
 308              		.loc 1 987 0
 309 017a 0C37     		adds	r7, r7, #12
 310 017c BD46     		mov	sp, r7
 311              		@ sp needed
 312 017e 5DF8047B 		ldr	r7, [sp], #4
 313 0182 7047     		bx	lr
 314              		.cfi_endproc
 315              	.LFE44:
 317              		.align	2
 318              		.thumb
 319              		.thumb_func
 321              	NVIC_GetActive:
 322              	.LFB45:
 988:D:\workspace\console800480\system\core_cm3.h **** 
 989:D:\workspace\console800480\system\core_cm3.h **** 
 990:D:\workspace\console800480\system\core_cm3.h **** /** \brief  Get Active Interrupt
 991:D:\workspace\console800480\system\core_cm3.h **** 
 992:D:\workspace\console800480\system\core_cm3.h ****     This function reads the active register in NVIC and returns the active bit.
 993:D:\workspace\console800480\system\core_cm3.h ****     \param [in]      IRQn  Number of the interrupt for get active
 994:D:\workspace\console800480\system\core_cm3.h ****     \return             0  Interrupt status is not active
 995:D:\workspace\console800480\system\core_cm3.h ****     \return             1  Interrupt status is active
 996:D:\workspace\console800480\system\core_cm3.h ****  */
 997:D:\workspace\console800480\system\core_cm3.h **** static __INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
 998:D:\workspace\console800480\system\core_cm3.h **** {
 323              		.loc 1 998 0
 324              		.cfi_startproc
 325              		@ args = 0, pretend = 0, frame = 8
 326              		@ frame_needed = 1, uses_anonymous_args = 0
 327              		@ link register save eliminated.
 328 0184 80B4     		push	{r7}
 329              		.cfi_def_cfa_offset 4
 330              		.cfi_offset 7, -4
 331 0186 83B0     		sub	sp, sp, #12
 332              		.cfi_def_cfa_offset 16
 333 0188 00AF     		add	r7, sp, #0
 334              		.cfi_def_cfa_register 7
 335 018a 0346     		mov	r3, r0
 336 018c FB71     		strb	r3, [r7, #7]
 999:D:\workspace\console800480\system\core_cm3.h ****   return((uint32_t)((NVIC->IABR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /
 337              		.loc 1 999 0
 338 018e 4FF46143 		mov	r3, #57600
 339 0192 CEF20003 		movt	r3, 57344
 340 0196 97F90720 		ldrsb	r2, [r7, #7]
 341 019a 5209     		lsrs	r2, r2, #5
 342 019c 8032     		adds	r2, r2, #128
 343 019e 53F82220 		ldr	r2, [r3, r2, lsl #2]
 344 01a2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 345 01a4 03F01F03 		and	r3, r3, #31
 346 01a8 0121     		movs	r1, #1
 347 01aa 01FA03F3 		lsl	r3, r1, r3
 348 01ae 1340     		ands	r3, r3, r2
 349 01b0 002B     		cmp	r3, #0
 350 01b2 01D0     		beq	.L13
 351              		.loc 1 999 0 is_stmt 0 discriminator 1
 352 01b4 0123     		movs	r3, #1
 353 01b6 00E0     		b	.L14
 354              	.L13:
 355              		.loc 1 999 0 discriminator 2
 356 01b8 0023     		movs	r3, #0
 357              	.L14:
1000:D:\workspace\console800480\system\core_cm3.h **** }
 358              		.loc 1 1000 0 is_stmt 1 discriminator 3
 359 01ba 1846     		mov	r0, r3
 360 01bc 0C37     		adds	r7, r7, #12
 361 01be BD46     		mov	sp, r7
 362              		@ sp needed
 363 01c0 5DF8047B 		ldr	r7, [sp], #4
 364 01c4 7047     		bx	lr
 365              		.cfi_endproc
 366              	.LFE45:
 368 01c6 00BF     		.align	2
 369              		.thumb
 370              		.thumb_func
 372              	NVIC_SetPriority:
 373              	.LFB46:
1001:D:\workspace\console800480\system\core_cm3.h **** 
1002:D:\workspace\console800480\system\core_cm3.h **** 
1003:D:\workspace\console800480\system\core_cm3.h **** /** \brief  Set Interrupt Priority
1004:D:\workspace\console800480\system\core_cm3.h **** 
1005:D:\workspace\console800480\system\core_cm3.h ****     This function sets the priority for the specified interrupt. The interrupt
1006:D:\workspace\console800480\system\core_cm3.h ****     number can be positive to specify an external (device specific)
1007:D:\workspace\console800480\system\core_cm3.h ****     interrupt, or negative to specify an internal (core) interrupt.
1008:D:\workspace\console800480\system\core_cm3.h **** 
1009:D:\workspace\console800480\system\core_cm3.h ****     Note: The priority cannot be set for every core interrupt.
1010:D:\workspace\console800480\system\core_cm3.h **** 
1011:D:\workspace\console800480\system\core_cm3.h ****     \param [in]      IRQn  Number of the interrupt for set priority
1012:D:\workspace\console800480\system\core_cm3.h ****     \param [in]  priority  Priority to set
1013:D:\workspace\console800480\system\core_cm3.h ****  */
1014:D:\workspace\console800480\system\core_cm3.h **** static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
1015:D:\workspace\console800480\system\core_cm3.h **** {
 374              		.loc 1 1015 0
 375              		.cfi_startproc
 376              		@ args = 0, pretend = 0, frame = 8
 377              		@ frame_needed = 1, uses_anonymous_args = 0
 378              		@ link register save eliminated.
 379 01c8 80B4     		push	{r7}
 380              		.cfi_def_cfa_offset 4
 381              		.cfi_offset 7, -4
 382 01ca 83B0     		sub	sp, sp, #12
 383              		.cfi_def_cfa_offset 16
 384 01cc 00AF     		add	r7, sp, #0
 385              		.cfi_def_cfa_register 7
 386 01ce 0346     		mov	r3, r0
 387 01d0 3960     		str	r1, [r7]
 388 01d2 FB71     		strb	r3, [r7, #7]
1016:D:\workspace\console800480\system\core_cm3.h ****   if(IRQn < 0) {
 389              		.loc 1 1016 0
 390 01d4 97F90730 		ldrsb	r3, [r7, #7]
 391 01d8 002B     		cmp	r3, #0
 392 01da 0EDA     		bge	.L17
1017:D:\workspace\console800480\system\core_cm3.h ****     SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set 
 393              		.loc 1 1017 0
 394 01dc 4FF46D43 		mov	r3, #60672
 395 01e0 CEF20003 		movt	r3, 57344
 396 01e4 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 397 01e6 02F00F02 		and	r2, r2, #15
 398 01ea 111F     		subs	r1, r2, #4
 399 01ec 3A68     		ldr	r2, [r7]
 400 01ee D2B2     		uxtb	r2, r2
 401 01f0 1201     		lsls	r2, r2, #4
 402 01f2 D2B2     		uxtb	r2, r2
 403 01f4 0B44     		add	r3, r3, r1
 404 01f6 1A76     		strb	r2, [r3, #24]
 405 01f8 0CE0     		b	.L16
 406              	.L17:
1018:D:\workspace\console800480\system\core_cm3.h ****   else {
1019:D:\workspace\console800480\system\core_cm3.h ****     NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set 
 407              		.loc 1 1019 0
 408 01fa 4FF46143 		mov	r3, #57600
 409 01fe CEF20003 		movt	r3, 57344
 410 0202 97F90710 		ldrsb	r1, [r7, #7]
 411 0206 3A68     		ldr	r2, [r7]
 412 0208 D2B2     		uxtb	r2, r2
 413 020a 1201     		lsls	r2, r2, #4
 414 020c D2B2     		uxtb	r2, r2
 415 020e 0B44     		add	r3, r3, r1
 416 0210 83F80023 		strb	r2, [r3, #768]
 417              	.L16:
1020:D:\workspace\console800480\system\core_cm3.h **** }
 418              		.loc 1 1020 0
 419 0214 0C37     		adds	r7, r7, #12
 420 0216 BD46     		mov	sp, r7
 421              		@ sp needed
 422 0218 5DF8047B 		ldr	r7, [sp], #4
 423 021c 7047     		bx	lr
 424              		.cfi_endproc
 425              	.LFE46:
 427 021e 00BF     		.align	2
 428              		.thumb
 429              		.thumb_func
 431              	NVIC_GetPriority:
 432              	.LFB47:
1021:D:\workspace\console800480\system\core_cm3.h **** 
1022:D:\workspace\console800480\system\core_cm3.h **** 
1023:D:\workspace\console800480\system\core_cm3.h **** /** \brief  Get Interrupt Priority
1024:D:\workspace\console800480\system\core_cm3.h **** 
1025:D:\workspace\console800480\system\core_cm3.h ****     This function reads the priority for the specified interrupt. The interrupt
1026:D:\workspace\console800480\system\core_cm3.h ****     number can be positive to specify an external (device specific)
1027:D:\workspace\console800480\system\core_cm3.h ****     interrupt, or negative to specify an internal (core) interrupt.
1028:D:\workspace\console800480\system\core_cm3.h **** 
1029:D:\workspace\console800480\system\core_cm3.h ****     The returned priority value is automatically aligned to the implemented
1030:D:\workspace\console800480\system\core_cm3.h ****     priority bits of the microcontroller.
1031:D:\workspace\console800480\system\core_cm3.h **** 
1032:D:\workspace\console800480\system\core_cm3.h ****     \param [in]   IRQn  Number of the interrupt for get priority
1033:D:\workspace\console800480\system\core_cm3.h ****     \return             Interrupt Priority
1034:D:\workspace\console800480\system\core_cm3.h ****  */
1035:D:\workspace\console800480\system\core_cm3.h **** static __INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
1036:D:\workspace\console800480\system\core_cm3.h **** {
 433              		.loc 1 1036 0
 434              		.cfi_startproc
 435              		@ args = 0, pretend = 0, frame = 8
 436              		@ frame_needed = 1, uses_anonymous_args = 0
 437              		@ link register save eliminated.
 438 0220 80B4     		push	{r7}
 439              		.cfi_def_cfa_offset 4
 440              		.cfi_offset 7, -4
 441 0222 83B0     		sub	sp, sp, #12
 442              		.cfi_def_cfa_offset 16
 443 0224 00AF     		add	r7, sp, #0
 444              		.cfi_def_cfa_register 7
 445 0226 0346     		mov	r3, r0
 446 0228 FB71     		strb	r3, [r7, #7]
1037:D:\workspace\console800480\system\core_cm3.h **** 
1038:D:\workspace\console800480\system\core_cm3.h ****   if(IRQn < 0) {
 447              		.loc 1 1038 0
 448 022a 97F90730 		ldrsb	r3, [r7, #7]
 449 022e 002B     		cmp	r3, #0
 450 0230 0DDA     		bge	.L20
1039:D:\workspace\console800480\system\core_cm3.h ****     return((uint32_t)(SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] >> (8 - __NVIC_PRIO_BITS)));  } /* get p
 451              		.loc 1 1039 0
 452 0232 4FF46D43 		mov	r3, #60672
 453 0236 CEF20003 		movt	r3, 57344
 454 023a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 455 023c 02F00F02 		and	r2, r2, #15
 456 0240 043A     		subs	r2, r2, #4
 457 0242 1344     		add	r3, r3, r2
 458 0244 1B7E     		ldrb	r3, [r3, #24]
 459 0246 DBB2     		uxtb	r3, r3
 460 0248 1B09     		lsrs	r3, r3, #4
 461 024a DBB2     		uxtb	r3, r3
 462 024c 0BE0     		b	.L21
 463              	.L20:
1040:D:\workspace\console800480\system\core_cm3.h ****   else {
1041:D:\workspace\console800480\system\core_cm3.h ****     return((uint32_t)(NVIC->IP[(uint32_t)(IRQn)]           >> (8 - __NVIC_PRIO_BITS)));  } /* get p
 464              		.loc 1 1041 0
 465 024e 4FF46143 		mov	r3, #57600
 466 0252 CEF20003 		movt	r3, 57344
 467 0256 97F90720 		ldrsb	r2, [r7, #7]
 468 025a 1344     		add	r3, r3, r2
 469 025c 93F80033 		ldrb	r3, [r3, #768]
 470 0260 DBB2     		uxtb	r3, r3
 471 0262 1B09     		lsrs	r3, r3, #4
 472 0264 DBB2     		uxtb	r3, r3
 473              	.L21:
1042:D:\workspace\console800480\system\core_cm3.h **** }
 474              		.loc 1 1042 0
 475 0266 1846     		mov	r0, r3
 476 0268 0C37     		adds	r7, r7, #12
 477 026a BD46     		mov	sp, r7
 478              		@ sp needed
 479 026c 5DF8047B 		ldr	r7, [sp], #4
 480 0270 7047     		bx	lr
 481              		.cfi_endproc
 482              	.LFE47:
 484 0272 00BF     		.align	2
 485              		.thumb
 486              		.thumb_func
 488              	NVIC_EncodePriority:
 489              	.LFB48:
1043:D:\workspace\console800480\system\core_cm3.h **** 
1044:D:\workspace\console800480\system\core_cm3.h **** 
1045:D:\workspace\console800480\system\core_cm3.h **** /** \brief  Encode Priority
1046:D:\workspace\console800480\system\core_cm3.h **** 
1047:D:\workspace\console800480\system\core_cm3.h ****     This function encodes the priority for an interrupt with the given priority group,
1048:D:\workspace\console800480\system\core_cm3.h ****     preemptive priority value and sub priority value.
1049:D:\workspace\console800480\system\core_cm3.h ****     In case of a conflict between priority grouping and available
1050:D:\workspace\console800480\system\core_cm3.h ****     priority bits (__NVIC_PRIO_BITS) the samllest possible priority group is set.
1051:D:\workspace\console800480\system\core_cm3.h **** 
1052:D:\workspace\console800480\system\core_cm3.h ****     The returned priority value can be used for NVIC_SetPriority(...) function
1053:D:\workspace\console800480\system\core_cm3.h **** 
1054:D:\workspace\console800480\system\core_cm3.h ****     \param [in]     PriorityGroup  Used priority group
1055:D:\workspace\console800480\system\core_cm3.h ****     \param [in]   PreemptPriority  Preemptive priority value (starting from 0)
1056:D:\workspace\console800480\system\core_cm3.h ****     \param [in]       SubPriority  Sub priority value (starting from 0)
1057:D:\workspace\console800480\system\core_cm3.h ****     \return                        Encoded priority for the interrupt
1058:D:\workspace\console800480\system\core_cm3.h ****  */
1059:D:\workspace\console800480\system\core_cm3.h **** static __INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uin
1060:D:\workspace\console800480\system\core_cm3.h **** {
 490              		.loc 1 1060 0
 491              		.cfi_startproc
 492              		@ args = 0, pretend = 0, frame = 32
 493              		@ frame_needed = 1, uses_anonymous_args = 0
 494              		@ link register save eliminated.
 495 0274 80B4     		push	{r7}
 496              		.cfi_def_cfa_offset 4
 497              		.cfi_offset 7, -4
 498 0276 89B0     		sub	sp, sp, #36
 499              		.cfi_def_cfa_offset 40
 500 0278 00AF     		add	r7, sp, #0
 501              		.cfi_def_cfa_register 7
 502 027a F860     		str	r0, [r7, #12]
 503 027c B960     		str	r1, [r7, #8]
 504 027e 7A60     		str	r2, [r7, #4]
1061:D:\workspace\console800480\system\core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used        
 505              		.loc 1 1061 0
 506 0280 FB68     		ldr	r3, [r7, #12]
 507 0282 03F00703 		and	r3, r3, #7
 508 0286 FB61     		str	r3, [r7, #28]
1062:D:\workspace\console800480\system\core_cm3.h ****   uint32_t PreemptPriorityBits;
1063:D:\workspace\console800480\system\core_cm3.h ****   uint32_t SubPriorityBits;
1064:D:\workspace\console800480\system\core_cm3.h **** 
1065:D:\workspace\console800480\system\core_cm3.h ****   PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - Priori
 509              		.loc 1 1065 0
 510 0288 FB69     		ldr	r3, [r7, #28]
 511 028a C3F10703 		rsb	r3, r3, #7
 512 028e 042B     		cmp	r3, #4
 513 0290 28BF     		it	cs
 514 0292 0423     		movcs	r3, #4
 515 0294 BB61     		str	r3, [r7, #24]
1066:D:\workspace\console800480\system\core_cm3.h ****   SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __
 516              		.loc 1 1066 0
 517 0296 FB69     		ldr	r3, [r7, #28]
 518 0298 0433     		adds	r3, r3, #4
 519 029a 062B     		cmp	r3, #6
 520 029c 02D9     		bls	.L23
 521              		.loc 1 1066 0 is_stmt 0 discriminator 1
 522 029e FB69     		ldr	r3, [r7, #28]
 523 02a0 033B     		subs	r3, r3, #3
 524 02a2 00E0     		b	.L24
 525              	.L23:
 526              		.loc 1 1066 0 discriminator 2
 527 02a4 0023     		movs	r3, #0
 528              	.L24:
 529              		.loc 1 1066 0 discriminator 3
 530 02a6 7B61     		str	r3, [r7, #20]
1067:D:\workspace\console800480\system\core_cm3.h **** 
1068:D:\workspace\console800480\system\core_cm3.h ****   return (
1069:D:\workspace\console800480\system\core_cm3.h ****            ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 531              		.loc 1 1069 0 is_stmt 1 discriminator 3
 532 02a8 BB69     		ldr	r3, [r7, #24]
 533 02aa 0122     		movs	r2, #1
 534 02ac 02FA03F3 		lsl	r3, r2, r3
 535 02b0 013B     		subs	r3, r3, #1
 536 02b2 1A46     		mov	r2, r3
 537 02b4 BB68     		ldr	r3, [r7, #8]
 538 02b6 1A40     		ands	r2, r2, r3
 539 02b8 7B69     		ldr	r3, [r7, #20]
 540 02ba 9A40     		lsls	r2, r2, r3
1070:D:\workspace\console800480\system\core_cm3.h ****            ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
 541              		.loc 1 1070 0 discriminator 3
 542 02bc 7B69     		ldr	r3, [r7, #20]
 543 02be 0121     		movs	r1, #1
 544 02c0 01FA03F3 		lsl	r3, r1, r3
 545 02c4 013B     		subs	r3, r3, #1
 546 02c6 1946     		mov	r1, r3
 547 02c8 7B68     		ldr	r3, [r7, #4]
 548 02ca 0B40     		ands	r3, r3, r1
1068:D:\workspace\console800480\system\core_cm3.h ****            ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 549              		.loc 1 1068 0 discriminator 3
 550 02cc 1343     		orrs	r3, r3, r2
1071:D:\workspace\console800480\system\core_cm3.h ****          );
1072:D:\workspace\console800480\system\core_cm3.h **** }
 551              		.loc 1 1072 0 discriminator 3
 552 02ce 1846     		mov	r0, r3
 553 02d0 2437     		adds	r7, r7, #36
 554 02d2 BD46     		mov	sp, r7
 555              		@ sp needed
 556 02d4 5DF8047B 		ldr	r7, [sp], #4
 557 02d8 7047     		bx	lr
 558              		.cfi_endproc
 559              	.LFE48:
 561 02da 00BF     		.align	2
 562              		.thumb
 563              		.thumb_func
 565              	NVIC_DecodePriority:
 566              	.LFB49:
1073:D:\workspace\console800480\system\core_cm3.h **** 
1074:D:\workspace\console800480\system\core_cm3.h **** 
1075:D:\workspace\console800480\system\core_cm3.h **** /** \brief  Decode Priority
1076:D:\workspace\console800480\system\core_cm3.h **** 
1077:D:\workspace\console800480\system\core_cm3.h ****     This function decodes an interrupt priority value with the given priority group to
1078:D:\workspace\console800480\system\core_cm3.h ****     preemptive priority value and sub priority value.
1079:D:\workspace\console800480\system\core_cm3.h ****     In case of a conflict between priority grouping and available
1080:D:\workspace\console800480\system\core_cm3.h ****     priority bits (__NVIC_PRIO_BITS) the samllest possible priority group is set.
1081:D:\workspace\console800480\system\core_cm3.h **** 
1082:D:\workspace\console800480\system\core_cm3.h ****     The priority value can be retrieved with NVIC_GetPriority(...) function
1083:D:\workspace\console800480\system\core_cm3.h **** 
1084:D:\workspace\console800480\system\core_cm3.h ****     \param [in]         Priority   Priority value
1085:D:\workspace\console800480\system\core_cm3.h ****     \param [in]     PriorityGroup  Used priority group
1086:D:\workspace\console800480\system\core_cm3.h ****     \param [out] pPreemptPriority  Preemptive priority value (starting from 0)
1087:D:\workspace\console800480\system\core_cm3.h ****     \param [out]     pSubPriority  Sub priority value (starting from 0)
1088:D:\workspace\console800480\system\core_cm3.h ****  */
1089:D:\workspace\console800480\system\core_cm3.h **** static __INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* pPre
1090:D:\workspace\console800480\system\core_cm3.h **** {
 567              		.loc 1 1090 0
 568              		.cfi_startproc
 569              		@ args = 0, pretend = 0, frame = 32
 570              		@ frame_needed = 1, uses_anonymous_args = 0
 571              		@ link register save eliminated.
 572 02dc 80B4     		push	{r7}
 573              		.cfi_def_cfa_offset 4
 574              		.cfi_offset 7, -4
 575 02de 89B0     		sub	sp, sp, #36
 576              		.cfi_def_cfa_offset 40
 577 02e0 00AF     		add	r7, sp, #0
 578              		.cfi_def_cfa_register 7
 579 02e2 F860     		str	r0, [r7, #12]
 580 02e4 B960     		str	r1, [r7, #8]
 581 02e6 7A60     		str	r2, [r7, #4]
 582 02e8 3B60     		str	r3, [r7]
1091:D:\workspace\console800480\system\core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used        
 583              		.loc 1 1091 0
 584 02ea BB68     		ldr	r3, [r7, #8]
 585 02ec 03F00703 		and	r3, r3, #7
 586 02f0 FB61     		str	r3, [r7, #28]
1092:D:\workspace\console800480\system\core_cm3.h ****   uint32_t PreemptPriorityBits;
1093:D:\workspace\console800480\system\core_cm3.h ****   uint32_t SubPriorityBits;
1094:D:\workspace\console800480\system\core_cm3.h **** 
1095:D:\workspace\console800480\system\core_cm3.h ****   PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - Priori
 587              		.loc 1 1095 0
 588 02f2 FB69     		ldr	r3, [r7, #28]
 589 02f4 C3F10703 		rsb	r3, r3, #7
 590 02f8 042B     		cmp	r3, #4
 591 02fa 28BF     		it	cs
 592 02fc 0423     		movcs	r3, #4
 593 02fe BB61     		str	r3, [r7, #24]
1096:D:\workspace\console800480\system\core_cm3.h ****   SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __
 594              		.loc 1 1096 0
 595 0300 FB69     		ldr	r3, [r7, #28]
 596 0302 0433     		adds	r3, r3, #4
 597 0304 062B     		cmp	r3, #6
 598 0306 02D9     		bls	.L27
 599              		.loc 1 1096 0 is_stmt 0 discriminator 1
 600 0308 FB69     		ldr	r3, [r7, #28]
 601 030a 033B     		subs	r3, r3, #3
 602 030c 00E0     		b	.L28
 603              	.L27:
 604              		.loc 1 1096 0 discriminator 2
 605 030e 0023     		movs	r3, #0
 606              	.L28:
 607              		.loc 1 1096 0 discriminator 3
 608 0310 7B61     		str	r3, [r7, #20]
1097:D:\workspace\console800480\system\core_cm3.h **** 
1098:D:\workspace\console800480\system\core_cm3.h ****   *pPreemptPriority = (Priority >> SubPriorityBits) & ((1 << (PreemptPriorityBits)) - 1);
 609              		.loc 1 1098 0 is_stmt 1 discriminator 3
 610 0312 7B69     		ldr	r3, [r7, #20]
 611 0314 FA68     		ldr	r2, [r7, #12]
 612 0316 DA40     		lsrs	r2, r2, r3
 613 0318 BB69     		ldr	r3, [r7, #24]
 614 031a 0121     		movs	r1, #1
 615 031c 01FA03F3 		lsl	r3, r1, r3
 616 0320 013B     		subs	r3, r3, #1
 617 0322 1A40     		ands	r2, r2, r3
 618 0324 7B68     		ldr	r3, [r7, #4]
 619 0326 1A60     		str	r2, [r3]
1099:D:\workspace\console800480\system\core_cm3.h ****   *pSubPriority     = (Priority                   ) & ((1 << (SubPriorityBits    )) - 1);
 620              		.loc 1 1099 0 discriminator 3
 621 0328 7B69     		ldr	r3, [r7, #20]
 622 032a 0122     		movs	r2, #1
 623 032c 02FA03F3 		lsl	r3, r2, r3
 624 0330 013B     		subs	r3, r3, #1
 625 0332 1A46     		mov	r2, r3
 626 0334 FB68     		ldr	r3, [r7, #12]
 627 0336 1A40     		ands	r2, r2, r3
 628 0338 3B68     		ldr	r3, [r7]
 629 033a 1A60     		str	r2, [r3]
1100:D:\workspace\console800480\system\core_cm3.h **** }
 630              		.loc 1 1100 0 discriminator 3
 631 033c 2437     		adds	r7, r7, #36
 632 033e BD46     		mov	sp, r7
 633              		@ sp needed
 634 0340 5DF8047B 		ldr	r7, [sp], #4
 635 0344 7047     		bx	lr
 636              		.cfi_endproc
 637              	.LFE49:
 639 0346 00BF     		.align	2
 640              		.thumb
 641              		.thumb_func
 643              	NVIC_SystemReset:
 644              	.LFB50:
1101:D:\workspace\console800480\system\core_cm3.h **** 
1102:D:\workspace\console800480\system\core_cm3.h **** 
1103:D:\workspace\console800480\system\core_cm3.h **** /** \brief  System Reset
1104:D:\workspace\console800480\system\core_cm3.h **** 
1105:D:\workspace\console800480\system\core_cm3.h ****     This function initiate a system reset request to reset the MCU.
1106:D:\workspace\console800480\system\core_cm3.h ****  */
1107:D:\workspace\console800480\system\core_cm3.h **** static __INLINE void NVIC_SystemReset(void)
1108:D:\workspace\console800480\system\core_cm3.h **** {
 645              		.loc 1 1108 0
 646              		.cfi_startproc
 647              		@ args = 0, pretend = 0, frame = 0
 648              		@ frame_needed = 1, uses_anonymous_args = 0
 649              		@ link register save eliminated.
 650 0348 80B4     		push	{r7}
 651              		.cfi_def_cfa_offset 4
 652              		.cfi_offset 7, -4
 653 034a 00AF     		add	r7, sp, #0
 654              		.cfi_def_cfa_register 7
 655              	.LBB6:
 656              	.LBB7:
 657              		.file 2 "D:\\workspace\\console800480\\system/core_cmInstr.h"
   1:D:\workspace\console800480\system\core_cmInstr.h **** /**************************************************************************//**
   2:D:\workspace\console800480\system\core_cmInstr.h ****  * @file     core_cmInstr.h
   3:D:\workspace\console800480\system\core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:D:\workspace\console800480\system\core_cmInstr.h ****  * @version  V2.10
   5:D:\workspace\console800480\system\core_cmInstr.h ****  * @date     19. July 2011
   6:D:\workspace\console800480\system\core_cmInstr.h ****  *
   7:D:\workspace\console800480\system\core_cmInstr.h ****  * @note
   8:D:\workspace\console800480\system\core_cmInstr.h ****  * Copyright (C) 2009-2011 ARM Limited. All rights reserved.
   9:D:\workspace\console800480\system\core_cmInstr.h ****  *
  10:D:\workspace\console800480\system\core_cmInstr.h ****  * @par
  11:D:\workspace\console800480\system\core_cmInstr.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:D:\workspace\console800480\system\core_cmInstr.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:D:\workspace\console800480\system\core_cmInstr.h ****  * within development tools that are supporting such ARM based processors. 
  14:D:\workspace\console800480\system\core_cmInstr.h ****  *
  15:D:\workspace\console800480\system\core_cmInstr.h ****  * @par
  16:D:\workspace\console800480\system\core_cmInstr.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:D:\workspace\console800480\system\core_cmInstr.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:D:\workspace\console800480\system\core_cmInstr.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:D:\workspace\console800480\system\core_cmInstr.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:D:\workspace\console800480\system\core_cmInstr.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:D:\workspace\console800480\system\core_cmInstr.h ****  *
  22:D:\workspace\console800480\system\core_cmInstr.h ****  ******************************************************************************/
  23:D:\workspace\console800480\system\core_cmInstr.h **** 
  24:D:\workspace\console800480\system\core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  25:D:\workspace\console800480\system\core_cmInstr.h **** #define __CORE_CMINSTR_H
  26:D:\workspace\console800480\system\core_cmInstr.h **** 
  27:D:\workspace\console800480\system\core_cmInstr.h **** 
  28:D:\workspace\console800480\system\core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  29:D:\workspace\console800480\system\core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  30:D:\workspace\console800480\system\core_cmInstr.h ****   Access to dedicated instructions
  31:D:\workspace\console800480\system\core_cmInstr.h ****   @{
  32:D:\workspace\console800480\system\core_cmInstr.h **** */
  33:D:\workspace\console800480\system\core_cmInstr.h **** 
  34:D:\workspace\console800480\system\core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  35:D:\workspace\console800480\system\core_cmInstr.h **** /* ARM armcc specific functions */
  36:D:\workspace\console800480\system\core_cmInstr.h **** 
  37:D:\workspace\console800480\system\core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  38:D:\workspace\console800480\system\core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  39:D:\workspace\console800480\system\core_cmInstr.h **** #endif
  40:D:\workspace\console800480\system\core_cmInstr.h **** 
  41:D:\workspace\console800480\system\core_cmInstr.h **** 
  42:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  No Operation
  43:D:\workspace\console800480\system\core_cmInstr.h **** 
  44:D:\workspace\console800480\system\core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  45:D:\workspace\console800480\system\core_cmInstr.h ****  */
  46:D:\workspace\console800480\system\core_cmInstr.h **** #define __NOP                             __nop
  47:D:\workspace\console800480\system\core_cmInstr.h **** 
  48:D:\workspace\console800480\system\core_cmInstr.h **** 
  49:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Wait For Interrupt
  50:D:\workspace\console800480\system\core_cmInstr.h **** 
  51:D:\workspace\console800480\system\core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  52:D:\workspace\console800480\system\core_cmInstr.h ****     until one of a number of events occurs.
  53:D:\workspace\console800480\system\core_cmInstr.h ****  */
  54:D:\workspace\console800480\system\core_cmInstr.h **** #define __WFI                             __wfi
  55:D:\workspace\console800480\system\core_cmInstr.h **** 
  56:D:\workspace\console800480\system\core_cmInstr.h **** 
  57:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Wait For Event
  58:D:\workspace\console800480\system\core_cmInstr.h **** 
  59:D:\workspace\console800480\system\core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  60:D:\workspace\console800480\system\core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  61:D:\workspace\console800480\system\core_cmInstr.h ****  */
  62:D:\workspace\console800480\system\core_cmInstr.h **** #define __WFE                             __wfe
  63:D:\workspace\console800480\system\core_cmInstr.h **** 
  64:D:\workspace\console800480\system\core_cmInstr.h **** 
  65:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Send Event
  66:D:\workspace\console800480\system\core_cmInstr.h **** 
  67:D:\workspace\console800480\system\core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  68:D:\workspace\console800480\system\core_cmInstr.h ****  */
  69:D:\workspace\console800480\system\core_cmInstr.h **** #define __SEV                             __sev
  70:D:\workspace\console800480\system\core_cmInstr.h **** 
  71:D:\workspace\console800480\system\core_cmInstr.h **** 
  72:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  73:D:\workspace\console800480\system\core_cmInstr.h **** 
  74:D:\workspace\console800480\system\core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor, 
  75:D:\workspace\console800480\system\core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or 
  76:D:\workspace\console800480\system\core_cmInstr.h ****     memory, after the instruction has been completed.
  77:D:\workspace\console800480\system\core_cmInstr.h ****  */
  78:D:\workspace\console800480\system\core_cmInstr.h **** #define __ISB()                           __isb(0xF)
  79:D:\workspace\console800480\system\core_cmInstr.h **** 
  80:D:\workspace\console800480\system\core_cmInstr.h **** 
  81:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  82:D:\workspace\console800480\system\core_cmInstr.h **** 
  83:D:\workspace\console800480\system\core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier. 
  84:D:\workspace\console800480\system\core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
  85:D:\workspace\console800480\system\core_cmInstr.h ****  */
  86:D:\workspace\console800480\system\core_cmInstr.h **** #define __DSB()                           __dsb(0xF)
  87:D:\workspace\console800480\system\core_cmInstr.h **** 
  88:D:\workspace\console800480\system\core_cmInstr.h **** 
  89:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Data Memory Barrier
  90:D:\workspace\console800480\system\core_cmInstr.h **** 
  91:D:\workspace\console800480\system\core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before 
  92:D:\workspace\console800480\system\core_cmInstr.h ****     and after the instruction, without ensuring their completion.
  93:D:\workspace\console800480\system\core_cmInstr.h ****  */
  94:D:\workspace\console800480\system\core_cmInstr.h **** #define __DMB()                           __dmb(0xF)
  95:D:\workspace\console800480\system\core_cmInstr.h **** 
  96:D:\workspace\console800480\system\core_cmInstr.h **** 
  97:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
  98:D:\workspace\console800480\system\core_cmInstr.h **** 
  99:D:\workspace\console800480\system\core_cmInstr.h ****     This function reverses the byte order in integer value.
 100:D:\workspace\console800480\system\core_cmInstr.h **** 
 101:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]    value  Value to reverse
 102:D:\workspace\console800480\system\core_cmInstr.h ****     \return               Reversed value
 103:D:\workspace\console800480\system\core_cmInstr.h ****  */
 104:D:\workspace\console800480\system\core_cmInstr.h **** #define __REV                             __rev
 105:D:\workspace\console800480\system\core_cmInstr.h **** 
 106:D:\workspace\console800480\system\core_cmInstr.h **** 
 107:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 108:D:\workspace\console800480\system\core_cmInstr.h **** 
 109:D:\workspace\console800480\system\core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 110:D:\workspace\console800480\system\core_cmInstr.h **** 
 111:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]    value  Value to reverse
 112:D:\workspace\console800480\system\core_cmInstr.h ****     \return               Reversed value
 113:D:\workspace\console800480\system\core_cmInstr.h ****  */
 114:D:\workspace\console800480\system\core_cmInstr.h **** static __INLINE __ASM uint32_t __REV16(uint32_t value)
 115:D:\workspace\console800480\system\core_cmInstr.h **** {
 116:D:\workspace\console800480\system\core_cmInstr.h ****   rev16 r0, r0
 117:D:\workspace\console800480\system\core_cmInstr.h ****   bx lr
 118:D:\workspace\console800480\system\core_cmInstr.h **** }
 119:D:\workspace\console800480\system\core_cmInstr.h **** 
 120:D:\workspace\console800480\system\core_cmInstr.h **** 
 121:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 122:D:\workspace\console800480\system\core_cmInstr.h **** 
 123:D:\workspace\console800480\system\core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 124:D:\workspace\console800480\system\core_cmInstr.h **** 
 125:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]    value  Value to reverse
 126:D:\workspace\console800480\system\core_cmInstr.h ****     \return               Reversed value
 127:D:\workspace\console800480\system\core_cmInstr.h ****  */
 128:D:\workspace\console800480\system\core_cmInstr.h **** static __INLINE __ASM int32_t __REVSH(int32_t value)
 129:D:\workspace\console800480\system\core_cmInstr.h **** {
 130:D:\workspace\console800480\system\core_cmInstr.h ****   revsh r0, r0
 131:D:\workspace\console800480\system\core_cmInstr.h ****   bx lr
 132:D:\workspace\console800480\system\core_cmInstr.h **** }
 133:D:\workspace\console800480\system\core_cmInstr.h **** 
 134:D:\workspace\console800480\system\core_cmInstr.h **** 
 135:D:\workspace\console800480\system\core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 136:D:\workspace\console800480\system\core_cmInstr.h **** 
 137:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Reverse bit order of value
 138:D:\workspace\console800480\system\core_cmInstr.h **** 
 139:D:\workspace\console800480\system\core_cmInstr.h ****     This function reverses the bit order of the given value.
 140:D:\workspace\console800480\system\core_cmInstr.h **** 
 141:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]    value  Value to reverse
 142:D:\workspace\console800480\system\core_cmInstr.h ****     \return               Reversed value
 143:D:\workspace\console800480\system\core_cmInstr.h ****  */
 144:D:\workspace\console800480\system\core_cmInstr.h **** #define __RBIT                            __rbit
 145:D:\workspace\console800480\system\core_cmInstr.h **** 
 146:D:\workspace\console800480\system\core_cmInstr.h **** 
 147:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 148:D:\workspace\console800480\system\core_cmInstr.h **** 
 149:D:\workspace\console800480\system\core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 150:D:\workspace\console800480\system\core_cmInstr.h **** 
 151:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 152:D:\workspace\console800480\system\core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 153:D:\workspace\console800480\system\core_cmInstr.h ****  */
 154:D:\workspace\console800480\system\core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 155:D:\workspace\console800480\system\core_cmInstr.h **** 
 156:D:\workspace\console800480\system\core_cmInstr.h **** 
 157:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 158:D:\workspace\console800480\system\core_cmInstr.h **** 
 159:D:\workspace\console800480\system\core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 160:D:\workspace\console800480\system\core_cmInstr.h **** 
 161:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 162:D:\workspace\console800480\system\core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 163:D:\workspace\console800480\system\core_cmInstr.h ****  */
 164:D:\workspace\console800480\system\core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 165:D:\workspace\console800480\system\core_cmInstr.h **** 
 166:D:\workspace\console800480\system\core_cmInstr.h **** 
 167:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 168:D:\workspace\console800480\system\core_cmInstr.h **** 
 169:D:\workspace\console800480\system\core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 170:D:\workspace\console800480\system\core_cmInstr.h **** 
 171:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 172:D:\workspace\console800480\system\core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 173:D:\workspace\console800480\system\core_cmInstr.h ****  */
 174:D:\workspace\console800480\system\core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 175:D:\workspace\console800480\system\core_cmInstr.h **** 
 176:D:\workspace\console800480\system\core_cmInstr.h **** 
 177:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 178:D:\workspace\console800480\system\core_cmInstr.h **** 
 179:D:\workspace\console800480\system\core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 180:D:\workspace\console800480\system\core_cmInstr.h **** 
 181:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]  value  Value to store
 182:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 183:D:\workspace\console800480\system\core_cmInstr.h ****     \return          0  Function succeeded
 184:D:\workspace\console800480\system\core_cmInstr.h ****     \return          1  Function failed
 185:D:\workspace\console800480\system\core_cmInstr.h ****  */
 186:D:\workspace\console800480\system\core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 187:D:\workspace\console800480\system\core_cmInstr.h **** 
 188:D:\workspace\console800480\system\core_cmInstr.h **** 
 189:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 190:D:\workspace\console800480\system\core_cmInstr.h **** 
 191:D:\workspace\console800480\system\core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 192:D:\workspace\console800480\system\core_cmInstr.h **** 
 193:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]  value  Value to store
 194:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 195:D:\workspace\console800480\system\core_cmInstr.h ****     \return          0  Function succeeded
 196:D:\workspace\console800480\system\core_cmInstr.h ****     \return          1  Function failed
 197:D:\workspace\console800480\system\core_cmInstr.h ****  */
 198:D:\workspace\console800480\system\core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 199:D:\workspace\console800480\system\core_cmInstr.h **** 
 200:D:\workspace\console800480\system\core_cmInstr.h **** 
 201:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 202:D:\workspace\console800480\system\core_cmInstr.h **** 
 203:D:\workspace\console800480\system\core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 204:D:\workspace\console800480\system\core_cmInstr.h **** 
 205:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]  value  Value to store
 206:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 207:D:\workspace\console800480\system\core_cmInstr.h ****     \return          0  Function succeeded
 208:D:\workspace\console800480\system\core_cmInstr.h ****     \return          1  Function failed
 209:D:\workspace\console800480\system\core_cmInstr.h ****  */
 210:D:\workspace\console800480\system\core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 211:D:\workspace\console800480\system\core_cmInstr.h **** 
 212:D:\workspace\console800480\system\core_cmInstr.h **** 
 213:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Remove the exclusive lock
 214:D:\workspace\console800480\system\core_cmInstr.h **** 
 215:D:\workspace\console800480\system\core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 216:D:\workspace\console800480\system\core_cmInstr.h **** 
 217:D:\workspace\console800480\system\core_cmInstr.h ****  */
 218:D:\workspace\console800480\system\core_cmInstr.h **** #define __CLREX                           __clrex
 219:D:\workspace\console800480\system\core_cmInstr.h **** 
 220:D:\workspace\console800480\system\core_cmInstr.h **** 
 221:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Signed Saturate
 222:D:\workspace\console800480\system\core_cmInstr.h **** 
 223:D:\workspace\console800480\system\core_cmInstr.h ****     This function saturates a signed value.
 224:D:\workspace\console800480\system\core_cmInstr.h **** 
 225:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]  value  Value to be saturated
 226:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 227:D:\workspace\console800480\system\core_cmInstr.h ****     \return             Saturated value
 228:D:\workspace\console800480\system\core_cmInstr.h ****  */
 229:D:\workspace\console800480\system\core_cmInstr.h **** #define __SSAT                            __ssat
 230:D:\workspace\console800480\system\core_cmInstr.h **** 
 231:D:\workspace\console800480\system\core_cmInstr.h **** 
 232:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Unsigned Saturate
 233:D:\workspace\console800480\system\core_cmInstr.h **** 
 234:D:\workspace\console800480\system\core_cmInstr.h ****     This function saturates an unsigned value.
 235:D:\workspace\console800480\system\core_cmInstr.h **** 
 236:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]  value  Value to be saturated
 237:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 238:D:\workspace\console800480\system\core_cmInstr.h ****     \return             Saturated value
 239:D:\workspace\console800480\system\core_cmInstr.h ****  */
 240:D:\workspace\console800480\system\core_cmInstr.h **** #define __USAT                            __usat
 241:D:\workspace\console800480\system\core_cmInstr.h **** 
 242:D:\workspace\console800480\system\core_cmInstr.h **** 
 243:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Count leading zeros
 244:D:\workspace\console800480\system\core_cmInstr.h **** 
 245:D:\workspace\console800480\system\core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 246:D:\workspace\console800480\system\core_cmInstr.h **** 
 247:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 248:D:\workspace\console800480\system\core_cmInstr.h ****     \return             number of leading zeros in value
 249:D:\workspace\console800480\system\core_cmInstr.h ****  */
 250:D:\workspace\console800480\system\core_cmInstr.h **** #define __CLZ                             __clz 
 251:D:\workspace\console800480\system\core_cmInstr.h **** 
 252:D:\workspace\console800480\system\core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) */
 253:D:\workspace\console800480\system\core_cmInstr.h **** 
 254:D:\workspace\console800480\system\core_cmInstr.h **** 
 255:D:\workspace\console800480\system\core_cmInstr.h **** 
 256:D:\workspace\console800480\system\core_cmInstr.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 257:D:\workspace\console800480\system\core_cmInstr.h **** /* IAR iccarm specific functions */
 258:D:\workspace\console800480\system\core_cmInstr.h **** 
 259:D:\workspace\console800480\system\core_cmInstr.h **** #include <cmsis_iar.h>
 260:D:\workspace\console800480\system\core_cmInstr.h **** 
 261:D:\workspace\console800480\system\core_cmInstr.h **** 
 262:D:\workspace\console800480\system\core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 263:D:\workspace\console800480\system\core_cmInstr.h **** /* GNU gcc specific functions */
 264:D:\workspace\console800480\system\core_cmInstr.h **** 
 265:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  No Operation
 266:D:\workspace\console800480\system\core_cmInstr.h **** 
 267:D:\workspace\console800480\system\core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 268:D:\workspace\console800480\system\core_cmInstr.h ****  */
 269:D:\workspace\console800480\system\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __NOP(void)
 270:D:\workspace\console800480\system\core_cmInstr.h **** {
 271:D:\workspace\console800480\system\core_cmInstr.h ****   __ASM volatile ("nop");
 272:D:\workspace\console800480\system\core_cmInstr.h **** }
 273:D:\workspace\console800480\system\core_cmInstr.h **** 
 274:D:\workspace\console800480\system\core_cmInstr.h **** 
 275:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Wait For Interrupt
 276:D:\workspace\console800480\system\core_cmInstr.h **** 
 277:D:\workspace\console800480\system\core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 278:D:\workspace\console800480\system\core_cmInstr.h ****     until one of a number of events occurs.
 279:D:\workspace\console800480\system\core_cmInstr.h ****  */
 280:D:\workspace\console800480\system\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __WFI(void)
 281:D:\workspace\console800480\system\core_cmInstr.h **** {
 282:D:\workspace\console800480\system\core_cmInstr.h ****   __ASM volatile ("wfi");
 283:D:\workspace\console800480\system\core_cmInstr.h **** }
 284:D:\workspace\console800480\system\core_cmInstr.h **** 
 285:D:\workspace\console800480\system\core_cmInstr.h **** 
 286:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Wait For Event
 287:D:\workspace\console800480\system\core_cmInstr.h **** 
 288:D:\workspace\console800480\system\core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 289:D:\workspace\console800480\system\core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 290:D:\workspace\console800480\system\core_cmInstr.h ****  */
 291:D:\workspace\console800480\system\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __WFE(void)
 292:D:\workspace\console800480\system\core_cmInstr.h **** {
 293:D:\workspace\console800480\system\core_cmInstr.h ****   __ASM volatile ("wfe");
 294:D:\workspace\console800480\system\core_cmInstr.h **** }
 295:D:\workspace\console800480\system\core_cmInstr.h **** 
 296:D:\workspace\console800480\system\core_cmInstr.h **** 
 297:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Send Event
 298:D:\workspace\console800480\system\core_cmInstr.h **** 
 299:D:\workspace\console800480\system\core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 300:D:\workspace\console800480\system\core_cmInstr.h ****  */
 301:D:\workspace\console800480\system\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __SEV(void)
 302:D:\workspace\console800480\system\core_cmInstr.h **** {
 303:D:\workspace\console800480\system\core_cmInstr.h ****   __ASM volatile ("sev");
 304:D:\workspace\console800480\system\core_cmInstr.h **** }
 305:D:\workspace\console800480\system\core_cmInstr.h **** 
 306:D:\workspace\console800480\system\core_cmInstr.h **** 
 307:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
 308:D:\workspace\console800480\system\core_cmInstr.h **** 
 309:D:\workspace\console800480\system\core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor, 
 310:D:\workspace\console800480\system\core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or 
 311:D:\workspace\console800480\system\core_cmInstr.h ****     memory, after the instruction has been completed.
 312:D:\workspace\console800480\system\core_cmInstr.h ****  */
 313:D:\workspace\console800480\system\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __ISB(void)
 314:D:\workspace\console800480\system\core_cmInstr.h **** {
 315:D:\workspace\console800480\system\core_cmInstr.h ****   __ASM volatile ("isb");
 316:D:\workspace\console800480\system\core_cmInstr.h **** }
 317:D:\workspace\console800480\system\core_cmInstr.h **** 
 318:D:\workspace\console800480\system\core_cmInstr.h **** 
 319:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Data Synchronization Barrier
 320:D:\workspace\console800480\system\core_cmInstr.h **** 
 321:D:\workspace\console800480\system\core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier. 
 322:D:\workspace\console800480\system\core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
 323:D:\workspace\console800480\system\core_cmInstr.h ****  */
 324:D:\workspace\console800480\system\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __DSB(void)
 325:D:\workspace\console800480\system\core_cmInstr.h **** {
 326:D:\workspace\console800480\system\core_cmInstr.h ****   __ASM volatile ("dsb");
 658              		.loc 2 326 0
 659              	@ 326 "D:\workspace\console800480\system/core_cmInstr.h" 1
 660 034c BFF34F8F 		dsb
 661              	@ 0 "" 2
 662              		.thumb
 663              	.LBE7:
 664              	.LBE6:
1109:D:\workspace\console800480\system\core_cm3.h ****   __DSB();                                                     /* Ensure all outstanding memory acc
1110:D:\workspace\console800480\system\core_cm3.h ****                                                                   buffered write are completed befo
1111:D:\workspace\console800480\system\core_cm3.h ****   SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
 665              		.loc 1 1111 0
 666 0350 4FF46D42 		mov	r2, #60672
 667 0354 CEF20002 		movt	r2, 57344
1112:D:\workspace\console800480\system\core_cm3.h ****                  (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 668              		.loc 1 1112 0
 669 0358 4FF46D43 		mov	r3, #60672
 670 035c CEF20003 		movt	r3, 57344
 671 0360 DB68     		ldr	r3, [r3, #12]
 672 0362 03F4E061 		and	r1, r3, #1792
 673 0366 0423     		movs	r3, #4
 674 0368 C0F2FA53 		movt	r3, 1530
 675 036c 0B43     		orrs	r3, r3, r1
1111:D:\workspace\console800480\system\core_cm3.h ****                  (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 676              		.loc 1 1111 0
 677 036e D360     		str	r3, [r2, #12]
 678              	.LBB8:
 679              	.LBB9:
 680              		.loc 2 326 0
 681              	@ 326 "D:\workspace\console800480\system/core_cmInstr.h" 1
 682 0370 BFF34F8F 		dsb
 683              	@ 0 "" 2
 684              		.thumb
 685              	.L30:
 686              	.LBE9:
 687              	.LBE8:
1113:D:\workspace\console800480\system\core_cm3.h ****                  SCB_AIRCR_SYSRESETREQ_Msk);                   /* Keep priority group unchanged */
1114:D:\workspace\console800480\system\core_cm3.h ****   __DSB();                                                     /* Ensure completion of memory acces
1115:D:\workspace\console800480\system\core_cm3.h ****   while(1);                                                    /* wait until reset */
 688              		.loc 1 1115 0 discriminator 1
 689 0374 FEE7     		b	.L30
 690              		.cfi_endproc
 691              	.LFE50:
 693 0376 00BF     		.align	2
 694              		.thumb
 695              		.thumb_func
 697              	SysTick_Config:
 698              	.LFB51:
1116:D:\workspace\console800480\system\core_cm3.h **** }
1117:D:\workspace\console800480\system\core_cm3.h **** 
1118:D:\workspace\console800480\system\core_cm3.h **** /*@} end of CMSIS_Core_NVICFunctions */
1119:D:\workspace\console800480\system\core_cm3.h **** 
1120:D:\workspace\console800480\system\core_cm3.h **** 
1121:D:\workspace\console800480\system\core_cm3.h **** 
1122:D:\workspace\console800480\system\core_cm3.h **** /* ##################################    SysTick function  ########################################
1123:D:\workspace\console800480\system\core_cm3.h **** /** \ingroup  CMSIS_Core_FunctionInterface
1124:D:\workspace\console800480\system\core_cm3.h ****     \defgroup CMSIS_Core_SysTickFunctions CMSIS Core SysTick Functions
1125:D:\workspace\console800480\system\core_cm3.h ****   @{
1126:D:\workspace\console800480\system\core_cm3.h ****  */
1127:D:\workspace\console800480\system\core_cm3.h **** 
1128:D:\workspace\console800480\system\core_cm3.h **** #if (__Vendor_SysTickConfig == 0)
1129:D:\workspace\console800480\system\core_cm3.h **** 
1130:D:\workspace\console800480\system\core_cm3.h **** /** \brief  System Tick Configuration
1131:D:\workspace\console800480\system\core_cm3.h **** 
1132:D:\workspace\console800480\system\core_cm3.h ****     This function initialises the system tick timer and its interrupt and start the system tick tim
1133:D:\workspace\console800480\system\core_cm3.h ****     Counter is in free running mode to generate periodical interrupts.
1134:D:\workspace\console800480\system\core_cm3.h **** 
1135:D:\workspace\console800480\system\core_cm3.h ****     \param [in]  ticks  Number of ticks between two interrupts
1136:D:\workspace\console800480\system\core_cm3.h ****     \return          0  Function succeeded
1137:D:\workspace\console800480\system\core_cm3.h ****     \return          1  Function failed
1138:D:\workspace\console800480\system\core_cm3.h ****  */
1139:D:\workspace\console800480\system\core_cm3.h **** static __INLINE uint32_t SysTick_Config(uint32_t ticks)
1140:D:\workspace\console800480\system\core_cm3.h **** {
 699              		.loc 1 1140 0
 700              		.cfi_startproc
 701              		@ args = 0, pretend = 0, frame = 8
 702              		@ frame_needed = 1, uses_anonymous_args = 0
 703 0378 80B5     		push	{r7, lr}
 704              		.cfi_def_cfa_offset 8
 705              		.cfi_offset 7, -8
 706              		.cfi_offset 14, -4
 707 037a 82B0     		sub	sp, sp, #8
 708              		.cfi_def_cfa_offset 16
 709 037c 00AF     		add	r7, sp, #0
 710              		.cfi_def_cfa_register 7
 711 037e 7860     		str	r0, [r7, #4]
1141:D:\workspace\console800480\system\core_cm3.h ****   if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 712              		.loc 1 1141 0
 713 0380 7B68     		ldr	r3, [r7, #4]
 714 0382 B3F1807F 		cmp	r3, #16777216
 715 0386 01D3     		bcc	.L32
 716              		.loc 1 1141 0 is_stmt 0 discriminator 1
 717 0388 0123     		movs	r3, #1
 718 038a 1AE0     		b	.L33
 719              	.L32:
1142:D:\workspace\console800480\system\core_cm3.h **** 
1143:D:\workspace\console800480\system\core_cm3.h ****   SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 720              		.loc 1 1143 0 is_stmt 1
 721 038c 4EF21003 		movw	r3, #57360
 722 0390 CEF20003 		movt	r3, 57344
 723 0394 7A68     		ldr	r2, [r7, #4]
 724 0396 22F07F42 		bic	r2, r2, #-16777216
 725 039a 013A     		subs	r2, r2, #1
 726 039c 5A60     		str	r2, [r3, #4]
1144:D:\workspace\console800480\system\core_cm3.h ****   NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System
 727              		.loc 1 1144 0
 728 039e 4FF0FF30 		mov	r0, #-1
 729 03a2 0F21     		movs	r1, #15
 730 03a4 FFF710FF 		bl	NVIC_SetPriority
1145:D:\workspace\console800480\system\core_cm3.h ****   SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 731              		.loc 1 1145 0
 732 03a8 4EF21003 		movw	r3, #57360
 733 03ac CEF20003 		movt	r3, 57344
 734 03b0 0022     		movs	r2, #0
 735 03b2 9A60     		str	r2, [r3, #8]
1146:D:\workspace\console800480\system\core_cm3.h ****   SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 736              		.loc 1 1146 0
 737 03b4 4EF21003 		movw	r3, #57360
 738 03b8 CEF20003 		movt	r3, 57344
 739 03bc 0722     		movs	r2, #7
 740 03be 1A60     		str	r2, [r3]
1147:D:\workspace\console800480\system\core_cm3.h ****                    SysTick_CTRL_TICKINT_Msk   |
1148:D:\workspace\console800480\system\core_cm3.h ****                    SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Ti
1149:D:\workspace\console800480\system\core_cm3.h ****   return (0);                                                  /* Function successful */
 741              		.loc 1 1149 0
 742 03c0 0023     		movs	r3, #0
 743              	.L33:
1150:D:\workspace\console800480\system\core_cm3.h **** }
 744              		.loc 1 1150 0
 745 03c2 1846     		mov	r0, r3
 746 03c4 0837     		adds	r7, r7, #8
 747 03c6 BD46     		mov	sp, r7
 748              		@ sp needed
 749 03c8 80BD     		pop	{r7, pc}
 750              		.cfi_endproc
 751              	.LFE51:
 753 03ca 00BF     		.align	2
 754              		.global	HAL_NVIC_SetPriorityGrouping
 755              		.thumb
 756              		.thumb_func
 758              	HAL_NVIC_SetPriorityGrouping:
 759              	.LFB55:
 760              		.file 3 "../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c"
   1:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** /**
   2:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   ******************************************************************************
   3:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   * @file    stm32f2xx_hal_cortex.c
   4:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   * @author  MCD Application Team
   5:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   * @version V1.0.1
   6:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   * @date    25-March-2014
   7:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   * @brief   CORTEX HAL module driver.
   8:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   *          This file provides firmware functions to manage the following 
   9:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   *          functionalities of the CORTEX:
  10:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   *           + Initialization and de-initialization functions
  11:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   *           + Peripheral Control functions 
  12:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   *
  13:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   @verbatim  
  14:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   ==============================================================================
  15:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****                         ##### How to use this driver #####
  16:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   ==============================================================================
  17:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** 
  18:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****     [..]  
  19:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****     *** How to configure Interrupts using Cortex HAL driver ***
  20:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****     ===========================================================
  21:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****     [..]     
  22:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****     This section provide functions allowing to configure the NVIC interrupts (IRQ).
  23:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****     The Cortex-M3 exceptions are managed by CMSIS functions.
  24:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****    
  25:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****     (#) Configure the NVIC Priority Grouping using HAL_NVIC_SetPriorityGrouping()
  26:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****         function according to the following table.
  27:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****         
  28:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****      The table below gives the allowed values of the pre-emption priority and subpriority according
  29:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****      to the Priority Grouping configuration performed by HAL_NVIC_SetPriorityGrouping() function.
  30:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****        ============================================================================================
  31:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****          NVIC_PriorityGroup   | NVIC_IRQChannelPreemptionPriority | NVIC_IRQChannelSubPriority  |  
  32:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****        ============================================================================================
  33:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****         NVIC_PRIORITYGROUP_0  |                0                  |            0-15             | 0
  34:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****                               |                                   |                             | 4
  35:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****        --------------------------------------------------------------------------------------------
  36:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****         NVIC_PRIORITYGROUP_1  |                0-1                |            0-7              | 1
  37:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****                               |                                   |                             | 3
  38:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****        --------------------------------------------------------------------------------------------
  39:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****         NVIC_PRIORITYGROUP_2  |                0-3                |            0-3              | 2
  40:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****                               |                                   |                             | 2
  41:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****        --------------------------------------------------------------------------------------------
  42:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****         NVIC_PRIORITYGROUP_3  |                0-7                |            0-1              | 3
  43:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****                               |                                   |                             | 1
  44:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****        --------------------------------------------------------------------------------------------
  45:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****         NVIC_PRIORITYGROUP_4  |                0-15               |            0                | 4
  46:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****                               |                                   |                             | 0
  47:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****        ============================================================================================
  48:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****      (#)  Configure the priority of the selected IRQ Channels using HAL_NVIC_SetPriority() 
  49:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** 
  50:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****      (#)  Enable the selected IRQ Channels using HAL_NVIC_EnableIRQ() 
  51:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****       
  52:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** 
  53:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****      -@- When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible. 
  54:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****          The pending IRQ priority will be managed only by the sub priority.
  55:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****    
  56:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****      -@- IRQ priority order (sorted by highest to lowest priority):
  57:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****         (+@) Lowest pre-emption priority
  58:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****         (+@) Lowest sub priority
  59:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****         (+@) Lowest hardware priority (IRQ number)
  60:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****  
  61:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****     [..]  
  62:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****     *** How to configure Systick using Cortex HAL driver ***
  63:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****     ========================================================
  64:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****     [..]
  65:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****     Setup SysTick Timer for 1 msec interrupts.
  66:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****            
  67:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****    (+) The HAL_SYSTICK_Config()function calls the SysTick_Config() function which
  68:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****        is a CMSIS function that:
  69:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****         (++) Configures the SysTick Reload register with value passed as function parameter.
  70:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****         (++) Configures the SysTick IRQ priority to the lowest value (0x0F).
  71:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****         (++) Resets the SysTick Counter register.
  72:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****         (++) Configures the SysTick Counter clock source to be Core Clock Source (HCLK).
  73:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****         (++) Enables the SysTick Interrupt.
  74:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****         (++) Starts the SysTick Counter.
  75:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****     
  76:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****    (+) You can change the SysTick Clock source to be HCLK_Div8 by calling the macro
  77:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****        __HAL_CORTEX_SYSTICKCLK_CONFIG(SYSTICK_CLKSOURCE_HCLK_DIV8) just after the
  78:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****        HAL_SYSTICK_Config() function call. The __HAL_CORTEX_SYSTICKCLK_CONFIG() macro is defined
  79:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****        inside the stm32f2xx_hal_cortex.h file.
  80:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** 
  81:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****    (+) You can change the SysTick IRQ priority by calling the
  82:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****        HAL_NVIC_SetPriority(SysTick_IRQn,...) function just after the HAL_SYSTICK_Config() function
  83:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****        call. The HAL_NVIC_SetPriority() call the NVIC_SetPriority() function which is a CMSIS funct
  84:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** 
  85:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****    (+) To adjust the SysTick time base, use the following formula:
  86:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****                             
  87:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****        Reload Value = SysTick Counter Clock (Hz) x  Desired Time base (s)
  88:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****        (++) Reload Value is the parameter to be passed for HAL_SYSTICK_Config() function
  89:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****        (++) Reload Value should not exceed 0xFFFFFF
  90:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****    
  91:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   @endverbatim
  92:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   ******************************************************************************
  93:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   * @attention
  94:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   *
  95:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   * <h2><center>&copy; COPYRIGHT(c) 2014 STMicroelectronics</center></h2>
  96:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   *
  97:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   * Redistribution and use in source and binary forms, with or without modification,
  98:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   * are permitted provided that the following conditions are met:
  99:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   *   1. Redistributions of source code must retain the above copyright notice,
 100:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   *      this list of conditions and the following disclaimer.
 101:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
 102:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   *      this list of conditions and the following disclaimer in the documentation
 103:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   *      and/or other materials provided with the distribution.
 104:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
 105:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   *      may be used to endorse or promote products derived from this software
 106:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   *      without specific prior written permission.
 107:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   *
 108:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 109:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 110:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 111:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 112:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 113:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 114:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 115:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 116:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 117:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 118:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   *
 119:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   ******************************************************************************
 120:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   */
 121:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** 
 122:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** /* Includes ------------------------------------------------------------------*/
 123:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** #include "stm32f2xx_hal.h"
 124:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** 
 125:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** /** @addtogroup STM32F2xx_HAL_Driver
 126:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   * @{
 127:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   */
 128:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** 
 129:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** /** @defgroup CORTEX 
 130:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   * @brief CORTEX HAL module driver
 131:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   * @{
 132:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   */
 133:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** 
 134:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** #ifdef HAL_CORTEX_MODULE_ENABLED
 135:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** 
 136:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** /* Private typedef -----------------------------------------------------------*/
 137:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** /* Private define ------------------------------------------------------------*/
 138:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** /* Private macro -------------------------------------------------------------*/
 139:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** /* Private variables ---------------------------------------------------------*/
 140:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** /* Private function prototypes -----------------------------------------------*/
 141:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** /* Private functions ---------------------------------------------------------*/
 142:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** 
 143:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** /** @defgroup CORTEX_Private_Functions
 144:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   * @{
 145:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   */
 146:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** 
 147:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** 
 148:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** /** @defgroup CORTEX_Group1 Initialization and de-initialization functions 
 149:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****  *  @brief    Initialization and Configuration functions 
 150:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****  *
 151:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** @verbatim    
 152:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   ==============================================================================
 153:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****               ##### Initialization and de-initialization functions #####
 154:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   ==============================================================================
 155:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****     [..]
 156:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****       This section provide the Cortex HAL driver functions allowing to configure Interrupts
 157:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****       Systick functionalities 
 158:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** 
 159:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** @endverbatim
 160:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   * @{
 161:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   */
 162:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** 
 163:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** 
 164:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** /**
 165:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   * @brief  Sets the priority grouping field (pre-emption priority and subpriority)
 166:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   *         using the required unlock sequence.
 167:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   * @param  PriorityGroup: The priority grouping bits length. 
 168:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   *         This parameter can be one of the following values:
 169:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   *         @arg NVIC_PRIORITYGROUP_0: 0 bits for pre-emption priority
 170:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   *                                    4 bits for subpriority
 171:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   *         @arg NVIC_PRIORITYGROUP_1: 1 bits for pre-emption priority
 172:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   *                                    3 bits for subpriority
 173:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   *         @arg NVIC_PRIORITYGROUP_2: 2 bits for pre-emption priority
 174:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   *                                    2 bits for subpriority
 175:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   *         @arg NVIC_PRIORITYGROUP_3: 3 bits for pre-emption priority
 176:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   *                                    1 bits for subpriority
 177:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   *         @arg NVIC_PRIORITYGROUP_4: 4 bits for pre-emption priority
 178:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   *                                    0 bits for subpriority
 179:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
 180:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   *         The pending IRQ priority will be managed only by the subpriority. 
 181:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   * @retval None
 182:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   */
 183:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
 184:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** {
 761              		.loc 3 184 0
 762              		.cfi_startproc
 763              		@ args = 0, pretend = 0, frame = 8
 764              		@ frame_needed = 1, uses_anonymous_args = 0
 765 03cc 80B5     		push	{r7, lr}
 766              		.cfi_def_cfa_offset 8
 767              		.cfi_offset 7, -8
 768              		.cfi_offset 14, -4
 769 03ce 82B0     		sub	sp, sp, #8
 770              		.cfi_def_cfa_offset 16
 771 03d0 00AF     		add	r7, sp, #0
 772              		.cfi_def_cfa_register 7
 773 03d2 7860     		str	r0, [r7, #4]
 185:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   /* Check the parameters */
 186:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 187:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   
 188:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
 189:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   NVIC_SetPriorityGrouping(PriorityGroup);
 774              		.loc 3 189 0
 775 03d4 7868     		ldr	r0, [r7, #4]
 776 03d6 FFF713FE 		bl	NVIC_SetPriorityGrouping
 190:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** }
 777              		.loc 3 190 0
 778 03da 0837     		adds	r7, r7, #8
 779 03dc BD46     		mov	sp, r7
 780              		@ sp needed
 781 03de 80BD     		pop	{r7, pc}
 782              		.cfi_endproc
 783              	.LFE55:
 785              		.align	2
 786              		.global	HAL_NVIC_SetPriority
 787              		.thumb
 788              		.thumb_func
 790              	HAL_NVIC_SetPriority:
 791              	.LFB56:
 191:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** 
 192:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** /**
 193:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   * @brief  Sets the priority of an interrupt.
 194:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   * @param  IRQn: External interrupt number
 195:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   *         This parameter can be an enumerator of @ref IRQn_Type enumeration
 196:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32f2xx.h file)
 197:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   * @param  PreemptPriority: The pre-emption priority for the IRQn channel.
 198:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   *         This parameter can be a value between 0 and 15
 199:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   *         A lower priority value indicates a higher priority 
 200:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   * @param  SubPriority: the subpriority level for the IRQ channel.
 201:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   *         This parameter can be a value between 0 and 15
 202:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   *         A lower priority value indicates a higher priority.          
 203:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   * @retval None
 204:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   */
 205:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
 206:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** { 
 792              		.loc 3 206 0
 793              		.cfi_startproc
 794              		@ args = 0, pretend = 0, frame = 24
 795              		@ frame_needed = 1, uses_anonymous_args = 0
 796 03e0 80B5     		push	{r7, lr}
 797              		.cfi_def_cfa_offset 8
 798              		.cfi_offset 7, -8
 799              		.cfi_offset 14, -4
 800 03e2 86B0     		sub	sp, sp, #24
 801              		.cfi_def_cfa_offset 32
 802 03e4 00AF     		add	r7, sp, #0
 803              		.cfi_def_cfa_register 7
 804 03e6 0346     		mov	r3, r0
 805 03e8 B960     		str	r1, [r7, #8]
 806 03ea 7A60     		str	r2, [r7, #4]
 807 03ec FB73     		strb	r3, [r7, #15]
 207:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   uint32_t prioritygroup = 0x00;
 808              		.loc 3 207 0
 809 03ee 0023     		movs	r3, #0
 810 03f0 7B61     		str	r3, [r7, #20]
 208:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   
 209:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   /* Check the parameters */
 210:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 211:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 212:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   
 213:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   prioritygroup = NVIC_GetPriorityGrouping();
 811              		.loc 3 213 0
 812 03f2 FFF72DFE 		bl	NVIC_GetPriorityGrouping
 813 03f6 7861     		str	r0, [r7, #20]
 214:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   
 215:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 814              		.loc 3 215 0
 815 03f8 7869     		ldr	r0, [r7, #20]
 816 03fa B968     		ldr	r1, [r7, #8]
 817 03fc 7A68     		ldr	r2, [r7, #4]
 818 03fe FFF739FF 		bl	NVIC_EncodePriority
 819 0402 0346     		mov	r3, r0
 820 0404 97F90F20 		ldrsb	r2, [r7, #15]
 821 0408 1046     		mov	r0, r2
 822 040a 1946     		mov	r1, r3
 823 040c FFF7DCFE 		bl	NVIC_SetPriority
 216:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** }
 824              		.loc 3 216 0
 825 0410 1837     		adds	r7, r7, #24
 826 0412 BD46     		mov	sp, r7
 827              		@ sp needed
 828 0414 80BD     		pop	{r7, pc}
 829              		.cfi_endproc
 830              	.LFE56:
 832 0416 00BF     		.align	2
 833              		.global	HAL_NVIC_EnableIRQ
 834              		.thumb
 835              		.thumb_func
 837              	HAL_NVIC_EnableIRQ:
 838              	.LFB57:
 217:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** 
 218:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** /**
 219:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   * @brief  Enables a device specific interrupt in the NVIC interrupt controller.
 220:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   * @note   To configure interrupts priority correctly, the NVIC_PriorityGroupConfig()
 221:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   *         function should be called before. 
 222:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   * @param  IRQn External interrupt number
 223:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   *         This parameter can be an enumerator of @ref IRQn_Type enumeration
 224:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32f2xx.h file)  
 225:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   * @retval None
 226:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   */
 227:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
 228:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** {
 839              		.loc 3 228 0
 840              		.cfi_startproc
 841              		@ args = 0, pretend = 0, frame = 8
 842              		@ frame_needed = 1, uses_anonymous_args = 0
 843 0418 80B5     		push	{r7, lr}
 844              		.cfi_def_cfa_offset 8
 845              		.cfi_offset 7, -8
 846              		.cfi_offset 14, -4
 847 041a 82B0     		sub	sp, sp, #8
 848              		.cfi_def_cfa_offset 16
 849 041c 00AF     		add	r7, sp, #0
 850              		.cfi_def_cfa_register 7
 851 041e 0346     		mov	r3, r0
 852 0420 FB71     		strb	r3, [r7, #7]
 229:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   /* Enable interrupt */
 230:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   NVIC_EnableIRQ(IRQn);
 853              		.loc 3 230 0
 854 0422 97F90730 		ldrsb	r3, [r7, #7]
 855 0426 1846     		mov	r0, r3
 856 0428 FFF722FE 		bl	NVIC_EnableIRQ
 231:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** }
 857              		.loc 3 231 0
 858 042c 0837     		adds	r7, r7, #8
 859 042e BD46     		mov	sp, r7
 860              		@ sp needed
 861 0430 80BD     		pop	{r7, pc}
 862              		.cfi_endproc
 863              	.LFE57:
 865 0432 00BF     		.align	2
 866              		.global	HAL_NVIC_DisableIRQ
 867              		.thumb
 868              		.thumb_func
 870              	HAL_NVIC_DisableIRQ:
 871              	.LFB58:
 232:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** 
 233:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** /**
 234:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   * @brief  Disables a device specific interrupt in the NVIC interrupt controller.
 235:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   * @param  IRQn External interrupt number
 236:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   *         This parameter can be an enumerator of @ref IRQn_Type enumeration
 237:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32f2xx.h file)  
 238:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   * @retval None
 239:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   */
 240:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
 241:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** {
 872              		.loc 3 241 0
 873              		.cfi_startproc
 874              		@ args = 0, pretend = 0, frame = 8
 875              		@ frame_needed = 1, uses_anonymous_args = 0
 876 0434 80B5     		push	{r7, lr}
 877              		.cfi_def_cfa_offset 8
 878              		.cfi_offset 7, -8
 879              		.cfi_offset 14, -4
 880 0436 82B0     		sub	sp, sp, #8
 881              		.cfi_def_cfa_offset 16
 882 0438 00AF     		add	r7, sp, #0
 883              		.cfi_def_cfa_register 7
 884 043a 0346     		mov	r3, r0
 885 043c FB71     		strb	r3, [r7, #7]
 242:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   /* Disable interrupt */
 243:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   NVIC_DisableIRQ(IRQn);
 886              		.loc 3 243 0
 887 043e 97F90730 		ldrsb	r3, [r7, #7]
 888 0442 1846     		mov	r0, r3
 889 0444 FFF72EFE 		bl	NVIC_DisableIRQ
 244:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** }
 890              		.loc 3 244 0
 891 0448 0837     		adds	r7, r7, #8
 892 044a BD46     		mov	sp, r7
 893              		@ sp needed
 894 044c 80BD     		pop	{r7, pc}
 895              		.cfi_endproc
 896              	.LFE58:
 898 044e 00BF     		.align	2
 899              		.global	HAL_NVIC_SystemReset
 900              		.thumb
 901              		.thumb_func
 903              	HAL_NVIC_SystemReset:
 904              	.LFB59:
 245:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** 
 246:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** /**
 247:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   * @brief  Initiates a system reset request to reset the MCU.
 248:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   * @param None
 249:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   * @retval None
 250:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   */
 251:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** void HAL_NVIC_SystemReset(void)
 252:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** {
 905              		.loc 3 252 0
 906              		.cfi_startproc
 907              		@ args = 0, pretend = 0, frame = 0
 908              		@ frame_needed = 1, uses_anonymous_args = 0
 909 0450 80B5     		push	{r7, lr}
 910              		.cfi_def_cfa_offset 8
 911              		.cfi_offset 7, -8
 912              		.cfi_offset 14, -4
 913 0452 00AF     		add	r7, sp, #0
 914              		.cfi_def_cfa_register 7
 253:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   /* System Reset */
 254:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   NVIC_SystemReset();
 915              		.loc 3 254 0
 916 0454 FFF778FF 		bl	NVIC_SystemReset
 255:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** }
 917              		.loc 3 255 0
 918 0458 80BD     		pop	{r7, pc}
 919              		.cfi_endproc
 920              	.LFE59:
 922 045a 00BF     		.align	2
 923              		.global	HAL_SYSTICK_Config
 924              		.thumb
 925              		.thumb_func
 927              	HAL_SYSTICK_Config:
 928              	.LFB60:
 256:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** 
 257:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** /**
 258:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   * @brief  Initializes the System Timer and its interrupt, and starts the System Tick Timer.
 259:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   *         Counter is in free running mode to generate periodic interrupts.
 260:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
 261:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   * @retval status:  - 0  Function succeeded.
 262:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   *                  - 1  Function failed.
 263:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   */
 264:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
 265:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** {
 929              		.loc 3 265 0
 930              		.cfi_startproc
 931              		@ args = 0, pretend = 0, frame = 8
 932              		@ frame_needed = 1, uses_anonymous_args = 0
 933 045c 80B5     		push	{r7, lr}
 934              		.cfi_def_cfa_offset 8
 935              		.cfi_offset 7, -8
 936              		.cfi_offset 14, -4
 937 045e 82B0     		sub	sp, sp, #8
 938              		.cfi_def_cfa_offset 16
 939 0460 00AF     		add	r7, sp, #0
 940              		.cfi_def_cfa_register 7
 941 0462 7860     		str	r0, [r7, #4]
 266:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****    return SysTick_Config(TicksNumb);
 942              		.loc 3 266 0
 943 0464 7868     		ldr	r0, [r7, #4]
 944 0466 FFF787FF 		bl	SysTick_Config
 945 046a 0346     		mov	r3, r0
 267:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** }
 946              		.loc 3 267 0
 947 046c 1846     		mov	r0, r3
 948 046e 0837     		adds	r7, r7, #8
 949 0470 BD46     		mov	sp, r7
 950              		@ sp needed
 951 0472 80BD     		pop	{r7, pc}
 952              		.cfi_endproc
 953              	.LFE60:
 955              		.align	2
 956              		.global	HAL_NVIC_GetPriorityGrouping
 957              		.thumb
 958              		.thumb_func
 960              	HAL_NVIC_GetPriorityGrouping:
 961              	.LFB61:
 268:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** /**
 269:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   * @}
 270:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   */
 271:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** 
 272:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** /** @defgroup CORTEX_Group2 Peripheral Control functions 
 273:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****  *  @brief   Cortex control functions 
 274:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****  *
 275:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** @verbatim   
 276:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   ==============================================================================
 277:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****                       ##### Peripheral Control functions #####
 278:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   ==============================================================================  
 279:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****     [..]
 280:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****       This subsection provides a set of functions allowing to control the CORTEX
 281:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****       (NVIC, SYSTICK) functionalities. 
 282:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****  
 283:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****       
 284:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** @endverbatim
 285:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   * @{
 286:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   */
 287:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** 
 288:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** /**
 289:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   * @brief  Gets the priority grouping field from the NVIC Interrupt Controller.
 290:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   * @param  None
 291:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   * @retval Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field)
 292:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   */
 293:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** uint32_t HAL_NVIC_GetPriorityGrouping(void)
 294:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** {
 962              		.loc 3 294 0
 963              		.cfi_startproc
 964              		@ args = 0, pretend = 0, frame = 0
 965              		@ frame_needed = 1, uses_anonymous_args = 0
 966 0474 80B5     		push	{r7, lr}
 967              		.cfi_def_cfa_offset 8
 968              		.cfi_offset 7, -8
 969              		.cfi_offset 14, -4
 970 0476 00AF     		add	r7, sp, #0
 971              		.cfi_def_cfa_register 7
 295:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   /* Get the PRIGROUP[10:8] field value */
 296:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   return NVIC_GetPriorityGrouping();
 972              		.loc 3 296 0
 973 0478 FFF7EAFD 		bl	NVIC_GetPriorityGrouping
 974 047c 0346     		mov	r3, r0
 297:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** }
 975              		.loc 3 297 0
 976 047e 1846     		mov	r0, r3
 977 0480 80BD     		pop	{r7, pc}
 978              		.cfi_endproc
 979              	.LFE61:
 981 0482 00BF     		.align	2
 982              		.global	HAL_NVIC_GetPriority
 983              		.thumb
 984              		.thumb_func
 986              	HAL_NVIC_GetPriority:
 987              	.LFB62:
 298:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** 
 299:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** /**
 300:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   * @brief  Gets the priority of an interrupt.
 301:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   * @param  IRQn: External interrupt number
 302:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   *         This parameter can be an enumerator of @ref IRQn_Type enumeration
 303:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32f2xx.h file)
 304:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   * @param   PriorityGroup: the priority grouping bits length.
 305:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   *         This parameter can be one of the following values:
 306:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   *           @arg NVIC_PRIORITYGROUP_0: 0 bits for pre-emption priority
 307:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   *                                      4 bits for subpriority
 308:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   *           @arg NVIC_PRIORITYGROUP_1: 1 bits for pre-emption priority
 309:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   *                                      3 bits for subpriority
 310:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   *           @arg NVIC_PRIORITYGROUP_2: 2 bits for pre-emption priority
 311:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   *                                      2 bits for subpriority
 312:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   *           @arg NVIC_PRIORITYGROUP_3: 3 bits for pre-emption priority
 313:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   *                                      1 bits for subpriority
 314:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   *           @arg NVIC_PRIORITYGROUP_4: 4 bits for pre-emption priority
 315:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   *                                      0 bits for subpriority
 316:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   * @param  pPreemptPriority: Pointer on the Preemptive priority value (starting from 0).
 317:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   * @param  pSubPriority: Pointer on the Subpriority value (starting from 0).
 318:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   * @retval None
 319:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   */
 320:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t *pPreemptPriority, uint3
 321:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** {
 988              		.loc 3 321 0
 989              		.cfi_startproc
 990              		@ args = 0, pretend = 0, frame = 16
 991              		@ frame_needed = 1, uses_anonymous_args = 0
 992 0484 80B5     		push	{r7, lr}
 993              		.cfi_def_cfa_offset 8
 994              		.cfi_offset 7, -8
 995              		.cfi_offset 14, -4
 996 0486 84B0     		sub	sp, sp, #16
 997              		.cfi_def_cfa_offset 24
 998 0488 00AF     		add	r7, sp, #0
 999              		.cfi_def_cfa_register 7
 1000 048a B960     		str	r1, [r7, #8]
 1001 048c 7A60     		str	r2, [r7, #4]
 1002 048e 3B60     		str	r3, [r7]
 1003 0490 0346     		mov	r3, r0
 1004 0492 FB73     		strb	r3, [r7, #15]
 322:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   /* Check the parameters */
 323:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 324:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****  /* Get priority for Cortex-M system or device specific interrupts */
 325:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   NVIC_DecodePriority(NVIC_GetPriority(IRQn), PriorityGroup, pPreemptPriority, pSubPriority);
 1005              		.loc 3 325 0
 1006 0494 97F90F30 		ldrsb	r3, [r7, #15]
 1007 0498 1846     		mov	r0, r3
 1008 049a FFF7C1FE 		bl	NVIC_GetPriority
 1009 049e 0346     		mov	r3, r0
 1010 04a0 1846     		mov	r0, r3
 1011 04a2 B968     		ldr	r1, [r7, #8]
 1012 04a4 7A68     		ldr	r2, [r7, #4]
 1013 04a6 3B68     		ldr	r3, [r7]
 1014 04a8 FFF718FF 		bl	NVIC_DecodePriority
 326:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** }
 1015              		.loc 3 326 0
 1016 04ac 1037     		adds	r7, r7, #16
 1017 04ae BD46     		mov	sp, r7
 1018              		@ sp needed
 1019 04b0 80BD     		pop	{r7, pc}
 1020              		.cfi_endproc
 1021              	.LFE62:
 1023 04b2 00BF     		.align	2
 1024              		.global	HAL_NVIC_SetPendingIRQ
 1025              		.thumb
 1026              		.thumb_func
 1028              	HAL_NVIC_SetPendingIRQ:
 1029              	.LFB63:
 327:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** 
 328:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** /**
 329:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   * @brief  Sets Pending bit of an external interrupt.
 330:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   * @param  IRQn External interrupt number
 331:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   *         This parameter can be an enumerator of @ref IRQn_Type enumeration
 332:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32f2xx.h file)  
 333:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   * @retval None
 334:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   */
 335:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
 336:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** { 
 1030              		.loc 3 336 0
 1031              		.cfi_startproc
 1032              		@ args = 0, pretend = 0, frame = 8
 1033              		@ frame_needed = 1, uses_anonymous_args = 0
 1034 04b4 80B5     		push	{r7, lr}
 1035              		.cfi_def_cfa_offset 8
 1036              		.cfi_offset 7, -8
 1037              		.cfi_offset 14, -4
 1038 04b6 82B0     		sub	sp, sp, #8
 1039              		.cfi_def_cfa_offset 16
 1040 04b8 00AF     		add	r7, sp, #0
 1041              		.cfi_def_cfa_register 7
 1042 04ba 0346     		mov	r3, r0
 1043 04bc FB71     		strb	r3, [r7, #7]
 337:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   /* Set interrupt pending */
 338:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   NVIC_SetPendingIRQ(IRQn);
 1044              		.loc 3 338 0
 1045 04be 97F90730 		ldrsb	r3, [r7, #7]
 1046 04c2 1846     		mov	r0, r3
 1047 04c4 FFF72AFE 		bl	NVIC_SetPendingIRQ
 339:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** }
 1048              		.loc 3 339 0
 1049 04c8 0837     		adds	r7, r7, #8
 1050 04ca BD46     		mov	sp, r7
 1051              		@ sp needed
 1052 04cc 80BD     		pop	{r7, pc}
 1053              		.cfi_endproc
 1054              	.LFE63:
 1056 04ce 00BF     		.align	2
 1057              		.global	HAL_NVIC_GetPendingIRQ
 1058              		.thumb
 1059              		.thumb_func
 1061              	HAL_NVIC_GetPendingIRQ:
 1062              	.LFB64:
 340:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** 
 341:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** /**
 342:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   * @brief  Gets Pending Interrupt (reads the pending register in the NVIC 
 343:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   *         and returns the pending bit for the specified interrupt).
 344:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   * @param  IRQn External interrupt number
 345:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   *          This parameter can be an enumerator of @ref IRQn_Type enumeration
 346:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   *          (For the complete STM32 Devices IRQ Channels list, please refer to stm32f2xx.h file)  
 347:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   * @retval status: - 0  Interrupt status is not pending.
 348:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   *                 - 1  Interrupt status is pending.
 349:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   */
 350:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
 351:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** { 
 1063              		.loc 3 351 0
 1064              		.cfi_startproc
 1065              		@ args = 0, pretend = 0, frame = 8
 1066              		@ frame_needed = 1, uses_anonymous_args = 0
 1067 04d0 80B5     		push	{r7, lr}
 1068              		.cfi_def_cfa_offset 8
 1069              		.cfi_offset 7, -8
 1070              		.cfi_offset 14, -4
 1071 04d2 82B0     		sub	sp, sp, #8
 1072              		.cfi_def_cfa_offset 16
 1073 04d4 00AF     		add	r7, sp, #0
 1074              		.cfi_def_cfa_register 7
 1075 04d6 0346     		mov	r3, r0
 1076 04d8 FB71     		strb	r3, [r7, #7]
 352:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   /* Return 1 if pending else 0 */
 353:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   return NVIC_GetPendingIRQ(IRQn);
 1077              		.loc 3 353 0
 1078 04da 97F90730 		ldrsb	r3, [r7, #7]
 1079 04de 1846     		mov	r0, r3
 1080 04e0 FFF7FAFD 		bl	NVIC_GetPendingIRQ
 1081 04e4 0346     		mov	r3, r0
 354:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** }
 1082              		.loc 3 354 0
 1083 04e6 1846     		mov	r0, r3
 1084 04e8 0837     		adds	r7, r7, #8
 1085 04ea BD46     		mov	sp, r7
 1086              		@ sp needed
 1087 04ec 80BD     		pop	{r7, pc}
 1088              		.cfi_endproc
 1089              	.LFE64:
 1091 04ee 00BF     		.align	2
 1092              		.global	HAL_NVIC_ClearPendingIRQ
 1093              		.thumb
 1094              		.thumb_func
 1096              	HAL_NVIC_ClearPendingIRQ:
 1097              	.LFB65:
 355:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** 
 356:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** /**
 357:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   * @brief  Clears the pending bit of an external interrupt.
 358:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   * @param  IRQn External interrupt number
 359:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   *         This parameter can be an enumerator of @ref IRQn_Type enumeration
 360:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32f2xx.h file)  
 361:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   * @retval None
 362:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   */
 363:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 364:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** { 
 1098              		.loc 3 364 0
 1099              		.cfi_startproc
 1100              		@ args = 0, pretend = 0, frame = 8
 1101              		@ frame_needed = 1, uses_anonymous_args = 0
 1102 04f0 80B5     		push	{r7, lr}
 1103              		.cfi_def_cfa_offset 8
 1104              		.cfi_offset 7, -8
 1105              		.cfi_offset 14, -4
 1106 04f2 82B0     		sub	sp, sp, #8
 1107              		.cfi_def_cfa_offset 16
 1108 04f4 00AF     		add	r7, sp, #0
 1109              		.cfi_def_cfa_register 7
 1110 04f6 0346     		mov	r3, r0
 1111 04f8 FB71     		strb	r3, [r7, #7]
 365:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   /* Clear pending interrupt */
 366:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   NVIC_ClearPendingIRQ(IRQn);
 1112              		.loc 3 366 0
 1113 04fa 97F90730 		ldrsb	r3, [r7, #7]
 1114 04fe 1846     		mov	r0, r3
 1115 0500 FFF726FE 		bl	NVIC_ClearPendingIRQ
 367:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** }
 1116              		.loc 3 367 0
 1117 0504 0837     		adds	r7, r7, #8
 1118 0506 BD46     		mov	sp, r7
 1119              		@ sp needed
 1120 0508 80BD     		pop	{r7, pc}
 1121              		.cfi_endproc
 1122              	.LFE65:
 1124 050a 00BF     		.align	2
 1125              		.global	HAL_NVIC_GetActive
 1126              		.thumb
 1127              		.thumb_func
 1129              	HAL_NVIC_GetActive:
 1130              	.LFB66:
 368:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** 
 369:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** /**
 370:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   * @brief Gets active interrupt ( reads the active register in NVIC and returns the active bit).
 371:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   * @param IRQn External interrupt number
 372:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   *         This parameter can be an enumerator of @ref IRQn_Type enumeration
 373:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32f2xx.h file)  
 374:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   * @retval status: - 0  Interrupt status is not pending.
 375:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   *                 - 1  Interrupt status is pending.
 376:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   */
 377:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** uint32_t HAL_NVIC_GetActive(IRQn_Type IRQn)
 378:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** { 
 1131              		.loc 3 378 0
 1132              		.cfi_startproc
 1133              		@ args = 0, pretend = 0, frame = 8
 1134              		@ frame_needed = 1, uses_anonymous_args = 0
 1135 050c 80B5     		push	{r7, lr}
 1136              		.cfi_def_cfa_offset 8
 1137              		.cfi_offset 7, -8
 1138              		.cfi_offset 14, -4
 1139 050e 82B0     		sub	sp, sp, #8
 1140              		.cfi_def_cfa_offset 16
 1141 0510 00AF     		add	r7, sp, #0
 1142              		.cfi_def_cfa_register 7
 1143 0512 0346     		mov	r3, r0
 1144 0514 FB71     		strb	r3, [r7, #7]
 379:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   /* Return 1 if active else 0 */
 380:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   return NVIC_GetActive(IRQn);
 1145              		.loc 3 380 0
 1146 0516 97F90730 		ldrsb	r3, [r7, #7]
 1147 051a 1846     		mov	r0, r3
 1148 051c FFF732FE 		bl	NVIC_GetActive
 1149 0520 0346     		mov	r3, r0
 381:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** }
 1150              		.loc 3 381 0
 1151 0522 1846     		mov	r0, r3
 1152 0524 0837     		adds	r7, r7, #8
 1153 0526 BD46     		mov	sp, r7
 1154              		@ sp needed
 1155 0528 80BD     		pop	{r7, pc}
 1156              		.cfi_endproc
 1157              	.LFE66:
 1159 052a 00BF     		.align	2
 1160              		.global	HAL_SYSTICK_CLKSourceConfig
 1161              		.thumb
 1162              		.thumb_func
 1164              	HAL_SYSTICK_CLKSourceConfig:
 1165              	.LFB67:
 382:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** 
 383:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** /**
 384:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   * @brief  Configures the SysTick clock source.
 385:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   * @param  CLKSource: specifies the SysTick clock source.
 386:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   *          This parameter can be one of the following values:
 387:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock 
 388:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
 389:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   * @retval None
 390:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   */
 391:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
 392:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** {
 1166              		.loc 3 392 0
 1167              		.cfi_startproc
 1168              		@ args = 0, pretend = 0, frame = 8
 1169              		@ frame_needed = 1, uses_anonymous_args = 0
 1170              		@ link register save eliminated.
 1171 052c 80B4     		push	{r7}
 1172              		.cfi_def_cfa_offset 4
 1173              		.cfi_offset 7, -4
 1174 052e 83B0     		sub	sp, sp, #12
 1175              		.cfi_def_cfa_offset 16
 1176 0530 00AF     		add	r7, sp, #0
 1177              		.cfi_def_cfa_register 7
 1178 0532 7860     		str	r0, [r7, #4]
 393:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   /* Check the parameters */
 394:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
 395:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 1179              		.loc 3 395 0
 1180 0534 7B68     		ldr	r3, [r7, #4]
 1181 0536 042B     		cmp	r3, #4
 1182 0538 0CD1     		bne	.L51
 396:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   {
 397:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****     SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 1183              		.loc 3 397 0
 1184 053a 4EF21003 		movw	r3, #57360
 1185 053e CEF20003 		movt	r3, 57344
 1186 0542 4EF21002 		movw	r2, #57360
 1187 0546 CEF20002 		movt	r2, 57344
 1188 054a 1268     		ldr	r2, [r2]
 1189 054c 42F00402 		orr	r2, r2, #4
 1190 0550 1A60     		str	r2, [r3]
 1191 0552 0BE0     		b	.L50
 1192              	.L51:
 398:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   }
 399:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   else
 400:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   {
 401:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****     SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 1193              		.loc 3 401 0
 1194 0554 4EF21003 		movw	r3, #57360
 1195 0558 CEF20003 		movt	r3, 57344
 1196 055c 4EF21002 		movw	r2, #57360
 1197 0560 CEF20002 		movt	r2, 57344
 1198 0564 1268     		ldr	r2, [r2]
 1199 0566 22F00402 		bic	r2, r2, #4
 1200 056a 1A60     		str	r2, [r3]
 1201              	.L50:
 402:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   }
 403:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** }
 1202              		.loc 3 403 0
 1203 056c 0C37     		adds	r7, r7, #12
 1204 056e BD46     		mov	sp, r7
 1205              		@ sp needed
 1206 0570 5DF8047B 		ldr	r7, [sp], #4
 1207 0574 7047     		bx	lr
 1208              		.cfi_endproc
 1209              	.LFE67:
 1211 0576 00BF     		.align	2
 1212              		.global	HAL_SYSTICK_IRQHandler
 1213              		.thumb
 1214              		.thumb_func
 1216              	HAL_SYSTICK_IRQHandler:
 1217              	.LFB68:
 404:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** 
 405:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** /**
 406:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   * @brief  This function handles SYSTICK interrupt request.
 407:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   * @param  None
 408:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   * @retval None
 409:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   */
 410:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** void HAL_SYSTICK_IRQHandler(void)
 411:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** {
 1218              		.loc 3 411 0
 1219              		.cfi_startproc
 1220              		@ args = 0, pretend = 0, frame = 0
 1221              		@ frame_needed = 1, uses_anonymous_args = 0
 1222 0578 80B5     		push	{r7, lr}
 1223              		.cfi_def_cfa_offset 8
 1224              		.cfi_offset 7, -8
 1225              		.cfi_offset 14, -4
 1226 057a 00AF     		add	r7, sp, #0
 1227              		.cfi_def_cfa_register 7
 412:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   HAL_SYSTICK_Callback();
 1228              		.loc 3 412 0
 1229 057c FFF7FEFF 		bl	HAL_SYSTICK_Callback
 413:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** }
 1230              		.loc 3 413 0
 1231 0580 80BD     		pop	{r7, pc}
 1232              		.cfi_endproc
 1233              	.LFE68:
 1235 0582 00BF     		.align	2
 1236              		.weak	HAL_SYSTICK_Callback
 1237              		.thumb
 1238              		.thumb_func
 1240              	HAL_SYSTICK_Callback:
 1241              	.LFB69:
 414:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** 
 415:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** /**
 416:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   * @brief  SYSTICK callback.
 417:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   * @param  None
 418:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   * @retval None
 419:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   */
 420:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** __weak void HAL_SYSTICK_Callback(void)
 421:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** {
 1242              		.loc 3 421 0
 1243              		.cfi_startproc
 1244              		@ args = 0, pretend = 0, frame = 0
 1245              		@ frame_needed = 1, uses_anonymous_args = 0
 1246              		@ link register save eliminated.
 1247 0584 80B4     		push	{r7}
 1248              		.cfi_def_cfa_offset 4
 1249              		.cfi_offset 7, -4
 1250 0586 00AF     		add	r7, sp, #0
 1251              		.cfi_def_cfa_register 7
 422:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 423:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****             the HAL_SYSTICK_Callback could be implemented in the user file
 424:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c ****    */
 425:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c **** }
 1252              		.loc 3 425 0
 1253 0588 BD46     		mov	sp, r7
 1254              		@ sp needed
 1255 058a 5DF8047B 		ldr	r7, [sp], #4
 1256 058e 7047     		bx	lr
 1257              		.cfi_endproc
 1258              	.LFE69:
 1260              	.Letext0:
 1261              		.file 4 "D:\\workspace\\console800480\\system/stm32f217xx.h"
 1262              		.file 5 "c:\\program files (x86)\\codesourcery\\arm-none-eabi\\include\\stdint.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f2xx_hal_cortex.c
C:\Users\sagok\AppData\Local\Temp\ccBYBhTx.s:18     .text:00000000 $t
C:\Users\sagok\AppData\Local\Temp\ccBYBhTx.s:22     .text:00000000 NVIC_SetPriorityGrouping
C:\Users\sagok\AppData\Local\Temp\ccBYBhTx.s:80     .text:00000050 NVIC_GetPriorityGrouping
C:\Users\sagok\AppData\Local\Temp\ccBYBhTx.s:111    .text:00000070 NVIC_EnableIRQ
C:\Users\sagok\AppData\Local\Temp\ccBYBhTx.s:150    .text:000000a4 NVIC_DisableIRQ
C:\Users\sagok\AppData\Local\Temp\ccBYBhTx.s:190    .text:000000d8 NVIC_GetPendingIRQ
C:\Users\sagok\AppData\Local\Temp\ccBYBhTx.s:241    .text:0000011c NVIC_SetPendingIRQ
C:\Users\sagok\AppData\Local\Temp\ccBYBhTx.s:281    .text:00000150 NVIC_ClearPendingIRQ
C:\Users\sagok\AppData\Local\Temp\ccBYBhTx.s:321    .text:00000184 NVIC_GetActive
C:\Users\sagok\AppData\Local\Temp\ccBYBhTx.s:372    .text:000001c8 NVIC_SetPriority
C:\Users\sagok\AppData\Local\Temp\ccBYBhTx.s:431    .text:00000220 NVIC_GetPriority
C:\Users\sagok\AppData\Local\Temp\ccBYBhTx.s:488    .text:00000274 NVIC_EncodePriority
C:\Users\sagok\AppData\Local\Temp\ccBYBhTx.s:565    .text:000002dc NVIC_DecodePriority
C:\Users\sagok\AppData\Local\Temp\ccBYBhTx.s:643    .text:00000348 NVIC_SystemReset
C:\Users\sagok\AppData\Local\Temp\ccBYBhTx.s:697    .text:00000378 SysTick_Config
C:\Users\sagok\AppData\Local\Temp\ccBYBhTx.s:758    .text:000003cc HAL_NVIC_SetPriorityGrouping
C:\Users\sagok\AppData\Local\Temp\ccBYBhTx.s:790    .text:000003e0 HAL_NVIC_SetPriority
C:\Users\sagok\AppData\Local\Temp\ccBYBhTx.s:837    .text:00000418 HAL_NVIC_EnableIRQ
C:\Users\sagok\AppData\Local\Temp\ccBYBhTx.s:870    .text:00000434 HAL_NVIC_DisableIRQ
C:\Users\sagok\AppData\Local\Temp\ccBYBhTx.s:903    .text:00000450 HAL_NVIC_SystemReset
C:\Users\sagok\AppData\Local\Temp\ccBYBhTx.s:927    .text:0000045c HAL_SYSTICK_Config
C:\Users\sagok\AppData\Local\Temp\ccBYBhTx.s:960    .text:00000474 HAL_NVIC_GetPriorityGrouping
C:\Users\sagok\AppData\Local\Temp\ccBYBhTx.s:986    .text:00000484 HAL_NVIC_GetPriority
C:\Users\sagok\AppData\Local\Temp\ccBYBhTx.s:1028   .text:000004b4 HAL_NVIC_SetPendingIRQ
C:\Users\sagok\AppData\Local\Temp\ccBYBhTx.s:1061   .text:000004d0 HAL_NVIC_GetPendingIRQ
C:\Users\sagok\AppData\Local\Temp\ccBYBhTx.s:1096   .text:000004f0 HAL_NVIC_ClearPendingIRQ
C:\Users\sagok\AppData\Local\Temp\ccBYBhTx.s:1129   .text:0000050c HAL_NVIC_GetActive
C:\Users\sagok\AppData\Local\Temp\ccBYBhTx.s:1164   .text:0000052c HAL_SYSTICK_CLKSourceConfig
C:\Users\sagok\AppData\Local\Temp\ccBYBhTx.s:1216   .text:00000578 HAL_SYSTICK_IRQHandler
C:\Users\sagok\AppData\Local\Temp\ccBYBhTx.s:1240   .text:00000584 HAL_SYSTICK_Callback
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.7f551ac7fcad8b79b9df4bfdaa536673
                           .group:00000000 wm4.stm32f2xx_hal_conf.h.40.007126baefb9f966c36646edbf8040d2
                           .group:00000000 wm4.stm32f2xx.h.57.5ec1581efc43612c411d33a8686e9ec7
                           .group:00000000 wm4.stm32f217xx.h.52.9c940d76d00294b78837dc334c172fdd
                           .group:00000000 wm4.core_cm3.h.32.49180ccb4d36cabd2d7016d2a51d91ae
                           .group:00000000 wm4.newlib.h.8.384a112feabb3bef7b573ae48cde2e3b
                           .group:00000000 wm4.features.h.22.6a4ca7cd053637cc1d0db6c16f39b2d7
                           .group:00000000 wm4.config.h.183.aa62afef667fb61d15fa64c48beb2f14
                           .group:00000000 wm4._ansi.h.23.5644b60c990a4800b02a6e654e88f93a
                           .group:00000000 wm4.stdint.h.20.54ad762faa59e3c05491630641c8d8bf
                           .group:00000000 wm4.core_cmInstr.h.25.f50f886f2edf670cf199b35fd96f5c91
                           .group:00000000 wm4.core_cm3.h.130.63ab2348a6eed0fdb318040d970b676c
                           .group:00000000 wm4.stm32f217xx.h.978.a5c681952b2f704a0e7f2ba21d08adf5
                           .group:00000000 wm4.stm32f2xx.h.142.bc2155a1f7498bab16371e38413a9e41
                           .group:00000000 wm4.stm32f2xx_hal_def.h.74.8ad2dc8aa82c4fd02e5aeaae592641ba
                           .group:00000000 wm4.stm32f2xx_hal_rcc.h.142.ec0f91cc6576a6acebd17e6dd85829ae
                           .group:00000000 wm4.stm32f2xx_hal_rcc_ex.h.40.0829033e864455c6bdd0db01f8ba5a50
                           .group:00000000 wm4.stm32f2xx_hal_gpio.h.40.ba64e0bb94d9a68835f80159f39a86f1
                           .group:00000000 wm4.stm32f2xx_hal_gpio_ex.h.40.24e547fd402281923f446b510381083f
                           .group:00000000 wm4.stm32f2xx_hal_dma.h.40.5d9732ace2a21a4526ce8f0c52428fff
                           .group:00000000 wm4.stm32f2xx_hal_cortex.h.40.e10263d2ec5d4fa79b4180ce1a38aff1
                           .group:00000000 wm4.stm32f2xx_hal_adc.h.40.89ac8b78113cac4cf63847587daabac9
                           .group:00000000 wm4.stm32f2xx_hal_adc_ex.h.40.7de68ed256ef25526ee31cc017f2c291
                           .group:00000000 wm4.stm32f2xx_hal_flash.h.40.c3171719ce015e9cff20c795e44e886d
                           .group:00000000 wm4.stm32f2xx_hal_flash_ex.h.40.7389508bd24a0aeb077bde0c9fb651eb
                           .group:00000000 wm4.stm32f2xx_ll_fsmc.h.40.c1c32f2e1862f4dd342bd9b80fb895bb
                           .group:00000000 wm4.stm32f2xx_hal_pwr.h.40.812df32e5c31b609a128e9db0eb4cbd0
                           .group:00000000 wm4.stm32f2xx_hal_rtc.h.40.850fda5fe2cce8797446913dee18382f
                           .group:00000000 wm4.stm32f2xx_hal_rtc_ex.h.40.f3e0c408e3bf4e8a0352d7ec9a18a822
                           .group:00000000 wm4.stm32f2xx_ll_sdmmc.h.40.3719ab487c4b77401c572f459adf6eb7
                           .group:00000000 wm4.stm32f2xx_hal_sd.h.58.760215394dcc316161a6482c0af9b866
                           .group:00000000 wm4.stm32f2xx_hal_spi.h.40.7984243dbaba8b21c6392998a47e6987
                           .group:00000000 wm4.stm32f2xx_hal_tim.h.40.d79172f25d0e9a15dc346aba8515bdd6
                           .group:00000000 wm4.stm32f2xx_hal_tim_ex.h.40.361f280a7a3f60b4b238bb99ca728d83
                           .group:00000000 wm4.stm32f2xx_hal_uart.h.40.d74def561ae6f78f40f477c8426ecbef
                           .group:00000000 wm4.stm32f2xx_ll_usb.h.40.9b0206a05bc6ce3bec1648b51f22cb81
                           .group:00000000 wm4.stm32f2xx_hal_pcd.h.99.11faba414c39e357b2f23364912d0605
                           .group:00000000 wm4.stm32f2xx_hal_hcd.h.40.44ee5e972983ae0139ddbacdc75c44ef
                           .group:00000000 wm4.stm32f2xx_hal.h.64.ed79ee83e52b151b3c365392b398f866

NO UNDEFINED SYMBOLS
