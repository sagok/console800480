   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f2xx_hal_adc.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.align	2
  19              		.global	HAL_ADC_Init
  20              		.thumb
  21              		.thumb_func
  23              	HAL_ADC_Init:
  24              	.LFB55:
  25              		.file 1 "../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c"
   1:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /**
   2:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   ******************************************************************************
   3:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @file    stm32f2xx_hal_adc.c
   4:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @author  MCD Application Team
   5:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @version V1.0.1
   6:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @date    25-March-2014
   7:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *          functionalities of the Analog to Digital Convertor (ADC) peripheral:
   9:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *           + Initialization and de-initialization functions
  10:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *           + IO operation functions
  11:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *           + State and errors functions
  12:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *         
  13:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   @verbatim
  14:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   ==============================================================================
  15:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****                     ##### ADC Peripheral features #####
  16:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   ==============================================================================
  17:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   [..] 
  18:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   (#) 12-bit, 10-bit, 8-bit or 6-bit configurable resolution.
  19:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   (#) Interrupt generation at the end of conversion, end of injected conversion,  
  20:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       and in case of analog watchdog or overrun events
  21:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   (#) Single and continuous conversion modes.
  22:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   (#) Scan mode for automatic conversion of channel 0 to channel x.
  23:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   (#) Data alignment with in-built data coherency.
  24:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   (#) Channel-wise programmable sampling time.
  25:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   (#) External trigger option with configurable polarity for both regular and 
  26:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       injected conversion.
  27:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   (#) Dual/Triple mode (on devices with 2 ADCs or more).
  28:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   (#) Configurable DMA data storage in Dual/Triple ADC mode. 
  29:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   (#) Configurable delay between conversions in Dual/Triple interleaved mode.
  30:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   (#) ADC conversion type (refer to the datasheets).
  31:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   (#) ADC supply requirements: 2.4 V to 3.6 V at full speed and down to 1.8 V at 
  32:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       slower speed.
  33:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   (#) ADC input range: VREF(minus) = VIN = VREF(plus).
  34:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   (#) DMA request generation during regular channel conversion.
  35:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
  36:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
  37:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****                      ##### How to use this driver #####
  38:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   ==============================================================================
  39:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     [..]
  40:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     (#)Initialize the ADC low level resources by implementing the HAL_ADC_MspInit():
  41:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****        (##) Enable the ADC interface clock using __ADC_CLK_ENABLE()
  42:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****        (##) ADC pins configuration
  43:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****              (+++) Enable the clock for the ADC GPIOs using the following function:
  44:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****                    __GPIOx_CLK_ENABLE()  
  45:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****              (+++) Configure these ADC pins in analog mode using HAL_GPIO_Init() 
  46:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****        (##) In case of using interrupts (e.g. HAL_ADC_Start_IT())
  47:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****              (+++) Configure the ADC interrupt priority using HAL_NVIC_SetPriority()
  48:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****              (+++) Enable the ADC IRQ handler using HAL_NVIC_EnableIRQ()
  49:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****              (+++) In ADC IRQ handler, call HAL_ADC_IRQHandler()
  50:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       (##) In case of using DMA to control data transfer (e.g. HAL_ADC_Start_DMA())
  51:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****              (+++) Enable the DMAx interface clock using __DMAx_CLK_ENABLE()
  52:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****              (+++) Configure and enable two DMA streams stream for managing data
  53:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****                  transfer from peripheral to memory (output stream)
  54:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****              (+++) Associate the initilalized DMA handle to the CRYP DMA handle
  55:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****                  using  __HAL_LINKDMA()
  56:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****              (+++) Configure the priority and enable the NVIC for the transfer complete
  57:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****                  interrupt on the two DMA Streams. The output stream should have higher
  58:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****                  priority than the input stream.
  59:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****                        
  60:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****      (#) Configure the ADC Prescaler, conversion resolution and data alignment 
  61:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****          using the HAL_ADC_Init() function.
  62:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****          
  63:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****      (#) Configure the ADC regular channels group features, use HAL_ADC_Init()
  64:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****          and HAL_ADC_ConfigChannel() functions.
  65:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****          
  66:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****      (#) Three mode of operations are available within this driver :     
  67:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
  68:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****      *** Polling mode IO operation ***
  69:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****      =================================
  70:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****      [..]    
  71:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****        (+) Start the ADC peripheral using HAL_ADC_Start() 
  72:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****        (+) Wait for end of conversion using HAL_ADC_PollForConversion(), at this stage
  73:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****            user can specify the value of timeout according to his end application      
  74:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****        (+) To read the ADC converted values, use the HAL_ADC_GetValue() function.
  75:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****        (+) Stop the ADC peripheral using HAL_ADC_Stop()
  76:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****        
  77:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****      *** Interrupt mode IO operation ***    
  78:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****      ===================================
  79:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****      [..]    
  80:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****        (+) Start the ADC peripheral using HAL_ADC_Start_IT() 
  81:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****        (+) Use HAL_ADC_IRQHandler() called under ADC_IRQHandler() Interrupt subroutine
  82:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****        (+) At ADC end of conversion HAL_ADC_ConvCpltCallback() function is executed and user can 
  83:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****             add his own code by customization of function pointer HAL_ADC_ConvCpltCallback 
  84:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****        (+) In case of ADC Error, HAL_ADC_ErrorCallback() function is executed and user can 
  85:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****             add his own code by customization of function pointer HAL_ADC_ErrorCallback
  86:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****         (+) Stop the ADC peripheral using HAL_ADC_Stop_IT()     
  87:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
  88:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****      *** DMA mode IO operation ***    
  89:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****      ==============================
  90:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****      [..]    
  91:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****        (+) Start the ADC peripheral using HAL_ADC_Start_DMA(), at this stage the user specify the l
  92:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****            of data to be transfered at each end of conversion 
  93:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****        (+) At The end of data transfer by HAL_ADC_ConvCpltCallback() function is executed and user 
  94:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****             add his own code by customization of function pointer HAL_ADC_ConvCpltCallback 
  95:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****        (+) In case of transfer Error, HAL_ADC_ErrorCallback() function is executed and user can 
  96:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****             add his own code by customization of function pointer HAL_ADC_ErrorCallback
  97:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****        (+) Stop the ADC peripheral using HAL_ADC_Stop_DMA()
  98:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****                     
  99:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****      *** ADC HAL driver macros list ***
 100:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****      ============================================= 
 101:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****      [..]
 102:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****        Below the list of most used macros in ADC HAL driver.
 103:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****        
 104:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       (+) __HAL_ADC_ENABLE : Enable the ADC peripheral
 105:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       (+) __HAL_ADC_DISABLE : Disable the ADC peripheral
 106:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       (+) __HAL_ADC_ENABLE_IT: Enable the ADC end of conversion interrupt
 107:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       (+) __HAL_ADC_DISABLE_IT: Disable the ADC end of conversion interrupt
 108:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       (+) __HAL_ADC_GET_IT_SOURCE: Check if the specified ADC interrupt source is enabled or disabl
 109:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       (+) __HAL_ADC_CLEAR_FLAG: Clear the ADC's pending flags
 110:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       (+) __HAL_ADC_GET_FLAG: Get the selected ADC's flag status
 111:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       (+) __HAL_ADC_GET_RESOLUTION: Return resolution bits in CR1 register 
 112:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       
 113:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****      [..] 
 114:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****        (@) You can refer to the ADC HAL driver header file for more useful macros          
 115:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 116:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     @endverbatim
 117:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   ******************************************************************************
 118:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @attention
 119:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *
 120:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * <h2><center>&copy; COPYRIGHT(c) 2014 STMicroelectronics</center></h2>
 121:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *
 122:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * Redistribution and use in source and binary forms, with or without modification,
 123:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * are permitted provided that the following conditions are met:
 124:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *   1. Redistributions of source code must retain the above copyright notice,
 125:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *      this list of conditions and the following disclaimer.
 126:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
 127:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *      this list of conditions and the following disclaimer in the documentation
 128:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *      and/or other materials provided with the distribution.
 129:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
 130:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *      may be used to endorse or promote products derived from this software
 131:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *      without specific prior written permission.
 132:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *
 133:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 134:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 135:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 136:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 137:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 138:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 139:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 140:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 141:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 142:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 143:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *
 144:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   ******************************************************************************
 145:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   */ 
 146:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 147:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /* Includes ------------------------------------------------------------------*/
 148:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** #include "stm32f2xx_hal.h"
 149:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 150:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /** @addtogroup STM32F2xx_HAL_Driver
 151:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @{
 152:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   */
 153:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 154:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /** @defgroup ADC 
 155:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @brief ADC driver modules
 156:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @{
 157:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   */ 
 158:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 159:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** #ifdef HAL_ADC_MODULE_ENABLED
 160:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 161:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /* Private typedef -----------------------------------------------------------*/
 162:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /* Private define ------------------------------------------------------------*/ 
 163:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /* Private macro -------------------------------------------------------------*/
 164:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /* Private variables ---------------------------------------------------------*/
 165:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /* Private function prototypes -----------------------------------------------*/
 166:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** static void ADC_Init(ADC_HandleTypeDef* hadc);
 167:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma);
 168:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** static void ADC_DMAError(DMA_HandleTypeDef *hdma);
 169:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma); 
 170:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /* Private functions ---------------------------------------------------------*/
 171:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 172:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /** @defgroup ADC_Private_Functions
 173:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @{
 174:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   */ 
 175:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 176:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /** @defgroup ADC_Group1 Initialization and de-initialization functions 
 177:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****  *  @brief    Initialization and Configuration functions 
 178:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****  *
 179:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** @verbatim    
 180:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****  ===============================================================================
 181:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****               ##### Initialization and de-initialization functions #####
 182:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****  ===============================================================================
 183:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     [..]  This section provides functions allowing to:
 184:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       (+) Initialize and configure the ADC. 
 185:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       (+) De-initialize the ADC. 
 186:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****          
 187:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** @endverbatim
 188:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @{
 189:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   */
 190:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 191:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /**
 192:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @brief  Initializes the ADCx peripheral according to the specified parameters 
 193:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *         in the ADC_InitStruct and initializes the ADC MSP.
 194:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *           
 195:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @note   This function is used to configure the global features of the ADC ( 
 196:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *         ClockPrescaler, Resolution, Data Alignment and number of conversion), however,
 197:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *         the rest of the configuration parameters are specific to the regular
 198:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *         channels group (scan mode activation, continuous mode activation,
 199:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *         External trigger source and edge, DMA continuous request after the  
 200:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *         last transfer and End of conversion selection).
 201:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *             
 202:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
 203:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *         the configuration information for the specified ADC.  
 204:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @retval HAL status
 205:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   */
 206:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
 207:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** {
  26              		.loc 1 207 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 8
  29              		@ frame_needed = 1, uses_anonymous_args = 0
  30 0000 80B5     		push	{r7, lr}
  31              		.cfi_def_cfa_offset 8
  32              		.cfi_offset 7, -8
  33              		.cfi_offset 14, -4
  34 0002 82B0     		sub	sp, sp, #8
  35              		.cfi_def_cfa_offset 16
  36 0004 00AF     		add	r7, sp, #0
  37              		.cfi_def_cfa_register 7
  38 0006 7860     		str	r0, [r7, #4]
 208:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Check ADC handle */
 209:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   if(hadc == NULL)
  39              		.loc 1 209 0
  40 0008 7B68     		ldr	r3, [r7, #4]
  41 000a 002B     		cmp	r3, #0
  42 000c 01D1     		bne	.L2
 210:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
 211:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****      return HAL_ERROR;
  43              		.loc 1 211 0
  44 000e 0123     		movs	r3, #1
  45 0010 1BE0     		b	.L3
  46              	.L2:
 212:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
 213:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 214:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Check the parameters */
 215:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 216:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 217:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 218:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 219:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 220:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 221:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 222:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 223:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 224:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 225:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 226:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 227:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 228:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   if(hadc->State == HAL_ADC_STATE_RESET)
  47              		.loc 1 228 0
  48 0012 7B68     		ldr	r3, [r7, #4]
  49 0014 93F83D30 		ldrb	r3, [r3, #61]
  50 0018 DBB2     		uxtb	r3, r3
  51 001a 002B     		cmp	r3, #0
  52 001c 02D1     		bne	.L4
 229:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
 230:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Init the low level hardware */
 231:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     HAL_ADC_MspInit(hadc);
  53              		.loc 1 231 0
  54 001e 7868     		ldr	r0, [r7, #4]
  55 0020 FFF7FEFF 		bl	HAL_ADC_MspInit
  56              	.L4:
 232:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
 233:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 234:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Initialize the ADC state */
 235:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   hadc->State = HAL_ADC_STATE_BUSY;
  57              		.loc 1 235 0
  58 0024 7B68     		ldr	r3, [r7, #4]
  59 0026 0222     		movs	r2, #2
  60 0028 83F83D20 		strb	r2, [r3, #61]
 236:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 237:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Set ADC parameters */
 238:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   ADC_Init(hadc);
  61              		.loc 1 238 0
  62 002c 7868     		ldr	r0, [r7, #4]
  63 002e 00F083FD 		bl	ADC_Init
 239:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 240:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Set ADC error code to none */
 241:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   hadc->ErrorCode = HAL_ADC_ERROR_NONE;
  64              		.loc 1 241 0
  65 0032 7B68     		ldr	r3, [r7, #4]
  66 0034 0022     		movs	r2, #0
  67 0036 1A64     		str	r2, [r3, #64]
 242:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 243:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Initialize the ADC state */
 244:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   hadc->State = HAL_ADC_STATE_READY;
  68              		.loc 1 244 0
  69 0038 7B68     		ldr	r3, [r7, #4]
  70 003a 0122     		movs	r2, #1
  71 003c 83F83D20 		strb	r2, [r3, #61]
 245:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 246:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Release Lock */
 247:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
  72              		.loc 1 247 0
  73 0040 7B68     		ldr	r3, [r7, #4]
  74 0042 0022     		movs	r2, #0
  75 0044 83F83C20 		strb	r2, [r3, #60]
 248:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 249:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Return function status */
 250:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   return HAL_OK;
  76              		.loc 1 250 0
  77 0048 0023     		movs	r3, #0
  78              	.L3:
 251:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** }
  79              		.loc 1 251 0
  80 004a 1846     		mov	r0, r3
  81 004c 0837     		adds	r7, r7, #8
  82 004e BD46     		mov	sp, r7
  83              		@ sp needed
  84 0050 80BD     		pop	{r7, pc}
  85              		.cfi_endproc
  86              	.LFE55:
  88 0052 00BF     		.align	2
  89              		.global	HAL_ADC_DeInit
  90              		.thumb
  91              		.thumb_func
  93              	HAL_ADC_DeInit:
  94              	.LFB56:
 252:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 253:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /**
 254:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @brief  Deinitializes the ADCx peripheral registers to their default reset values. 
 255:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
 256:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *         the configuration information for the specified ADC.  
 257:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @retval HAL status
 258:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   */
 259:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
 260:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** {
  95              		.loc 1 260 0
  96              		.cfi_startproc
  97              		@ args = 0, pretend = 0, frame = 8
  98              		@ frame_needed = 1, uses_anonymous_args = 0
  99 0054 80B5     		push	{r7, lr}
 100              		.cfi_def_cfa_offset 8
 101              		.cfi_offset 7, -8
 102              		.cfi_offset 14, -4
 103 0056 82B0     		sub	sp, sp, #8
 104              		.cfi_def_cfa_offset 16
 105 0058 00AF     		add	r7, sp, #0
 106              		.cfi_def_cfa_register 7
 107 005a 7860     		str	r0, [r7, #4]
 261:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Check ADC handle */
 262:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   if(hadc == NULL)
 108              		.loc 1 262 0
 109 005c 7B68     		ldr	r3, [r7, #4]
 110 005e 002B     		cmp	r3, #0
 111 0060 01D1     		bne	.L6
 263:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
 264:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****      return HAL_ERROR;
 112              		.loc 1 264 0
 113 0062 0123     		movs	r3, #1
 114 0064 0EE0     		b	.L7
 115              	.L6:
 265:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   } 
 266:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 267:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Check the parameters */
 268:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 269:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 270:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Change ADC state */
 271:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   hadc->State = HAL_ADC_STATE_BUSY;
 116              		.loc 1 271 0
 117 0066 7B68     		ldr	r3, [r7, #4]
 118 0068 0222     		movs	r2, #2
 119 006a 83F83D20 		strb	r2, [r3, #61]
 272:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 273:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* DeInit the low level hardware */
 274:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   HAL_ADC_MspDeInit(hadc);
 120              		.loc 1 274 0
 121 006e 7868     		ldr	r0, [r7, #4]
 122 0070 FFF7FEFF 		bl	HAL_ADC_MspDeInit
 275:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 276:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Set ADC error code to none */
 277:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   hadc->ErrorCode = HAL_ADC_ERROR_NONE;
 123              		.loc 1 277 0
 124 0074 7B68     		ldr	r3, [r7, #4]
 125 0076 0022     		movs	r2, #0
 126 0078 1A64     		str	r2, [r3, #64]
 278:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 279:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Change ADC state */
 280:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   hadc->State = HAL_ADC_STATE_RESET;
 127              		.loc 1 280 0
 128 007a 7B68     		ldr	r3, [r7, #4]
 129 007c 0022     		movs	r2, #0
 130 007e 83F83D20 		strb	r2, [r3, #61]
 281:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 282:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Return function status */
 283:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   return HAL_OK;
 131              		.loc 1 283 0
 132 0082 0023     		movs	r3, #0
 133              	.L7:
 284:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** }
 134              		.loc 1 284 0
 135 0084 1846     		mov	r0, r3
 136 0086 0837     		adds	r7, r7, #8
 137 0088 BD46     		mov	sp, r7
 138              		@ sp needed
 139 008a 80BD     		pop	{r7, pc}
 140              		.cfi_endproc
 141              	.LFE56:
 143              		.align	2
 144              		.weak	HAL_ADC_MspInit
 145              		.thumb
 146              		.thumb_func
 148              	HAL_ADC_MspInit:
 149              	.LFB57:
 285:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 286:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /**
 287:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @brief  Initializes the ADC MSP.
 288:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
 289:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *         the configuration information for the specified ADC.  
 290:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @retval None
 291:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   */
 292:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** __weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
 293:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** {
 150              		.loc 1 293 0
 151              		.cfi_startproc
 152              		@ args = 0, pretend = 0, frame = 8
 153              		@ frame_needed = 1, uses_anonymous_args = 0
 154              		@ link register save eliminated.
 155 008c 80B4     		push	{r7}
 156              		.cfi_def_cfa_offset 4
 157              		.cfi_offset 7, -4
 158 008e 83B0     		sub	sp, sp, #12
 159              		.cfi_def_cfa_offset 16
 160 0090 00AF     		add	r7, sp, #0
 161              		.cfi_def_cfa_register 7
 162 0092 7860     		str	r0, [r7, #4]
 294:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 295:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****             the HAL_ADC_MspInit could be implemented in the user file
 296:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****    */ 
 297:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** }
 163              		.loc 1 297 0
 164 0094 0C37     		adds	r7, r7, #12
 165 0096 BD46     		mov	sp, r7
 166              		@ sp needed
 167 0098 5DF8047B 		ldr	r7, [sp], #4
 168 009c 7047     		bx	lr
 169              		.cfi_endproc
 170              	.LFE57:
 172 009e 00BF     		.align	2
 173              		.weak	HAL_ADC_MspDeInit
 174              		.thumb
 175              		.thumb_func
 177              	HAL_ADC_MspDeInit:
 178              	.LFB58:
 298:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 299:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /**
 300:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @brief  DeInitializes the ADC MSP.
 301:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
 302:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *         the configuration information for the specified ADC.  
 303:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @retval None
 304:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   */
 305:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** __weak void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
 306:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** {
 179              		.loc 1 306 0
 180              		.cfi_startproc
 181              		@ args = 0, pretend = 0, frame = 8
 182              		@ frame_needed = 1, uses_anonymous_args = 0
 183              		@ link register save eliminated.
 184 00a0 80B4     		push	{r7}
 185              		.cfi_def_cfa_offset 4
 186              		.cfi_offset 7, -4
 187 00a2 83B0     		sub	sp, sp, #12
 188              		.cfi_def_cfa_offset 16
 189 00a4 00AF     		add	r7, sp, #0
 190              		.cfi_def_cfa_register 7
 191 00a6 7860     		str	r0, [r7, #4]
 307:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 308:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****             the HAL_ADC_MspDeInit could be implemented in the user file
 309:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****    */ 
 310:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** }
 192              		.loc 1 310 0
 193 00a8 0C37     		adds	r7, r7, #12
 194 00aa BD46     		mov	sp, r7
 195              		@ sp needed
 196 00ac 5DF8047B 		ldr	r7, [sp], #4
 197 00b0 7047     		bx	lr
 198              		.cfi_endproc
 199              	.LFE58:
 201 00b2 00BF     		.align	2
 202              		.global	HAL_ADC_Start
 203              		.thumb
 204              		.thumb_func
 206              	HAL_ADC_Start:
 207              	.LFB59:
 311:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 312:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /**
 313:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @}
 314:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   */
 315:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 316:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /** @defgroup ADC_Group2 IO operation functions
 317:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****  *  @brief    IO operation functions 
 318:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****  *
 319:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** @verbatim   
 320:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****  ===============================================================================
 321:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****              ##### IO operation functions #####
 322:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****  ===============================================================================  
 323:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     [..]  This section provides functions allowing to:
 324:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       (+) Start conversion of regular channel.
 325:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       (+) Stop conversion of regular channel.
 326:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       (+) Start conversion of regular channel and enable interrupt.
 327:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       (+) Stop conversion of regular channel and disable interrupt.
 328:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       (+) Start conversion of regular channel and enable DMA transfer.
 329:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       (+) Stop conversion of regular channel and disable DMA transfer.
 330:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       (+) Handle ADC interrupt request. 
 331:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****                
 332:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** @endverbatim
 333:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @{
 334:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   */
 335:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 336:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /**
 337:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @brief  Enables ADC and starts conversion of the regular channels.
 338:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
 339:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *         the configuration information for the specified ADC.
 340:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @retval HAL status
 341:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   */
 342:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
 343:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** {
 208              		.loc 1 343 0
 209              		.cfi_startproc
 210              		@ args = 0, pretend = 0, frame = 16
 211              		@ frame_needed = 1, uses_anonymous_args = 0
 212              		@ link register save eliminated.
 213 00b4 80B4     		push	{r7}
 214              		.cfi_def_cfa_offset 4
 215              		.cfi_offset 7, -4
 216 00b6 85B0     		sub	sp, sp, #20
 217              		.cfi_def_cfa_offset 24
 218 00b8 00AF     		add	r7, sp, #0
 219              		.cfi_def_cfa_register 7
 220 00ba 7860     		str	r0, [r7, #4]
 344:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   uint16_t i = 0;
 221              		.loc 1 344 0
 222 00bc 0023     		movs	r3, #0
 223 00be FB81     		strh	r3, [r7, #14]	@ movhi
 345:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 346:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Check the parameters */
 347:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 348:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 349:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 350:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Process locked */
 351:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   __HAL_LOCK(hadc);
 224              		.loc 1 351 0
 225 00c0 7B68     		ldr	r3, [r7, #4]
 226 00c2 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 227 00c6 012B     		cmp	r3, #1
 228 00c8 01D1     		bne	.L11
 229              		.loc 1 351 0 is_stmt 0 discriminator 1
 230 00ca 0223     		movs	r3, #2
 231 00cc 59E0     		b	.L12
 232              	.L11:
 233              		.loc 1 351 0 discriminator 2
 234 00ce 7B68     		ldr	r3, [r7, #4]
 235 00d0 0122     		movs	r2, #1
 236 00d2 83F83C20 		strb	r2, [r3, #60]
 352:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 353:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Check if an injected conversion is ongoing */
 354:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   if(hadc->State == HAL_ADC_STATE_BUSY_INJ)
 237              		.loc 1 354 0 is_stmt 1 discriminator 2
 238 00d6 7B68     		ldr	r3, [r7, #4]
 239 00d8 93F83D30 		ldrb	r3, [r3, #61]
 240 00dc DBB2     		uxtb	r3, r3
 241 00de 222B     		cmp	r3, #34
 242 00e0 04D1     		bne	.L13
 355:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
 356:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Change ADC state */
 357:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     hadc->State = HAL_ADC_STATE_BUSY_INJ_REG;  
 243              		.loc 1 357 0
 244 00e2 7B68     		ldr	r3, [r7, #4]
 245 00e4 3222     		movs	r2, #50
 246 00e6 83F83D20 		strb	r2, [r3, #61]
 247 00ea 03E0     		b	.L14
 248              	.L13:
 358:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
 359:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   else
 360:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
 361:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Change ADC state */
 362:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     hadc->State = HAL_ADC_STATE_BUSY_REG;
 249              		.loc 1 362 0
 250 00ec 7B68     		ldr	r3, [r7, #4]
 251 00ee 1222     		movs	r2, #18
 252 00f0 83F83D20 		strb	r2, [r3, #61]
 253              	.L14:
 363:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   } 
 364:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 365:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Check if ADC peripheral is disabled in order to enable it and wait during 
 366:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****      Tstab time the ADC's stabilization */
 367:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 254              		.loc 1 367 0
 255 00f4 7B68     		ldr	r3, [r7, #4]
 256 00f6 1B68     		ldr	r3, [r3]
 257 00f8 9B68     		ldr	r3, [r3, #8]
 258 00fa 03F00103 		and	r3, r3, #1
 259 00fe 002B     		cmp	r3, #0
 260 0100 10D1     		bne	.L15
 368:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {  
 369:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Enable the Peripheral */
 370:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     __HAL_ADC_ENABLE(hadc);
 261              		.loc 1 370 0
 262 0102 7B68     		ldr	r3, [r7, #4]
 263 0104 1B68     		ldr	r3, [r3]
 264 0106 7A68     		ldr	r2, [r7, #4]
 265 0108 1268     		ldr	r2, [r2]
 266 010a 9268     		ldr	r2, [r2, #8]
 267 010c 42F00102 		orr	r2, r2, #1
 268 0110 9A60     		str	r2, [r3, #8]
 371:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 372:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Delay inserted to wait during Tstab time the ADC's stabilazation */
 373:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     for(; i <= 540; i++)
 269              		.loc 1 373 0
 270 0112 03E0     		b	.L16
 271              	.L17:
 272              	.LBB8:
 273              	.LBB9:
 274              		.file 2 "D:\\workspace\\console800480\\system/core_cmInstr.h"
   1:D:\workspace\console800480\system\core_cmInstr.h **** /**************************************************************************//**
   2:D:\workspace\console800480\system\core_cmInstr.h ****  * @file     core_cmInstr.h
   3:D:\workspace\console800480\system\core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:D:\workspace\console800480\system\core_cmInstr.h ****  * @version  V2.10
   5:D:\workspace\console800480\system\core_cmInstr.h ****  * @date     19. July 2011
   6:D:\workspace\console800480\system\core_cmInstr.h ****  *
   7:D:\workspace\console800480\system\core_cmInstr.h ****  * @note
   8:D:\workspace\console800480\system\core_cmInstr.h ****  * Copyright (C) 2009-2011 ARM Limited. All rights reserved.
   9:D:\workspace\console800480\system\core_cmInstr.h ****  *
  10:D:\workspace\console800480\system\core_cmInstr.h ****  * @par
  11:D:\workspace\console800480\system\core_cmInstr.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:D:\workspace\console800480\system\core_cmInstr.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:D:\workspace\console800480\system\core_cmInstr.h ****  * within development tools that are supporting such ARM based processors. 
  14:D:\workspace\console800480\system\core_cmInstr.h ****  *
  15:D:\workspace\console800480\system\core_cmInstr.h ****  * @par
  16:D:\workspace\console800480\system\core_cmInstr.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:D:\workspace\console800480\system\core_cmInstr.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:D:\workspace\console800480\system\core_cmInstr.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:D:\workspace\console800480\system\core_cmInstr.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:D:\workspace\console800480\system\core_cmInstr.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:D:\workspace\console800480\system\core_cmInstr.h ****  *
  22:D:\workspace\console800480\system\core_cmInstr.h ****  ******************************************************************************/
  23:D:\workspace\console800480\system\core_cmInstr.h **** 
  24:D:\workspace\console800480\system\core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  25:D:\workspace\console800480\system\core_cmInstr.h **** #define __CORE_CMINSTR_H
  26:D:\workspace\console800480\system\core_cmInstr.h **** 
  27:D:\workspace\console800480\system\core_cmInstr.h **** 
  28:D:\workspace\console800480\system\core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  29:D:\workspace\console800480\system\core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  30:D:\workspace\console800480\system\core_cmInstr.h ****   Access to dedicated instructions
  31:D:\workspace\console800480\system\core_cmInstr.h ****   @{
  32:D:\workspace\console800480\system\core_cmInstr.h **** */
  33:D:\workspace\console800480\system\core_cmInstr.h **** 
  34:D:\workspace\console800480\system\core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  35:D:\workspace\console800480\system\core_cmInstr.h **** /* ARM armcc specific functions */
  36:D:\workspace\console800480\system\core_cmInstr.h **** 
  37:D:\workspace\console800480\system\core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  38:D:\workspace\console800480\system\core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  39:D:\workspace\console800480\system\core_cmInstr.h **** #endif
  40:D:\workspace\console800480\system\core_cmInstr.h **** 
  41:D:\workspace\console800480\system\core_cmInstr.h **** 
  42:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  No Operation
  43:D:\workspace\console800480\system\core_cmInstr.h **** 
  44:D:\workspace\console800480\system\core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  45:D:\workspace\console800480\system\core_cmInstr.h ****  */
  46:D:\workspace\console800480\system\core_cmInstr.h **** #define __NOP                             __nop
  47:D:\workspace\console800480\system\core_cmInstr.h **** 
  48:D:\workspace\console800480\system\core_cmInstr.h **** 
  49:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Wait For Interrupt
  50:D:\workspace\console800480\system\core_cmInstr.h **** 
  51:D:\workspace\console800480\system\core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  52:D:\workspace\console800480\system\core_cmInstr.h ****     until one of a number of events occurs.
  53:D:\workspace\console800480\system\core_cmInstr.h ****  */
  54:D:\workspace\console800480\system\core_cmInstr.h **** #define __WFI                             __wfi
  55:D:\workspace\console800480\system\core_cmInstr.h **** 
  56:D:\workspace\console800480\system\core_cmInstr.h **** 
  57:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Wait For Event
  58:D:\workspace\console800480\system\core_cmInstr.h **** 
  59:D:\workspace\console800480\system\core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  60:D:\workspace\console800480\system\core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  61:D:\workspace\console800480\system\core_cmInstr.h ****  */
  62:D:\workspace\console800480\system\core_cmInstr.h **** #define __WFE                             __wfe
  63:D:\workspace\console800480\system\core_cmInstr.h **** 
  64:D:\workspace\console800480\system\core_cmInstr.h **** 
  65:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Send Event
  66:D:\workspace\console800480\system\core_cmInstr.h **** 
  67:D:\workspace\console800480\system\core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  68:D:\workspace\console800480\system\core_cmInstr.h ****  */
  69:D:\workspace\console800480\system\core_cmInstr.h **** #define __SEV                             __sev
  70:D:\workspace\console800480\system\core_cmInstr.h **** 
  71:D:\workspace\console800480\system\core_cmInstr.h **** 
  72:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  73:D:\workspace\console800480\system\core_cmInstr.h **** 
  74:D:\workspace\console800480\system\core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor, 
  75:D:\workspace\console800480\system\core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or 
  76:D:\workspace\console800480\system\core_cmInstr.h ****     memory, after the instruction has been completed.
  77:D:\workspace\console800480\system\core_cmInstr.h ****  */
  78:D:\workspace\console800480\system\core_cmInstr.h **** #define __ISB()                           __isb(0xF)
  79:D:\workspace\console800480\system\core_cmInstr.h **** 
  80:D:\workspace\console800480\system\core_cmInstr.h **** 
  81:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  82:D:\workspace\console800480\system\core_cmInstr.h **** 
  83:D:\workspace\console800480\system\core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier. 
  84:D:\workspace\console800480\system\core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
  85:D:\workspace\console800480\system\core_cmInstr.h ****  */
  86:D:\workspace\console800480\system\core_cmInstr.h **** #define __DSB()                           __dsb(0xF)
  87:D:\workspace\console800480\system\core_cmInstr.h **** 
  88:D:\workspace\console800480\system\core_cmInstr.h **** 
  89:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Data Memory Barrier
  90:D:\workspace\console800480\system\core_cmInstr.h **** 
  91:D:\workspace\console800480\system\core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before 
  92:D:\workspace\console800480\system\core_cmInstr.h ****     and after the instruction, without ensuring their completion.
  93:D:\workspace\console800480\system\core_cmInstr.h ****  */
  94:D:\workspace\console800480\system\core_cmInstr.h **** #define __DMB()                           __dmb(0xF)
  95:D:\workspace\console800480\system\core_cmInstr.h **** 
  96:D:\workspace\console800480\system\core_cmInstr.h **** 
  97:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
  98:D:\workspace\console800480\system\core_cmInstr.h **** 
  99:D:\workspace\console800480\system\core_cmInstr.h ****     This function reverses the byte order in integer value.
 100:D:\workspace\console800480\system\core_cmInstr.h **** 
 101:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]    value  Value to reverse
 102:D:\workspace\console800480\system\core_cmInstr.h ****     \return               Reversed value
 103:D:\workspace\console800480\system\core_cmInstr.h ****  */
 104:D:\workspace\console800480\system\core_cmInstr.h **** #define __REV                             __rev
 105:D:\workspace\console800480\system\core_cmInstr.h **** 
 106:D:\workspace\console800480\system\core_cmInstr.h **** 
 107:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 108:D:\workspace\console800480\system\core_cmInstr.h **** 
 109:D:\workspace\console800480\system\core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 110:D:\workspace\console800480\system\core_cmInstr.h **** 
 111:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]    value  Value to reverse
 112:D:\workspace\console800480\system\core_cmInstr.h ****     \return               Reversed value
 113:D:\workspace\console800480\system\core_cmInstr.h ****  */
 114:D:\workspace\console800480\system\core_cmInstr.h **** static __INLINE __ASM uint32_t __REV16(uint32_t value)
 115:D:\workspace\console800480\system\core_cmInstr.h **** {
 116:D:\workspace\console800480\system\core_cmInstr.h ****   rev16 r0, r0
 117:D:\workspace\console800480\system\core_cmInstr.h ****   bx lr
 118:D:\workspace\console800480\system\core_cmInstr.h **** }
 119:D:\workspace\console800480\system\core_cmInstr.h **** 
 120:D:\workspace\console800480\system\core_cmInstr.h **** 
 121:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 122:D:\workspace\console800480\system\core_cmInstr.h **** 
 123:D:\workspace\console800480\system\core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 124:D:\workspace\console800480\system\core_cmInstr.h **** 
 125:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]    value  Value to reverse
 126:D:\workspace\console800480\system\core_cmInstr.h ****     \return               Reversed value
 127:D:\workspace\console800480\system\core_cmInstr.h ****  */
 128:D:\workspace\console800480\system\core_cmInstr.h **** static __INLINE __ASM int32_t __REVSH(int32_t value)
 129:D:\workspace\console800480\system\core_cmInstr.h **** {
 130:D:\workspace\console800480\system\core_cmInstr.h ****   revsh r0, r0
 131:D:\workspace\console800480\system\core_cmInstr.h ****   bx lr
 132:D:\workspace\console800480\system\core_cmInstr.h **** }
 133:D:\workspace\console800480\system\core_cmInstr.h **** 
 134:D:\workspace\console800480\system\core_cmInstr.h **** 
 135:D:\workspace\console800480\system\core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 136:D:\workspace\console800480\system\core_cmInstr.h **** 
 137:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Reverse bit order of value
 138:D:\workspace\console800480\system\core_cmInstr.h **** 
 139:D:\workspace\console800480\system\core_cmInstr.h ****     This function reverses the bit order of the given value.
 140:D:\workspace\console800480\system\core_cmInstr.h **** 
 141:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]    value  Value to reverse
 142:D:\workspace\console800480\system\core_cmInstr.h ****     \return               Reversed value
 143:D:\workspace\console800480\system\core_cmInstr.h ****  */
 144:D:\workspace\console800480\system\core_cmInstr.h **** #define __RBIT                            __rbit
 145:D:\workspace\console800480\system\core_cmInstr.h **** 
 146:D:\workspace\console800480\system\core_cmInstr.h **** 
 147:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 148:D:\workspace\console800480\system\core_cmInstr.h **** 
 149:D:\workspace\console800480\system\core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 150:D:\workspace\console800480\system\core_cmInstr.h **** 
 151:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 152:D:\workspace\console800480\system\core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 153:D:\workspace\console800480\system\core_cmInstr.h ****  */
 154:D:\workspace\console800480\system\core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 155:D:\workspace\console800480\system\core_cmInstr.h **** 
 156:D:\workspace\console800480\system\core_cmInstr.h **** 
 157:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 158:D:\workspace\console800480\system\core_cmInstr.h **** 
 159:D:\workspace\console800480\system\core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 160:D:\workspace\console800480\system\core_cmInstr.h **** 
 161:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 162:D:\workspace\console800480\system\core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 163:D:\workspace\console800480\system\core_cmInstr.h ****  */
 164:D:\workspace\console800480\system\core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 165:D:\workspace\console800480\system\core_cmInstr.h **** 
 166:D:\workspace\console800480\system\core_cmInstr.h **** 
 167:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 168:D:\workspace\console800480\system\core_cmInstr.h **** 
 169:D:\workspace\console800480\system\core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 170:D:\workspace\console800480\system\core_cmInstr.h **** 
 171:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 172:D:\workspace\console800480\system\core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 173:D:\workspace\console800480\system\core_cmInstr.h ****  */
 174:D:\workspace\console800480\system\core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 175:D:\workspace\console800480\system\core_cmInstr.h **** 
 176:D:\workspace\console800480\system\core_cmInstr.h **** 
 177:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 178:D:\workspace\console800480\system\core_cmInstr.h **** 
 179:D:\workspace\console800480\system\core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 180:D:\workspace\console800480\system\core_cmInstr.h **** 
 181:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]  value  Value to store
 182:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 183:D:\workspace\console800480\system\core_cmInstr.h ****     \return          0  Function succeeded
 184:D:\workspace\console800480\system\core_cmInstr.h ****     \return          1  Function failed
 185:D:\workspace\console800480\system\core_cmInstr.h ****  */
 186:D:\workspace\console800480\system\core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 187:D:\workspace\console800480\system\core_cmInstr.h **** 
 188:D:\workspace\console800480\system\core_cmInstr.h **** 
 189:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 190:D:\workspace\console800480\system\core_cmInstr.h **** 
 191:D:\workspace\console800480\system\core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 192:D:\workspace\console800480\system\core_cmInstr.h **** 
 193:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]  value  Value to store
 194:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 195:D:\workspace\console800480\system\core_cmInstr.h ****     \return          0  Function succeeded
 196:D:\workspace\console800480\system\core_cmInstr.h ****     \return          1  Function failed
 197:D:\workspace\console800480\system\core_cmInstr.h ****  */
 198:D:\workspace\console800480\system\core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 199:D:\workspace\console800480\system\core_cmInstr.h **** 
 200:D:\workspace\console800480\system\core_cmInstr.h **** 
 201:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 202:D:\workspace\console800480\system\core_cmInstr.h **** 
 203:D:\workspace\console800480\system\core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 204:D:\workspace\console800480\system\core_cmInstr.h **** 
 205:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]  value  Value to store
 206:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 207:D:\workspace\console800480\system\core_cmInstr.h ****     \return          0  Function succeeded
 208:D:\workspace\console800480\system\core_cmInstr.h ****     \return          1  Function failed
 209:D:\workspace\console800480\system\core_cmInstr.h ****  */
 210:D:\workspace\console800480\system\core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 211:D:\workspace\console800480\system\core_cmInstr.h **** 
 212:D:\workspace\console800480\system\core_cmInstr.h **** 
 213:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Remove the exclusive lock
 214:D:\workspace\console800480\system\core_cmInstr.h **** 
 215:D:\workspace\console800480\system\core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 216:D:\workspace\console800480\system\core_cmInstr.h **** 
 217:D:\workspace\console800480\system\core_cmInstr.h ****  */
 218:D:\workspace\console800480\system\core_cmInstr.h **** #define __CLREX                           __clrex
 219:D:\workspace\console800480\system\core_cmInstr.h **** 
 220:D:\workspace\console800480\system\core_cmInstr.h **** 
 221:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Signed Saturate
 222:D:\workspace\console800480\system\core_cmInstr.h **** 
 223:D:\workspace\console800480\system\core_cmInstr.h ****     This function saturates a signed value.
 224:D:\workspace\console800480\system\core_cmInstr.h **** 
 225:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]  value  Value to be saturated
 226:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 227:D:\workspace\console800480\system\core_cmInstr.h ****     \return             Saturated value
 228:D:\workspace\console800480\system\core_cmInstr.h ****  */
 229:D:\workspace\console800480\system\core_cmInstr.h **** #define __SSAT                            __ssat
 230:D:\workspace\console800480\system\core_cmInstr.h **** 
 231:D:\workspace\console800480\system\core_cmInstr.h **** 
 232:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Unsigned Saturate
 233:D:\workspace\console800480\system\core_cmInstr.h **** 
 234:D:\workspace\console800480\system\core_cmInstr.h ****     This function saturates an unsigned value.
 235:D:\workspace\console800480\system\core_cmInstr.h **** 
 236:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]  value  Value to be saturated
 237:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 238:D:\workspace\console800480\system\core_cmInstr.h ****     \return             Saturated value
 239:D:\workspace\console800480\system\core_cmInstr.h ****  */
 240:D:\workspace\console800480\system\core_cmInstr.h **** #define __USAT                            __usat
 241:D:\workspace\console800480\system\core_cmInstr.h **** 
 242:D:\workspace\console800480\system\core_cmInstr.h **** 
 243:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Count leading zeros
 244:D:\workspace\console800480\system\core_cmInstr.h **** 
 245:D:\workspace\console800480\system\core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 246:D:\workspace\console800480\system\core_cmInstr.h **** 
 247:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 248:D:\workspace\console800480\system\core_cmInstr.h ****     \return             number of leading zeros in value
 249:D:\workspace\console800480\system\core_cmInstr.h ****  */
 250:D:\workspace\console800480\system\core_cmInstr.h **** #define __CLZ                             __clz 
 251:D:\workspace\console800480\system\core_cmInstr.h **** 
 252:D:\workspace\console800480\system\core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) */
 253:D:\workspace\console800480\system\core_cmInstr.h **** 
 254:D:\workspace\console800480\system\core_cmInstr.h **** 
 255:D:\workspace\console800480\system\core_cmInstr.h **** 
 256:D:\workspace\console800480\system\core_cmInstr.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 257:D:\workspace\console800480\system\core_cmInstr.h **** /* IAR iccarm specific functions */
 258:D:\workspace\console800480\system\core_cmInstr.h **** 
 259:D:\workspace\console800480\system\core_cmInstr.h **** #include <cmsis_iar.h>
 260:D:\workspace\console800480\system\core_cmInstr.h **** 
 261:D:\workspace\console800480\system\core_cmInstr.h **** 
 262:D:\workspace\console800480\system\core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 263:D:\workspace\console800480\system\core_cmInstr.h **** /* GNU gcc specific functions */
 264:D:\workspace\console800480\system\core_cmInstr.h **** 
 265:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  No Operation
 266:D:\workspace\console800480\system\core_cmInstr.h **** 
 267:D:\workspace\console800480\system\core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 268:D:\workspace\console800480\system\core_cmInstr.h ****  */
 269:D:\workspace\console800480\system\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __NOP(void)
 270:D:\workspace\console800480\system\core_cmInstr.h **** {
 271:D:\workspace\console800480\system\core_cmInstr.h ****   __ASM volatile ("nop");
 275              		.loc 2 271 0 discriminator 2
 276              	@ 271 "D:\workspace\console800480\system/core_cmInstr.h" 1
 277 0114 00BF     		nop
 278              	@ 0 "" 2
 279              		.thumb
 280              	.LBE9:
 281              	.LBE8:
 282              		.loc 1 373 0 discriminator 2
 283 0116 FB89     		ldrh	r3, [r7, #14]
 284 0118 0133     		adds	r3, r3, #1
 285 011a FB81     		strh	r3, [r7, #14]	@ movhi
 286              	.L16:
 287              		.loc 1 373 0 is_stmt 0 discriminator 1
 288 011c FB89     		ldrh	r3, [r7, #14]
 289 011e B3F5077F 		cmp	r3, #540
 290 0122 F7D9     		bls	.L17
 291              	.L15:
 374:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     {
 375:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       __NOP();
 376:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     }
 377:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
 378:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 379:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Check if Multimode enabled */
 380:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 292              		.loc 1 380 0 is_stmt 1
 293 0124 4FF40C53 		mov	r3, #8960
 294 0128 C4F20103 		movt	r3, 16385
 295 012c 5B68     		ldr	r3, [r3, #4]
 296 012e 03F01F03 		and	r3, r3, #31
 297 0132 002B     		cmp	r3, #0
 298 0134 0CD1     		bne	.L18
 381:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
 382:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* if no external trigger present enable software conversion of regular channels */
 383:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     if(hadc->Init.ExternalTrigConvEdge == ADC_EXTERNALTRIGCONVEDGE_NONE)
 299              		.loc 1 383 0
 300 0136 7B68     		ldr	r3, [r7, #4]
 301 0138 DB6A     		ldr	r3, [r3, #44]
 302 013a 002B     		cmp	r3, #0
 303 013c 1CD1     		bne	.L20
 384:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     {
 385:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       /* Enable the selected ADC software conversion for regular group */
 386:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 304              		.loc 1 386 0
 305 013e 7B68     		ldr	r3, [r7, #4]
 306 0140 1B68     		ldr	r3, [r3]
 307 0142 7A68     		ldr	r2, [r7, #4]
 308 0144 1268     		ldr	r2, [r2]
 309 0146 9268     		ldr	r2, [r2, #8]
 310 0148 42F08042 		orr	r2, r2, #1073741824
 311 014c 9A60     		str	r2, [r3, #8]
 312 014e 13E0     		b	.L20
 313              	.L18:
 387:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     }
 388:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
 389:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   else
 390:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
 391:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* if instance of handle correspond to ADC1 and  no external trigger present enable software co
 392:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     if((hadc->Instance == ADC1) && (hadc->Init.ExternalTrigConvEdge == ADC_EXTERNALTRIGCONVEDGE_NON
 314              		.loc 1 392 0
 315 0150 7B68     		ldr	r3, [r7, #4]
 316 0152 1A68     		ldr	r2, [r3]
 317 0154 4FF40053 		mov	r3, #8192
 318 0158 C4F20103 		movt	r3, 16385
 319 015c 9A42     		cmp	r2, r3
 320 015e 0BD1     		bne	.L20
 321              		.loc 1 392 0 is_stmt 0 discriminator 1
 322 0160 7B68     		ldr	r3, [r7, #4]
 323 0162 DB6A     		ldr	r3, [r3, #44]
 324 0164 002B     		cmp	r3, #0
 325 0166 07D1     		bne	.L20
 393:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     {
 394:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       /* Enable the selected ADC software conversion for regular group */
 395:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****         hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 326              		.loc 1 395 0 is_stmt 1
 327 0168 7B68     		ldr	r3, [r7, #4]
 328 016a 1B68     		ldr	r3, [r3]
 329 016c 7A68     		ldr	r2, [r7, #4]
 330 016e 1268     		ldr	r2, [r2]
 331 0170 9268     		ldr	r2, [r2, #8]
 332 0172 42F08042 		orr	r2, r2, #1073741824
 333 0176 9A60     		str	r2, [r3, #8]
 334              	.L20:
 396:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     }
 397:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
 398:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 399:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Process unlocked */
 400:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 335              		.loc 1 400 0
 336 0178 7B68     		ldr	r3, [r7, #4]
 337 017a 0022     		movs	r2, #0
 338 017c 83F83C20 		strb	r2, [r3, #60]
 401:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 402:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Return function status */
 403:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   return HAL_OK;
 339              		.loc 1 403 0
 340 0180 0023     		movs	r3, #0
 341              	.L12:
 404:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** }
 342              		.loc 1 404 0
 343 0182 1846     		mov	r0, r3
 344 0184 1437     		adds	r7, r7, #20
 345 0186 BD46     		mov	sp, r7
 346              		@ sp needed
 347 0188 5DF8047B 		ldr	r7, [sp], #4
 348 018c 7047     		bx	lr
 349              		.cfi_endproc
 350              	.LFE59:
 352 018e 00BF     		.align	2
 353              		.global	HAL_ADC_Stop
 354              		.thumb
 355              		.thumb_func
 357              	HAL_ADC_Stop:
 358              	.LFB60:
 405:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 406:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /**
 407:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @brief  Disables ADC and stop conversion of regular channels.
 408:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * 
 409:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @note   Caution: This function will stop also injected channels.  
 410:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *
 411:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
 412:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *         the configuration information for the specified ADC.
 413:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *         last transfer and End of conversion selection).
 414:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @retval HAL status.
 415:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   */
 416:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
 417:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** {
 359              		.loc 1 417 0
 360              		.cfi_startproc
 361              		@ args = 0, pretend = 0, frame = 8
 362              		@ frame_needed = 1, uses_anonymous_args = 0
 363              		@ link register save eliminated.
 364 0190 80B4     		push	{r7}
 365              		.cfi_def_cfa_offset 4
 366              		.cfi_offset 7, -4
 367 0192 83B0     		sub	sp, sp, #12
 368              		.cfi_def_cfa_offset 16
 369 0194 00AF     		add	r7, sp, #0
 370              		.cfi_def_cfa_register 7
 371 0196 7860     		str	r0, [r7, #4]
 418:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Disable the Peripheral */
 419:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   __HAL_ADC_DISABLE(hadc);
 372              		.loc 1 419 0
 373 0198 7B68     		ldr	r3, [r7, #4]
 374 019a 1B68     		ldr	r3, [r3]
 375 019c 7A68     		ldr	r2, [r7, #4]
 376 019e 1268     		ldr	r2, [r2]
 377 01a0 9268     		ldr	r2, [r2, #8]
 378 01a2 22F00102 		bic	r2, r2, #1
 379 01a6 9A60     		str	r2, [r3, #8]
 420:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 421:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Change ADC state */
 422:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   hadc->State = HAL_ADC_STATE_READY;
 380              		.loc 1 422 0
 381 01a8 7B68     		ldr	r3, [r7, #4]
 382 01aa 0122     		movs	r2, #1
 383 01ac 83F83D20 		strb	r2, [r3, #61]
 423:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 424:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Return function status */
 425:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   return HAL_OK;
 384              		.loc 1 425 0
 385 01b0 0023     		movs	r3, #0
 426:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** }
 386              		.loc 1 426 0
 387 01b2 1846     		mov	r0, r3
 388 01b4 0C37     		adds	r7, r7, #12
 389 01b6 BD46     		mov	sp, r7
 390              		@ sp needed
 391 01b8 5DF8047B 		ldr	r7, [sp], #4
 392 01bc 7047     		bx	lr
 393              		.cfi_endproc
 394              	.LFE60:
 396 01be 00BF     		.align	2
 397              		.global	HAL_ADC_PollForConversion
 398              		.thumb
 399              		.thumb_func
 401              	HAL_ADC_PollForConversion:
 402              	.LFB61:
 427:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 428:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /**
 429:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @brief  Poll for regular conversion complete
 430:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
 431:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *         the configuration information for the specified ADC.
 432:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @param  Timeout: Timeout value in millisecond.  
 433:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @retval HAL status
 434:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   */
 435:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
 436:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** {
 403              		.loc 1 436 0
 404              		.cfi_startproc
 405              		@ args = 0, pretend = 0, frame = 16
 406              		@ frame_needed = 1, uses_anonymous_args = 0
 407 01c0 80B5     		push	{r7, lr}
 408              		.cfi_def_cfa_offset 8
 409              		.cfi_offset 7, -8
 410              		.cfi_offset 14, -4
 411 01c2 84B0     		sub	sp, sp, #16
 412              		.cfi_def_cfa_offset 24
 413 01c4 00AF     		add	r7, sp, #0
 414              		.cfi_def_cfa_register 7
 415 01c6 7860     		str	r0, [r7, #4]
 416 01c8 3960     		str	r1, [r7]
 437:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   uint32_t timeout;
 438:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****  
 439:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Get timeout */
 440:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   timeout = HAL_GetTick() + Timeout;  
 417              		.loc 1 440 0
 418 01ca FFF7FEFF 		bl	HAL_GetTick
 419 01ce 0246     		mov	r2, r0
 420 01d0 3B68     		ldr	r3, [r7]
 421 01d2 1344     		add	r3, r3, r2
 422 01d4 FB60     		str	r3, [r7, #12]
 441:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 442:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Check End of conversion flag */
 443:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 423              		.loc 1 443 0
 424 01d6 13E0     		b	.L24
 425              	.L26:
 444:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
 445:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Check for the Timeout */
 446:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     if(Timeout != HAL_MAX_DELAY)
 426              		.loc 1 446 0
 427 01d8 3B68     		ldr	r3, [r7]
 428 01da B3F1FF3F 		cmp	r3, #-1
 429 01de 0FD0     		beq	.L24
 447:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     {
 448:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       if(HAL_GetTick() >= timeout)
 430              		.loc 1 448 0
 431 01e0 FFF7FEFF 		bl	HAL_GetTick
 432 01e4 0246     		mov	r2, r0
 433 01e6 FB68     		ldr	r3, [r7, #12]
 434 01e8 9A42     		cmp	r2, r3
 435 01ea 09D3     		bcc	.L24
 449:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       {
 450:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****         hadc->State= HAL_ADC_STATE_TIMEOUT;
 436              		.loc 1 450 0
 437 01ec 7B68     		ldr	r3, [r7, #4]
 438 01ee 0322     		movs	r2, #3
 439 01f0 83F83D20 		strb	r2, [r3, #61]
 451:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****         /* Process unlocked */
 452:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****         __HAL_UNLOCK(hadc);
 440              		.loc 1 452 0
 441 01f4 7B68     		ldr	r3, [r7, #4]
 442 01f6 0022     		movs	r2, #0
 443 01f8 83F83C20 		strb	r2, [r3, #60]
 453:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****         return HAL_TIMEOUT;
 444              		.loc 1 453 0
 445 01fc 0323     		movs	r3, #3
 446 01fe 16E0     		b	.L25
 447              	.L24:
 443:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
 448              		.loc 1 443 0 discriminator 1
 449 0200 7B68     		ldr	r3, [r7, #4]
 450 0202 1B68     		ldr	r3, [r3]
 451 0204 1B68     		ldr	r3, [r3]
 452 0206 03F00203 		and	r3, r3, #2
 453 020a 002B     		cmp	r3, #0
 454 020c E4D0     		beq	.L26
 454:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       }
 455:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     }
 456:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
 457:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 458:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Check if an injected conversion is ready */
 459:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   if(hadc->State == HAL_ADC_STATE_EOC_INJ)
 455              		.loc 1 459 0
 456 020e 7B68     		ldr	r3, [r7, #4]
 457 0210 93F83D30 		ldrb	r3, [r3, #61]
 458 0214 DBB2     		uxtb	r3, r3
 459 0216 252B     		cmp	r3, #37
 460 0218 04D1     		bne	.L27
 460:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
 461:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Change ADC state */
 462:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     hadc->State = HAL_ADC_STATE_EOC_INJ_REG;  
 461              		.loc 1 462 0
 462 021a 7B68     		ldr	r3, [r7, #4]
 463 021c 3522     		movs	r2, #53
 464 021e 83F83D20 		strb	r2, [r3, #61]
 465 0222 03E0     		b	.L28
 466              	.L27:
 463:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
 464:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   else
 465:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
 466:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Change ADC state */
 467:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     hadc->State = HAL_ADC_STATE_EOC_REG;
 467              		.loc 1 467 0
 468 0224 7B68     		ldr	r3, [r7, #4]
 469 0226 1522     		movs	r2, #21
 470 0228 83F83D20 		strb	r2, [r3, #61]
 471              	.L28:
 468:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
 469:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 470:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Return ADC state */
 471:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   return HAL_OK;
 472              		.loc 1 471 0
 473 022c 0023     		movs	r3, #0
 474              	.L25:
 472:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** }
 475              		.loc 1 472 0
 476 022e 1846     		mov	r0, r3
 477 0230 1037     		adds	r7, r7, #16
 478 0232 BD46     		mov	sp, r7
 479              		@ sp needed
 480 0234 80BD     		pop	{r7, pc}
 481              		.cfi_endproc
 482              	.LFE61:
 484 0236 00BF     		.align	2
 485              		.global	HAL_ADC_PollForEvent
 486              		.thumb
 487              		.thumb_func
 489              	HAL_ADC_PollForEvent:
 490              	.LFB62:
 473:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 474:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /**
 475:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @brief  Poll for conversion event
 476:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
 477:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *         the configuration information for the specified ADC.
 478:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @param  EventType: the ADC event type.
 479:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *          This parameter can be one of the following values:
 480:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *            @arg AWD_EVENT: ADC Analog watch Dog event.
 481:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *            @arg OVR_EVENT: ADC Overrun event.
 482:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @param  Timeout: Timeout value in millisecond.   
 483:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @retval HAL status
 484:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   */
 485:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_PollForEvent(ADC_HandleTypeDef* hadc, uint32_t EventType, uint32_t Timeou
 486:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** {
 491              		.loc 1 486 0
 492              		.cfi_startproc
 493              		@ args = 0, pretend = 0, frame = 24
 494              		@ frame_needed = 1, uses_anonymous_args = 0
 495 0238 80B5     		push	{r7, lr}
 496              		.cfi_def_cfa_offset 8
 497              		.cfi_offset 7, -8
 498              		.cfi_offset 14, -4
 499 023a 86B0     		sub	sp, sp, #24
 500              		.cfi_def_cfa_offset 32
 501 023c 00AF     		add	r7, sp, #0
 502              		.cfi_def_cfa_register 7
 503 023e F860     		str	r0, [r7, #12]
 504 0240 B960     		str	r1, [r7, #8]
 505 0242 7A60     		str	r2, [r7, #4]
 487:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Check the parameters */
 488:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   assert_param(IS_ADC_EVENT_TYPE(EventType));
 489:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 490:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   uint32_t timeout; 
 491:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 492:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Get timeout */
 493:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   timeout = HAL_GetTick() + Timeout;   
 506              		.loc 1 493 0
 507 0244 FFF7FEFF 		bl	HAL_GetTick
 508 0248 0246     		mov	r2, r0
 509 024a 7B68     		ldr	r3, [r7, #4]
 510 024c 1344     		add	r3, r3, r2
 511 024e 7B61     		str	r3, [r7, #20]
 494:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 495:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Check selected event flag */
 496:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   while(!(__HAL_ADC_GET_FLAG(hadc,EventType)))
 512              		.loc 1 496 0
 513 0250 13E0     		b	.L30
 514              	.L32:
 497:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
 498:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Check for the Timeout */
 499:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     if(Timeout != HAL_MAX_DELAY)
 515              		.loc 1 499 0
 516 0252 7B68     		ldr	r3, [r7, #4]
 517 0254 B3F1FF3F 		cmp	r3, #-1
 518 0258 0FD0     		beq	.L30
 500:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     {
 501:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       if(HAL_GetTick() >= timeout)
 519              		.loc 1 501 0
 520 025a FFF7FEFF 		bl	HAL_GetTick
 521 025e 0246     		mov	r2, r0
 522 0260 7B69     		ldr	r3, [r7, #20]
 523 0262 9A42     		cmp	r2, r3
 524 0264 09D3     		bcc	.L30
 502:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       {
 503:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****         hadc->State= HAL_ADC_STATE_TIMEOUT;
 525              		.loc 1 503 0
 526 0266 FB68     		ldr	r3, [r7, #12]
 527 0268 0322     		movs	r2, #3
 528 026a 83F83D20 		strb	r2, [r3, #61]
 504:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****         /* Process unlocked */
 505:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****         __HAL_UNLOCK(hadc);
 529              		.loc 1 505 0
 530 026e FB68     		ldr	r3, [r7, #12]
 531 0270 0022     		movs	r2, #0
 532 0272 83F83C20 		strb	r2, [r3, #60]
 506:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****         return HAL_TIMEOUT;
 533              		.loc 1 506 0
 534 0276 0323     		movs	r3, #3
 535 0278 24E0     		b	.L31
 536              	.L30:
 496:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
 537              		.loc 1 496 0 discriminator 1
 538 027a FB68     		ldr	r3, [r7, #12]
 539 027c 1B68     		ldr	r3, [r3]
 540 027e 1A68     		ldr	r2, [r3]
 541 0280 BB68     		ldr	r3, [r7, #8]
 542 0282 1A40     		ands	r2, r2, r3
 543 0284 BB68     		ldr	r3, [r7, #8]
 544 0286 9A42     		cmp	r2, r3
 545 0288 E3D1     		bne	.L32
 507:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       }
 508:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     }
 509:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
 510:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 511:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Check analog watchdog flag */
 512:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   if(EventType == AWD_EVENT)
 546              		.loc 1 512 0
 547 028a BB68     		ldr	r3, [r7, #8]
 548 028c 012B     		cmp	r3, #1
 549 028e 0CD1     		bne	.L33
 513:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
 514:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****      /* Change ADC state */
 515:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****      hadc->State = HAL_ADC_STATE_AWD;
 550              		.loc 1 515 0
 551 0290 FB68     		ldr	r3, [r7, #12]
 552 0292 0622     		movs	r2, #6
 553 0294 83F83D20 		strb	r2, [r3, #61]
 516:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       
 517:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****      /* Clear the ADCx's analog watchdog flag */
 518:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 554              		.loc 1 518 0
 555 0298 FB68     		ldr	r3, [r7, #12]
 556 029a 1B68     		ldr	r3, [r3]
 557 029c FA68     		ldr	r2, [r7, #12]
 558 029e 1268     		ldr	r2, [r2]
 559 02a0 1268     		ldr	r2, [r2]
 560 02a2 22F00102 		bic	r2, r2, #1
 561 02a6 1A60     		str	r2, [r3]
 562 02a8 0BE0     		b	.L34
 563              	.L33:
 519:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
 520:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   else
 521:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
 522:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****      /* Change ADC state */
 523:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****      hadc->State = HAL_ADC_STATE_ERROR;
 564              		.loc 1 523 0
 565 02aa FB68     		ldr	r3, [r7, #12]
 566 02ac 0422     		movs	r2, #4
 567 02ae 83F83D20 		strb	r2, [r3, #61]
 524:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****      
 525:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****      /* Clear the ADCx's Overrun flag */
 526:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 568              		.loc 1 526 0
 569 02b2 FB68     		ldr	r3, [r7, #12]
 570 02b4 1B68     		ldr	r3, [r3]
 571 02b6 FA68     		ldr	r2, [r7, #12]
 572 02b8 1268     		ldr	r2, [r2]
 573 02ba 1268     		ldr	r2, [r2]
 574 02bc 22F02002 		bic	r2, r2, #32
 575 02c0 1A60     		str	r2, [r3]
 576              	.L34:
 527:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
 528:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 529:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Return ADC state */
 530:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   return HAL_OK;
 577              		.loc 1 530 0
 578 02c2 0023     		movs	r3, #0
 579              	.L31:
 531:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** }
 580              		.loc 1 531 0
 581 02c4 1846     		mov	r0, r3
 582 02c6 1837     		adds	r7, r7, #24
 583 02c8 BD46     		mov	sp, r7
 584              		@ sp needed
 585 02ca 80BD     		pop	{r7, pc}
 586              		.cfi_endproc
 587              	.LFE62:
 589              		.align	2
 590              		.global	HAL_ADC_Start_IT
 591              		.thumb
 592              		.thumb_func
 594              	HAL_ADC_Start_IT:
 595              	.LFB63:
 532:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 533:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 534:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /**
 535:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @brief  Enables the interrupt and starts ADC conversion of regular channels.
 536:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
 537:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *         the configuration information for the specified ADC.
 538:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @retval HAL status.
 539:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   */
 540:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
 541:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** {
 596              		.loc 1 541 0
 597              		.cfi_startproc
 598              		@ args = 0, pretend = 0, frame = 16
 599              		@ frame_needed = 1, uses_anonymous_args = 0
 600              		@ link register save eliminated.
 601 02cc 80B4     		push	{r7}
 602              		.cfi_def_cfa_offset 4
 603              		.cfi_offset 7, -4
 604 02ce 85B0     		sub	sp, sp, #20
 605              		.cfi_def_cfa_offset 24
 606 02d0 00AF     		add	r7, sp, #0
 607              		.cfi_def_cfa_register 7
 608 02d2 7860     		str	r0, [r7, #4]
 542:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   uint16_t i = 0;
 609              		.loc 1 542 0
 610 02d4 0023     		movs	r3, #0
 611 02d6 FB81     		strh	r3, [r7, #14]	@ movhi
 543:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 544:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Check the parameters */
 545:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 546:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 547:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 548:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Process locked */
 549:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   __HAL_LOCK(hadc);
 612              		.loc 1 549 0
 613 02d8 7B68     		ldr	r3, [r7, #4]
 614 02da 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 615 02de 012B     		cmp	r3, #1
 616 02e0 01D1     		bne	.L36
 617              		.loc 1 549 0 is_stmt 0 discriminator 1
 618 02e2 0223     		movs	r3, #2
 619 02e4 6CE0     		b	.L37
 620              	.L36:
 621              		.loc 1 549 0 discriminator 2
 622 02e6 7B68     		ldr	r3, [r7, #4]
 623 02e8 0122     		movs	r2, #1
 624 02ea 83F83C20 		strb	r2, [r3, #60]
 550:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 551:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Check if an injected conversion is ongoing */
 552:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   if(hadc->State == HAL_ADC_STATE_BUSY_INJ)
 625              		.loc 1 552 0 is_stmt 1 discriminator 2
 626 02ee 7B68     		ldr	r3, [r7, #4]
 627 02f0 93F83D30 		ldrb	r3, [r3, #61]
 628 02f4 DBB2     		uxtb	r3, r3
 629 02f6 222B     		cmp	r3, #34
 630 02f8 04D1     		bne	.L38
 553:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
 554:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Change ADC state */
 555:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     hadc->State = HAL_ADC_STATE_BUSY_INJ_REG;  
 631              		.loc 1 555 0
 632 02fa 7B68     		ldr	r3, [r7, #4]
 633 02fc 3222     		movs	r2, #50
 634 02fe 83F83D20 		strb	r2, [r3, #61]
 635 0302 03E0     		b	.L39
 636              	.L38:
 556:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
 557:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   else
 558:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
 559:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Change ADC state */
 560:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     hadc->State = HAL_ADC_STATE_BUSY_REG;
 637              		.loc 1 560 0
 638 0304 7B68     		ldr	r3, [r7, #4]
 639 0306 1222     		movs	r2, #18
 640 0308 83F83D20 		strb	r2, [r3, #61]
 641              	.L39:
 561:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   } 
 562:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 563:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Set ADC error code to none */
 564:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   hadc->ErrorCode = HAL_ADC_ERROR_NONE;
 642              		.loc 1 564 0
 643 030c 7B68     		ldr	r3, [r7, #4]
 644 030e 0022     		movs	r2, #0
 645 0310 1A64     		str	r2, [r3, #64]
 565:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 566:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Check if ADC peripheral is disabled in order to enable it and wait during 
 567:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****      Tstab time the ADC's stabilization */
 568:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 646              		.loc 1 568 0
 647 0312 7B68     		ldr	r3, [r7, #4]
 648 0314 1B68     		ldr	r3, [r3]
 649 0316 9B68     		ldr	r3, [r3, #8]
 650 0318 03F00103 		and	r3, r3, #1
 651 031c 002B     		cmp	r3, #0
 652 031e 10D1     		bne	.L40
 569:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {  
 570:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Enable the Peripheral */
 571:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     __HAL_ADC_ENABLE(hadc);
 653              		.loc 1 571 0
 654 0320 7B68     		ldr	r3, [r7, #4]
 655 0322 1B68     		ldr	r3, [r3]
 656 0324 7A68     		ldr	r2, [r7, #4]
 657 0326 1268     		ldr	r2, [r2]
 658 0328 9268     		ldr	r2, [r2, #8]
 659 032a 42F00102 		orr	r2, r2, #1
 660 032e 9A60     		str	r2, [r3, #8]
 572:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 573:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Delay inserted to wait during Tstab time the ADC's stabilazation */
 574:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     for(; i <= 540; i++)
 661              		.loc 1 574 0
 662 0330 03E0     		b	.L41
 663              	.L42:
 664              	.LBB10:
 665              	.LBB11:
 666              		.loc 2 271 0 discriminator 2
 667              	@ 271 "D:\workspace\console800480\system/core_cmInstr.h" 1
 668 0332 00BF     		nop
 669              	@ 0 "" 2
 670              		.thumb
 671              	.LBE11:
 672              	.LBE10:
 673              		.loc 1 574 0 discriminator 2
 674 0334 FB89     		ldrh	r3, [r7, #14]
 675 0336 0133     		adds	r3, r3, #1
 676 0338 FB81     		strh	r3, [r7, #14]	@ movhi
 677              	.L41:
 678              		.loc 1 574 0 is_stmt 0 discriminator 1
 679 033a FB89     		ldrh	r3, [r7, #14]
 680 033c B3F5077F 		cmp	r3, #540
 681 0340 F7D9     		bls	.L42
 682              	.L40:
 575:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     {
 576:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       __NOP();
 577:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     }
 578:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
 579:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 580:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Enable the ADC overrun interrupt */
 581:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 683              		.loc 1 581 0 is_stmt 1
 684 0342 7B68     		ldr	r3, [r7, #4]
 685 0344 1B68     		ldr	r3, [r3]
 686 0346 7A68     		ldr	r2, [r7, #4]
 687 0348 1268     		ldr	r2, [r2]
 688 034a 5268     		ldr	r2, [r2, #4]
 689 034c 42F08062 		orr	r2, r2, #67108864
 690 0350 5A60     		str	r2, [r3, #4]
 582:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 583:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Enable the ADC end of conversion interrupt for regular group */
 584:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 691              		.loc 1 584 0
 692 0352 7B68     		ldr	r3, [r7, #4]
 693 0354 1B68     		ldr	r3, [r3]
 694 0356 7A68     		ldr	r2, [r7, #4]
 695 0358 1268     		ldr	r2, [r2]
 696 035a 5268     		ldr	r2, [r2, #4]
 697 035c 42F02002 		orr	r2, r2, #32
 698 0360 5A60     		str	r2, [r3, #4]
 585:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 586:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Check if Multimode enabled */
 587:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 699              		.loc 1 587 0
 700 0362 4FF40C53 		mov	r3, #8960
 701 0366 C4F20103 		movt	r3, 16385
 702 036a 5B68     		ldr	r3, [r3, #4]
 703 036c 03F01F03 		and	r3, r3, #31
 704 0370 002B     		cmp	r3, #0
 705 0372 0CD1     		bne	.L43
 588:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
 589:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* if no externel trigger present enable software conversion of regular channels */
 590:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     if (hadc->Init.ExternalTrigConvEdge == ADC_EXTERNALTRIGCONVEDGE_NONE)
 706              		.loc 1 590 0
 707 0374 7B68     		ldr	r3, [r7, #4]
 708 0376 DB6A     		ldr	r3, [r3, #44]
 709 0378 002B     		cmp	r3, #0
 710 037a 1CD1     		bne	.L45
 591:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     {
 592:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       /* Enable the selected ADC software conversion for regular group */
 593:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 711              		.loc 1 593 0
 712 037c 7B68     		ldr	r3, [r7, #4]
 713 037e 1B68     		ldr	r3, [r3]
 714 0380 7A68     		ldr	r2, [r7, #4]
 715 0382 1268     		ldr	r2, [r2]
 716 0384 9268     		ldr	r2, [r2, #8]
 717 0386 42F08042 		orr	r2, r2, #1073741824
 718 038a 9A60     		str	r2, [r3, #8]
 719 038c 13E0     		b	.L45
 720              	.L43:
 594:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     }
 595:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
 596:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   else
 597:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
 598:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* if instance of handle correspond to ADC1 and  no external trigger present enable software co
 599:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     if ((hadc->Instance == (ADC_TypeDef*)0x40012000) && (hadc->Init.ExternalTrigConvEdge == ADC_EXT
 721              		.loc 1 599 0
 722 038e 7B68     		ldr	r3, [r7, #4]
 723 0390 1A68     		ldr	r2, [r3]
 724 0392 4FF40053 		mov	r3, #8192
 725 0396 C4F20103 		movt	r3, 16385
 726 039a 9A42     		cmp	r2, r3
 727 039c 0BD1     		bne	.L45
 728              		.loc 1 599 0 is_stmt 0 discriminator 1
 729 039e 7B68     		ldr	r3, [r7, #4]
 730 03a0 DB6A     		ldr	r3, [r3, #44]
 731 03a2 002B     		cmp	r3, #0
 732 03a4 07D1     		bne	.L45
 600:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     {
 601:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       /* Enable the selected ADC software conversion for regular group */
 602:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****         hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 733              		.loc 1 602 0 is_stmt 1
 734 03a6 7B68     		ldr	r3, [r7, #4]
 735 03a8 1B68     		ldr	r3, [r3]
 736 03aa 7A68     		ldr	r2, [r7, #4]
 737 03ac 1268     		ldr	r2, [r2]
 738 03ae 9268     		ldr	r2, [r2, #8]
 739 03b0 42F08042 		orr	r2, r2, #1073741824
 740 03b4 9A60     		str	r2, [r3, #8]
 741              	.L45:
 603:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     }
 604:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
 605:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 606:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Process unlocked */
 607:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 742              		.loc 1 607 0
 743 03b6 7B68     		ldr	r3, [r7, #4]
 744 03b8 0022     		movs	r2, #0
 745 03ba 83F83C20 		strb	r2, [r3, #60]
 608:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 609:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Return function status */
 610:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   return HAL_OK;
 746              		.loc 1 610 0
 747 03be 0023     		movs	r3, #0
 748              	.L37:
 611:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** }
 749              		.loc 1 611 0
 750 03c0 1846     		mov	r0, r3
 751 03c2 1437     		adds	r7, r7, #20
 752 03c4 BD46     		mov	sp, r7
 753              		@ sp needed
 754 03c6 5DF8047B 		ldr	r7, [sp], #4
 755 03ca 7047     		bx	lr
 756              		.cfi_endproc
 757              	.LFE63:
 759              		.align	2
 760              		.global	HAL_ADC_Stop_IT
 761              		.thumb
 762              		.thumb_func
 764              	HAL_ADC_Stop_IT:
 765              	.LFB64:
 612:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 613:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /**
 614:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @brief  Disables the interrupt and stop ADC conversion of regular channels.
 615:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * 
 616:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @note   Caution: This function will stop also injected channels.  
 617:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *
 618:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
 619:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *         the configuration information for the specified ADC.
 620:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @retval HAL status.
 621:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   */
 622:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
 623:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** {
 766              		.loc 1 623 0
 767              		.cfi_startproc
 768              		@ args = 0, pretend = 0, frame = 8
 769              		@ frame_needed = 1, uses_anonymous_args = 0
 770              		@ link register save eliminated.
 771 03cc 80B4     		push	{r7}
 772              		.cfi_def_cfa_offset 4
 773              		.cfi_offset 7, -4
 774 03ce 83B0     		sub	sp, sp, #12
 775              		.cfi_def_cfa_offset 16
 776 03d0 00AF     		add	r7, sp, #0
 777              		.cfi_def_cfa_register 7
 778 03d2 7860     		str	r0, [r7, #4]
 624:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Disable the ADC end of conversion interrupt for regular group */
 625:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 779              		.loc 1 625 0
 780 03d4 7B68     		ldr	r3, [r7, #4]
 781 03d6 1B68     		ldr	r3, [r3]
 782 03d8 7A68     		ldr	r2, [r7, #4]
 783 03da 1268     		ldr	r2, [r2]
 784 03dc 5268     		ldr	r2, [r2, #4]
 785 03de 22F02002 		bic	r2, r2, #32
 786 03e2 5A60     		str	r2, [r3, #4]
 626:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 627:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Disable the ADC end of conversion interrupt for injected group */
 628:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   __HAL_ADC_DISABLE_IT(hadc, ADC_CR1_JEOCIE);
 787              		.loc 1 628 0
 788 03e4 7B68     		ldr	r3, [r7, #4]
 789 03e6 1B68     		ldr	r3, [r3]
 790 03e8 7A68     		ldr	r2, [r7, #4]
 791 03ea 1268     		ldr	r2, [r2]
 792 03ec 5268     		ldr	r2, [r2, #4]
 793 03ee 22F08002 		bic	r2, r2, #128
 794 03f2 5A60     		str	r2, [r3, #4]
 629:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 630:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Enable the Periphral */
 631:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   __HAL_ADC_DISABLE(hadc);
 795              		.loc 1 631 0
 796 03f4 7B68     		ldr	r3, [r7, #4]
 797 03f6 1B68     		ldr	r3, [r3]
 798 03f8 7A68     		ldr	r2, [r7, #4]
 799 03fa 1268     		ldr	r2, [r2]
 800 03fc 9268     		ldr	r2, [r2, #8]
 801 03fe 22F00102 		bic	r2, r2, #1
 802 0402 9A60     		str	r2, [r3, #8]
 632:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 633:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Change ADC state */
 634:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   hadc->State = HAL_ADC_STATE_READY;
 803              		.loc 1 634 0
 804 0404 7B68     		ldr	r3, [r7, #4]
 805 0406 0122     		movs	r2, #1
 806 0408 83F83D20 		strb	r2, [r3, #61]
 635:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 636:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Return function status */
 637:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   return HAL_OK;
 807              		.loc 1 637 0
 808 040c 0023     		movs	r3, #0
 638:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** }
 809              		.loc 1 638 0
 810 040e 1846     		mov	r0, r3
 811 0410 0C37     		adds	r7, r7, #12
 812 0412 BD46     		mov	sp, r7
 813              		@ sp needed
 814 0414 5DF8047B 		ldr	r7, [sp], #4
 815 0418 7047     		bx	lr
 816              		.cfi_endproc
 817              	.LFE64:
 819 041a 00BF     		.align	2
 820              		.global	HAL_ADC_IRQHandler
 821              		.thumb
 822              		.thumb_func
 824              	HAL_ADC_IRQHandler:
 825              	.LFB65:
 639:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 640:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /**
 641:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @brief  Handles ADC interrupt request  
 642:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
 643:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *         the configuration information for the specified ADC.
 644:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @retval None
 645:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   */
 646:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
 647:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** {
 826              		.loc 1 647 0
 827              		.cfi_startproc
 828              		@ args = 0, pretend = 0, frame = 16
 829              		@ frame_needed = 1, uses_anonymous_args = 0
 830 041c 80B5     		push	{r7, lr}
 831              		.cfi_def_cfa_offset 8
 832              		.cfi_offset 7, -8
 833              		.cfi_offset 14, -4
 834 041e 84B0     		sub	sp, sp, #16
 835              		.cfi_def_cfa_offset 24
 836 0420 00AF     		add	r7, sp, #0
 837              		.cfi_def_cfa_register 7
 838 0422 7860     		str	r0, [r7, #4]
 648:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   uint32_t tmp1 = 0, tmp2 = 0;
 839              		.loc 1 648 0
 840 0424 0023     		movs	r3, #0
 841 0426 FB60     		str	r3, [r7, #12]
 842 0428 0023     		movs	r3, #0
 843 042a BB60     		str	r3, [r7, #8]
 649:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 650:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Check the parameters */
 651:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 652:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 653:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 654:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 655:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 844              		.loc 1 655 0
 845 042c 7B68     		ldr	r3, [r7, #4]
 846 042e 1B68     		ldr	r3, [r3]
 847 0430 1B68     		ldr	r3, [r3]
 848 0432 03F00203 		and	r3, r3, #2
 849 0436 002B     		cmp	r3, #0
 850 0438 0CBF     		ite	eq
 851 043a 0023     		moveq	r3, #0
 852 043c 0123     		movne	r3, #1
 853 043e DBB2     		uxtb	r3, r3
 854 0440 FB60     		str	r3, [r7, #12]
 656:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 855              		.loc 1 656 0
 856 0442 7B68     		ldr	r3, [r7, #4]
 857 0444 1B68     		ldr	r3, [r3]
 858 0446 5B68     		ldr	r3, [r3, #4]
 859 0448 03F02003 		and	r3, r3, #32
 860 044c 002B     		cmp	r3, #0
 861 044e 0CBF     		ite	eq
 862 0450 0023     		moveq	r3, #0
 863 0452 0123     		movne	r3, #1
 864 0454 DBB2     		uxtb	r3, r3
 865 0456 BB60     		str	r3, [r7, #8]
 657:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Check End of conversion flag for regular channels */
 658:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   if(tmp1 && tmp2)
 866              		.loc 1 658 0
 867 0458 FB68     		ldr	r3, [r7, #12]
 868 045a 002B     		cmp	r3, #0
 869 045c 5AD0     		beq	.L49
 870              		.loc 1 658 0 is_stmt 0 discriminator 1
 871 045e BB68     		ldr	r3, [r7, #8]
 872 0460 002B     		cmp	r3, #0
 873 0462 57D0     		beq	.L49
 659:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
 660:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Check if an injected conversion is ready */
 661:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     if(hadc->State == HAL_ADC_STATE_EOC_INJ)
 874              		.loc 1 661 0 is_stmt 1
 875 0464 7B68     		ldr	r3, [r7, #4]
 876 0466 93F83D30 		ldrb	r3, [r3, #61]
 877 046a DBB2     		uxtb	r3, r3
 878 046c 252B     		cmp	r3, #37
 879 046e 04D1     		bne	.L50
 662:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     {
 663:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       /* Change ADC state */
 664:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       hadc->State = HAL_ADC_STATE_EOC_INJ_REG;  
 880              		.loc 1 664 0
 881 0470 7B68     		ldr	r3, [r7, #4]
 882 0472 3522     		movs	r2, #53
 883 0474 83F83D20 		strb	r2, [r3, #61]
 884 0478 03E0     		b	.L51
 885              	.L50:
 665:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     }
 666:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     else
 667:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     {
 668:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       /* Change ADC state */
 669:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       hadc->State = HAL_ADC_STATE_EOC_REG;
 886              		.loc 1 669 0
 887 047a 7B68     		ldr	r3, [r7, #4]
 888 047c 1522     		movs	r2, #21
 889 047e 83F83D20 		strb	r2, [r3, #61]
 890              	.L51:
 670:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     }
 671:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 672:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     if((hadc->Init.ContinuousConvMode == DISABLE) && (hadc->Init.ExternalTrigConvEdge == ADC_EXTERN
 891              		.loc 1 672 0
 892 0482 7B68     		ldr	r3, [r7, #4]
 893 0484 9B69     		ldr	r3, [r3, #24]
 894 0486 002B     		cmp	r3, #0
 895 0488 39D1     		bne	.L52
 896              		.loc 1 672 0 is_stmt 0 discriminator 1
 897 048a 7B68     		ldr	r3, [r7, #4]
 898 048c DB6A     		ldr	r3, [r3, #44]
 899 048e 002B     		cmp	r3, #0
 900 0490 35D1     		bne	.L52
 673:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     {
 674:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       if(hadc->Init.EOCSelection == EOC_SEQ_CONV)
 901              		.loc 1 674 0 is_stmt 1
 902 0492 7B68     		ldr	r3, [r7, #4]
 903 0494 5B69     		ldr	r3, [r3, #20]
 904 0496 002B     		cmp	r3, #0
 905 0498 10D1     		bne	.L53
 675:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       {   
 676:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****         /* DISABLE the ADC end of conversion interrupt for regular group */
 677:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****         __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 906              		.loc 1 677 0
 907 049a 7B68     		ldr	r3, [r7, #4]
 908 049c 1B68     		ldr	r3, [r3]
 909 049e 7A68     		ldr	r2, [r7, #4]
 910 04a0 1268     		ldr	r2, [r2]
 911 04a2 5268     		ldr	r2, [r2, #4]
 912 04a4 22F02002 		bic	r2, r2, #32
 913 04a8 5A60     		str	r2, [r3, #4]
 678:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****         
 679:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****         /* DISABLE the ADC overrun interrupt */
 680:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****         __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 914              		.loc 1 680 0
 915 04aa 7B68     		ldr	r3, [r7, #4]
 916 04ac 1B68     		ldr	r3, [r3]
 917 04ae 7A68     		ldr	r2, [r7, #4]
 918 04b0 1268     		ldr	r2, [r2]
 919 04b2 5268     		ldr	r2, [r2, #4]
 920 04b4 22F08062 		bic	r2, r2, #67108864
 921 04b8 5A60     		str	r2, [r3, #4]
 922 04ba 20E0     		b	.L52
 923              	.L53:
 681:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       }
 682:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       else
 683:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       {
 684:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****         if (hadc->NbrOfCurrentConversionRank == 0)
 924              		.loc 1 684 0
 925 04bc 7B68     		ldr	r3, [r7, #4]
 926 04be 5B6B     		ldr	r3, [r3, #52]
 927 04c0 002B     		cmp	r3, #0
 928 04c2 03D1     		bne	.L54
 685:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****         {
 686:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****           hadc->NbrOfCurrentConversionRank = hadc->Init.NbrOfConversion;
 929              		.loc 1 686 0
 930 04c4 7B68     		ldr	r3, [r7, #4]
 931 04c6 1A6A     		ldr	r2, [r3, #32]
 932 04c8 7B68     		ldr	r3, [r7, #4]
 933 04ca 5A63     		str	r2, [r3, #52]
 934              	.L54:
 687:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****         }
 688:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****         
 689:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****         /* Decrement the number of conversion when an interrupt occurs */
 690:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****         hadc->NbrOfCurrentConversionRank--;
 935              		.loc 1 690 0
 936 04cc 7B68     		ldr	r3, [r7, #4]
 937 04ce 5B6B     		ldr	r3, [r3, #52]
 938 04d0 5A1E     		subs	r2, r3, #1
 939 04d2 7B68     		ldr	r3, [r7, #4]
 940 04d4 5A63     		str	r2, [r3, #52]
 691:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****         
 692:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****         /* Check if all conversions are finished */
 693:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****         if(hadc->NbrOfCurrentConversionRank == 0)
 941              		.loc 1 693 0
 942 04d6 7B68     		ldr	r3, [r7, #4]
 943 04d8 5B6B     		ldr	r3, [r3, #52]
 944 04da 002B     		cmp	r3, #0
 945 04dc 0FD1     		bne	.L52
 694:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****         {
 695:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****           /* DISABLE the ADC end of conversion interrupt for regular group */
 696:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****           __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 946              		.loc 1 696 0
 947 04de 7B68     		ldr	r3, [r7, #4]
 948 04e0 1B68     		ldr	r3, [r3]
 949 04e2 7A68     		ldr	r2, [r7, #4]
 950 04e4 1268     		ldr	r2, [r2]
 951 04e6 5268     		ldr	r2, [r2, #4]
 952 04e8 22F02002 		bic	r2, r2, #32
 953 04ec 5A60     		str	r2, [r3, #4]
 697:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****           
 698:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****           /* DISABLE the ADC overrun interrupt */
 699:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****           __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 954              		.loc 1 699 0
 955 04ee 7B68     		ldr	r3, [r7, #4]
 956 04f0 1B68     		ldr	r3, [r3]
 957 04f2 7A68     		ldr	r2, [r7, #4]
 958 04f4 1268     		ldr	r2, [r2]
 959 04f6 5268     		ldr	r2, [r2, #4]
 960 04f8 22F08062 		bic	r2, r2, #67108864
 961 04fc 5A60     		str	r2, [r3, #4]
 962              	.L52:
 700:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****         }
 701:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       }
 702:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     }
 703:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 704:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Conversion complete callback */ 
 705:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     HAL_ADC_ConvCpltCallback(hadc);
 963              		.loc 1 705 0
 964 04fe 7868     		ldr	r0, [r7, #4]
 965 0500 FFF7FEFF 		bl	HAL_ADC_ConvCpltCallback
 706:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 707:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****    /* Clear the ADCx flag for regular end of conversion */
 708:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc,ADC_FLAG_EOC);
 966              		.loc 1 708 0
 967 0504 7B68     		ldr	r3, [r7, #4]
 968 0506 1B68     		ldr	r3, [r3]
 969 0508 7A68     		ldr	r2, [r7, #4]
 970 050a 1268     		ldr	r2, [r2]
 971 050c 1268     		ldr	r2, [r2]
 972 050e 22F00202 		bic	r2, r2, #2
 973 0512 1A60     		str	r2, [r3]
 974              	.L49:
 709:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
 710:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 711:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 975              		.loc 1 711 0
 976 0514 7B68     		ldr	r3, [r7, #4]
 977 0516 1B68     		ldr	r3, [r3]
 978 0518 1B68     		ldr	r3, [r3]
 979 051a 03F00403 		and	r3, r3, #4
 980 051e 002B     		cmp	r3, #0
 981 0520 0CBF     		ite	eq
 982 0522 0023     		moveq	r3, #0
 983 0524 0123     		movne	r3, #1
 984 0526 DBB2     		uxtb	r3, r3
 985 0528 FB60     		str	r3, [r7, #12]
 712:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 986              		.loc 1 712 0
 987 052a 7B68     		ldr	r3, [r7, #4]
 988 052c 1B68     		ldr	r3, [r3]
 989 052e 5B68     		ldr	r3, [r3, #4]
 990 0530 03F08003 		and	r3, r3, #128
 991 0534 002B     		cmp	r3, #0
 992 0536 0CBF     		ite	eq
 993 0538 0023     		moveq	r3, #0
 994 053a 0123     		movne	r3, #1
 995 053c DBB2     		uxtb	r3, r3
 996 053e BB60     		str	r3, [r7, #8]
 713:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Check End of conversion flag for injected channels */
 714:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   if(tmp1 && tmp2)
 997              		.loc 1 714 0
 998 0540 FB68     		ldr	r3, [r7, #12]
 999 0542 002B     		cmp	r3, #0
 1000 0544 44D0     		beq	.L55
 1001              		.loc 1 714 0 is_stmt 0 discriminator 1
 1002 0546 BB68     		ldr	r3, [r7, #8]
 1003 0548 002B     		cmp	r3, #0
 1004 054a 41D0     		beq	.L55
 715:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
 716:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Check if a regular conversion is ready */
 717:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     if(hadc->State == HAL_ADC_STATE_EOC_REG)
 1005              		.loc 1 717 0 is_stmt 1
 1006 054c 7B68     		ldr	r3, [r7, #4]
 1007 054e 93F83D30 		ldrb	r3, [r3, #61]
 1008 0552 DBB2     		uxtb	r3, r3
 1009 0554 152B     		cmp	r3, #21
 1010 0556 04D1     		bne	.L56
 718:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     {
 719:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       /* Change ADC state */
 720:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       hadc->State = HAL_ADC_STATE_EOC_INJ_REG;  
 1011              		.loc 1 720 0
 1012 0558 7B68     		ldr	r3, [r7, #4]
 1013 055a 3522     		movs	r2, #53
 1014 055c 83F83D20 		strb	r2, [r3, #61]
 1015 0560 03E0     		b	.L57
 1016              	.L56:
 721:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     }
 722:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     else
 723:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     {
 724:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       /* Change ADC state */
 725:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       hadc->State = HAL_ADC_STATE_EOC_INJ;
 1017              		.loc 1 725 0
 1018 0562 7B68     		ldr	r3, [r7, #4]
 1019 0564 2522     		movs	r2, #37
 1020 0566 83F83D20 		strb	r2, [r3, #61]
 1021              	.L57:
 726:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     }
 727:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 728:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 1022              		.loc 1 728 0
 1023 056a 7B68     		ldr	r3, [r7, #4]
 1024 056c 1B68     		ldr	r3, [r3]
 1025 056e 5B68     		ldr	r3, [r3, #4]
 1026 0570 03F48063 		and	r3, r3, #1024
 1027 0574 002B     		cmp	r3, #0
 1028 0576 14BF     		ite	ne
 1029 0578 0023     		movne	r3, #0
 1030 057a 0123     		moveq	r3, #1
 1031 057c DBB2     		uxtb	r3, r3
 1032 057e FB60     		str	r3, [r7, #12]
 729:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 1033              		.loc 1 729 0
 1034 0580 7B68     		ldr	r3, [r7, #4]
 1035 0582 1B68     		ldr	r3, [r3]
 1036 0584 9B68     		ldr	r3, [r3, #8]
 1037 0586 03F44013 		and	r3, r3, #3145728
 1038 058a 002B     		cmp	r3, #0
 1039 058c 14BF     		ite	ne
 1040 058e 0023     		movne	r3, #0
 1041 0590 0123     		moveq	r3, #1
 1042 0592 DBB2     		uxtb	r3, r3
 1043 0594 BB60     		str	r3, [r7, #8]
 730:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     if(((hadc->Init.ContinuousConvMode == DISABLE) || tmp1) && tmp2)
 1044              		.loc 1 730 0
 1045 0596 7B68     		ldr	r3, [r7, #4]
 1046 0598 9B69     		ldr	r3, [r3, #24]
 1047 059a 002B     		cmp	r3, #0
 1048 059c 02D0     		beq	.L58
 1049              		.loc 1 730 0 is_stmt 0 discriminator 2
 1050 059e FB68     		ldr	r3, [r7, #12]
 1051 05a0 002B     		cmp	r3, #0
 1052 05a2 0AD0     		beq	.L59
 1053              	.L58:
 1054              		.loc 1 730 0 discriminator 1
 1055 05a4 BB68     		ldr	r3, [r7, #8]
 1056 05a6 002B     		cmp	r3, #0
 1057 05a8 07D0     		beq	.L59
 731:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     {
 732:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       /* DISABLE the ADC end of conversion interrupt for injected group */
 733:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 1058              		.loc 1 733 0 is_stmt 1
 1059 05aa 7B68     		ldr	r3, [r7, #4]
 1060 05ac 1B68     		ldr	r3, [r3]
 1061 05ae 7A68     		ldr	r2, [r7, #4]
 1062 05b0 1268     		ldr	r2, [r2]
 1063 05b2 5268     		ldr	r2, [r2, #4]
 1064 05b4 22F08002 		bic	r2, r2, #128
 1065 05b8 5A60     		str	r2, [r3, #4]
 1066              	.L59:
 734:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     }
 735:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 736:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Conversion complete callback */ 
 737:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     HAL_ADCEx_InjectedConvCpltCallback(hadc);
 1067              		.loc 1 737 0
 1068 05ba 7868     		ldr	r0, [r7, #4]
 1069 05bc FFF7FEFF 		bl	HAL_ADCEx_InjectedConvCpltCallback
 738:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 739:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****    /* Clear the ADCx flag for injected end of conversion */
 740:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc,ADC_FLAG_JEOC);
 1070              		.loc 1 740 0
 1071 05c0 7B68     		ldr	r3, [r7, #4]
 1072 05c2 1B68     		ldr	r3, [r3]
 1073 05c4 7A68     		ldr	r2, [r7, #4]
 1074 05c6 1268     		ldr	r2, [r2]
 1075 05c8 1268     		ldr	r2, [r2]
 1076 05ca 22F00402 		bic	r2, r2, #4
 1077 05ce 1A60     		str	r2, [r3]
 1078              	.L55:
 741:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
 742:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 743:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 1079              		.loc 1 743 0
 1080 05d0 7B68     		ldr	r3, [r7, #4]
 1081 05d2 1B68     		ldr	r3, [r3]
 1082 05d4 1B68     		ldr	r3, [r3]
 1083 05d6 03F00103 		and	r3, r3, #1
 1084 05da 002B     		cmp	r3, #0
 1085 05dc 0CBF     		ite	eq
 1086 05de 0023     		moveq	r3, #0
 1087 05e0 0123     		movne	r3, #1
 1088 05e2 DBB2     		uxtb	r3, r3
 1089 05e4 FB60     		str	r3, [r7, #12]
 744:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 1090              		.loc 1 744 0
 1091 05e6 7B68     		ldr	r3, [r7, #4]
 1092 05e8 1B68     		ldr	r3, [r3]
 1093 05ea 5B68     		ldr	r3, [r3, #4]
 1094 05ec 03F04003 		and	r3, r3, #64
 1095 05f0 002B     		cmp	r3, #0
 1096 05f2 0CBF     		ite	eq
 1097 05f4 0023     		moveq	r3, #0
 1098 05f6 0123     		movne	r3, #1
 1099 05f8 DBB2     		uxtb	r3, r3
 1100 05fa BB60     		str	r3, [r7, #8]
 745:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Check Analog watchdog flag */
 746:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   if(tmp1 && tmp2)
 1101              		.loc 1 746 0
 1102 05fc FB68     		ldr	r3, [r7, #12]
 1103 05fe 002B     		cmp	r3, #0
 1104 0600 11D0     		beq	.L60
 1105              		.loc 1 746 0 is_stmt 0 discriminator 1
 1106 0602 BB68     		ldr	r3, [r7, #8]
 1107 0604 002B     		cmp	r3, #0
 1108 0606 0ED0     		beq	.L60
 747:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
 748:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Change ADC state */
 749:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     hadc->State = HAL_ADC_STATE_AWD;
 1109              		.loc 1 749 0 is_stmt 1
 1110 0608 7B68     		ldr	r3, [r7, #4]
 1111 060a 0622     		movs	r2, #6
 1112 060c 83F83D20 		strb	r2, [r3, #61]
 750:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       
 751:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Clear the ADCx's Analog watchdog flag */
 752:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc,ADC_FLAG_AWD);
 1113              		.loc 1 752 0
 1114 0610 7B68     		ldr	r3, [r7, #4]
 1115 0612 1B68     		ldr	r3, [r3]
 1116 0614 7A68     		ldr	r2, [r7, #4]
 1117 0616 1268     		ldr	r2, [r2]
 1118 0618 1268     		ldr	r2, [r2]
 1119 061a 22F00102 		bic	r2, r2, #1
 1120 061e 1A60     		str	r2, [r3]
 753:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 754:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Level out of window callback */ 
 755:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     HAL_ADC_LevelOutOfWindowCallback(hadc);
 1121              		.loc 1 755 0
 1122 0620 7868     		ldr	r0, [r7, #4]
 1123 0622 FFF7FEFF 		bl	HAL_ADC_LevelOutOfWindowCallback
 1124              	.L60:
 756:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
 757:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 758:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 1125              		.loc 1 758 0
 1126 0626 7B68     		ldr	r3, [r7, #4]
 1127 0628 1B68     		ldr	r3, [r3]
 1128 062a 1B68     		ldr	r3, [r3]
 1129 062c 03F02003 		and	r3, r3, #32
 1130 0630 002B     		cmp	r3, #0
 1131 0632 0CBF     		ite	eq
 1132 0634 0023     		moveq	r3, #0
 1133 0636 0123     		movne	r3, #1
 1134 0638 DBB2     		uxtb	r3, r3
 1135 063a FB60     		str	r3, [r7, #12]
 759:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 1136              		.loc 1 759 0
 1137 063c 7B68     		ldr	r3, [r7, #4]
 1138 063e 1B68     		ldr	r3, [r3]
 1139 0640 5B68     		ldr	r3, [r3, #4]
 1140 0642 03F08063 		and	r3, r3, #67108864
 1141 0646 002B     		cmp	r3, #0
 1142 0648 0CBF     		ite	eq
 1143 064a 0023     		moveq	r3, #0
 1144 064c 0123     		movne	r3, #1
 1145 064e DBB2     		uxtb	r3, r3
 1146 0650 BB60     		str	r3, [r7, #8]
 760:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Check Overrun flag */
 761:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   if(tmp1 && tmp2)
 1147              		.loc 1 761 0
 1148 0652 FB68     		ldr	r3, [r7, #12]
 1149 0654 002B     		cmp	r3, #0
 1150 0656 17D0     		beq	.L48
 1151              		.loc 1 761 0 is_stmt 0 discriminator 1
 1152 0658 BB68     		ldr	r3, [r7, #8]
 1153 065a 002B     		cmp	r3, #0
 1154 065c 14D0     		beq	.L48
 762:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
 763:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Change ADC state to overrun state */
 764:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     hadc->State = HAL_ADC_STATE_ERROR;
 1155              		.loc 1 764 0 is_stmt 1
 1156 065e 7B68     		ldr	r3, [r7, #4]
 1157 0660 0422     		movs	r2, #4
 1158 0662 83F83D20 		strb	r2, [r3, #61]
 765:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 766:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Set ADC error code to overrun */
 767:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     hadc->ErrorCode |= HAL_ADC_ERROR_OVR;
 1159              		.loc 1 767 0
 1160 0666 7B68     		ldr	r3, [r7, #4]
 1161 0668 1B6C     		ldr	r3, [r3, #64]
 1162 066a 43F00102 		orr	r2, r3, #1
 1163 066e 7B68     		ldr	r3, [r7, #4]
 1164 0670 1A64     		str	r2, [r3, #64]
 768:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 769:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Clear the Overrun flag */
 770:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc,ADC_FLAG_OVR);
 1165              		.loc 1 770 0
 1166 0672 7B68     		ldr	r3, [r7, #4]
 1167 0674 1B68     		ldr	r3, [r3]
 1168 0676 7A68     		ldr	r2, [r7, #4]
 1169 0678 1268     		ldr	r2, [r2]
 1170 067a 1268     		ldr	r2, [r2]
 1171 067c 22F02002 		bic	r2, r2, #32
 1172 0680 1A60     		str	r2, [r3]
 771:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 772:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Error callback */ 
 773:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     HAL_ADC_ErrorCallback(hadc);
 1173              		.loc 1 773 0
 1174 0682 7868     		ldr	r0, [r7, #4]
 1175 0684 FFF7FEFF 		bl	HAL_ADC_ErrorCallback
 1176              	.L48:
 774:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
 775:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** }
 1177              		.loc 1 775 0
 1178 0688 1037     		adds	r7, r7, #16
 1179 068a BD46     		mov	sp, r7
 1180              		@ sp needed
 1181 068c 80BD     		pop	{r7, pc}
 1182              		.cfi_endproc
 1183              	.LFE65:
 1185 068e 00BF     		.align	2
 1186              		.global	HAL_ADC_Start_DMA
 1187              		.thumb
 1188              		.thumb_func
 1190              	HAL_ADC_Start_DMA:
 1191              	.LFB66:
 776:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 777:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /**
 778:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @brief  Enables ADC DMA request after last transfer (Single-ADC mode) and enables ADC periphera
 779:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
 780:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *         the configuration information for the specified ADC.
 781:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @param  pData: The destination Buffer address.
 782:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @param  Length: The length of data to be transferred from ADC peripheral to memory.
 783:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @retval None
 784:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   */
 785:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
 786:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** {
 1192              		.loc 1 786 0
 1193              		.cfi_startproc
 1194              		@ args = 0, pretend = 0, frame = 24
 1195              		@ frame_needed = 1, uses_anonymous_args = 0
 1196 0690 80B5     		push	{r7, lr}
 1197              		.cfi_def_cfa_offset 8
 1198              		.cfi_offset 7, -8
 1199              		.cfi_offset 14, -4
 1200 0692 86B0     		sub	sp, sp, #24
 1201              		.cfi_def_cfa_offset 32
 1202 0694 00AF     		add	r7, sp, #0
 1203              		.cfi_def_cfa_register 7
 1204 0696 F860     		str	r0, [r7, #12]
 1205 0698 B960     		str	r1, [r7, #8]
 1206 069a 7A60     		str	r2, [r7, #4]
 787:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   uint16_t i = 0;
 1207              		.loc 1 787 0
 1208 069c 0023     		movs	r3, #0
 1209 069e FB82     		strh	r3, [r7, #22]	@ movhi
 788:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 789:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Check the parameters */
 790:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 791:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 792:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 793:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Process locked */
 794:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   __HAL_LOCK(hadc);
 1210              		.loc 1 794 0
 1211 06a0 FB68     		ldr	r3, [r7, #12]
 1212 06a2 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 1213 06a6 012B     		cmp	r3, #1
 1214 06a8 01D1     		bne	.L63
 1215              		.loc 1 794 0 is_stmt 0 discriminator 1
 1216 06aa 0223     		movs	r3, #2
 1217 06ac 62E0     		b	.L64
 1218              	.L63:
 1219              		.loc 1 794 0 discriminator 2
 1220 06ae FB68     		ldr	r3, [r7, #12]
 1221 06b0 0122     		movs	r2, #1
 1222 06b2 83F83C20 		strb	r2, [r3, #60]
 795:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 796:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Enable ADC overrun interrupt */
 797:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 1223              		.loc 1 797 0 is_stmt 1 discriminator 2
 1224 06b6 FB68     		ldr	r3, [r7, #12]
 1225 06b8 1B68     		ldr	r3, [r3]
 1226 06ba FA68     		ldr	r2, [r7, #12]
 1227 06bc 1268     		ldr	r2, [r2]
 1228 06be 5268     		ldr	r2, [r2, #4]
 1229 06c0 42F08062 		orr	r2, r2, #67108864
 1230 06c4 5A60     		str	r2, [r3, #4]
 798:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 799:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Enable ADC DMA mode */
 800:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   hadc->Instance->CR2 |= ADC_CR2_DMA;
 1231              		.loc 1 800 0 discriminator 2
 1232 06c6 FB68     		ldr	r3, [r7, #12]
 1233 06c8 1B68     		ldr	r3, [r3]
 1234 06ca FA68     		ldr	r2, [r7, #12]
 1235 06cc 1268     		ldr	r2, [r2]
 1236 06ce 9268     		ldr	r2, [r2, #8]
 1237 06d0 42F48072 		orr	r2, r2, #256
 1238 06d4 9A60     		str	r2, [r3, #8]
 801:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 802:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Set the DMA transfer complete callback */
 803:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 1239              		.loc 1 803 0 discriminator 2
 1240 06d6 FB68     		ldr	r3, [r7, #12]
 1241 06d8 9A6B     		ldr	r2, [r3, #56]
 1242 06da 40F20003 		movw	r3, #:lower16:ADC_DMAConvCplt
 1243 06de C0F20003 		movt	r3, #:upper16:ADC_DMAConvCplt
 1244 06e2 D363     		str	r3, [r2, #60]
 804:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 805:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Set the DMA half transfer complete callback */
 806:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 1245              		.loc 1 806 0 discriminator 2
 1246 06e4 FB68     		ldr	r3, [r7, #12]
 1247 06e6 9A6B     		ldr	r2, [r3, #56]
 1248 06e8 40F20003 		movw	r3, #:lower16:ADC_DMAHalfConvCplt
 1249 06ec C0F20003 		movt	r3, #:upper16:ADC_DMAHalfConvCplt
 1250 06f0 1364     		str	r3, [r2, #64]
 807:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****      
 808:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Set the DMA error callback */
 809:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 1251              		.loc 1 809 0 discriminator 2
 1252 06f2 FB68     		ldr	r3, [r7, #12]
 1253 06f4 9A6B     		ldr	r2, [r3, #56]
 1254 06f6 40F20003 		movw	r3, #:lower16:ADC_DMAError
 1255 06fa C0F20003 		movt	r3, #:upper16:ADC_DMAError
 1256 06fe 9364     		str	r3, [r2, #72]
 810:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 811:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Enable the DMA Stream */
 812:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 1257              		.loc 1 812 0 discriminator 2
 1258 0700 FB68     		ldr	r3, [r7, #12]
 1259 0702 996B     		ldr	r1, [r3, #56]
 1260 0704 FB68     		ldr	r3, [r7, #12]
 1261 0706 1B68     		ldr	r3, [r3]
 1262 0708 4C33     		adds	r3, r3, #76
 1263 070a 1A46     		mov	r2, r3
 1264 070c BB68     		ldr	r3, [r7, #8]
 1265 070e 0846     		mov	r0, r1
 1266 0710 1146     		mov	r1, r2
 1267 0712 1A46     		mov	r2, r3
 1268 0714 7B68     		ldr	r3, [r7, #4]
 1269 0716 FFF7FEFF 		bl	HAL_DMA_Start_IT
 813:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 814:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Change ADC state */
 815:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   hadc->State = HAL_ADC_STATE_BUSY_REG;
 1270              		.loc 1 815 0 discriminator 2
 1271 071a FB68     		ldr	r3, [r7, #12]
 1272 071c 1222     		movs	r2, #18
 1273 071e 83F83D20 		strb	r2, [r3, #61]
 816:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****    
 817:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Check if ADC peripheral is disabled in order to enable it and wait during 
 818:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****      Tstab time the ADC's stabilization */
 819:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 1274              		.loc 1 819 0 discriminator 2
 1275 0722 FB68     		ldr	r3, [r7, #12]
 1276 0724 1B68     		ldr	r3, [r3]
 1277 0726 9B68     		ldr	r3, [r3, #8]
 1278 0728 03F00103 		and	r3, r3, #1
 1279 072c 002B     		cmp	r3, #0
 1280 072e 10D1     		bne	.L65
 820:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {  
 821:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Enable the Peripheral */
 822:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     __HAL_ADC_ENABLE(hadc);
 1281              		.loc 1 822 0
 1282 0730 FB68     		ldr	r3, [r7, #12]
 1283 0732 1B68     		ldr	r3, [r3]
 1284 0734 FA68     		ldr	r2, [r7, #12]
 1285 0736 1268     		ldr	r2, [r2]
 1286 0738 9268     		ldr	r2, [r2, #8]
 1287 073a 42F00102 		orr	r2, r2, #1
 1288 073e 9A60     		str	r2, [r3, #8]
 823:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 824:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Delay inserted to wait during Tstab time the ADC's stabilazation */
 825:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     for(; i <= 540; i++)
 1289              		.loc 1 825 0
 1290 0740 03E0     		b	.L66
 1291              	.L67:
 1292              	.LBB12:
 1293              	.LBB13:
 1294              		.loc 2 271 0 discriminator 2
 1295              	@ 271 "D:\workspace\console800480\system/core_cmInstr.h" 1
 1296 0742 00BF     		nop
 1297              	@ 0 "" 2
 1298              		.thumb
 1299              	.LBE13:
 1300              	.LBE12:
 1301              		.loc 1 825 0 discriminator 2
 1302 0744 FB8A     		ldrh	r3, [r7, #22]
 1303 0746 0133     		adds	r3, r3, #1
 1304 0748 FB82     		strh	r3, [r7, #22]	@ movhi
 1305              	.L66:
 1306              		.loc 1 825 0 is_stmt 0 discriminator 1
 1307 074a FB8A     		ldrh	r3, [r7, #22]
 1308 074c B3F5077F 		cmp	r3, #540
 1309 0750 F7D9     		bls	.L67
 1310              	.L65:
 826:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     {
 827:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       __NOP();
 828:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     }
 829:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
 830:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 831:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* if no external trigger present enable software conversion of regular channels */
 832:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   if (hadc->Init.ExternalTrigConvEdge == ADC_EXTERNALTRIGCONVEDGE_NONE)
 1311              		.loc 1 832 0 is_stmt 1
 1312 0752 FB68     		ldr	r3, [r7, #12]
 1313 0754 DB6A     		ldr	r3, [r3, #44]
 1314 0756 002B     		cmp	r3, #0
 1315 0758 07D1     		bne	.L68
 833:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
 834:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Enable the selected ADC software conversion for regular group */
 835:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     hadc->Instance->CR2 |= ADC_CR2_SWSTART;
 1316              		.loc 1 835 0
 1317 075a FB68     		ldr	r3, [r7, #12]
 1318 075c 1B68     		ldr	r3, [r3]
 1319 075e FA68     		ldr	r2, [r7, #12]
 1320 0760 1268     		ldr	r2, [r2]
 1321 0762 9268     		ldr	r2, [r2, #8]
 1322 0764 42F08042 		orr	r2, r2, #1073741824
 1323 0768 9A60     		str	r2, [r3, #8]
 1324              	.L68:
 836:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
 837:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 838:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Process unlocked */
 839:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 1325              		.loc 1 839 0
 1326 076a FB68     		ldr	r3, [r7, #12]
 1327 076c 0022     		movs	r2, #0
 1328 076e 83F83C20 		strb	r2, [r3, #60]
 840:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 841:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Return function status */
 842:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   return HAL_OK;
 1329              		.loc 1 842 0
 1330 0772 0023     		movs	r3, #0
 1331              	.L64:
 843:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** }
 1332              		.loc 1 843 0
 1333 0774 1846     		mov	r0, r3
 1334 0776 1837     		adds	r7, r7, #24
 1335 0778 BD46     		mov	sp, r7
 1336              		@ sp needed
 1337 077a 80BD     		pop	{r7, pc}
 1338              		.cfi_endproc
 1339              	.LFE66:
 1341              		.align	2
 1342              		.global	HAL_ADC_Stop_DMA
 1343              		.thumb
 1344              		.thumb_func
 1346              	HAL_ADC_Stop_DMA:
 1347              	.LFB67:
 844:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 845:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /**
 846:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @brief  Disables ADC DMA (Single-ADC mode) and disables ADC peripheral    
 847:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
 848:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *         the configuration information for the specified ADC.
 849:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @retval None
 850:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   */
 851:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
 852:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** {
 1348              		.loc 1 852 0
 1349              		.cfi_startproc
 1350              		@ args = 0, pretend = 0, frame = 8
 1351              		@ frame_needed = 1, uses_anonymous_args = 0
 1352 077c 80B5     		push	{r7, lr}
 1353              		.cfi_def_cfa_offset 8
 1354              		.cfi_offset 7, -8
 1355              		.cfi_offset 14, -4
 1356 077e 82B0     		sub	sp, sp, #8
 1357              		.cfi_def_cfa_offset 16
 1358 0780 00AF     		add	r7, sp, #0
 1359              		.cfi_def_cfa_register 7
 1360 0782 7860     		str	r0, [r7, #4]
 853:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Disable the Periphral */
 854:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   __HAL_ADC_DISABLE(hadc);
 1361              		.loc 1 854 0
 1362 0784 7B68     		ldr	r3, [r7, #4]
 1363 0786 1B68     		ldr	r3, [r3]
 1364 0788 7A68     		ldr	r2, [r7, #4]
 1365 078a 1268     		ldr	r2, [r2]
 1366 078c 9268     		ldr	r2, [r2, #8]
 1367 078e 22F00102 		bic	r2, r2, #1
 1368 0792 9A60     		str	r2, [r3, #8]
 855:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 856:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Disable ADC overrun interrupt */
 857:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 1369              		.loc 1 857 0
 1370 0794 7B68     		ldr	r3, [r7, #4]
 1371 0796 1B68     		ldr	r3, [r3]
 1372 0798 7A68     		ldr	r2, [r7, #4]
 1373 079a 1268     		ldr	r2, [r2]
 1374 079c 5268     		ldr	r2, [r2, #4]
 1375 079e 22F08062 		bic	r2, r2, #67108864
 1376 07a2 5A60     		str	r2, [r3, #4]
 858:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 859:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Disable the selected ADC DMA mode */
 860:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 1377              		.loc 1 860 0
 1378 07a4 7B68     		ldr	r3, [r7, #4]
 1379 07a6 1B68     		ldr	r3, [r3]
 1380 07a8 7A68     		ldr	r2, [r7, #4]
 1381 07aa 1268     		ldr	r2, [r2]
 1382 07ac 9268     		ldr	r2, [r2, #8]
 1383 07ae 22F48072 		bic	r2, r2, #256
 1384 07b2 9A60     		str	r2, [r3, #8]
 861:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 862:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Disable the ADC DMA Stream */
 863:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   HAL_DMA_Abort(hadc->DMA_Handle);
 1385              		.loc 1 863 0
 1386 07b4 7B68     		ldr	r3, [r7, #4]
 1387 07b6 9B6B     		ldr	r3, [r3, #56]
 1388 07b8 1846     		mov	r0, r3
 1389 07ba FFF7FEFF 		bl	HAL_DMA_Abort
 864:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 865:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Change ADC state */
 866:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   hadc->State = HAL_ADC_STATE_READY;
 1390              		.loc 1 866 0
 1391 07be 7B68     		ldr	r3, [r7, #4]
 1392 07c0 0122     		movs	r2, #1
 1393 07c2 83F83D20 		strb	r2, [r3, #61]
 867:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 868:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Return function status */
 869:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   return HAL_OK;
 1394              		.loc 1 869 0
 1395 07c6 0023     		movs	r3, #0
 870:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** }
 1396              		.loc 1 870 0
 1397 07c8 1846     		mov	r0, r3
 1398 07ca 0837     		adds	r7, r7, #8
 1399 07cc BD46     		mov	sp, r7
 1400              		@ sp needed
 1401 07ce 80BD     		pop	{r7, pc}
 1402              		.cfi_endproc
 1403              	.LFE67:
 1405              		.align	2
 1406              		.global	HAL_ADC_GetValue
 1407              		.thumb
 1408              		.thumb_func
 1410              	HAL_ADC_GetValue:
 1411              	.LFB68:
 871:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 872:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /**
 873:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @brief  Gets the converted value from data register of regular channel.
 874:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
 875:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *         the configuration information for the specified ADC.
 876:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @retval Converted value
 877:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   */
 878:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
 879:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** {       
 1412              		.loc 1 879 0
 1413              		.cfi_startproc
 1414              		@ args = 0, pretend = 0, frame = 8
 1415              		@ frame_needed = 1, uses_anonymous_args = 0
 1416              		@ link register save eliminated.
 1417 07d0 80B4     		push	{r7}
 1418              		.cfi_def_cfa_offset 4
 1419              		.cfi_offset 7, -4
 1420 07d2 83B0     		sub	sp, sp, #12
 1421              		.cfi_def_cfa_offset 16
 1422 07d4 00AF     		add	r7, sp, #0
 1423              		.cfi_def_cfa_register 7
 1424 07d6 7860     		str	r0, [r7, #4]
 880:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Return the selected ADC converted value */ 
 881:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   return hadc->Instance->DR;
 1425              		.loc 1 881 0
 1426 07d8 7B68     		ldr	r3, [r7, #4]
 1427 07da 1B68     		ldr	r3, [r3]
 1428 07dc DB6C     		ldr	r3, [r3, #76]
 882:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** }
 1429              		.loc 1 882 0
 1430 07de 1846     		mov	r0, r3
 1431 07e0 0C37     		adds	r7, r7, #12
 1432 07e2 BD46     		mov	sp, r7
 1433              		@ sp needed
 1434 07e4 5DF8047B 		ldr	r7, [sp], #4
 1435 07e8 7047     		bx	lr
 1436              		.cfi_endproc
 1437              	.LFE68:
 1439 07ea 00BF     		.align	2
 1440              		.weak	HAL_ADC_ConvCpltCallback
 1441              		.thumb
 1442              		.thumb_func
 1444              	HAL_ADC_ConvCpltCallback:
 1445              	.LFB69:
 883:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 884:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /**
 885:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @brief  Regular conversion complete callback in non blocking mode 
 886:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
 887:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *         the configuration information for the specified ADC.
 888:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @retval None
 889:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   */
 890:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** __weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
 891:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** {
 1446              		.loc 1 891 0
 1447              		.cfi_startproc
 1448              		@ args = 0, pretend = 0, frame = 8
 1449              		@ frame_needed = 1, uses_anonymous_args = 0
 1450              		@ link register save eliminated.
 1451 07ec 80B4     		push	{r7}
 1452              		.cfi_def_cfa_offset 4
 1453              		.cfi_offset 7, -4
 1454 07ee 83B0     		sub	sp, sp, #12
 1455              		.cfi_def_cfa_offset 16
 1456 07f0 00AF     		add	r7, sp, #0
 1457              		.cfi_def_cfa_register 7
 1458 07f2 7860     		str	r0, [r7, #4]
 892:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 893:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****             the HAL_ADC_ConvCpltCallback could be implemented in the user file
 894:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****    */
 895:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** }
 1459              		.loc 1 895 0
 1460 07f4 0C37     		adds	r7, r7, #12
 1461 07f6 BD46     		mov	sp, r7
 1462              		@ sp needed
 1463 07f8 5DF8047B 		ldr	r7, [sp], #4
 1464 07fc 7047     		bx	lr
 1465              		.cfi_endproc
 1466              	.LFE69:
 1468 07fe 00BF     		.align	2
 1469              		.weak	HAL_ADC_ConvHalfCpltCallback
 1470              		.thumb
 1471              		.thumb_func
 1473              	HAL_ADC_ConvHalfCpltCallback:
 1474              	.LFB70:
 896:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 897:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /**
 898:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @brief  Regular conversion half DMA transfer callback in non blocking mode 
 899:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
 900:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *         the configuration information for the specified ADC.
 901:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @retval None
 902:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   */
 903:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** __weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
 904:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** {
 1475              		.loc 1 904 0
 1476              		.cfi_startproc
 1477              		@ args = 0, pretend = 0, frame = 8
 1478              		@ frame_needed = 1, uses_anonymous_args = 0
 1479              		@ link register save eliminated.
 1480 0800 80B4     		push	{r7}
 1481              		.cfi_def_cfa_offset 4
 1482              		.cfi_offset 7, -4
 1483 0802 83B0     		sub	sp, sp, #12
 1484              		.cfi_def_cfa_offset 16
 1485 0804 00AF     		add	r7, sp, #0
 1486              		.cfi_def_cfa_register 7
 1487 0806 7860     		str	r0, [r7, #4]
 905:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 906:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****             the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
 907:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****    */
 908:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** }
 1488              		.loc 1 908 0
 1489 0808 0C37     		adds	r7, r7, #12
 1490 080a BD46     		mov	sp, r7
 1491              		@ sp needed
 1492 080c 5DF8047B 		ldr	r7, [sp], #4
 1493 0810 7047     		bx	lr
 1494              		.cfi_endproc
 1495              	.LFE70:
 1497 0812 00BF     		.align	2
 1498              		.weak	HAL_ADC_LevelOutOfWindowCallback
 1499              		.thumb
 1500              		.thumb_func
 1502              	HAL_ADC_LevelOutOfWindowCallback:
 1503              	.LFB71:
 909:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 910:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /**
 911:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @brief  Analog watchdog callback in non blocking mode 
 912:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
 913:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *         the configuration information for the specified ADC.
 914:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @retval None
 915:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   */
 916:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** __weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
 917:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** {
 1504              		.loc 1 917 0
 1505              		.cfi_startproc
 1506              		@ args = 0, pretend = 0, frame = 8
 1507              		@ frame_needed = 1, uses_anonymous_args = 0
 1508              		@ link register save eliminated.
 1509 0814 80B4     		push	{r7}
 1510              		.cfi_def_cfa_offset 4
 1511              		.cfi_offset 7, -4
 1512 0816 83B0     		sub	sp, sp, #12
 1513              		.cfi_def_cfa_offset 16
 1514 0818 00AF     		add	r7, sp, #0
 1515              		.cfi_def_cfa_register 7
 1516 081a 7860     		str	r0, [r7, #4]
 918:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 919:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****             the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
 920:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****    */
 921:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** }
 1517              		.loc 1 921 0
 1518 081c 0C37     		adds	r7, r7, #12
 1519 081e BD46     		mov	sp, r7
 1520              		@ sp needed
 1521 0820 5DF8047B 		ldr	r7, [sp], #4
 1522 0824 7047     		bx	lr
 1523              		.cfi_endproc
 1524              	.LFE71:
 1526 0826 00BF     		.align	2
 1527              		.weak	HAL_ADC_ErrorCallback
 1528              		.thumb
 1529              		.thumb_func
 1531              	HAL_ADC_ErrorCallback:
 1532              	.LFB72:
 922:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 923:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /**
 924:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @brief  Error ADC callback.
 925:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
 926:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *         the configuration information for the specified ADC.
 927:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @retval None
 928:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   */
 929:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** __weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 930:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** {
 1533              		.loc 1 930 0
 1534              		.cfi_startproc
 1535              		@ args = 0, pretend = 0, frame = 8
 1536              		@ frame_needed = 1, uses_anonymous_args = 0
 1537              		@ link register save eliminated.
 1538 0828 80B4     		push	{r7}
 1539              		.cfi_def_cfa_offset 4
 1540              		.cfi_offset 7, -4
 1541 082a 83B0     		sub	sp, sp, #12
 1542              		.cfi_def_cfa_offset 16
 1543 082c 00AF     		add	r7, sp, #0
 1544              		.cfi_def_cfa_register 7
 1545 082e 7860     		str	r0, [r7, #4]
 931:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 932:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****             the HAL_ADC_ErrorCallback could be implemented in the user file
 933:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****    */
 934:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** }
 1546              		.loc 1 934 0
 1547 0830 0C37     		adds	r7, r7, #12
 1548 0832 BD46     		mov	sp, r7
 1549              		@ sp needed
 1550 0834 5DF8047B 		ldr	r7, [sp], #4
 1551 0838 7047     		bx	lr
 1552              		.cfi_endproc
 1553              	.LFE72:
 1555 083a 00BF     		.align	2
 1556              		.global	HAL_ADC_ConfigChannel
 1557              		.thumb
 1558              		.thumb_func
 1560              	HAL_ADC_ConfigChannel:
 1561              	.LFB73:
 935:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 936:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /**
 937:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @}
 938:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   */
 939:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 940:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /** @defgroup ADC_Group3 Peripheral Control functions
 941:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****  *  @brief   	Peripheral Control functions 
 942:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****  *
 943:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** @verbatim   
 944:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****  ===============================================================================
 945:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****              ##### Peripheral Control functions #####
 946:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****  ===============================================================================  
 947:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     [..]  This section provides functions allowing to:
 948:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       (+) Configure regular channels. 
 949:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       (+) Configure injected channels.
 950:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       (+) Configure multimode.
 951:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       (+) Configure the analog watch dog.
 952:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       
 953:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** @endverbatim
 954:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @{
 955:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   */
 956:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 957:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /**
 958:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @brief  Configures for the selected ADC regular channel its corresponding
 959:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *         rank in the sequencer and its sample time.
 960:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
 961:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *         the configuration information for the specified ADC.
 962:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @param  sConfig: ADC configuration structure. 
 963:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @retval HAL status
 964:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   */
 965:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
 966:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** {
 1562              		.loc 1 966 0
 1563              		.cfi_startproc
 1564              		@ args = 0, pretend = 0, frame = 8
 1565              		@ frame_needed = 1, uses_anonymous_args = 0
 1566              		@ link register save eliminated.
 1567 083c 90B4     		push	{r4, r7}
 1568              		.cfi_def_cfa_offset 8
 1569              		.cfi_offset 4, -8
 1570              		.cfi_offset 7, -4
 1571 083e 82B0     		sub	sp, sp, #8
 1572              		.cfi_def_cfa_offset 16
 1573 0840 00AF     		add	r7, sp, #0
 1574              		.cfi_def_cfa_register 7
 1575 0842 7860     		str	r0, [r7, #4]
 1576 0844 3960     		str	r1, [r7]
 967:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Check the parameters */
 968:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 969:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 970:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 971:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 972:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Process locked */
 973:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   __HAL_LOCK(hadc);
 1577              		.loc 1 973 0
 1578 0846 7B68     		ldr	r3, [r7, #4]
 1579 0848 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 1580 084c 012B     		cmp	r3, #1
 1581 084e 01D1     		bne	.L78
 1582              		.loc 1 973 0 is_stmt 0 discriminator 1
 1583 0850 0223     		movs	r3, #2
 1584 0852 F3E0     		b	.L79
 1585              	.L78:
 1586              		.loc 1 973 0 discriminator 2
 1587 0854 7B68     		ldr	r3, [r7, #4]
 1588 0856 0122     		movs	r2, #1
 1589 0858 83F83C20 		strb	r2, [r3, #60]
 974:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 975:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
 976:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   if (sConfig->Channel > ADC_CHANNEL_9)
 1590              		.loc 1 976 0 is_stmt 1 discriminator 2
 1591 085c 3B68     		ldr	r3, [r7]
 1592 085e 1B68     		ldr	r3, [r3]
 1593 0860 092B     		cmp	r3, #9
 1594 0862 22D9     		bls	.L80
 977:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
 978:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Clear the old sample time */
 979:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     hadc->Instance->SMPR1 &= ~__HAL_ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 1595              		.loc 1 979 0
 1596 0864 7B68     		ldr	r3, [r7, #4]
 1597 0866 1968     		ldr	r1, [r3]
 1598 0868 7B68     		ldr	r3, [r7, #4]
 1599 086a 1B68     		ldr	r3, [r3]
 1600 086c D868     		ldr	r0, [r3, #12]
 1601 086e 3B68     		ldr	r3, [r7]
 1602 0870 1A68     		ldr	r2, [r3]
 1603 0872 1346     		mov	r3, r2
 1604 0874 5B00     		lsls	r3, r3, #1
 1605 0876 1344     		add	r3, r3, r2
 1606 0878 1E3B     		subs	r3, r3, #30
 1607 087a 0722     		movs	r2, #7
 1608 087c 02FA03F3 		lsl	r3, r2, r3
 1609 0880 DB43     		mvns	r3, r3
 1610 0882 0340     		ands	r3, r3, r0
 1611 0884 CB60     		str	r3, [r1, #12]
 980:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 981:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Set the new sample time */
 982:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     hadc->Instance->SMPR1 |= __HAL_ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 1612              		.loc 1 982 0
 1613 0886 7B68     		ldr	r3, [r7, #4]
 1614 0888 1968     		ldr	r1, [r3]
 1615 088a 7B68     		ldr	r3, [r7, #4]
 1616 088c 1B68     		ldr	r3, [r3]
 1617 088e D868     		ldr	r0, [r3, #12]
 1618 0890 3B68     		ldr	r3, [r7]
 1619 0892 9C68     		ldr	r4, [r3, #8]
 1620 0894 3B68     		ldr	r3, [r7]
 1621 0896 1A68     		ldr	r2, [r3]
 1622 0898 1346     		mov	r3, r2
 1623 089a 5B00     		lsls	r3, r3, #1
 1624 089c 1344     		add	r3, r3, r2
 1625 089e 1E3B     		subs	r3, r3, #30
 1626 08a0 04FA03F3 		lsl	r3, r4, r3
 1627 08a4 0343     		orrs	r3, r3, r0
 1628 08a6 CB60     		str	r3, [r1, #12]
 1629 08a8 1FE0     		b	.L81
 1630              	.L80:
 983:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
 984:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   else /* ADC_Channel include in ADC_Channel_[0..9] */
 985:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
 986:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Clear the old sample time */
 987:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     hadc->Instance->SMPR2 &= ~__HAL_ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 1631              		.loc 1 987 0
 1632 08aa 7B68     		ldr	r3, [r7, #4]
 1633 08ac 1968     		ldr	r1, [r3]
 1634 08ae 7B68     		ldr	r3, [r7, #4]
 1635 08b0 1B68     		ldr	r3, [r3]
 1636 08b2 1869     		ldr	r0, [r3, #16]
 1637 08b4 3B68     		ldr	r3, [r7]
 1638 08b6 1A68     		ldr	r2, [r3]
 1639 08b8 1346     		mov	r3, r2
 1640 08ba 5B00     		lsls	r3, r3, #1
 1641 08bc 1344     		add	r3, r3, r2
 1642 08be 0722     		movs	r2, #7
 1643 08c0 02FA03F3 		lsl	r3, r2, r3
 1644 08c4 DB43     		mvns	r3, r3
 1645 08c6 0340     		ands	r3, r3, r0
 1646 08c8 0B61     		str	r3, [r1, #16]
 988:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 989:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Set the new sample time */
 990:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     hadc->Instance->SMPR2 |= __HAL_ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 1647              		.loc 1 990 0
 1648 08ca 7B68     		ldr	r3, [r7, #4]
 1649 08cc 1968     		ldr	r1, [r3]
 1650 08ce 7B68     		ldr	r3, [r7, #4]
 1651 08d0 1B68     		ldr	r3, [r3]
 1652 08d2 1869     		ldr	r0, [r3, #16]
 1653 08d4 3B68     		ldr	r3, [r7]
 1654 08d6 9C68     		ldr	r4, [r3, #8]
 1655 08d8 3B68     		ldr	r3, [r7]
 1656 08da 1A68     		ldr	r2, [r3]
 1657 08dc 1346     		mov	r3, r2
 1658 08de 5B00     		lsls	r3, r3, #1
 1659 08e0 1344     		add	r3, r3, r2
 1660 08e2 04FA03F3 		lsl	r3, r4, r3
 1661 08e6 0343     		orrs	r3, r3, r0
 1662 08e8 0B61     		str	r3, [r1, #16]
 1663              	.L81:
 991:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
 992:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 993:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* For Rank 1 to 6 */
 994:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   if (sConfig->Rank < 7)
 1664              		.loc 1 994 0
 1665 08ea 3B68     		ldr	r3, [r7]
 1666 08ec 5B68     		ldr	r3, [r3, #4]
 1667 08ee 062B     		cmp	r3, #6
 1668 08f0 22D8     		bhi	.L82
 995:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
 996:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Clear the old SQx bits for the selected rank */
 997:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     hadc->Instance->SQR3 &= ~__HAL_ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 1669              		.loc 1 997 0
 1670 08f2 7B68     		ldr	r3, [r7, #4]
 1671 08f4 1968     		ldr	r1, [r3]
 1672 08f6 7B68     		ldr	r3, [r7, #4]
 1673 08f8 1B68     		ldr	r3, [r3]
 1674 08fa 586B     		ldr	r0, [r3, #52]
 1675 08fc 3B68     		ldr	r3, [r7]
 1676 08fe 5A68     		ldr	r2, [r3, #4]
 1677 0900 1346     		mov	r3, r2
 1678 0902 9B00     		lsls	r3, r3, #2
 1679 0904 1344     		add	r3, r3, r2
 1680 0906 053B     		subs	r3, r3, #5
 1681 0908 1F22     		movs	r2, #31
 1682 090a 02FA03F3 		lsl	r3, r2, r3
 1683 090e DB43     		mvns	r3, r3
 1684 0910 0340     		ands	r3, r3, r0
 1685 0912 4B63     		str	r3, [r1, #52]
 998:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 999:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Set the SQx bits for the selected rank */
1000:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     hadc->Instance->SQR3 |= __HAL_ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 1686              		.loc 1 1000 0
 1687 0914 7B68     		ldr	r3, [r7, #4]
 1688 0916 1968     		ldr	r1, [r3]
 1689 0918 7B68     		ldr	r3, [r7, #4]
 1690 091a 1B68     		ldr	r3, [r3]
 1691 091c 586B     		ldr	r0, [r3, #52]
 1692 091e 3B68     		ldr	r3, [r7]
 1693 0920 1C68     		ldr	r4, [r3]
 1694 0922 3B68     		ldr	r3, [r7]
 1695 0924 5A68     		ldr	r2, [r3, #4]
 1696 0926 1346     		mov	r3, r2
 1697 0928 9B00     		lsls	r3, r3, #2
 1698 092a 1344     		add	r3, r3, r2
 1699 092c 053B     		subs	r3, r3, #5
 1700 092e 04FA03F3 		lsl	r3, r4, r3
 1701 0932 0343     		orrs	r3, r3, r0
 1702 0934 4B63     		str	r3, [r1, #52]
 1703 0936 48E0     		b	.L83
 1704              	.L82:
1001:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
1002:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* For Rank 7 to 12 */
1003:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   else if (sConfig->Rank < 13)
 1705              		.loc 1 1003 0
 1706 0938 3B68     		ldr	r3, [r7]
 1707 093a 5B68     		ldr	r3, [r3, #4]
 1708 093c 0C2B     		cmp	r3, #12
 1709 093e 22D8     		bhi	.L84
1004:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
1005:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Clear the old SQx bits for the selected rank */
1006:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     hadc->Instance->SQR2 &= ~__HAL_ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 1710              		.loc 1 1006 0
 1711 0940 7B68     		ldr	r3, [r7, #4]
 1712 0942 1968     		ldr	r1, [r3]
 1713 0944 7B68     		ldr	r3, [r7, #4]
 1714 0946 1B68     		ldr	r3, [r3]
 1715 0948 186B     		ldr	r0, [r3, #48]
 1716 094a 3B68     		ldr	r3, [r7]
 1717 094c 5A68     		ldr	r2, [r3, #4]
 1718 094e 1346     		mov	r3, r2
 1719 0950 9B00     		lsls	r3, r3, #2
 1720 0952 1344     		add	r3, r3, r2
 1721 0954 233B     		subs	r3, r3, #35
 1722 0956 1F22     		movs	r2, #31
 1723 0958 02FA03F3 		lsl	r3, r2, r3
 1724 095c DB43     		mvns	r3, r3
 1725 095e 0340     		ands	r3, r3, r0
 1726 0960 0B63     		str	r3, [r1, #48]
1007:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
1008:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Set the SQx bits for the selected rank */
1009:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     hadc->Instance->SQR2 |= __HAL_ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 1727              		.loc 1 1009 0
 1728 0962 7B68     		ldr	r3, [r7, #4]
 1729 0964 1968     		ldr	r1, [r3]
 1730 0966 7B68     		ldr	r3, [r7, #4]
 1731 0968 1B68     		ldr	r3, [r3]
 1732 096a 186B     		ldr	r0, [r3, #48]
 1733 096c 3B68     		ldr	r3, [r7]
 1734 096e 1C68     		ldr	r4, [r3]
 1735 0970 3B68     		ldr	r3, [r7]
 1736 0972 5A68     		ldr	r2, [r3, #4]
 1737 0974 1346     		mov	r3, r2
 1738 0976 9B00     		lsls	r3, r3, #2
 1739 0978 1344     		add	r3, r3, r2
 1740 097a 233B     		subs	r3, r3, #35
 1741 097c 04FA03F3 		lsl	r3, r4, r3
 1742 0980 0343     		orrs	r3, r3, r0
 1743 0982 0B63     		str	r3, [r1, #48]
 1744 0984 21E0     		b	.L83
 1745              	.L84:
1010:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
1011:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* For Rank 13 to 16 */
1012:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   else
1013:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
1014:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Clear the old SQx bits for the selected rank */
1015:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     hadc->Instance->SQR1 &= ~__HAL_ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 1746              		.loc 1 1015 0
 1747 0986 7B68     		ldr	r3, [r7, #4]
 1748 0988 1968     		ldr	r1, [r3]
 1749 098a 7B68     		ldr	r3, [r7, #4]
 1750 098c 1B68     		ldr	r3, [r3]
 1751 098e D86A     		ldr	r0, [r3, #44]
 1752 0990 3B68     		ldr	r3, [r7]
 1753 0992 5A68     		ldr	r2, [r3, #4]
 1754 0994 1346     		mov	r3, r2
 1755 0996 9B00     		lsls	r3, r3, #2
 1756 0998 1344     		add	r3, r3, r2
 1757 099a 413B     		subs	r3, r3, #65
 1758 099c 1F22     		movs	r2, #31
 1759 099e 02FA03F3 		lsl	r3, r2, r3
 1760 09a2 DB43     		mvns	r3, r3
 1761 09a4 0340     		ands	r3, r3, r0
 1762 09a6 CB62     		str	r3, [r1, #44]
1016:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
1017:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Set the SQx bits for the selected rank */
1018:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     hadc->Instance->SQR1 |= __HAL_ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 1763              		.loc 1 1018 0
 1764 09a8 7B68     		ldr	r3, [r7, #4]
 1765 09aa 1968     		ldr	r1, [r3]
 1766 09ac 7B68     		ldr	r3, [r7, #4]
 1767 09ae 1B68     		ldr	r3, [r3]
 1768 09b0 D86A     		ldr	r0, [r3, #44]
 1769 09b2 3B68     		ldr	r3, [r7]
 1770 09b4 1C68     		ldr	r4, [r3]
 1771 09b6 3B68     		ldr	r3, [r7]
 1772 09b8 5A68     		ldr	r2, [r3, #4]
 1773 09ba 1346     		mov	r3, r2
 1774 09bc 9B00     		lsls	r3, r3, #2
 1775 09be 1344     		add	r3, r3, r2
 1776 09c0 413B     		subs	r3, r3, #65
 1777 09c2 04FA03F3 		lsl	r3, r4, r3
 1778 09c6 0343     		orrs	r3, r3, r0
 1779 09c8 CB62     		str	r3, [r1, #44]
 1780              	.L83:
1019:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
1020:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
1021:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* if ADC1 Channel_18 is selected enable VBAT Channel */
1022:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 1781              		.loc 1 1022 0
 1782 09ca 7B68     		ldr	r3, [r7, #4]
 1783 09cc 1A68     		ldr	r2, [r3]
 1784 09ce 4FF40053 		mov	r3, #8192
 1785 09d2 C4F20103 		movt	r3, 16385
 1786 09d6 9A42     		cmp	r2, r3
 1787 09d8 0FD1     		bne	.L85
 1788              		.loc 1 1022 0 is_stmt 0 discriminator 1
 1789 09da 3B68     		ldr	r3, [r7]
 1790 09dc 1B68     		ldr	r3, [r3]
 1791 09de 122B     		cmp	r3, #18
 1792 09e0 0BD1     		bne	.L85
1023:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
1024:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Enable the VBAT channel*/
1025:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     ADC->CCR |= ADC_CCR_VBATE;
 1793              		.loc 1 1025 0 is_stmt 1
 1794 09e2 4FF40C53 		mov	r3, #8960
 1795 09e6 C4F20103 		movt	r3, 16385
 1796 09ea 4FF40C52 		mov	r2, #8960
 1797 09ee C4F20102 		movt	r2, 16385
 1798 09f2 5268     		ldr	r2, [r2, #4]
 1799 09f4 42F48002 		orr	r2, r2, #4194304
 1800 09f8 5A60     		str	r2, [r3, #4]
 1801              	.L85:
1026:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
1027:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
1028:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VRE
1029:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channe
 1802              		.loc 1 1029 0
 1803 09fa 7B68     		ldr	r3, [r7, #4]
 1804 09fc 1A68     		ldr	r2, [r3]
 1805 09fe 4FF40053 		mov	r3, #8192
 1806 0a02 C4F20103 		movt	r3, 16385
 1807 0a06 9A42     		cmp	r2, r3
 1808 0a08 13D1     		bne	.L86
 1809              		.loc 1 1029 0 is_stmt 0 discriminator 1
 1810 0a0a 3B68     		ldr	r3, [r7]
 1811 0a0c 1B68     		ldr	r3, [r3]
 1812 0a0e 102B     		cmp	r3, #16
 1813 0a10 03D0     		beq	.L87
 1814 0a12 3B68     		ldr	r3, [r7]
 1815 0a14 1B68     		ldr	r3, [r3]
 1816 0a16 112B     		cmp	r3, #17
 1817 0a18 0BD1     		bne	.L86
 1818              	.L87:
1030:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
1031:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Enable the TSVREFE channel*/
1032:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     ADC->CCR |= ADC_CCR_TSVREFE;
 1819              		.loc 1 1032 0 is_stmt 1
 1820 0a1a 4FF40C53 		mov	r3, #8960
 1821 0a1e C4F20103 		movt	r3, 16385
 1822 0a22 4FF40C52 		mov	r2, #8960
 1823 0a26 C4F20102 		movt	r2, 16385
 1824 0a2a 5268     		ldr	r2, [r2, #4]
 1825 0a2c 42F40002 		orr	r2, r2, #8388608
 1826 0a30 5A60     		str	r2, [r3, #4]
 1827              	.L86:
1033:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
1034:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
1035:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Process unlocked */
1036:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 1828              		.loc 1 1036 0
 1829 0a32 7B68     		ldr	r3, [r7, #4]
 1830 0a34 0022     		movs	r2, #0
 1831 0a36 83F83C20 		strb	r2, [r3, #60]
1037:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
1038:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Return function status */
1039:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   return HAL_OK;
 1832              		.loc 1 1039 0
 1833 0a3a 0023     		movs	r3, #0
 1834              	.L79:
1040:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** }
 1835              		.loc 1 1040 0
 1836 0a3c 1846     		mov	r0, r3
 1837 0a3e 0837     		adds	r7, r7, #8
 1838 0a40 BD46     		mov	sp, r7
 1839              		@ sp needed
 1840 0a42 90BC     		pop	{r4, r7}
 1841 0a44 7047     		bx	lr
 1842              		.cfi_endproc
 1843              	.LFE73:
 1845 0a46 00BF     		.align	2
 1846              		.global	HAL_ADC_AnalogWDGConfig
 1847              		.thumb
 1848              		.thumb_func
 1850              	HAL_ADC_AnalogWDGConfig:
 1851              	.LFB74:
1041:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
1042:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /**
1043:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @brief  Configures the analog watchdog.
1044:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
1045:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *         the configuration information for the specified ADC.
1046:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @param  AnalogWDGConfig : pointer to an ADC_AnalogWDGConfTypeDef structure 
1047:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *         that contains the configuration information of ADC analog watchdog.
1048:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @retval HAL status	  
1049:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   */
1050:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* Analog
1051:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** {
 1852              		.loc 1 1051 0
 1853              		.cfi_startproc
 1854              		@ args = 0, pretend = 0, frame = 8
 1855              		@ frame_needed = 1, uses_anonymous_args = 0
 1856              		@ link register save eliminated.
 1857 0a48 80B4     		push	{r7}
 1858              		.cfi_def_cfa_offset 4
 1859              		.cfi_offset 7, -4
 1860 0a4a 83B0     		sub	sp, sp, #12
 1861              		.cfi_def_cfa_offset 16
 1862 0a4c 00AF     		add	r7, sp, #0
 1863              		.cfi_def_cfa_register 7
 1864 0a4e 7860     		str	r0, [r7, #4]
 1865 0a50 3960     		str	r1, [r7]
1052:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** #ifdef USE_FULL_ASSERT  
1053:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   uint32_t tmp = 0;
1054:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** #endif /* USE_FULL_ASSERT  */  
1055:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
1056:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Check the parameters */
1057:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   assert_param(IS_ADC_ANALOG_WATCHDOG(AnalogWDGConfig->WatchdogMode));
1058:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
1059:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));
1060:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
1061:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** #ifdef USE_FULL_ASSERT  
1062:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   tmp = __HAL_ADC_GET_RESOLUTION(hadc);
1063:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   assert_param(IS_ADC_RANGE(tmp, AnalogWDGConfig->HighThreshold));
1064:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   assert_param(IS_ADC_RANGE(tmp, AnalogWDGConfig->LowThreshold));
1065:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** #endif /* USE_FULL_ASSERT  */
1066:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
1067:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Process locked */
1068:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   __HAL_LOCK(hadc);
 1866              		.loc 1 1068 0
 1867 0a52 7B68     		ldr	r3, [r7, #4]
 1868 0a54 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 1869 0a58 012B     		cmp	r3, #1
 1870 0a5a 01D1     		bne	.L89
 1871              		.loc 1 1068 0 is_stmt 0 discriminator 1
 1872 0a5c 0223     		movs	r3, #2
 1873 0a5e 4BE0     		b	.L90
 1874              	.L89:
 1875              		.loc 1 1068 0 discriminator 2
 1876 0a60 7B68     		ldr	r3, [r7, #4]
 1877 0a62 0122     		movs	r2, #1
 1878 0a64 83F83C20 		strb	r2, [r3, #60]
1069:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
1070:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   if(AnalogWDGConfig->ITMode == ENABLE)
 1879              		.loc 1 1070 0 is_stmt 1 discriminator 2
 1880 0a68 3B68     		ldr	r3, [r7]
 1881 0a6a 1B69     		ldr	r3, [r3, #16]
 1882 0a6c 012B     		cmp	r3, #1
 1883 0a6e 08D1     		bne	.L91
1071:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
1072:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Enable the ADC Analog watchdog interrupt */
1073:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 1884              		.loc 1 1073 0
 1885 0a70 7B68     		ldr	r3, [r7, #4]
 1886 0a72 1B68     		ldr	r3, [r3]
 1887 0a74 7A68     		ldr	r2, [r7, #4]
 1888 0a76 1268     		ldr	r2, [r2]
 1889 0a78 5268     		ldr	r2, [r2, #4]
 1890 0a7a 42F04002 		orr	r2, r2, #64
 1891 0a7e 5A60     		str	r2, [r3, #4]
 1892 0a80 07E0     		b	.L92
 1893              	.L91:
1074:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
1075:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   else
1076:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
1077:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Disable the ADC Analog watchdog interrupt */
1078:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 1894              		.loc 1 1078 0
 1895 0a82 7B68     		ldr	r3, [r7, #4]
 1896 0a84 1B68     		ldr	r3, [r3]
 1897 0a86 7A68     		ldr	r2, [r7, #4]
 1898 0a88 1268     		ldr	r2, [r2]
 1899 0a8a 5268     		ldr	r2, [r2, #4]
 1900 0a8c 22F04002 		bic	r2, r2, #64
 1901 0a90 5A60     		str	r2, [r3, #4]
 1902              	.L92:
1079:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
1080:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
1081:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Clear AWDEN, JAWDEN and AWDSGL bits */
1082:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   hadc->Instance->CR1 &=  ~(ADC_CR1_AWDSGL | ADC_CR1_JAWDEN | ADC_CR1_AWDEN);
 1903              		.loc 1 1082 0
 1904 0a92 7B68     		ldr	r3, [r7, #4]
 1905 0a94 1A68     		ldr	r2, [r3]
 1906 0a96 7B68     		ldr	r3, [r7, #4]
 1907 0a98 1B68     		ldr	r3, [r3]
 1908 0a9a 5B68     		ldr	r3, [r3, #4]
 1909 0a9c 23F44003 		bic	r3, r3, #12582912
 1910 0aa0 23F40073 		bic	r3, r3, #512
 1911 0aa4 5360     		str	r3, [r2, #4]
1083:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
1084:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Set the analog watchdog enable mode */
1085:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   hadc->Instance->CR1 |= AnalogWDGConfig->WatchdogMode;
 1912              		.loc 1 1085 0
 1913 0aa6 7B68     		ldr	r3, [r7, #4]
 1914 0aa8 1B68     		ldr	r3, [r3]
 1915 0aaa 7A68     		ldr	r2, [r7, #4]
 1916 0aac 1268     		ldr	r2, [r2]
 1917 0aae 5168     		ldr	r1, [r2, #4]
 1918 0ab0 3A68     		ldr	r2, [r7]
 1919 0ab2 1268     		ldr	r2, [r2]
 1920 0ab4 0A43     		orrs	r2, r2, r1
 1921 0ab6 5A60     		str	r2, [r3, #4]
1086:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
1087:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Set the high threshold */
1088:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   hadc->Instance->HTR = AnalogWDGConfig->HighThreshold;
 1922              		.loc 1 1088 0
 1923 0ab8 7B68     		ldr	r3, [r7, #4]
 1924 0aba 1B68     		ldr	r3, [r3]
 1925 0abc 3A68     		ldr	r2, [r7]
 1926 0abe 5268     		ldr	r2, [r2, #4]
 1927 0ac0 5A62     		str	r2, [r3, #36]
1089:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
1090:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Set the low threshold */
1091:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   hadc->Instance->LTR = AnalogWDGConfig->LowThreshold;
 1928              		.loc 1 1091 0
 1929 0ac2 7B68     		ldr	r3, [r7, #4]
 1930 0ac4 1B68     		ldr	r3, [r3]
 1931 0ac6 3A68     		ldr	r2, [r7]
 1932 0ac8 9268     		ldr	r2, [r2, #8]
 1933 0aca 9A62     		str	r2, [r3, #40]
1092:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
1093:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Clear the Analog watchdog channel select bits */
1094:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   hadc->Instance->CR1 &= ~ADC_CR1_AWDCH;
 1934              		.loc 1 1094 0
 1935 0acc 7B68     		ldr	r3, [r7, #4]
 1936 0ace 1B68     		ldr	r3, [r3]
 1937 0ad0 7A68     		ldr	r2, [r7, #4]
 1938 0ad2 1268     		ldr	r2, [r2]
 1939 0ad4 5268     		ldr	r2, [r2, #4]
 1940 0ad6 22F01F02 		bic	r2, r2, #31
 1941 0ada 5A60     		str	r2, [r3, #4]
1095:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
1096:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Set the Analog watchdog channel */
1097:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   hadc->Instance->CR1 |= AnalogWDGConfig->Channel;
 1942              		.loc 1 1097 0
 1943 0adc 7B68     		ldr	r3, [r7, #4]
 1944 0ade 1B68     		ldr	r3, [r3]
 1945 0ae0 7A68     		ldr	r2, [r7, #4]
 1946 0ae2 1268     		ldr	r2, [r2]
 1947 0ae4 5168     		ldr	r1, [r2, #4]
 1948 0ae6 3A68     		ldr	r2, [r7]
 1949 0ae8 D268     		ldr	r2, [r2, #12]
 1950 0aea 0A43     		orrs	r2, r2, r1
 1951 0aec 5A60     		str	r2, [r3, #4]
1098:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
1099:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Process unlocked */
1100:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 1952              		.loc 1 1100 0
 1953 0aee 7B68     		ldr	r3, [r7, #4]
 1954 0af0 0022     		movs	r2, #0
 1955 0af2 83F83C20 		strb	r2, [r3, #60]
1101:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
1102:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Return function status */
1103:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   return HAL_OK;
 1956              		.loc 1 1103 0
 1957 0af6 0023     		movs	r3, #0
 1958              	.L90:
1104:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** }
 1959              		.loc 1 1104 0
 1960 0af8 1846     		mov	r0, r3
 1961 0afa 0C37     		adds	r7, r7, #12
 1962 0afc BD46     		mov	sp, r7
 1963              		@ sp needed
 1964 0afe 5DF8047B 		ldr	r7, [sp], #4
 1965 0b02 7047     		bx	lr
 1966              		.cfi_endproc
 1967              	.LFE74:
 1969              		.align	2
 1970              		.global	HAL_ADC_GetState
 1971              		.thumb
 1972              		.thumb_func
 1974              	HAL_ADC_GetState:
 1975              	.LFB75:
1105:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
1106:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /**
1107:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @}
1108:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   */
1109:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
1110:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /** @defgroup ADC_Group4 ADC Peripheral State functions
1111:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****  *  @brief   ADC Peripheral State functions 
1112:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****  *
1113:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** @verbatim   
1114:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****  ===============================================================================
1115:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****             ##### Peripheral State and errors functions #####
1116:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****  ===============================================================================  
1117:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     [..]
1118:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     This subsection provides functions allowing to
1119:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       (+) Check the ADC state
1120:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       (+) Check the ADC Error
1121:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****          
1122:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** @endverbatim
1123:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @{
1124:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   */
1125:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
1126:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /**
1127:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @brief  return the ADC state
1128:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
1129:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *         the configuration information for the specified ADC.
1130:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @retval HAL state
1131:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   */
1132:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** HAL_ADC_StateTypeDef HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
1133:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** {
 1976              		.loc 1 1133 0
 1977              		.cfi_startproc
 1978              		@ args = 0, pretend = 0, frame = 8
 1979              		@ frame_needed = 1, uses_anonymous_args = 0
 1980              		@ link register save eliminated.
 1981 0b04 80B4     		push	{r7}
 1982              		.cfi_def_cfa_offset 4
 1983              		.cfi_offset 7, -4
 1984 0b06 83B0     		sub	sp, sp, #12
 1985              		.cfi_def_cfa_offset 16
 1986 0b08 00AF     		add	r7, sp, #0
 1987              		.cfi_def_cfa_register 7
 1988 0b0a 7860     		str	r0, [r7, #4]
1134:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Return ADC state */
1135:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   return hadc->State;
 1989              		.loc 1 1135 0
 1990 0b0c 7B68     		ldr	r3, [r7, #4]
 1991 0b0e 93F83D30 		ldrb	r3, [r3, #61]
 1992 0b12 DBB2     		uxtb	r3, r3
1136:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** }
 1993              		.loc 1 1136 0
 1994 0b14 1846     		mov	r0, r3
 1995 0b16 0C37     		adds	r7, r7, #12
 1996 0b18 BD46     		mov	sp, r7
 1997              		@ sp needed
 1998 0b1a 5DF8047B 		ldr	r7, [sp], #4
 1999 0b1e 7047     		bx	lr
 2000              		.cfi_endproc
 2001              	.LFE75:
 2003              		.align	2
 2004              		.global	HAL_ADC_GetError
 2005              		.thumb
 2006              		.thumb_func
 2008              	HAL_ADC_GetError:
 2009              	.LFB76:
1137:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
1138:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /**
1139:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @brief  Return the ADC error code
1140:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
1141:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *         the configuration information for the specified ADC.
1142:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @retval ADC Error Code
1143:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   */
1144:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** uint32_t HAL_ADC_GetError(ADC_HandleTypeDef *hadc)
1145:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** {
 2010              		.loc 1 1145 0
 2011              		.cfi_startproc
 2012              		@ args = 0, pretend = 0, frame = 8
 2013              		@ frame_needed = 1, uses_anonymous_args = 0
 2014              		@ link register save eliminated.
 2015 0b20 80B4     		push	{r7}
 2016              		.cfi_def_cfa_offset 4
 2017              		.cfi_offset 7, -4
 2018 0b22 83B0     		sub	sp, sp, #12
 2019              		.cfi_def_cfa_offset 16
 2020 0b24 00AF     		add	r7, sp, #0
 2021              		.cfi_def_cfa_register 7
 2022 0b26 7860     		str	r0, [r7, #4]
1146:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   return hadc->ErrorCode;
 2023              		.loc 1 1146 0
 2024 0b28 7B68     		ldr	r3, [r7, #4]
 2025 0b2a 1B6C     		ldr	r3, [r3, #64]
1147:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** }
 2026              		.loc 1 1147 0
 2027 0b2c 1846     		mov	r0, r3
 2028 0b2e 0C37     		adds	r7, r7, #12
 2029 0b30 BD46     		mov	sp, r7
 2030              		@ sp needed
 2031 0b32 5DF8047B 		ldr	r7, [sp], #4
 2032 0b36 7047     		bx	lr
 2033              		.cfi_endproc
 2034              	.LFE76:
 2036              		.align	2
 2037              		.thumb
 2038              		.thumb_func
 2040              	ADC_Init:
 2041              	.LFB77:
1148:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
1149:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /**
1150:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @}
1151:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   */
1152:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
1153:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /**
1154:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @brief  Initializes the ADCx peripheral according to the specified parameters 
1155:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *         in the ADC_InitStruct without initializing the ADC MSP.       
1156:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
1157:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *         the configuration information for the specified ADC.  
1158:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @retval None
1159:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   */
1160:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** static void ADC_Init(ADC_HandleTypeDef* hadc)
1161:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** {
 2042              		.loc 1 1161 0
 2043              		.cfi_startproc
 2044              		@ args = 0, pretend = 0, frame = 8
 2045              		@ frame_needed = 1, uses_anonymous_args = 0
 2046              		@ link register save eliminated.
 2047 0b38 80B4     		push	{r7}
 2048              		.cfi_def_cfa_offset 4
 2049              		.cfi_offset 7, -4
 2050 0b3a 83B0     		sub	sp, sp, #12
 2051              		.cfi_def_cfa_offset 16
 2052 0b3c 00AF     		add	r7, sp, #0
 2053              		.cfi_def_cfa_register 7
 2054 0b3e 7860     		str	r0, [r7, #4]
1162:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
1163:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Set ADC parameters */
1164:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Set the ADC clock prescaler */
1165:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   ADC->CCR &= ~(ADC_CCR_ADCPRE);
 2055              		.loc 1 1165 0
 2056 0b40 4FF40C53 		mov	r3, #8960
 2057 0b44 C4F20103 		movt	r3, 16385
 2058 0b48 4FF40C52 		mov	r2, #8960
 2059 0b4c C4F20102 		movt	r2, 16385
 2060 0b50 5268     		ldr	r2, [r2, #4]
 2061 0b52 22F44032 		bic	r2, r2, #196608
 2062 0b56 5A60     		str	r2, [r3, #4]
1166:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   ADC->CCR |=  hadc->Init.ClockPrescaler;
 2063              		.loc 1 1166 0
 2064 0b58 4FF40C53 		mov	r3, #8960
 2065 0b5c C4F20103 		movt	r3, 16385
 2066 0b60 4FF40C52 		mov	r2, #8960
 2067 0b64 C4F20102 		movt	r2, 16385
 2068 0b68 5168     		ldr	r1, [r2, #4]
 2069 0b6a 7A68     		ldr	r2, [r7, #4]
 2070 0b6c 5268     		ldr	r2, [r2, #4]
 2071 0b6e 0A43     		orrs	r2, r2, r1
 2072 0b70 5A60     		str	r2, [r3, #4]
1167:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
1168:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Set ADC scan mode */
1169:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 2073              		.loc 1 1169 0
 2074 0b72 7B68     		ldr	r3, [r7, #4]
 2075 0b74 1B68     		ldr	r3, [r3]
 2076 0b76 7A68     		ldr	r2, [r7, #4]
 2077 0b78 1268     		ldr	r2, [r2]
 2078 0b7a 5268     		ldr	r2, [r2, #4]
 2079 0b7c 22F48072 		bic	r2, r2, #256
 2080 0b80 5A60     		str	r2, [r3, #4]
1170:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   hadc->Instance->CR1 |=  __HAL_ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 2081              		.loc 1 1170 0
 2082 0b82 7B68     		ldr	r3, [r7, #4]
 2083 0b84 1B68     		ldr	r3, [r3]
 2084 0b86 7A68     		ldr	r2, [r7, #4]
 2085 0b88 1268     		ldr	r2, [r2]
 2086 0b8a 5168     		ldr	r1, [r2, #4]
 2087 0b8c 7A68     		ldr	r2, [r7, #4]
 2088 0b8e 1269     		ldr	r2, [r2, #16]
 2089 0b90 1202     		lsls	r2, r2, #8
 2090 0b92 0A43     		orrs	r2, r2, r1
 2091 0b94 5A60     		str	r2, [r3, #4]
1171:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
1172:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Set ADC resolution */
1173:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 2092              		.loc 1 1173 0
 2093 0b96 7B68     		ldr	r3, [r7, #4]
 2094 0b98 1B68     		ldr	r3, [r3]
 2095 0b9a 7A68     		ldr	r2, [r7, #4]
 2096 0b9c 1268     		ldr	r2, [r2]
 2097 0b9e 5268     		ldr	r2, [r2, #4]
 2098 0ba0 22F04072 		bic	r2, r2, #50331648
 2099 0ba4 5A60     		str	r2, [r3, #4]
1174:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   hadc->Instance->CR1 |=  hadc->Init.Resolution;
 2100              		.loc 1 1174 0
 2101 0ba6 7B68     		ldr	r3, [r7, #4]
 2102 0ba8 1B68     		ldr	r3, [r3]
 2103 0baa 7A68     		ldr	r2, [r7, #4]
 2104 0bac 1268     		ldr	r2, [r2]
 2105 0bae 5168     		ldr	r1, [r2, #4]
 2106 0bb0 7A68     		ldr	r2, [r7, #4]
 2107 0bb2 9268     		ldr	r2, [r2, #8]
 2108 0bb4 0A43     		orrs	r2, r2, r1
 2109 0bb6 5A60     		str	r2, [r3, #4]
1175:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
1176:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Set ADC data alignment */
1177:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 2110              		.loc 1 1177 0
 2111 0bb8 7B68     		ldr	r3, [r7, #4]
 2112 0bba 1B68     		ldr	r3, [r3]
 2113 0bbc 7A68     		ldr	r2, [r7, #4]
 2114 0bbe 1268     		ldr	r2, [r2]
 2115 0bc0 9268     		ldr	r2, [r2, #8]
 2116 0bc2 22F40062 		bic	r2, r2, #2048
 2117 0bc6 9A60     		str	r2, [r3, #8]
1178:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   hadc->Instance->CR2 |= hadc->Init.DataAlign;
 2118              		.loc 1 1178 0
 2119 0bc8 7B68     		ldr	r3, [r7, #4]
 2120 0bca 1B68     		ldr	r3, [r3]
 2121 0bcc 7A68     		ldr	r2, [r7, #4]
 2122 0bce 1268     		ldr	r2, [r2]
 2123 0bd0 9168     		ldr	r1, [r2, #8]
 2124 0bd2 7A68     		ldr	r2, [r7, #4]
 2125 0bd4 D268     		ldr	r2, [r2, #12]
 2126 0bd6 0A43     		orrs	r2, r2, r1
 2127 0bd8 9A60     		str	r2, [r3, #8]
1179:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
1180:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Select external trigger to start conversion */
1181:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 2128              		.loc 1 1181 0
 2129 0bda 7B68     		ldr	r3, [r7, #4]
 2130 0bdc 1B68     		ldr	r3, [r3]
 2131 0bde 7A68     		ldr	r2, [r7, #4]
 2132 0be0 1268     		ldr	r2, [r2]
 2133 0be2 9268     		ldr	r2, [r2, #8]
 2134 0be4 22F07062 		bic	r2, r2, #251658240
 2135 0be8 9A60     		str	r2, [r3, #8]
1182:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 2136              		.loc 1 1182 0
 2137 0bea 7B68     		ldr	r3, [r7, #4]
 2138 0bec 1B68     		ldr	r3, [r3]
 2139 0bee 7A68     		ldr	r2, [r7, #4]
 2140 0bf0 1268     		ldr	r2, [r2]
 2141 0bf2 9168     		ldr	r1, [r2, #8]
 2142 0bf4 7A68     		ldr	r2, [r7, #4]
 2143 0bf6 126B     		ldr	r2, [r2, #48]
 2144 0bf8 0A43     		orrs	r2, r2, r1
 2145 0bfa 9A60     		str	r2, [r3, #8]
1183:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
1184:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Select external trigger polarity */
1185:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 2146              		.loc 1 1185 0
 2147 0bfc 7B68     		ldr	r3, [r7, #4]
 2148 0bfe 1B68     		ldr	r3, [r3]
 2149 0c00 7A68     		ldr	r2, [r7, #4]
 2150 0c02 1268     		ldr	r2, [r2]
 2151 0c04 9268     		ldr	r2, [r2, #8]
 2152 0c06 22F04052 		bic	r2, r2, #805306368
 2153 0c0a 9A60     		str	r2, [r3, #8]
1186:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 2154              		.loc 1 1186 0
 2155 0c0c 7B68     		ldr	r3, [r7, #4]
 2156 0c0e 1B68     		ldr	r3, [r3]
 2157 0c10 7A68     		ldr	r2, [r7, #4]
 2158 0c12 1268     		ldr	r2, [r2]
 2159 0c14 9168     		ldr	r1, [r2, #8]
 2160 0c16 7A68     		ldr	r2, [r7, #4]
 2161 0c18 D26A     		ldr	r2, [r2, #44]
 2162 0c1a 0A43     		orrs	r2, r2, r1
 2163 0c1c 9A60     		str	r2, [r3, #8]
1187:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
1188:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Enable or disable ADC continuous conversion mode */
1189:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 2164              		.loc 1 1189 0
 2165 0c1e 7B68     		ldr	r3, [r7, #4]
 2166 0c20 1B68     		ldr	r3, [r3]
 2167 0c22 7A68     		ldr	r2, [r7, #4]
 2168 0c24 1268     		ldr	r2, [r2]
 2169 0c26 9268     		ldr	r2, [r2, #8]
 2170 0c28 22F00202 		bic	r2, r2, #2
 2171 0c2c 9A60     		str	r2, [r3, #8]
1190:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   hadc->Instance->CR2 |= __HAL_ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 2172              		.loc 1 1190 0
 2173 0c2e 7B68     		ldr	r3, [r7, #4]
 2174 0c30 1B68     		ldr	r3, [r3]
 2175 0c32 7A68     		ldr	r2, [r7, #4]
 2176 0c34 1268     		ldr	r2, [r2]
 2177 0c36 9168     		ldr	r1, [r2, #8]
 2178 0c38 7A68     		ldr	r2, [r7, #4]
 2179 0c3a 9269     		ldr	r2, [r2, #24]
 2180 0c3c 5200     		lsls	r2, r2, #1
 2181 0c3e 0A43     		orrs	r2, r2, r1
 2182 0c40 9A60     		str	r2, [r3, #8]
1191:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
1192:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   if (hadc->Init.DiscontinuousConvMode != DISABLE)
 2183              		.loc 1 1192 0
 2184 0c42 7B68     		ldr	r3, [r7, #4]
 2185 0c44 5B6A     		ldr	r3, [r3, #36]
 2186 0c46 002B     		cmp	r3, #0
 2187 0c48 1BD0     		beq	.L98
1193:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
1194:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
1195:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
1196:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Enable the selected ADC regular discontinuous mode */
1197:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 2188              		.loc 1 1197 0
 2189 0c4a 7B68     		ldr	r3, [r7, #4]
 2190 0c4c 1B68     		ldr	r3, [r3]
 2191 0c4e 7A68     		ldr	r2, [r7, #4]
 2192 0c50 1268     		ldr	r2, [r2]
 2193 0c52 5268     		ldr	r2, [r2, #4]
 2194 0c54 42F40062 		orr	r2, r2, #2048
 2195 0c58 5A60     		str	r2, [r3, #4]
1198:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
1199:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Set the number of channels to be converted in discontinuous mode */
1200:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 2196              		.loc 1 1200 0
 2197 0c5a 7B68     		ldr	r3, [r7, #4]
 2198 0c5c 1B68     		ldr	r3, [r3]
 2199 0c5e 7A68     		ldr	r2, [r7, #4]
 2200 0c60 1268     		ldr	r2, [r2]
 2201 0c62 5268     		ldr	r2, [r2, #4]
 2202 0c64 22F46042 		bic	r2, r2, #57344
 2203 0c68 5A60     		str	r2, [r3, #4]
1201:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     hadc->Instance->CR1 |=  __HAL_ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 2204              		.loc 1 1201 0
 2205 0c6a 7B68     		ldr	r3, [r7, #4]
 2206 0c6c 1B68     		ldr	r3, [r3]
 2207 0c6e 7A68     		ldr	r2, [r7, #4]
 2208 0c70 1268     		ldr	r2, [r2]
 2209 0c72 5168     		ldr	r1, [r2, #4]
 2210 0c74 7A68     		ldr	r2, [r7, #4]
 2211 0c76 926A     		ldr	r2, [r2, #40]
 2212 0c78 013A     		subs	r2, r2, #1
 2213 0c7a 5203     		lsls	r2, r2, #13
 2214 0c7c 0A43     		orrs	r2, r2, r1
 2215 0c7e 5A60     		str	r2, [r3, #4]
 2216 0c80 07E0     		b	.L99
 2217              	.L98:
1202:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
1203:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   else
1204:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
1205:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Disable the selected ADC regular discontinuous mode */
1206:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 2218              		.loc 1 1206 0
 2219 0c82 7B68     		ldr	r3, [r7, #4]
 2220 0c84 1B68     		ldr	r3, [r3]
 2221 0c86 7A68     		ldr	r2, [r7, #4]
 2222 0c88 1268     		ldr	r2, [r2]
 2223 0c8a 5268     		ldr	r2, [r2, #4]
 2224 0c8c 22F40062 		bic	r2, r2, #2048
 2225 0c90 5A60     		str	r2, [r3, #4]
 2226              	.L99:
1207:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
1208:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
1209:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Set ADC number of conversion */
1210:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 2227              		.loc 1 1210 0
 2228 0c92 7B68     		ldr	r3, [r7, #4]
 2229 0c94 1B68     		ldr	r3, [r3]
 2230 0c96 7A68     		ldr	r2, [r7, #4]
 2231 0c98 1268     		ldr	r2, [r2]
 2232 0c9a D26A     		ldr	r2, [r2, #44]
 2233 0c9c 22F47002 		bic	r2, r2, #15728640
 2234 0ca0 DA62     		str	r2, [r3, #44]
1211:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   hadc->Instance->SQR1 |=  __HAL_ADC_SQR1(hadc->Init.NbrOfConversion);
 2235              		.loc 1 1211 0
 2236 0ca2 7B68     		ldr	r3, [r7, #4]
 2237 0ca4 1B68     		ldr	r3, [r3]
 2238 0ca6 7A68     		ldr	r2, [r7, #4]
 2239 0ca8 1268     		ldr	r2, [r2]
 2240 0caa D16A     		ldr	r1, [r2, #44]
 2241 0cac 7A68     		ldr	r2, [r7, #4]
 2242 0cae 126A     		ldr	r2, [r2, #32]
 2243 0cb0 013A     		subs	r2, r2, #1
 2244 0cb2 1205     		lsls	r2, r2, #20
 2245 0cb4 0A43     		orrs	r2, r2, r1
 2246 0cb6 DA62     		str	r2, [r3, #44]
1212:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
1213:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Enable or disable ADC DMA continuous request */
1214:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 2247              		.loc 1 1214 0
 2248 0cb8 7B68     		ldr	r3, [r7, #4]
 2249 0cba 1B68     		ldr	r3, [r3]
 2250 0cbc 7A68     		ldr	r2, [r7, #4]
 2251 0cbe 1268     		ldr	r2, [r2]
 2252 0cc0 9268     		ldr	r2, [r2, #8]
 2253 0cc2 22F40072 		bic	r2, r2, #512
 2254 0cc6 9A60     		str	r2, [r3, #8]
1215:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   hadc->Instance->CR2 |= __HAL_ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 2255              		.loc 1 1215 0
 2256 0cc8 7B68     		ldr	r3, [r7, #4]
 2257 0cca 1B68     		ldr	r3, [r3]
 2258 0ccc 7A68     		ldr	r2, [r7, #4]
 2259 0cce 1268     		ldr	r2, [r2]
 2260 0cd0 9168     		ldr	r1, [r2, #8]
 2261 0cd2 7A68     		ldr	r2, [r7, #4]
 2262 0cd4 D269     		ldr	r2, [r2, #28]
 2263 0cd6 5202     		lsls	r2, r2, #9
 2264 0cd8 0A43     		orrs	r2, r2, r1
 2265 0cda 9A60     		str	r2, [r3, #8]
1216:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
1217:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Enable or disable ADC end of conversion selection */
1218:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 2266              		.loc 1 1218 0
 2267 0cdc 7B68     		ldr	r3, [r7, #4]
 2268 0cde 1B68     		ldr	r3, [r3]
 2269 0ce0 7A68     		ldr	r2, [r7, #4]
 2270 0ce2 1268     		ldr	r2, [r2]
 2271 0ce4 9268     		ldr	r2, [r2, #8]
 2272 0ce6 22F48062 		bic	r2, r2, #1024
 2273 0cea 9A60     		str	r2, [r3, #8]
1219:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   hadc->Instance->CR2 |= __HAL_ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 2274              		.loc 1 1219 0
 2275 0cec 7B68     		ldr	r3, [r7, #4]
 2276 0cee 1B68     		ldr	r3, [r3]
 2277 0cf0 7A68     		ldr	r2, [r7, #4]
 2278 0cf2 1268     		ldr	r2, [r2]
 2279 0cf4 9168     		ldr	r1, [r2, #8]
 2280 0cf6 7A68     		ldr	r2, [r7, #4]
 2281 0cf8 5269     		ldr	r2, [r2, #20]
 2282 0cfa 9202     		lsls	r2, r2, #10
 2283 0cfc 0A43     		orrs	r2, r2, r1
 2284 0cfe 9A60     		str	r2, [r3, #8]
1220:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** }
 2285              		.loc 1 1220 0
 2286 0d00 0C37     		adds	r7, r7, #12
 2287 0d02 BD46     		mov	sp, r7
 2288              		@ sp needed
 2289 0d04 5DF8047B 		ldr	r7, [sp], #4
 2290 0d08 7047     		bx	lr
 2291              		.cfi_endproc
 2292              	.LFE77:
 2294 0d0a 00BF     		.align	2
 2295              		.thumb
 2296              		.thumb_func
 2298              	ADC_DMAConvCplt:
 2299              	.LFB78:
1221:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
1222:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /**
1223:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @brief  DMA transfer complete callback. 
1224:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @param  hdma: pointer to DMA handle.
1225:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @retval None
1226:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   */
1227:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
1228:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** {
 2300              		.loc 1 1228 0
 2301              		.cfi_startproc
 2302              		@ args = 0, pretend = 0, frame = 16
 2303              		@ frame_needed = 1, uses_anonymous_args = 0
 2304 0d0c 80B5     		push	{r7, lr}
 2305              		.cfi_def_cfa_offset 8
 2306              		.cfi_offset 7, -8
 2307              		.cfi_offset 14, -4
 2308 0d0e 84B0     		sub	sp, sp, #16
 2309              		.cfi_def_cfa_offset 24
 2310 0d10 00AF     		add	r7, sp, #0
 2311              		.cfi_def_cfa_register 7
 2312 0d12 7860     		str	r0, [r7, #4]
1229:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 2313              		.loc 1 1229 0
 2314 0d14 7B68     		ldr	r3, [r7, #4]
 2315 0d16 9B6B     		ldr	r3, [r3, #56]
 2316 0d18 FB60     		str	r3, [r7, #12]
1230:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
1231:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Check if an injected conversion is ready */
1232:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   if(hadc->State == HAL_ADC_STATE_EOC_INJ)
 2317              		.loc 1 1232 0
 2318 0d1a FB68     		ldr	r3, [r7, #12]
 2319 0d1c 93F83D30 		ldrb	r3, [r3, #61]
 2320 0d20 DBB2     		uxtb	r3, r3
 2321 0d22 252B     		cmp	r3, #37
 2322 0d24 04D1     		bne	.L101
1233:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
1234:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Change ADC state */
1235:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     hadc->State = HAL_ADC_STATE_EOC_INJ_REG;  
 2323              		.loc 1 1235 0
 2324 0d26 FB68     		ldr	r3, [r7, #12]
 2325 0d28 3522     		movs	r2, #53
 2326 0d2a 83F83D20 		strb	r2, [r3, #61]
 2327 0d2e 03E0     		b	.L102
 2328              	.L101:
1236:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
1237:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   else
1238:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
1239:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Change ADC state */
1240:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     hadc->State = HAL_ADC_STATE_EOC_REG;
 2329              		.loc 1 1240 0
 2330 0d30 FB68     		ldr	r3, [r7, #12]
 2331 0d32 1522     		movs	r2, #21
 2332 0d34 83F83D20 		strb	r2, [r3, #61]
 2333              	.L102:
1241:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
1242:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
1243:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     HAL_ADC_ConvCpltCallback(hadc); 
 2334              		.loc 1 1243 0
 2335 0d38 F868     		ldr	r0, [r7, #12]
 2336 0d3a FFF7FEFF 		bl	HAL_ADC_ConvCpltCallback
1244:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** }
 2337              		.loc 1 1244 0
 2338 0d3e 1037     		adds	r7, r7, #16
 2339 0d40 BD46     		mov	sp, r7
 2340              		@ sp needed
 2341 0d42 80BD     		pop	{r7, pc}
 2342              		.cfi_endproc
 2343              	.LFE78:
 2345              		.align	2
 2346              		.thumb
 2347              		.thumb_func
 2349              	ADC_DMAHalfConvCplt:
 2350              	.LFB79:
1245:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
1246:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /**
1247:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @brief  DMA half transfer complete callback. 
1248:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @param  hdma: pointer to DMA handle.
1249:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @retval None
1250:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   */
1251:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
1252:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** {
 2351              		.loc 1 1252 0
 2352              		.cfi_startproc
 2353              		@ args = 0, pretend = 0, frame = 16
 2354              		@ frame_needed = 1, uses_anonymous_args = 0
 2355 0d44 80B5     		push	{r7, lr}
 2356              		.cfi_def_cfa_offset 8
 2357              		.cfi_offset 7, -8
 2358              		.cfi_offset 14, -4
 2359 0d46 84B0     		sub	sp, sp, #16
 2360              		.cfi_def_cfa_offset 24
 2361 0d48 00AF     		add	r7, sp, #0
 2362              		.cfi_def_cfa_register 7
 2363 0d4a 7860     		str	r0, [r7, #4]
1253:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 2364              		.loc 1 1253 0
 2365 0d4c 7B68     		ldr	r3, [r7, #4]
 2366 0d4e 9B6B     		ldr	r3, [r3, #56]
 2367 0d50 FB60     		str	r3, [r7, #12]
1254:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Conversion complete callback */
1255:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     HAL_ADC_ConvHalfCpltCallback(hadc); 
 2368              		.loc 1 1255 0
 2369 0d52 F868     		ldr	r0, [r7, #12]
 2370 0d54 FFF7FEFF 		bl	HAL_ADC_ConvHalfCpltCallback
1256:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** }
 2371              		.loc 1 1256 0
 2372 0d58 1037     		adds	r7, r7, #16
 2373 0d5a BD46     		mov	sp, r7
 2374              		@ sp needed
 2375 0d5c 80BD     		pop	{r7, pc}
 2376              		.cfi_endproc
 2377              	.LFE79:
 2379 0d5e 00BF     		.align	2
 2380              		.thumb
 2381              		.thumb_func
 2383              	ADC_DMAError:
 2384              	.LFB80:
1257:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
1258:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /**
1259:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @brief  DMA error callback 
1260:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @param  hdma: pointer to DMA handle.
1261:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @retval None
1262:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   */
1263:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
1264:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** {
 2385              		.loc 1 1264 0
 2386              		.cfi_startproc
 2387              		@ args = 0, pretend = 0, frame = 16
 2388              		@ frame_needed = 1, uses_anonymous_args = 0
 2389 0d60 80B5     		push	{r7, lr}
 2390              		.cfi_def_cfa_offset 8
 2391              		.cfi_offset 7, -8
 2392              		.cfi_offset 14, -4
 2393 0d62 84B0     		sub	sp, sp, #16
 2394              		.cfi_def_cfa_offset 24
 2395 0d64 00AF     		add	r7, sp, #0
 2396              		.cfi_def_cfa_register 7
 2397 0d66 7860     		str	r0, [r7, #4]
1265:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 2398              		.loc 1 1265 0
 2399 0d68 7B68     		ldr	r3, [r7, #4]
 2400 0d6a 9B6B     		ldr	r3, [r3, #56]
 2401 0d6c FB60     		str	r3, [r7, #12]
1266:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     hadc->State= HAL_ADC_STATE_ERROR;
 2402              		.loc 1 1266 0
 2403 0d6e FB68     		ldr	r3, [r7, #12]
 2404 0d70 0422     		movs	r2, #4
 2405 0d72 83F83D20 		strb	r2, [r3, #61]
1267:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Set ADC error code to DMA error */
1268:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 2406              		.loc 1 1268 0
 2407 0d76 FB68     		ldr	r3, [r7, #12]
 2408 0d78 1B6C     		ldr	r3, [r3, #64]
 2409 0d7a 43F00202 		orr	r2, r3, #2
 2410 0d7e FB68     		ldr	r3, [r7, #12]
 2411 0d80 1A64     		str	r2, [r3, #64]
1269:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     HAL_ADC_ErrorCallback(hadc); 
 2412              		.loc 1 1269 0
 2413 0d82 F868     		ldr	r0, [r7, #12]
 2414 0d84 FFF7FEFF 		bl	HAL_ADC_ErrorCallback
1270:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** }
 2415              		.loc 1 1270 0
 2416 0d88 1037     		adds	r7, r7, #16
 2417 0d8a BD46     		mov	sp, r7
 2418              		@ sp needed
 2419 0d8c 80BD     		pop	{r7, pc}
 2420              		.cfi_endproc
 2421              	.LFE80:
 2423              	.Letext0:
 2424              		.file 3 "c:\\program files (x86)\\codesourcery\\arm-none-eabi\\include\\stdint.h"
 2425              		.file 4 "D:\\workspace\\console800480\\system/stm32f217xx.h"
 2426              		.file 5 "D:\\workspace\\console800480\\system/stm32f2xx.h"
 2427              		.file 6 "D:\\workspace\\console800480\\STM32F2xx_HAL_Driver\\Inc/stm32f2xx_hal_def.h"
 2428              		.file 7 "D:\\workspace\\console800480\\STM32F2xx_HAL_Driver\\Inc/stm32f2xx_hal_dma.h"
 2429              		.file 8 "D:\\workspace\\console800480\\STM32F2xx_HAL_Driver\\Inc/stm32f2xx_hal_adc.h"
 2430              		.file 9 "D:\\workspace\\console800480\\system/core_cm3.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f2xx_hal_adc.c
C:\Users\sagok\AppData\Local\Temp\ccJUGTei.s:18     .text:00000000 $t
C:\Users\sagok\AppData\Local\Temp\ccJUGTei.s:23     .text:00000000 HAL_ADC_Init
C:\Users\sagok\AppData\Local\Temp\ccJUGTei.s:148    .text:0000008c HAL_ADC_MspInit
C:\Users\sagok\AppData\Local\Temp\ccJUGTei.s:2040   .text:00000b38 ADC_Init
C:\Users\sagok\AppData\Local\Temp\ccJUGTei.s:93     .text:00000054 HAL_ADC_DeInit
C:\Users\sagok\AppData\Local\Temp\ccJUGTei.s:177    .text:000000a0 HAL_ADC_MspDeInit
C:\Users\sagok\AppData\Local\Temp\ccJUGTei.s:206    .text:000000b4 HAL_ADC_Start
C:\Users\sagok\AppData\Local\Temp\ccJUGTei.s:357    .text:00000190 HAL_ADC_Stop
C:\Users\sagok\AppData\Local\Temp\ccJUGTei.s:401    .text:000001c0 HAL_ADC_PollForConversion
C:\Users\sagok\AppData\Local\Temp\ccJUGTei.s:489    .text:00000238 HAL_ADC_PollForEvent
C:\Users\sagok\AppData\Local\Temp\ccJUGTei.s:594    .text:000002cc HAL_ADC_Start_IT
C:\Users\sagok\AppData\Local\Temp\ccJUGTei.s:764    .text:000003cc HAL_ADC_Stop_IT
C:\Users\sagok\AppData\Local\Temp\ccJUGTei.s:824    .text:0000041c HAL_ADC_IRQHandler
C:\Users\sagok\AppData\Local\Temp\ccJUGTei.s:1444   .text:000007ec HAL_ADC_ConvCpltCallback
C:\Users\sagok\AppData\Local\Temp\ccJUGTei.s:1502   .text:00000814 HAL_ADC_LevelOutOfWindowCallback
C:\Users\sagok\AppData\Local\Temp\ccJUGTei.s:1531   .text:00000828 HAL_ADC_ErrorCallback
C:\Users\sagok\AppData\Local\Temp\ccJUGTei.s:1190   .text:00000690 HAL_ADC_Start_DMA
C:\Users\sagok\AppData\Local\Temp\ccJUGTei.s:2298   .text:00000d0c ADC_DMAConvCplt
C:\Users\sagok\AppData\Local\Temp\ccJUGTei.s:2349   .text:00000d44 ADC_DMAHalfConvCplt
C:\Users\sagok\AppData\Local\Temp\ccJUGTei.s:2383   .text:00000d60 ADC_DMAError
C:\Users\sagok\AppData\Local\Temp\ccJUGTei.s:1346   .text:0000077c HAL_ADC_Stop_DMA
C:\Users\sagok\AppData\Local\Temp\ccJUGTei.s:1410   .text:000007d0 HAL_ADC_GetValue
C:\Users\sagok\AppData\Local\Temp\ccJUGTei.s:1473   .text:00000800 HAL_ADC_ConvHalfCpltCallback
C:\Users\sagok\AppData\Local\Temp\ccJUGTei.s:1560   .text:0000083c HAL_ADC_ConfigChannel
C:\Users\sagok\AppData\Local\Temp\ccJUGTei.s:1850   .text:00000a48 HAL_ADC_AnalogWDGConfig
C:\Users\sagok\AppData\Local\Temp\ccJUGTei.s:1974   .text:00000b04 HAL_ADC_GetState
C:\Users\sagok\AppData\Local\Temp\ccJUGTei.s:2008   .text:00000b20 HAL_ADC_GetError
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.7f551ac7fcad8b79b9df4bfdaa536673
                           .group:00000000 wm4.stm32f2xx_hal_conf.h.40.007126baefb9f966c36646edbf8040d2
                           .group:00000000 wm4.stm32f2xx.h.57.5ec1581efc43612c411d33a8686e9ec7
                           .group:00000000 wm4.stm32f217xx.h.52.9c940d76d00294b78837dc334c172fdd
                           .group:00000000 wm4.core_cm3.h.32.49180ccb4d36cabd2d7016d2a51d91ae
                           .group:00000000 wm4.newlib.h.8.384a112feabb3bef7b573ae48cde2e3b
                           .group:00000000 wm4.features.h.22.6a4ca7cd053637cc1d0db6c16f39b2d7
                           .group:00000000 wm4.config.h.183.aa62afef667fb61d15fa64c48beb2f14
                           .group:00000000 wm4._ansi.h.23.5644b60c990a4800b02a6e654e88f93a
                           .group:00000000 wm4.stdint.h.20.54ad762faa59e3c05491630641c8d8bf
                           .group:00000000 wm4.core_cmInstr.h.25.f50f886f2edf670cf199b35fd96f5c91
                           .group:00000000 wm4.core_cm3.h.130.63ab2348a6eed0fdb318040d970b676c
                           .group:00000000 wm4.stm32f217xx.h.978.a5c681952b2f704a0e7f2ba21d08adf5
                           .group:00000000 wm4.stm32f2xx.h.142.bc2155a1f7498bab16371e38413a9e41
                           .group:00000000 wm4.stm32f2xx_hal_def.h.74.8ad2dc8aa82c4fd02e5aeaae592641ba
                           .group:00000000 wm4.stm32f2xx_hal_rcc.h.142.ec0f91cc6576a6acebd17e6dd85829ae
                           .group:00000000 wm4.stm32f2xx_hal_rcc_ex.h.40.0829033e864455c6bdd0db01f8ba5a50
                           .group:00000000 wm4.stm32f2xx_hal_gpio.h.40.ba64e0bb94d9a68835f80159f39a86f1
                           .group:00000000 wm4.stm32f2xx_hal_gpio_ex.h.40.24e547fd402281923f446b510381083f
                           .group:00000000 wm4.stm32f2xx_hal_dma.h.40.5d9732ace2a21a4526ce8f0c52428fff
                           .group:00000000 wm4.stm32f2xx_hal_cortex.h.40.e10263d2ec5d4fa79b4180ce1a38aff1
                           .group:00000000 wm4.stm32f2xx_hal_adc.h.40.89ac8b78113cac4cf63847587daabac9
                           .group:00000000 wm4.stm32f2xx_hal_adc_ex.h.40.7de68ed256ef25526ee31cc017f2c291
                           .group:00000000 wm4.stm32f2xx_hal_flash.h.40.c3171719ce015e9cff20c795e44e886d
                           .group:00000000 wm4.stm32f2xx_hal_flash_ex.h.40.7389508bd24a0aeb077bde0c9fb651eb
                           .group:00000000 wm4.stm32f2xx_ll_fsmc.h.40.c1c32f2e1862f4dd342bd9b80fb895bb
                           .group:00000000 wm4.stm32f2xx_hal_pwr.h.40.812df32e5c31b609a128e9db0eb4cbd0
                           .group:00000000 wm4.stm32f2xx_hal_rtc.h.40.850fda5fe2cce8797446913dee18382f
                           .group:00000000 wm4.stm32f2xx_hal_rtc_ex.h.40.f3e0c408e3bf4e8a0352d7ec9a18a822
                           .group:00000000 wm4.stm32f2xx_ll_sdmmc.h.40.3719ab487c4b77401c572f459adf6eb7
                           .group:00000000 wm4.stm32f2xx_hal_sd.h.58.760215394dcc316161a6482c0af9b866
                           .group:00000000 wm4.stm32f2xx_hal_spi.h.40.7984243dbaba8b21c6392998a47e6987
                           .group:00000000 wm4.stm32f2xx_hal_tim.h.40.d79172f25d0e9a15dc346aba8515bdd6
                           .group:00000000 wm4.stm32f2xx_hal_tim_ex.h.40.361f280a7a3f60b4b238bb99ca728d83
                           .group:00000000 wm4.stm32f2xx_hal_uart.h.40.d74def561ae6f78f40f477c8426ecbef
                           .group:00000000 wm4.stm32f2xx_ll_usb.h.40.9b0206a05bc6ce3bec1648b51f22cb81
                           .group:00000000 wm4.stm32f2xx_hal_pcd.h.99.11faba414c39e357b2f23364912d0605
                           .group:00000000 wm4.stm32f2xx_hal_hcd.h.40.44ee5e972983ae0139ddbacdc75c44ef
                           .group:00000000 wm4.stm32f2xx_hal.h.64.ed79ee83e52b151b3c365392b398f866

UNDEFINED SYMBOLS
HAL_GetTick
HAL_ADCEx_InjectedConvCpltCallback
HAL_DMA_Start_IT
HAL_DMA_Abort
