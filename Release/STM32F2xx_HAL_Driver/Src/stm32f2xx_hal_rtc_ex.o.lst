   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f2xx_hal_rtc_ex.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.align	2
  19              		.global	HAL_RTCEx_SetTimeStamp
  20              		.thumb
  21              		.thumb_func
  23              	HAL_RTCEx_SetTimeStamp:
  24              	.LFB55:
  25              		.file 1 "../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c"
   1:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** /**
   2:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   ******************************************************************************
   3:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @file    stm32f2xx_hal_rtc_ex.c
   4:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @author  MCD Application Team
   5:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @version V1.0.1
   6:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @date    25-March-2014
   7:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @brief   RTC HAL module driver.
   8:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   *          This file provides firmware functions to manage the following 
   9:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   *          functionalities of the Real Time Clock (RTC) Extension peripheral:
  10:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   *           + RTC Time Stamp functions
  11:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   *           + RTC Tamper functions 
  12:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   *           + RTC Wake-up functions
  13:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   *           + Extension Control functions
  14:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   *           + Extension RTC features functions    
  15:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   *         
  16:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   @verbatim
  17:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   ==============================================================================
  18:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****                   ##### How to use this driver #####
  19:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   ==============================================================================
  20:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   [..] 
  21:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     (+) Enable the RTC domain access.
  22:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     (+) Configure the RTC Prescaler (Asynchronous and Synchronous) and RTC hour 
  23:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****         format using the HAL_RTC_Init() function.
  24:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
  25:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   *** RTC Wakeup configuration ***
  26:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   ================================
  27:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   [..] 
  28:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     (+) To configure the RTC Wakeup Clock source and Counter use the HAL_RTC_SetWakeUpTimer()
  29:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****         function. You can also configure the RTC Wakeup timer with interrupt mode 
  30:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****         using the HAL_RTC_SetWakeUpTimer_IT() function.
  31:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     (+) To read the RTC WakeUp Counter register, use the HAL_RTC_GetWakeUpTimer() 
  32:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****         function.
  33:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
  34:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   *** TimeStamp configuration ***
  35:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   ===============================
  36:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   [..]
  37:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     (+) Configure the RTC_AFx trigger and enables the RTC TimeStamp using the 
  38:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****         HAL_RTC_SetTimeStamp() function. You can also configure the RTC TimeStamp with 
  39:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****         interrupt mode using the HAL_RTC_SetTimeStamp_IT() function.
  40:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     (+) To read the RTC TimeStamp Time and Date register, use the HAL_RTC_GetTimeStamp()
  41:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****         function.
  42:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     (+) The TIMESTAMP alternate function can be mapped either to RTC_AF1 (PC13)
  43:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****         or RTC_AF2 (PI8) depending on the value of TSINSEL bit in 
  44:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****         RTC_TAFCR register. The corresponding pin is also selected by HAL_RTC_SetTimeStamp()
  45:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****         or HAL_RTC_SetTimeStamp_IT() function.
  46:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
  47:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   *** Tamper configuration ***
  48:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   ============================
  49:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   [..]
  50:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     (+) Enable the RTC Tamper and Configure the Tamper filter count, trigger Edge 
  51:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****         or Level according to the Tamper filter (if equal to 0 Edge else Level) 
  52:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****         value, sampling frequency, precharge or discharge and Pull-UP using the 
  53:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****         HAL_RTC_SetTamper() function. You can configure RTC Tamper with interrupt 
  54:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****         mode using HAL_RTC_SetTamper_IT() function.
  55:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     (+) The TAMPER1 alternate function can be mapped either to RTC_AF1 (PC13)
  56:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****         or RTC_AF2 (PI8) depending on the value of TAMP1INSEL bit in 
  57:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****         RTC_TAFCR register. The corresponding pin is also selected by HAL_RTC_SetTamper()
  58:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****         or HAL_RTC_SetTamper_IT() function.
  59:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
  60:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   *** Backup Data Registers configuration ***
  61:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   ===========================================
  62:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   [..]
  63:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     (+) To write to the RTC Backup Data registers, use the HAL_RTC_BKUPWrite()
  64:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****         function.  
  65:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     (+) To read the RTC Backup Data registers, use the HAL_RTC_BKUPRead()
  66:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****         function.
  67:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****      
  68:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****    @endverbatim
  69:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   ******************************************************************************
  70:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @attention
  71:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   *
  72:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * <h2><center>&copy; COPYRIGHT(c) 2014 STMicroelectronics</center></h2>
  73:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   *
  74:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * Redistribution and use in source and binary forms, with or without modification,
  75:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * are permitted provided that the following conditions are met:
  76:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  77:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   *      this list of conditions and the following disclaimer.
  78:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  79:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   *      this list of conditions and the following disclaimer in the documentation
  80:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   *      and/or other materials provided with the distribution.
  81:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  82:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   *      may be used to endorse or promote products derived from this software
  83:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   *      without specific prior written permission.
  84:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   *
  85:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  86:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  87:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  88:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  89:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  90:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  91:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  92:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  93:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  94:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  95:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   *
  96:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   ******************************************************************************
  97:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   */ 
  98:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** 
  99:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** /* Includes ------------------------------------------------------------------*/
 100:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** #include "stm32f2xx_hal.h"
 101:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** 
 102:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** /** @addtogroup STM32F2xx_HAL_Driver
 103:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @{
 104:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   */
 105:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** 
 106:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** /** @defgroup RTCEx 
 107:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @brief RTC HAL module driver
 108:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @{
 109:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   */
 110:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** 
 111:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** #ifdef HAL_RTC_MODULE_ENABLED
 112:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** 
 113:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** /* Private typedef -----------------------------------------------------------*/
 114:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** /* Private define ------------------------------------------------------------*/
 115:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** /* Private macro -------------------------------------------------------------*/
 116:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** /* Private variables ---------------------------------------------------------*/
 117:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** /* Private function prototypes -----------------------------------------------*/
 118:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** /* Private functions ---------------------------------------------------------*/
 119:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** 
 120:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** /** @defgroup RTCEx_Private_Functions
 121:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @{
 122:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   */
 123:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 124:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** 
 125:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** /** @defgroup RTCEx_Group1 RTC TimeStamp and Tamper functions
 126:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****  *  @brief   RTC TimeStamp and Tamper functions
 127:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****  *
 128:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** @verbatim   
 129:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****  ===============================================================================
 130:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****                  ##### RTC TimeStamp and Tamper functions #####
 131:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****  ===============================================================================  
 132:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****  
 133:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****  [..] This section provide functions allowing to configure TimeStamp feature
 134:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** 
 135:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** @endverbatim
 136:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @{
 137:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   */
 138:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** 
 139:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** /**
 140:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @brief  Sets TimeStamp.
 141:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @note   This API must be called before enabling the TimeStamp feature. 
 142:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @param  hrtc: RTC handle
 143:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @param  TimeStampEdge: Specifies the pin edge on which the TimeStamp is 
 144:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   *         activated.
 145:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   *          This parameter can be one of the following:
 146:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   *             @arg TimeStampEdge_Rising: the Time stamp event occurs on the  
 147:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   *                                        rising edge of the related pin.
 148:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   *             @arg TimeStampEdge_Falling: the Time stamp event occurs on the 
 149:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   *                                         falling edge of the related pin.
 150:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @param  RTC_TimeStampPin: specifies the RTC TimeStamp Pin.
 151:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   *          This parameter can be one of the following values:
 152:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   *             @arg RTC_TIMESTAMPPIN_PC13: PC13 is selected as RTC TimeStamp Pin.
 153:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.  
 154:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @retval HAL status
 155:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   */
 156:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t 
 157:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** {
  26              		.loc 1 157 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 24
  29              		@ frame_needed = 1, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31 0000 80B4     		push	{r7}
  32              		.cfi_def_cfa_offset 4
  33              		.cfi_offset 7, -4
  34 0002 87B0     		sub	sp, sp, #28
  35              		.cfi_def_cfa_offset 32
  36 0004 00AF     		add	r7, sp, #0
  37              		.cfi_def_cfa_register 7
  38 0006 F860     		str	r0, [r7, #12]
  39 0008 B960     		str	r1, [r7, #8]
  40 000a 7A60     		str	r2, [r7, #4]
 158:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   uint32_t tmpreg = 0;
  41              		.loc 1 158 0
  42 000c 0023     		movs	r3, #0
  43 000e 7B61     		str	r3, [r7, #20]
 159:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 160:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Check the parameters */
 161:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
 162:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));
 163:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 164:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Process Locked */ 
 165:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   __HAL_LOCK(hrtc);
  44              		.loc 1 165 0
  45 0010 FB68     		ldr	r3, [r7, #12]
  46 0012 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
  47 0014 012B     		cmp	r3, #1
  48 0016 01D1     		bne	.L2
  49              		.loc 1 165 0 is_stmt 0 discriminator 1
  50 0018 0223     		movs	r3, #2
  51 001a 40E0     		b	.L3
  52              	.L2:
  53              		.loc 1 165 0 discriminator 2
  54 001c FB68     		ldr	r3, [r7, #12]
  55 001e 0122     		movs	r2, #1
  56 0020 1A77     		strb	r2, [r3, #28]
 166:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 167:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
  57              		.loc 1 167 0 is_stmt 1 discriminator 2
  58 0022 FB68     		ldr	r3, [r7, #12]
  59 0024 0222     		movs	r2, #2
  60 0026 5A77     		strb	r2, [r3, #29]
 168:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 169:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Get the RTC_CR register and clear the bits to be configured */
 170:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
  61              		.loc 1 170 0 discriminator 2
  62 0028 FB68     		ldr	r3, [r7, #12]
  63 002a 1B68     		ldr	r3, [r3]
  64 002c 9B68     		ldr	r3, [r3, #8]
  65 002e 23F40063 		bic	r3, r3, #2048
  66 0032 23F00803 		bic	r3, r3, #8
  67 0036 7B61     		str	r3, [r7, #20]
 171:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     
 172:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   tmpreg|= TimeStampEdge;
  68              		.loc 1 172 0 discriminator 2
  69 0038 7A69     		ldr	r2, [r7, #20]
  70 003a BB68     		ldr	r3, [r7, #8]
  71 003c 1343     		orrs	r3, r3, r2
  72 003e 7B61     		str	r3, [r7, #20]
 173:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 174:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Disable the write protection for RTC registers */
 175:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
  73              		.loc 1 175 0 discriminator 2
  74 0040 FB68     		ldr	r3, [r7, #12]
  75 0042 1B68     		ldr	r3, [r3]
  76 0044 CA22     		movs	r2, #202
  77 0046 5A62     		str	r2, [r3, #36]
  78 0048 FB68     		ldr	r3, [r7, #12]
  79 004a 1B68     		ldr	r3, [r3]
  80 004c 5322     		movs	r2, #83
  81 004e 5A62     		str	r2, [r3, #36]
 176:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 177:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_TSINSEL;
  82              		.loc 1 177 0 discriminator 2
  83 0050 FB68     		ldr	r3, [r7, #12]
  84 0052 1B68     		ldr	r3, [r3]
  85 0054 FA68     		ldr	r2, [r7, #12]
  86 0056 1268     		ldr	r2, [r2]
  87 0058 126C     		ldr	r2, [r2, #64]
  88 005a 22F40032 		bic	r2, r2, #131072
  89 005e 1A64     		str	r2, [r3, #64]
 178:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   hrtc->Instance->TAFCR |= (uint32_t)(RTC_TimeStampPin); 
  90              		.loc 1 178 0 discriminator 2
  91 0060 FB68     		ldr	r3, [r7, #12]
  92 0062 1B68     		ldr	r3, [r3]
  93 0064 FA68     		ldr	r2, [r7, #12]
  94 0066 1268     		ldr	r2, [r2]
  95 0068 116C     		ldr	r1, [r2, #64]
  96 006a 7A68     		ldr	r2, [r7, #4]
  97 006c 0A43     		orrs	r2, r2, r1
  98 006e 1A64     		str	r2, [r3, #64]
 179:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 180:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Configure the Time Stamp TSEDGE and Enable bits */
 181:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   hrtc->Instance->CR = (uint32_t)tmpreg;
  99              		.loc 1 181 0 discriminator 2
 100 0070 FB68     		ldr	r3, [r7, #12]
 101 0072 1B68     		ldr	r3, [r3]
 102 0074 7A69     		ldr	r2, [r7, #20]
 103 0076 9A60     		str	r2, [r3, #8]
 182:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 183:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 104              		.loc 1 183 0 discriminator 2
 105 0078 FB68     		ldr	r3, [r7, #12]
 106 007a 1B68     		ldr	r3, [r3]
 107 007c FA68     		ldr	r2, [r7, #12]
 108 007e 1268     		ldr	r2, [r2]
 109 0080 9268     		ldr	r2, [r2, #8]
 110 0082 42F40062 		orr	r2, r2, #2048
 111 0086 9A60     		str	r2, [r3, #8]
 184:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 185:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Enable the write protection for RTC registers */
 186:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);    
 112              		.loc 1 186 0 discriminator 2
 113 0088 FB68     		ldr	r3, [r7, #12]
 114 008a 1B68     		ldr	r3, [r3]
 115 008c FF22     		movs	r2, #255
 116 008e 5A62     		str	r2, [r3, #36]
 187:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 188:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Change RTC state */
 189:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   hrtc->State = HAL_RTC_STATE_READY; 
 117              		.loc 1 189 0 discriminator 2
 118 0090 FB68     		ldr	r3, [r7, #12]
 119 0092 0122     		movs	r2, #1
 120 0094 5A77     		strb	r2, [r3, #29]
 190:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 191:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Process Unlocked */ 
 192:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   __HAL_UNLOCK(hrtc);
 121              		.loc 1 192 0 discriminator 2
 122 0096 FB68     		ldr	r3, [r7, #12]
 123 0098 0022     		movs	r2, #0
 124 009a 1A77     		strb	r2, [r3, #28]
 193:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 194:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   return HAL_OK;
 125              		.loc 1 194 0 discriminator 2
 126 009c 0023     		movs	r3, #0
 127              	.L3:
 195:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** }
 128              		.loc 1 195 0
 129 009e 1846     		mov	r0, r3
 130 00a0 1C37     		adds	r7, r7, #28
 131 00a2 BD46     		mov	sp, r7
 132              		@ sp needed
 133 00a4 5DF8047B 		ldr	r7, [sp], #4
 134 00a8 7047     		bx	lr
 135              		.cfi_endproc
 136              	.LFE55:
 138 00aa 00BF     		.align	2
 139              		.global	HAL_RTCEx_SetTimeStamp_IT
 140              		.thumb
 141              		.thumb_func
 143              	HAL_RTCEx_SetTimeStamp_IT:
 144              	.LFB56:
 196:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** 
 197:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** /**
 198:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @brief  Sets TimeStamp with Interrupt. 
 199:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @param  hrtc: RTC handle
 200:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @note   This API must be called before enabling the TimeStamp feature.
 201:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @param  TimeStampEdge: Specifies the pin edge on which the TimeStamp is 
 202:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   *         activated.
 203:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   *          This parameter can be one of the following:
 204:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   *             @arg TimeStampEdge_Rising: the Time stamp event occurs on the  
 205:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   *                                        rising edge of the related pin.
 206:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   *             @arg TimeStampEdge_Falling: the Time stamp event occurs on the 
 207:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   *                                         falling edge of the related pin.
 208:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @param  RTC_TimeStampPin: Specifies the RTC TimeStamp Pin.
 209:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   *          This parameter can be one of the following values:
 210:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   *             @arg RTC_TIMESTAMPPIN_PC13: PC13 is selected as RTC TimeStamp Pin.
 211:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.   
 212:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @retval HAL status
 213:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   */
 214:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp_IT(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32
 215:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** {
 145              		.loc 1 215 0
 146              		.cfi_startproc
 147              		@ args = 0, pretend = 0, frame = 24
 148              		@ frame_needed = 1, uses_anonymous_args = 0
 149              		@ link register save eliminated.
 150 00ac 80B4     		push	{r7}
 151              		.cfi_def_cfa_offset 4
 152              		.cfi_offset 7, -4
 153 00ae 87B0     		sub	sp, sp, #28
 154              		.cfi_def_cfa_offset 32
 155 00b0 00AF     		add	r7, sp, #0
 156              		.cfi_def_cfa_register 7
 157 00b2 F860     		str	r0, [r7, #12]
 158 00b4 B960     		str	r1, [r7, #8]
 159 00b6 7A60     		str	r2, [r7, #4]
 216:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   uint32_t tmpreg = 0;
 160              		.loc 1 216 0
 161 00b8 0023     		movs	r3, #0
 162 00ba 7B61     		str	r3, [r7, #20]
 217:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 218:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Check the parameters */
 219:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
 220:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));
 221:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 222:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Process Locked */ 
 223:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   __HAL_LOCK(hrtc);
 163              		.loc 1 223 0
 164 00bc FB68     		ldr	r3, [r7, #12]
 165 00be 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 166 00c0 012B     		cmp	r3, #1
 167 00c2 01D1     		bne	.L5
 168              		.loc 1 223 0 is_stmt 0 discriminator 1
 169 00c4 0223     		movs	r3, #2
 170 00c6 60E0     		b	.L6
 171              	.L5:
 172              		.loc 1 223 0 discriminator 2
 173 00c8 FB68     		ldr	r3, [r7, #12]
 174 00ca 0122     		movs	r2, #1
 175 00cc 1A77     		strb	r2, [r3, #28]
 224:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 225:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 176              		.loc 1 225 0 is_stmt 1 discriminator 2
 177 00ce FB68     		ldr	r3, [r7, #12]
 178 00d0 0222     		movs	r2, #2
 179 00d2 5A77     		strb	r2, [r3, #29]
 226:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 227:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Get the RTC_CR register and clear the bits to be configured */
 228:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 180              		.loc 1 228 0 discriminator 2
 181 00d4 FB68     		ldr	r3, [r7, #12]
 182 00d6 1B68     		ldr	r3, [r3]
 183 00d8 9B68     		ldr	r3, [r3, #8]
 184 00da 23F40063 		bic	r3, r3, #2048
 185 00de 23F00803 		bic	r3, r3, #8
 186 00e2 7B61     		str	r3, [r7, #20]
 229:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 230:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   tmpreg |= TimeStampEdge;
 187              		.loc 1 230 0 discriminator 2
 188 00e4 7A69     		ldr	r2, [r7, #20]
 189 00e6 BB68     		ldr	r3, [r7, #8]
 190 00e8 1343     		orrs	r3, r3, r2
 191 00ea 7B61     		str	r3, [r7, #20]
 231:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 232:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Disable the write protection for RTC registers */
 233:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 192              		.loc 1 233 0 discriminator 2
 193 00ec FB68     		ldr	r3, [r7, #12]
 194 00ee 1B68     		ldr	r3, [r3]
 195 00f0 CA22     		movs	r2, #202
 196 00f2 5A62     		str	r2, [r3, #36]
 197 00f4 FB68     		ldr	r3, [r7, #12]
 198 00f6 1B68     		ldr	r3, [r3]
 199 00f8 5322     		movs	r2, #83
 200 00fa 5A62     		str	r2, [r3, #36]
 234:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 235:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Configure the Time Stamp TSEDGE and Enable bits */
 236:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   hrtc->Instance->CR = (uint32_t)tmpreg;
 201              		.loc 1 236 0 discriminator 2
 202 00fc FB68     		ldr	r3, [r7, #12]
 203 00fe 1B68     		ldr	r3, [r3]
 204 0100 7A69     		ldr	r2, [r7, #20]
 205 0102 9A60     		str	r2, [r3, #8]
 237:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 238:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_TSINSEL;
 206              		.loc 1 238 0 discriminator 2
 207 0104 FB68     		ldr	r3, [r7, #12]
 208 0106 1B68     		ldr	r3, [r3]
 209 0108 FA68     		ldr	r2, [r7, #12]
 210 010a 1268     		ldr	r2, [r2]
 211 010c 126C     		ldr	r2, [r2, #64]
 212 010e 22F40032 		bic	r2, r2, #131072
 213 0112 1A64     		str	r2, [r3, #64]
 239:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   hrtc->Instance->TAFCR |= (uint32_t)(RTC_TimeStampPin); 
 214              		.loc 1 239 0 discriminator 2
 215 0114 FB68     		ldr	r3, [r7, #12]
 216 0116 1B68     		ldr	r3, [r3]
 217 0118 FA68     		ldr	r2, [r7, #12]
 218 011a 1268     		ldr	r2, [r2]
 219 011c 116C     		ldr	r1, [r2, #64]
 220 011e 7A68     		ldr	r2, [r7, #4]
 221 0120 0A43     		orrs	r2, r2, r1
 222 0122 1A64     		str	r2, [r3, #64]
 240:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 241:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 223              		.loc 1 241 0 discriminator 2
 224 0124 FB68     		ldr	r3, [r7, #12]
 225 0126 1B68     		ldr	r3, [r3]
 226 0128 FA68     		ldr	r2, [r7, #12]
 227 012a 1268     		ldr	r2, [r2]
 228 012c 9268     		ldr	r2, [r2, #8]
 229 012e 42F40062 		orr	r2, r2, #2048
 230 0132 9A60     		str	r2, [r3, #8]
 242:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 243:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Enable IT timestamp */ 
 244:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   __HAL_RTC_TIMESTAMP_ENABLE_IT(hrtc,RTC_IT_TS);
 231              		.loc 1 244 0 discriminator 2
 232 0134 FB68     		ldr	r3, [r7, #12]
 233 0136 1B68     		ldr	r3, [r3]
 234 0138 FA68     		ldr	r2, [r7, #12]
 235 013a 1268     		ldr	r2, [r2]
 236 013c 9268     		ldr	r2, [r2, #8]
 237 013e 42F40042 		orr	r2, r2, #32768
 238 0142 9A60     		str	r2, [r3, #8]
 245:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 246:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* RTC timestamp Interrupt Configuration: EXTI configuration */
 247:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   __HAL_RTC_ENABLE_IT(RTC_EXTI_LINE_TAMPER_TIMESTAMP_EVENT);
 239              		.loc 1 247 0 discriminator 2
 240 0144 4FF47053 		mov	r3, #15360
 241 0148 C4F20103 		movt	r3, 16385
 242 014c 4FF47052 		mov	r2, #15360
 243 0150 C4F20102 		movt	r2, 16385
 244 0154 1268     		ldr	r2, [r2]
 245 0156 42F40012 		orr	r2, r2, #2097152
 246 015a 1A60     		str	r2, [r3]
 248:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 249:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   EXTI->RTSR |= RTC_EXTI_LINE_TAMPER_TIMESTAMP_EVENT;
 247              		.loc 1 249 0 discriminator 2
 248 015c 4FF47053 		mov	r3, #15360
 249 0160 C4F20103 		movt	r3, 16385
 250 0164 4FF47052 		mov	r2, #15360
 251 0168 C4F20102 		movt	r2, 16385
 252 016c 9268     		ldr	r2, [r2, #8]
 253 016e 42F40012 		orr	r2, r2, #2097152
 254 0172 9A60     		str	r2, [r3, #8]
 250:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 251:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Enable the write protection for RTC registers */
 252:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 255              		.loc 1 252 0 discriminator 2
 256 0174 FB68     		ldr	r3, [r7, #12]
 257 0176 1B68     		ldr	r3, [r3]
 258 0178 FF22     		movs	r2, #255
 259 017a 5A62     		str	r2, [r3, #36]
 253:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 254:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   hrtc->State = HAL_RTC_STATE_READY;  
 260              		.loc 1 254 0 discriminator 2
 261 017c FB68     		ldr	r3, [r7, #12]
 262 017e 0122     		movs	r2, #1
 263 0180 5A77     		strb	r2, [r3, #29]
 255:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 256:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Process Unlocked */ 
 257:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   __HAL_UNLOCK(hrtc);
 264              		.loc 1 257 0 discriminator 2
 265 0182 FB68     		ldr	r3, [r7, #12]
 266 0184 0022     		movs	r2, #0
 267 0186 1A77     		strb	r2, [r3, #28]
 258:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 259:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   return HAL_OK;
 268              		.loc 1 259 0 discriminator 2
 269 0188 0023     		movs	r3, #0
 270              	.L6:
 260:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** }
 271              		.loc 1 260 0
 272 018a 1846     		mov	r0, r3
 273 018c 1C37     		adds	r7, r7, #28
 274 018e BD46     		mov	sp, r7
 275              		@ sp needed
 276 0190 5DF8047B 		ldr	r7, [sp], #4
 277 0194 7047     		bx	lr
 278              		.cfi_endproc
 279              	.LFE56:
 281 0196 00BF     		.align	2
 282              		.global	HAL_RTCEx_DeactivateTimeStamp
 283              		.thumb
 284              		.thumb_func
 286              	HAL_RTCEx_DeactivateTimeStamp:
 287              	.LFB57:
 261:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** 
 262:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** /**
 263:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @brief  Deactivates TimeStamp. 
 264:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @param  hrtc: RTC handle
 265:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @retval HAL status
 266:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   */
 267:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** HAL_StatusTypeDef HAL_RTCEx_DeactivateTimeStamp(RTC_HandleTypeDef *hrtc)
 268:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** {
 288              		.loc 1 268 0
 289              		.cfi_startproc
 290              		@ args = 0, pretend = 0, frame = 16
 291              		@ frame_needed = 1, uses_anonymous_args = 0
 292              		@ link register save eliminated.
 293 0198 80B4     		push	{r7}
 294              		.cfi_def_cfa_offset 4
 295              		.cfi_offset 7, -4
 296 019a 85B0     		sub	sp, sp, #20
 297              		.cfi_def_cfa_offset 24
 298 019c 00AF     		add	r7, sp, #0
 299              		.cfi_def_cfa_register 7
 300 019e 7860     		str	r0, [r7, #4]
 269:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   uint32_t tmpreg = 0;
 301              		.loc 1 269 0
 302 01a0 0023     		movs	r3, #0
 303 01a2 FB60     		str	r3, [r7, #12]
 270:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 271:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Process Locked */ 
 272:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   __HAL_LOCK(hrtc);
 304              		.loc 1 272 0
 305 01a4 7B68     		ldr	r3, [r7, #4]
 306 01a6 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 307 01a8 012B     		cmp	r3, #1
 308 01aa 01D1     		bne	.L8
 309              		.loc 1 272 0 is_stmt 0 discriminator 1
 310 01ac 0223     		movs	r3, #2
 311 01ae 2CE0     		b	.L9
 312              	.L8:
 313              		.loc 1 272 0 discriminator 2
 314 01b0 7B68     		ldr	r3, [r7, #4]
 315 01b2 0122     		movs	r2, #1
 316 01b4 1A77     		strb	r2, [r3, #28]
 273:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 274:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 317              		.loc 1 274 0 is_stmt 1 discriminator 2
 318 01b6 7B68     		ldr	r3, [r7, #4]
 319 01b8 0222     		movs	r2, #2
 320 01ba 5A77     		strb	r2, [r3, #29]
 275:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 276:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Disable the write protection for RTC registers */
 277:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 321              		.loc 1 277 0 discriminator 2
 322 01bc 7B68     		ldr	r3, [r7, #4]
 323 01be 1B68     		ldr	r3, [r3]
 324 01c0 CA22     		movs	r2, #202
 325 01c2 5A62     		str	r2, [r3, #36]
 326 01c4 7B68     		ldr	r3, [r7, #4]
 327 01c6 1B68     		ldr	r3, [r3]
 328 01c8 5322     		movs	r2, #83
 329 01ca 5A62     		str	r2, [r3, #36]
 278:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 279:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* In case of interrupt mode is used, the interrupt source must disabled */ 
 280:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   __HAL_RTC_TIMESTAMP_DISABLE_IT(hrtc, RTC_IT_TS);
 330              		.loc 1 280 0 discriminator 2
 331 01cc 7B68     		ldr	r3, [r7, #4]
 332 01ce 1B68     		ldr	r3, [r3]
 333 01d0 7A68     		ldr	r2, [r7, #4]
 334 01d2 1268     		ldr	r2, [r2]
 335 01d4 9268     		ldr	r2, [r2, #8]
 336 01d6 22F40042 		bic	r2, r2, #32768
 337 01da 9A60     		str	r2, [r3, #8]
 281:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 282:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Get the RTC_CR register and clear the bits to be configured */
 283:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 338              		.loc 1 283 0 discriminator 2
 339 01dc 7B68     		ldr	r3, [r7, #4]
 340 01de 1B68     		ldr	r3, [r3]
 341 01e0 9B68     		ldr	r3, [r3, #8]
 342 01e2 23F40063 		bic	r3, r3, #2048
 343 01e6 23F00803 		bic	r3, r3, #8
 344 01ea FB60     		str	r3, [r7, #12]
 284:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 285:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Configure the Time Stamp TSEDGE and Enable bits */
 286:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   hrtc->Instance->CR = (uint32_t)tmpreg;
 345              		.loc 1 286 0 discriminator 2
 346 01ec 7B68     		ldr	r3, [r7, #4]
 347 01ee 1B68     		ldr	r3, [r3]
 348 01f0 FA68     		ldr	r2, [r7, #12]
 349 01f2 9A60     		str	r2, [r3, #8]
 287:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 288:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Enable the write protection for RTC registers */
 289:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 350              		.loc 1 289 0 discriminator 2
 351 01f4 7B68     		ldr	r3, [r7, #4]
 352 01f6 1B68     		ldr	r3, [r3]
 353 01f8 FF22     		movs	r2, #255
 354 01fa 5A62     		str	r2, [r3, #36]
 290:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****  
 291:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   hrtc->State = HAL_RTC_STATE_READY;  
 355              		.loc 1 291 0 discriminator 2
 356 01fc 7B68     		ldr	r3, [r7, #4]
 357 01fe 0122     		movs	r2, #1
 358 0200 5A77     		strb	r2, [r3, #29]
 292:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 293:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Process Unlocked */ 
 294:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   __HAL_UNLOCK(hrtc);
 359              		.loc 1 294 0 discriminator 2
 360 0202 7B68     		ldr	r3, [r7, #4]
 361 0204 0022     		movs	r2, #0
 362 0206 1A77     		strb	r2, [r3, #28]
 295:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 296:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   return HAL_OK;
 363              		.loc 1 296 0 discriminator 2
 364 0208 0023     		movs	r3, #0
 365              	.L9:
 297:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** }
 366              		.loc 1 297 0
 367 020a 1846     		mov	r0, r3
 368 020c 1437     		adds	r7, r7, #20
 369 020e BD46     		mov	sp, r7
 370              		@ sp needed
 371 0210 5DF8047B 		ldr	r7, [sp], #4
 372 0214 7047     		bx	lr
 373              		.cfi_endproc
 374              	.LFE57:
 376 0216 00BF     		.align	2
 377              		.global	HAL_RTCEx_GetTimeStamp
 378              		.thumb
 379              		.thumb_func
 381              	HAL_RTCEx_GetTimeStamp:
 382              	.LFB58:
 298:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** 
 299:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** /**
 300:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @brief  Gets the RTC TimeStamp value.
 301:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @param  hrtc: RTC handle
 302:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @param  sTimeStamp: Pointer to Time structure
 303:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @param  sTimeStampDate: Pointer to Date structure  
 304:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @param  Format: specifies the format of the entered parameters.
 305:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   *          This parameter can be one of the following values:
 306:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   *             @arg Format_BIN: Binary data format 
 307:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   *             @arg Format_BCD: BCD data format
 308:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @retval HAL status
 309:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   */
 310:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** HAL_StatusTypeDef HAL_RTCEx_GetTimeStamp(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef* sTimeStamp, RTC_
 311:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** {
 383              		.loc 1 311 0
 384              		.cfi_startproc
 385              		@ args = 0, pretend = 0, frame = 24
 386              		@ frame_needed = 1, uses_anonymous_args = 0
 387 0218 80B5     		push	{r7, lr}
 388              		.cfi_def_cfa_offset 8
 389              		.cfi_offset 7, -8
 390              		.cfi_offset 14, -4
 391 021a 86B0     		sub	sp, sp, #24
 392              		.cfi_def_cfa_offset 32
 393 021c 00AF     		add	r7, sp, #0
 394              		.cfi_def_cfa_register 7
 395 021e F860     		str	r0, [r7, #12]
 396 0220 B960     		str	r1, [r7, #8]
 397 0222 7A60     		str	r2, [r7, #4]
 398 0224 3B60     		str	r3, [r7]
 312:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   uint32_t tmptime = 0, tmpdate = 0;
 399              		.loc 1 312 0
 400 0226 0023     		movs	r3, #0
 401 0228 7B61     		str	r3, [r7, #20]
 402 022a 0023     		movs	r3, #0
 403 022c 3B61     		str	r3, [r7, #16]
 313:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** 
 314:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Check the parameters */
 315:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   assert_param(IS_RTC_FORMAT(Format));
 316:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** 
 317:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Get the TimeStamp time and date registers values */
 318:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   tmptime = (uint32_t)(hrtc->Instance->TSTR & RTC_TR_RESERVED_MASK);
 404              		.loc 1 318 0
 405 022e FB68     		ldr	r3, [r7, #12]
 406 0230 1B68     		ldr	r3, [r3]
 407 0232 1B6B     		ldr	r3, [r3, #48]
 408 0234 03F07F33 		and	r3, r3, #2139062143
 409 0238 23F0FE43 		bic	r3, r3, #2130706432
 410 023c 7B61     		str	r3, [r7, #20]
 319:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   tmpdate = (uint32_t)(hrtc->Instance->TSDR & RTC_DR_RESERVED_MASK);
 411              		.loc 1 319 0
 412 023e FB68     		ldr	r3, [r7, #12]
 413 0240 1B68     		ldr	r3, [r3]
 414 0242 5B6B     		ldr	r3, [r3, #52]
 415 0244 23F07F43 		bic	r3, r3, #-16777216
 416 0248 23F0C003 		bic	r3, r3, #192
 417 024c 3B61     		str	r3, [r7, #16]
 320:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** 
 321:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Fill the Time structure fields with the read parameters */
 322:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   sTimeStamp->Hours = (uint8_t)((tmptime & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 418              		.loc 1 322 0
 419 024e 7B69     		ldr	r3, [r7, #20]
 420 0250 03F47C13 		and	r3, r3, #4128768
 421 0254 1B0C     		lsrs	r3, r3, #16
 422 0256 DAB2     		uxtb	r2, r3
 423 0258 BB68     		ldr	r3, [r7, #8]
 424 025a 1A70     		strb	r2, [r3]
 323:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   sTimeStamp->Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
 425              		.loc 1 323 0
 426 025c 7B69     		ldr	r3, [r7, #20]
 427 025e 03F4FE43 		and	r3, r3, #32512
 428 0262 1B0A     		lsrs	r3, r3, #8
 429 0264 DAB2     		uxtb	r2, r3
 430 0266 BB68     		ldr	r3, [r7, #8]
 431 0268 5A70     		strb	r2, [r3, #1]
 324:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   sTimeStamp->Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
 432              		.loc 1 324 0
 433 026a 7B69     		ldr	r3, [r7, #20]
 434 026c DBB2     		uxtb	r3, r3
 435 026e 03F07F03 		and	r3, r3, #127
 436 0272 DAB2     		uxtb	r2, r3
 437 0274 BB68     		ldr	r3, [r7, #8]
 438 0276 9A70     		strb	r2, [r3, #2]
 325:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   sTimeStamp->TimeFormat = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  
 439              		.loc 1 325 0
 440 0278 7B69     		ldr	r3, [r7, #20]
 441 027a 03F48003 		and	r3, r3, #4194304
 442 027e 1B0C     		lsrs	r3, r3, #16
 443 0280 DAB2     		uxtb	r2, r3
 444 0282 BB68     		ldr	r3, [r7, #8]
 445 0284 DA70     		strb	r2, [r3, #3]
 326:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 327:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Fill the Date structure fields with the read parameters */
 328:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   sTimeStampDate->Year = 0;
 446              		.loc 1 328 0
 447 0286 7B68     		ldr	r3, [r7, #4]
 448 0288 0022     		movs	r2, #0
 449 028a DA70     		strb	r2, [r3, #3]
 329:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   sTimeStampDate->Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 450              		.loc 1 329 0
 451 028c 3B69     		ldr	r3, [r7, #16]
 452 028e 03F4F853 		and	r3, r3, #7936
 453 0292 1B0A     		lsrs	r3, r3, #8
 454 0294 DAB2     		uxtb	r2, r3
 455 0296 7B68     		ldr	r3, [r7, #4]
 456 0298 5A70     		strb	r2, [r3, #1]
 330:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   sTimeStampDate->Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
 457              		.loc 1 330 0
 458 029a 3B69     		ldr	r3, [r7, #16]
 459 029c DBB2     		uxtb	r3, r3
 460 029e 03F03F03 		and	r3, r3, #63
 461 02a2 DAB2     		uxtb	r2, r3
 462 02a4 7B68     		ldr	r3, [r7, #4]
 463 02a6 9A70     		strb	r2, [r3, #2]
 331:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   sTimeStampDate->WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13);
 464              		.loc 1 331 0
 465 02a8 3B69     		ldr	r3, [r7, #16]
 466 02aa 03F46043 		and	r3, r3, #57344
 467 02ae 5B0B     		lsrs	r3, r3, #13
 468 02b0 DAB2     		uxtb	r2, r3
 469 02b2 7B68     		ldr	r3, [r7, #4]
 470 02b4 1A70     		strb	r2, [r3]
 332:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** 
 333:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Check the input parameters format */
 334:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   if(Format == FORMAT_BIN)
 471              		.loc 1 334 0
 472 02b6 3B68     		ldr	r3, [r7]
 473 02b8 002B     		cmp	r3, #0
 474 02ba 35D1     		bne	.L11
 335:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   {
 336:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     /* Convert the TimeStamp structure parameters to Binary format */
 337:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     sTimeStamp->Hours = (uint8_t)RTC_Bcd2ToByte(sTimeStamp->Hours);
 475              		.loc 1 337 0
 476 02bc BB68     		ldr	r3, [r7, #8]
 477 02be 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 478 02c0 1846     		mov	r0, r3
 479 02c2 FFF7FEFF 		bl	RTC_Bcd2ToByte
 480 02c6 0346     		mov	r3, r0
 481 02c8 1A46     		mov	r2, r3
 482 02ca BB68     		ldr	r3, [r7, #8]
 483 02cc 1A70     		strb	r2, [r3]
 338:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     sTimeStamp->Minutes = (uint8_t)RTC_Bcd2ToByte(sTimeStamp->Minutes);
 484              		.loc 1 338 0
 485 02ce BB68     		ldr	r3, [r7, #8]
 486 02d0 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 487 02d2 1846     		mov	r0, r3
 488 02d4 FFF7FEFF 		bl	RTC_Bcd2ToByte
 489 02d8 0346     		mov	r3, r0
 490 02da 1A46     		mov	r2, r3
 491 02dc BB68     		ldr	r3, [r7, #8]
 492 02de 5A70     		strb	r2, [r3, #1]
 339:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     sTimeStamp->Seconds = (uint8_t)RTC_Bcd2ToByte(sTimeStamp->Seconds);
 493              		.loc 1 339 0
 494 02e0 BB68     		ldr	r3, [r7, #8]
 495 02e2 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 496 02e4 1846     		mov	r0, r3
 497 02e6 FFF7FEFF 		bl	RTC_Bcd2ToByte
 498 02ea 0346     		mov	r3, r0
 499 02ec 1A46     		mov	r2, r3
 500 02ee BB68     		ldr	r3, [r7, #8]
 501 02f0 9A70     		strb	r2, [r3, #2]
 340:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     
 341:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     /* Convert the DateTimeStamp structure parameters to Binary format */
 342:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     sTimeStampDate->Month = (uint8_t)RTC_Bcd2ToByte(sTimeStampDate->Month);
 502              		.loc 1 342 0
 503 02f2 7B68     		ldr	r3, [r7, #4]
 504 02f4 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 505 02f6 1846     		mov	r0, r3
 506 02f8 FFF7FEFF 		bl	RTC_Bcd2ToByte
 507 02fc 0346     		mov	r3, r0
 508 02fe 1A46     		mov	r2, r3
 509 0300 7B68     		ldr	r3, [r7, #4]
 510 0302 5A70     		strb	r2, [r3, #1]
 343:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     sTimeStampDate->Date = (uint8_t)RTC_Bcd2ToByte(sTimeStampDate->Date);
 511              		.loc 1 343 0
 512 0304 7B68     		ldr	r3, [r7, #4]
 513 0306 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 514 0308 1846     		mov	r0, r3
 515 030a FFF7FEFF 		bl	RTC_Bcd2ToByte
 516 030e 0346     		mov	r3, r0
 517 0310 1A46     		mov	r2, r3
 518 0312 7B68     		ldr	r3, [r7, #4]
 519 0314 9A70     		strb	r2, [r3, #2]
 344:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     sTimeStampDate->WeekDay = (uint8_t)RTC_Bcd2ToByte(sTimeStampDate->WeekDay);
 520              		.loc 1 344 0
 521 0316 7B68     		ldr	r3, [r7, #4]
 522 0318 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 523 031a 1846     		mov	r0, r3
 524 031c FFF7FEFF 		bl	RTC_Bcd2ToByte
 525 0320 0346     		mov	r3, r0
 526 0322 1A46     		mov	r2, r3
 527 0324 7B68     		ldr	r3, [r7, #4]
 528 0326 1A70     		strb	r2, [r3]
 529              	.L11:
 345:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   }
 346:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 347:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Clear the TIMESTAMP Flag */
 348:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 530              		.loc 1 348 0
 531 0328 FB68     		ldr	r3, [r7, #12]
 532 032a 1B68     		ldr	r3, [r3]
 533 032c FA68     		ldr	r2, [r7, #12]
 534 032e 1268     		ldr	r2, [r2]
 535 0330 D268     		ldr	r2, [r2, #12]
 536 0332 D2B2     		uxtb	r2, r2
 537 0334 62F40862 		orn	r2, r2, #2176
 538 0338 DA60     		str	r2, [r3, #12]
 349:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     
 350:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   return HAL_OK;
 539              		.loc 1 350 0
 540 033a 0023     		movs	r3, #0
 351:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** }
 541              		.loc 1 351 0
 542 033c 1846     		mov	r0, r3
 543 033e 1837     		adds	r7, r7, #24
 544 0340 BD46     		mov	sp, r7
 545              		@ sp needed
 546 0342 80BD     		pop	{r7, pc}
 547              		.cfi_endproc
 548              	.LFE58:
 550              		.align	2
 551              		.global	HAL_RTCEx_SetTamper
 552              		.thumb
 553              		.thumb_func
 555              	HAL_RTCEx_SetTamper:
 556              	.LFB59:
 352:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** 
 353:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** /**
 354:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @brief  Sets Tamper
 355:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @note   By calling this API we disable the tamper interrupt for all tampers. 
 356:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @param  hrtc: RTC handle
 357:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @param  sTamper: Pointer to Tamper Structure.
 358:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @retval HAL status
 359:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   */
 360:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** HAL_StatusTypeDef HAL_RTCEx_SetTamper(RTC_HandleTypeDef *hrtc, RTC_TamperTypeDef* sTamper)
 361:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** {
 557              		.loc 1 361 0
 558              		.cfi_startproc
 559              		@ args = 0, pretend = 0, frame = 16
 560              		@ frame_needed = 1, uses_anonymous_args = 0
 561              		@ link register save eliminated.
 562 0344 80B4     		push	{r7}
 563              		.cfi_def_cfa_offset 4
 564              		.cfi_offset 7, -4
 565 0346 85B0     		sub	sp, sp, #20
 566              		.cfi_def_cfa_offset 24
 567 0348 00AF     		add	r7, sp, #0
 568              		.cfi_def_cfa_register 7
 569 034a 7860     		str	r0, [r7, #4]
 570 034c 3960     		str	r1, [r7]
 362:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   uint32_t tmpreg = 0;
 571              		.loc 1 362 0
 572 034e 0023     		movs	r3, #0
 573 0350 FB60     		str	r3, [r7, #12]
 363:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 364:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Check the parameters */
 365:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   assert_param(IS_TAMPER(sTamper->Tamper)); 
 366:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   assert_param(IS_RTC_TAMPER_PIN(sTamper->PinSelection));
 367:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   assert_param(IS_TAMPER_TRIGGER(sTamper->Trigger));
 368:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** 
 369:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Process Locked */ 
 370:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   __HAL_LOCK(hrtc);
 574              		.loc 1 370 0
 575 0352 7B68     		ldr	r3, [r7, #4]
 576 0354 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 577 0356 012B     		cmp	r3, #1
 578 0358 01D1     		bne	.L14
 579              		.loc 1 370 0 is_stmt 0 discriminator 1
 580 035a 0223     		movs	r3, #2
 581 035c 27E0     		b	.L15
 582              	.L14:
 583              		.loc 1 370 0 discriminator 2
 584 035e 7B68     		ldr	r3, [r7, #4]
 585 0360 0122     		movs	r2, #1
 586 0362 1A77     		strb	r2, [r3, #28]
 371:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     
 372:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 587              		.loc 1 372 0 is_stmt 1 discriminator 2
 588 0364 7B68     		ldr	r3, [r7, #4]
 589 0366 0222     		movs	r2, #2
 590 0368 5A77     		strb	r2, [r3, #29]
 373:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** 
 374:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   tmpreg = ((uint32_t)sTamper->Tamper | (uint32_t)sTamper->PinSelection | (uint32_t)(sTamper->Trigg
 591              		.loc 1 374 0 discriminator 2
 592 036a 3B68     		ldr	r3, [r7]
 593 036c 1A68     		ldr	r2, [r3]
 594 036e 3B68     		ldr	r3, [r7]
 595 0370 5B68     		ldr	r3, [r3, #4]
 596 0372 1A43     		orrs	r2, r2, r3
 597 0374 3B68     		ldr	r3, [r7]
 598 0376 9B68     		ldr	r3, [r3, #8]
 599 0378 1343     		orrs	r3, r3, r2
 600 037a FB60     		str	r3, [r7, #12]
 375:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** 
 376:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   hrtc->Instance->TAFCR &= (uint32_t)~((uint32_t)RTC_TAFCR_TAMP1E | (uint32_t)RTC_TAFCR_TAMP1TRG | 
 601              		.loc 1 376 0 discriminator 2
 602 037c 7B68     		ldr	r3, [r7, #4]
 603 037e 1A68     		ldr	r2, [r3]
 604 0380 7B68     		ldr	r3, [r7, #4]
 605 0382 1B68     		ldr	r3, [r3]
 606 0384 1B6C     		ldr	r3, [r3, #64]
 607 0386 23F48033 		bic	r3, r3, #65536
 608 038a 23F00303 		bic	r3, r3, #3
 609 038e 1364     		str	r3, [r2, #64]
 377:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** 
 378:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   hrtc->Instance->TAFCR |= tmpreg;
 610              		.loc 1 378 0 discriminator 2
 611 0390 7B68     		ldr	r3, [r7, #4]
 612 0392 1B68     		ldr	r3, [r3]
 613 0394 7A68     		ldr	r2, [r7, #4]
 614 0396 1268     		ldr	r2, [r2]
 615 0398 116C     		ldr	r1, [r2, #64]
 616 039a FA68     		ldr	r2, [r7, #12]
 617 039c 0A43     		orrs	r2, r2, r1
 618 039e 1A64     		str	r2, [r3, #64]
 379:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 380:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   hrtc->State = HAL_RTC_STATE_READY; 
 619              		.loc 1 380 0 discriminator 2
 620 03a0 7B68     		ldr	r3, [r7, #4]
 621 03a2 0122     		movs	r2, #1
 622 03a4 5A77     		strb	r2, [r3, #29]
 381:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** 
 382:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Process Unlocked */ 
 383:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   __HAL_UNLOCK(hrtc);
 623              		.loc 1 383 0 discriminator 2
 624 03a6 7B68     		ldr	r3, [r7, #4]
 625 03a8 0022     		movs	r2, #0
 626 03aa 1A77     		strb	r2, [r3, #28]
 384:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     
 385:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   return HAL_OK;
 627              		.loc 1 385 0 discriminator 2
 628 03ac 0023     		movs	r3, #0
 629              	.L15:
 386:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** }
 630              		.loc 1 386 0
 631 03ae 1846     		mov	r0, r3
 632 03b0 1437     		adds	r7, r7, #20
 633 03b2 BD46     		mov	sp, r7
 634              		@ sp needed
 635 03b4 5DF8047B 		ldr	r7, [sp], #4
 636 03b8 7047     		bx	lr
 637              		.cfi_endproc
 638              	.LFE59:
 640 03ba 00BF     		.align	2
 641              		.global	HAL_RTCEx_SetTamper_IT
 642              		.thumb
 643              		.thumb_func
 645              	HAL_RTCEx_SetTamper_IT:
 646              	.LFB60:
 387:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** 
 388:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** /**
 389:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @brief  Sets Tamper with interrupt.
 390:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @note   By calling this API we force the tamper interrupt for all tampers.
 391:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @param  hrtc: RTC handle
 392:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @param  sTamper: Pointer to RTC Tamper.
 393:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @retval HAL status
 394:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   */
 395:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** HAL_StatusTypeDef HAL_RTCEx_SetTamper_IT(RTC_HandleTypeDef *hrtc, RTC_TamperTypeDef* sTamper)
 396:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** {
 647              		.loc 1 396 0
 648              		.cfi_startproc
 649              		@ args = 0, pretend = 0, frame = 16
 650              		@ frame_needed = 1, uses_anonymous_args = 0
 651              		@ link register save eliminated.
 652 03bc 80B4     		push	{r7}
 653              		.cfi_def_cfa_offset 4
 654              		.cfi_offset 7, -4
 655 03be 85B0     		sub	sp, sp, #20
 656              		.cfi_def_cfa_offset 24
 657 03c0 00AF     		add	r7, sp, #0
 658              		.cfi_def_cfa_register 7
 659 03c2 7860     		str	r0, [r7, #4]
 660 03c4 3960     		str	r1, [r7]
 397:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   uint32_t tmpreg = 0;
 661              		.loc 1 397 0
 662 03c6 0023     		movs	r3, #0
 663 03c8 FB60     		str	r3, [r7, #12]
 398:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 399:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Check the parameters */
 400:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   assert_param(IS_TAMPER(sTamper->Tamper)); 
 401:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   assert_param(IS_RTC_TAMPER_PIN(sTamper->PinSelection));
 402:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   assert_param(IS_TAMPER_TRIGGER(sTamper->Trigger));
 403:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** 
 404:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Process Locked */ 
 405:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   __HAL_LOCK(hrtc);
 664              		.loc 1 405 0
 665 03ca 7B68     		ldr	r3, [r7, #4]
 666 03cc 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 667 03ce 012B     		cmp	r3, #1
 668 03d0 01D1     		bne	.L17
 669              		.loc 1 405 0 is_stmt 0 discriminator 1
 670 03d2 0223     		movs	r3, #2
 671 03d4 47E0     		b	.L18
 672              	.L17:
 673              		.loc 1 405 0 discriminator 2
 674 03d6 7B68     		ldr	r3, [r7, #4]
 675 03d8 0122     		movs	r2, #1
 676 03da 1A77     		strb	r2, [r3, #28]
 406:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****       
 407:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 677              		.loc 1 407 0 is_stmt 1 discriminator 2
 678 03dc 7B68     		ldr	r3, [r7, #4]
 679 03de 0222     		movs	r2, #2
 680 03e0 5A77     		strb	r2, [r3, #29]
 408:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** 
 409:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   tmpreg = ((uint32_t)sTamper->Tamper | (uint32_t)sTamper->PinSelection | (uint32_t)sTamper->Trigge
 681              		.loc 1 409 0 discriminator 2
 682 03e2 3B68     		ldr	r3, [r7]
 683 03e4 1A68     		ldr	r2, [r3]
 684 03e6 3B68     		ldr	r3, [r7]
 685 03e8 5B68     		ldr	r3, [r3, #4]
 686 03ea 1A43     		orrs	r2, r2, r3
 687 03ec 3B68     		ldr	r3, [r7]
 688 03ee 9B68     		ldr	r3, [r3, #8]
 689 03f0 1343     		orrs	r3, r3, r2
 690 03f2 FB60     		str	r3, [r7, #12]
 410:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** 
 411:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   hrtc->Instance->TAFCR &= (uint32_t)~((uint32_t)RTC_TAFCR_TAMP1E | (uint32_t)RTC_TAFCR_TAMP1TRG | 
 691              		.loc 1 411 0 discriminator 2
 692 03f4 7B68     		ldr	r3, [r7, #4]
 693 03f6 1A68     		ldr	r2, [r3]
 694 03f8 7B68     		ldr	r3, [r7, #4]
 695 03fa 1B68     		ldr	r3, [r3]
 696 03fc 1B6C     		ldr	r3, [r3, #64]
 697 03fe 23F48033 		bic	r3, r3, #65536
 698 0402 23F00703 		bic	r3, r3, #7
 699 0406 1364     		str	r3, [r2, #64]
 412:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** 
 413:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   hrtc->Instance->TAFCR |= tmpreg;
 700              		.loc 1 413 0 discriminator 2
 701 0408 7B68     		ldr	r3, [r7, #4]
 702 040a 1B68     		ldr	r3, [r3]
 703 040c 7A68     		ldr	r2, [r7, #4]
 704 040e 1268     		ldr	r2, [r2]
 705 0410 116C     		ldr	r1, [r2, #64]
 706 0412 FA68     		ldr	r2, [r7, #12]
 707 0414 0A43     		orrs	r2, r2, r1
 708 0416 1A64     		str	r2, [r3, #64]
 414:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 415:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Configure the Tamper Interrupt in the RTC_TAFCR */
 416:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   hrtc->Instance->TAFCR |= (uint32_t)RTC_TAFCR_TAMPIE;
 709              		.loc 1 416 0 discriminator 2
 710 0418 7B68     		ldr	r3, [r7, #4]
 711 041a 1B68     		ldr	r3, [r3]
 712 041c 7A68     		ldr	r2, [r7, #4]
 713 041e 1268     		ldr	r2, [r2]
 714 0420 126C     		ldr	r2, [r2, #64]
 715 0422 42F00402 		orr	r2, r2, #4
 716 0426 1A64     		str	r2, [r3, #64]
 417:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 418:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* RTC Tamper Interrupt Configuration: EXTI configuration */
 419:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   __HAL_RTC_ENABLE_IT(RTC_EXTI_LINE_TAMPER_TIMESTAMP_EVENT);
 717              		.loc 1 419 0 discriminator 2
 718 0428 4FF47053 		mov	r3, #15360
 719 042c C4F20103 		movt	r3, 16385
 720 0430 4FF47052 		mov	r2, #15360
 721 0434 C4F20102 		movt	r2, 16385
 722 0438 1268     		ldr	r2, [r2]
 723 043a 42F40012 		orr	r2, r2, #2097152
 724 043e 1A60     		str	r2, [r3]
 420:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 421:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   EXTI->RTSR |= RTC_EXTI_LINE_TAMPER_TIMESTAMP_EVENT;
 725              		.loc 1 421 0 discriminator 2
 726 0440 4FF47053 		mov	r3, #15360
 727 0444 C4F20103 		movt	r3, 16385
 728 0448 4FF47052 		mov	r2, #15360
 729 044c C4F20102 		movt	r2, 16385
 730 0450 9268     		ldr	r2, [r2, #8]
 731 0452 42F40012 		orr	r2, r2, #2097152
 732 0456 9A60     		str	r2, [r3, #8]
 422:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 423:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   hrtc->State = HAL_RTC_STATE_READY;   
 733              		.loc 1 423 0 discriminator 2
 734 0458 7B68     		ldr	r3, [r7, #4]
 735 045a 0122     		movs	r2, #1
 736 045c 5A77     		strb	r2, [r3, #29]
 424:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 425:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Process Unlocked */ 
 426:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   __HAL_UNLOCK(hrtc);
 737              		.loc 1 426 0 discriminator 2
 738 045e 7B68     		ldr	r3, [r7, #4]
 739 0460 0022     		movs	r2, #0
 740 0462 1A77     		strb	r2, [r3, #28]
 427:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 428:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   return HAL_OK;
 741              		.loc 1 428 0 discriminator 2
 742 0464 0023     		movs	r3, #0
 743              	.L18:
 429:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** }
 744              		.loc 1 429 0
 745 0466 1846     		mov	r0, r3
 746 0468 1437     		adds	r7, r7, #20
 747 046a BD46     		mov	sp, r7
 748              		@ sp needed
 749 046c 5DF8047B 		ldr	r7, [sp], #4
 750 0470 7047     		bx	lr
 751              		.cfi_endproc
 752              	.LFE60:
 754 0472 00BF     		.align	2
 755              		.global	HAL_RTCEx_DeactivateTamper
 756              		.thumb
 757              		.thumb_func
 759              	HAL_RTCEx_DeactivateTamper:
 760              	.LFB61:
 430:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** 
 431:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** /**
 432:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @brief  Deactivates Tamper.
 433:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @param  hrtc: RTC handle
 434:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @param  Tamper: Selected tamper pin.
 435:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   *          This parameter can be RTC_Tamper_1 and/or RTC_TAMPER_2.
 436:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @retval HAL status
 437:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   */
 438:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** HAL_StatusTypeDef HAL_RTCEx_DeactivateTamper(RTC_HandleTypeDef *hrtc, uint32_t Tamper)
 439:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** {
 761              		.loc 1 439 0
 762              		.cfi_startproc
 763              		@ args = 0, pretend = 0, frame = 8
 764              		@ frame_needed = 1, uses_anonymous_args = 0
 765              		@ link register save eliminated.
 766 0474 80B4     		push	{r7}
 767              		.cfi_def_cfa_offset 4
 768              		.cfi_offset 7, -4
 769 0476 83B0     		sub	sp, sp, #12
 770              		.cfi_def_cfa_offset 16
 771 0478 00AF     		add	r7, sp, #0
 772              		.cfi_def_cfa_register 7
 773 047a 7860     		str	r0, [r7, #4]
 774 047c 3960     		str	r1, [r7]
 440:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   assert_param(IS_TAMPER(Tamper)); 
 441:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 442:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Process Locked */ 
 443:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   __HAL_LOCK(hrtc);
 775              		.loc 1 443 0
 776 047e 7B68     		ldr	r3, [r7, #4]
 777 0480 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 778 0482 012B     		cmp	r3, #1
 779 0484 01D1     		bne	.L20
 780              		.loc 1 443 0 is_stmt 0 discriminator 1
 781 0486 0223     		movs	r3, #2
 782 0488 15E0     		b	.L21
 783              	.L20:
 784              		.loc 1 443 0 discriminator 2
 785 048a 7B68     		ldr	r3, [r7, #4]
 786 048c 0122     		movs	r2, #1
 787 048e 1A77     		strb	r2, [r3, #28]
 444:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****       
 445:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 788              		.loc 1 445 0 is_stmt 1 discriminator 2
 789 0490 7B68     		ldr	r3, [r7, #4]
 790 0492 0222     		movs	r2, #2
 791 0494 5A77     		strb	r2, [r3, #29]
 446:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 447:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Disable the selected Tamper pin */
 448:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   hrtc->Instance->TAFCR &= (uint32_t)~Tamper;  
 792              		.loc 1 448 0 discriminator 2
 793 0496 7B68     		ldr	r3, [r7, #4]
 794 0498 1B68     		ldr	r3, [r3]
 795 049a 7A68     		ldr	r2, [r7, #4]
 796 049c 1268     		ldr	r2, [r2]
 797 049e 116C     		ldr	r1, [r2, #64]
 798 04a0 3A68     		ldr	r2, [r7]
 799 04a2 D243     		mvns	r2, r2
 800 04a4 0A40     		ands	r2, r2, r1
 801 04a6 1A64     		str	r2, [r3, #64]
 449:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 450:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   hrtc->State = HAL_RTC_STATE_READY;   
 802              		.loc 1 450 0 discriminator 2
 803 04a8 7B68     		ldr	r3, [r7, #4]
 804 04aa 0122     		movs	r2, #1
 805 04ac 5A77     		strb	r2, [r3, #29]
 451:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 452:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Process Unlocked */  
 453:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   __HAL_UNLOCK(hrtc);
 806              		.loc 1 453 0 discriminator 2
 807 04ae 7B68     		ldr	r3, [r7, #4]
 808 04b0 0022     		movs	r2, #0
 809 04b2 1A77     		strb	r2, [r3, #28]
 454:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 455:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   return HAL_OK; 
 810              		.loc 1 455 0 discriminator 2
 811 04b4 0023     		movs	r3, #0
 812              	.L21:
 456:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** }
 813              		.loc 1 456 0
 814 04b6 1846     		mov	r0, r3
 815 04b8 0C37     		adds	r7, r7, #12
 816 04ba BD46     		mov	sp, r7
 817              		@ sp needed
 818 04bc 5DF8047B 		ldr	r7, [sp], #4
 819 04c0 7047     		bx	lr
 820              		.cfi_endproc
 821              	.LFE61:
 823 04c2 00BF     		.align	2
 824              		.global	HAL_RTCEx_TamperTimeStampIRQHandler
 825              		.thumb
 826              		.thumb_func
 828              	HAL_RTCEx_TamperTimeStampIRQHandler:
 829              	.LFB62:
 457:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** 
 458:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** /**
 459:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @brief  This function handles TimeStamp interrupt request.
 460:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @param  hrtc: RTC handle
 461:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @retval None
 462:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   */
 463:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** void HAL_RTCEx_TamperTimeStampIRQHandler(RTC_HandleTypeDef *hrtc)
 464:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** {  
 830              		.loc 1 464 0
 831              		.cfi_startproc
 832              		@ args = 0, pretend = 0, frame = 8
 833              		@ frame_needed = 1, uses_anonymous_args = 0
 834 04c4 80B5     		push	{r7, lr}
 835              		.cfi_def_cfa_offset 8
 836              		.cfi_offset 7, -8
 837              		.cfi_offset 14, -4
 838 04c6 82B0     		sub	sp, sp, #8
 839              		.cfi_def_cfa_offset 16
 840 04c8 00AF     		add	r7, sp, #0
 841              		.cfi_def_cfa_register 7
 842 04ca 7860     		str	r0, [r7, #4]
 465:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   if(__HAL_RTC_TIMESTAMP_GET_IT(hrtc, RTC_IT_TS))
 843              		.loc 1 465 0
 844 04cc 7B68     		ldr	r3, [r7, #4]
 845 04ce 1B68     		ldr	r3, [r3]
 846 04d0 DB68     		ldr	r3, [r3, #12]
 847 04d2 03F40063 		and	r3, r3, #2048
 848 04d6 002B     		cmp	r3, #0
 849 04d8 12D0     		beq	.L23
 466:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   {
 467:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     /* Get the status of the Interrupt */
 468:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     if((uint32_t)(hrtc->Instance->CR & RTC_IT_TS) != (uint32_t)RESET)
 850              		.loc 1 468 0
 851 04da 7B68     		ldr	r3, [r7, #4]
 852 04dc 1B68     		ldr	r3, [r3]
 853 04de 9B68     		ldr	r3, [r3, #8]
 854 04e0 03F40043 		and	r3, r3, #32768
 855 04e4 002B     		cmp	r3, #0
 856 04e6 0BD0     		beq	.L23
 469:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     {
 470:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****       /* TIMESTAMP callback */ 
 471:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****       HAL_RTCEx_TimeStampEventCallback(hrtc);
 857              		.loc 1 471 0
 858 04e8 7868     		ldr	r0, [r7, #4]
 859 04ea FFF7FEFF 		bl	HAL_RTCEx_TimeStampEventCallback
 472:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 473:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****       /* Clear the TIMESTAMP interrupt pending bit */
 474:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****       __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc,RTC_FLAG_TSF);
 860              		.loc 1 474 0
 861 04ee 7B68     		ldr	r3, [r7, #4]
 862 04f0 1B68     		ldr	r3, [r3]
 863 04f2 7A68     		ldr	r2, [r7, #4]
 864 04f4 1268     		ldr	r2, [r2]
 865 04f6 D268     		ldr	r2, [r2, #12]
 866 04f8 D2B2     		uxtb	r2, r2
 867 04fa 62F40862 		orn	r2, r2, #2176
 868 04fe DA60     		str	r2, [r3, #12]
 869              	.L23:
 475:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     }
 476:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   }
 477:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 478:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Get the status of the Interrupt */
 479:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   if(__HAL_RTC_TAMPER_GET_IT(hrtc,RTC_IT_TAMP1))
 870              		.loc 1 479 0
 871 0500 7B68     		ldr	r3, [r7, #4]
 872 0502 1B68     		ldr	r3, [r3]
 873 0504 DB68     		ldr	r3, [r3, #12]
 874 0506 03F40053 		and	r3, r3, #8192
 875 050a 002B     		cmp	r3, #0
 876 050c 12D0     		beq	.L24
 480:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   {
 481:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     /* Get the TAMPER Interrupt enable bit and pending bit */
 482:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     if(((hrtc->Instance->TAFCR & (RTC_TAFCR_TAMPIE))) != (uint32_t)RESET) 
 877              		.loc 1 482 0
 878 050e 7B68     		ldr	r3, [r7, #4]
 879 0510 1B68     		ldr	r3, [r3]
 880 0512 1B6C     		ldr	r3, [r3, #64]
 881 0514 03F00403 		and	r3, r3, #4
 882 0518 002B     		cmp	r3, #0
 883 051a 0BD0     		beq	.L24
 483:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     {
 484:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****       /* Tamper callback */ 
 485:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****       HAL_RTCEx_Tamper1EventCallback(hrtc);
 884              		.loc 1 485 0
 885 051c 7868     		ldr	r0, [r7, #4]
 886 051e FFF7FEFF 		bl	HAL_RTCEx_Tamper1EventCallback
 486:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 487:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****       /* Clear the Tamper interrupt pending bit */
 488:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****       __HAL_RTC_TAMPER_CLEAR_FLAG(hrtc,RTC_FLAG_TAMP1F);
 887              		.loc 1 488 0
 888 0522 7B68     		ldr	r3, [r7, #4]
 889 0524 1B68     		ldr	r3, [r3]
 890 0526 7A68     		ldr	r2, [r7, #4]
 891 0528 1268     		ldr	r2, [r2]
 892 052a D268     		ldr	r2, [r2, #12]
 893 052c D2B2     		uxtb	r2, r2
 894 052e 62F40252 		orn	r2, r2, #8320
 895 0532 DA60     		str	r2, [r3, #12]
 896              	.L24:
 489:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     }
 490:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   }
 491:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 492:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Clear the EXTI's Flag for RTC TimeStamp and Tamper */
 493:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   __HAL_RTC_CLEAR_FLAG(RTC_EXTI_LINE_TAMPER_TIMESTAMP_EVENT);
 897              		.loc 1 493 0
 898 0534 4FF47053 		mov	r3, #15360
 899 0538 C4F20103 		movt	r3, 16385
 900 053c 4FF40012 		mov	r2, #2097152
 901 0540 5A61     		str	r2, [r3, #20]
 494:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 495:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Change RTC state */
 496:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   hrtc->State = HAL_RTC_STATE_READY; 
 902              		.loc 1 496 0
 903 0542 7B68     		ldr	r3, [r7, #4]
 904 0544 0122     		movs	r2, #1
 905 0546 5A77     		strb	r2, [r3, #29]
 497:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** }
 906              		.loc 1 497 0
 907 0548 0837     		adds	r7, r7, #8
 908 054a BD46     		mov	sp, r7
 909              		@ sp needed
 910 054c 80BD     		pop	{r7, pc}
 911              		.cfi_endproc
 912              	.LFE62:
 914 054e 00BF     		.align	2
 915              		.weak	HAL_RTCEx_TimeStampEventCallback
 916              		.thumb
 917              		.thumb_func
 919              	HAL_RTCEx_TimeStampEventCallback:
 920              	.LFB63:
 498:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** 
 499:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** /**
 500:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @brief  TimeStamp callback. 
 501:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @param  hrtc: RTC handle
 502:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @retval None
 503:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   */
 504:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** __weak void HAL_RTCEx_TimeStampEventCallback(RTC_HandleTypeDef *hrtc)
 505:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** {
 921              		.loc 1 505 0
 922              		.cfi_startproc
 923              		@ args = 0, pretend = 0, frame = 8
 924              		@ frame_needed = 1, uses_anonymous_args = 0
 925              		@ link register save eliminated.
 926 0550 80B4     		push	{r7}
 927              		.cfi_def_cfa_offset 4
 928              		.cfi_offset 7, -4
 929 0552 83B0     		sub	sp, sp, #12
 930              		.cfi_def_cfa_offset 16
 931 0554 00AF     		add	r7, sp, #0
 932              		.cfi_def_cfa_register 7
 933 0556 7860     		str	r0, [r7, #4]
 506:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 507:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****             the HAL_RTC_TimeStampEventCallback could be implemented in the user file
 508:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   */
 509:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** }
 934              		.loc 1 509 0
 935 0558 0C37     		adds	r7, r7, #12
 936 055a BD46     		mov	sp, r7
 937              		@ sp needed
 938 055c 5DF8047B 		ldr	r7, [sp], #4
 939 0560 7047     		bx	lr
 940              		.cfi_endproc
 941              	.LFE63:
 943 0562 00BF     		.align	2
 944              		.weak	HAL_RTCEx_Tamper1EventCallback
 945              		.thumb
 946              		.thumb_func
 948              	HAL_RTCEx_Tamper1EventCallback:
 949              	.LFB64:
 510:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** 
 511:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** /**
 512:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @brief  Tamper 1 callback. 
 513:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @param  hrtc: RTC handle
 514:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @retval None
 515:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   */
 516:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** __weak void HAL_RTCEx_Tamper1EventCallback(RTC_HandleTypeDef *hrtc)
 517:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** {
 950              		.loc 1 517 0
 951              		.cfi_startproc
 952              		@ args = 0, pretend = 0, frame = 8
 953              		@ frame_needed = 1, uses_anonymous_args = 0
 954              		@ link register save eliminated.
 955 0564 80B4     		push	{r7}
 956              		.cfi_def_cfa_offset 4
 957              		.cfi_offset 7, -4
 958 0566 83B0     		sub	sp, sp, #12
 959              		.cfi_def_cfa_offset 16
 960 0568 00AF     		add	r7, sp, #0
 961              		.cfi_def_cfa_register 7
 962 056a 7860     		str	r0, [r7, #4]
 518:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 519:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****             the HAL_RTC_Tamper1EventCallback could be implemented in the user file
 520:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****    */
 521:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** }
 963              		.loc 1 521 0
 964 056c 0C37     		adds	r7, r7, #12
 965 056e BD46     		mov	sp, r7
 966              		@ sp needed
 967 0570 5DF8047B 		ldr	r7, [sp], #4
 968 0574 7047     		bx	lr
 969              		.cfi_endproc
 970              	.LFE64:
 972 0576 00BF     		.align	2
 973              		.global	HAL_RTCEx_PollForTimeStampEvent
 974              		.thumb
 975              		.thumb_func
 977              	HAL_RTCEx_PollForTimeStampEvent:
 978              	.LFB65:
 522:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** 
 523:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** /**
 524:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @brief  This function handles TimeStamp polling request.
 525:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @param  hrtc: RTC handle
 526:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @param  Timeout: Timeout duration
 527:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @retval HAL status
 528:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   */
 529:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** HAL_StatusTypeDef HAL_RTCEx_PollForTimeStampEvent(RTC_HandleTypeDef *hrtc, uint32_t Timeout)
 530:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** { 
 979              		.loc 1 530 0
 980              		.cfi_startproc
 981              		@ args = 0, pretend = 0, frame = 16
 982              		@ frame_needed = 1, uses_anonymous_args = 0
 983 0578 80B5     		push	{r7, lr}
 984              		.cfi_def_cfa_offset 8
 985              		.cfi_offset 7, -8
 986              		.cfi_offset 14, -4
 987 057a 84B0     		sub	sp, sp, #16
 988              		.cfi_def_cfa_offset 24
 989 057c 00AF     		add	r7, sp, #0
 990              		.cfi_def_cfa_register 7
 991 057e 7860     		str	r0, [r7, #4]
 992 0580 3960     		str	r1, [r7]
 531:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   uint32_t timeout = 0; 
 993              		.loc 1 531 0
 994 0582 0023     		movs	r3, #0
 995 0584 FB60     		str	r3, [r7, #12]
 532:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** 
 533:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Get Timeout value */
 534:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   timeout = HAL_GetTick() + Timeout;   
 996              		.loc 1 534 0
 997 0586 FFF7FEFF 		bl	HAL_GetTick
 998 058a 0246     		mov	r2, r0
 999 058c 3B68     		ldr	r3, [r7]
 1000 058e 1344     		add	r3, r3, r2
 1001 0590 FB60     		str	r3, [r7, #12]
 535:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** 
 536:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   while(__HAL_RTC_TIMESTAMP_GET_FLAG(hrtc, RTC_FLAG_TSF) == RESET)
 1002              		.loc 1 536 0
 1003 0592 23E0     		b	.L28
 1004              	.L31:
 537:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   {
 538:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     if(__HAL_RTC_TIMESTAMP_GET_FLAG(hrtc, RTC_FLAG_TSOVF) != RESET)
 1005              		.loc 1 538 0
 1006 0594 7B68     		ldr	r3, [r7, #4]
 1007 0596 1B68     		ldr	r3, [r3]
 1008 0598 DB68     		ldr	r3, [r3, #12]
 1009 059a 03F48053 		and	r3, r3, #4096
 1010 059e 002B     		cmp	r3, #0
 1011 05a0 0DD0     		beq	.L29
 539:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     {
 540:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****       /* Clear the TIMESTAMP OverRun Flag */
 541:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****       __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 1012              		.loc 1 541 0
 1013 05a2 7B68     		ldr	r3, [r7, #4]
 1014 05a4 1B68     		ldr	r3, [r3]
 1015 05a6 7A68     		ldr	r2, [r7, #4]
 1016 05a8 1268     		ldr	r2, [r2]
 1017 05aa D268     		ldr	r2, [r2, #12]
 1018 05ac D2B2     		uxtb	r2, r2
 1019 05ae 62F48452 		orn	r2, r2, #4224
 1020 05b2 DA60     		str	r2, [r3, #12]
 542:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****       
 543:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****       /* Change TIMESTAMP state */
 544:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****       hrtc->State = HAL_RTC_STATE_ERROR; 
 1021              		.loc 1 544 0
 1022 05b4 7B68     		ldr	r3, [r7, #4]
 1023 05b6 0422     		movs	r2, #4
 1024 05b8 5A77     		strb	r2, [r3, #29]
 545:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****       
 546:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****       return HAL_ERROR; 
 1025              		.loc 1 546 0
 1026 05ba 0123     		movs	r3, #1
 1027 05bc 19E0     		b	.L30
 1028              	.L29:
 547:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     }
 548:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     
 549:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     if(Timeout != HAL_MAX_DELAY)
 1029              		.loc 1 549 0
 1030 05be 3B68     		ldr	r3, [r7]
 1031 05c0 B3F1FF3F 		cmp	r3, #-1
 1032 05c4 0AD0     		beq	.L28
 550:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     {
 551:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****       if(HAL_GetTick() >= timeout)
 1033              		.loc 1 551 0
 1034 05c6 FFF7FEFF 		bl	HAL_GetTick
 1035 05ca 0246     		mov	r2, r0
 1036 05cc FB68     		ldr	r3, [r7, #12]
 1037 05ce 9A42     		cmp	r2, r3
 1038 05d0 04D3     		bcc	.L28
 552:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****       {
 553:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
 1039              		.loc 1 553 0
 1040 05d2 7B68     		ldr	r3, [r7, #4]
 1041 05d4 0322     		movs	r2, #3
 1042 05d6 5A77     		strb	r2, [r3, #29]
 554:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****         return HAL_TIMEOUT;
 1043              		.loc 1 554 0
 1044 05d8 0323     		movs	r3, #3
 1045 05da 0AE0     		b	.L30
 1046              	.L28:
 536:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   {
 1047              		.loc 1 536 0 discriminator 1
 1048 05dc 7B68     		ldr	r3, [r7, #4]
 1049 05de 1B68     		ldr	r3, [r3]
 1050 05e0 DB68     		ldr	r3, [r3, #12]
 1051 05e2 03F40063 		and	r3, r3, #2048
 1052 05e6 002B     		cmp	r3, #0
 1053 05e8 D4D0     		beq	.L31
 555:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****       }
 556:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     }
 557:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   }
 558:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 559:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Change RTC state */
 560:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   hrtc->State = HAL_RTC_STATE_READY; 
 1054              		.loc 1 560 0
 1055 05ea 7B68     		ldr	r3, [r7, #4]
 1056 05ec 0122     		movs	r2, #1
 1057 05ee 5A77     		strb	r2, [r3, #29]
 561:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 562:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   return HAL_OK; 
 1058              		.loc 1 562 0
 1059 05f0 0023     		movs	r3, #0
 1060              	.L30:
 563:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** }
 1061              		.loc 1 563 0
 1062 05f2 1846     		mov	r0, r3
 1063 05f4 1037     		adds	r7, r7, #16
 1064 05f6 BD46     		mov	sp, r7
 1065              		@ sp needed
 1066 05f8 80BD     		pop	{r7, pc}
 1067              		.cfi_endproc
 1068              	.LFE65:
 1070 05fa 00BF     		.align	2
 1071              		.global	HAL_RTCEx_PollForTamper1Event
 1072              		.thumb
 1073              		.thumb_func
 1075              	HAL_RTCEx_PollForTamper1Event:
 1076              	.LFB66:
 564:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 565:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** /**
 566:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @brief  This function handles Tamper1 Polling.
 567:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @param  hrtc: RTC handle
 568:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @param  Timeout: Timeout duration
 569:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @retval HAL status
 570:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   */
 571:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** HAL_StatusTypeDef HAL_RTCEx_PollForTamper1Event(RTC_HandleTypeDef *hrtc, uint32_t Timeout)
 572:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** {  
 1077              		.loc 1 572 0
 1078              		.cfi_startproc
 1079              		@ args = 0, pretend = 0, frame = 16
 1080              		@ frame_needed = 1, uses_anonymous_args = 0
 1081 05fc 80B5     		push	{r7, lr}
 1082              		.cfi_def_cfa_offset 8
 1083              		.cfi_offset 7, -8
 1084              		.cfi_offset 14, -4
 1085 05fe 84B0     		sub	sp, sp, #16
 1086              		.cfi_def_cfa_offset 24
 1087 0600 00AF     		add	r7, sp, #0
 1088              		.cfi_def_cfa_register 7
 1089 0602 7860     		str	r0, [r7, #4]
 1090 0604 3960     		str	r1, [r7]
 573:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   uint32_t timeout = 0; 
 1091              		.loc 1 573 0
 1092 0606 0023     		movs	r3, #0
 1093 0608 FB60     		str	r3, [r7, #12]
 574:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** 
 575:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Get Timeout value */
 576:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   timeout = HAL_GetTick() + Timeout;
 1094              		.loc 1 576 0
 1095 060a FFF7FEFF 		bl	HAL_GetTick
 1096 060e 0246     		mov	r2, r0
 1097 0610 3B68     		ldr	r3, [r7]
 1098 0612 1344     		add	r3, r3, r2
 1099 0614 FB60     		str	r3, [r7, #12]
 577:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 578:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Get the status of the Interrupt */
 579:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   while(__HAL_RTC_TAMPER_GET_FLAG(hrtc, RTC_FLAG_TAMP1F)== RESET)
 1100              		.loc 1 579 0
 1101 0616 0EE0     		b	.L33
 1102              	.L35:
 580:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   {
 581:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     if(Timeout != HAL_MAX_DELAY)
 1103              		.loc 1 581 0
 1104 0618 3B68     		ldr	r3, [r7]
 1105 061a B3F1FF3F 		cmp	r3, #-1
 1106 061e 0AD0     		beq	.L33
 582:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     {
 583:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****       if(HAL_GetTick() >= timeout)
 1107              		.loc 1 583 0
 1108 0620 FFF7FEFF 		bl	HAL_GetTick
 1109 0624 0246     		mov	r2, r0
 1110 0626 FB68     		ldr	r3, [r7, #12]
 1111 0628 9A42     		cmp	r2, r3
 1112 062a 04D3     		bcc	.L33
 584:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****       {
 585:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
 1113              		.loc 1 585 0
 1114 062c 7B68     		ldr	r3, [r7, #4]
 1115 062e 0322     		movs	r2, #3
 1116 0630 5A77     		strb	r2, [r3, #29]
 586:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****         return HAL_TIMEOUT;
 1117              		.loc 1 586 0
 1118 0632 0323     		movs	r3, #3
 1119 0634 13E0     		b	.L34
 1120              	.L33:
 579:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   {
 1121              		.loc 1 579 0 discriminator 1
 1122 0636 7B68     		ldr	r3, [r7, #4]
 1123 0638 1B68     		ldr	r3, [r3]
 1124 063a DB68     		ldr	r3, [r3, #12]
 1125 063c 03F40053 		and	r3, r3, #8192
 1126 0640 002B     		cmp	r3, #0
 1127 0642 E9D0     		beq	.L35
 587:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****       }
 588:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     }
 589:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   }
 590:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 591:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Clear the Tamper Flag */
 592:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   __HAL_RTC_TAMPER_CLEAR_FLAG(hrtc,RTC_FLAG_TAMP1F);
 1128              		.loc 1 592 0
 1129 0644 7B68     		ldr	r3, [r7, #4]
 1130 0646 1B68     		ldr	r3, [r3]
 1131 0648 7A68     		ldr	r2, [r7, #4]
 1132 064a 1268     		ldr	r2, [r2]
 1133 064c D268     		ldr	r2, [r2, #12]
 1134 064e D2B2     		uxtb	r2, r2
 1135 0650 62F40252 		orn	r2, r2, #8320
 1136 0654 DA60     		str	r2, [r3, #12]
 593:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 594:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Change RTC state */
 595:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   hrtc->State = HAL_RTC_STATE_READY;
 1137              		.loc 1 595 0
 1138 0656 7B68     		ldr	r3, [r7, #4]
 1139 0658 0122     		movs	r2, #1
 1140 065a 5A77     		strb	r2, [r3, #29]
 596:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 597:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   return HAL_OK; 
 1141              		.loc 1 597 0
 1142 065c 0023     		movs	r3, #0
 1143              	.L34:
 598:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** }
 1144              		.loc 1 598 0
 1145 065e 1846     		mov	r0, r3
 1146 0660 1037     		adds	r7, r7, #16
 1147 0662 BD46     		mov	sp, r7
 1148              		@ sp needed
 1149 0664 80BD     		pop	{r7, pc}
 1150              		.cfi_endproc
 1151              	.LFE66:
 1153 0666 00BF     		.align	2
 1154              		.global	HAL_RTCEx_SetWakeUpTimer
 1155              		.thumb
 1156              		.thumb_func
 1158              	HAL_RTCEx_SetWakeUpTimer:
 1159              	.LFB67:
 599:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** 
 600:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** /**
 601:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @}
 602:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   */
 603:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 604:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** /** @defgroup RTCEx_Group2 RTC Wake-up functions
 605:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****  *  @brief   RTC Wake-up functions
 606:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****  *
 607:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** @verbatim   
 608:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****  ===============================================================================
 609:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****                         ##### RTC Wake-up functions #####
 610:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****  ===============================================================================  
 611:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****  
 612:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****  [..] This section provide functions allowing to configure Wake-up feature
 613:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** 
 614:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** @endverbatim
 615:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @{
 616:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   */
 617:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** 
 618:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** /**
 619:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @brief  Sets wake up timer. 
 620:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @param  hrtc: RTC handle
 621:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @param  WakeUpCounter: Wake up counter
 622:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @param  WakeUpClock: Wake up clock  
 623:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @retval HAL status
 624:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   */
 625:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_
 626:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** {
 1160              		.loc 1 626 0
 1161              		.cfi_startproc
 1162              		@ args = 0, pretend = 0, frame = 24
 1163              		@ frame_needed = 1, uses_anonymous_args = 0
 1164 0668 80B5     		push	{r7, lr}
 1165              		.cfi_def_cfa_offset 8
 1166              		.cfi_offset 7, -8
 1167              		.cfi_offset 14, -4
 1168 066a 86B0     		sub	sp, sp, #24
 1169              		.cfi_def_cfa_offset 32
 1170 066c 00AF     		add	r7, sp, #0
 1171              		.cfi_def_cfa_register 7
 1172 066e F860     		str	r0, [r7, #12]
 1173 0670 B960     		str	r1, [r7, #8]
 1174 0672 7A60     		str	r2, [r7, #4]
 627:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   uint32_t timeout = 0;
 1175              		.loc 1 627 0
 1176 0674 0023     		movs	r3, #0
 1177 0676 7B61     		str	r3, [r7, #20]
 628:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** 
 629:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Check the parameters */
 630:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   assert_param(IS_WAKEUP_CLOCK(WakeUpClock));
 631:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   assert_param(IS_WAKEUP_COUNTER(WakeUpCounter));
 632:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****  
 633:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Process Locked */ 
 634:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   __HAL_LOCK(hrtc);
 1178              		.loc 1 634 0
 1179 0678 FB68     		ldr	r3, [r7, #12]
 1180 067a 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 1181 067c 012B     		cmp	r3, #1
 1182 067e 01D1     		bne	.L37
 1183              		.loc 1 634 0 is_stmt 0 discriminator 1
 1184 0680 0223     		movs	r3, #2
 1185 0682 5CE0     		b	.L38
 1186              	.L37:
 1187              		.loc 1 634 0 discriminator 2
 1188 0684 FB68     		ldr	r3, [r7, #12]
 1189 0686 0122     		movs	r2, #1
 1190 0688 1A77     		strb	r2, [r3, #28]
 635:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     
 636:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 1191              		.loc 1 636 0 is_stmt 1 discriminator 2
 1192 068a FB68     		ldr	r3, [r7, #12]
 1193 068c 0222     		movs	r2, #2
 1194 068e 5A77     		strb	r2, [r3, #29]
 637:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 638:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Disable the write protection for RTC registers */
 639:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 1195              		.loc 1 639 0 discriminator 2
 1196 0690 FB68     		ldr	r3, [r7, #12]
 1197 0692 1B68     		ldr	r3, [r3]
 1198 0694 CA22     		movs	r2, #202
 1199 0696 5A62     		str	r2, [r3, #36]
 1200 0698 FB68     		ldr	r3, [r7, #12]
 1201 069a 1B68     		ldr	r3, [r3]
 1202 069c 5322     		movs	r2, #83
 1203 069e 5A62     		str	r2, [r3, #36]
 640:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 641:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 1204              		.loc 1 641 0 discriminator 2
 1205 06a0 FB68     		ldr	r3, [r7, #12]
 1206 06a2 1B68     		ldr	r3, [r3]
 1207 06a4 FA68     		ldr	r2, [r7, #12]
 1208 06a6 1268     		ldr	r2, [r2]
 1209 06a8 9268     		ldr	r2, [r2, #8]
 1210 06aa 22F48062 		bic	r2, r2, #1024
 1211 06ae 9A60     		str	r2, [r3, #8]
 642:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****      
 643:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   timeout = HAL_GetTick() + RTC_TIMEOUT_VALUE;
 1212              		.loc 1 643 0 discriminator 2
 1213 06b0 FFF7FEFF 		bl	HAL_GetTick
 1214 06b4 0346     		mov	r3, r0
 1215 06b6 03F57A73 		add	r3, r3, #1000
 1216 06ba 7B61     		str	r3, [r7, #20]
 644:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** 
 645:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
 646:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 1217              		.loc 1 646 0 discriminator 2
 1218 06bc 11E0     		b	.L39
 1219              	.L40:
 647:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   {
 648:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     if(HAL_GetTick() >= timeout)
 1220              		.loc 1 648 0
 1221 06be FFF7FEFF 		bl	HAL_GetTick
 1222 06c2 0246     		mov	r2, r0
 1223 06c4 7B69     		ldr	r3, [r7, #20]
 1224 06c6 9A42     		cmp	r2, r3
 1225 06c8 0BD3     		bcc	.L39
 649:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     {
 650:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****       /* Enable the write protection for RTC registers */
 651:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****       __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 1226              		.loc 1 651 0
 1227 06ca FB68     		ldr	r3, [r7, #12]
 1228 06cc 1B68     		ldr	r3, [r3]
 1229 06ce FF22     		movs	r2, #255
 1230 06d0 5A62     		str	r2, [r3, #36]
 652:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****       
 653:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****       hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 1231              		.loc 1 653 0
 1232 06d2 FB68     		ldr	r3, [r7, #12]
 1233 06d4 0322     		movs	r2, #3
 1234 06d6 5A77     		strb	r2, [r3, #29]
 654:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****       
 655:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****       /* Process Unlocked */ 
 656:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****       __HAL_UNLOCK(hrtc);
 1235              		.loc 1 656 0
 1236 06d8 FB68     		ldr	r3, [r7, #12]
 1237 06da 0022     		movs	r2, #0
 1238 06dc 1A77     		strb	r2, [r3, #28]
 657:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****       
 658:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****       return HAL_TIMEOUT;
 1239              		.loc 1 658 0
 1240 06de 0323     		movs	r3, #3
 1241 06e0 2DE0     		b	.L38
 1242              	.L39:
 646:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   {
 1243              		.loc 1 646 0 discriminator 1
 1244 06e2 FB68     		ldr	r3, [r7, #12]
 1245 06e4 1B68     		ldr	r3, [r3]
 1246 06e6 DB68     		ldr	r3, [r3, #12]
 1247 06e8 03F00403 		and	r3, r3, #4
 1248 06ec 002B     		cmp	r3, #0
 1249 06ee E6D0     		beq	.L40
 659:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     }  
 660:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   }
 661:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 662:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Clear the Wakeup Timer clock source bits in CR register */
 663:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 1250              		.loc 1 663 0
 1251 06f0 FB68     		ldr	r3, [r7, #12]
 1252 06f2 1B68     		ldr	r3, [r3]
 1253 06f4 FA68     		ldr	r2, [r7, #12]
 1254 06f6 1268     		ldr	r2, [r2]
 1255 06f8 9268     		ldr	r2, [r2, #8]
 1256 06fa 22F00702 		bic	r2, r2, #7
 1257 06fe 9A60     		str	r2, [r3, #8]
 664:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 665:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Configure the clock source */
 666:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 1258              		.loc 1 666 0
 1259 0700 FB68     		ldr	r3, [r7, #12]
 1260 0702 1B68     		ldr	r3, [r3]
 1261 0704 FA68     		ldr	r2, [r7, #12]
 1262 0706 1268     		ldr	r2, [r2]
 1263 0708 9168     		ldr	r1, [r2, #8]
 1264 070a 7A68     		ldr	r2, [r7, #4]
 1265 070c 0A43     		orrs	r2, r2, r1
 1266 070e 9A60     		str	r2, [r3, #8]
 667:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 668:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Configure the Wakeup Timer counter */
 669:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 1267              		.loc 1 669 0
 1268 0710 FB68     		ldr	r3, [r7, #12]
 1269 0712 1B68     		ldr	r3, [r3]
 1270 0714 BA68     		ldr	r2, [r7, #8]
 1271 0716 5A61     		str	r2, [r3, #20]
 670:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 671:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****    /* Enable the Wakeup Timer */
 672:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);   
 1272              		.loc 1 672 0
 1273 0718 FB68     		ldr	r3, [r7, #12]
 1274 071a 1B68     		ldr	r3, [r3]
 1275 071c FA68     		ldr	r2, [r7, #12]
 1276 071e 1268     		ldr	r2, [r2]
 1277 0720 9268     		ldr	r2, [r2, #8]
 1278 0722 42F48062 		orr	r2, r2, #1024
 1279 0726 9A60     		str	r2, [r3, #8]
 673:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 674:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Enable the write protection for RTC registers */
 675:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 1280              		.loc 1 675 0
 1281 0728 FB68     		ldr	r3, [r7, #12]
 1282 072a 1B68     		ldr	r3, [r3]
 1283 072c FF22     		movs	r2, #255
 1284 072e 5A62     		str	r2, [r3, #36]
 676:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 677:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   hrtc->State = HAL_RTC_STATE_READY;   
 1285              		.loc 1 677 0
 1286 0730 FB68     		ldr	r3, [r7, #12]
 1287 0732 0122     		movs	r2, #1
 1288 0734 5A77     		strb	r2, [r3, #29]
 678:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 679:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Process Unlocked */ 
 680:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   __HAL_UNLOCK(hrtc);
 1289              		.loc 1 680 0
 1290 0736 FB68     		ldr	r3, [r7, #12]
 1291 0738 0022     		movs	r2, #0
 1292 073a 1A77     		strb	r2, [r3, #28]
 681:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 682:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   return HAL_OK;
 1293              		.loc 1 682 0
 1294 073c 0023     		movs	r3, #0
 1295              	.L38:
 683:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** }
 1296              		.loc 1 683 0
 1297 073e 1846     		mov	r0, r3
 1298 0740 1837     		adds	r7, r7, #24
 1299 0742 BD46     		mov	sp, r7
 1300              		@ sp needed
 1301 0744 80BD     		pop	{r7, pc}
 1302              		.cfi_endproc
 1303              	.LFE67:
 1305 0746 00BF     		.align	2
 1306              		.global	HAL_RTCEx_SetWakeUpTimer_IT
 1307              		.thumb
 1308              		.thumb_func
 1310              	HAL_RTCEx_SetWakeUpTimer_IT:
 1311              	.LFB68:
 684:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** 
 685:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** /**
 686:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @brief  Sets wake up timer with interrupt
 687:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @param  hrtc: RTC handle
 688:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @param  WakeUpCounter: wake up counter
 689:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @param  WakeUpClock: wake up clock  
 690:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @retval HAL status
 691:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   */
 692:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint
 693:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** {
 1312              		.loc 1 693 0
 1313              		.cfi_startproc
 1314              		@ args = 0, pretend = 0, frame = 24
 1315              		@ frame_needed = 1, uses_anonymous_args = 0
 1316 0748 80B5     		push	{r7, lr}
 1317              		.cfi_def_cfa_offset 8
 1318              		.cfi_offset 7, -8
 1319              		.cfi_offset 14, -4
 1320 074a 86B0     		sub	sp, sp, #24
 1321              		.cfi_def_cfa_offset 32
 1322 074c 00AF     		add	r7, sp, #0
 1323              		.cfi_def_cfa_register 7
 1324 074e F860     		str	r0, [r7, #12]
 1325 0750 B960     		str	r1, [r7, #8]
 1326 0752 7A60     		str	r2, [r7, #4]
 694:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   uint32_t timeout = 0;
 1327              		.loc 1 694 0
 1328 0754 0023     		movs	r3, #0
 1329 0756 7B61     		str	r3, [r7, #20]
 695:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 696:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Check the parameters */
 697:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   assert_param(IS_WAKEUP_CLOCK(WakeUpClock));
 698:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   assert_param(IS_WAKEUP_COUNTER(WakeUpCounter));
 699:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 700:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Process Locked */ 
 701:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   __HAL_LOCK(hrtc);
 1330              		.loc 1 701 0
 1331 0758 FB68     		ldr	r3, [r7, #12]
 1332 075a 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 1333 075c 012B     		cmp	r3, #1
 1334 075e 01D1     		bne	.L42
 1335              		.loc 1 701 0 is_stmt 0 discriminator 1
 1336 0760 0223     		movs	r3, #2
 1337 0762 7CE0     		b	.L43
 1338              	.L42:
 1339              		.loc 1 701 0 discriminator 2
 1340 0764 FB68     		ldr	r3, [r7, #12]
 1341 0766 0122     		movs	r2, #1
 1342 0768 1A77     		strb	r2, [r3, #28]
 702:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 703:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 1343              		.loc 1 703 0 is_stmt 1 discriminator 2
 1344 076a FB68     		ldr	r3, [r7, #12]
 1345 076c 0222     		movs	r2, #2
 1346 076e 5A77     		strb	r2, [r3, #29]
 704:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 705:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Disable the write protection for RTC registers */
 706:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 1347              		.loc 1 706 0 discriminator 2
 1348 0770 FB68     		ldr	r3, [r7, #12]
 1349 0772 1B68     		ldr	r3, [r3]
 1350 0774 CA22     		movs	r2, #202
 1351 0776 5A62     		str	r2, [r3, #36]
 1352 0778 FB68     		ldr	r3, [r7, #12]
 1353 077a 1B68     		ldr	r3, [r3]
 1354 077c 5322     		movs	r2, #83
 1355 077e 5A62     		str	r2, [r3, #36]
 707:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 708:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 1356              		.loc 1 708 0 discriminator 2
 1357 0780 FB68     		ldr	r3, [r7, #12]
 1358 0782 1B68     		ldr	r3, [r3]
 1359 0784 FA68     		ldr	r2, [r7, #12]
 1360 0786 1268     		ldr	r2, [r2]
 1361 0788 9268     		ldr	r2, [r2, #8]
 1362 078a 22F48062 		bic	r2, r2, #1024
 1363 078e 9A60     		str	r2, [r3, #8]
 709:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****        
 710:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   timeout = HAL_GetTick() + RTC_TIMEOUT_VALUE;
 1364              		.loc 1 710 0 discriminator 2
 1365 0790 FFF7FEFF 		bl	HAL_GetTick
 1366 0794 0346     		mov	r3, r0
 1367 0796 03F57A73 		add	r3, r3, #1000
 1368 079a 7B61     		str	r3, [r7, #20]
 711:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 712:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
 713:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 1369              		.loc 1 713 0 discriminator 2
 1370 079c 11E0     		b	.L44
 1371              	.L45:
 714:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   {
 715:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     if(HAL_GetTick() >= timeout)
 1372              		.loc 1 715 0
 1373 079e FFF7FEFF 		bl	HAL_GetTick
 1374 07a2 0246     		mov	r2, r0
 1375 07a4 7B69     		ldr	r3, [r7, #20]
 1376 07a6 9A42     		cmp	r2, r3
 1377 07a8 0BD3     		bcc	.L44
 716:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     {
 717:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****       /* Enable the write protection for RTC registers */
 718:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****       __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 1378              		.loc 1 718 0
 1379 07aa FB68     		ldr	r3, [r7, #12]
 1380 07ac 1B68     		ldr	r3, [r3]
 1381 07ae FF22     		movs	r2, #255
 1382 07b0 5A62     		str	r2, [r3, #36]
 719:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****       
 720:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****       hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 1383              		.loc 1 720 0
 1384 07b2 FB68     		ldr	r3, [r7, #12]
 1385 07b4 0322     		movs	r2, #3
 1386 07b6 5A77     		strb	r2, [r3, #29]
 721:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****       
 722:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****       /* Process Unlocked */ 
 723:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****       __HAL_UNLOCK(hrtc);
 1387              		.loc 1 723 0
 1388 07b8 FB68     		ldr	r3, [r7, #12]
 1389 07ba 0022     		movs	r2, #0
 1390 07bc 1A77     		strb	r2, [r3, #28]
 724:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****       
 725:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****       return HAL_TIMEOUT;
 1391              		.loc 1 725 0
 1392 07be 0323     		movs	r3, #3
 1393 07c0 4DE0     		b	.L43
 1394              	.L44:
 713:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   {
 1395              		.loc 1 713 0 discriminator 1
 1396 07c2 FB68     		ldr	r3, [r7, #12]
 1397 07c4 1B68     		ldr	r3, [r3]
 1398 07c6 DB68     		ldr	r3, [r3, #12]
 1399 07c8 03F00403 		and	r3, r3, #4
 1400 07cc 002B     		cmp	r3, #0
 1401 07ce E6D0     		beq	.L45
 726:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     }  
 727:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   }
 728:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 729:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Configure the Wakeup Timer counter */
 730:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 1402              		.loc 1 730 0
 1403 07d0 FB68     		ldr	r3, [r7, #12]
 1404 07d2 1B68     		ldr	r3, [r3]
 1405 07d4 BA68     		ldr	r2, [r7, #8]
 1406 07d6 5A61     		str	r2, [r3, #20]
 731:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** 
 732:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Clear the Wakeup Timer clock source bits in CR register */
 733:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 1407              		.loc 1 733 0
 1408 07d8 FB68     		ldr	r3, [r7, #12]
 1409 07da 1B68     		ldr	r3, [r3]
 1410 07dc FA68     		ldr	r2, [r7, #12]
 1411 07de 1268     		ldr	r2, [r2]
 1412 07e0 9268     		ldr	r2, [r2, #8]
 1413 07e2 22F00702 		bic	r2, r2, #7
 1414 07e6 9A60     		str	r2, [r3, #8]
 734:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** 
 735:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Configure the clock source */
 736:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 1415              		.loc 1 736 0
 1416 07e8 FB68     		ldr	r3, [r7, #12]
 1417 07ea 1B68     		ldr	r3, [r3]
 1418 07ec FA68     		ldr	r2, [r7, #12]
 1419 07ee 1268     		ldr	r2, [r2]
 1420 07f0 9168     		ldr	r1, [r2, #8]
 1421 07f2 7A68     		ldr	r2, [r7, #4]
 1422 07f4 0A43     		orrs	r2, r2, r1
 1423 07f6 9A60     		str	r2, [r3, #8]
 737:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 738:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
 739:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   __HAL_RTC_ENABLE_IT(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 1424              		.loc 1 739 0
 1425 07f8 4FF47053 		mov	r3, #15360
 1426 07fc C4F20103 		movt	r3, 16385
 1427 0800 4FF47052 		mov	r2, #15360
 1428 0804 C4F20102 		movt	r2, 16385
 1429 0808 1268     		ldr	r2, [r2]
 1430 080a 42F48002 		orr	r2, r2, #4194304
 1431 080e 1A60     		str	r2, [r3]
 740:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 741:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   EXTI->RTSR |= RTC_EXTI_LINE_WAKEUPTIMER_EVENT;
 1432              		.loc 1 741 0
 1433 0810 4FF47053 		mov	r3, #15360
 1434 0814 C4F20103 		movt	r3, 16385
 1435 0818 4FF47052 		mov	r2, #15360
 1436 081c C4F20102 		movt	r2, 16385
 1437 0820 9268     		ldr	r2, [r2, #8]
 1438 0822 42F48002 		orr	r2, r2, #4194304
 1439 0826 9A60     		str	r2, [r3, #8]
 742:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 743:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Configure the Interrupt in the RTC_CR register */
 744:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 1440              		.loc 1 744 0
 1441 0828 FB68     		ldr	r3, [r7, #12]
 1442 082a 1B68     		ldr	r3, [r3]
 1443 082c FA68     		ldr	r2, [r7, #12]
 1444 082e 1268     		ldr	r2, [r2]
 1445 0830 9268     		ldr	r2, [r2, #8]
 1446 0832 42F48042 		orr	r2, r2, #16384
 1447 0836 9A60     		str	r2, [r3, #8]
 745:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 746:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Enable the Wakeup Timer */
 747:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 1448              		.loc 1 747 0
 1449 0838 FB68     		ldr	r3, [r7, #12]
 1450 083a 1B68     		ldr	r3, [r3]
 1451 083c FA68     		ldr	r2, [r7, #12]
 1452 083e 1268     		ldr	r2, [r2]
 1453 0840 9268     		ldr	r2, [r2, #8]
 1454 0842 42F48062 		orr	r2, r2, #1024
 1455 0846 9A60     		str	r2, [r3, #8]
 748:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     
 749:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Enable the write protection for RTC registers */
 750:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 1456              		.loc 1 750 0
 1457 0848 FB68     		ldr	r3, [r7, #12]
 1458 084a 1B68     		ldr	r3, [r3]
 1459 084c FF22     		movs	r2, #255
 1460 084e 5A62     		str	r2, [r3, #36]
 751:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 752:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   hrtc->State = HAL_RTC_STATE_READY;   
 1461              		.loc 1 752 0
 1462 0850 FB68     		ldr	r3, [r7, #12]
 1463 0852 0122     		movs	r2, #1
 1464 0854 5A77     		strb	r2, [r3, #29]
 753:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 754:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Process Unlocked */ 
 755:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   __HAL_UNLOCK(hrtc);
 1465              		.loc 1 755 0
 1466 0856 FB68     		ldr	r3, [r7, #12]
 1467 0858 0022     		movs	r2, #0
 1468 085a 1A77     		strb	r2, [r3, #28]
 756:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****  
 757:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   return HAL_OK;
 1469              		.loc 1 757 0
 1470 085c 0023     		movs	r3, #0
 1471              	.L43:
 758:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** }
 1472              		.loc 1 758 0
 1473 085e 1846     		mov	r0, r3
 1474 0860 1837     		adds	r7, r7, #24
 1475 0862 BD46     		mov	sp, r7
 1476              		@ sp needed
 1477 0864 80BD     		pop	{r7, pc}
 1478              		.cfi_endproc
 1479              	.LFE68:
 1481 0866 00BF     		.align	2
 1482              		.global	HAL_RTCEx_DeactivateWakeUpTimer
 1483              		.thumb
 1484              		.thumb_func
 1486              	HAL_RTCEx_DeactivateWakeUpTimer:
 1487              	.LFB69:
 759:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** 
 760:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** /**
 761:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @brief  Deactivates wake up timer counter.
 762:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @param  hrtc: RTC handle 
 763:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @retval HAL status
 764:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   */
 765:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** uint32_t HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
 766:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** {
 1488              		.loc 1 766 0
 1489              		.cfi_startproc
 1490              		@ args = 0, pretend = 0, frame = 16
 1491              		@ frame_needed = 1, uses_anonymous_args = 0
 1492 0868 80B5     		push	{r7, lr}
 1493              		.cfi_def_cfa_offset 8
 1494              		.cfi_offset 7, -8
 1495              		.cfi_offset 14, -4
 1496 086a 84B0     		sub	sp, sp, #16
 1497              		.cfi_def_cfa_offset 24
 1498 086c 00AF     		add	r7, sp, #0
 1499              		.cfi_def_cfa_register 7
 1500 086e 7860     		str	r0, [r7, #4]
 767:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   uint32_t timeout = 0;
 1501              		.loc 1 767 0
 1502 0870 0023     		movs	r3, #0
 1503 0872 FB60     		str	r3, [r7, #12]
 768:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 769:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Process Locked */ 
 770:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   __HAL_LOCK(hrtc);
 1504              		.loc 1 770 0
 1505 0874 7B68     		ldr	r3, [r7, #4]
 1506 0876 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 1507 0878 012B     		cmp	r3, #1
 1508 087a 01D1     		bne	.L47
 1509              		.loc 1 770 0 is_stmt 0 discriminator 1
 1510 087c 0223     		movs	r3, #2
 1511 087e 48E0     		b	.L48
 1512              	.L47:
 1513              		.loc 1 770 0 discriminator 2
 1514 0880 7B68     		ldr	r3, [r7, #4]
 1515 0882 0122     		movs	r2, #1
 1516 0884 1A77     		strb	r2, [r3, #28]
 771:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 772:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 1517              		.loc 1 772 0 is_stmt 1 discriminator 2
 1518 0886 7B68     		ldr	r3, [r7, #4]
 1519 0888 0222     		movs	r2, #2
 1520 088a 5A77     		strb	r2, [r3, #29]
 773:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 774:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Disable the write protection for RTC registers */
 775:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 1521              		.loc 1 775 0 discriminator 2
 1522 088c 7B68     		ldr	r3, [r7, #4]
 1523 088e 1B68     		ldr	r3, [r3]
 1524 0890 CA22     		movs	r2, #202
 1525 0892 5A62     		str	r2, [r3, #36]
 1526 0894 7B68     		ldr	r3, [r7, #4]
 1527 0896 1B68     		ldr	r3, [r3]
 1528 0898 5322     		movs	r2, #83
 1529 089a 5A62     		str	r2, [r3, #36]
 776:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 777:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Disable the Wakeup Timer */
 778:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 1530              		.loc 1 778 0 discriminator 2
 1531 089c 7B68     		ldr	r3, [r7, #4]
 1532 089e 1B68     		ldr	r3, [r3]
 1533 08a0 7A68     		ldr	r2, [r7, #4]
 1534 08a2 1268     		ldr	r2, [r2]
 1535 08a4 9268     		ldr	r2, [r2, #8]
 1536 08a6 22F48062 		bic	r2, r2, #1024
 1537 08aa 9A60     		str	r2, [r3, #8]
 779:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 780:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* In case of interrupt mode is used, the interrupt source must disabled */ 
 781:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc,RTC_IT_WUT);
 1538              		.loc 1 781 0 discriminator 2
 1539 08ac 7B68     		ldr	r3, [r7, #4]
 1540 08ae 1B68     		ldr	r3, [r3]
 1541 08b0 7A68     		ldr	r2, [r7, #4]
 1542 08b2 1268     		ldr	r2, [r2]
 1543 08b4 9268     		ldr	r2, [r2, #8]
 1544 08b6 22F48042 		bic	r2, r2, #16384
 1545 08ba 9A60     		str	r2, [r3, #8]
 782:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****       
 783:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   timeout = HAL_GetTick() + RTC_TIMEOUT_VALUE;
 1546              		.loc 1 783 0 discriminator 2
 1547 08bc FFF7FEFF 		bl	HAL_GetTick
 1548 08c0 0346     		mov	r3, r0
 1549 08c2 03F57A73 		add	r3, r3, #1000
 1550 08c6 FB60     		str	r3, [r7, #12]
 784:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
 785:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 1551              		.loc 1 785 0 discriminator 2
 1552 08c8 11E0     		b	.L49
 1553              	.L50:
 786:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   {
 787:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     if(HAL_GetTick() >= timeout)
 1554              		.loc 1 787 0
 1555 08ca FFF7FEFF 		bl	HAL_GetTick
 1556 08ce 0246     		mov	r2, r0
 1557 08d0 FB68     		ldr	r3, [r7, #12]
 1558 08d2 9A42     		cmp	r2, r3
 1559 08d4 0BD3     		bcc	.L49
 788:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     {
 789:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****       /* Enable the write protection for RTC registers */
 790:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****       __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 1560              		.loc 1 790 0
 1561 08d6 7B68     		ldr	r3, [r7, #4]
 1562 08d8 1B68     		ldr	r3, [r3]
 1563 08da FF22     		movs	r2, #255
 1564 08dc 5A62     		str	r2, [r3, #36]
 791:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****       
 792:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****       hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 1565              		.loc 1 792 0
 1566 08de 7B68     		ldr	r3, [r7, #4]
 1567 08e0 0322     		movs	r2, #3
 1568 08e2 5A77     		strb	r2, [r3, #29]
 793:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****       
 794:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****       /* Process Unlocked */ 
 795:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****       __HAL_UNLOCK(hrtc);
 1569              		.loc 1 795 0
 1570 08e4 7B68     		ldr	r3, [r7, #4]
 1571 08e6 0022     		movs	r2, #0
 1572 08e8 1A77     		strb	r2, [r3, #28]
 796:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****       
 797:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****       return HAL_TIMEOUT;
 1573              		.loc 1 797 0
 1574 08ea 0323     		movs	r3, #3
 1575 08ec 11E0     		b	.L48
 1576              	.L49:
 785:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   {
 1577              		.loc 1 785 0 discriminator 1
 1578 08ee 7B68     		ldr	r3, [r7, #4]
 1579 08f0 1B68     		ldr	r3, [r3]
 1580 08f2 DB68     		ldr	r3, [r3, #12]
 1581 08f4 03F00403 		and	r3, r3, #4
 1582 08f8 002B     		cmp	r3, #0
 1583 08fa E6D0     		beq	.L50
 798:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     }   
 799:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   }
 800:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 801:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Enable the write protection for RTC registers */
 802:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 1584              		.loc 1 802 0
 1585 08fc 7B68     		ldr	r3, [r7, #4]
 1586 08fe 1B68     		ldr	r3, [r3]
 1587 0900 FF22     		movs	r2, #255
 1588 0902 5A62     		str	r2, [r3, #36]
 803:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 804:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   hrtc->State = HAL_RTC_STATE_READY;   
 1589              		.loc 1 804 0
 1590 0904 7B68     		ldr	r3, [r7, #4]
 1591 0906 0122     		movs	r2, #1
 1592 0908 5A77     		strb	r2, [r3, #29]
 805:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 806:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Process Unlocked */ 
 807:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   __HAL_UNLOCK(hrtc);
 1593              		.loc 1 807 0
 1594 090a 7B68     		ldr	r3, [r7, #4]
 1595 090c 0022     		movs	r2, #0
 1596 090e 1A77     		strb	r2, [r3, #28]
 808:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 809:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   return HAL_OK;
 1597              		.loc 1 809 0
 1598 0910 0023     		movs	r3, #0
 1599              	.L48:
 810:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** }
 1600              		.loc 1 810 0
 1601 0912 1846     		mov	r0, r3
 1602 0914 1037     		adds	r7, r7, #16
 1603 0916 BD46     		mov	sp, r7
 1604              		@ sp needed
 1605 0918 80BD     		pop	{r7, pc}
 1606              		.cfi_endproc
 1607              	.LFE69:
 1609 091a 00BF     		.align	2
 1610              		.global	HAL_RTCEx_GetWakeUpTimer
 1611              		.thumb
 1612              		.thumb_func
 1614              	HAL_RTCEx_GetWakeUpTimer:
 1615              	.LFB70:
 811:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** 
 812:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** /**
 813:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @brief  Gets wake up timer counter.
 814:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @param  hrtc: RTC handle 
 815:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @retval Counter value
 816:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   */
 817:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** uint32_t HAL_RTCEx_GetWakeUpTimer(RTC_HandleTypeDef *hrtc)
 818:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** {
 1616              		.loc 1 818 0
 1617              		.cfi_startproc
 1618              		@ args = 0, pretend = 0, frame = 8
 1619              		@ frame_needed = 1, uses_anonymous_args = 0
 1620              		@ link register save eliminated.
 1621 091c 80B4     		push	{r7}
 1622              		.cfi_def_cfa_offset 4
 1623              		.cfi_offset 7, -4
 1624 091e 83B0     		sub	sp, sp, #12
 1625              		.cfi_def_cfa_offset 16
 1626 0920 00AF     		add	r7, sp, #0
 1627              		.cfi_def_cfa_register 7
 1628 0922 7860     		str	r0, [r7, #4]
 819:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Get the counter value */
 820:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   return ((uint32_t)(hrtc->Instance->WUTR & RTC_WUTR_WUT)); 
 1629              		.loc 1 820 0
 1630 0924 7B68     		ldr	r3, [r7, #4]
 1631 0926 1B68     		ldr	r3, [r3]
 1632 0928 5B69     		ldr	r3, [r3, #20]
 1633 092a 9BB2     		uxth	r3, r3
 821:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** }
 1634              		.loc 1 821 0
 1635 092c 1846     		mov	r0, r3
 1636 092e 0C37     		adds	r7, r7, #12
 1637 0930 BD46     		mov	sp, r7
 1638              		@ sp needed
 1639 0932 5DF8047B 		ldr	r7, [sp], #4
 1640 0936 7047     		bx	lr
 1641              		.cfi_endproc
 1642              	.LFE70:
 1644              		.align	2
 1645              		.global	HAL_RTCEx_WakeUpTimerIRQHandler
 1646              		.thumb
 1647              		.thumb_func
 1649              	HAL_RTCEx_WakeUpTimerIRQHandler:
 1650              	.LFB71:
 822:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** 
 823:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** /**
 824:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @brief  This function handles Wake Up Timer interrupt request.
 825:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @param  hrtc: RTC handle
 826:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @retval None
 827:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   */
 828:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
 829:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** {  
 1651              		.loc 1 829 0
 1652              		.cfi_startproc
 1653              		@ args = 0, pretend = 0, frame = 8
 1654              		@ frame_needed = 1, uses_anonymous_args = 0
 1655 0938 80B5     		push	{r7, lr}
 1656              		.cfi_def_cfa_offset 8
 1657              		.cfi_offset 7, -8
 1658              		.cfi_offset 14, -4
 1659 093a 82B0     		sub	sp, sp, #8
 1660              		.cfi_def_cfa_offset 16
 1661 093c 00AF     		add	r7, sp, #0
 1662              		.cfi_def_cfa_register 7
 1663 093e 7860     		str	r0, [r7, #4]
 830:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   if(__HAL_RTC_WAKEUPTIMER_GET_IT(hrtc, RTC_IT_WUT))
 1664              		.loc 1 830 0
 1665 0940 7B68     		ldr	r3, [r7, #4]
 1666 0942 1B68     		ldr	r3, [r3]
 1667 0944 DB68     		ldr	r3, [r3, #12]
 1668 0946 03F48063 		and	r3, r3, #1024
 1669 094a 002B     		cmp	r3, #0
 1670 094c 12D0     		beq	.L54
 831:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   {
 832:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     /* Get the status of the Interrupt */
 833:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     if((uint32_t)(hrtc->Instance->CR & RTC_IT_WUT) != (uint32_t)RESET)
 1671              		.loc 1 833 0
 1672 094e 7B68     		ldr	r3, [r7, #4]
 1673 0950 1B68     		ldr	r3, [r3]
 1674 0952 9B68     		ldr	r3, [r3, #8]
 1675 0954 03F48043 		and	r3, r3, #16384
 1676 0958 002B     		cmp	r3, #0
 1677 095a 0BD0     		beq	.L54
 834:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     {
 835:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****       /* WAKEUPTIMER callback */ 
 836:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****       HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 1678              		.loc 1 836 0
 1679 095c 7868     		ldr	r0, [r7, #4]
 1680 095e FFF7FEFF 		bl	HAL_RTCEx_WakeUpTimerEventCallback
 837:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****       
 838:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****       /* Clear the WAKEUPTIMER interrupt pending bit */
 839:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****       __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 1681              		.loc 1 839 0
 1682 0962 7B68     		ldr	r3, [r7, #4]
 1683 0964 1B68     		ldr	r3, [r3]
 1684 0966 7A68     		ldr	r2, [r7, #4]
 1685 0968 1268     		ldr	r2, [r2]
 1686 096a D268     		ldr	r2, [r2, #12]
 1687 096c D2B2     		uxtb	r2, r2
 1688 096e 62F49062 		orn	r2, r2, #1152
 1689 0972 DA60     		str	r2, [r3, #12]
 1690              	.L54:
 840:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     }
 841:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   }
 842:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 843:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Clear the EXTI's line Flag for RTC WakeUpTimer */
 844:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   __HAL_RTC_CLEAR_FLAG(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 1691              		.loc 1 844 0
 1692 0974 4FF47053 		mov	r3, #15360
 1693 0978 C4F20103 		movt	r3, 16385
 1694 097c 4FF48002 		mov	r2, #4194304
 1695 0980 5A61     		str	r2, [r3, #20]
 845:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 846:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Change RTC state */
 847:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   hrtc->State = HAL_RTC_STATE_READY; 
 1696              		.loc 1 847 0
 1697 0982 7B68     		ldr	r3, [r7, #4]
 1698 0984 0122     		movs	r2, #1
 1699 0986 5A77     		strb	r2, [r3, #29]
 848:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** }
 1700              		.loc 1 848 0
 1701 0988 0837     		adds	r7, r7, #8
 1702 098a BD46     		mov	sp, r7
 1703              		@ sp needed
 1704 098c 80BD     		pop	{r7, pc}
 1705              		.cfi_endproc
 1706              	.LFE71:
 1708 098e 00BF     		.align	2
 1709              		.weak	HAL_RTCEx_WakeUpTimerEventCallback
 1710              		.thumb
 1711              		.thumb_func
 1713              	HAL_RTCEx_WakeUpTimerEventCallback:
 1714              	.LFB72:
 849:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** 
 850:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** /**
 851:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @brief  Wake Up Timer callback.
 852:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @param  hrtc: RTC handle
 853:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @retval None
 854:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   */
 855:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** __weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
 856:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** {
 1715              		.loc 1 856 0
 1716              		.cfi_startproc
 1717              		@ args = 0, pretend = 0, frame = 8
 1718              		@ frame_needed = 1, uses_anonymous_args = 0
 1719              		@ link register save eliminated.
 1720 0990 80B4     		push	{r7}
 1721              		.cfi_def_cfa_offset 4
 1722              		.cfi_offset 7, -4
 1723 0992 83B0     		sub	sp, sp, #12
 1724              		.cfi_def_cfa_offset 16
 1725 0994 00AF     		add	r7, sp, #0
 1726              		.cfi_def_cfa_register 7
 1727 0996 7860     		str	r0, [r7, #4]
 857:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 858:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****             the HAL_RTC_WakeUpTimerEventCallback could be implemented in the user file
 859:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****    */
 860:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** }
 1728              		.loc 1 860 0
 1729 0998 0C37     		adds	r7, r7, #12
 1730 099a BD46     		mov	sp, r7
 1731              		@ sp needed
 1732 099c 5DF8047B 		ldr	r7, [sp], #4
 1733 09a0 7047     		bx	lr
 1734              		.cfi_endproc
 1735              	.LFE72:
 1737 09a2 00BF     		.align	2
 1738              		.global	HAL_RTCEx_PollForWakeUpTimerEvent
 1739              		.thumb
 1740              		.thumb_func
 1742              	HAL_RTCEx_PollForWakeUpTimerEvent:
 1743              	.LFB73:
 861:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** 
 862:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** /**
 863:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @brief  This function handles Wake Up Timer Polling.
 864:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @param  hrtc: RTC handle
 865:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @param  Timeout: Timeout duration
 866:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @retval HAL status
 867:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   */
 868:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** HAL_StatusTypeDef HAL_RTCEx_PollForWakeUpTimerEvent(RTC_HandleTypeDef *hrtc, uint32_t Timeout)
 869:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** {  
 1744              		.loc 1 869 0
 1745              		.cfi_startproc
 1746              		@ args = 0, pretend = 0, frame = 16
 1747              		@ frame_needed = 1, uses_anonymous_args = 0
 1748 09a4 80B5     		push	{r7, lr}
 1749              		.cfi_def_cfa_offset 8
 1750              		.cfi_offset 7, -8
 1751              		.cfi_offset 14, -4
 1752 09a6 84B0     		sub	sp, sp, #16
 1753              		.cfi_def_cfa_offset 24
 1754 09a8 00AF     		add	r7, sp, #0
 1755              		.cfi_def_cfa_register 7
 1756 09aa 7860     		str	r0, [r7, #4]
 1757 09ac 3960     		str	r1, [r7]
 870:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   uint32_t timeout = 0; 
 1758              		.loc 1 870 0
 1759 09ae 0023     		movs	r3, #0
 1760 09b0 FB60     		str	r3, [r7, #12]
 871:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** 
 872:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Get Timeout value */
 873:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   timeout = HAL_GetTick() + Timeout;
 1761              		.loc 1 873 0
 1762 09b2 FFF7FEFF 		bl	HAL_GetTick
 1763 09b6 0246     		mov	r2, r0
 1764 09b8 3B68     		ldr	r3, [r7]
 1765 09ba 1344     		add	r3, r3, r2
 1766 09bc FB60     		str	r3, [r7, #12]
 874:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 875:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) == RESET)
 1767              		.loc 1 875 0
 1768 09be 0EE0     		b	.L57
 1769              	.L59:
 876:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   {
 877:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     if(Timeout != HAL_MAX_DELAY)
 1770              		.loc 1 877 0
 1771 09c0 3B68     		ldr	r3, [r7]
 1772 09c2 B3F1FF3F 		cmp	r3, #-1
 1773 09c6 0AD0     		beq	.L57
 878:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     {
 879:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****       if(HAL_GetTick() >= timeout)
 1774              		.loc 1 879 0
 1775 09c8 FFF7FEFF 		bl	HAL_GetTick
 1776 09cc 0246     		mov	r2, r0
 1777 09ce FB68     		ldr	r3, [r7, #12]
 1778 09d0 9A42     		cmp	r2, r3
 1779 09d2 04D3     		bcc	.L57
 880:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****       {
 881:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
 1780              		.loc 1 881 0
 1781 09d4 7B68     		ldr	r3, [r7, #4]
 1782 09d6 0322     		movs	r2, #3
 1783 09d8 5A77     		strb	r2, [r3, #29]
 882:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****       
 883:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****         return HAL_TIMEOUT;
 1784              		.loc 1 883 0
 1785 09da 0323     		movs	r3, #3
 1786 09dc 13E0     		b	.L58
 1787              	.L57:
 875:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   {
 1788              		.loc 1 875 0 discriminator 1
 1789 09de 7B68     		ldr	r3, [r7, #4]
 1790 09e0 1B68     		ldr	r3, [r3]
 1791 09e2 DB68     		ldr	r3, [r3, #12]
 1792 09e4 03F48063 		and	r3, r3, #1024
 1793 09e8 002B     		cmp	r3, #0
 1794 09ea E9D0     		beq	.L59
 884:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****       }
 885:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     }
 886:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   }
 887:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 888:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Clear the WAKEUPTIMER Flag */
 889:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 1795              		.loc 1 889 0
 1796 09ec 7B68     		ldr	r3, [r7, #4]
 1797 09ee 1B68     		ldr	r3, [r3]
 1798 09f0 7A68     		ldr	r2, [r7, #4]
 1799 09f2 1268     		ldr	r2, [r2]
 1800 09f4 D268     		ldr	r2, [r2, #12]
 1801 09f6 D2B2     		uxtb	r2, r2
 1802 09f8 62F49062 		orn	r2, r2, #1152
 1803 09fc DA60     		str	r2, [r3, #12]
 890:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 891:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Change RTC state */
 892:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   hrtc->State = HAL_RTC_STATE_READY;
 1804              		.loc 1 892 0
 1805 09fe 7B68     		ldr	r3, [r7, #4]
 1806 0a00 0122     		movs	r2, #1
 1807 0a02 5A77     		strb	r2, [r3, #29]
 893:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 894:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   return HAL_OK; 
 1808              		.loc 1 894 0
 1809 0a04 0023     		movs	r3, #0
 1810              	.L58:
 895:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** }
 1811              		.loc 1 895 0
 1812 0a06 1846     		mov	r0, r3
 1813 0a08 1037     		adds	r7, r7, #16
 1814 0a0a BD46     		mov	sp, r7
 1815              		@ sp needed
 1816 0a0c 80BD     		pop	{r7, pc}
 1817              		.cfi_endproc
 1818              	.LFE73:
 1820 0a0e 00BF     		.align	2
 1821              		.global	HAL_RTCEx_BKUPWrite
 1822              		.thumb
 1823              		.thumb_func
 1825              	HAL_RTCEx_BKUPWrite:
 1826              	.LFB74:
 896:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** 
 897:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** /**
 898:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @}
 899:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   */
 900:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** 
 901:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** 
 902:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** /** @defgroup RTCEx_Group3 Extension Peripheral Control functions 
 903:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****  *  @brief   Extension Peripheral Control functions 
 904:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****  *
 905:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** @verbatim   
 906:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****  ===============================================================================
 907:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****               ##### Extension Peripheral Control functions #####
 908:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****  ===============================================================================  
 909:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     [..]
 910:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     This subsection provides functions allowing to
 911:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****       (+) Writes a data in a specified RTC Backup data register
 912:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****       (+) Read a data in a specified RTC Backup data register
 913:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****       (+) Sets the Coarse calibration parameters.
 914:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****       (+) Deactivates the Coarse calibration parameters
 915:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****       (+) Sets the Smooth calibration parameters.
 916:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****       (+) Configures the Synchronization Shift Control Settings.
 917:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****       (+) Configures the Calibration Pinout (RTC_CALIB) Selection (1Hz or 512Hz).
 918:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****       (+) Deactivates the Calibration Pinout (RTC_CALIB) Selection (1Hz or 512Hz).
 919:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****       (+) Enables the RTC reference clock detection.
 920:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****       (+) Disable the RTC reference clock detection.
 921:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****       (+) Enables the Bypass Shadow feature.
 922:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****       (+) Disables the Bypass Shadow feature.
 923:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** 
 924:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** @endverbatim
 925:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @{
 926:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   */
 927:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** 
 928:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** /**
 929:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @brief  Writes a data in a specified RTC Backup data register.
 930:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @param  hrtc: RTC handle 
 931:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @param  BackupRegister: RTC Backup data Register number.
 932:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
 933:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   *                                 specify the register.
 934:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @param  Data: Data to be written in the specified RTC Backup data register.                    
 935:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @retval None
 936:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   */
 937:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
 938:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** {
 1827              		.loc 1 938 0
 1828              		.cfi_startproc
 1829              		@ args = 0, pretend = 0, frame = 24
 1830              		@ frame_needed = 1, uses_anonymous_args = 0
 1831              		@ link register save eliminated.
 1832 0a10 80B4     		push	{r7}
 1833              		.cfi_def_cfa_offset 4
 1834              		.cfi_offset 7, -4
 1835 0a12 87B0     		sub	sp, sp, #28
 1836              		.cfi_def_cfa_offset 32
 1837 0a14 00AF     		add	r7, sp, #0
 1838              		.cfi_def_cfa_register 7
 1839 0a16 F860     		str	r0, [r7, #12]
 1840 0a18 B960     		str	r1, [r7, #8]
 1841 0a1a 7A60     		str	r2, [r7, #4]
 939:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   uint32_t tmp = 0;
 1842              		.loc 1 939 0
 1843 0a1c 0023     		movs	r3, #0
 1844 0a1e 7B61     		str	r3, [r7, #20]
 940:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 941:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Check the parameters */
 942:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   assert_param(IS_RTC_BKP(BackupRegister));
 943:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 944:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 1845              		.loc 1 944 0
 1846 0a20 FB68     		ldr	r3, [r7, #12]
 1847 0a22 1B68     		ldr	r3, [r3]
 1848 0a24 5033     		adds	r3, r3, #80
 1849 0a26 7B61     		str	r3, [r7, #20]
 945:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   tmp += (BackupRegister * 4);
 1850              		.loc 1 945 0
 1851 0a28 BB68     		ldr	r3, [r7, #8]
 1852 0a2a 9B00     		lsls	r3, r3, #2
 1853 0a2c 7A69     		ldr	r2, [r7, #20]
 1854 0a2e 1344     		add	r3, r3, r2
 1855 0a30 7B61     		str	r3, [r7, #20]
 946:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 947:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Write the specified register */
 948:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   *(__IO uint32_t *)tmp = (uint32_t)Data;
 1856              		.loc 1 948 0
 1857 0a32 7B69     		ldr	r3, [r7, #20]
 1858 0a34 7A68     		ldr	r2, [r7, #4]
 1859 0a36 1A60     		str	r2, [r3]
 949:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** }
 1860              		.loc 1 949 0
 1861 0a38 1C37     		adds	r7, r7, #28
 1862 0a3a BD46     		mov	sp, r7
 1863              		@ sp needed
 1864 0a3c 5DF8047B 		ldr	r7, [sp], #4
 1865 0a40 7047     		bx	lr
 1866              		.cfi_endproc
 1867              	.LFE74:
 1869 0a42 00BF     		.align	2
 1870              		.global	HAL_RTCEx_BKUPRead
 1871              		.thumb
 1872              		.thumb_func
 1874              	HAL_RTCEx_BKUPRead:
 1875              	.LFB75:
 950:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** 
 951:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** /**
 952:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @brief  Reads data from the specified RTC Backup data Register.
 953:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @param  hrtc: RTC handle 
 954:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @param  BackupRegister: RTC Backup data Register number.
 955:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
 956:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   *                                 specify the register.                   
 957:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @retval Read value
 958:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   */
 959:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
 960:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** {
 1876              		.loc 1 960 0
 1877              		.cfi_startproc
 1878              		@ args = 0, pretend = 0, frame = 16
 1879              		@ frame_needed = 1, uses_anonymous_args = 0
 1880              		@ link register save eliminated.
 1881 0a44 80B4     		push	{r7}
 1882              		.cfi_def_cfa_offset 4
 1883              		.cfi_offset 7, -4
 1884 0a46 85B0     		sub	sp, sp, #20
 1885              		.cfi_def_cfa_offset 24
 1886 0a48 00AF     		add	r7, sp, #0
 1887              		.cfi_def_cfa_register 7
 1888 0a4a 7860     		str	r0, [r7, #4]
 1889 0a4c 3960     		str	r1, [r7]
 961:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   uint32_t tmp = 0;
 1890              		.loc 1 961 0
 1891 0a4e 0023     		movs	r3, #0
 1892 0a50 FB60     		str	r3, [r7, #12]
 962:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 963:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Check the parameters */
 964:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   assert_param(IS_RTC_BKP(BackupRegister));
 965:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** 
 966:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 1893              		.loc 1 966 0
 1894 0a52 7B68     		ldr	r3, [r7, #4]
 1895 0a54 1B68     		ldr	r3, [r3]
 1896 0a56 5033     		adds	r3, r3, #80
 1897 0a58 FB60     		str	r3, [r7, #12]
 967:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   tmp += (BackupRegister * 4);
 1898              		.loc 1 967 0
 1899 0a5a 3B68     		ldr	r3, [r7]
 1900 0a5c 9B00     		lsls	r3, r3, #2
 1901 0a5e FA68     		ldr	r2, [r7, #12]
 1902 0a60 1344     		add	r3, r3, r2
 1903 0a62 FB60     		str	r3, [r7, #12]
 968:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 969:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Read the specified register */
 970:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   return (*(__IO uint32_t *)tmp);
 1904              		.loc 1 970 0
 1905 0a64 FB68     		ldr	r3, [r7, #12]
 1906 0a66 1B68     		ldr	r3, [r3]
 971:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** }
 1907              		.loc 1 971 0
 1908 0a68 1846     		mov	r0, r3
 1909 0a6a 1437     		adds	r7, r7, #20
 1910 0a6c BD46     		mov	sp, r7
 1911              		@ sp needed
 1912 0a6e 5DF8047B 		ldr	r7, [sp], #4
 1913 0a72 7047     		bx	lr
 1914              		.cfi_endproc
 1915              	.LFE75:
 1917              		.align	2
 1918              		.global	HAL_RTCEx_SetCoarseCalib
 1919              		.thumb
 1920              		.thumb_func
 1922              	HAL_RTCEx_SetCoarseCalib:
 1923              	.LFB76:
 972:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****       
 973:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** /**
 974:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @brief  Sets the Coarse calibration parameters.
 975:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @param  hrtc: RTC handle  
 976:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @param  CalibSign: Specifies the sign of the coarse calibration value.
 977:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   *          This parameter can be  one of the following values :
 978:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   *             @arg RTC_CALIBSIGN_POSITIVE: The value sign is positive 
 979:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   *             @arg RTC_CALIBSIGN_NEGATIVE: The value sign is negative
 980:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @param  Value: value of coarse calibration expressed in ppm (coded on 5 bits).
 981:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   *    
 982:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @note   This Calibration value should be between 0 and 63 when using negative
 983:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   *         sign with a 2-ppm step.
 984:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   *           
 985:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @note   This Calibration value should be between 0 and 126 when using positive
 986:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   *         sign with a 4-ppm step.
 987:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @retval HAL status
 988:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   */
 989:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** HAL_StatusTypeDef HAL_RTCEx_SetCoarseCalib(RTC_HandleTypeDef* hrtc, uint32_t CalibSign, uint32_t Va
 990:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** {
 1924              		.loc 1 990 0
 1925              		.cfi_startproc
 1926              		@ args = 0, pretend = 0, frame = 16
 1927              		@ frame_needed = 1, uses_anonymous_args = 0
 1928 0a74 80B5     		push	{r7, lr}
 1929              		.cfi_def_cfa_offset 8
 1930              		.cfi_offset 7, -8
 1931              		.cfi_offset 14, -4
 1932 0a76 84B0     		sub	sp, sp, #16
 1933              		.cfi_def_cfa_offset 24
 1934 0a78 00AF     		add	r7, sp, #0
 1935              		.cfi_def_cfa_register 7
 1936 0a7a F860     		str	r0, [r7, #12]
 1937 0a7c B960     		str	r1, [r7, #8]
 1938 0a7e 7A60     		str	r2, [r7, #4]
 991:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Check the parameters */
 992:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   assert_param(IS_RTC_CALIB_SIGN(CalibSign));
 993:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   assert_param(IS_RTC_CALIB_VALUE(Value)); 
 994:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 995:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Process Locked */ 
 996:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   __HAL_LOCK(hrtc);
 1939              		.loc 1 996 0
 1940 0a80 FB68     		ldr	r3, [r7, #12]
 1941 0a82 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 1942 0a84 012B     		cmp	r3, #1
 1943 0a86 01D1     		bne	.L64
 1944              		.loc 1 996 0 is_stmt 0 discriminator 1
 1945 0a88 0223     		movs	r3, #2
 1946 0a8a 40E0     		b	.L65
 1947              	.L64:
 1948              		.loc 1 996 0 discriminator 2
 1949 0a8c FB68     		ldr	r3, [r7, #12]
 1950 0a8e 0122     		movs	r2, #1
 1951 0a90 1A77     		strb	r2, [r3, #28]
 997:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
 998:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 1952              		.loc 1 998 0 is_stmt 1 discriminator 2
 1953 0a92 FB68     		ldr	r3, [r7, #12]
 1954 0a94 0222     		movs	r2, #2
 1955 0a96 5A77     		strb	r2, [r3, #29]
 999:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** 
1000:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Disable the write protection for RTC registers */
1001:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 1956              		.loc 1 1001 0 discriminator 2
 1957 0a98 FB68     		ldr	r3, [r7, #12]
 1958 0a9a 1B68     		ldr	r3, [r3]
 1959 0a9c CA22     		movs	r2, #202
 1960 0a9e 5A62     		str	r2, [r3, #36]
 1961 0aa0 FB68     		ldr	r3, [r7, #12]
 1962 0aa2 1B68     		ldr	r3, [r3]
 1963 0aa4 5322     		movs	r2, #83
 1964 0aa6 5A62     		str	r2, [r3, #36]
1002:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** 
1003:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Set Initialization mode */
1004:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   if(RTC_EnterInitMode(hrtc) != HAL_OK)
 1965              		.loc 1 1004 0 discriminator 2
 1966 0aa8 F868     		ldr	r0, [r7, #12]
 1967 0aaa FFF7FEFF 		bl	RTC_EnterInitMode
 1968 0aae 0346     		mov	r3, r0
 1969 0ab0 002B     		cmp	r3, #0
 1970 0ab2 0BD0     		beq	.L66
1005:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   {
1006:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     /* Enable the write protection for RTC registers */
1007:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 1971              		.loc 1 1007 0
 1972 0ab4 FB68     		ldr	r3, [r7, #12]
 1973 0ab6 1B68     		ldr	r3, [r3]
 1974 0ab8 FF22     		movs	r2, #255
 1975 0aba 5A62     		str	r2, [r3, #36]
1008:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     
1009:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     /* Set RTC state*/
1010:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     hrtc->State = HAL_RTC_STATE_ERROR;
 1976              		.loc 1 1010 0
 1977 0abc FB68     		ldr	r3, [r7, #12]
 1978 0abe 0422     		movs	r2, #4
 1979 0ac0 5A77     		strb	r2, [r3, #29]
1011:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     
1012:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     /* Process Unlocked */ 
1013:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     __HAL_UNLOCK(hrtc);
 1980              		.loc 1 1013 0
 1981 0ac2 FB68     		ldr	r3, [r7, #12]
 1982 0ac4 0022     		movs	r2, #0
 1983 0ac6 1A77     		strb	r2, [r3, #28]
1014:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     
1015:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     return HAL_ERROR;
 1984              		.loc 1 1015 0
 1985 0ac8 0123     		movs	r3, #1
 1986 0aca 20E0     		b	.L65
 1987              	.L66:
1016:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   } 
1017:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   else
1018:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   { 
1019:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     /* Enable the Coarse Calibration */
1020:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     __HAL_RTC_COARSE_CALIB_ENABLE(hrtc);
 1988              		.loc 1 1020 0
 1989 0acc FB68     		ldr	r3, [r7, #12]
 1990 0ace 1B68     		ldr	r3, [r3]
 1991 0ad0 FA68     		ldr	r2, [r7, #12]
 1992 0ad2 1268     		ldr	r2, [r2]
 1993 0ad4 9268     		ldr	r2, [r2, #8]
 1994 0ad6 42F08002 		orr	r2, r2, #128
 1995 0ada 9A60     		str	r2, [r3, #8]
1021:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     
1022:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     /* Set the coarse calibration value */
1023:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     hrtc->Instance->CALIBR = (uint32_t)(CalibSign|Value);
 1996              		.loc 1 1023 0
 1997 0adc FB68     		ldr	r3, [r7, #12]
 1998 0ade 1B68     		ldr	r3, [r3]
 1999 0ae0 B968     		ldr	r1, [r7, #8]
 2000 0ae2 7A68     		ldr	r2, [r7, #4]
 2001 0ae4 0A43     		orrs	r2, r2, r1
 2002 0ae6 9A61     		str	r2, [r3, #24]
1024:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     
1025:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     /* Exit Initialization mode */
1026:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 2003              		.loc 1 1026 0
 2004 0ae8 FB68     		ldr	r3, [r7, #12]
 2005 0aea 1B68     		ldr	r3, [r3]
 2006 0aec FA68     		ldr	r2, [r7, #12]
 2007 0aee 1268     		ldr	r2, [r2]
 2008 0af0 D268     		ldr	r2, [r2, #12]
 2009 0af2 22F08002 		bic	r2, r2, #128
 2010 0af6 DA60     		str	r2, [r3, #12]
1027:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   } 
1028:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** 
1029:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Enable the write protection for RTC registers */
1030:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 2011              		.loc 1 1030 0
 2012 0af8 FB68     		ldr	r3, [r7, #12]
 2013 0afa 1B68     		ldr	r3, [r3]
 2014 0afc FF22     		movs	r2, #255
 2015 0afe 5A62     		str	r2, [r3, #36]
1031:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
1032:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Change state */
1033:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   hrtc->State = HAL_RTC_STATE_READY; 
 2016              		.loc 1 1033 0
 2017 0b00 FB68     		ldr	r3, [r7, #12]
 2018 0b02 0122     		movs	r2, #1
 2019 0b04 5A77     		strb	r2, [r3, #29]
1034:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
1035:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Process Unlocked */ 
1036:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   __HAL_UNLOCK(hrtc);
 2020              		.loc 1 1036 0
 2021 0b06 FB68     		ldr	r3, [r7, #12]
 2022 0b08 0022     		movs	r2, #0
 2023 0b0a 1A77     		strb	r2, [r3, #28]
1037:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
1038:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   return HAL_OK;
 2024              		.loc 1 1038 0
 2025 0b0c 0023     		movs	r3, #0
 2026              	.L65:
1039:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** }
 2027              		.loc 1 1039 0
 2028 0b0e 1846     		mov	r0, r3
 2029 0b10 1037     		adds	r7, r7, #16
 2030 0b12 BD46     		mov	sp, r7
 2031              		@ sp needed
 2032 0b14 80BD     		pop	{r7, pc}
 2033              		.cfi_endproc
 2034              	.LFE76:
 2036 0b16 00BF     		.align	2
 2037              		.global	HAL_RTCEx_DeactivateCoarseCalib
 2038              		.thumb
 2039              		.thumb_func
 2041              	HAL_RTCEx_DeactivateCoarseCalib:
 2042              	.LFB77:
1040:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** 
1041:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** /**
1042:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @brief  Deactivates the Coarse calibration parameters.
1043:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @param  hrtc: RTC handle  
1044:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @retval HAL status
1045:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   */
1046:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** HAL_StatusTypeDef HAL_RTCEx_DeactivateCoarseCalib(RTC_HandleTypeDef* hrtc)
1047:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** { 
 2043              		.loc 1 1047 0
 2044              		.cfi_startproc
 2045              		@ args = 0, pretend = 0, frame = 8
 2046              		@ frame_needed = 1, uses_anonymous_args = 0
 2047 0b18 80B5     		push	{r7, lr}
 2048              		.cfi_def_cfa_offset 8
 2049              		.cfi_offset 7, -8
 2050              		.cfi_offset 14, -4
 2051 0b1a 82B0     		sub	sp, sp, #8
 2052              		.cfi_def_cfa_offset 16
 2053 0b1c 00AF     		add	r7, sp, #0
 2054              		.cfi_def_cfa_register 7
 2055 0b1e 7860     		str	r0, [r7, #4]
1048:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Process Locked */ 
1049:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   __HAL_LOCK(hrtc);
 2056              		.loc 1 1049 0
 2057 0b20 7B68     		ldr	r3, [r7, #4]
 2058 0b22 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 2059 0b24 012B     		cmp	r3, #1
 2060 0b26 01D1     		bne	.L68
 2061              		.loc 1 1049 0 is_stmt 0 discriminator 1
 2062 0b28 0223     		movs	r3, #2
 2063 0b2a 3AE0     		b	.L69
 2064              	.L68:
 2065              		.loc 1 1049 0 discriminator 2
 2066 0b2c 7B68     		ldr	r3, [r7, #4]
 2067 0b2e 0122     		movs	r2, #1
 2068 0b30 1A77     		strb	r2, [r3, #28]
1050:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
1051:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 2069              		.loc 1 1051 0 is_stmt 1 discriminator 2
 2070 0b32 7B68     		ldr	r3, [r7, #4]
 2071 0b34 0222     		movs	r2, #2
 2072 0b36 5A77     		strb	r2, [r3, #29]
1052:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
1053:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Disable the write protection for RTC registers */
1054:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 2073              		.loc 1 1054 0 discriminator 2
 2074 0b38 7B68     		ldr	r3, [r7, #4]
 2075 0b3a 1B68     		ldr	r3, [r3]
 2076 0b3c CA22     		movs	r2, #202
 2077 0b3e 5A62     		str	r2, [r3, #36]
 2078 0b40 7B68     		ldr	r3, [r7, #4]
 2079 0b42 1B68     		ldr	r3, [r3]
 2080 0b44 5322     		movs	r2, #83
 2081 0b46 5A62     		str	r2, [r3, #36]
1055:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** 
1056:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Set Initialization mode */
1057:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   if(RTC_EnterInitMode(hrtc) != HAL_OK)
 2082              		.loc 1 1057 0 discriminator 2
 2083 0b48 7868     		ldr	r0, [r7, #4]
 2084 0b4a FFF7FEFF 		bl	RTC_EnterInitMode
 2085 0b4e 0346     		mov	r3, r0
 2086 0b50 002B     		cmp	r3, #0
 2087 0b52 0BD0     		beq	.L70
1058:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   {
1059:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     /* Enable the write protection for RTC registers */
1060:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 2088              		.loc 1 1060 0
 2089 0b54 7B68     		ldr	r3, [r7, #4]
 2090 0b56 1B68     		ldr	r3, [r3]
 2091 0b58 FF22     		movs	r2, #255
 2092 0b5a 5A62     		str	r2, [r3, #36]
1061:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     
1062:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     /* Set RTC state*/
1063:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     hrtc->State = HAL_RTC_STATE_ERROR;
 2093              		.loc 1 1063 0
 2094 0b5c 7B68     		ldr	r3, [r7, #4]
 2095 0b5e 0422     		movs	r2, #4
 2096 0b60 5A77     		strb	r2, [r3, #29]
1064:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     
1065:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     /* Process Unlocked */ 
1066:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     __HAL_UNLOCK(hrtc);
 2097              		.loc 1 1066 0
 2098 0b62 7B68     		ldr	r3, [r7, #4]
 2099 0b64 0022     		movs	r2, #0
 2100 0b66 1A77     		strb	r2, [r3, #28]
1067:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     
1068:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     return HAL_ERROR;
 2101              		.loc 1 1068 0
 2102 0b68 0123     		movs	r3, #1
 2103 0b6a 1AE0     		b	.L69
 2104              	.L70:
1069:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   } 
1070:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   else
1071:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   { 
1072:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     /* Enable the Coarse Calibration */
1073:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     __HAL_RTC_COARSE_CALIB_DISABLE(hrtc);
 2105              		.loc 1 1073 0
 2106 0b6c 7B68     		ldr	r3, [r7, #4]
 2107 0b6e 1B68     		ldr	r3, [r3]
 2108 0b70 7A68     		ldr	r2, [r7, #4]
 2109 0b72 1268     		ldr	r2, [r2]
 2110 0b74 9268     		ldr	r2, [r2, #8]
 2111 0b76 22F08002 		bic	r2, r2, #128
 2112 0b7a 9A60     		str	r2, [r3, #8]
1074:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     
1075:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     /* Exit Initialization mode */
1076:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 2113              		.loc 1 1076 0
 2114 0b7c 7B68     		ldr	r3, [r7, #4]
 2115 0b7e 1B68     		ldr	r3, [r3]
 2116 0b80 7A68     		ldr	r2, [r7, #4]
 2117 0b82 1268     		ldr	r2, [r2]
 2118 0b84 D268     		ldr	r2, [r2, #12]
 2119 0b86 22F08002 		bic	r2, r2, #128
 2120 0b8a DA60     		str	r2, [r3, #12]
1077:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   } 
1078:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** 
1079:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Enable the write protection for RTC registers */
1080:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 2121              		.loc 1 1080 0
 2122 0b8c 7B68     		ldr	r3, [r7, #4]
 2123 0b8e 1B68     		ldr	r3, [r3]
 2124 0b90 FF22     		movs	r2, #255
 2125 0b92 5A62     		str	r2, [r3, #36]
1081:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
1082:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Change state */
1083:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   hrtc->State = HAL_RTC_STATE_READY; 
 2126              		.loc 1 1083 0
 2127 0b94 7B68     		ldr	r3, [r7, #4]
 2128 0b96 0122     		movs	r2, #1
 2129 0b98 5A77     		strb	r2, [r3, #29]
1084:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
1085:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Process Unlocked */ 
1086:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   __HAL_UNLOCK(hrtc);
 2130              		.loc 1 1086 0
 2131 0b9a 7B68     		ldr	r3, [r7, #4]
 2132 0b9c 0022     		movs	r2, #0
 2133 0b9e 1A77     		strb	r2, [r3, #28]
1087:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
1088:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   return HAL_OK;
 2134              		.loc 1 1088 0
 2135 0ba0 0023     		movs	r3, #0
 2136              	.L69:
1089:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** }
 2137              		.loc 1 1089 0
 2138 0ba2 1846     		mov	r0, r3
 2139 0ba4 0837     		adds	r7, r7, #8
 2140 0ba6 BD46     		mov	sp, r7
 2141              		@ sp needed
 2142 0ba8 80BD     		pop	{r7, pc}
 2143              		.cfi_endproc
 2144              	.LFE77:
 2146 0baa 00BF     		.align	2
 2147              		.global	HAL_RTCEx_SetCalibrationOutPut
 2148              		.thumb
 2149              		.thumb_func
 2151              	HAL_RTCEx_SetCalibrationOutPut:
 2152              	.LFB78:
1090:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** 
1091:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** /**
1092:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @brief  Configure the Calibration Pinout (RTC_CALIB).
1093:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @param  hrtc : RTC handle    
1094:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @retval HAL status
1095:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   */
1096:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef* hrtc)
1097:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** {
 2153              		.loc 1 1097 0
 2154              		.cfi_startproc
 2155              		@ args = 0, pretend = 0, frame = 8
 2156              		@ frame_needed = 1, uses_anonymous_args = 0
 2157              		@ link register save eliminated.
 2158 0bac 80B4     		push	{r7}
 2159              		.cfi_def_cfa_offset 4
 2160              		.cfi_offset 7, -4
 2161 0bae 83B0     		sub	sp, sp, #12
 2162              		.cfi_def_cfa_offset 16
 2163 0bb0 00AF     		add	r7, sp, #0
 2164              		.cfi_def_cfa_register 7
 2165 0bb2 7860     		str	r0, [r7, #4]
1098:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Process Locked */ 
1099:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   __HAL_LOCK(hrtc);
 2166              		.loc 1 1099 0
 2167 0bb4 7B68     		ldr	r3, [r7, #4]
 2168 0bb6 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 2169 0bb8 012B     		cmp	r3, #1
 2170 0bba 01D1     		bne	.L72
 2171              		.loc 1 1099 0 is_stmt 0 discriminator 1
 2172 0bbc 0223     		movs	r3, #2
 2173 0bbe 20E0     		b	.L73
 2174              	.L72:
 2175              		.loc 1 1099 0 discriminator 2
 2176 0bc0 7B68     		ldr	r3, [r7, #4]
 2177 0bc2 0122     		movs	r2, #1
 2178 0bc4 1A77     		strb	r2, [r3, #28]
1100:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
1101:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 2179              		.loc 1 1101 0 is_stmt 1 discriminator 2
 2180 0bc6 7B68     		ldr	r3, [r7, #4]
 2181 0bc8 0222     		movs	r2, #2
 2182 0bca 5A77     		strb	r2, [r3, #29]
1102:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** 
1103:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Disable the write protection for RTC registers */
1104:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 2183              		.loc 1 1104 0 discriminator 2
 2184 0bcc 7B68     		ldr	r3, [r7, #4]
 2185 0bce 1B68     		ldr	r3, [r3]
 2186 0bd0 CA22     		movs	r2, #202
 2187 0bd2 5A62     		str	r2, [r3, #36]
 2188 0bd4 7B68     		ldr	r3, [r7, #4]
 2189 0bd6 1B68     		ldr	r3, [r3]
 2190 0bd8 5322     		movs	r2, #83
 2191 0bda 5A62     		str	r2, [r3, #36]
1105:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
1106:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 2192              		.loc 1 1106 0 discriminator 2
 2193 0bdc 7B68     		ldr	r3, [r7, #4]
 2194 0bde 1B68     		ldr	r3, [r3]
 2195 0be0 7A68     		ldr	r2, [r7, #4]
 2196 0be2 1268     		ldr	r2, [r2]
 2197 0be4 9268     		ldr	r2, [r2, #8]
 2198 0be6 42F40002 		orr	r2, r2, #8388608
 2199 0bea 9A60     		str	r2, [r3, #8]
1107:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
1108:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Enable the write protection for RTC registers */
1109:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 2200              		.loc 1 1109 0 discriminator 2
 2201 0bec 7B68     		ldr	r3, [r7, #4]
 2202 0bee 1B68     		ldr	r3, [r3]
 2203 0bf0 FF22     		movs	r2, #255
 2204 0bf2 5A62     		str	r2, [r3, #36]
1110:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
1111:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Change RTC state */
1112:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   hrtc->State = HAL_RTC_STATE_READY; 
 2205              		.loc 1 1112 0 discriminator 2
 2206 0bf4 7B68     		ldr	r3, [r7, #4]
 2207 0bf6 0122     		movs	r2, #1
 2208 0bf8 5A77     		strb	r2, [r3, #29]
1113:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
1114:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Process Unlocked */ 
1115:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   __HAL_UNLOCK(hrtc);
 2209              		.loc 1 1115 0 discriminator 2
 2210 0bfa 7B68     		ldr	r3, [r7, #4]
 2211 0bfc 0022     		movs	r2, #0
 2212 0bfe 1A77     		strb	r2, [r3, #28]
1116:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
1117:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   return HAL_OK;
 2213              		.loc 1 1117 0 discriminator 2
 2214 0c00 0023     		movs	r3, #0
 2215              	.L73:
1118:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** }
 2216              		.loc 1 1118 0
 2217 0c02 1846     		mov	r0, r3
 2218 0c04 0C37     		adds	r7, r7, #12
 2219 0c06 BD46     		mov	sp, r7
 2220              		@ sp needed
 2221 0c08 5DF8047B 		ldr	r7, [sp], #4
 2222 0c0c 7047     		bx	lr
 2223              		.cfi_endproc
 2224              	.LFE78:
 2226 0c0e 00BF     		.align	2
 2227              		.global	HAL_RTCEx_DeactivateCalibrationOutPut
 2228              		.thumb
 2229              		.thumb_func
 2231              	HAL_RTCEx_DeactivateCalibrationOutPut:
 2232              	.LFB79:
1119:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** 
1120:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** /**
1121:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @brief  Deactivates the Calibration Pinout (RTC_CALIB) Selection (1Hz or 512Hz).
1122:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @param  hrtc: RTC handle    
1123:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @retval HAL status
1124:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   */
1125:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** HAL_StatusTypeDef HAL_RTCEx_DeactivateCalibrationOutPut(RTC_HandleTypeDef* hrtc)
1126:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** {
 2233              		.loc 1 1126 0
 2234              		.cfi_startproc
 2235              		@ args = 0, pretend = 0, frame = 8
 2236              		@ frame_needed = 1, uses_anonymous_args = 0
 2237              		@ link register save eliminated.
 2238 0c10 80B4     		push	{r7}
 2239              		.cfi_def_cfa_offset 4
 2240              		.cfi_offset 7, -4
 2241 0c12 83B0     		sub	sp, sp, #12
 2242              		.cfi_def_cfa_offset 16
 2243 0c14 00AF     		add	r7, sp, #0
 2244              		.cfi_def_cfa_register 7
 2245 0c16 7860     		str	r0, [r7, #4]
1127:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Process Locked */ 
1128:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   __HAL_LOCK(hrtc);
 2246              		.loc 1 1128 0
 2247 0c18 7B68     		ldr	r3, [r7, #4]
 2248 0c1a 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 2249 0c1c 012B     		cmp	r3, #1
 2250 0c1e 01D1     		bne	.L75
 2251              		.loc 1 1128 0 is_stmt 0 discriminator 1
 2252 0c20 0223     		movs	r3, #2
 2253 0c22 20E0     		b	.L76
 2254              	.L75:
 2255              		.loc 1 1128 0 discriminator 2
 2256 0c24 7B68     		ldr	r3, [r7, #4]
 2257 0c26 0122     		movs	r2, #1
 2258 0c28 1A77     		strb	r2, [r3, #28]
1129:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
1130:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 2259              		.loc 1 1130 0 is_stmt 1 discriminator 2
 2260 0c2a 7B68     		ldr	r3, [r7, #4]
 2261 0c2c 0222     		movs	r2, #2
 2262 0c2e 5A77     		strb	r2, [r3, #29]
1131:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
1132:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Disable the write protection for RTC registers */
1133:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 2263              		.loc 1 1133 0 discriminator 2
 2264 0c30 7B68     		ldr	r3, [r7, #4]
 2265 0c32 1B68     		ldr	r3, [r3]
 2266 0c34 CA22     		movs	r2, #202
 2267 0c36 5A62     		str	r2, [r3, #36]
 2268 0c38 7B68     		ldr	r3, [r7, #4]
 2269 0c3a 1B68     		ldr	r3, [r3]
 2270 0c3c 5322     		movs	r2, #83
 2271 0c3e 5A62     		str	r2, [r3, #36]
1134:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
1135:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   __HAL_RTC_CALIBRATION_OUTPUT_DISABLE(hrtc);
 2272              		.loc 1 1135 0 discriminator 2
 2273 0c40 7B68     		ldr	r3, [r7, #4]
 2274 0c42 1B68     		ldr	r3, [r3]
 2275 0c44 7A68     		ldr	r2, [r7, #4]
 2276 0c46 1268     		ldr	r2, [r2]
 2277 0c48 9268     		ldr	r2, [r2, #8]
 2278 0c4a 22F40002 		bic	r2, r2, #8388608
 2279 0c4e 9A60     		str	r2, [r3, #8]
1136:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     
1137:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Enable the write protection for RTC registers */
1138:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 2280              		.loc 1 1138 0 discriminator 2
 2281 0c50 7B68     		ldr	r3, [r7, #4]
 2282 0c52 1B68     		ldr	r3, [r3]
 2283 0c54 FF22     		movs	r2, #255
 2284 0c56 5A62     		str	r2, [r3, #36]
1139:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
1140:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Change RTC state */
1141:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   hrtc->State = HAL_RTC_STATE_READY; 
 2285              		.loc 1 1141 0 discriminator 2
 2286 0c58 7B68     		ldr	r3, [r7, #4]
 2287 0c5a 0122     		movs	r2, #1
 2288 0c5c 5A77     		strb	r2, [r3, #29]
1142:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
1143:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Process Unlocked */ 
1144:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   __HAL_UNLOCK(hrtc);
 2289              		.loc 1 1144 0 discriminator 2
 2290 0c5e 7B68     		ldr	r3, [r7, #4]
 2291 0c60 0022     		movs	r2, #0
 2292 0c62 1A77     		strb	r2, [r3, #28]
1145:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
1146:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   return HAL_OK;
 2293              		.loc 1 1146 0 discriminator 2
 2294 0c64 0023     		movs	r3, #0
 2295              	.L76:
1147:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** }
 2296              		.loc 1 1147 0
 2297 0c66 1846     		mov	r0, r3
 2298 0c68 0C37     		adds	r7, r7, #12
 2299 0c6a BD46     		mov	sp, r7
 2300              		@ sp needed
 2301 0c6c 5DF8047B 		ldr	r7, [sp], #4
 2302 0c70 7047     		bx	lr
 2303              		.cfi_endproc
 2304              	.LFE79:
 2306 0c72 00BF     		.align	2
 2307              		.global	HAL_RTCEx_SetRefClock
 2308              		.thumb
 2309              		.thumb_func
 2311              	HAL_RTCEx_SetRefClock:
 2312              	.LFB80:
1148:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** 
1149:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** /**
1150:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @brief  Enables the RTC reference clock detection.
1151:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @param  hrtc: RTC handle    
1152:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @retval HAL status
1153:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   */
1154:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** HAL_StatusTypeDef HAL_RTCEx_SetRefClock(RTC_HandleTypeDef* hrtc)
1155:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** {
 2313              		.loc 1 1155 0
 2314              		.cfi_startproc
 2315              		@ args = 0, pretend = 0, frame = 8
 2316              		@ frame_needed = 1, uses_anonymous_args = 0
 2317 0c74 80B5     		push	{r7, lr}
 2318              		.cfi_def_cfa_offset 8
 2319              		.cfi_offset 7, -8
 2320              		.cfi_offset 14, -4
 2321 0c76 82B0     		sub	sp, sp, #8
 2322              		.cfi_def_cfa_offset 16
 2323 0c78 00AF     		add	r7, sp, #0
 2324              		.cfi_def_cfa_register 7
 2325 0c7a 7860     		str	r0, [r7, #4]
1156:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Process Locked */ 
1157:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   __HAL_LOCK(hrtc);
 2326              		.loc 1 1157 0
 2327 0c7c 7B68     		ldr	r3, [r7, #4]
 2328 0c7e 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 2329 0c80 012B     		cmp	r3, #1
 2330 0c82 01D1     		bne	.L78
 2331              		.loc 1 1157 0 is_stmt 0 discriminator 1
 2332 0c84 0223     		movs	r3, #2
 2333 0c86 3AE0     		b	.L79
 2334              	.L78:
 2335              		.loc 1 1157 0 discriminator 2
 2336 0c88 7B68     		ldr	r3, [r7, #4]
 2337 0c8a 0122     		movs	r2, #1
 2338 0c8c 1A77     		strb	r2, [r3, #28]
1158:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
1159:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 2339              		.loc 1 1159 0 is_stmt 1 discriminator 2
 2340 0c8e 7B68     		ldr	r3, [r7, #4]
 2341 0c90 0222     		movs	r2, #2
 2342 0c92 5A77     		strb	r2, [r3, #29]
1160:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
1161:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Disable the write protection for RTC registers */
1162:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 2343              		.loc 1 1162 0 discriminator 2
 2344 0c94 7B68     		ldr	r3, [r7, #4]
 2345 0c96 1B68     		ldr	r3, [r3]
 2346 0c98 CA22     		movs	r2, #202
 2347 0c9a 5A62     		str	r2, [r3, #36]
 2348 0c9c 7B68     		ldr	r3, [r7, #4]
 2349 0c9e 1B68     		ldr	r3, [r3]
 2350 0ca0 5322     		movs	r2, #83
 2351 0ca2 5A62     		str	r2, [r3, #36]
1163:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
1164:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Set Initialization mode */
1165:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   if(RTC_EnterInitMode(hrtc) != HAL_OK)
 2352              		.loc 1 1165 0 discriminator 2
 2353 0ca4 7868     		ldr	r0, [r7, #4]
 2354 0ca6 FFF7FEFF 		bl	RTC_EnterInitMode
 2355 0caa 0346     		mov	r3, r0
 2356 0cac 002B     		cmp	r3, #0
 2357 0cae 0BD0     		beq	.L80
1166:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   {
1167:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     /* Enable the write protection for RTC registers */
1168:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 2358              		.loc 1 1168 0
 2359 0cb0 7B68     		ldr	r3, [r7, #4]
 2360 0cb2 1B68     		ldr	r3, [r3]
 2361 0cb4 FF22     		movs	r2, #255
 2362 0cb6 5A62     		str	r2, [r3, #36]
1169:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     
1170:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     /* Set RTC state*/
1171:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     hrtc->State = HAL_RTC_STATE_ERROR;
 2363              		.loc 1 1171 0
 2364 0cb8 7B68     		ldr	r3, [r7, #4]
 2365 0cba 0422     		movs	r2, #4
 2366 0cbc 5A77     		strb	r2, [r3, #29]
1172:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     
1173:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     /* Process Unlocked */ 
1174:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     __HAL_UNLOCK(hrtc);
 2367              		.loc 1 1174 0
 2368 0cbe 7B68     		ldr	r3, [r7, #4]
 2369 0cc0 0022     		movs	r2, #0
 2370 0cc2 1A77     		strb	r2, [r3, #28]
1175:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     
1176:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     return HAL_ERROR;
 2371              		.loc 1 1176 0
 2372 0cc4 0123     		movs	r3, #1
 2373 0cc6 1AE0     		b	.L79
 2374              	.L80:
1177:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   } 
1178:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   else
1179:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   {
1180:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     __HAL_RTC_CLOCKREF_DETECTION_ENABLE(hrtc);
 2375              		.loc 1 1180 0
 2376 0cc8 7B68     		ldr	r3, [r7, #4]
 2377 0cca 1B68     		ldr	r3, [r3]
 2378 0ccc 7A68     		ldr	r2, [r7, #4]
 2379 0cce 1268     		ldr	r2, [r2]
 2380 0cd0 9268     		ldr	r2, [r2, #8]
 2381 0cd2 42F01002 		orr	r2, r2, #16
 2382 0cd6 9A60     		str	r2, [r3, #8]
1181:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** 
1182:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     /* Exit Initialization mode */
1183:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 2383              		.loc 1 1183 0
 2384 0cd8 7B68     		ldr	r3, [r7, #4]
 2385 0cda 1B68     		ldr	r3, [r3]
 2386 0cdc 7A68     		ldr	r2, [r7, #4]
 2387 0cde 1268     		ldr	r2, [r2]
 2388 0ce0 D268     		ldr	r2, [r2, #12]
 2389 0ce2 22F08002 		bic	r2, r2, #128
 2390 0ce6 DA60     		str	r2, [r3, #12]
1184:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   }
1185:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
1186:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Enable the write protection for RTC registers */
1187:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 2391              		.loc 1 1187 0
 2392 0ce8 7B68     		ldr	r3, [r7, #4]
 2393 0cea 1B68     		ldr	r3, [r3]
 2394 0cec FF22     		movs	r2, #255
 2395 0cee 5A62     		str	r2, [r3, #36]
1188:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
1189:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****    /* Change RTC state */
1190:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   hrtc->State = HAL_RTC_STATE_READY; 
 2396              		.loc 1 1190 0
 2397 0cf0 7B68     		ldr	r3, [r7, #4]
 2398 0cf2 0122     		movs	r2, #1
 2399 0cf4 5A77     		strb	r2, [r3, #29]
1191:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
1192:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Process Unlocked */ 
1193:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   __HAL_UNLOCK(hrtc);
 2400              		.loc 1 1193 0
 2401 0cf6 7B68     		ldr	r3, [r7, #4]
 2402 0cf8 0022     		movs	r2, #0
 2403 0cfa 1A77     		strb	r2, [r3, #28]
1194:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
1195:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   return HAL_OK;
 2404              		.loc 1 1195 0
 2405 0cfc 0023     		movs	r3, #0
 2406              	.L79:
1196:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** }
 2407              		.loc 1 1196 0
 2408 0cfe 1846     		mov	r0, r3
 2409 0d00 0837     		adds	r7, r7, #8
 2410 0d02 BD46     		mov	sp, r7
 2411              		@ sp needed
 2412 0d04 80BD     		pop	{r7, pc}
 2413              		.cfi_endproc
 2414              	.LFE80:
 2416 0d06 00BF     		.align	2
 2417              		.global	HAL_RTCEx_DeactivateRefClock
 2418              		.thumb
 2419              		.thumb_func
 2421              	HAL_RTCEx_DeactivateRefClock:
 2422              	.LFB81:
1197:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** 
1198:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** /**
1199:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @brief  Disable the RTC reference clock detection.
1200:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @param  hrtc: RTC handle    
1201:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @retval HAL status
1202:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   */
1203:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** HAL_StatusTypeDef HAL_RTCEx_DeactivateRefClock(RTC_HandleTypeDef* hrtc)
1204:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** { 
 2423              		.loc 1 1204 0
 2424              		.cfi_startproc
 2425              		@ args = 0, pretend = 0, frame = 8
 2426              		@ frame_needed = 1, uses_anonymous_args = 0
 2427 0d08 80B5     		push	{r7, lr}
 2428              		.cfi_def_cfa_offset 8
 2429              		.cfi_offset 7, -8
 2430              		.cfi_offset 14, -4
 2431 0d0a 82B0     		sub	sp, sp, #8
 2432              		.cfi_def_cfa_offset 16
 2433 0d0c 00AF     		add	r7, sp, #0
 2434              		.cfi_def_cfa_register 7
 2435 0d0e 7860     		str	r0, [r7, #4]
1205:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Process Locked */ 
1206:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   __HAL_LOCK(hrtc);
 2436              		.loc 1 1206 0
 2437 0d10 7B68     		ldr	r3, [r7, #4]
 2438 0d12 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 2439 0d14 012B     		cmp	r3, #1
 2440 0d16 01D1     		bne	.L82
 2441              		.loc 1 1206 0 is_stmt 0 discriminator 1
 2442 0d18 0223     		movs	r3, #2
 2443 0d1a 3AE0     		b	.L83
 2444              	.L82:
 2445              		.loc 1 1206 0 discriminator 2
 2446 0d1c 7B68     		ldr	r3, [r7, #4]
 2447 0d1e 0122     		movs	r2, #1
 2448 0d20 1A77     		strb	r2, [r3, #28]
1207:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
1208:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 2449              		.loc 1 1208 0 is_stmt 1 discriminator 2
 2450 0d22 7B68     		ldr	r3, [r7, #4]
 2451 0d24 0222     		movs	r2, #2
 2452 0d26 5A77     		strb	r2, [r3, #29]
1209:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
1210:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Disable the write protection for RTC registers */
1211:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 2453              		.loc 1 1211 0 discriminator 2
 2454 0d28 7B68     		ldr	r3, [r7, #4]
 2455 0d2a 1B68     		ldr	r3, [r3]
 2456 0d2c CA22     		movs	r2, #202
 2457 0d2e 5A62     		str	r2, [r3, #36]
 2458 0d30 7B68     		ldr	r3, [r7, #4]
 2459 0d32 1B68     		ldr	r3, [r3]
 2460 0d34 5322     		movs	r2, #83
 2461 0d36 5A62     		str	r2, [r3, #36]
1212:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
1213:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Set Initialization mode */
1214:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   if(RTC_EnterInitMode(hrtc) != HAL_OK)
 2462              		.loc 1 1214 0 discriminator 2
 2463 0d38 7868     		ldr	r0, [r7, #4]
 2464 0d3a FFF7FEFF 		bl	RTC_EnterInitMode
 2465 0d3e 0346     		mov	r3, r0
 2466 0d40 002B     		cmp	r3, #0
 2467 0d42 0BD0     		beq	.L84
1215:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   {
1216:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     /* Enable the write protection for RTC registers */
1217:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 2468              		.loc 1 1217 0
 2469 0d44 7B68     		ldr	r3, [r7, #4]
 2470 0d46 1B68     		ldr	r3, [r3]
 2471 0d48 FF22     		movs	r2, #255
 2472 0d4a 5A62     		str	r2, [r3, #36]
1218:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     
1219:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     /* Set RTC state*/
1220:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     hrtc->State = HAL_RTC_STATE_ERROR;
 2473              		.loc 1 1220 0
 2474 0d4c 7B68     		ldr	r3, [r7, #4]
 2475 0d4e 0422     		movs	r2, #4
 2476 0d50 5A77     		strb	r2, [r3, #29]
1221:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     
1222:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     /* Process Unlocked */ 
1223:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     __HAL_UNLOCK(hrtc);
 2477              		.loc 1 1223 0
 2478 0d52 7B68     		ldr	r3, [r7, #4]
 2479 0d54 0022     		movs	r2, #0
 2480 0d56 1A77     		strb	r2, [r3, #28]
1224:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     
1225:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     return HAL_ERROR;
 2481              		.loc 1 1225 0
 2482 0d58 0123     		movs	r3, #1
 2483 0d5a 1AE0     		b	.L83
 2484              	.L84:
1226:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   } 
1227:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   else
1228:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   {
1229:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     __HAL_RTC_CLOCKREF_DETECTION_DISABLE(hrtc);
 2485              		.loc 1 1229 0
 2486 0d5c 7B68     		ldr	r3, [r7, #4]
 2487 0d5e 1B68     		ldr	r3, [r3]
 2488 0d60 7A68     		ldr	r2, [r7, #4]
 2489 0d62 1268     		ldr	r2, [r2]
 2490 0d64 9268     		ldr	r2, [r2, #8]
 2491 0d66 22F01002 		bic	r2, r2, #16
 2492 0d6a 9A60     		str	r2, [r3, #8]
1230:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     
1231:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     /* Exit Initialization mode */
1232:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 2493              		.loc 1 1232 0
 2494 0d6c 7B68     		ldr	r3, [r7, #4]
 2495 0d6e 1B68     		ldr	r3, [r3]
 2496 0d70 7A68     		ldr	r2, [r7, #4]
 2497 0d72 1268     		ldr	r2, [r2]
 2498 0d74 D268     		ldr	r2, [r2, #12]
 2499 0d76 22F08002 		bic	r2, r2, #128
 2500 0d7a DA60     		str	r2, [r3, #12]
1233:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   }
1234:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
1235:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Enable the write protection for RTC registers */
1236:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 2501              		.loc 1 1236 0
 2502 0d7c 7B68     		ldr	r3, [r7, #4]
 2503 0d7e 1B68     		ldr	r3, [r3]
 2504 0d80 FF22     		movs	r2, #255
 2505 0d82 5A62     		str	r2, [r3, #36]
1237:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
1238:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Change RTC state */
1239:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   hrtc->State = HAL_RTC_STATE_READY; 
 2506              		.loc 1 1239 0
 2507 0d84 7B68     		ldr	r3, [r7, #4]
 2508 0d86 0122     		movs	r2, #1
 2509 0d88 5A77     		strb	r2, [r3, #29]
1240:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
1241:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Process Unlocked */ 
1242:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   __HAL_UNLOCK(hrtc);
 2510              		.loc 1 1242 0
 2511 0d8a 7B68     		ldr	r3, [r7, #4]
 2512 0d8c 0022     		movs	r2, #0
 2513 0d8e 1A77     		strb	r2, [r3, #28]
1243:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
1244:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   return HAL_OK;
 2514              		.loc 1 1244 0
 2515 0d90 0023     		movs	r3, #0
 2516              	.L83:
1245:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** }
 2517              		.loc 1 1245 0
 2518 0d92 1846     		mov	r0, r3
 2519 0d94 0837     		adds	r7, r7, #8
 2520 0d96 BD46     		mov	sp, r7
 2521              		@ sp needed
 2522 0d98 80BD     		pop	{r7, pc}
 2523              		.cfi_endproc
 2524              	.LFE81:
 2526 0d9a 00BF     		.align	2
 2527              		.weak	HAL_RTCEx_AlarmBEventCallback
 2528              		.thumb
 2529              		.thumb_func
 2531              	HAL_RTCEx_AlarmBEventCallback:
 2532              	.LFB82:
1246:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** 
1247:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** /**
1248:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @}
1249:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   */
1250:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** 
1251:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /** @defgroup RTCEx_Group4 Extended features functions 
1252:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****  *  @brief    Extended features functions  
1253:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****  *
1254:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** @verbatim   
1255:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****  ===============================================================================
1256:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****                  ##### Extended features functions #####
1257:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****  ===============================================================================  
1258:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     [..]  This section provides functions allowing to:
1259:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****       (+) RTC Alram B callback
1260:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****       (+) RTC Poll for Alarm B request
1261:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****                
1262:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** @endverbatim
1263:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @{
1264:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   */
1265:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** 
1266:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** /**
1267:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @brief  Alarm B callback.
1268:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @param  hrtc: RTC handle
1269:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @retval None
1270:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   */
1271:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** __weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
1272:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** {
 2533              		.loc 1 1272 0
 2534              		.cfi_startproc
 2535              		@ args = 0, pretend = 0, frame = 8
 2536              		@ frame_needed = 1, uses_anonymous_args = 0
 2537              		@ link register save eliminated.
 2538 0d9c 80B4     		push	{r7}
 2539              		.cfi_def_cfa_offset 4
 2540              		.cfi_offset 7, -4
 2541 0d9e 83B0     		sub	sp, sp, #12
 2542              		.cfi_def_cfa_offset 16
 2543 0da0 00AF     		add	r7, sp, #0
 2544              		.cfi_def_cfa_register 7
 2545 0da2 7860     		str	r0, [r7, #4]
1273:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1274:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****             the HAL_RTC_AlarmBEventCallback could be implemented in the user file
1275:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****    */
1276:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** }
 2546              		.loc 1 1276 0
 2547 0da4 0C37     		adds	r7, r7, #12
 2548 0da6 BD46     		mov	sp, r7
 2549              		@ sp needed
 2550 0da8 5DF8047B 		ldr	r7, [sp], #4
 2551 0dac 7047     		bx	lr
 2552              		.cfi_endproc
 2553              	.LFE82:
 2555 0dae 00BF     		.align	2
 2556              		.global	HAL_RTCEx_PollForAlarmBEvent
 2557              		.thumb
 2558              		.thumb_func
 2560              	HAL_RTCEx_PollForAlarmBEvent:
 2561              	.LFB83:
1277:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** 
1278:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** /**
1279:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @brief  This function handles AlarmB Polling request.
1280:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @param  hrtc: RTC handle
1281:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @param  Timeout: Timeout duration
1282:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   * @retval HAL status
1283:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   */
1284:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** HAL_StatusTypeDef HAL_RTCEx_PollForAlarmBEvent(RTC_HandleTypeDef *hrtc, uint32_t Timeout)
1285:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** {  
 2562              		.loc 1 1285 0
 2563              		.cfi_startproc
 2564              		@ args = 0, pretend = 0, frame = 16
 2565              		@ frame_needed = 1, uses_anonymous_args = 0
 2566 0db0 80B5     		push	{r7, lr}
 2567              		.cfi_def_cfa_offset 8
 2568              		.cfi_offset 7, -8
 2569              		.cfi_offset 14, -4
 2570 0db2 84B0     		sub	sp, sp, #16
 2571              		.cfi_def_cfa_offset 24
 2572 0db4 00AF     		add	r7, sp, #0
 2573              		.cfi_def_cfa_register 7
 2574 0db6 7860     		str	r0, [r7, #4]
 2575 0db8 3960     		str	r1, [r7]
1286:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   uint32_t timeout = 0; 
 2576              		.loc 1 1286 0
 2577 0dba 0023     		movs	r3, #0
 2578 0dbc FB60     		str	r3, [r7, #12]
1287:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** 
1288:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Get Timeout value */
1289:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   timeout = HAL_GetTick() + Timeout;   
 2579              		.loc 1 1289 0
 2580 0dbe FFF7FEFF 		bl	HAL_GetTick
 2581 0dc2 0246     		mov	r2, r0
 2582 0dc4 3B68     		ldr	r3, [r7]
 2583 0dc6 1344     		add	r3, r3, r2
 2584 0dc8 FB60     		str	r3, [r7, #12]
1290:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
1291:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) == RESET)
 2585              		.loc 1 1291 0
 2586 0dca 0EE0     		b	.L87
 2587              	.L89:
1292:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   {
1293:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     if(Timeout != HAL_MAX_DELAY)
 2588              		.loc 1 1293 0
 2589 0dcc 3B68     		ldr	r3, [r7]
 2590 0dce B3F1FF3F 		cmp	r3, #-1
 2591 0dd2 0AD0     		beq	.L87
1294:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     {
1295:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****       if(HAL_GetTick() >= timeout)
 2592              		.loc 1 1295 0
 2593 0dd4 FFF7FEFF 		bl	HAL_GetTick
 2594 0dd8 0246     		mov	r2, r0
 2595 0dda FB68     		ldr	r3, [r7, #12]
 2596 0ddc 9A42     		cmp	r2, r3
 2597 0dde 04D3     		bcc	.L87
1296:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****       {
1297:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
 2598              		.loc 1 1297 0
 2599 0de0 7B68     		ldr	r3, [r7, #4]
 2600 0de2 0322     		movs	r2, #3
 2601 0de4 5A77     		strb	r2, [r3, #29]
1298:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****         return HAL_TIMEOUT;
 2602              		.loc 1 1298 0
 2603 0de6 0323     		movs	r3, #3
 2604 0de8 13E0     		b	.L88
 2605              	.L87:
1291:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   {
 2606              		.loc 1 1291 0 discriminator 1
 2607 0dea 7B68     		ldr	r3, [r7, #4]
 2608 0dec 1B68     		ldr	r3, [r3]
 2609 0dee DB68     		ldr	r3, [r3, #12]
 2610 0df0 03F40073 		and	r3, r3, #512
 2611 0df4 002B     		cmp	r3, #0
 2612 0df6 E9D0     		beq	.L89
1299:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****       }
1300:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****     }
1301:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   }
1302:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
1303:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Clear the Alarm Flag */
1304:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 2613              		.loc 1 1304 0
 2614 0df8 7B68     		ldr	r3, [r7, #4]
 2615 0dfa 1B68     		ldr	r3, [r3]
 2616 0dfc 7A68     		ldr	r2, [r7, #4]
 2617 0dfe 1268     		ldr	r2, [r2]
 2618 0e00 D268     		ldr	r2, [r2, #12]
 2619 0e02 D2B2     		uxtb	r2, r2
 2620 0e04 62F42072 		orn	r2, r2, #640
 2621 0e08 DA60     		str	r2, [r3, #12]
1305:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
1306:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   /* Change RTC state */
1307:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   hrtc->State = HAL_RTC_STATE_READY; 
 2622              		.loc 1 1307 0
 2623 0e0a 7B68     		ldr	r3, [r7, #4]
 2624 0e0c 0122     		movs	r2, #1
 2625 0e0e 5A77     		strb	r2, [r3, #29]
1308:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   
1309:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c ****   return HAL_OK; 
 2626              		.loc 1 1309 0
 2627 0e10 0023     		movs	r3, #0
 2628              	.L88:
1310:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc_ex.c **** }
 2629              		.loc 1 1310 0
 2630 0e12 1846     		mov	r0, r3
 2631 0e14 1037     		adds	r7, r7, #16
 2632 0e16 BD46     		mov	sp, r7
 2633              		@ sp needed
 2634 0e18 80BD     		pop	{r7, pc}
 2635              		.cfi_endproc
 2636              	.LFE83:
 2638              	.Letext0:
 2639              		.file 2 "c:\\program files (x86)\\codesourcery\\arm-none-eabi\\include\\stdint.h"
 2640              		.file 3 "D:\\workspace\\console800480\\system/stm32f217xx.h"
 2641              		.file 4 "D:\\workspace\\console800480\\system/stm32f2xx.h"
 2642              		.file 5 "D:\\workspace\\console800480\\STM32F2xx_HAL_Driver\\Inc/stm32f2xx_hal_def.h"
 2643              		.file 6 "D:\\workspace\\console800480\\STM32F2xx_HAL_Driver\\Inc/stm32f2xx_hal_rtc.h"
 2644              		.file 7 "D:\\workspace\\console800480\\STM32F2xx_HAL_Driver\\Inc/stm32f2xx_hal_rtc_ex.h"
 2645              		.file 8 "D:\\workspace\\console800480\\system/core_cm3.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f2xx_hal_rtc_ex.c
C:\Users\sagok\AppData\Local\Temp\cc9GmSKg.s:18     .text:00000000 $t
C:\Users\sagok\AppData\Local\Temp\cc9GmSKg.s:23     .text:00000000 HAL_RTCEx_SetTimeStamp
C:\Users\sagok\AppData\Local\Temp\cc9GmSKg.s:143    .text:000000ac HAL_RTCEx_SetTimeStamp_IT
C:\Users\sagok\AppData\Local\Temp\cc9GmSKg.s:286    .text:00000198 HAL_RTCEx_DeactivateTimeStamp
C:\Users\sagok\AppData\Local\Temp\cc9GmSKg.s:381    .text:00000218 HAL_RTCEx_GetTimeStamp
C:\Users\sagok\AppData\Local\Temp\cc9GmSKg.s:555    .text:00000344 HAL_RTCEx_SetTamper
C:\Users\sagok\AppData\Local\Temp\cc9GmSKg.s:645    .text:000003bc HAL_RTCEx_SetTamper_IT
C:\Users\sagok\AppData\Local\Temp\cc9GmSKg.s:759    .text:00000474 HAL_RTCEx_DeactivateTamper
C:\Users\sagok\AppData\Local\Temp\cc9GmSKg.s:828    .text:000004c4 HAL_RTCEx_TamperTimeStampIRQHandler
C:\Users\sagok\AppData\Local\Temp\cc9GmSKg.s:919    .text:00000550 HAL_RTCEx_TimeStampEventCallback
C:\Users\sagok\AppData\Local\Temp\cc9GmSKg.s:948    .text:00000564 HAL_RTCEx_Tamper1EventCallback
C:\Users\sagok\AppData\Local\Temp\cc9GmSKg.s:977    .text:00000578 HAL_RTCEx_PollForTimeStampEvent
C:\Users\sagok\AppData\Local\Temp\cc9GmSKg.s:1075   .text:000005fc HAL_RTCEx_PollForTamper1Event
C:\Users\sagok\AppData\Local\Temp\cc9GmSKg.s:1158   .text:00000668 HAL_RTCEx_SetWakeUpTimer
C:\Users\sagok\AppData\Local\Temp\cc9GmSKg.s:1310   .text:00000748 HAL_RTCEx_SetWakeUpTimer_IT
C:\Users\sagok\AppData\Local\Temp\cc9GmSKg.s:1486   .text:00000868 HAL_RTCEx_DeactivateWakeUpTimer
C:\Users\sagok\AppData\Local\Temp\cc9GmSKg.s:1614   .text:0000091c HAL_RTCEx_GetWakeUpTimer
C:\Users\sagok\AppData\Local\Temp\cc9GmSKg.s:1649   .text:00000938 HAL_RTCEx_WakeUpTimerIRQHandler
C:\Users\sagok\AppData\Local\Temp\cc9GmSKg.s:1713   .text:00000990 HAL_RTCEx_WakeUpTimerEventCallback
C:\Users\sagok\AppData\Local\Temp\cc9GmSKg.s:1742   .text:000009a4 HAL_RTCEx_PollForWakeUpTimerEvent
C:\Users\sagok\AppData\Local\Temp\cc9GmSKg.s:1825   .text:00000a10 HAL_RTCEx_BKUPWrite
C:\Users\sagok\AppData\Local\Temp\cc9GmSKg.s:1874   .text:00000a44 HAL_RTCEx_BKUPRead
C:\Users\sagok\AppData\Local\Temp\cc9GmSKg.s:1922   .text:00000a74 HAL_RTCEx_SetCoarseCalib
C:\Users\sagok\AppData\Local\Temp\cc9GmSKg.s:2041   .text:00000b18 HAL_RTCEx_DeactivateCoarseCalib
C:\Users\sagok\AppData\Local\Temp\cc9GmSKg.s:2151   .text:00000bac HAL_RTCEx_SetCalibrationOutPut
C:\Users\sagok\AppData\Local\Temp\cc9GmSKg.s:2231   .text:00000c10 HAL_RTCEx_DeactivateCalibrationOutPut
C:\Users\sagok\AppData\Local\Temp\cc9GmSKg.s:2311   .text:00000c74 HAL_RTCEx_SetRefClock
C:\Users\sagok\AppData\Local\Temp\cc9GmSKg.s:2421   .text:00000d08 HAL_RTCEx_DeactivateRefClock
C:\Users\sagok\AppData\Local\Temp\cc9GmSKg.s:2531   .text:00000d9c HAL_RTCEx_AlarmBEventCallback
C:\Users\sagok\AppData\Local\Temp\cc9GmSKg.s:2560   .text:00000db0 HAL_RTCEx_PollForAlarmBEvent
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.7f551ac7fcad8b79b9df4bfdaa536673
                           .group:00000000 wm4.stm32f2xx_hal_conf.h.40.007126baefb9f966c36646edbf8040d2
                           .group:00000000 wm4.stm32f2xx.h.57.5ec1581efc43612c411d33a8686e9ec7
                           .group:00000000 wm4.stm32f217xx.h.52.9c940d76d00294b78837dc334c172fdd
                           .group:00000000 wm4.core_cm3.h.32.49180ccb4d36cabd2d7016d2a51d91ae
                           .group:00000000 wm4.newlib.h.8.384a112feabb3bef7b573ae48cde2e3b
                           .group:00000000 wm4.features.h.22.6a4ca7cd053637cc1d0db6c16f39b2d7
                           .group:00000000 wm4.config.h.183.aa62afef667fb61d15fa64c48beb2f14
                           .group:00000000 wm4._ansi.h.23.5644b60c990a4800b02a6e654e88f93a
                           .group:00000000 wm4.stdint.h.20.54ad762faa59e3c05491630641c8d8bf
                           .group:00000000 wm4.core_cmInstr.h.25.f50f886f2edf670cf199b35fd96f5c91
                           .group:00000000 wm4.core_cm3.h.130.63ab2348a6eed0fdb318040d970b676c
                           .group:00000000 wm4.stm32f217xx.h.978.a5c681952b2f704a0e7f2ba21d08adf5
                           .group:00000000 wm4.stm32f2xx.h.142.bc2155a1f7498bab16371e38413a9e41
                           .group:00000000 wm4.stm32f2xx_hal_def.h.74.8ad2dc8aa82c4fd02e5aeaae592641ba
                           .group:00000000 wm4.stm32f2xx_hal_rcc.h.142.ec0f91cc6576a6acebd17e6dd85829ae
                           .group:00000000 wm4.stm32f2xx_hal_rcc_ex.h.40.0829033e864455c6bdd0db01f8ba5a50
                           .group:00000000 wm4.stm32f2xx_hal_gpio.h.40.ba64e0bb94d9a68835f80159f39a86f1
                           .group:00000000 wm4.stm32f2xx_hal_gpio_ex.h.40.24e547fd402281923f446b510381083f
                           .group:00000000 wm4.stm32f2xx_hal_dma.h.40.5d9732ace2a21a4526ce8f0c52428fff
                           .group:00000000 wm4.stm32f2xx_hal_cortex.h.40.e10263d2ec5d4fa79b4180ce1a38aff1
                           .group:00000000 wm4.stm32f2xx_hal_adc.h.40.89ac8b78113cac4cf63847587daabac9
                           .group:00000000 wm4.stm32f2xx_hal_adc_ex.h.40.7de68ed256ef25526ee31cc017f2c291
                           .group:00000000 wm4.stm32f2xx_hal_flash.h.40.c3171719ce015e9cff20c795e44e886d
                           .group:00000000 wm4.stm32f2xx_hal_flash_ex.h.40.7389508bd24a0aeb077bde0c9fb651eb
                           .group:00000000 wm4.stm32f2xx_ll_fsmc.h.40.c1c32f2e1862f4dd342bd9b80fb895bb
                           .group:00000000 wm4.stm32f2xx_hal_pwr.h.40.812df32e5c31b609a128e9db0eb4cbd0
                           .group:00000000 wm4.stm32f2xx_hal_rtc.h.40.850fda5fe2cce8797446913dee18382f
                           .group:00000000 wm4.stm32f2xx_hal_rtc_ex.h.40.f3e0c408e3bf4e8a0352d7ec9a18a822
                           .group:00000000 wm4.stm32f2xx_ll_sdmmc.h.40.3719ab487c4b77401c572f459adf6eb7
                           .group:00000000 wm4.stm32f2xx_hal_sd.h.58.760215394dcc316161a6482c0af9b866
                           .group:00000000 wm4.stm32f2xx_hal_spi.h.40.7984243dbaba8b21c6392998a47e6987
                           .group:00000000 wm4.stm32f2xx_hal_tim.h.40.d79172f25d0e9a15dc346aba8515bdd6
                           .group:00000000 wm4.stm32f2xx_hal_tim_ex.h.40.361f280a7a3f60b4b238bb99ca728d83
                           .group:00000000 wm4.stm32f2xx_hal_uart.h.40.d74def561ae6f78f40f477c8426ecbef
                           .group:00000000 wm4.stm32f2xx_ll_usb.h.40.9b0206a05bc6ce3bec1648b51f22cb81
                           .group:00000000 wm4.stm32f2xx_hal_pcd.h.99.11faba414c39e357b2f23364912d0605
                           .group:00000000 wm4.stm32f2xx_hal_hcd.h.40.44ee5e972983ae0139ddbacdc75c44ef
                           .group:00000000 wm4.stm32f2xx_hal.h.64.ed79ee83e52b151b3c365392b398f866

UNDEFINED SYMBOLS
RTC_Bcd2ToByte
HAL_GetTick
RTC_EnterInitMode
