   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f2xx_hal_rcc.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.align	2
  19              		.thumb
  20              		.thumb_func
  22              	NVIC_SetPriority:
  23              	.LFB46:
  24              		.file 1 "D:\\workspace\\console800480\\system/core_cm3.h"
   1:D:\workspace\console800480\system\core_cm3.h **** /**************************************************************************//**
   2:D:\workspace\console800480\system\core_cm3.h ****  * @file     core_cm3.h
   3:D:\workspace\console800480\system\core_cm3.h ****  * @brief    CMSIS Cortex-M3 Core Peripheral Access Layer Header File
   4:D:\workspace\console800480\system\core_cm3.h ****  * @version  V2.10
   5:D:\workspace\console800480\system\core_cm3.h ****  * @date     19. July 2011
   6:D:\workspace\console800480\system\core_cm3.h ****  *
   7:D:\workspace\console800480\system\core_cm3.h ****  * @note
   8:D:\workspace\console800480\system\core_cm3.h ****  * Copyright (C) 2009-2011 ARM Limited. All rights reserved.
   9:D:\workspace\console800480\system\core_cm3.h ****  *
  10:D:\workspace\console800480\system\core_cm3.h ****  * @par
  11:D:\workspace\console800480\system\core_cm3.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M
  12:D:\workspace\console800480\system\core_cm3.h ****  * processor based microcontrollers.  This file can be freely distributed
  13:D:\workspace\console800480\system\core_cm3.h ****  * within development tools that are supporting such ARM based processors.
  14:D:\workspace\console800480\system\core_cm3.h ****  *
  15:D:\workspace\console800480\system\core_cm3.h ****  * @par
  16:D:\workspace\console800480\system\core_cm3.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:D:\workspace\console800480\system\core_cm3.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:D:\workspace\console800480\system\core_cm3.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:D:\workspace\console800480\system\core_cm3.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:D:\workspace\console800480\system\core_cm3.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:D:\workspace\console800480\system\core_cm3.h ****  *
  22:D:\workspace\console800480\system\core_cm3.h ****  ******************************************************************************/
  23:D:\workspace\console800480\system\core_cm3.h **** #if defined ( __ICCARM__ )
  24:D:\workspace\console800480\system\core_cm3.h ****  #pragma system_include  /* treat file as system include file for MISRA check */
  25:D:\workspace\console800480\system\core_cm3.h **** #endif
  26:D:\workspace\console800480\system\core_cm3.h **** 
  27:D:\workspace\console800480\system\core_cm3.h **** #ifdef __cplusplus
  28:D:\workspace\console800480\system\core_cm3.h ****  extern "C" {
  29:D:\workspace\console800480\system\core_cm3.h **** #endif
  30:D:\workspace\console800480\system\core_cm3.h **** 
  31:D:\workspace\console800480\system\core_cm3.h **** #ifndef __CORE_CM3_H_GENERIC
  32:D:\workspace\console800480\system\core_cm3.h **** #define __CORE_CM3_H_GENERIC
  33:D:\workspace\console800480\system\core_cm3.h **** 
  34:D:\workspace\console800480\system\core_cm3.h **** 
  35:D:\workspace\console800480\system\core_cm3.h **** /** \mainpage CMSIS Cortex-M3
  36:D:\workspace\console800480\system\core_cm3.h **** 
  37:D:\workspace\console800480\system\core_cm3.h ****   This documentation describes the CMSIS Cortex-M Core Peripheral Access Layer.
  38:D:\workspace\console800480\system\core_cm3.h ****   It consists of:
  39:D:\workspace\console800480\system\core_cm3.h **** 
  40:D:\workspace\console800480\system\core_cm3.h ****      - Cortex-M Core Register Definitions
  41:D:\workspace\console800480\system\core_cm3.h ****      - Cortex-M functions
  42:D:\workspace\console800480\system\core_cm3.h ****      - Cortex-M instructions
  43:D:\workspace\console800480\system\core_cm3.h **** 
  44:D:\workspace\console800480\system\core_cm3.h ****   The CMSIS Cortex-M3 Core Peripheral Access Layer contains C and assembly functions that ease
  45:D:\workspace\console800480\system\core_cm3.h ****   access to the Cortex-M Core
  46:D:\workspace\console800480\system\core_cm3.h ****  */
  47:D:\workspace\console800480\system\core_cm3.h **** 
  48:D:\workspace\console800480\system\core_cm3.h **** /** \defgroup CMSIS_MISRA_Exceptions  CMSIS MISRA-C:2004 Compliance Exceptions
  49:D:\workspace\console800480\system\core_cm3.h ****   CMSIS violates following MISRA-C2004 Rules:
  50:D:\workspace\console800480\system\core_cm3.h ****   
  51:D:\workspace\console800480\system\core_cm3.h ****    - Violates MISRA 2004 Required Rule 8.5, object/function definition in header file.<br>
  52:D:\workspace\console800480\system\core_cm3.h ****      Function definitions in header files are used to allow 'inlining'. 
  53:D:\workspace\console800480\system\core_cm3.h **** 
  54:D:\workspace\console800480\system\core_cm3.h ****    - Violates MISRA 2004 Required Rule 18.4, declaration of union type or object of union type: '{.
  55:D:\workspace\console800480\system\core_cm3.h ****      Unions are used for effective representation of core registers.
  56:D:\workspace\console800480\system\core_cm3.h ****    
  57:D:\workspace\console800480\system\core_cm3.h ****    - Violates MISRA 2004 Advisory Rule 19.7, Function-like macro defined.<br>
  58:D:\workspace\console800480\system\core_cm3.h ****      Function-like macros are used to allow more efficient code. 
  59:D:\workspace\console800480\system\core_cm3.h **** 
  60:D:\workspace\console800480\system\core_cm3.h ****  */
  61:D:\workspace\console800480\system\core_cm3.h **** 
  62:D:\workspace\console800480\system\core_cm3.h **** 
  63:D:\workspace\console800480\system\core_cm3.h **** /*******************************************************************************
  64:D:\workspace\console800480\system\core_cm3.h ****  *                 CMSIS definitions
  65:D:\workspace\console800480\system\core_cm3.h ****  ******************************************************************************/
  66:D:\workspace\console800480\system\core_cm3.h **** /** \defgroup CMSIS_core_definitions CMSIS Core Definitions
  67:D:\workspace\console800480\system\core_cm3.h ****   This file defines all structures and symbols for CMSIS core:
  68:D:\workspace\console800480\system\core_cm3.h ****    - CMSIS version number
  69:D:\workspace\console800480\system\core_cm3.h ****    - Cortex-M core
  70:D:\workspace\console800480\system\core_cm3.h ****    - Cortex-M core Revision Number
  71:D:\workspace\console800480\system\core_cm3.h ****   @{
  72:D:\workspace\console800480\system\core_cm3.h ****  */
  73:D:\workspace\console800480\system\core_cm3.h **** 
  74:D:\workspace\console800480\system\core_cm3.h **** /*  CMSIS CM3 definitions */
  75:D:\workspace\console800480\system\core_cm3.h **** #define __CM3_CMSIS_VERSION_MAIN  (0x02)                                                       /*!<
  76:D:\workspace\console800480\system\core_cm3.h **** #define __CM3_CMSIS_VERSION_SUB   (0x10)                                                       /*!<
  77:D:\workspace\console800480\system\core_cm3.h **** #define __CM3_CMSIS_VERSION       ((__CM3_CMSIS_VERSION_MAIN << 16) | __CM3_CMSIS_VERSION_SUB) /*!<
  78:D:\workspace\console800480\system\core_cm3.h **** 
  79:D:\workspace\console800480\system\core_cm3.h **** #define __CORTEX_M                (0x03)                                                       /*!<
  80:D:\workspace\console800480\system\core_cm3.h **** 
  81:D:\workspace\console800480\system\core_cm3.h **** 
  82:D:\workspace\console800480\system\core_cm3.h **** #if   defined ( __CC_ARM )
  83:D:\workspace\console800480\system\core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  84:D:\workspace\console800480\system\core_cm3.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  85:D:\workspace\console800480\system\core_cm3.h **** 
  86:D:\workspace\console800480\system\core_cm3.h **** #elif defined ( __ICCARM__ )
  87:D:\workspace\console800480\system\core_cm3.h ****   #define __ASM           __asm                                       /*!< asm keyword for IAR Comp
  88:D:\workspace\console800480\system\core_cm3.h ****   #define __INLINE        inline                                      /*!< inline keyword for IAR C
  89:D:\workspace\console800480\system\core_cm3.h **** 
  90:D:\workspace\console800480\system\core_cm3.h **** #elif defined ( __GNUC__ )
  91:D:\workspace\console800480\system\core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  92:D:\workspace\console800480\system\core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  93:D:\workspace\console800480\system\core_cm3.h **** 
  94:D:\workspace\console800480\system\core_cm3.h **** #elif defined ( __TASKING__ )
  95:D:\workspace\console800480\system\core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
  96:D:\workspace\console800480\system\core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
  97:D:\workspace\console800480\system\core_cm3.h **** 
  98:D:\workspace\console800480\system\core_cm3.h **** #endif
  99:D:\workspace\console800480\system\core_cm3.h **** 
 100:D:\workspace\console800480\system\core_cm3.h **** /*!< __FPU_USED to be checked prior to making use of FPU specific registers and functions */
 101:D:\workspace\console800480\system\core_cm3.h **** #define __FPU_USED       0
 102:D:\workspace\console800480\system\core_cm3.h **** 
 103:D:\workspace\console800480\system\core_cm3.h **** #if defined ( __CC_ARM )
 104:D:\workspace\console800480\system\core_cm3.h ****   #if defined __TARGET_FPU_VFP
 105:D:\workspace\console800480\system\core_cm3.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 106:D:\workspace\console800480\system\core_cm3.h ****   #endif
 107:D:\workspace\console800480\system\core_cm3.h **** #elif defined ( __ICCARM__ )
 108:D:\workspace\console800480\system\core_cm3.h ****   #if defined __ARMVFP__
 109:D:\workspace\console800480\system\core_cm3.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 110:D:\workspace\console800480\system\core_cm3.h ****   #endif
 111:D:\workspace\console800480\system\core_cm3.h **** 
 112:D:\workspace\console800480\system\core_cm3.h **** #elif defined ( __GNUC__ )
 113:D:\workspace\console800480\system\core_cm3.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 114:D:\workspace\console800480\system\core_cm3.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 115:D:\workspace\console800480\system\core_cm3.h ****   #endif
 116:D:\workspace\console800480\system\core_cm3.h **** 
 117:D:\workspace\console800480\system\core_cm3.h **** #elif defined ( __TASKING__ )
 118:D:\workspace\console800480\system\core_cm3.h ****     /* add preprocessor checks */
 119:D:\workspace\console800480\system\core_cm3.h **** #endif
 120:D:\workspace\console800480\system\core_cm3.h **** 
 121:D:\workspace\console800480\system\core_cm3.h **** #include <stdint.h>                      /*!< standard types definitions                      */
 122:D:\workspace\console800480\system\core_cm3.h **** #include "core_cmInstr.h"                /*!< Core Instruction Access                         */
 123:D:\workspace\console800480\system\core_cm3.h **** #include "core_cmFunc.h"                 /*!< Core Function Access                            */
 124:D:\workspace\console800480\system\core_cm3.h **** 
 125:D:\workspace\console800480\system\core_cm3.h **** #endif /* __CORE_CM3_H_GENERIC */
 126:D:\workspace\console800480\system\core_cm3.h **** 
 127:D:\workspace\console800480\system\core_cm3.h **** #ifndef __CMSIS_GENERIC
 128:D:\workspace\console800480\system\core_cm3.h **** 
 129:D:\workspace\console800480\system\core_cm3.h **** #ifndef __CORE_CM3_H_DEPENDANT
 130:D:\workspace\console800480\system\core_cm3.h **** #define __CORE_CM3_H_DEPENDANT
 131:D:\workspace\console800480\system\core_cm3.h **** 
 132:D:\workspace\console800480\system\core_cm3.h **** /* check device defines and use defaults */
 133:D:\workspace\console800480\system\core_cm3.h **** #if defined __CHECK_DEVICE_DEFINES
 134:D:\workspace\console800480\system\core_cm3.h ****   #ifndef __CM3_REV
 135:D:\workspace\console800480\system\core_cm3.h ****     #define __CM3_REV               0x0200
 136:D:\workspace\console800480\system\core_cm3.h ****     #warning "__CM3_REV not defined in device header file; using default!"
 137:D:\workspace\console800480\system\core_cm3.h ****   #endif
 138:D:\workspace\console800480\system\core_cm3.h **** 
 139:D:\workspace\console800480\system\core_cm3.h ****   #ifndef __MPU_PRESENT
 140:D:\workspace\console800480\system\core_cm3.h ****     #define __MPU_PRESENT             0
 141:D:\workspace\console800480\system\core_cm3.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 142:D:\workspace\console800480\system\core_cm3.h ****   #endif
 143:D:\workspace\console800480\system\core_cm3.h **** 
 144:D:\workspace\console800480\system\core_cm3.h ****   #ifndef __NVIC_PRIO_BITS
 145:D:\workspace\console800480\system\core_cm3.h ****     #define __NVIC_PRIO_BITS          4
 146:D:\workspace\console800480\system\core_cm3.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 147:D:\workspace\console800480\system\core_cm3.h ****   #endif
 148:D:\workspace\console800480\system\core_cm3.h **** 
 149:D:\workspace\console800480\system\core_cm3.h ****   #ifndef __Vendor_SysTickConfig
 150:D:\workspace\console800480\system\core_cm3.h ****     #define __Vendor_SysTickConfig    0
 151:D:\workspace\console800480\system\core_cm3.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 152:D:\workspace\console800480\system\core_cm3.h ****   #endif
 153:D:\workspace\console800480\system\core_cm3.h **** #endif
 154:D:\workspace\console800480\system\core_cm3.h **** 
 155:D:\workspace\console800480\system\core_cm3.h **** /* IO definitions (access restrictions to peripheral registers) */
 156:D:\workspace\console800480\system\core_cm3.h **** #ifdef __cplusplus
 157:D:\workspace\console800480\system\core_cm3.h ****   #define   __I     volatile             /*!< defines 'read only' permissions                 */
 158:D:\workspace\console800480\system\core_cm3.h **** #else
 159:D:\workspace\console800480\system\core_cm3.h ****   #define   __I     volatile const       /*!< defines 'read only' permissions                 */
 160:D:\workspace\console800480\system\core_cm3.h **** #endif
 161:D:\workspace\console800480\system\core_cm3.h **** #define     __O     volatile             /*!< defines 'write only' permissions                */
 162:D:\workspace\console800480\system\core_cm3.h **** #define     __IO    volatile             /*!< defines 'read / write' permissions              */
 163:D:\workspace\console800480\system\core_cm3.h **** 
 164:D:\workspace\console800480\system\core_cm3.h **** /*@} end of group CMSIS_core_definitions */
 165:D:\workspace\console800480\system\core_cm3.h **** 
 166:D:\workspace\console800480\system\core_cm3.h **** 
 167:D:\workspace\console800480\system\core_cm3.h **** 
 168:D:\workspace\console800480\system\core_cm3.h **** /*******************************************************************************
 169:D:\workspace\console800480\system\core_cm3.h ****  *                 Register Abstraction
 170:D:\workspace\console800480\system\core_cm3.h ****  ******************************************************************************/
 171:D:\workspace\console800480\system\core_cm3.h **** /** \defgroup CMSIS_core_register CMSIS Core Register
 172:D:\workspace\console800480\system\core_cm3.h ****   Core Register contain:
 173:D:\workspace\console800480\system\core_cm3.h ****   - Core Register
 174:D:\workspace\console800480\system\core_cm3.h ****   - Core NVIC Register
 175:D:\workspace\console800480\system\core_cm3.h ****   - Core SCB Register
 176:D:\workspace\console800480\system\core_cm3.h ****   - Core SysTick Register
 177:D:\workspace\console800480\system\core_cm3.h ****   - Core Debug Register
 178:D:\workspace\console800480\system\core_cm3.h ****   - Core MPU Register
 179:D:\workspace\console800480\system\core_cm3.h **** */
 180:D:\workspace\console800480\system\core_cm3.h **** 
 181:D:\workspace\console800480\system\core_cm3.h **** /** \ingroup  CMSIS_core_register
 182:D:\workspace\console800480\system\core_cm3.h ****     \defgroup CMSIS_CORE CMSIS Core
 183:D:\workspace\console800480\system\core_cm3.h ****   Type definitions for the Cortex-M Core Registers
 184:D:\workspace\console800480\system\core_cm3.h ****   @{
 185:D:\workspace\console800480\system\core_cm3.h ****  */
 186:D:\workspace\console800480\system\core_cm3.h **** 
 187:D:\workspace\console800480\system\core_cm3.h **** /** \brief  Union type to access the Application Program Status Register (APSR).
 188:D:\workspace\console800480\system\core_cm3.h ****  */
 189:D:\workspace\console800480\system\core_cm3.h **** typedef union
 190:D:\workspace\console800480\system\core_cm3.h **** {
 191:D:\workspace\console800480\system\core_cm3.h ****   struct
 192:D:\workspace\console800480\system\core_cm3.h ****   {
 193:D:\workspace\console800480\system\core_cm3.h **** #if (__CORTEX_M != 0x04)
 194:D:\workspace\console800480\system\core_cm3.h ****     uint32_t _reserved0:27;              /*!< bit:  0..26  Reserved                           */
 195:D:\workspace\console800480\system\core_cm3.h **** #else
 196:D:\workspace\console800480\system\core_cm3.h ****     uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved                           */
 197:D:\workspace\console800480\system\core_cm3.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 198:D:\workspace\console800480\system\core_cm3.h ****     uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved                           */
 199:D:\workspace\console800480\system\core_cm3.h **** #endif
 200:D:\workspace\console800480\system\core_cm3.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 201:D:\workspace\console800480\system\core_cm3.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 202:D:\workspace\console800480\system\core_cm3.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 203:D:\workspace\console800480\system\core_cm3.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 204:D:\workspace\console800480\system\core_cm3.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 205:D:\workspace\console800480\system\core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 206:D:\workspace\console800480\system\core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 207:D:\workspace\console800480\system\core_cm3.h **** } APSR_Type;
 208:D:\workspace\console800480\system\core_cm3.h **** 
 209:D:\workspace\console800480\system\core_cm3.h **** 
 210:D:\workspace\console800480\system\core_cm3.h **** /** \brief  Union type to access the Interrupt Program Status Register (IPSR).
 211:D:\workspace\console800480\system\core_cm3.h ****  */
 212:D:\workspace\console800480\system\core_cm3.h **** typedef union
 213:D:\workspace\console800480\system\core_cm3.h **** {
 214:D:\workspace\console800480\system\core_cm3.h ****   struct
 215:D:\workspace\console800480\system\core_cm3.h ****   {
 216:D:\workspace\console800480\system\core_cm3.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 217:D:\workspace\console800480\system\core_cm3.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved                           */
 218:D:\workspace\console800480\system\core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 219:D:\workspace\console800480\system\core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 220:D:\workspace\console800480\system\core_cm3.h **** } IPSR_Type;
 221:D:\workspace\console800480\system\core_cm3.h **** 
 222:D:\workspace\console800480\system\core_cm3.h **** 
 223:D:\workspace\console800480\system\core_cm3.h **** /** \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 224:D:\workspace\console800480\system\core_cm3.h ****  */
 225:D:\workspace\console800480\system\core_cm3.h **** typedef union
 226:D:\workspace\console800480\system\core_cm3.h **** {
 227:D:\workspace\console800480\system\core_cm3.h ****   struct
 228:D:\workspace\console800480\system\core_cm3.h ****   {
 229:D:\workspace\console800480\system\core_cm3.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 230:D:\workspace\console800480\system\core_cm3.h **** #if (__CORTEX_M != 0x04)
 231:D:\workspace\console800480\system\core_cm3.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved                           */
 232:D:\workspace\console800480\system\core_cm3.h **** #else
 233:D:\workspace\console800480\system\core_cm3.h ****     uint32_t _reserved0:7;               /*!< bit:  9..15  Reserved                           */
 234:D:\workspace\console800480\system\core_cm3.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 235:D:\workspace\console800480\system\core_cm3.h ****     uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved                           */
 236:D:\workspace\console800480\system\core_cm3.h **** #endif
 237:D:\workspace\console800480\system\core_cm3.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0)          */
 238:D:\workspace\console800480\system\core_cm3.h ****     uint32_t IT:2;                       /*!< bit: 25..26  saved IT state   (read 0)          */
 239:D:\workspace\console800480\system\core_cm3.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 240:D:\workspace\console800480\system\core_cm3.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 241:D:\workspace\console800480\system\core_cm3.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 242:D:\workspace\console800480\system\core_cm3.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 243:D:\workspace\console800480\system\core_cm3.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 244:D:\workspace\console800480\system\core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 245:D:\workspace\console800480\system\core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 246:D:\workspace\console800480\system\core_cm3.h **** } xPSR_Type;
 247:D:\workspace\console800480\system\core_cm3.h **** 
 248:D:\workspace\console800480\system\core_cm3.h **** 
 249:D:\workspace\console800480\system\core_cm3.h **** /** \brief  Union type to access the Control Registers (CONTROL).
 250:D:\workspace\console800480\system\core_cm3.h ****  */
 251:D:\workspace\console800480\system\core_cm3.h **** typedef union
 252:D:\workspace\console800480\system\core_cm3.h **** {
 253:D:\workspace\console800480\system\core_cm3.h ****   struct
 254:D:\workspace\console800480\system\core_cm3.h ****   {
 255:D:\workspace\console800480\system\core_cm3.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 256:D:\workspace\console800480\system\core_cm3.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used                   */
 257:D:\workspace\console800480\system\core_cm3.h ****     uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag           */
 258:D:\workspace\console800480\system\core_cm3.h ****     uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved                           */
 259:D:\workspace\console800480\system\core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 260:D:\workspace\console800480\system\core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 261:D:\workspace\console800480\system\core_cm3.h **** } CONTROL_Type;
 262:D:\workspace\console800480\system\core_cm3.h **** 
 263:D:\workspace\console800480\system\core_cm3.h **** /*@} end of group CMSIS_CORE */
 264:D:\workspace\console800480\system\core_cm3.h **** 
 265:D:\workspace\console800480\system\core_cm3.h **** 
 266:D:\workspace\console800480\system\core_cm3.h **** /** \ingroup  CMSIS_core_register
 267:D:\workspace\console800480\system\core_cm3.h ****     \defgroup CMSIS_NVIC CMSIS NVIC
 268:D:\workspace\console800480\system\core_cm3.h ****   Type definitions for the Cortex-M NVIC Registers
 269:D:\workspace\console800480\system\core_cm3.h ****   @{
 270:D:\workspace\console800480\system\core_cm3.h ****  */
 271:D:\workspace\console800480\system\core_cm3.h **** 
 272:D:\workspace\console800480\system\core_cm3.h **** /** \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 273:D:\workspace\console800480\system\core_cm3.h ****  */
 274:D:\workspace\console800480\system\core_cm3.h **** typedef struct
 275:D:\workspace\console800480\system\core_cm3.h **** {
 276:D:\workspace\console800480\system\core_cm3.h ****   __IO uint32_t ISER[8];                 /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register   
 277:D:\workspace\console800480\system\core_cm3.h ****        uint32_t RESERVED0[24];
 278:D:\workspace\console800480\system\core_cm3.h ****   __IO uint32_t ICER[8];                 /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 279:D:\workspace\console800480\system\core_cm3.h ****        uint32_t RSERVED1[24];
 280:D:\workspace\console800480\system\core_cm3.h ****   __IO uint32_t ISPR[8];                 /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register  
 281:D:\workspace\console800480\system\core_cm3.h ****        uint32_t RESERVED2[24];
 282:D:\workspace\console800480\system\core_cm3.h ****   __IO uint32_t ICPR[8];                 /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 283:D:\workspace\console800480\system\core_cm3.h ****        uint32_t RESERVED3[24];
 284:D:\workspace\console800480\system\core_cm3.h ****   __IO uint32_t IABR[8];                 /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register   
 285:D:\workspace\console800480\system\core_cm3.h ****        uint32_t RESERVED4[56];
 286:D:\workspace\console800480\system\core_cm3.h ****   __IO uint8_t  IP[240];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 287:D:\workspace\console800480\system\core_cm3.h ****        uint32_t RESERVED5[644];
 288:D:\workspace\console800480\system\core_cm3.h ****   __O  uint32_t STIR;                    /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 289:D:\workspace\console800480\system\core_cm3.h **** }  NVIC_Type;
 290:D:\workspace\console800480\system\core_cm3.h **** 
 291:D:\workspace\console800480\system\core_cm3.h **** /* Software Triggered Interrupt Register Definitions */
 292:D:\workspace\console800480\system\core_cm3.h **** #define NVIC_STIR_INTID_Pos                 0                                          /*!< STIR: I
 293:D:\workspace\console800480\system\core_cm3.h **** #define NVIC_STIR_INTID_Msk                (0x1FFUL << NVIC_STIR_INTID_Pos)            /*!< STIR: I
 294:D:\workspace\console800480\system\core_cm3.h **** 
 295:D:\workspace\console800480\system\core_cm3.h **** /*@} end of group CMSIS_NVIC */
 296:D:\workspace\console800480\system\core_cm3.h **** 
 297:D:\workspace\console800480\system\core_cm3.h **** 
 298:D:\workspace\console800480\system\core_cm3.h **** /** \ingroup  CMSIS_core_register
 299:D:\workspace\console800480\system\core_cm3.h ****     \defgroup CMSIS_SCB CMSIS SCB
 300:D:\workspace\console800480\system\core_cm3.h ****   Type definitions for the Cortex-M System Control Block Registers
 301:D:\workspace\console800480\system\core_cm3.h ****   @{
 302:D:\workspace\console800480\system\core_cm3.h ****  */
 303:D:\workspace\console800480\system\core_cm3.h **** 
 304:D:\workspace\console800480\system\core_cm3.h **** /** \brief  Structure type to access the System Control Block (SCB).
 305:D:\workspace\console800480\system\core_cm3.h ****  */
 306:D:\workspace\console800480\system\core_cm3.h **** typedef struct
 307:D:\workspace\console800480\system\core_cm3.h **** {
 308:D:\workspace\console800480\system\core_cm3.h ****   __I  uint32_t CPUID;                   /*!< Offset: 0x000 (R/ )  CPUID Base Register             
 309:D:\workspace\console800480\system\core_cm3.h ****   __IO uint32_t ICSR;                    /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 310:D:\workspace\console800480\system\core_cm3.h ****   __IO uint32_t VTOR;                    /*!< Offset: 0x008 (R/W)  Vector Table Offset Register    
 311:D:\workspace\console800480\system\core_cm3.h ****   __IO uint32_t AIRCR;                   /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 312:D:\workspace\console800480\system\core_cm3.h ****   __IO uint32_t SCR;                     /*!< Offset: 0x010 (R/W)  System Control Register         
 313:D:\workspace\console800480\system\core_cm3.h ****   __IO uint32_t CCR;                     /*!< Offset: 0x014 (R/W)  Configuration Control Register  
 314:D:\workspace\console800480\system\core_cm3.h ****   __IO uint8_t  SHP[12];                 /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 315:D:\workspace\console800480\system\core_cm3.h ****   __IO uint32_t SHCSR;                   /*!< Offset: 0x024 (R/W)  System Handler Control and State
 316:D:\workspace\console800480\system\core_cm3.h ****   __IO uint32_t CFSR;                    /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 317:D:\workspace\console800480\system\core_cm3.h ****   __IO uint32_t HFSR;                    /*!< Offset: 0x02C (R/W)  HardFault Status Register       
 318:D:\workspace\console800480\system\core_cm3.h ****   __IO uint32_t DFSR;                    /*!< Offset: 0x030 (R/W)  Debug Fault Status Register     
 319:D:\workspace\console800480\system\core_cm3.h ****   __IO uint32_t MMFAR;                   /*!< Offset: 0x034 (R/W)  MemManage Fault Address Register
 320:D:\workspace\console800480\system\core_cm3.h ****   __IO uint32_t BFAR;                    /*!< Offset: 0x038 (R/W)  BusFault Address Register       
 321:D:\workspace\console800480\system\core_cm3.h ****   __IO uint32_t AFSR;                    /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
 322:D:\workspace\console800480\system\core_cm3.h ****   __I  uint32_t PFR[2];                  /*!< Offset: 0x040 (R/ )  Processor Feature Register      
 323:D:\workspace\console800480\system\core_cm3.h ****   __I  uint32_t DFR;                     /*!< Offset: 0x048 (R/ )  Debug Feature Register          
 324:D:\workspace\console800480\system\core_cm3.h ****   __I  uint32_t ADR;                     /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register      
 325:D:\workspace\console800480\system\core_cm3.h ****   __I  uint32_t MMFR[4];                 /*!< Offset: 0x050 (R/ )  Memory Model Feature Register   
 326:D:\workspace\console800480\system\core_cm3.h ****   __I  uint32_t ISAR[5];                 /*!< Offset: 0x060 (R/ )  Instruction Set Attributes Regis
 327:D:\workspace\console800480\system\core_cm3.h ****        uint32_t RESERVED0[5];
 328:D:\workspace\console800480\system\core_cm3.h ****   __IO uint32_t CPACR;                   /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Regis
 329:D:\workspace\console800480\system\core_cm3.h **** } SCB_Type;
 330:D:\workspace\console800480\system\core_cm3.h **** 
 331:D:\workspace\console800480\system\core_cm3.h **** /* SCB CPUID Register Definitions */
 332:D:\workspace\console800480\system\core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 333:D:\workspace\console800480\system\core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 334:D:\workspace\console800480\system\core_cm3.h **** 
 335:D:\workspace\console800480\system\core_cm3.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 336:D:\workspace\console800480\system\core_cm3.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 337:D:\workspace\console800480\system\core_cm3.h **** 
 338:D:\workspace\console800480\system\core_cm3.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16                                             /*!< SCB 
 339:D:\workspace\console800480\system\core_cm3.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 340:D:\workspace\console800480\system\core_cm3.h **** 
 341:D:\workspace\console800480\system\core_cm3.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 342:D:\workspace\console800480\system\core_cm3.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 343:D:\workspace\console800480\system\core_cm3.h **** 
 344:D:\workspace\console800480\system\core_cm3.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 345:D:\workspace\console800480\system\core_cm3.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 346:D:\workspace\console800480\system\core_cm3.h **** 
 347:D:\workspace\console800480\system\core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 348:D:\workspace\console800480\system\core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 349:D:\workspace\console800480\system\core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 350:D:\workspace\console800480\system\core_cm3.h **** 
 351:D:\workspace\console800480\system\core_cm3.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 352:D:\workspace\console800480\system\core_cm3.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 353:D:\workspace\console800480\system\core_cm3.h **** 
 354:D:\workspace\console800480\system\core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 355:D:\workspace\console800480\system\core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 356:D:\workspace\console800480\system\core_cm3.h **** 
 357:D:\workspace\console800480\system\core_cm3.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 358:D:\workspace\console800480\system\core_cm3.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 359:D:\workspace\console800480\system\core_cm3.h **** 
 360:D:\workspace\console800480\system\core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 361:D:\workspace\console800480\system\core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 362:D:\workspace\console800480\system\core_cm3.h **** 
 363:D:\workspace\console800480\system\core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 364:D:\workspace\console800480\system\core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 365:D:\workspace\console800480\system\core_cm3.h **** 
 366:D:\workspace\console800480\system\core_cm3.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 367:D:\workspace\console800480\system\core_cm3.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 368:D:\workspace\console800480\system\core_cm3.h **** 
 369:D:\workspace\console800480\system\core_cm3.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 370:D:\workspace\console800480\system\core_cm3.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 371:D:\workspace\console800480\system\core_cm3.h **** 
 372:D:\workspace\console800480\system\core_cm3.h **** #define SCB_ICSR_RETTOBASE_Pos             11                                             /*!< SCB 
 373:D:\workspace\console800480\system\core_cm3.h **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 374:D:\workspace\console800480\system\core_cm3.h **** 
 375:D:\workspace\console800480\system\core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 376:D:\workspace\console800480\system\core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 377:D:\workspace\console800480\system\core_cm3.h **** 
 378:D:\workspace\console800480\system\core_cm3.h **** /* SCB Vector Table Offset Register Definitions */
 379:D:\workspace\console800480\system\core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7                                             /*!< SCB 
 380:D:\workspace\console800480\system\core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB 
 381:D:\workspace\console800480\system\core_cm3.h **** 
 382:D:\workspace\console800480\system\core_cm3.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 383:D:\workspace\console800480\system\core_cm3.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 384:D:\workspace\console800480\system\core_cm3.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 385:D:\workspace\console800480\system\core_cm3.h **** 
 386:D:\workspace\console800480\system\core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 387:D:\workspace\console800480\system\core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 388:D:\workspace\console800480\system\core_cm3.h **** 
 389:D:\workspace\console800480\system\core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 390:D:\workspace\console800480\system\core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 391:D:\workspace\console800480\system\core_cm3.h **** 
 392:D:\workspace\console800480\system\core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Pos              8                                             /*!< SCB 
 393:D:\workspace\console800480\system\core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 394:D:\workspace\console800480\system\core_cm3.h **** 
 395:D:\workspace\console800480\system\core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 396:D:\workspace\console800480\system\core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 397:D:\workspace\console800480\system\core_cm3.h **** 
 398:D:\workspace\console800480\system\core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 399:D:\workspace\console800480\system\core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 400:D:\workspace\console800480\system\core_cm3.h **** 
 401:D:\workspace\console800480\system\core_cm3.h **** #define SCB_AIRCR_VECTRESET_Pos             0                                             /*!< SCB 
 402:D:\workspace\console800480\system\core_cm3.h **** #define SCB_AIRCR_VECTRESET_Msk            (1UL << SCB_AIRCR_VECTRESET_Pos)               /*!< SCB 
 403:D:\workspace\console800480\system\core_cm3.h **** 
 404:D:\workspace\console800480\system\core_cm3.h **** /* SCB System Control Register Definitions */
 405:D:\workspace\console800480\system\core_cm3.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 406:D:\workspace\console800480\system\core_cm3.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 407:D:\workspace\console800480\system\core_cm3.h **** 
 408:D:\workspace\console800480\system\core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 409:D:\workspace\console800480\system\core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 410:D:\workspace\console800480\system\core_cm3.h **** 
 411:D:\workspace\console800480\system\core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 412:D:\workspace\console800480\system\core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 413:D:\workspace\console800480\system\core_cm3.h **** 
 414:D:\workspace\console800480\system\core_cm3.h **** /* SCB Configuration Control Register Definitions */
 415:D:\workspace\console800480\system\core_cm3.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 416:D:\workspace\console800480\system\core_cm3.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 417:D:\workspace\console800480\system\core_cm3.h **** 
 418:D:\workspace\console800480\system\core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Pos               8                                             /*!< SCB 
 419:D:\workspace\console800480\system\core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 420:D:\workspace\console800480\system\core_cm3.h **** 
 421:D:\workspace\console800480\system\core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Pos               4                                             /*!< SCB 
 422:D:\workspace\console800480\system\core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 423:D:\workspace\console800480\system\core_cm3.h **** 
 424:D:\workspace\console800480\system\core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 425:D:\workspace\console800480\system\core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 426:D:\workspace\console800480\system\core_cm3.h **** 
 427:D:\workspace\console800480\system\core_cm3.h **** #define SCB_CCR_USERSETMPEND_Pos            1                                             /*!< SCB 
 428:D:\workspace\console800480\system\core_cm3.h **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 429:D:\workspace\console800480\system\core_cm3.h **** 
 430:D:\workspace\console800480\system\core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0                                             /*!< SCB 
 431:D:\workspace\console800480\system\core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL << SCB_CCR_NONBASETHRDENA_Pos)            /*!< SCB 
 432:D:\workspace\console800480\system\core_cm3.h **** 
 433:D:\workspace\console800480\system\core_cm3.h **** /* SCB System Handler Control and State Register Definitions */
 434:D:\workspace\console800480\system\core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18                                             /*!< SCB 
 435:D:\workspace\console800480\system\core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 436:D:\workspace\console800480\system\core_cm3.h **** 
 437:D:\workspace\console800480\system\core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17                                             /*!< SCB 
 438:D:\workspace\console800480\system\core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 439:D:\workspace\console800480\system\core_cm3.h **** 
 440:D:\workspace\console800480\system\core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16                                             /*!< SCB 
 441:D:\workspace\console800480\system\core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 442:D:\workspace\console800480\system\core_cm3.h **** 
 443:D:\workspace\console800480\system\core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 444:D:\workspace\console800480\system\core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 445:D:\workspace\console800480\system\core_cm3.h **** 
 446:D:\workspace\console800480\system\core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14                                             /*!< SCB 
 447:D:\workspace\console800480\system\core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 448:D:\workspace\console800480\system\core_cm3.h **** 
 449:D:\workspace\console800480\system\core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13                                             /*!< SCB 
 450:D:\workspace\console800480\system\core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 451:D:\workspace\console800480\system\core_cm3.h **** 
 452:D:\workspace\console800480\system\core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12                                             /*!< SCB 
 453:D:\workspace\console800480\system\core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 454:D:\workspace\console800480\system\core_cm3.h **** 
 455:D:\workspace\console800480\system\core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11                                             /*!< SCB 
 456:D:\workspace\console800480\system\core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 457:D:\workspace\console800480\system\core_cm3.h **** 
 458:D:\workspace\console800480\system\core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Pos            10                                             /*!< SCB 
 459:D:\workspace\console800480\system\core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 460:D:\workspace\console800480\system\core_cm3.h **** 
 461:D:\workspace\console800480\system\core_cm3.h **** #define SCB_SHCSR_MONITORACT_Pos            8                                             /*!< SCB 
 462:D:\workspace\console800480\system\core_cm3.h **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 463:D:\workspace\console800480\system\core_cm3.h **** 
 464:D:\workspace\console800480\system\core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Pos             7                                             /*!< SCB 
 465:D:\workspace\console800480\system\core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 466:D:\workspace\console800480\system\core_cm3.h **** 
 467:D:\workspace\console800480\system\core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3                                             /*!< SCB 
 468:D:\workspace\console800480\system\core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 469:D:\workspace\console800480\system\core_cm3.h **** 
 470:D:\workspace\console800480\system\core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1                                             /*!< SCB 
 471:D:\workspace\console800480\system\core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 472:D:\workspace\console800480\system\core_cm3.h **** 
 473:D:\workspace\console800480\system\core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0                                             /*!< SCB 
 474:D:\workspace\console800480\system\core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL << SCB_SHCSR_MEMFAULTACT_Pos)             /*!< SCB 
 475:D:\workspace\console800480\system\core_cm3.h **** 
 476:D:\workspace\console800480\system\core_cm3.h **** /* SCB Configurable Fault Status Registers Definitions */
 477:D:\workspace\console800480\system\core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Pos            16                                             /*!< SCB 
 478:D:\workspace\console800480\system\core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 479:D:\workspace\console800480\system\core_cm3.h **** 
 480:D:\workspace\console800480\system\core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8                                             /*!< SCB 
 481:D:\workspace\console800480\system\core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 482:D:\workspace\console800480\system\core_cm3.h **** 
 483:D:\workspace\console800480\system\core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0                                             /*!< SCB 
 484:D:\workspace\console800480\system\core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL << SCB_CFSR_MEMFAULTSR_Pos)            /*!< SCB 
 485:D:\workspace\console800480\system\core_cm3.h **** 
 486:D:\workspace\console800480\system\core_cm3.h **** /* SCB Hard Fault Status Registers Definitions */
 487:D:\workspace\console800480\system\core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Pos              31                                             /*!< SCB 
 488:D:\workspace\console800480\system\core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 489:D:\workspace\console800480\system\core_cm3.h **** 
 490:D:\workspace\console800480\system\core_cm3.h **** #define SCB_HFSR_FORCED_Pos                30                                             /*!< SCB 
 491:D:\workspace\console800480\system\core_cm3.h **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 492:D:\workspace\console800480\system\core_cm3.h **** 
 493:D:\workspace\console800480\system\core_cm3.h **** #define SCB_HFSR_VECTTBL_Pos                1                                             /*!< SCB 
 494:D:\workspace\console800480\system\core_cm3.h **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 495:D:\workspace\console800480\system\core_cm3.h **** 
 496:D:\workspace\console800480\system\core_cm3.h **** /* SCB Debug Fault Status Register Definitions */
 497:D:\workspace\console800480\system\core_cm3.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 498:D:\workspace\console800480\system\core_cm3.h **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 499:D:\workspace\console800480\system\core_cm3.h **** 
 500:D:\workspace\console800480\system\core_cm3.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 501:D:\workspace\console800480\system\core_cm3.h **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 502:D:\workspace\console800480\system\core_cm3.h **** 
 503:D:\workspace\console800480\system\core_cm3.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 504:D:\workspace\console800480\system\core_cm3.h **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 505:D:\workspace\console800480\system\core_cm3.h **** 
 506:D:\workspace\console800480\system\core_cm3.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 507:D:\workspace\console800480\system\core_cm3.h **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 508:D:\workspace\console800480\system\core_cm3.h **** 
 509:D:\workspace\console800480\system\core_cm3.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 510:D:\workspace\console800480\system\core_cm3.h **** #define SCB_DFSR_HALTED_Msk                (1UL << SCB_DFSR_HALTED_Pos)                   /*!< SCB 
 511:D:\workspace\console800480\system\core_cm3.h **** 
 512:D:\workspace\console800480\system\core_cm3.h **** /*@} end of group CMSIS_SCB */
 513:D:\workspace\console800480\system\core_cm3.h **** 
 514:D:\workspace\console800480\system\core_cm3.h **** 
 515:D:\workspace\console800480\system\core_cm3.h **** /** \ingroup  CMSIS_core_register
 516:D:\workspace\console800480\system\core_cm3.h ****     \defgroup CMSIS_SCnSCB CMSIS System Control and ID Register not in the SCB
 517:D:\workspace\console800480\system\core_cm3.h ****   Type definitions for the Cortex-M System Control and ID Register not in the SCB
 518:D:\workspace\console800480\system\core_cm3.h ****   @{
 519:D:\workspace\console800480\system\core_cm3.h ****  */
 520:D:\workspace\console800480\system\core_cm3.h **** 
 521:D:\workspace\console800480\system\core_cm3.h **** /** \brief  Structure type to access the System Control and ID Register not in the SCB.
 522:D:\workspace\console800480\system\core_cm3.h ****  */
 523:D:\workspace\console800480\system\core_cm3.h **** typedef struct
 524:D:\workspace\console800480\system\core_cm3.h **** {
 525:D:\workspace\console800480\system\core_cm3.h ****        uint32_t RESERVED0[1];
 526:D:\workspace\console800480\system\core_cm3.h ****   __I  uint32_t ICTR;                    /*!< Offset: 0x004 (R/ )  Interrupt Controller Type Regist
 527:D:\workspace\console800480\system\core_cm3.h **** #if ((defined __CM3_REV) && (__CM3_REV >= 0x200))
 528:D:\workspace\console800480\system\core_cm3.h ****   __IO uint32_t ACTLR;                   /*!< Offset: 0x008 (R/W)  Auxiliary Control Register      
 529:D:\workspace\console800480\system\core_cm3.h **** #else
 530:D:\workspace\console800480\system\core_cm3.h ****        uint32_t RESERVED1[1];
 531:D:\workspace\console800480\system\core_cm3.h **** #endif
 532:D:\workspace\console800480\system\core_cm3.h **** } SCnSCB_Type;
 533:D:\workspace\console800480\system\core_cm3.h **** 
 534:D:\workspace\console800480\system\core_cm3.h **** /* Interrupt Controller Type Register Definitions */
 535:D:\workspace\console800480\system\core_cm3.h **** #define SCnSCB_ICTR_INTLINESNUM_Pos         0                                          /*!< ICTR: I
 536:D:\workspace\console800480\system\core_cm3.h **** #define SCnSCB_ICTR_INTLINESNUM_Msk        (0xFUL << SCnSCB_ICTR_INTLINESNUM_Pos)      /*!< ICTR: I
 537:D:\workspace\console800480\system\core_cm3.h **** 
 538:D:\workspace\console800480\system\core_cm3.h **** /* Auxiliary Control Register Definitions */
 539:D:\workspace\console800480\system\core_cm3.h **** 
 540:D:\workspace\console800480\system\core_cm3.h **** #define SCnSCB_ACTLR_DISFOLD_Pos            2                                          /*!< ACTLR: 
 541:D:\workspace\console800480\system\core_cm3.h **** #define SCnSCB_ACTLR_DISFOLD_Msk           (1UL << SCnSCB_ACTLR_DISFOLD_Pos)           /*!< ACTLR: 
 542:D:\workspace\console800480\system\core_cm3.h **** 
 543:D:\workspace\console800480\system\core_cm3.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Pos         1                                          /*!< ACTLR: 
 544:D:\workspace\console800480\system\core_cm3.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Msk        (1UL << SCnSCB_ACTLR_DISDEFWBUF_Pos)        /*!< ACTLR: 
 545:D:\workspace\console800480\system\core_cm3.h **** 
 546:D:\workspace\console800480\system\core_cm3.h **** #define SCnSCB_ACTLR_DISMCYCINT_Pos         0                                          /*!< ACTLR: 
 547:D:\workspace\console800480\system\core_cm3.h **** #define SCnSCB_ACTLR_DISMCYCINT_Msk        (1UL << SCnSCB_ACTLR_DISMCYCINT_Pos)        /*!< ACTLR: 
 548:D:\workspace\console800480\system\core_cm3.h **** 
 549:D:\workspace\console800480\system\core_cm3.h **** /*@} end of group CMSIS_SCnotSCB */
 550:D:\workspace\console800480\system\core_cm3.h **** 
 551:D:\workspace\console800480\system\core_cm3.h **** 
 552:D:\workspace\console800480\system\core_cm3.h **** /** \ingroup  CMSIS_core_register
 553:D:\workspace\console800480\system\core_cm3.h ****     \defgroup CMSIS_SysTick CMSIS SysTick
 554:D:\workspace\console800480\system\core_cm3.h ****   Type definitions for the Cortex-M System Timer Registers
 555:D:\workspace\console800480\system\core_cm3.h ****   @{
 556:D:\workspace\console800480\system\core_cm3.h ****  */
 557:D:\workspace\console800480\system\core_cm3.h **** 
 558:D:\workspace\console800480\system\core_cm3.h **** /** \brief  Structure type to access the System Timer (SysTick).
 559:D:\workspace\console800480\system\core_cm3.h ****  */
 560:D:\workspace\console800480\system\core_cm3.h **** typedef struct
 561:D:\workspace\console800480\system\core_cm3.h **** {
 562:D:\workspace\console800480\system\core_cm3.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 563:D:\workspace\console800480\system\core_cm3.h ****   __IO uint32_t LOAD;                    /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register   
 564:D:\workspace\console800480\system\core_cm3.h ****   __IO uint32_t VAL;                     /*!< Offset: 0x008 (R/W)  SysTick Current Value Register  
 565:D:\workspace\console800480\system\core_cm3.h ****   __I  uint32_t CALIB;                   /*!< Offset: 0x00C (R/ )  SysTick Calibration Register    
 566:D:\workspace\console800480\system\core_cm3.h **** } SysTick_Type;
 567:D:\workspace\console800480\system\core_cm3.h **** 
 568:D:\workspace\console800480\system\core_cm3.h **** /* SysTick Control / Status Register Definitions */
 569:D:\workspace\console800480\system\core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 570:D:\workspace\console800480\system\core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 571:D:\workspace\console800480\system\core_cm3.h **** 
 572:D:\workspace\console800480\system\core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 573:D:\workspace\console800480\system\core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 574:D:\workspace\console800480\system\core_cm3.h **** 
 575:D:\workspace\console800480\system\core_cm3.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 576:D:\workspace\console800480\system\core_cm3.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 577:D:\workspace\console800480\system\core_cm3.h **** 
 578:D:\workspace\console800480\system\core_cm3.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 579:D:\workspace\console800480\system\core_cm3.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 580:D:\workspace\console800480\system\core_cm3.h **** 
 581:D:\workspace\console800480\system\core_cm3.h **** /* SysTick Reload Register Definitions */
 582:D:\workspace\console800480\system\core_cm3.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 583:D:\workspace\console800480\system\core_cm3.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 584:D:\workspace\console800480\system\core_cm3.h **** 
 585:D:\workspace\console800480\system\core_cm3.h **** /* SysTick Current Register Definitions */
 586:D:\workspace\console800480\system\core_cm3.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 587:D:\workspace\console800480\system\core_cm3.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 588:D:\workspace\console800480\system\core_cm3.h **** 
 589:D:\workspace\console800480\system\core_cm3.h **** /* SysTick Calibration Register Definitions */
 590:D:\workspace\console800480\system\core_cm3.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 591:D:\workspace\console800480\system\core_cm3.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 592:D:\workspace\console800480\system\core_cm3.h **** 
 593:D:\workspace\console800480\system\core_cm3.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 594:D:\workspace\console800480\system\core_cm3.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 595:D:\workspace\console800480\system\core_cm3.h **** 
 596:D:\workspace\console800480\system\core_cm3.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 597:D:\workspace\console800480\system\core_cm3.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 598:D:\workspace\console800480\system\core_cm3.h **** 
 599:D:\workspace\console800480\system\core_cm3.h **** /*@} end of group CMSIS_SysTick */
 600:D:\workspace\console800480\system\core_cm3.h **** 
 601:D:\workspace\console800480\system\core_cm3.h **** 
 602:D:\workspace\console800480\system\core_cm3.h **** /** \ingroup  CMSIS_core_register
 603:D:\workspace\console800480\system\core_cm3.h ****     \defgroup CMSIS_ITM CMSIS ITM
 604:D:\workspace\console800480\system\core_cm3.h ****   Type definitions for the Cortex-M Instrumentation Trace Macrocell (ITM)
 605:D:\workspace\console800480\system\core_cm3.h ****   @{
 606:D:\workspace\console800480\system\core_cm3.h ****  */
 607:D:\workspace\console800480\system\core_cm3.h **** 
 608:D:\workspace\console800480\system\core_cm3.h **** /** \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
 609:D:\workspace\console800480\system\core_cm3.h ****  */
 610:D:\workspace\console800480\system\core_cm3.h **** typedef struct
 611:D:\workspace\console800480\system\core_cm3.h **** {
 612:D:\workspace\console800480\system\core_cm3.h ****   __O  union
 613:D:\workspace\console800480\system\core_cm3.h ****   {
 614:D:\workspace\console800480\system\core_cm3.h ****     __O  uint8_t    u8;                  /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit         
 615:D:\workspace\console800480\system\core_cm3.h ****     __O  uint16_t   u16;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit        
 616:D:\workspace\console800480\system\core_cm3.h ****     __O  uint32_t   u32;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit        
 617:D:\workspace\console800480\system\core_cm3.h ****   }  PORT [32];                          /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers     
 618:D:\workspace\console800480\system\core_cm3.h ****        uint32_t RESERVED0[864];
 619:D:\workspace\console800480\system\core_cm3.h ****   __IO uint32_t TER;                     /*!< Offset: 0xE00 (R/W)  ITM Trace Enable Register       
 620:D:\workspace\console800480\system\core_cm3.h ****        uint32_t RESERVED1[15];
 621:D:\workspace\console800480\system\core_cm3.h ****   __IO uint32_t TPR;                     /*!< Offset: 0xE40 (R/W)  ITM Trace Privilege Register    
 622:D:\workspace\console800480\system\core_cm3.h ****        uint32_t RESERVED2[15];
 623:D:\workspace\console800480\system\core_cm3.h ****   __IO uint32_t TCR;                     /*!< Offset: 0xE80 (R/W)  ITM Trace Control Register      
 624:D:\workspace\console800480\system\core_cm3.h **** } ITM_Type;
 625:D:\workspace\console800480\system\core_cm3.h **** 
 626:D:\workspace\console800480\system\core_cm3.h **** /* ITM Trace Privilege Register Definitions */
 627:D:\workspace\console800480\system\core_cm3.h **** #define ITM_TPR_PRIVMASK_Pos                0                                          /*!< ITM TPR
 628:D:\workspace\console800480\system\core_cm3.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFUL << ITM_TPR_PRIVMASK_Pos)             /*!< ITM TPR
 629:D:\workspace\console800480\system\core_cm3.h **** 
 630:D:\workspace\console800480\system\core_cm3.h **** /* ITM Trace Control Register Definitions */
 631:D:\workspace\console800480\system\core_cm3.h **** #define ITM_TCR_BUSY_Pos                   23                                          /*!< ITM TCR
 632:D:\workspace\console800480\system\core_cm3.h **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                   /*!< ITM TCR
 633:D:\workspace\console800480\system\core_cm3.h **** 
 634:D:\workspace\console800480\system\core_cm3.h **** #define ITM_TCR_TraceBusID_Pos             16                                          /*!< ITM TCR
 635:D:\workspace\console800480\system\core_cm3.h **** #define ITM_TCR_TraceBusID_Msk             (0x7FUL << ITM_TCR_TraceBusID_Pos)          /*!< ITM TCR
 636:D:\workspace\console800480\system\core_cm3.h **** 
 637:D:\workspace\console800480\system\core_cm3.h **** #define ITM_TCR_GTSFREQ_Pos                10                                          /*!< ITM TCR
 638:D:\workspace\console800480\system\core_cm3.h **** #define ITM_TCR_GTSFREQ_Msk                (3UL << ITM_TCR_GTSFREQ_Pos)                /*!< ITM TCR
 639:D:\workspace\console800480\system\core_cm3.h **** 
 640:D:\workspace\console800480\system\core_cm3.h **** #define ITM_TCR_TSPrescale_Pos              8                                          /*!< ITM TCR
 641:D:\workspace\console800480\system\core_cm3.h **** #define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)             /*!< ITM TCR
 642:D:\workspace\console800480\system\core_cm3.h **** 
 643:D:\workspace\console800480\system\core_cm3.h **** #define ITM_TCR_SWOENA_Pos                  4                                          /*!< ITM TCR
 644:D:\workspace\console800480\system\core_cm3.h **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                 /*!< ITM TCR
 645:D:\workspace\console800480\system\core_cm3.h **** 
 646:D:\workspace\console800480\system\core_cm3.h **** #define ITM_TCR_TXENA_Pos                   3                                          /*!< ITM TCR
 647:D:\workspace\console800480\system\core_cm3.h **** #define ITM_TCR_TXENA_Msk                  (1UL << ITM_TCR_TXENA_Pos)                  /*!< ITM TCR
 648:D:\workspace\console800480\system\core_cm3.h **** 
 649:D:\workspace\console800480\system\core_cm3.h **** #define ITM_TCR_SYNCENA_Pos                 2                                          /*!< ITM TCR
 650:D:\workspace\console800480\system\core_cm3.h **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                /*!< ITM TCR
 651:D:\workspace\console800480\system\core_cm3.h **** 
 652:D:\workspace\console800480\system\core_cm3.h **** #define ITM_TCR_TSENA_Pos                   1                                          /*!< ITM TCR
 653:D:\workspace\console800480\system\core_cm3.h **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                  /*!< ITM TCR
 654:D:\workspace\console800480\system\core_cm3.h **** 
 655:D:\workspace\console800480\system\core_cm3.h **** #define ITM_TCR_ITMENA_Pos                  0                                          /*!< ITM TCR
 656:D:\workspace\console800480\system\core_cm3.h **** #define ITM_TCR_ITMENA_Msk                 (1UL << ITM_TCR_ITMENA_Pos)                 /*!< ITM TCR
 657:D:\workspace\console800480\system\core_cm3.h **** 
 658:D:\workspace\console800480\system\core_cm3.h **** /*@}*/ /* end of group CMSIS_ITM */
 659:D:\workspace\console800480\system\core_cm3.h **** 
 660:D:\workspace\console800480\system\core_cm3.h **** 
 661:D:\workspace\console800480\system\core_cm3.h **** #if (__MPU_PRESENT == 1)
 662:D:\workspace\console800480\system\core_cm3.h **** /** \ingroup  CMSIS_core_register
 663:D:\workspace\console800480\system\core_cm3.h ****     \defgroup CMSIS_MPU CMSIS MPU
 664:D:\workspace\console800480\system\core_cm3.h ****   Type definitions for the Cortex-M Memory Protection Unit (MPU)
 665:D:\workspace\console800480\system\core_cm3.h ****   @{
 666:D:\workspace\console800480\system\core_cm3.h ****  */
 667:D:\workspace\console800480\system\core_cm3.h **** 
 668:D:\workspace\console800480\system\core_cm3.h **** /** \brief  Structure type to access the Memory Protection Unit (MPU).
 669:D:\workspace\console800480\system\core_cm3.h ****  */
 670:D:\workspace\console800480\system\core_cm3.h **** typedef struct
 671:D:\workspace\console800480\system\core_cm3.h **** {
 672:D:\workspace\console800480\system\core_cm3.h ****   __I  uint32_t TYPE;                    /*!< Offset: 0x000 (R/ )  MPU Type Register               
 673:D:\workspace\console800480\system\core_cm3.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x004 (R/W)  MPU Control Register            
 674:D:\workspace\console800480\system\core_cm3.h ****   __IO uint32_t RNR;                     /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register      
 675:D:\workspace\console800480\system\core_cm3.h ****   __IO uint32_t RBAR;                    /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
 676:D:\workspace\console800480\system\core_cm3.h ****   __IO uint32_t RASR;                    /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
 677:D:\workspace\console800480\system\core_cm3.h ****   __IO uint32_t RBAR_A1;                 /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
 678:D:\workspace\console800480\system\core_cm3.h ****   __IO uint32_t RASR_A1;                 /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
 679:D:\workspace\console800480\system\core_cm3.h ****   __IO uint32_t RBAR_A2;                 /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
 680:D:\workspace\console800480\system\core_cm3.h ****   __IO uint32_t RASR_A2;                 /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
 681:D:\workspace\console800480\system\core_cm3.h ****   __IO uint32_t RBAR_A3;                 /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
 682:D:\workspace\console800480\system\core_cm3.h ****   __IO uint32_t RASR_A3;                 /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
 683:D:\workspace\console800480\system\core_cm3.h **** } MPU_Type;
 684:D:\workspace\console800480\system\core_cm3.h **** 
 685:D:\workspace\console800480\system\core_cm3.h **** /* MPU Type Register */
 686:D:\workspace\console800480\system\core_cm3.h **** #define MPU_TYPE_IREGION_Pos               16                                             /*!< MPU 
 687:D:\workspace\console800480\system\core_cm3.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
 688:D:\workspace\console800480\system\core_cm3.h **** 
 689:D:\workspace\console800480\system\core_cm3.h **** #define MPU_TYPE_DREGION_Pos                8                                             /*!< MPU 
 690:D:\workspace\console800480\system\core_cm3.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
 691:D:\workspace\console800480\system\core_cm3.h **** 
 692:D:\workspace\console800480\system\core_cm3.h **** #define MPU_TYPE_SEPARATE_Pos               0                                             /*!< MPU 
 693:D:\workspace\console800480\system\core_cm3.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL << MPU_TYPE_SEPARATE_Pos)                 /*!< MPU 
 694:D:\workspace\console800480\system\core_cm3.h **** 
 695:D:\workspace\console800480\system\core_cm3.h **** /* MPU Control Register */
 696:D:\workspace\console800480\system\core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2                                             /*!< MPU 
 697:D:\workspace\console800480\system\core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
 698:D:\workspace\console800480\system\core_cm3.h **** 
 699:D:\workspace\console800480\system\core_cm3.h **** #define MPU_CTRL_HFNMIENA_Pos               1                                             /*!< MPU 
 700:D:\workspace\console800480\system\core_cm3.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
 701:D:\workspace\console800480\system\core_cm3.h **** 
 702:D:\workspace\console800480\system\core_cm3.h **** #define MPU_CTRL_ENABLE_Pos                 0                                             /*!< MPU 
 703:D:\workspace\console800480\system\core_cm3.h **** #define MPU_CTRL_ENABLE_Msk                (1UL << MPU_CTRL_ENABLE_Pos)                   /*!< MPU 
 704:D:\workspace\console800480\system\core_cm3.h **** 
 705:D:\workspace\console800480\system\core_cm3.h **** /* MPU Region Number Register */
 706:D:\workspace\console800480\system\core_cm3.h **** #define MPU_RNR_REGION_Pos                  0                                             /*!< MPU 
 707:D:\workspace\console800480\system\core_cm3.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL << MPU_RNR_REGION_Pos)                 /*!< MPU 
 708:D:\workspace\console800480\system\core_cm3.h **** 
 709:D:\workspace\console800480\system\core_cm3.h **** /* MPU Region Base Address Register */
 710:D:\workspace\console800480\system\core_cm3.h **** #define MPU_RBAR_ADDR_Pos                   5                                             /*!< MPU 
 711:D:\workspace\console800480\system\core_cm3.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
 712:D:\workspace\console800480\system\core_cm3.h **** 
 713:D:\workspace\console800480\system\core_cm3.h **** #define MPU_RBAR_VALID_Pos                  4                                             /*!< MPU 
 714:D:\workspace\console800480\system\core_cm3.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
 715:D:\workspace\console800480\system\core_cm3.h **** 
 716:D:\workspace\console800480\system\core_cm3.h **** #define MPU_RBAR_REGION_Pos                 0                                             /*!< MPU 
 717:D:\workspace\console800480\system\core_cm3.h **** #define MPU_RBAR_REGION_Msk                (0xFUL << MPU_RBAR_REGION_Pos)                 /*!< MPU 
 718:D:\workspace\console800480\system\core_cm3.h **** 
 719:D:\workspace\console800480\system\core_cm3.h **** /* MPU Region Attribute and Size Register */
 720:D:\workspace\console800480\system\core_cm3.h **** #define MPU_RASR_ATTRS_Pos                 16                                             /*!< MPU 
 721:D:\workspace\console800480\system\core_cm3.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
 722:D:\workspace\console800480\system\core_cm3.h **** 
 723:D:\workspace\console800480\system\core_cm3.h **** #define MPU_RASR_SRD_Pos                    8                                             /*!< MPU 
 724:D:\workspace\console800480\system\core_cm3.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
 725:D:\workspace\console800480\system\core_cm3.h **** 
 726:D:\workspace\console800480\system\core_cm3.h **** #define MPU_RASR_SIZE_Pos                   1                                             /*!< MPU 
 727:D:\workspace\console800480\system\core_cm3.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
 728:D:\workspace\console800480\system\core_cm3.h **** 
 729:D:\workspace\console800480\system\core_cm3.h **** #define MPU_RASR_ENABLE_Pos                 0                                             /*!< MPU 
 730:D:\workspace\console800480\system\core_cm3.h **** #define MPU_RASR_ENABLE_Msk                (1UL << MPU_RASR_ENABLE_Pos)                   /*!< MPU 
 731:D:\workspace\console800480\system\core_cm3.h **** 
 732:D:\workspace\console800480\system\core_cm3.h **** /*@} end of group CMSIS_MPU */
 733:D:\workspace\console800480\system\core_cm3.h **** #endif
 734:D:\workspace\console800480\system\core_cm3.h **** 
 735:D:\workspace\console800480\system\core_cm3.h **** 
 736:D:\workspace\console800480\system\core_cm3.h **** /** \ingroup  CMSIS_core_register
 737:D:\workspace\console800480\system\core_cm3.h ****     \defgroup CMSIS_CoreDebug CMSIS Core Debug
 738:D:\workspace\console800480\system\core_cm3.h ****   Type definitions for the Cortex-M Core Debug Registers
 739:D:\workspace\console800480\system\core_cm3.h ****   @{
 740:D:\workspace\console800480\system\core_cm3.h ****  */
 741:D:\workspace\console800480\system\core_cm3.h **** 
 742:D:\workspace\console800480\system\core_cm3.h **** /** \brief  Structure type to access the Core Debug Register (CoreDebug).
 743:D:\workspace\console800480\system\core_cm3.h ****  */
 744:D:\workspace\console800480\system\core_cm3.h **** typedef struct
 745:D:\workspace\console800480\system\core_cm3.h **** {
 746:D:\workspace\console800480\system\core_cm3.h ****   __IO uint32_t DHCSR;                   /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
 747:D:\workspace\console800480\system\core_cm3.h ****   __O  uint32_t DCRSR;                   /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
 748:D:\workspace\console800480\system\core_cm3.h ****   __IO uint32_t DCRDR;                   /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
 749:D:\workspace\console800480\system\core_cm3.h ****   __IO uint32_t DEMCR;                   /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
 750:D:\workspace\console800480\system\core_cm3.h **** } CoreDebug_Type;
 751:D:\workspace\console800480\system\core_cm3.h **** 
 752:D:\workspace\console800480\system\core_cm3.h **** /* Debug Halting Control and Status Register */
 753:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
 754:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
 755:D:\workspace\console800480\system\core_cm3.h **** 
 756:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
 757:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
 758:D:\workspace\console800480\system\core_cm3.h **** 
 759:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
 760:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
 761:D:\workspace\console800480\system\core_cm3.h **** 
 762:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
 763:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
 764:D:\workspace\console800480\system\core_cm3.h **** 
 765:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
 766:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
 767:D:\workspace\console800480\system\core_cm3.h **** 
 768:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
 769:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
 770:D:\workspace\console800480\system\core_cm3.h **** 
 771:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
 772:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
 773:D:\workspace\console800480\system\core_cm3.h **** 
 774:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5                                             /*!< Core
 775:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
 776:D:\workspace\console800480\system\core_cm3.h **** 
 777:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
 778:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
 779:D:\workspace\console800480\system\core_cm3.h **** 
 780:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
 781:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
 782:D:\workspace\console800480\system\core_cm3.h **** 
 783:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
 784:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
 785:D:\workspace\console800480\system\core_cm3.h **** 
 786:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
 787:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< Core
 788:D:\workspace\console800480\system\core_cm3.h **** 
 789:D:\workspace\console800480\system\core_cm3.h **** /* Debug Core Register Selector Register */
 790:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
 791:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
 792:D:\workspace\console800480\system\core_cm3.h **** 
 793:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
 794:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL << CoreDebug_DCRSR_REGSEL_Pos)         /*!< Core
 795:D:\workspace\console800480\system\core_cm3.h **** 
 796:D:\workspace\console800480\system\core_cm3.h **** /* Debug Exception and Monitor Control Register */
 797:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24                                             /*!< Core
 798:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
 799:D:\workspace\console800480\system\core_cm3.h **** 
 800:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19                                             /*!< Core
 801:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
 802:D:\workspace\console800480\system\core_cm3.h **** 
 803:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18                                             /*!< Core
 804:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
 805:D:\workspace\console800480\system\core_cm3.h **** 
 806:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17                                             /*!< Core
 807:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
 808:D:\workspace\console800480\system\core_cm3.h **** 
 809:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16                                             /*!< Core
 810:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
 811:D:\workspace\console800480\system\core_cm3.h **** 
 812:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
 813:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
 814:D:\workspace\console800480\system\core_cm3.h **** 
 815:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9                                             /*!< Core
 816:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
 817:D:\workspace\console800480\system\core_cm3.h **** 
 818:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8                                             /*!< Core
 819:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
 820:D:\workspace\console800480\system\core_cm3.h **** 
 821:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7                                             /*!< Core
 822:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
 823:D:\workspace\console800480\system\core_cm3.h **** 
 824:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6                                             /*!< Core
 825:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
 826:D:\workspace\console800480\system\core_cm3.h **** 
 827:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5                                             /*!< Core
 828:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
 829:D:\workspace\console800480\system\core_cm3.h **** 
 830:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4                                             /*!< Core
 831:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
 832:D:\workspace\console800480\system\core_cm3.h **** 
 833:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
 834:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< Core
 835:D:\workspace\console800480\system\core_cm3.h **** 
 836:D:\workspace\console800480\system\core_cm3.h **** /*@} end of group CMSIS_CoreDebug */
 837:D:\workspace\console800480\system\core_cm3.h **** 
 838:D:\workspace\console800480\system\core_cm3.h **** 
 839:D:\workspace\console800480\system\core_cm3.h **** /** \ingroup  CMSIS_core_register
 840:D:\workspace\console800480\system\core_cm3.h ****   @{
 841:D:\workspace\console800480\system\core_cm3.h ****  */
 842:D:\workspace\console800480\system\core_cm3.h **** 
 843:D:\workspace\console800480\system\core_cm3.h **** /* Memory mapping of Cortex-M3 Hardware */
 844:D:\workspace\console800480\system\core_cm3.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 845:D:\workspace\console800480\system\core_cm3.h **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address        
 846:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
 847:D:\workspace\console800480\system\core_cm3.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address    
 848:D:\workspace\console800480\system\core_cm3.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address       
 849:D:\workspace\console800480\system\core_cm3.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 850:D:\workspace\console800480\system\core_cm3.h **** 
 851:D:\workspace\console800480\system\core_cm3.h **** #define SCnSCB              ((SCnSCB_Type    *)     SCS_BASE      )   /*!< System control Register 
 852:D:\workspace\console800480\system\core_cm3.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 853:D:\workspace\console800480\system\core_cm3.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 854:D:\workspace\console800480\system\core_cm3.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 855:D:\workspace\console800480\system\core_cm3.h **** #define ITM                 ((ITM_Type       *)     ITM_BASE      )   /*!< ITM configuration struct
 856:D:\workspace\console800480\system\core_cm3.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
 857:D:\workspace\console800480\system\core_cm3.h **** 
 858:D:\workspace\console800480\system\core_cm3.h **** #if (__MPU_PRESENT == 1)
 859:D:\workspace\console800480\system\core_cm3.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit  
 860:D:\workspace\console800480\system\core_cm3.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit  
 861:D:\workspace\console800480\system\core_cm3.h **** #endif
 862:D:\workspace\console800480\system\core_cm3.h **** 
 863:D:\workspace\console800480\system\core_cm3.h **** /*@} */
 864:D:\workspace\console800480\system\core_cm3.h **** 
 865:D:\workspace\console800480\system\core_cm3.h **** 
 866:D:\workspace\console800480\system\core_cm3.h **** 
 867:D:\workspace\console800480\system\core_cm3.h **** /*******************************************************************************
 868:D:\workspace\console800480\system\core_cm3.h ****  *                Hardware Abstraction Layer
 869:D:\workspace\console800480\system\core_cm3.h ****  ******************************************************************************/
 870:D:\workspace\console800480\system\core_cm3.h **** /** \defgroup CMSIS_Core_FunctionInterface CMSIS Core Function Interface
 871:D:\workspace\console800480\system\core_cm3.h ****   Core Function Interface contains:
 872:D:\workspace\console800480\system\core_cm3.h ****   - Core NVIC Functions
 873:D:\workspace\console800480\system\core_cm3.h ****   - Core SysTick Functions
 874:D:\workspace\console800480\system\core_cm3.h ****   - Core Debug Functions
 875:D:\workspace\console800480\system\core_cm3.h ****   - Core Register Access Functions
 876:D:\workspace\console800480\system\core_cm3.h **** */
 877:D:\workspace\console800480\system\core_cm3.h **** 
 878:D:\workspace\console800480\system\core_cm3.h **** 
 879:D:\workspace\console800480\system\core_cm3.h **** 
 880:D:\workspace\console800480\system\core_cm3.h **** /* ##########################   NVIC functions  #################################### */
 881:D:\workspace\console800480\system\core_cm3.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 882:D:\workspace\console800480\system\core_cm3.h ****     \defgroup CMSIS_Core_NVICFunctions CMSIS Core NVIC Functions
 883:D:\workspace\console800480\system\core_cm3.h ****   @{
 884:D:\workspace\console800480\system\core_cm3.h ****  */
 885:D:\workspace\console800480\system\core_cm3.h **** 
 886:D:\workspace\console800480\system\core_cm3.h **** /** \brief  Set Priority Grouping
 887:D:\workspace\console800480\system\core_cm3.h **** 
 888:D:\workspace\console800480\system\core_cm3.h ****   This function sets the priority grouping field using the required unlock sequence.
 889:D:\workspace\console800480\system\core_cm3.h ****   The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
 890:D:\workspace\console800480\system\core_cm3.h ****   Only values from 0..7 are used.
 891:D:\workspace\console800480\system\core_cm3.h ****   In case of a conflict between priority grouping and available
 892:D:\workspace\console800480\system\core_cm3.h ****   priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
 893:D:\workspace\console800480\system\core_cm3.h **** 
 894:D:\workspace\console800480\system\core_cm3.h ****     \param [in]      PriorityGroup  Priority grouping field
 895:D:\workspace\console800480\system\core_cm3.h ****  */
 896:D:\workspace\console800480\system\core_cm3.h **** static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
 897:D:\workspace\console800480\system\core_cm3.h **** {
 898:D:\workspace\console800480\system\core_cm3.h ****   uint32_t reg_value;
 899:D:\workspace\console800480\system\core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 a
 900:D:\workspace\console800480\system\core_cm3.h **** 
 901:D:\workspace\console800480\system\core_cm3.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
 902:D:\workspace\console800480\system\core_cm3.h ****   reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to chan
 903:D:\workspace\console800480\system\core_cm3.h ****   reg_value  =  (reg_value                                 |
 904:D:\workspace\console800480\system\core_cm3.h ****                 ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
 905:D:\workspace\console800480\system\core_cm3.h ****                 (PriorityGroupTmp << 8));                                     /* Insert write key a
 906:D:\workspace\console800480\system\core_cm3.h ****   SCB->AIRCR =  reg_value;
 907:D:\workspace\console800480\system\core_cm3.h **** }
 908:D:\workspace\console800480\system\core_cm3.h **** 
 909:D:\workspace\console800480\system\core_cm3.h **** 
 910:D:\workspace\console800480\system\core_cm3.h **** /** \brief  Get Priority Grouping
 911:D:\workspace\console800480\system\core_cm3.h **** 
 912:D:\workspace\console800480\system\core_cm3.h ****   This function gets the priority grouping from NVIC Interrupt Controller.
 913:D:\workspace\console800480\system\core_cm3.h ****   Priority grouping is SCB->AIRCR [10:8] PRIGROUP field.
 914:D:\workspace\console800480\system\core_cm3.h **** 
 915:D:\workspace\console800480\system\core_cm3.h ****     \return                Priority grouping field
 916:D:\workspace\console800480\system\core_cm3.h ****  */
 917:D:\workspace\console800480\system\core_cm3.h **** static __INLINE uint32_t NVIC_GetPriorityGrouping(void)
 918:D:\workspace\console800480\system\core_cm3.h **** {
 919:D:\workspace\console800480\system\core_cm3.h ****   return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grou
 920:D:\workspace\console800480\system\core_cm3.h **** }
 921:D:\workspace\console800480\system\core_cm3.h **** 
 922:D:\workspace\console800480\system\core_cm3.h **** 
 923:D:\workspace\console800480\system\core_cm3.h **** /** \brief  Enable External Interrupt
 924:D:\workspace\console800480\system\core_cm3.h **** 
 925:D:\workspace\console800480\system\core_cm3.h ****     This function enables a device specific interrupt in the NVIC interrupt controller.
 926:D:\workspace\console800480\system\core_cm3.h ****     The interrupt number cannot be a negative value.
 927:D:\workspace\console800480\system\core_cm3.h **** 
 928:D:\workspace\console800480\system\core_cm3.h ****     \param [in]      IRQn  Number of the external interrupt to enable
 929:D:\workspace\console800480\system\core_cm3.h ****  */
 930:D:\workspace\console800480\system\core_cm3.h **** static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
 931:D:\workspace\console800480\system\core_cm3.h **** {
 932:D:\workspace\console800480\system\core_cm3.h ****   NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 933:D:\workspace\console800480\system\core_cm3.h **** }
 934:D:\workspace\console800480\system\core_cm3.h **** 
 935:D:\workspace\console800480\system\core_cm3.h **** 
 936:D:\workspace\console800480\system\core_cm3.h **** /** \brief  Disable External Interrupt
 937:D:\workspace\console800480\system\core_cm3.h **** 
 938:D:\workspace\console800480\system\core_cm3.h ****     This function disables a device specific interrupt in the NVIC interrupt controller.
 939:D:\workspace\console800480\system\core_cm3.h ****     The interrupt number cannot be a negative value.
 940:D:\workspace\console800480\system\core_cm3.h **** 
 941:D:\workspace\console800480\system\core_cm3.h ****     \param [in]      IRQn  Number of the external interrupt to disable
 942:D:\workspace\console800480\system\core_cm3.h ****  */
 943:D:\workspace\console800480\system\core_cm3.h **** static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
 944:D:\workspace\console800480\system\core_cm3.h **** {
 945:D:\workspace\console800480\system\core_cm3.h ****   NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 946:D:\workspace\console800480\system\core_cm3.h **** }
 947:D:\workspace\console800480\system\core_cm3.h **** 
 948:D:\workspace\console800480\system\core_cm3.h **** 
 949:D:\workspace\console800480\system\core_cm3.h **** /** \brief  Get Pending Interrupt
 950:D:\workspace\console800480\system\core_cm3.h **** 
 951:D:\workspace\console800480\system\core_cm3.h ****     This function reads the pending register in the NVIC and returns the pending bit
 952:D:\workspace\console800480\system\core_cm3.h ****     for the specified interrupt.
 953:D:\workspace\console800480\system\core_cm3.h **** 
 954:D:\workspace\console800480\system\core_cm3.h ****     \param [in]      IRQn  Number of the interrupt for get pending
 955:D:\workspace\console800480\system\core_cm3.h ****     \return             0  Interrupt status is not pending
 956:D:\workspace\console800480\system\core_cm3.h ****     \return             1  Interrupt status is pending
 957:D:\workspace\console800480\system\core_cm3.h ****  */
 958:D:\workspace\console800480\system\core_cm3.h **** static __INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
 959:D:\workspace\console800480\system\core_cm3.h **** {
 960:D:\workspace\console800480\system\core_cm3.h ****   return((uint32_t) ((NVIC->ISPR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); 
 961:D:\workspace\console800480\system\core_cm3.h **** }
 962:D:\workspace\console800480\system\core_cm3.h **** 
 963:D:\workspace\console800480\system\core_cm3.h **** 
 964:D:\workspace\console800480\system\core_cm3.h **** /** \brief  Set Pending Interrupt
 965:D:\workspace\console800480\system\core_cm3.h **** 
 966:D:\workspace\console800480\system\core_cm3.h ****     This function sets the pending bit for the specified interrupt.
 967:D:\workspace\console800480\system\core_cm3.h ****     The interrupt number cannot be a negative value.
 968:D:\workspace\console800480\system\core_cm3.h **** 
 969:D:\workspace\console800480\system\core_cm3.h ****     \param [in]      IRQn  Number of the interrupt for set pending
 970:D:\workspace\console800480\system\core_cm3.h ****  */
 971:D:\workspace\console800480\system\core_cm3.h **** static __INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
 972:D:\workspace\console800480\system\core_cm3.h **** {
 973:D:\workspace\console800480\system\core_cm3.h ****   NVIC->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending 
 974:D:\workspace\console800480\system\core_cm3.h **** }
 975:D:\workspace\console800480\system\core_cm3.h **** 
 976:D:\workspace\console800480\system\core_cm3.h **** 
 977:D:\workspace\console800480\system\core_cm3.h **** /** \brief  Clear Pending Interrupt
 978:D:\workspace\console800480\system\core_cm3.h **** 
 979:D:\workspace\console800480\system\core_cm3.h ****     This function clears the pending bit for the specified interrupt.
 980:D:\workspace\console800480\system\core_cm3.h ****     The interrupt number cannot be a negative value.
 981:D:\workspace\console800480\system\core_cm3.h **** 
 982:D:\workspace\console800480\system\core_cm3.h ****     \param [in]      IRQn  Number of the interrupt for clear pending
 983:D:\workspace\console800480\system\core_cm3.h ****  */
 984:D:\workspace\console800480\system\core_cm3.h **** static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 985:D:\workspace\console800480\system\core_cm3.h **** {
 986:D:\workspace\console800480\system\core_cm3.h ****   NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrup
 987:D:\workspace\console800480\system\core_cm3.h **** }
 988:D:\workspace\console800480\system\core_cm3.h **** 
 989:D:\workspace\console800480\system\core_cm3.h **** 
 990:D:\workspace\console800480\system\core_cm3.h **** /** \brief  Get Active Interrupt
 991:D:\workspace\console800480\system\core_cm3.h **** 
 992:D:\workspace\console800480\system\core_cm3.h ****     This function reads the active register in NVIC and returns the active bit.
 993:D:\workspace\console800480\system\core_cm3.h ****     \param [in]      IRQn  Number of the interrupt for get active
 994:D:\workspace\console800480\system\core_cm3.h ****     \return             0  Interrupt status is not active
 995:D:\workspace\console800480\system\core_cm3.h ****     \return             1  Interrupt status is active
 996:D:\workspace\console800480\system\core_cm3.h ****  */
 997:D:\workspace\console800480\system\core_cm3.h **** static __INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
 998:D:\workspace\console800480\system\core_cm3.h **** {
 999:D:\workspace\console800480\system\core_cm3.h ****   return((uint32_t)((NVIC->IABR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /
1000:D:\workspace\console800480\system\core_cm3.h **** }
1001:D:\workspace\console800480\system\core_cm3.h **** 
1002:D:\workspace\console800480\system\core_cm3.h **** 
1003:D:\workspace\console800480\system\core_cm3.h **** /** \brief  Set Interrupt Priority
1004:D:\workspace\console800480\system\core_cm3.h **** 
1005:D:\workspace\console800480\system\core_cm3.h ****     This function sets the priority for the specified interrupt. The interrupt
1006:D:\workspace\console800480\system\core_cm3.h ****     number can be positive to specify an external (device specific)
1007:D:\workspace\console800480\system\core_cm3.h ****     interrupt, or negative to specify an internal (core) interrupt.
1008:D:\workspace\console800480\system\core_cm3.h **** 
1009:D:\workspace\console800480\system\core_cm3.h ****     Note: The priority cannot be set for every core interrupt.
1010:D:\workspace\console800480\system\core_cm3.h **** 
1011:D:\workspace\console800480\system\core_cm3.h ****     \param [in]      IRQn  Number of the interrupt for set priority
1012:D:\workspace\console800480\system\core_cm3.h ****     \param [in]  priority  Priority to set
1013:D:\workspace\console800480\system\core_cm3.h ****  */
1014:D:\workspace\console800480\system\core_cm3.h **** static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
1015:D:\workspace\console800480\system\core_cm3.h **** {
  25              		.loc 1 1015 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 8
  28              		@ frame_needed = 1, uses_anonymous_args = 0
  29              		@ link register save eliminated.
  30 0000 80B4     		push	{r7}
  31              		.cfi_def_cfa_offset 4
  32              		.cfi_offset 7, -4
  33 0002 83B0     		sub	sp, sp, #12
  34              		.cfi_def_cfa_offset 16
  35 0004 00AF     		add	r7, sp, #0
  36              		.cfi_def_cfa_register 7
  37 0006 0346     		mov	r3, r0
  38 0008 3960     		str	r1, [r7]
  39 000a FB71     		strb	r3, [r7, #7]
1016:D:\workspace\console800480\system\core_cm3.h ****   if(IRQn < 0) {
  40              		.loc 1 1016 0
  41 000c 97F90730 		ldrsb	r3, [r7, #7]
  42 0010 002B     		cmp	r3, #0
  43 0012 0EDA     		bge	.L2
1017:D:\workspace\console800480\system\core_cm3.h ****     SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set 
  44              		.loc 1 1017 0
  45 0014 4FF46D43 		mov	r3, #60672
  46 0018 CEF20003 		movt	r3, 57344
  47 001c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
  48 001e 02F00F02 		and	r2, r2, #15
  49 0022 111F     		subs	r1, r2, #4
  50 0024 3A68     		ldr	r2, [r7]
  51 0026 D2B2     		uxtb	r2, r2
  52 0028 1201     		lsls	r2, r2, #4
  53 002a D2B2     		uxtb	r2, r2
  54 002c 0B44     		add	r3, r3, r1
  55 002e 1A76     		strb	r2, [r3, #24]
  56 0030 0CE0     		b	.L1
  57              	.L2:
1018:D:\workspace\console800480\system\core_cm3.h ****   else {
1019:D:\workspace\console800480\system\core_cm3.h ****     NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set 
  58              		.loc 1 1019 0
  59 0032 4FF46143 		mov	r3, #57600
  60 0036 CEF20003 		movt	r3, 57344
  61 003a 97F90710 		ldrsb	r1, [r7, #7]
  62 003e 3A68     		ldr	r2, [r7]
  63 0040 D2B2     		uxtb	r2, r2
  64 0042 1201     		lsls	r2, r2, #4
  65 0044 D2B2     		uxtb	r2, r2
  66 0046 0B44     		add	r3, r3, r1
  67 0048 83F80023 		strb	r2, [r3, #768]
  68              	.L1:
1020:D:\workspace\console800480\system\core_cm3.h **** }
  69              		.loc 1 1020 0
  70 004c 0C37     		adds	r7, r7, #12
  71 004e BD46     		mov	sp, r7
  72              		@ sp needed
  73 0050 5DF8047B 		ldr	r7, [sp], #4
  74 0054 7047     		bx	lr
  75              		.cfi_endproc
  76              	.LFE46:
  78 0056 00BF     		.align	2
  79              		.thumb
  80              		.thumb_func
  82              	SysTick_Config:
  83              	.LFB51:
1021:D:\workspace\console800480\system\core_cm3.h **** 
1022:D:\workspace\console800480\system\core_cm3.h **** 
1023:D:\workspace\console800480\system\core_cm3.h **** /** \brief  Get Interrupt Priority
1024:D:\workspace\console800480\system\core_cm3.h **** 
1025:D:\workspace\console800480\system\core_cm3.h ****     This function reads the priority for the specified interrupt. The interrupt
1026:D:\workspace\console800480\system\core_cm3.h ****     number can be positive to specify an external (device specific)
1027:D:\workspace\console800480\system\core_cm3.h ****     interrupt, or negative to specify an internal (core) interrupt.
1028:D:\workspace\console800480\system\core_cm3.h **** 
1029:D:\workspace\console800480\system\core_cm3.h ****     The returned priority value is automatically aligned to the implemented
1030:D:\workspace\console800480\system\core_cm3.h ****     priority bits of the microcontroller.
1031:D:\workspace\console800480\system\core_cm3.h **** 
1032:D:\workspace\console800480\system\core_cm3.h ****     \param [in]   IRQn  Number of the interrupt for get priority
1033:D:\workspace\console800480\system\core_cm3.h ****     \return             Interrupt Priority
1034:D:\workspace\console800480\system\core_cm3.h ****  */
1035:D:\workspace\console800480\system\core_cm3.h **** static __INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
1036:D:\workspace\console800480\system\core_cm3.h **** {
1037:D:\workspace\console800480\system\core_cm3.h **** 
1038:D:\workspace\console800480\system\core_cm3.h ****   if(IRQn < 0) {
1039:D:\workspace\console800480\system\core_cm3.h ****     return((uint32_t)(SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] >> (8 - __NVIC_PRIO_BITS)));  } /* get p
1040:D:\workspace\console800480\system\core_cm3.h ****   else {
1041:D:\workspace\console800480\system\core_cm3.h ****     return((uint32_t)(NVIC->IP[(uint32_t)(IRQn)]           >> (8 - __NVIC_PRIO_BITS)));  } /* get p
1042:D:\workspace\console800480\system\core_cm3.h **** }
1043:D:\workspace\console800480\system\core_cm3.h **** 
1044:D:\workspace\console800480\system\core_cm3.h **** 
1045:D:\workspace\console800480\system\core_cm3.h **** /** \brief  Encode Priority
1046:D:\workspace\console800480\system\core_cm3.h **** 
1047:D:\workspace\console800480\system\core_cm3.h ****     This function encodes the priority for an interrupt with the given priority group,
1048:D:\workspace\console800480\system\core_cm3.h ****     preemptive priority value and sub priority value.
1049:D:\workspace\console800480\system\core_cm3.h ****     In case of a conflict between priority grouping and available
1050:D:\workspace\console800480\system\core_cm3.h ****     priority bits (__NVIC_PRIO_BITS) the samllest possible priority group is set.
1051:D:\workspace\console800480\system\core_cm3.h **** 
1052:D:\workspace\console800480\system\core_cm3.h ****     The returned priority value can be used for NVIC_SetPriority(...) function
1053:D:\workspace\console800480\system\core_cm3.h **** 
1054:D:\workspace\console800480\system\core_cm3.h ****     \param [in]     PriorityGroup  Used priority group
1055:D:\workspace\console800480\system\core_cm3.h ****     \param [in]   PreemptPriority  Preemptive priority value (starting from 0)
1056:D:\workspace\console800480\system\core_cm3.h ****     \param [in]       SubPriority  Sub priority value (starting from 0)
1057:D:\workspace\console800480\system\core_cm3.h ****     \return                        Encoded priority for the interrupt
1058:D:\workspace\console800480\system\core_cm3.h ****  */
1059:D:\workspace\console800480\system\core_cm3.h **** static __INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uin
1060:D:\workspace\console800480\system\core_cm3.h **** {
1061:D:\workspace\console800480\system\core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used        
1062:D:\workspace\console800480\system\core_cm3.h ****   uint32_t PreemptPriorityBits;
1063:D:\workspace\console800480\system\core_cm3.h ****   uint32_t SubPriorityBits;
1064:D:\workspace\console800480\system\core_cm3.h **** 
1065:D:\workspace\console800480\system\core_cm3.h ****   PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - Priori
1066:D:\workspace\console800480\system\core_cm3.h ****   SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __
1067:D:\workspace\console800480\system\core_cm3.h **** 
1068:D:\workspace\console800480\system\core_cm3.h ****   return (
1069:D:\workspace\console800480\system\core_cm3.h ****            ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
1070:D:\workspace\console800480\system\core_cm3.h ****            ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
1071:D:\workspace\console800480\system\core_cm3.h ****          );
1072:D:\workspace\console800480\system\core_cm3.h **** }
1073:D:\workspace\console800480\system\core_cm3.h **** 
1074:D:\workspace\console800480\system\core_cm3.h **** 
1075:D:\workspace\console800480\system\core_cm3.h **** /** \brief  Decode Priority
1076:D:\workspace\console800480\system\core_cm3.h **** 
1077:D:\workspace\console800480\system\core_cm3.h ****     This function decodes an interrupt priority value with the given priority group to
1078:D:\workspace\console800480\system\core_cm3.h ****     preemptive priority value and sub priority value.
1079:D:\workspace\console800480\system\core_cm3.h ****     In case of a conflict between priority grouping and available
1080:D:\workspace\console800480\system\core_cm3.h ****     priority bits (__NVIC_PRIO_BITS) the samllest possible priority group is set.
1081:D:\workspace\console800480\system\core_cm3.h **** 
1082:D:\workspace\console800480\system\core_cm3.h ****     The priority value can be retrieved with NVIC_GetPriority(...) function
1083:D:\workspace\console800480\system\core_cm3.h **** 
1084:D:\workspace\console800480\system\core_cm3.h ****     \param [in]         Priority   Priority value
1085:D:\workspace\console800480\system\core_cm3.h ****     \param [in]     PriorityGroup  Used priority group
1086:D:\workspace\console800480\system\core_cm3.h ****     \param [out] pPreemptPriority  Preemptive priority value (starting from 0)
1087:D:\workspace\console800480\system\core_cm3.h ****     \param [out]     pSubPriority  Sub priority value (starting from 0)
1088:D:\workspace\console800480\system\core_cm3.h ****  */
1089:D:\workspace\console800480\system\core_cm3.h **** static __INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* pPre
1090:D:\workspace\console800480\system\core_cm3.h **** {
1091:D:\workspace\console800480\system\core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used        
1092:D:\workspace\console800480\system\core_cm3.h ****   uint32_t PreemptPriorityBits;
1093:D:\workspace\console800480\system\core_cm3.h ****   uint32_t SubPriorityBits;
1094:D:\workspace\console800480\system\core_cm3.h **** 
1095:D:\workspace\console800480\system\core_cm3.h ****   PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - Priori
1096:D:\workspace\console800480\system\core_cm3.h ****   SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __
1097:D:\workspace\console800480\system\core_cm3.h **** 
1098:D:\workspace\console800480\system\core_cm3.h ****   *pPreemptPriority = (Priority >> SubPriorityBits) & ((1 << (PreemptPriorityBits)) - 1);
1099:D:\workspace\console800480\system\core_cm3.h ****   *pSubPriority     = (Priority                   ) & ((1 << (SubPriorityBits    )) - 1);
1100:D:\workspace\console800480\system\core_cm3.h **** }
1101:D:\workspace\console800480\system\core_cm3.h **** 
1102:D:\workspace\console800480\system\core_cm3.h **** 
1103:D:\workspace\console800480\system\core_cm3.h **** /** \brief  System Reset
1104:D:\workspace\console800480\system\core_cm3.h **** 
1105:D:\workspace\console800480\system\core_cm3.h ****     This function initiate a system reset request to reset the MCU.
1106:D:\workspace\console800480\system\core_cm3.h ****  */
1107:D:\workspace\console800480\system\core_cm3.h **** static __INLINE void NVIC_SystemReset(void)
1108:D:\workspace\console800480\system\core_cm3.h **** {
1109:D:\workspace\console800480\system\core_cm3.h ****   __DSB();                                                     /* Ensure all outstanding memory acc
1110:D:\workspace\console800480\system\core_cm3.h ****                                                                   buffered write are completed befo
1111:D:\workspace\console800480\system\core_cm3.h ****   SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
1112:D:\workspace\console800480\system\core_cm3.h ****                  (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
1113:D:\workspace\console800480\system\core_cm3.h ****                  SCB_AIRCR_SYSRESETREQ_Msk);                   /* Keep priority group unchanged */
1114:D:\workspace\console800480\system\core_cm3.h ****   __DSB();                                                     /* Ensure completion of memory acces
1115:D:\workspace\console800480\system\core_cm3.h ****   while(1);                                                    /* wait until reset */
1116:D:\workspace\console800480\system\core_cm3.h **** }
1117:D:\workspace\console800480\system\core_cm3.h **** 
1118:D:\workspace\console800480\system\core_cm3.h **** /*@} end of CMSIS_Core_NVICFunctions */
1119:D:\workspace\console800480\system\core_cm3.h **** 
1120:D:\workspace\console800480\system\core_cm3.h **** 
1121:D:\workspace\console800480\system\core_cm3.h **** 
1122:D:\workspace\console800480\system\core_cm3.h **** /* ##################################    SysTick function  ########################################
1123:D:\workspace\console800480\system\core_cm3.h **** /** \ingroup  CMSIS_Core_FunctionInterface
1124:D:\workspace\console800480\system\core_cm3.h ****     \defgroup CMSIS_Core_SysTickFunctions CMSIS Core SysTick Functions
1125:D:\workspace\console800480\system\core_cm3.h ****   @{
1126:D:\workspace\console800480\system\core_cm3.h ****  */
1127:D:\workspace\console800480\system\core_cm3.h **** 
1128:D:\workspace\console800480\system\core_cm3.h **** #if (__Vendor_SysTickConfig == 0)
1129:D:\workspace\console800480\system\core_cm3.h **** 
1130:D:\workspace\console800480\system\core_cm3.h **** /** \brief  System Tick Configuration
1131:D:\workspace\console800480\system\core_cm3.h **** 
1132:D:\workspace\console800480\system\core_cm3.h ****     This function initialises the system tick timer and its interrupt and start the system tick tim
1133:D:\workspace\console800480\system\core_cm3.h ****     Counter is in free running mode to generate periodical interrupts.
1134:D:\workspace\console800480\system\core_cm3.h **** 
1135:D:\workspace\console800480\system\core_cm3.h ****     \param [in]  ticks  Number of ticks between two interrupts
1136:D:\workspace\console800480\system\core_cm3.h ****     \return          0  Function succeeded
1137:D:\workspace\console800480\system\core_cm3.h ****     \return          1  Function failed
1138:D:\workspace\console800480\system\core_cm3.h ****  */
1139:D:\workspace\console800480\system\core_cm3.h **** static __INLINE uint32_t SysTick_Config(uint32_t ticks)
1140:D:\workspace\console800480\system\core_cm3.h **** {
  84              		.loc 1 1140 0
  85              		.cfi_startproc
  86              		@ args = 0, pretend = 0, frame = 8
  87              		@ frame_needed = 1, uses_anonymous_args = 0
  88 0058 80B5     		push	{r7, lr}
  89              		.cfi_def_cfa_offset 8
  90              		.cfi_offset 7, -8
  91              		.cfi_offset 14, -4
  92 005a 82B0     		sub	sp, sp, #8
  93              		.cfi_def_cfa_offset 16
  94 005c 00AF     		add	r7, sp, #0
  95              		.cfi_def_cfa_register 7
  96 005e 7860     		str	r0, [r7, #4]
1141:D:\workspace\console800480\system\core_cm3.h ****   if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
  97              		.loc 1 1141 0
  98 0060 7B68     		ldr	r3, [r7, #4]
  99 0062 B3F1807F 		cmp	r3, #16777216
 100 0066 01D3     		bcc	.L5
 101              		.loc 1 1141 0 is_stmt 0 discriminator 1
 102 0068 0123     		movs	r3, #1
 103 006a 1AE0     		b	.L6
 104              	.L5:
1142:D:\workspace\console800480\system\core_cm3.h **** 
1143:D:\workspace\console800480\system\core_cm3.h ****   SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 105              		.loc 1 1143 0 is_stmt 1
 106 006c 4EF21003 		movw	r3, #57360
 107 0070 CEF20003 		movt	r3, 57344
 108 0074 7A68     		ldr	r2, [r7, #4]
 109 0076 22F07F42 		bic	r2, r2, #-16777216
 110 007a 013A     		subs	r2, r2, #1
 111 007c 5A60     		str	r2, [r3, #4]
1144:D:\workspace\console800480\system\core_cm3.h ****   NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System
 112              		.loc 1 1144 0
 113 007e 4FF0FF30 		mov	r0, #-1
 114 0082 0F21     		movs	r1, #15
 115 0084 FFF7BCFF 		bl	NVIC_SetPriority
1145:D:\workspace\console800480\system\core_cm3.h ****   SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 116              		.loc 1 1145 0
 117 0088 4EF21003 		movw	r3, #57360
 118 008c CEF20003 		movt	r3, 57344
 119 0090 0022     		movs	r2, #0
 120 0092 9A60     		str	r2, [r3, #8]
1146:D:\workspace\console800480\system\core_cm3.h ****   SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 121              		.loc 1 1146 0
 122 0094 4EF21003 		movw	r3, #57360
 123 0098 CEF20003 		movt	r3, 57344
 124 009c 0722     		movs	r2, #7
 125 009e 1A60     		str	r2, [r3]
1147:D:\workspace\console800480\system\core_cm3.h ****                    SysTick_CTRL_TICKINT_Msk   |
1148:D:\workspace\console800480\system\core_cm3.h ****                    SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Ti
1149:D:\workspace\console800480\system\core_cm3.h ****   return (0);                                                  /* Function successful */
 126              		.loc 1 1149 0
 127 00a0 0023     		movs	r3, #0
 128              	.L6:
1150:D:\workspace\console800480\system\core_cm3.h **** }
 129              		.loc 1 1150 0
 130 00a2 1846     		mov	r0, r3
 131 00a4 0837     		adds	r7, r7, #8
 132 00a6 BD46     		mov	sp, r7
 133              		@ sp needed
 134 00a8 80BD     		pop	{r7, pc}
 135              		.cfi_endproc
 136              	.LFE51:
 138              		.global	APBAHBPrescTable
 139              		.section	.rodata
 140              		.align	2
 143              	APBAHBPrescTable:
 144 0000 00       		.byte	0
 145 0001 00       		.byte	0
 146 0002 00       		.byte	0
 147 0003 00       		.byte	0
 148 0004 01       		.byte	1
 149 0005 02       		.byte	2
 150 0006 03       		.byte	3
 151 0007 04       		.byte	4
 152 0008 01       		.byte	1
 153 0009 02       		.byte	2
 154 000a 03       		.byte	3
 155 000b 04       		.byte	4
 156 000c 06       		.byte	6
 157 000d 07       		.byte	7
 158 000e 08       		.byte	8
 159 000f 09       		.byte	9
 160              		.text
 161 00aa 00BF     		.align	2
 162              		.global	HAL_RCC_DeInit
 163              		.thumb
 164              		.thumb_func
 166              	HAL_RCC_DeInit:
 167              	.LFB55:
 168              		.file 2 "../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c"
   1:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** /**
   2:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   ******************************************************************************
   3:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @file    stm32f2xx_hal_rcc.c
   4:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @author  MCD Application Team
   5:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @version V1.0.1
   6:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @date    25-March-2014
   7:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @brief   RCC HAL module driver.
   8:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *          This file provides firmware functions to manage the following 
   9:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *          functionalities of the Reset and Clock Control (RCC) peripheral:
  10:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *           + Initialization and de-initialization functions
  11:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *           + Peripheral Control functions
  12:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *       
  13:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   @verbatim                
  14:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   ==============================================================================
  15:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****                       ##### RCC specific features #####
  16:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   ==============================================================================
  17:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     [..]  
  18:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       After reset the device is running from Internal High Speed oscillator 
  19:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       (HSI 16MHz) with Flash 0 wait state, Flash prefetch buffer, D-Cache 
  20:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       and I-Cache are disabled, and all peripherals are off except internal
  21:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       SRAM, Flash and JTAG.
  22:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       (+) There is no prescaler on High speed (AHB) and Low speed (APB) busses;
  23:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           all peripherals mapped on these busses are running at HSI speed.
  24:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       (+) The clock for all peripherals is switched off, except the SRAM and FLASH.
  25:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       (+) All GPIOs are in input floating state, except the JTAG pins which
  26:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           are assigned to be used for debug purpose.
  27:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     
  28:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     [..]          
  29:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       Once the device started from reset, the user application has to:        
  30:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       (+) Configure the clock source to be used to drive the System clock
  31:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           (if the application needs higher frequency/performance)
  32:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       (+) Configure the System clock frequency and Flash settings  
  33:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       (+) Configure the AHB and APB busses prescalers
  34:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       (+) Enable the clock for the peripheral(s) to be used
  35:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       (+) Configure the clock source(s) for peripherals which clocks are not
  36:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           derived from the System clock (I2S, RTC, ADC, USB OTG FS/SDIO/RNG)
  37:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
  38:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   @endverbatim
  39:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   ******************************************************************************
  40:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @attention
  41:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *
  42:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * <h2><center>&copy; COPYRIGHT(c) 2014 STMicroelectronics</center></h2>
  43:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *
  44:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * Redistribution and use in source and binary forms, with or without modification,
  45:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * are permitted provided that the following conditions are met:
  46:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  47:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *      this list of conditions and the following disclaimer.
  48:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  49:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *      this list of conditions and the following disclaimer in the documentation
  50:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *      and/or other materials provided with the distribution.
  51:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  52:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *      may be used to endorse or promote products derived from this software
  53:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *      without specific prior written permission.
  54:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *
  55:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  56:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  57:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  58:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  59:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  60:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  61:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  62:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  63:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  64:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  65:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *
  66:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   ******************************************************************************
  67:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   */ 
  68:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
  69:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** /* Includes ------------------------------------------------------------------*/
  70:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** #include "stm32f2xx_hal.h"
  71:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
  72:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** /** @addtogroup STM32F2xx_HAL_Driver
  73:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @{
  74:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   */
  75:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
  76:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** /** @defgroup RCC 
  77:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @brief RCC HAL module driver
  78:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @{
  79:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   */
  80:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
  81:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** #ifdef HAL_RCC_MODULE_ENABLED
  82:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
  83:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** /* Private typedef -----------------------------------------------------------*/
  84:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** /* Private define ------------------------------------------------------------*/
  85:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** #define HSE_TIMEOUT_VALUE          HSE_STARTUP_TIMEOUT
  86:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** #define HSI_TIMEOUT_VALUE          ((uint32_t)100)  /* 100 ms */
  87:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** #define LSI_TIMEOUT_VALUE          ((uint32_t)100)  /* 100 ms */
  88:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** #define PLL_TIMEOUT_VALUE          ((uint32_t)100)  /* 100 ms */
  89:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** #define CLOCKSWITCH_TIMEOUT_VALUE  ((uint32_t)5000) /* 5 s    */
  90:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
  91:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** /* Private macro -------------------------------------------------------------*/
  92:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** #define __MCO1_CLK_ENABLE()   __GPIOA_CLK_ENABLE()
  93:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** #define MCO1_GPIO_PORT        GPIOA
  94:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** #define MCO1_PIN              GPIO_PIN_8 
  95:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
  96:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** #define __MCO2_CLK_ENABLE()   __GPIOC_CLK_ENABLE()
  97:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** #define MCO2_GPIO_PORT         GPIOC
  98:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** #define MCO2_PIN               GPIO_PIN_9
  99:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 100:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** /* Private variables ---------------------------------------------------------*/
 101:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** const uint8_t APBAHBPrescTable[16] = {0, 0, 0, 0, 1, 2, 3, 4, 1, 2, 3, 4, 6, 7, 8, 9};
 102:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 103:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** /* Private function prototypes -----------------------------------------------*/
 104:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** /* Private functions ---------------------------------------------------------*/
 105:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 106:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** /** @defgroup RCC_Private_Functions
 107:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @{
 108:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   */
 109:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 110:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** /** @defgroup RCC_Group1 Initialization and de-initialization functions 
 111:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****  *  @brief    Initialization and Configuration functions 
 112:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****  *
 113:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** @verbatim    
 114:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****  ===============================================================================
 115:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****            ##### Initialization and de-initialization functions #####
 116:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****  ===============================================================================
 117:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     [..]
 118:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       This section provide functions allowing to configure the internal/external oscillators
 119:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       (HSE, HSI, LSE, LSI, PLL, CSS and MCO) and the System busses clocks (SYSCLK, AHB, APB1 
 120:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****        and APB2).
 121:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 122:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     [..] Internal/external clock and PLL configuration
 123:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****          (#) HSI (high-speed internal), 16 MHz factory-trimmed RC used directly or through
 124:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****              the PLL as System clock source.
 125:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 126:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****          (#) LSI (low-speed internal), 32 KHz low consumption RC used as IWDG and/or RTC
 127:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****              clock source.
 128:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 129:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****          (#) HSE (high-speed external), 4 to 26 MHz crystal oscillator used directly or
 130:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****              through the PLL as System clock source. Can be used also as RTC clock source.
 131:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 132:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****          (#) LSE (low-speed external), 32 KHz oscillator used as RTC clock source.   
 133:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 134:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****          (#) PLL (clocked by HSI or HSE), featuring two different output clocks:
 135:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****            (++) The first output is used to generate the high speed system clock (up to 120 MHz)
 136:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****            (++) The second output is used to generate the clock for the USB OTG FS (48 MHz),
 137:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****                 the random analog generator (<=48 MHz) and the SDIO (<= 48 MHz).
 138:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 139:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****          (#) CSS (Clock security system), once enable using the macro __HAL_RCC_CSS_ENABLE()
 140:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****              and if a HSE clock failure occurs(HSE used directly or through PLL as System 
 141:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****              clock source), the System clockis automatically switched to HSI and an interrupt
 142:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****              is generated if enabled. The interrupt is linked to the Cortex-M3 NMI 
 143:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****              (Non-Maskable Interrupt) exception vector.   
 144:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 145:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****          (#) MCO1 (microcontroller clock output), used to output HSI, LSE, HSE or PLL
 146:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****              clock (through a configurable prescaler) on PA8 pin.
 147:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 148:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****          (#) MCO2 (microcontroller clock output), used to output HSE, PLL, SYSCLK or PLLI2S
 149:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****              clock (through a configurable prescaler) on PC9 pin.
 150:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 151:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     [..] System, AHB and APB busses clocks configuration  
 152:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****          (#) Several clock sources can be used to drive the System clock (SYSCLK): HSI,
 153:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****              HSE and PLL.
 154:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****              The AHB clock (HCLK) is derived from System clock through configurable 
 155:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****              prescaler and used to clock the CPU, memory and peripherals mapped 
 156:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****              on AHB bus (DMA, GPIO...). APB1 (PCLK1) and APB2 (PCLK2) clocks are derived 
 157:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****              from AHB clock through configurable prescalers and used to clock 
 158:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****              the peripherals mapped on these busses. You can use 
 159:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****              "HAL_RCC_GetSysClockFreq()" function to retrieve the frequencies of these clocks.  
 160:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 161:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****          -@- All the peripheral clocks are derived from the System clock (SYSCLK) except:
 162:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****            (+@) I2S: the I2S clock can be derived either from a specific PLL (PLLI2S) or
 163:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****                 from an external clock mapped on the I2S_CKIN pin. 
 164:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****                 You have to use __HAL_RCC_PLLI2S_CONFIG() macro to configure this clock.
 165:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****            (+@) RTC: the RTC clock can be derived either from the LSI, LSE or HSE clock
 166:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****                 divided by 2 to 31. You have to use __HAL_RCC_RTC_CONFIG() and __HAL_RCC_RTC_ENABLE
 167:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****                 macros to configure this clock. 
 168:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****            (+@) USB OTG FS, SDIO and RTC: USB OTG FS require a frequency equal to 48 MHz
 169:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****                 to work correctly, while the SDIO require a frequency equal or lower than
 170:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****                 to 48. This clock is derived of the main PLL through PLLQ divider.
 171:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****            (+@) IWDG clock which is always the LSI clock.
 172:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****        
 173:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****          (#) For the stm32f2xx devices, the maximum
 174:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****              frequency of the SYSCLK and HCLK is 120 MHz, PCLK2 60 MHz and PCLK1 30 MHz. 
 175:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****              Depending on the device voltage range, the maximum frequency should
 176:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****              be adapted accordingly:
 177:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****  +-------------------------------------------------------------------------------------+     
 178:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
 179:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****  |               |---------------------------------------------------------------------|     
 180:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
 181:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
 182:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|           
 183:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 18   |0 < HCLK <= 16   |
 184:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|   
 185:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****  |1WS(2CPU cycle)|30 < HCLK <= 60 |24 < HCLK <= 48 |18 < HCLK <= 36  |16 < HCLK <= 32  | 
 186:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|   
 187:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****  |2WS(3CPU cycle)|60 < HCLK <= 90 |48 < HCLK <= 72 |36 < HCLK <= 54  |32 < HCLK <= 48  |
 188:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 189:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****  |3WS(4CPU cycle)|90 < HCLK <= 120|72 < HCLK <= 96 |54 < HCLK <= 72  |48 < HCLK <= 64  |
 190:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 191:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****  |4WS(5CPU cycle)|      NA        |96 < HCLK <= 120|72 < HCLK <= 90  |64 < HCLK <= 80  |
 192:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 193:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****  |5WS(6CPU cycle)|      NA        |      NA        |90 < HCLK <= 108 |80 < HCLK <= 96  | 
 194:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 195:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****  |6WS(7CPU cycle)|      NA        |      NA        |108 < HCLK <= 120|96 < HCLK <= 112 | 
 196:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 197:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****  |7WS(8CPU cycle)|      NA        |      NA        |       NA        |112 < HCLK <= 120| 
 198:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****  +-------------------------------------------------------------------------------------+    
 199:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** @endverbatim
 200:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @{
 201:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   */
 202:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 203:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** /**
 204:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @brief  Resets the RCC clock configuration to the default reset state.
 205:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @note   The default reset state of the clock configuration is given below:
 206:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *            - HSI ON and used as system clock source
 207:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *            - HSE, PLL and PLLI2S OFF
 208:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *            - AHB, APB1 and APB2 prescaler set to 1.
 209:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *            - CSS, MCO1 and MCO2 OFF
 210:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *            - All interrupts disabled
 211:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @note   This function doesn't modify the configuration of the
 212:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *            - Peripheral clocks  
 213:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *            - LSI, LSE and RTC clocks 
 214:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @param  None
 215:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @retval None
 216:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   */
 217:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** void HAL_RCC_DeInit(void)
 218:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** {
 169              		.loc 2 218 0
 170              		.cfi_startproc
 171              		@ args = 0, pretend = 0, frame = 0
 172              		@ frame_needed = 1, uses_anonymous_args = 0
 173              		@ link register save eliminated.
 174 00ac 80B4     		push	{r7}
 175              		.cfi_def_cfa_offset 4
 176              		.cfi_offset 7, -4
 177 00ae 00AF     		add	r7, sp, #0
 178              		.cfi_def_cfa_register 7
 219:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* Set HSION bit */
 220:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   SET_BIT(RCC->CR, RCC_CR_HSION | RCC_CR_HSITRIM_4); 
 179              		.loc 2 220 0
 180 00b0 4FF46053 		mov	r3, #14336
 181 00b4 C4F20203 		movt	r3, 16386
 182 00b8 4FF46052 		mov	r2, #14336
 183 00bc C4F20202 		movt	r2, 16386
 184 00c0 1268     		ldr	r2, [r2]
 185 00c2 42F08102 		orr	r2, r2, #129
 186 00c6 1A60     		str	r2, [r3]
 221:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   
 222:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* Reset CFGR register */
 223:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   CLEAR_REG(RCC->CFGR);
 187              		.loc 2 223 0
 188 00c8 4FF46053 		mov	r3, #14336
 189 00cc C4F20203 		movt	r3, 16386
 190 00d0 0022     		movs	r2, #0
 191 00d2 9A60     		str	r2, [r3, #8]
 224:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   
 225:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* Reset HSEON, CSSON, PLLON, PLLI2S */
 226:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLLON| RCC_CR_PLLI2SON); 
 192              		.loc 2 226 0
 193 00d4 4FF46053 		mov	r3, #14336
 194 00d8 C4F20203 		movt	r3, 16386
 195 00dc 4FF46052 		mov	r2, #14336
 196 00e0 C4F20202 		movt	r2, 16386
 197 00e4 1268     		ldr	r2, [r2]
 198 00e6 22F0A162 		bic	r2, r2, #84410368
 199 00ea 22F48032 		bic	r2, r2, #65536
 200 00ee 1A60     		str	r2, [r3]
 227:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   
 228:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* Reset PLLCFGR register */
 229:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   CLEAR_REG(RCC->PLLCFGR);
 201              		.loc 2 229 0
 202 00f0 4FF46053 		mov	r3, #14336
 203 00f4 C4F20203 		movt	r3, 16386
 204 00f8 0022     		movs	r2, #0
 205 00fa 5A60     		str	r2, [r3, #4]
 230:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_
 206              		.loc 2 230 0
 207 00fc 4FF46052 		mov	r2, #14336
 208 0100 C4F20202 		movt	r2, 16386
 209 0104 4FF46053 		mov	r3, #14336
 210 0108 C4F20203 		movt	r3, 16386
 211 010c 5968     		ldr	r1, [r3, #4]
 212 010e 43F21003 		movw	r3, #12304
 213 0112 C0F20043 		movt	r3, 1024
 214 0116 0B43     		orrs	r3, r3, r1
 215 0118 5360     		str	r3, [r2, #4]
 231:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   
 232:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* Reset PLLI2SCFGR register */
 233:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   CLEAR_REG(RCC->PLLI2SCFGR);
 216              		.loc 2 233 0
 217 011a 4FF46053 		mov	r3, #14336
 218 011e C4F20203 		movt	r3, 16386
 219 0122 0022     		movs	r2, #0
 220 0124 C3F88420 		str	r2, [r3, #132]
 234:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   SET_BIT(RCC->PLLI2SCFGR,  RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PL
 221              		.loc 2 234 0
 222 0128 4FF46053 		mov	r3, #14336
 223 012c C4F20203 		movt	r3, 16386
 224 0130 4FF46052 		mov	r2, #14336
 225 0134 C4F20202 		movt	r2, 16386
 226 0138 D2F88420 		ldr	r2, [r2, #132]
 227 013c 42F00052 		orr	r2, r2, #536870912
 228 0140 42F44052 		orr	r2, r2, #12288
 229 0144 C3F88420 		str	r2, [r3, #132]
 235:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   
 236:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* Reset HSEBYP bit */
 237:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 230              		.loc 2 237 0
 231 0148 4FF46053 		mov	r3, #14336
 232 014c C4F20203 		movt	r3, 16386
 233 0150 4FF46052 		mov	r2, #14336
 234 0154 C4F20202 		movt	r2, 16386
 235 0158 1268     		ldr	r2, [r2]
 236 015a 22F48022 		bic	r2, r2, #262144
 237 015e 1A60     		str	r2, [r3]
 238:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   
 239:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* Disable all interrupts */
 240:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   CLEAR_REG(RCC->CIR); 
 238              		.loc 2 240 0
 239 0160 4FF46053 		mov	r3, #14336
 240 0164 C4F20203 		movt	r3, 16386
 241 0168 0022     		movs	r2, #0
 242 016a DA60     		str	r2, [r3, #12]
 241:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** }
 243              		.loc 2 241 0
 244 016c BD46     		mov	sp, r7
 245              		@ sp needed
 246 016e 5DF8047B 		ldr	r7, [sp], #4
 247 0172 7047     		bx	lr
 248              		.cfi_endproc
 249              	.LFE55:
 251              		.align	2
 252              		.global	HAL_RCC_OscConfig
 253              		.thumb
 254              		.thumb_func
 256              	HAL_RCC_OscConfig:
 257              	.LFB56:
 242:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 243:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** /**
 244:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @brief  Initializes the RCC Oscillators according to the specified parameters in the
 245:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *         RCC_OscInitTypeDef.
 246:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @param  RCC_OscInitStruct: pointer to an RCC_OscInitTypeDef structure that
 247:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *         contains the configuration information for the RCC Oscillators.
 248:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @note   The PLL is not disabled when used as system clock.
 249:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @retval HAL status
 250:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   */
 251:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
 252:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** {
 258              		.loc 2 252 0
 259              		.cfi_startproc
 260              		@ args = 0, pretend = 0, frame = 80
 261              		@ frame_needed = 1, uses_anonymous_args = 0
 262 0174 80B5     		push	{r7, lr}
 263              		.cfi_def_cfa_offset 8
 264              		.cfi_offset 7, -8
 265              		.cfi_offset 14, -4
 266 0176 94B0     		sub	sp, sp, #80
 267              		.cfi_def_cfa_offset 88
 268 0178 00AF     		add	r7, sp, #0
 269              		.cfi_def_cfa_register 7
 270 017a 7860     		str	r0, [r7, #4]
 253:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 254:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   uint32_t timeout = 0;   
 271              		.loc 2 254 0
 272 017c 0023     		movs	r3, #0
 273 017e FB64     		str	r3, [r7, #76]
 255:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****  
 256:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* Check the parameters */
 257:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 258:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /*------------------------------- HSE Configuration ------------------------*/ 
 259:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 274              		.loc 2 259 0
 275 0180 7B68     		ldr	r3, [r7, #4]
 276 0182 1B68     		ldr	r3, [r3]
 277 0184 03F00103 		and	r3, r3, #1
 278 0188 002B     		cmp	r3, #0
 279 018a 00F08980 		beq	.L9
 260:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   {
 261:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     /* Check the parameters */
 262:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 263:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not dis
 264:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RC
 280              		.loc 2 264 0
 281 018e 4FF46053 		mov	r3, #14336
 282 0192 C4F20203 		movt	r3, 16386
 283 0196 9B68     		ldr	r3, [r3, #8]
 284 0198 03F00C03 		and	r3, r3, #12
 285 019c 042B     		cmp	r3, #4
 286 019e 11D0     		beq	.L10
 287              		.loc 2 264 0 is_stmt 0 discriminator 1
 288 01a0 4FF46053 		mov	r3, #14336
 289 01a4 C4F20203 		movt	r3, 16386
 290 01a8 9B68     		ldr	r3, [r3, #8]
 291 01aa 03F00C03 		and	r3, r3, #12
 292 01ae 082B     		cmp	r3, #8
 293 01b0 18D1     		bne	.L11
 294 01b2 4FF46053 		mov	r3, #14336
 295 01b6 C4F20203 		movt	r3, 16386
 296 01ba 5B68     		ldr	r3, [r3, #4]
 297 01bc 03F48003 		and	r3, r3, #4194304
 298 01c0 002B     		cmp	r3, #0
 299 01c2 0FD0     		beq	.L11
 300              	.L10:
 265:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     {
 266:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_
 301              		.loc 2 266 0 is_stmt 1
 302 01c4 4FF46053 		mov	r3, #14336
 303 01c8 C4F20203 		movt	r3, 16386
 304 01cc 1B68     		ldr	r3, [r3]
 305 01ce 03F40033 		and	r3, r3, #131072
 306 01d2 002B     		cmp	r3, #0
 307 01d4 05D0     		beq	.L12
 308              		.loc 2 266 0 is_stmt 0 discriminator 1
 309 01d6 7B68     		ldr	r3, [r7, #4]
 310 01d8 5B68     		ldr	r3, [r3, #4]
 311 01da 012B     		cmp	r3, #1
 312 01dc 01D0     		beq	.L12
 267:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       {
 268:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         return HAL_ERROR;
 313              		.loc 2 268 0 is_stmt 1
 314 01de 0123     		movs	r3, #1
 315 01e0 7CE2     		b	.L13
 316              	.L12:
 266:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       {
 317              		.loc 2 266 0 discriminator 2
 318 01e2 5DE0     		b	.L9
 319              	.L11:
 269:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       }
 270:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     }
 271:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     else
 272:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     {
 273:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
 274:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 320              		.loc 2 274 0
 321 01e4 43F60203 		movw	r3, #14338
 322 01e8 C4F20203 		movt	r3, 16386
 323 01ec 0022     		movs	r2, #0
 324 01ee 1A70     		strb	r2, [r3]
 275:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       
 276:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       /* Get timeout */
 277:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       timeout = HAL_GetTick() + HSE_TIMEOUT_VALUE;
 325              		.loc 2 277 0
 326 01f0 FFF7FEFF 		bl	HAL_GetTick
 327 01f4 0346     		mov	r3, r0
 328 01f6 03F59C53 		add	r3, r3, #4992
 329 01fa 0833     		adds	r3, r3, #8
 330 01fc FB64     		str	r3, [r7, #76]
 278:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       
 279:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       /* Wait till HSE is disabled */  
 280:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 331              		.loc 2 280 0
 332 01fe 07E0     		b	.L14
 333              	.L15:
 281:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       {
 282:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         if(HAL_GetTick() >= timeout)
 334              		.loc 2 282 0
 335 0200 FFF7FEFF 		bl	HAL_GetTick
 336 0204 0246     		mov	r2, r0
 337 0206 FB6C     		ldr	r3, [r7, #76]
 338 0208 9A42     		cmp	r2, r3
 339 020a 01D3     		bcc	.L14
 283:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         {
 284:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           return HAL_TIMEOUT;
 340              		.loc 2 284 0
 341 020c 0323     		movs	r3, #3
 342 020e 65E2     		b	.L13
 343              	.L14:
 280:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       {
 344              		.loc 2 280 0 discriminator 1
 345 0210 4FF46053 		mov	r3, #14336
 346 0214 C4F20203 		movt	r3, 16386
 347 0218 1B68     		ldr	r3, [r3]
 348 021a 03F40033 		and	r3, r3, #131072
 349 021e 002B     		cmp	r3, #0
 350 0220 EED1     		bne	.L15
 285:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         }      
 286:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       }
 287:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       
 288:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       /* Set the new HSE configuration ---------------------------------------*/
 289:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 351              		.loc 2 289 0
 352 0222 43F60203 		movw	r3, #14338
 353 0226 C4F20203 		movt	r3, 16386
 354 022a 7A68     		ldr	r2, [r7, #4]
 355 022c 5268     		ldr	r2, [r2, #4]
 356 022e D2B2     		uxtb	r2, r2
 357 0230 1A70     		strb	r2, [r3]
 290:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       
 291:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       /* Check the HSE State */
 292:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       if((RCC_OscInitStruct->HSEState) == RCC_HSE_ON)
 358              		.loc 2 292 0
 359 0232 7B68     		ldr	r3, [r7, #4]
 360 0234 5B68     		ldr	r3, [r3, #4]
 361 0236 012B     		cmp	r3, #1
 362 0238 19D1     		bne	.L16
 293:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       {
 294:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         /* Get timeout */
 295:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         timeout = HAL_GetTick() + HSE_TIMEOUT_VALUE;
 363              		.loc 2 295 0
 364 023a FFF7FEFF 		bl	HAL_GetTick
 365 023e 0346     		mov	r3, r0
 366 0240 03F59C53 		add	r3, r3, #4992
 367 0244 0833     		adds	r3, r3, #8
 368 0246 FB64     		str	r3, [r7, #76]
 296:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       
 297:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         /* Wait till HSE is ready */  
 298:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 369              		.loc 2 298 0
 370 0248 07E0     		b	.L17
 371              	.L18:
 299:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         {
 300:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           if(HAL_GetTick() >= timeout)
 372              		.loc 2 300 0
 373 024a FFF7FEFF 		bl	HAL_GetTick
 374 024e 0246     		mov	r2, r0
 375 0250 FB6C     		ldr	r3, [r7, #76]
 376 0252 9A42     		cmp	r2, r3
 377 0254 01D3     		bcc	.L17
 301:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           {
 302:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****             return HAL_TIMEOUT;
 378              		.loc 2 302 0
 379 0256 0323     		movs	r3, #3
 380 0258 40E2     		b	.L13
 381              	.L17:
 298:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         {
 382              		.loc 2 298 0 discriminator 1
 383 025a 4FF46053 		mov	r3, #14336
 384 025e C4F20203 		movt	r3, 16386
 385 0262 1B68     		ldr	r3, [r3]
 386 0264 03F40033 		and	r3, r3, #131072
 387 0268 002B     		cmp	r3, #0
 388 026a EED0     		beq	.L18
 389 026c 18E0     		b	.L9
 390              	.L16:
 303:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           }
 304:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         }
 305:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       }
 306:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       else
 307:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       {
 308:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         /* Get timeout */
 309:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         timeout = HAL_GetTick() + HSE_TIMEOUT_VALUE;
 391              		.loc 2 309 0
 392 026e FFF7FEFF 		bl	HAL_GetTick
 393 0272 0346     		mov	r3, r0
 394 0274 03F59C53 		add	r3, r3, #4992
 395 0278 0833     		adds	r3, r3, #8
 396 027a FB64     		str	r3, [r7, #76]
 310:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 311:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         /* Wait till HSE is bypassed or disabled */
 312:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 397              		.loc 2 312 0
 398 027c 07E0     		b	.L19
 399              	.L20:
 313:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         {
 314:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           if(HAL_GetTick() >= timeout)
 400              		.loc 2 314 0
 401 027e FFF7FEFF 		bl	HAL_GetTick
 402 0282 0246     		mov	r2, r0
 403 0284 FB6C     		ldr	r3, [r7, #76]
 404 0286 9A42     		cmp	r2, r3
 405 0288 01D3     		bcc	.L19
 315:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           {
 316:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****             return HAL_TIMEOUT;
 406              		.loc 2 316 0
 407 028a 0323     		movs	r3, #3
 408 028c 26E2     		b	.L13
 409              	.L19:
 312:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         {
 410              		.loc 2 312 0 discriminator 1
 411 028e 4FF46053 		mov	r3, #14336
 412 0292 C4F20203 		movt	r3, 16386
 413 0296 1B68     		ldr	r3, [r3]
 414 0298 03F40033 		and	r3, r3, #131072
 415 029c 002B     		cmp	r3, #0
 416 029e EED1     		bne	.L20
 417              	.L9:
 317:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           }
 318:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         }
 319:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       }
 320:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     }
 321:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   }
 322:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /*----------------------------- HSI Configuration --------------------------*/
 323:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 418              		.loc 2 323 0
 419 02a0 7B68     		ldr	r3, [r7, #4]
 420 02a2 1B68     		ldr	r3, [r3]
 421 02a4 03F00203 		and	r3, r3, #2
 422 02a8 002B     		cmp	r3, #0
 423 02aa 00F08880 		beq	.L21
 324:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   {
 325:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     /* Check the parameters */
 326:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 327:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 328:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     
 329:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     /* When the HSI is used as system clock it will not disabled */
 330:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RC
 424              		.loc 2 330 0
 425 02ae 4FF46053 		mov	r3, #14336
 426 02b2 C4F20203 		movt	r3, 16386
 427 02b6 9B68     		ldr	r3, [r3, #8]
 428 02b8 03F00C03 		and	r3, r3, #12
 429 02bc 002B     		cmp	r3, #0
 430 02be 11D0     		beq	.L22
 431              		.loc 2 330 0 is_stmt 0 discriminator 1
 432 02c0 4FF46053 		mov	r3, #14336
 433 02c4 C4F20203 		movt	r3, 16386
 434 02c8 9B68     		ldr	r3, [r3, #8]
 435 02ca 03F00C03 		and	r3, r3, #12
 436 02ce 082B     		cmp	r3, #8
 437 02d0 18D1     		bne	.L23
 438 02d2 4FF46053 		mov	r3, #14336
 439 02d6 C4F20203 		movt	r3, 16386
 440 02da 5B68     		ldr	r3, [r3, #4]
 441 02dc 03F48003 		and	r3, r3, #4194304
 442 02e0 002B     		cmp	r3, #0
 443 02e2 0FD1     		bne	.L23
 444              	.L22:
 331:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     {
 332:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_
 445              		.loc 2 332 0 is_stmt 1
 446 02e4 4FF46053 		mov	r3, #14336
 447 02e8 C4F20203 		movt	r3, 16386
 448 02ec 1B68     		ldr	r3, [r3]
 449 02ee 03F00203 		and	r3, r3, #2
 450 02f2 002B     		cmp	r3, #0
 451 02f4 05D0     		beq	.L24
 452              		.loc 2 332 0 is_stmt 0 discriminator 1
 453 02f6 7B68     		ldr	r3, [r7, #4]
 454 02f8 DB68     		ldr	r3, [r3, #12]
 455 02fa 012B     		cmp	r3, #1
 456 02fc 01D0     		beq	.L24
 333:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       {
 334:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         return HAL_ERROR;
 457              		.loc 2 334 0 is_stmt 1
 458 02fe 0123     		movs	r3, #1
 459 0300 ECE1     		b	.L13
 460              	.L24:
 332:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       {
 461              		.loc 2 332 0 discriminator 2
 462 0302 5CE0     		b	.L21
 463              	.L23:
 335:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       }
 336:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     }
 337:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     else
 338:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     {
 339:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       /* Check the HSI State */
 340:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 464              		.loc 2 340 0
 465 0304 7B68     		ldr	r3, [r7, #4]
 466 0306 DB68     		ldr	r3, [r3, #12]
 467 0308 002B     		cmp	r3, #0
 468 030a 3CD0     		beq	.L25
 341:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       {
 342:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         /* Enable the Internal High Speed oscillator (HSI). */
 343:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         __HAL_RCC_HSI_ENABLE();
 469              		.loc 2 343 0
 470 030c 0023     		movs	r3, #0
 471 030e C4F24723 		movt	r3, 16967
 472 0312 0122     		movs	r2, #1
 473 0314 1A60     		str	r2, [r3]
 344:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 345:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         /* Get timeout */
 346:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         timeout = HAL_GetTick() + HSI_TIMEOUT_VALUE;
 474              		.loc 2 346 0
 475 0316 FFF7FEFF 		bl	HAL_GetTick
 476 031a 0346     		mov	r3, r0
 477 031c 6433     		adds	r3, r3, #100
 478 031e FB64     		str	r3, [r7, #76]
 347:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 348:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         /* Wait till HSI is ready */  
 349:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 479              		.loc 2 349 0
 480 0320 07E0     		b	.L26
 481              	.L27:
 350:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         {
 351:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           if(HAL_GetTick() >= timeout)
 482              		.loc 2 351 0
 483 0322 FFF7FEFF 		bl	HAL_GetTick
 484 0326 0246     		mov	r2, r0
 485 0328 FB6C     		ldr	r3, [r7, #76]
 486 032a 9A42     		cmp	r2, r3
 487 032c 01D3     		bcc	.L26
 352:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           {
 353:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****             return HAL_TIMEOUT;
 488              		.loc 2 353 0
 489 032e 0323     		movs	r3, #3
 490 0330 D4E1     		b	.L13
 491              	.L26:
 349:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         {
 492              		.loc 2 349 0 discriminator 1
 493 0332 4FF46053 		mov	r3, #14336
 494 0336 C4F20203 		movt	r3, 16386
 495 033a 1B68     		ldr	r3, [r3]
 496 033c 03F00203 		and	r3, r3, #2
 497 0340 002B     		cmp	r3, #0
 498 0342 EED0     		beq	.L27
 354:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           }      
 355:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         } 
 356:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****                 
 357:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
 358:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 499              		.loc 2 358 0
 500 0344 4FF46053 		mov	r3, #14336
 501 0348 C4F20203 		movt	r3, 16386
 502 034c 4FF46052 		mov	r2, #14336
 503 0350 C4F20202 		movt	r2, 16386
 504 0354 1268     		ldr	r2, [r2]
 505 0356 22F0F801 		bic	r1, r2, #248
 506 035a 7A68     		ldr	r2, [r7, #4]
 507 035c 1069     		ldr	r0, [r2, #16]
 508 035e F822     		movs	r2, #248
 509 0360 BA64     		str	r2, [r7, #72]
 510              	.LBB62:
 511              	.LBB63:
 512              		.file 3 "D:\\workspace\\console800480\\system/core_cmInstr.h"
   1:D:\workspace\console800480\system\core_cmInstr.h **** /**************************************************************************//**
   2:D:\workspace\console800480\system\core_cmInstr.h ****  * @file     core_cmInstr.h
   3:D:\workspace\console800480\system\core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:D:\workspace\console800480\system\core_cmInstr.h ****  * @version  V2.10
   5:D:\workspace\console800480\system\core_cmInstr.h ****  * @date     19. July 2011
   6:D:\workspace\console800480\system\core_cmInstr.h ****  *
   7:D:\workspace\console800480\system\core_cmInstr.h ****  * @note
   8:D:\workspace\console800480\system\core_cmInstr.h ****  * Copyright (C) 2009-2011 ARM Limited. All rights reserved.
   9:D:\workspace\console800480\system\core_cmInstr.h ****  *
  10:D:\workspace\console800480\system\core_cmInstr.h ****  * @par
  11:D:\workspace\console800480\system\core_cmInstr.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:D:\workspace\console800480\system\core_cmInstr.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:D:\workspace\console800480\system\core_cmInstr.h ****  * within development tools that are supporting such ARM based processors. 
  14:D:\workspace\console800480\system\core_cmInstr.h ****  *
  15:D:\workspace\console800480\system\core_cmInstr.h ****  * @par
  16:D:\workspace\console800480\system\core_cmInstr.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:D:\workspace\console800480\system\core_cmInstr.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:D:\workspace\console800480\system\core_cmInstr.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:D:\workspace\console800480\system\core_cmInstr.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:D:\workspace\console800480\system\core_cmInstr.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:D:\workspace\console800480\system\core_cmInstr.h ****  *
  22:D:\workspace\console800480\system\core_cmInstr.h ****  ******************************************************************************/
  23:D:\workspace\console800480\system\core_cmInstr.h **** 
  24:D:\workspace\console800480\system\core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  25:D:\workspace\console800480\system\core_cmInstr.h **** #define __CORE_CMINSTR_H
  26:D:\workspace\console800480\system\core_cmInstr.h **** 
  27:D:\workspace\console800480\system\core_cmInstr.h **** 
  28:D:\workspace\console800480\system\core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  29:D:\workspace\console800480\system\core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  30:D:\workspace\console800480\system\core_cmInstr.h ****   Access to dedicated instructions
  31:D:\workspace\console800480\system\core_cmInstr.h ****   @{
  32:D:\workspace\console800480\system\core_cmInstr.h **** */
  33:D:\workspace\console800480\system\core_cmInstr.h **** 
  34:D:\workspace\console800480\system\core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  35:D:\workspace\console800480\system\core_cmInstr.h **** /* ARM armcc specific functions */
  36:D:\workspace\console800480\system\core_cmInstr.h **** 
  37:D:\workspace\console800480\system\core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  38:D:\workspace\console800480\system\core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  39:D:\workspace\console800480\system\core_cmInstr.h **** #endif
  40:D:\workspace\console800480\system\core_cmInstr.h **** 
  41:D:\workspace\console800480\system\core_cmInstr.h **** 
  42:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  No Operation
  43:D:\workspace\console800480\system\core_cmInstr.h **** 
  44:D:\workspace\console800480\system\core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  45:D:\workspace\console800480\system\core_cmInstr.h ****  */
  46:D:\workspace\console800480\system\core_cmInstr.h **** #define __NOP                             __nop
  47:D:\workspace\console800480\system\core_cmInstr.h **** 
  48:D:\workspace\console800480\system\core_cmInstr.h **** 
  49:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Wait For Interrupt
  50:D:\workspace\console800480\system\core_cmInstr.h **** 
  51:D:\workspace\console800480\system\core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  52:D:\workspace\console800480\system\core_cmInstr.h ****     until one of a number of events occurs.
  53:D:\workspace\console800480\system\core_cmInstr.h ****  */
  54:D:\workspace\console800480\system\core_cmInstr.h **** #define __WFI                             __wfi
  55:D:\workspace\console800480\system\core_cmInstr.h **** 
  56:D:\workspace\console800480\system\core_cmInstr.h **** 
  57:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Wait For Event
  58:D:\workspace\console800480\system\core_cmInstr.h **** 
  59:D:\workspace\console800480\system\core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  60:D:\workspace\console800480\system\core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  61:D:\workspace\console800480\system\core_cmInstr.h ****  */
  62:D:\workspace\console800480\system\core_cmInstr.h **** #define __WFE                             __wfe
  63:D:\workspace\console800480\system\core_cmInstr.h **** 
  64:D:\workspace\console800480\system\core_cmInstr.h **** 
  65:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Send Event
  66:D:\workspace\console800480\system\core_cmInstr.h **** 
  67:D:\workspace\console800480\system\core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  68:D:\workspace\console800480\system\core_cmInstr.h ****  */
  69:D:\workspace\console800480\system\core_cmInstr.h **** #define __SEV                             __sev
  70:D:\workspace\console800480\system\core_cmInstr.h **** 
  71:D:\workspace\console800480\system\core_cmInstr.h **** 
  72:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  73:D:\workspace\console800480\system\core_cmInstr.h **** 
  74:D:\workspace\console800480\system\core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor, 
  75:D:\workspace\console800480\system\core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or 
  76:D:\workspace\console800480\system\core_cmInstr.h ****     memory, after the instruction has been completed.
  77:D:\workspace\console800480\system\core_cmInstr.h ****  */
  78:D:\workspace\console800480\system\core_cmInstr.h **** #define __ISB()                           __isb(0xF)
  79:D:\workspace\console800480\system\core_cmInstr.h **** 
  80:D:\workspace\console800480\system\core_cmInstr.h **** 
  81:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  82:D:\workspace\console800480\system\core_cmInstr.h **** 
  83:D:\workspace\console800480\system\core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier. 
  84:D:\workspace\console800480\system\core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
  85:D:\workspace\console800480\system\core_cmInstr.h ****  */
  86:D:\workspace\console800480\system\core_cmInstr.h **** #define __DSB()                           __dsb(0xF)
  87:D:\workspace\console800480\system\core_cmInstr.h **** 
  88:D:\workspace\console800480\system\core_cmInstr.h **** 
  89:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Data Memory Barrier
  90:D:\workspace\console800480\system\core_cmInstr.h **** 
  91:D:\workspace\console800480\system\core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before 
  92:D:\workspace\console800480\system\core_cmInstr.h ****     and after the instruction, without ensuring their completion.
  93:D:\workspace\console800480\system\core_cmInstr.h ****  */
  94:D:\workspace\console800480\system\core_cmInstr.h **** #define __DMB()                           __dmb(0xF)
  95:D:\workspace\console800480\system\core_cmInstr.h **** 
  96:D:\workspace\console800480\system\core_cmInstr.h **** 
  97:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
  98:D:\workspace\console800480\system\core_cmInstr.h **** 
  99:D:\workspace\console800480\system\core_cmInstr.h ****     This function reverses the byte order in integer value.
 100:D:\workspace\console800480\system\core_cmInstr.h **** 
 101:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]    value  Value to reverse
 102:D:\workspace\console800480\system\core_cmInstr.h ****     \return               Reversed value
 103:D:\workspace\console800480\system\core_cmInstr.h ****  */
 104:D:\workspace\console800480\system\core_cmInstr.h **** #define __REV                             __rev
 105:D:\workspace\console800480\system\core_cmInstr.h **** 
 106:D:\workspace\console800480\system\core_cmInstr.h **** 
 107:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 108:D:\workspace\console800480\system\core_cmInstr.h **** 
 109:D:\workspace\console800480\system\core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 110:D:\workspace\console800480\system\core_cmInstr.h **** 
 111:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]    value  Value to reverse
 112:D:\workspace\console800480\system\core_cmInstr.h ****     \return               Reversed value
 113:D:\workspace\console800480\system\core_cmInstr.h ****  */
 114:D:\workspace\console800480\system\core_cmInstr.h **** static __INLINE __ASM uint32_t __REV16(uint32_t value)
 115:D:\workspace\console800480\system\core_cmInstr.h **** {
 116:D:\workspace\console800480\system\core_cmInstr.h ****   rev16 r0, r0
 117:D:\workspace\console800480\system\core_cmInstr.h ****   bx lr
 118:D:\workspace\console800480\system\core_cmInstr.h **** }
 119:D:\workspace\console800480\system\core_cmInstr.h **** 
 120:D:\workspace\console800480\system\core_cmInstr.h **** 
 121:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 122:D:\workspace\console800480\system\core_cmInstr.h **** 
 123:D:\workspace\console800480\system\core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 124:D:\workspace\console800480\system\core_cmInstr.h **** 
 125:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]    value  Value to reverse
 126:D:\workspace\console800480\system\core_cmInstr.h ****     \return               Reversed value
 127:D:\workspace\console800480\system\core_cmInstr.h ****  */
 128:D:\workspace\console800480\system\core_cmInstr.h **** static __INLINE __ASM int32_t __REVSH(int32_t value)
 129:D:\workspace\console800480\system\core_cmInstr.h **** {
 130:D:\workspace\console800480\system\core_cmInstr.h ****   revsh r0, r0
 131:D:\workspace\console800480\system\core_cmInstr.h ****   bx lr
 132:D:\workspace\console800480\system\core_cmInstr.h **** }
 133:D:\workspace\console800480\system\core_cmInstr.h **** 
 134:D:\workspace\console800480\system\core_cmInstr.h **** 
 135:D:\workspace\console800480\system\core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 136:D:\workspace\console800480\system\core_cmInstr.h **** 
 137:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Reverse bit order of value
 138:D:\workspace\console800480\system\core_cmInstr.h **** 
 139:D:\workspace\console800480\system\core_cmInstr.h ****     This function reverses the bit order of the given value.
 140:D:\workspace\console800480\system\core_cmInstr.h **** 
 141:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]    value  Value to reverse
 142:D:\workspace\console800480\system\core_cmInstr.h ****     \return               Reversed value
 143:D:\workspace\console800480\system\core_cmInstr.h ****  */
 144:D:\workspace\console800480\system\core_cmInstr.h **** #define __RBIT                            __rbit
 145:D:\workspace\console800480\system\core_cmInstr.h **** 
 146:D:\workspace\console800480\system\core_cmInstr.h **** 
 147:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 148:D:\workspace\console800480\system\core_cmInstr.h **** 
 149:D:\workspace\console800480\system\core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 150:D:\workspace\console800480\system\core_cmInstr.h **** 
 151:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 152:D:\workspace\console800480\system\core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 153:D:\workspace\console800480\system\core_cmInstr.h ****  */
 154:D:\workspace\console800480\system\core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 155:D:\workspace\console800480\system\core_cmInstr.h **** 
 156:D:\workspace\console800480\system\core_cmInstr.h **** 
 157:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 158:D:\workspace\console800480\system\core_cmInstr.h **** 
 159:D:\workspace\console800480\system\core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 160:D:\workspace\console800480\system\core_cmInstr.h **** 
 161:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 162:D:\workspace\console800480\system\core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 163:D:\workspace\console800480\system\core_cmInstr.h ****  */
 164:D:\workspace\console800480\system\core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 165:D:\workspace\console800480\system\core_cmInstr.h **** 
 166:D:\workspace\console800480\system\core_cmInstr.h **** 
 167:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 168:D:\workspace\console800480\system\core_cmInstr.h **** 
 169:D:\workspace\console800480\system\core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 170:D:\workspace\console800480\system\core_cmInstr.h **** 
 171:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 172:D:\workspace\console800480\system\core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 173:D:\workspace\console800480\system\core_cmInstr.h ****  */
 174:D:\workspace\console800480\system\core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 175:D:\workspace\console800480\system\core_cmInstr.h **** 
 176:D:\workspace\console800480\system\core_cmInstr.h **** 
 177:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 178:D:\workspace\console800480\system\core_cmInstr.h **** 
 179:D:\workspace\console800480\system\core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 180:D:\workspace\console800480\system\core_cmInstr.h **** 
 181:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]  value  Value to store
 182:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 183:D:\workspace\console800480\system\core_cmInstr.h ****     \return          0  Function succeeded
 184:D:\workspace\console800480\system\core_cmInstr.h ****     \return          1  Function failed
 185:D:\workspace\console800480\system\core_cmInstr.h ****  */
 186:D:\workspace\console800480\system\core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 187:D:\workspace\console800480\system\core_cmInstr.h **** 
 188:D:\workspace\console800480\system\core_cmInstr.h **** 
 189:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 190:D:\workspace\console800480\system\core_cmInstr.h **** 
 191:D:\workspace\console800480\system\core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 192:D:\workspace\console800480\system\core_cmInstr.h **** 
 193:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]  value  Value to store
 194:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 195:D:\workspace\console800480\system\core_cmInstr.h ****     \return          0  Function succeeded
 196:D:\workspace\console800480\system\core_cmInstr.h ****     \return          1  Function failed
 197:D:\workspace\console800480\system\core_cmInstr.h ****  */
 198:D:\workspace\console800480\system\core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 199:D:\workspace\console800480\system\core_cmInstr.h **** 
 200:D:\workspace\console800480\system\core_cmInstr.h **** 
 201:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 202:D:\workspace\console800480\system\core_cmInstr.h **** 
 203:D:\workspace\console800480\system\core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 204:D:\workspace\console800480\system\core_cmInstr.h **** 
 205:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]  value  Value to store
 206:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 207:D:\workspace\console800480\system\core_cmInstr.h ****     \return          0  Function succeeded
 208:D:\workspace\console800480\system\core_cmInstr.h ****     \return          1  Function failed
 209:D:\workspace\console800480\system\core_cmInstr.h ****  */
 210:D:\workspace\console800480\system\core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 211:D:\workspace\console800480\system\core_cmInstr.h **** 
 212:D:\workspace\console800480\system\core_cmInstr.h **** 
 213:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Remove the exclusive lock
 214:D:\workspace\console800480\system\core_cmInstr.h **** 
 215:D:\workspace\console800480\system\core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 216:D:\workspace\console800480\system\core_cmInstr.h **** 
 217:D:\workspace\console800480\system\core_cmInstr.h ****  */
 218:D:\workspace\console800480\system\core_cmInstr.h **** #define __CLREX                           __clrex
 219:D:\workspace\console800480\system\core_cmInstr.h **** 
 220:D:\workspace\console800480\system\core_cmInstr.h **** 
 221:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Signed Saturate
 222:D:\workspace\console800480\system\core_cmInstr.h **** 
 223:D:\workspace\console800480\system\core_cmInstr.h ****     This function saturates a signed value.
 224:D:\workspace\console800480\system\core_cmInstr.h **** 
 225:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]  value  Value to be saturated
 226:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 227:D:\workspace\console800480\system\core_cmInstr.h ****     \return             Saturated value
 228:D:\workspace\console800480\system\core_cmInstr.h ****  */
 229:D:\workspace\console800480\system\core_cmInstr.h **** #define __SSAT                            __ssat
 230:D:\workspace\console800480\system\core_cmInstr.h **** 
 231:D:\workspace\console800480\system\core_cmInstr.h **** 
 232:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Unsigned Saturate
 233:D:\workspace\console800480\system\core_cmInstr.h **** 
 234:D:\workspace\console800480\system\core_cmInstr.h ****     This function saturates an unsigned value.
 235:D:\workspace\console800480\system\core_cmInstr.h **** 
 236:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]  value  Value to be saturated
 237:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 238:D:\workspace\console800480\system\core_cmInstr.h ****     \return             Saturated value
 239:D:\workspace\console800480\system\core_cmInstr.h ****  */
 240:D:\workspace\console800480\system\core_cmInstr.h **** #define __USAT                            __usat
 241:D:\workspace\console800480\system\core_cmInstr.h **** 
 242:D:\workspace\console800480\system\core_cmInstr.h **** 
 243:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Count leading zeros
 244:D:\workspace\console800480\system\core_cmInstr.h **** 
 245:D:\workspace\console800480\system\core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 246:D:\workspace\console800480\system\core_cmInstr.h **** 
 247:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 248:D:\workspace\console800480\system\core_cmInstr.h ****     \return             number of leading zeros in value
 249:D:\workspace\console800480\system\core_cmInstr.h ****  */
 250:D:\workspace\console800480\system\core_cmInstr.h **** #define __CLZ                             __clz 
 251:D:\workspace\console800480\system\core_cmInstr.h **** 
 252:D:\workspace\console800480\system\core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) */
 253:D:\workspace\console800480\system\core_cmInstr.h **** 
 254:D:\workspace\console800480\system\core_cmInstr.h **** 
 255:D:\workspace\console800480\system\core_cmInstr.h **** 
 256:D:\workspace\console800480\system\core_cmInstr.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 257:D:\workspace\console800480\system\core_cmInstr.h **** /* IAR iccarm specific functions */
 258:D:\workspace\console800480\system\core_cmInstr.h **** 
 259:D:\workspace\console800480\system\core_cmInstr.h **** #include <cmsis_iar.h>
 260:D:\workspace\console800480\system\core_cmInstr.h **** 
 261:D:\workspace\console800480\system\core_cmInstr.h **** 
 262:D:\workspace\console800480\system\core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 263:D:\workspace\console800480\system\core_cmInstr.h **** /* GNU gcc specific functions */
 264:D:\workspace\console800480\system\core_cmInstr.h **** 
 265:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  No Operation
 266:D:\workspace\console800480\system\core_cmInstr.h **** 
 267:D:\workspace\console800480\system\core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 268:D:\workspace\console800480\system\core_cmInstr.h ****  */
 269:D:\workspace\console800480\system\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __NOP(void)
 270:D:\workspace\console800480\system\core_cmInstr.h **** {
 271:D:\workspace\console800480\system\core_cmInstr.h ****   __ASM volatile ("nop");
 272:D:\workspace\console800480\system\core_cmInstr.h **** }
 273:D:\workspace\console800480\system\core_cmInstr.h **** 
 274:D:\workspace\console800480\system\core_cmInstr.h **** 
 275:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Wait For Interrupt
 276:D:\workspace\console800480\system\core_cmInstr.h **** 
 277:D:\workspace\console800480\system\core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 278:D:\workspace\console800480\system\core_cmInstr.h ****     until one of a number of events occurs.
 279:D:\workspace\console800480\system\core_cmInstr.h ****  */
 280:D:\workspace\console800480\system\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __WFI(void)
 281:D:\workspace\console800480\system\core_cmInstr.h **** {
 282:D:\workspace\console800480\system\core_cmInstr.h ****   __ASM volatile ("wfi");
 283:D:\workspace\console800480\system\core_cmInstr.h **** }
 284:D:\workspace\console800480\system\core_cmInstr.h **** 
 285:D:\workspace\console800480\system\core_cmInstr.h **** 
 286:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Wait For Event
 287:D:\workspace\console800480\system\core_cmInstr.h **** 
 288:D:\workspace\console800480\system\core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 289:D:\workspace\console800480\system\core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 290:D:\workspace\console800480\system\core_cmInstr.h ****  */
 291:D:\workspace\console800480\system\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __WFE(void)
 292:D:\workspace\console800480\system\core_cmInstr.h **** {
 293:D:\workspace\console800480\system\core_cmInstr.h ****   __ASM volatile ("wfe");
 294:D:\workspace\console800480\system\core_cmInstr.h **** }
 295:D:\workspace\console800480\system\core_cmInstr.h **** 
 296:D:\workspace\console800480\system\core_cmInstr.h **** 
 297:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Send Event
 298:D:\workspace\console800480\system\core_cmInstr.h **** 
 299:D:\workspace\console800480\system\core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 300:D:\workspace\console800480\system\core_cmInstr.h ****  */
 301:D:\workspace\console800480\system\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __SEV(void)
 302:D:\workspace\console800480\system\core_cmInstr.h **** {
 303:D:\workspace\console800480\system\core_cmInstr.h ****   __ASM volatile ("sev");
 304:D:\workspace\console800480\system\core_cmInstr.h **** }
 305:D:\workspace\console800480\system\core_cmInstr.h **** 
 306:D:\workspace\console800480\system\core_cmInstr.h **** 
 307:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
 308:D:\workspace\console800480\system\core_cmInstr.h **** 
 309:D:\workspace\console800480\system\core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor, 
 310:D:\workspace\console800480\system\core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or 
 311:D:\workspace\console800480\system\core_cmInstr.h ****     memory, after the instruction has been completed.
 312:D:\workspace\console800480\system\core_cmInstr.h ****  */
 313:D:\workspace\console800480\system\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __ISB(void)
 314:D:\workspace\console800480\system\core_cmInstr.h **** {
 315:D:\workspace\console800480\system\core_cmInstr.h ****   __ASM volatile ("isb");
 316:D:\workspace\console800480\system\core_cmInstr.h **** }
 317:D:\workspace\console800480\system\core_cmInstr.h **** 
 318:D:\workspace\console800480\system\core_cmInstr.h **** 
 319:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Data Synchronization Barrier
 320:D:\workspace\console800480\system\core_cmInstr.h **** 
 321:D:\workspace\console800480\system\core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier. 
 322:D:\workspace\console800480\system\core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
 323:D:\workspace\console800480\system\core_cmInstr.h ****  */
 324:D:\workspace\console800480\system\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __DSB(void)
 325:D:\workspace\console800480\system\core_cmInstr.h **** {
 326:D:\workspace\console800480\system\core_cmInstr.h ****   __ASM volatile ("dsb");
 327:D:\workspace\console800480\system\core_cmInstr.h **** }
 328:D:\workspace\console800480\system\core_cmInstr.h **** 
 329:D:\workspace\console800480\system\core_cmInstr.h **** 
 330:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Data Memory Barrier
 331:D:\workspace\console800480\system\core_cmInstr.h **** 
 332:D:\workspace\console800480\system\core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before 
 333:D:\workspace\console800480\system\core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 334:D:\workspace\console800480\system\core_cmInstr.h ****  */
 335:D:\workspace\console800480\system\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __DMB(void)
 336:D:\workspace\console800480\system\core_cmInstr.h **** {
 337:D:\workspace\console800480\system\core_cmInstr.h ****   __ASM volatile ("dmb");
 338:D:\workspace\console800480\system\core_cmInstr.h **** }
 339:D:\workspace\console800480\system\core_cmInstr.h **** 
 340:D:\workspace\console800480\system\core_cmInstr.h **** 
 341:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 342:D:\workspace\console800480\system\core_cmInstr.h **** 
 343:D:\workspace\console800480\system\core_cmInstr.h ****     This function reverses the byte order in integer value.
 344:D:\workspace\console800480\system\core_cmInstr.h **** 
 345:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]    value  Value to reverse
 346:D:\workspace\console800480\system\core_cmInstr.h ****     \return               Reversed value
 347:D:\workspace\console800480\system\core_cmInstr.h ****  */
 348:D:\workspace\console800480\system\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
 349:D:\workspace\console800480\system\core_cmInstr.h **** {
 350:D:\workspace\console800480\system\core_cmInstr.h ****   uint32_t result;
 351:D:\workspace\console800480\system\core_cmInstr.h ****   
 352:D:\workspace\console800480\system\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 353:D:\workspace\console800480\system\core_cmInstr.h ****   return(result);
 354:D:\workspace\console800480\system\core_cmInstr.h **** }
 355:D:\workspace\console800480\system\core_cmInstr.h **** 
 356:D:\workspace\console800480\system\core_cmInstr.h **** 
 357:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 358:D:\workspace\console800480\system\core_cmInstr.h **** 
 359:D:\workspace\console800480\system\core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 360:D:\workspace\console800480\system\core_cmInstr.h **** 
 361:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]    value  Value to reverse
 362:D:\workspace\console800480\system\core_cmInstr.h ****     \return               Reversed value
 363:D:\workspace\console800480\system\core_cmInstr.h ****  */
 364:D:\workspace\console800480\system\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE uint32_t __REV16(uint32_t value)
 365:D:\workspace\console800480\system\core_cmInstr.h **** {
 366:D:\workspace\console800480\system\core_cmInstr.h ****   uint32_t result;
 367:D:\workspace\console800480\system\core_cmInstr.h ****   
 368:D:\workspace\console800480\system\core_cmInstr.h ****   __ASM volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
 369:D:\workspace\console800480\system\core_cmInstr.h ****   return(result);
 370:D:\workspace\console800480\system\core_cmInstr.h **** }
 371:D:\workspace\console800480\system\core_cmInstr.h **** 
 372:D:\workspace\console800480\system\core_cmInstr.h **** 
 373:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 374:D:\workspace\console800480\system\core_cmInstr.h **** 
 375:D:\workspace\console800480\system\core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 376:D:\workspace\console800480\system\core_cmInstr.h **** 
 377:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]    value  Value to reverse
 378:D:\workspace\console800480\system\core_cmInstr.h ****     \return               Reversed value
 379:D:\workspace\console800480\system\core_cmInstr.h ****  */
 380:D:\workspace\console800480\system\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE int32_t __REVSH(int32_t value)
 381:D:\workspace\console800480\system\core_cmInstr.h **** {
 382:D:\workspace\console800480\system\core_cmInstr.h ****   uint32_t result;
 383:D:\workspace\console800480\system\core_cmInstr.h ****   
 384:D:\workspace\console800480\system\core_cmInstr.h ****   __ASM volatile ("revsh %0, %1" : "=r" (result) : "r" (value) );
 385:D:\workspace\console800480\system\core_cmInstr.h ****   return(result);
 386:D:\workspace\console800480\system\core_cmInstr.h **** }
 387:D:\workspace\console800480\system\core_cmInstr.h **** 
 388:D:\workspace\console800480\system\core_cmInstr.h **** 
 389:D:\workspace\console800480\system\core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 390:D:\workspace\console800480\system\core_cmInstr.h **** 
 391:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Reverse bit order of value
 392:D:\workspace\console800480\system\core_cmInstr.h **** 
 393:D:\workspace\console800480\system\core_cmInstr.h ****     This function reverses the bit order of the given value.
 394:D:\workspace\console800480\system\core_cmInstr.h **** 
 395:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]    value  Value to reverse
 396:D:\workspace\console800480\system\core_cmInstr.h ****     \return               Reversed value
 397:D:\workspace\console800480\system\core_cmInstr.h ****  */
 398:D:\workspace\console800480\system\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE uint32_t __RBIT(uint32_t value)
 399:D:\workspace\console800480\system\core_cmInstr.h **** {
 400:D:\workspace\console800480\system\core_cmInstr.h ****   uint32_t result;
 401:D:\workspace\console800480\system\core_cmInstr.h ****   
 402:D:\workspace\console800480\system\core_cmInstr.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 513              		.loc 3 402 0
 514 0362 BA6C     		ldr	r2, [r7, #72]
 515              	@ 402 "D:\workspace\console800480\system/core_cmInstr.h" 1
 516 0364 92FAA2F2 		rbit r2, r2
 517              	@ 0 "" 2
 518              		.thumb
 519 0368 7A64     		str	r2, [r7, #68]
 403:D:\workspace\console800480\system\core_cmInstr.h ****    return(result);
 520              		.loc 3 403 0
 521 036a 7A6C     		ldr	r2, [r7, #68]
 522 036c 3A64     		str	r2, [r7, #64]
 523              	.LBE63:
 524              	.LBE62:
 525              	.LBB64:
 526              	.LBB65:
 404:D:\workspace\console800480\system\core_cmInstr.h **** }
 405:D:\workspace\console800480\system\core_cmInstr.h **** 
 406:D:\workspace\console800480\system\core_cmInstr.h **** 
 407:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 408:D:\workspace\console800480\system\core_cmInstr.h **** 
 409:D:\workspace\console800480\system\core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 410:D:\workspace\console800480\system\core_cmInstr.h **** 
 411:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 412:D:\workspace\console800480\system\core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 413:D:\workspace\console800480\system\core_cmInstr.h ****  */
 414:D:\workspace\console800480\system\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE uint8_t __LDREXB(volatile uint8_t *addr)
 415:D:\workspace\console800480\system\core_cmInstr.h **** {
 416:D:\workspace\console800480\system\core_cmInstr.h ****     uint8_t result;
 417:D:\workspace\console800480\system\core_cmInstr.h ****   
 418:D:\workspace\console800480\system\core_cmInstr.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) );
 419:D:\workspace\console800480\system\core_cmInstr.h ****    return(result);
 420:D:\workspace\console800480\system\core_cmInstr.h **** }
 421:D:\workspace\console800480\system\core_cmInstr.h **** 
 422:D:\workspace\console800480\system\core_cmInstr.h **** 
 423:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 424:D:\workspace\console800480\system\core_cmInstr.h **** 
 425:D:\workspace\console800480\system\core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 426:D:\workspace\console800480\system\core_cmInstr.h **** 
 427:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 428:D:\workspace\console800480\system\core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 429:D:\workspace\console800480\system\core_cmInstr.h ****  */
 430:D:\workspace\console800480\system\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE uint16_t __LDREXH(volatile uint16_t *addr)
 431:D:\workspace\console800480\system\core_cmInstr.h **** {
 432:D:\workspace\console800480\system\core_cmInstr.h ****     uint16_t result;
 433:D:\workspace\console800480\system\core_cmInstr.h ****   
 434:D:\workspace\console800480\system\core_cmInstr.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) );
 435:D:\workspace\console800480\system\core_cmInstr.h ****    return(result);
 436:D:\workspace\console800480\system\core_cmInstr.h **** }
 437:D:\workspace\console800480\system\core_cmInstr.h **** 
 438:D:\workspace\console800480\system\core_cmInstr.h **** 
 439:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 440:D:\workspace\console800480\system\core_cmInstr.h **** 
 441:D:\workspace\console800480\system\core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 442:D:\workspace\console800480\system\core_cmInstr.h **** 
 443:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 444:D:\workspace\console800480\system\core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 445:D:\workspace\console800480\system\core_cmInstr.h ****  */
 446:D:\workspace\console800480\system\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE uint32_t __LDREXW(volatile uint32_t *addr)
 447:D:\workspace\console800480\system\core_cmInstr.h **** {
 448:D:\workspace\console800480\system\core_cmInstr.h ****     uint32_t result;
 449:D:\workspace\console800480\system\core_cmInstr.h ****   
 450:D:\workspace\console800480\system\core_cmInstr.h ****    __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
 451:D:\workspace\console800480\system\core_cmInstr.h ****    return(result);
 452:D:\workspace\console800480\system\core_cmInstr.h **** }
 453:D:\workspace\console800480\system\core_cmInstr.h **** 
 454:D:\workspace\console800480\system\core_cmInstr.h **** 
 455:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 456:D:\workspace\console800480\system\core_cmInstr.h **** 
 457:D:\workspace\console800480\system\core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 458:D:\workspace\console800480\system\core_cmInstr.h **** 
 459:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]  value  Value to store
 460:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 461:D:\workspace\console800480\system\core_cmInstr.h ****     \return          0  Function succeeded
 462:D:\workspace\console800480\system\core_cmInstr.h ****     \return          1  Function failed
 463:D:\workspace\console800480\system\core_cmInstr.h ****  */
 464:D:\workspace\console800480\system\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE uint32_t __STREXB(uint8_t value, volatile uint8_
 465:D:\workspace\console800480\system\core_cmInstr.h **** {
 466:D:\workspace\console800480\system\core_cmInstr.h ****    uint32_t result;
 467:D:\workspace\console800480\system\core_cmInstr.h ****   
 468:D:\workspace\console800480\system\core_cmInstr.h ****    __ASM volatile ("strexb %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
 469:D:\workspace\console800480\system\core_cmInstr.h ****    return(result);
 470:D:\workspace\console800480\system\core_cmInstr.h **** }
 471:D:\workspace\console800480\system\core_cmInstr.h **** 
 472:D:\workspace\console800480\system\core_cmInstr.h **** 
 473:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 474:D:\workspace\console800480\system\core_cmInstr.h **** 
 475:D:\workspace\console800480\system\core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 476:D:\workspace\console800480\system\core_cmInstr.h **** 
 477:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]  value  Value to store
 478:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 479:D:\workspace\console800480\system\core_cmInstr.h ****     \return          0  Function succeeded
 480:D:\workspace\console800480\system\core_cmInstr.h ****     \return          1  Function failed
 481:D:\workspace\console800480\system\core_cmInstr.h ****  */
 482:D:\workspace\console800480\system\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE uint32_t __STREXH(uint16_t value, volatile uint1
 483:D:\workspace\console800480\system\core_cmInstr.h **** {
 484:D:\workspace\console800480\system\core_cmInstr.h ****    uint32_t result;
 485:D:\workspace\console800480\system\core_cmInstr.h ****   
 486:D:\workspace\console800480\system\core_cmInstr.h ****    __ASM volatile ("strexh %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
 487:D:\workspace\console800480\system\core_cmInstr.h ****    return(result);
 488:D:\workspace\console800480\system\core_cmInstr.h **** }
 489:D:\workspace\console800480\system\core_cmInstr.h **** 
 490:D:\workspace\console800480\system\core_cmInstr.h **** 
 491:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 492:D:\workspace\console800480\system\core_cmInstr.h **** 
 493:D:\workspace\console800480\system\core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 494:D:\workspace\console800480\system\core_cmInstr.h **** 
 495:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]  value  Value to store
 496:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 497:D:\workspace\console800480\system\core_cmInstr.h ****     \return          0  Function succeeded
 498:D:\workspace\console800480\system\core_cmInstr.h ****     \return          1  Function failed
 499:D:\workspace\console800480\system\core_cmInstr.h ****  */
 500:D:\workspace\console800480\system\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE uint32_t __STREXW(uint32_t value, volatile uint3
 501:D:\workspace\console800480\system\core_cmInstr.h **** {
 502:D:\workspace\console800480\system\core_cmInstr.h ****    uint32_t result;
 503:D:\workspace\console800480\system\core_cmInstr.h ****   
 504:D:\workspace\console800480\system\core_cmInstr.h ****    __ASM volatile ("strex %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
 505:D:\workspace\console800480\system\core_cmInstr.h ****    return(result);
 506:D:\workspace\console800480\system\core_cmInstr.h **** }
 507:D:\workspace\console800480\system\core_cmInstr.h **** 
 508:D:\workspace\console800480\system\core_cmInstr.h **** 
 509:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Remove the exclusive lock
 510:D:\workspace\console800480\system\core_cmInstr.h **** 
 511:D:\workspace\console800480\system\core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 512:D:\workspace\console800480\system\core_cmInstr.h **** 
 513:D:\workspace\console800480\system\core_cmInstr.h ****  */
 514:D:\workspace\console800480\system\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __CLREX(void)
 515:D:\workspace\console800480\system\core_cmInstr.h **** {
 516:D:\workspace\console800480\system\core_cmInstr.h ****   __ASM volatile ("clrex");
 517:D:\workspace\console800480\system\core_cmInstr.h **** }
 518:D:\workspace\console800480\system\core_cmInstr.h **** 
 519:D:\workspace\console800480\system\core_cmInstr.h **** 
 520:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Signed Saturate
 521:D:\workspace\console800480\system\core_cmInstr.h **** 
 522:D:\workspace\console800480\system\core_cmInstr.h ****     This function saturates a signed value.
 523:D:\workspace\console800480\system\core_cmInstr.h **** 
 524:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]  value  Value to be saturated
 525:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 526:D:\workspace\console800480\system\core_cmInstr.h ****     \return             Saturated value
 527:D:\workspace\console800480\system\core_cmInstr.h ****  */
 528:D:\workspace\console800480\system\core_cmInstr.h **** #define __SSAT(ARG1,ARG2) \
 529:D:\workspace\console800480\system\core_cmInstr.h **** ({                          \
 530:D:\workspace\console800480\system\core_cmInstr.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 531:D:\workspace\console800480\system\core_cmInstr.h ****   __ASM ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) ); \
 532:D:\workspace\console800480\system\core_cmInstr.h ****   __RES; \
 533:D:\workspace\console800480\system\core_cmInstr.h ****  })
 534:D:\workspace\console800480\system\core_cmInstr.h **** 
 535:D:\workspace\console800480\system\core_cmInstr.h **** 
 536:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Unsigned Saturate
 537:D:\workspace\console800480\system\core_cmInstr.h **** 
 538:D:\workspace\console800480\system\core_cmInstr.h ****     This function saturates an unsigned value.
 539:D:\workspace\console800480\system\core_cmInstr.h **** 
 540:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]  value  Value to be saturated
 541:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 542:D:\workspace\console800480\system\core_cmInstr.h ****     \return             Saturated value
 543:D:\workspace\console800480\system\core_cmInstr.h ****  */
 544:D:\workspace\console800480\system\core_cmInstr.h **** #define __USAT(ARG1,ARG2) \
 545:D:\workspace\console800480\system\core_cmInstr.h **** ({                          \
 546:D:\workspace\console800480\system\core_cmInstr.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 547:D:\workspace\console800480\system\core_cmInstr.h ****   __ASM ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) ); \
 548:D:\workspace\console800480\system\core_cmInstr.h ****   __RES; \
 549:D:\workspace\console800480\system\core_cmInstr.h ****  })
 550:D:\workspace\console800480\system\core_cmInstr.h **** 
 551:D:\workspace\console800480\system\core_cmInstr.h **** 
 552:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Count leading zeros
 553:D:\workspace\console800480\system\core_cmInstr.h **** 
 554:D:\workspace\console800480\system\core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 555:D:\workspace\console800480\system\core_cmInstr.h **** 
 556:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 557:D:\workspace\console800480\system\core_cmInstr.h ****     \return             number of leading zeros in value
 558:D:\workspace\console800480\system\core_cmInstr.h ****  */
 559:D:\workspace\console800480\system\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE uint8_t __CLZ(uint32_t value)
 560:D:\workspace\console800480\system\core_cmInstr.h **** {
 561:D:\workspace\console800480\system\core_cmInstr.h ****   uint8_t result;
 562:D:\workspace\console800480\system\core_cmInstr.h ****   
 563:D:\workspace\console800480\system\core_cmInstr.h ****   __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 527              		.loc 3 563 0
 528 036e 3A6C     		ldr	r2, [r7, #64]
 529              	@ 563 "D:\workspace\console800480\system/core_cmInstr.h" 1
 530 0370 B2FA82F2 		clz r2, r2
 531              	@ 0 "" 2
 532              		.thumb
 533 0374 87F83F20 		strb	r2, [r7, #63]
 564:D:\workspace\console800480\system\core_cmInstr.h ****   return(result);
 534              		.loc 3 564 0
 535 0378 97F83F20 		ldrb	r2, [r7, #63]	@ zero_extendqisi2
 536              	.LBE65:
 537              	.LBE64:
 538              		.loc 2 358 0
 539 037c 00FA02F2 		lsl	r2, r0, r2
 540 0380 0A43     		orrs	r2, r2, r1
 541 0382 1A60     		str	r2, [r3]
 542 0384 1BE0     		b	.L21
 543              	.L25:
 359:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       }
 360:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       else
 361:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       {
 362:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         /* Disable the Internal High Speed oscillator (HSI). */
 363:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         __HAL_RCC_HSI_DISABLE();
 544              		.loc 2 363 0
 545 0386 0023     		movs	r3, #0
 546 0388 C4F24723 		movt	r3, 16967
 547 038c 0022     		movs	r2, #0
 548 038e 1A60     		str	r2, [r3]
 364:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 365:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         /* Get timeout */
 366:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         timeout = HAL_GetTick() + HSI_TIMEOUT_VALUE;
 549              		.loc 2 366 0
 550 0390 FFF7FEFF 		bl	HAL_GetTick
 551 0394 0346     		mov	r3, r0
 552 0396 6433     		adds	r3, r3, #100
 553 0398 FB64     		str	r3, [r7, #76]
 367:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       
 368:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         /* Wait till HSI is ready */  
 369:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 554              		.loc 2 369 0
 555 039a 07E0     		b	.L30
 556              	.L31:
 370:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         {
 371:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           if(HAL_GetTick() >= timeout)
 557              		.loc 2 371 0
 558 039c FFF7FEFF 		bl	HAL_GetTick
 559 03a0 0246     		mov	r2, r0
 560 03a2 FB6C     		ldr	r3, [r7, #76]
 561 03a4 9A42     		cmp	r2, r3
 562 03a6 01D3     		bcc	.L30
 372:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           {
 373:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****             return HAL_TIMEOUT;
 563              		.loc 2 373 0
 564 03a8 0323     		movs	r3, #3
 565 03aa 97E1     		b	.L13
 566              	.L30:
 369:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         {
 567              		.loc 2 369 0 discriminator 1
 568 03ac 4FF46053 		mov	r3, #14336
 569 03b0 C4F20203 		movt	r3, 16386
 570 03b4 1B68     		ldr	r3, [r3]
 571 03b6 03F00203 		and	r3, r3, #2
 572 03ba 002B     		cmp	r3, #0
 573 03bc EED1     		bne	.L31
 574              	.L21:
 374:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           }
 375:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         } 
 376:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       }
 377:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     }
 378:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   }
 379:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /*------------------------------ LSI Configuration -------------------------*/
 380:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 575              		.loc 2 380 0
 576 03be 7B68     		ldr	r3, [r7, #4]
 577 03c0 1B68     		ldr	r3, [r3]
 578 03c2 03F00803 		and	r3, r3, #8
 579 03c6 002B     		cmp	r3, #0
 580 03c8 3ED0     		beq	.L32
 381:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   {
 382:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     /* Check the parameters */
 383:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 384:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 385:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     /* Check the LSI State */
 386:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 581              		.loc 2 386 0
 582 03ca 7B68     		ldr	r3, [r7, #4]
 583 03cc 5B69     		ldr	r3, [r3, #20]
 584 03ce 002B     		cmp	r3, #0
 585 03d0 1DD0     		beq	.L33
 387:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     {
 388:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       /* Enable the Internal Low Speed oscillator (LSI). */
 389:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       __HAL_RCC_LSI_ENABLE();
 586              		.loc 2 389 0
 587 03d2 4FF46863 		mov	r3, #3712
 588 03d6 C4F24723 		movt	r3, 16967
 589 03da 0122     		movs	r2, #1
 590 03dc 1A60     		str	r2, [r3]
 390:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 391:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       /* Get timeout */
 392:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       timeout = HAL_GetTick() + LSI_TIMEOUT_VALUE;
 591              		.loc 2 392 0
 592 03de FFF7FEFF 		bl	HAL_GetTick
 593 03e2 0346     		mov	r3, r0
 594 03e4 6433     		adds	r3, r3, #100
 595 03e6 FB64     		str	r3, [r7, #76]
 393:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 394:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       /* Wait till LSI is ready */
 395:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 596              		.loc 2 395 0
 597 03e8 07E0     		b	.L34
 598              	.L35:
 396:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       {
 397:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         if(HAL_GetTick() >= timeout)
 599              		.loc 2 397 0
 600 03ea FFF7FEFF 		bl	HAL_GetTick
 601 03ee 0246     		mov	r2, r0
 602 03f0 FB6C     		ldr	r3, [r7, #76]
 603 03f2 9A42     		cmp	r2, r3
 604 03f4 01D3     		bcc	.L34
 398:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         {
 399:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           return HAL_TIMEOUT;
 605              		.loc 2 399 0
 606 03f6 0323     		movs	r3, #3
 607 03f8 70E1     		b	.L13
 608              	.L34:
 395:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       {
 609              		.loc 2 395 0 discriminator 1
 610 03fa 4FF46053 		mov	r3, #14336
 611 03fe C4F20203 		movt	r3, 16386
 612 0402 5B6F     		ldr	r3, [r3, #116]
 613 0404 03F00203 		and	r3, r3, #2
 614 0408 002B     		cmp	r3, #0
 615 040a EED0     		beq	.L35
 616 040c 1CE0     		b	.L32
 617              	.L33:
 400:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         }
 401:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       }
 402:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     }
 403:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     else
 404:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     {
 405:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       /* Disable the Internal Low Speed oscillator (LSI). */
 406:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       __HAL_RCC_LSI_DISABLE();
 618              		.loc 2 406 0
 619 040e 4FF46863 		mov	r3, #3712
 620 0412 C4F24723 		movt	r3, 16967
 621 0416 0022     		movs	r2, #0
 622 0418 1A60     		str	r2, [r3]
 407:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 408:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       /* Get timeout */
 409:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       timeout = HAL_GetTick() + LSI_TIMEOUT_VALUE;
 623              		.loc 2 409 0
 624 041a FFF7FEFF 		bl	HAL_GetTick
 625 041e 0346     		mov	r3, r0
 626 0420 6433     		adds	r3, r3, #100
 627 0422 FB64     		str	r3, [r7, #76]
 410:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       
 411:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       /* Wait till LSI is ready */  
 412:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 628              		.loc 2 412 0
 629 0424 07E0     		b	.L36
 630              	.L37:
 413:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       {
 414:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         if(HAL_GetTick() >= timeout)
 631              		.loc 2 414 0
 632 0426 FFF7FEFF 		bl	HAL_GetTick
 633 042a 0246     		mov	r2, r0
 634 042c FB6C     		ldr	r3, [r7, #76]
 635 042e 9A42     		cmp	r2, r3
 636 0430 01D3     		bcc	.L36
 415:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         {
 416:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           return HAL_TIMEOUT;
 637              		.loc 2 416 0
 638 0432 0323     		movs	r3, #3
 639 0434 52E1     		b	.L13
 640              	.L36:
 412:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       {
 641              		.loc 2 412 0 discriminator 1
 642 0436 4FF46053 		mov	r3, #14336
 643 043a C4F20203 		movt	r3, 16386
 644 043e 5B6F     		ldr	r3, [r3, #116]
 645 0440 03F00203 		and	r3, r3, #2
 646 0444 002B     		cmp	r3, #0
 647 0446 EED1     		bne	.L37
 648              	.L32:
 417:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         }      
 418:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       } 
 419:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     }
 420:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   }
 421:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /*------------------------------ LSE Configuration -------------------------*/ 
 422:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 649              		.loc 2 422 0
 650 0448 7B68     		ldr	r3, [r7, #4]
 651 044a 1B68     		ldr	r3, [r3]
 652 044c 03F00403 		and	r3, r3, #4
 653 0450 002B     		cmp	r3, #0
 654 0452 00F08D80 		beq	.L38
 423:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   {
 424:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     /* Check the parameters */
 425:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 426:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     
 427:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     /* Enable Power Clock*/
 428:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     __PWR_CLK_ENABLE();
 655              		.loc 2 428 0
 656 0456 4FF46053 		mov	r3, #14336
 657 045a C4F20203 		movt	r3, 16386
 658 045e 4FF46052 		mov	r2, #14336
 659 0462 C4F20202 		movt	r2, 16386
 660 0466 126C     		ldr	r2, [r2, #64]
 661 0468 42F08052 		orr	r2, r2, #268435456
 662 046c 1A64     		str	r2, [r3, #64]
 429:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     
 430:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     /* Enable write access to Backup domain */
 431:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     PWR->CR |= PWR_CR_DBP;
 663              		.loc 2 431 0
 664 046e 4FF4E043 		mov	r3, #28672
 665 0472 C4F20003 		movt	r3, 16384
 666 0476 4FF4E042 		mov	r2, #28672
 667 047a C4F20002 		movt	r2, 16384
 668 047e 1268     		ldr	r2, [r2]
 669 0480 42F48072 		orr	r2, r2, #256
 670 0484 1A60     		str	r2, [r3]
 432:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     
 433:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     /* Wait for Backup domain Write protection disable */
 434:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     timeout = HAL_GetTick() + DBP_TIMEOUT_VALUE;
 671              		.loc 2 434 0
 672 0486 FFF7FEFF 		bl	HAL_GetTick
 673 048a 0346     		mov	r3, r0
 674 048c 6433     		adds	r3, r3, #100
 675 048e FB64     		str	r3, [r7, #76]
 435:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     
 436:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     while((PWR->CR & PWR_CR_DBP) == RESET)
 676              		.loc 2 436 0
 677 0490 07E0     		b	.L39
 678              	.L40:
 437:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     {
 438:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       if(HAL_GetTick() >= timeout)
 679              		.loc 2 438 0
 680 0492 FFF7FEFF 		bl	HAL_GetTick
 681 0496 0246     		mov	r2, r0
 682 0498 FB6C     		ldr	r3, [r7, #76]
 683 049a 9A42     		cmp	r2, r3
 684 049c 01D3     		bcc	.L39
 439:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       {
 440:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         return HAL_TIMEOUT;
 685              		.loc 2 440 0
 686 049e 0323     		movs	r3, #3
 687 04a0 1CE1     		b	.L13
 688              	.L39:
 436:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     {
 689              		.loc 2 436 0 discriminator 1
 690 04a2 4FF4E043 		mov	r3, #28672
 691 04a6 C4F20003 		movt	r3, 16384
 692 04aa 1B68     		ldr	r3, [r3]
 693 04ac 03F48073 		and	r3, r3, #256
 694 04b0 002B     		cmp	r3, #0
 695 04b2 EED0     		beq	.L40
 441:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       }      
 442:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     }
 443:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/
 444:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 696              		.loc 2 444 0
 697 04b4 43F67003 		movw	r3, #14448
 698 04b8 C4F20203 		movt	r3, 16386
 699 04bc 0022     		movs	r2, #0
 700 04be 1A70     		strb	r2, [r3]
 445:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     
 446:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     /* Get timeout */
 447:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     timeout = HAL_GetTick() + LSE_TIMEOUT_VALUE;
 701              		.loc 2 447 0
 702 04c0 FFF7FEFF 		bl	HAL_GetTick
 703 04c4 0346     		mov	r3, r0
 704 04c6 03F59C53 		add	r3, r3, #4992
 705 04ca 0833     		adds	r3, r3, #8
 706 04cc FB64     		str	r3, [r7, #76]
 448:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       
 449:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     /* Wait till LSE is ready */  
 450:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 707              		.loc 2 450 0
 708 04ce 07E0     		b	.L41
 709              	.L42:
 451:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     {
 452:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       if(HAL_GetTick() >= timeout)
 710              		.loc 2 452 0
 711 04d0 FFF7FEFF 		bl	HAL_GetTick
 712 04d4 0246     		mov	r2, r0
 713 04d6 FB6C     		ldr	r3, [r7, #76]
 714 04d8 9A42     		cmp	r2, r3
 715 04da 01D3     		bcc	.L41
 453:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       {
 454:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         return HAL_TIMEOUT;
 716              		.loc 2 454 0
 717 04dc 0323     		movs	r3, #3
 718 04de FDE0     		b	.L13
 719              	.L41:
 450:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     {
 720              		.loc 2 450 0 discriminator 1
 721 04e0 4FF46053 		mov	r3, #14336
 722 04e4 C4F20203 		movt	r3, 16386
 723 04e8 1B6F     		ldr	r3, [r3, #112]
 724 04ea 03F00203 		and	r3, r3, #2
 725 04ee 002B     		cmp	r3, #0
 726 04f0 EED1     		bne	.L42
 455:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       }      
 456:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     } 
 457:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     
 458:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     /* Set the new LSE configuration -----------------------------------------*/
 459:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 727              		.loc 2 459 0
 728 04f2 43F67003 		movw	r3, #14448
 729 04f6 C4F20203 		movt	r3, 16386
 730 04fa 7A68     		ldr	r2, [r7, #4]
 731 04fc 9268     		ldr	r2, [r2, #8]
 732 04fe D2B2     		uxtb	r2, r2
 733 0500 1A70     		strb	r2, [r3]
 460:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     /* Check the LSE State */
 461:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     if((RCC_OscInitStruct->LSEState) == RCC_LSE_ON)
 734              		.loc 2 461 0
 735 0502 7B68     		ldr	r3, [r7, #4]
 736 0504 9B68     		ldr	r3, [r3, #8]
 737 0506 012B     		cmp	r3, #1
 738 0508 19D1     		bne	.L43
 462:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     {
 463:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       /* Get timeout */
 464:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       timeout = HAL_GetTick() + LSE_TIMEOUT_VALUE;
 739              		.loc 2 464 0
 740 050a FFF7FEFF 		bl	HAL_GetTick
 741 050e 0346     		mov	r3, r0
 742 0510 03F59C53 		add	r3, r3, #4992
 743 0514 0833     		adds	r3, r3, #8
 744 0516 FB64     		str	r3, [r7, #76]
 465:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       
 466:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       /* Wait till LSE is ready */  
 467:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 745              		.loc 2 467 0
 746 0518 07E0     		b	.L44
 747              	.L45:
 468:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       {
 469:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         if(HAL_GetTick() >= timeout)
 748              		.loc 2 469 0
 749 051a FFF7FEFF 		bl	HAL_GetTick
 750 051e 0246     		mov	r2, r0
 751 0520 FB6C     		ldr	r3, [r7, #76]
 752 0522 9A42     		cmp	r2, r3
 753 0524 01D3     		bcc	.L44
 470:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         {
 471:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           return HAL_TIMEOUT;
 754              		.loc 2 471 0
 755 0526 0323     		movs	r3, #3
 756 0528 D8E0     		b	.L13
 757              	.L44:
 467:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       {
 758              		.loc 2 467 0 discriminator 1
 759 052a 4FF46053 		mov	r3, #14336
 760 052e C4F20203 		movt	r3, 16386
 761 0532 1B6F     		ldr	r3, [r3, #112]
 762 0534 03F00203 		and	r3, r3, #2
 763 0538 002B     		cmp	r3, #0
 764 053a EED0     		beq	.L45
 765 053c 18E0     		b	.L38
 766              	.L43:
 472:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         }      
 473:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       }
 474:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     }
 475:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     else
 476:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     {
 477:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       /* Get timeout */
 478:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       timeout = HAL_GetTick() + LSE_TIMEOUT_VALUE;
 767              		.loc 2 478 0
 768 053e FFF7FEFF 		bl	HAL_GetTick
 769 0542 0346     		mov	r3, r0
 770 0544 03F59C53 		add	r3, r3, #4992
 771 0548 0833     		adds	r3, r3, #8
 772 054a FB64     		str	r3, [r7, #76]
 479:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       
 480:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       /* Wait till LSE is ready */  
 481:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 773              		.loc 2 481 0
 774 054c 07E0     		b	.L46
 775              	.L47:
 482:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       {
 483:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         if(HAL_GetTick() >= timeout)
 776              		.loc 2 483 0
 777 054e FFF7FEFF 		bl	HAL_GetTick
 778 0552 0246     		mov	r2, r0
 779 0554 FB6C     		ldr	r3, [r7, #76]
 780 0556 9A42     		cmp	r2, r3
 781 0558 01D3     		bcc	.L46
 484:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         {
 485:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           return HAL_TIMEOUT;
 782              		.loc 2 485 0
 783 055a 0323     		movs	r3, #3
 784 055c BEE0     		b	.L13
 785              	.L46:
 481:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       {
 786              		.loc 2 481 0 discriminator 1
 787 055e 4FF46053 		mov	r3, #14336
 788 0562 C4F20203 		movt	r3, 16386
 789 0566 1B6F     		ldr	r3, [r3, #112]
 790 0568 03F00203 		and	r3, r3, #2
 791 056c 002B     		cmp	r3, #0
 792 056e EED1     		bne	.L47
 793              	.L38:
 486:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         }      
 487:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       }
 488:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     }
 489:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   }
 490:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /*-------------------------------- PLL Configuration -----------------------*/
 491:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* Check the parameters */
 492:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 493:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 794              		.loc 2 493 0
 795 0570 7B68     		ldr	r3, [r7, #4]
 796 0572 9B69     		ldr	r3, [r3, #24]
 797 0574 002B     		cmp	r3, #0
 798 0576 00F0B080 		beq	.L48
 494:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   {
 495:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     /* Check if the PLL is used as system clock or not */
 496:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 799              		.loc 2 496 0
 800 057a 4FF46053 		mov	r3, #14336
 801 057e C4F20203 		movt	r3, 16386
 802 0582 9B68     		ldr	r3, [r3, #8]
 803 0584 03F00C03 		and	r3, r3, #12
 804 0588 082B     		cmp	r3, #8
 805 058a 00F0A480 		beq	.L49
 497:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     { 
 498:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 806              		.loc 2 498 0
 807 058e 7B68     		ldr	r3, [r7, #4]
 808 0590 9B69     		ldr	r3, [r3, #24]
 809 0592 022B     		cmp	r3, #2
 810 0594 40F08280 		bne	.L50
 499:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       {
 500:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         /* Check the parameters */
 501:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 502:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 503:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 504:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 505:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 506:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         
 507:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         /* Disable the main PLL. */
 508:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         __HAL_RCC_PLL_DISABLE();
 811              		.loc 2 508 0
 812 0598 6023     		movs	r3, #96
 813 059a C4F24723 		movt	r3, 16967
 814 059e 0022     		movs	r2, #0
 815 05a0 1A60     		str	r2, [r3]
 509:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 510:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         /* Get timeout */
 511:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         timeout = HAL_GetTick() + PLL_TIMEOUT_VALUE;
 816              		.loc 2 511 0
 817 05a2 FFF7FEFF 		bl	HAL_GetTick
 818 05a6 0346     		mov	r3, r0
 819 05a8 6433     		adds	r3, r3, #100
 820 05aa FB64     		str	r3, [r7, #76]
 512:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       
 513:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         /* Wait till PLL is ready */  
 514:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 821              		.loc 2 514 0
 822 05ac 07E0     		b	.L51
 823              	.L52:
 515:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         {
 516:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           if(HAL_GetTick() >= timeout)
 824              		.loc 2 516 0
 825 05ae FFF7FEFF 		bl	HAL_GetTick
 826 05b2 0246     		mov	r2, r0
 827 05b4 FB6C     		ldr	r3, [r7, #76]
 828 05b6 9A42     		cmp	r2, r3
 829 05b8 01D3     		bcc	.L51
 517:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           {
 518:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****             return HAL_TIMEOUT;
 830              		.loc 2 518 0
 831 05ba 0323     		movs	r3, #3
 832 05bc 8EE0     		b	.L13
 833              	.L51:
 514:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         {
 834              		.loc 2 514 0 discriminator 1
 835 05be 4FF46053 		mov	r3, #14336
 836 05c2 C4F20203 		movt	r3, 16386
 837 05c6 1B68     		ldr	r3, [r3]
 838 05c8 03F00073 		and	r3, r3, #33554432
 839 05cc 002B     		cmp	r3, #0
 840 05ce EED1     		bne	.L52
 519:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           }      
 520:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         }        
 521:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 522:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         /* Configure the main PLL clock source, multiplication and division factors. */
 523:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 841              		.loc 2 523 0
 842 05d0 4FF46053 		mov	r3, #14336
 843 05d4 C4F20203 		movt	r3, 16386
 844 05d8 7A68     		ldr	r2, [r7, #4]
 845 05da 116A     		ldr	r1, [r2, #32]
 846 05dc 7A68     		ldr	r2, [r7, #4]
 847 05de 506A     		ldr	r0, [r2, #36]
 848 05e0 47F6C072 		movw	r2, #32704
 849 05e4 BA63     		str	r2, [r7, #56]
 850              	.LBB66:
 851              	.LBB67:
 402:D:\workspace\console800480\system\core_cmInstr.h ****    return(result);
 852              		.loc 3 402 0
 853 05e6 BA6B     		ldr	r2, [r7, #56]
 854              	@ 402 "D:\workspace\console800480\system/core_cmInstr.h" 1
 855 05e8 92FAA2F2 		rbit r2, r2
 856              	@ 0 "" 2
 857              		.thumb
 858 05ec 7A63     		str	r2, [r7, #52]
 403:D:\workspace\console800480\system\core_cmInstr.h **** }
 859              		.loc 3 403 0
 860 05ee 7A6B     		ldr	r2, [r7, #52]
 861 05f0 3A63     		str	r2, [r7, #48]
 862              	.LBE67:
 863              	.LBE66:
 864              	.LBB68:
 865              	.LBB69:
 563:D:\workspace\console800480\system\core_cmInstr.h ****   return(result);
 866              		.loc 3 563 0
 867 05f2 3A6B     		ldr	r2, [r7, #48]
 868              	@ 563 "D:\workspace\console800480\system/core_cmInstr.h" 1
 869 05f4 B2FA82F2 		clz r2, r2
 870              	@ 0 "" 2
 871              		.thumb
 872 05f8 87F82F20 		strb	r2, [r7, #47]
 873              		.loc 3 564 0
 874 05fc 97F82F20 		ldrb	r2, [r7, #47]	@ zero_extendqisi2
 875              	.LBE69:
 876              	.LBE68:
 877              		.loc 2 523 0
 878 0600 00FA02F2 		lsl	r2, r0, r2
 879 0604 1143     		orrs	r1, r1, r2
 880 0606 7A68     		ldr	r2, [r7, #4]
 881 0608 926A     		ldr	r2, [r2, #40]
 882 060a 5208     		lsrs	r2, r2, #1
 883 060c 501E     		subs	r0, r2, #1
 884 060e 4FF44032 		mov	r2, #196608
 885 0612 BA62     		str	r2, [r7, #40]
 886              	.LBB70:
 887              	.LBB71:
 402:D:\workspace\console800480\system\core_cmInstr.h ****    return(result);
 888              		.loc 3 402 0
 889 0614 BA6A     		ldr	r2, [r7, #40]
 890              	@ 402 "D:\workspace\console800480\system/core_cmInstr.h" 1
 891 0616 92FAA2F2 		rbit r2, r2
 892              	@ 0 "" 2
 893              		.thumb
 894 061a 7A62     		str	r2, [r7, #36]
 403:D:\workspace\console800480\system\core_cmInstr.h **** }
 895              		.loc 3 403 0
 896 061c 7A6A     		ldr	r2, [r7, #36]
 897 061e 3A62     		str	r2, [r7, #32]
 898              	.LBE71:
 899              	.LBE70:
 900              	.LBB72:
 901              	.LBB73:
 563:D:\workspace\console800480\system\core_cmInstr.h ****   return(result);
 902              		.loc 3 563 0
 903 0620 3A6A     		ldr	r2, [r7, #32]
 904              	@ 563 "D:\workspace\console800480\system/core_cmInstr.h" 1
 905 0622 B2FA82F2 		clz r2, r2
 906              	@ 0 "" 2
 907              		.thumb
 908 0626 FA77     		strb	r2, [r7, #31]
 909              		.loc 3 564 0
 910 0628 FA7F     		ldrb	r2, [r7, #31]	@ zero_extendqisi2
 911              	.LBE73:
 912              	.LBE72:
 913              		.loc 2 523 0
 914 062a 00FA02F2 		lsl	r2, r0, r2
 915 062e 1143     		orrs	r1, r1, r2
 916 0630 7A68     		ldr	r2, [r7, #4]
 917 0632 D269     		ldr	r2, [r2, #28]
 918 0634 1143     		orrs	r1, r1, r2
 919 0636 7A68     		ldr	r2, [r7, #4]
 920 0638 D06A     		ldr	r0, [r2, #44]
 921 063a 4FF07062 		mov	r2, #251658240
 922 063e BA61     		str	r2, [r7, #24]
 923              	.LBB74:
 924              	.LBB75:
 402:D:\workspace\console800480\system\core_cmInstr.h ****    return(result);
 925              		.loc 3 402 0
 926 0640 BA69     		ldr	r2, [r7, #24]
 927              	@ 402 "D:\workspace\console800480\system/core_cmInstr.h" 1
 928 0642 92FAA2F2 		rbit r2, r2
 929              	@ 0 "" 2
 930              		.thumb
 931 0646 7A61     		str	r2, [r7, #20]
 403:D:\workspace\console800480\system\core_cmInstr.h **** }
 932              		.loc 3 403 0
 933 0648 7A69     		ldr	r2, [r7, #20]
 934 064a 3A61     		str	r2, [r7, #16]
 935              	.LBE75:
 936              	.LBE74:
 937              	.LBB76:
 938              	.LBB77:
 563:D:\workspace\console800480\system\core_cmInstr.h ****   return(result);
 939              		.loc 3 563 0
 940 064c 3A69     		ldr	r2, [r7, #16]
 941              	@ 563 "D:\workspace\console800480\system/core_cmInstr.h" 1
 942 064e B2FA82F2 		clz r2, r2
 943              	@ 0 "" 2
 944              		.thumb
 945 0652 FA73     		strb	r2, [r7, #15]
 946              		.loc 3 564 0
 947 0654 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 948              	.LBE77:
 949              	.LBE76:
 950              		.loc 2 523 0
 951 0656 00FA02F2 		lsl	r2, r0, r2
 952 065a 0A43     		orrs	r2, r2, r1
 953 065c 42F00052 		orr	r2, r2, #536870912
 954 0660 5A60     		str	r2, [r3, #4]
 524:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****                              RCC_OscInitStruct->PLL.PLLM,
 525:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****                              RCC_OscInitStruct->PLL.PLLN,
 526:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****                              RCC_OscInitStruct->PLL.PLLP,
 527:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****                              RCC_OscInitStruct->PLL.PLLQ);
 528:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         /* Enable the main PLL. */
 529:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         __HAL_RCC_PLL_ENABLE();
 955              		.loc 2 529 0
 956 0662 6023     		movs	r3, #96
 957 0664 C4F24723 		movt	r3, 16967
 958 0668 0122     		movs	r2, #1
 959 066a 1A60     		str	r2, [r3]
 530:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 531:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         /* Get timeout */
 532:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         timeout = HAL_GetTick() + PLL_TIMEOUT_VALUE;
 960              		.loc 2 532 0
 961 066c FFF7FEFF 		bl	HAL_GetTick
 962 0670 0346     		mov	r3, r0
 963 0672 6433     		adds	r3, r3, #100
 964 0674 FB64     		str	r3, [r7, #76]
 533:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       
 534:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         /* Wait till PLL is ready */  
 535:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 965              		.loc 2 535 0
 966 0676 07E0     		b	.L59
 967              	.L60:
 536:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         {
 537:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           if(HAL_GetTick() >= timeout)
 968              		.loc 2 537 0
 969 0678 FFF7FEFF 		bl	HAL_GetTick
 970 067c 0246     		mov	r2, r0
 971 067e FB6C     		ldr	r3, [r7, #76]
 972 0680 9A42     		cmp	r2, r3
 973 0682 01D3     		bcc	.L59
 538:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           {
 539:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****             return HAL_TIMEOUT;
 974              		.loc 2 539 0
 975 0684 0323     		movs	r3, #3
 976 0686 29E0     		b	.L13
 977              	.L59:
 535:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         {
 978              		.loc 2 535 0 discriminator 1
 979 0688 4FF46053 		mov	r3, #14336
 980 068c C4F20203 		movt	r3, 16386
 981 0690 1B68     		ldr	r3, [r3]
 982 0692 03F00073 		and	r3, r3, #33554432
 983 0696 002B     		cmp	r3, #0
 984 0698 EED0     		beq	.L60
 985 069a 1EE0     		b	.L48
 986              	.L50:
 540:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           }      
 541:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         }
 542:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       }
 543:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       else
 544:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       {
 545:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         /* Disable the main PLL. */
 546:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         __HAL_RCC_PLL_DISABLE();
 987              		.loc 2 546 0
 988 069c 6023     		movs	r3, #96
 989 069e C4F24723 		movt	r3, 16967
 990 06a2 0022     		movs	r2, #0
 991 06a4 1A60     		str	r2, [r3]
 547:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         /* Get timeout */
 548:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         timeout = HAL_GetTick() + PLL_TIMEOUT_VALUE;
 992              		.loc 2 548 0
 993 06a6 FFF7FEFF 		bl	HAL_GetTick
 994 06aa 0346     		mov	r3, r0
 995 06ac 6433     		adds	r3, r3, #100
 996 06ae FB64     		str	r3, [r7, #76]
 549:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       
 550:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         /* Wait till PLL is ready */  
 551:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 997              		.loc 2 551 0
 998 06b0 07E0     		b	.L61
 999              	.L62:
 552:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         {
 553:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           if(HAL_GetTick() >= timeout)
 1000              		.loc 2 553 0
 1001 06b2 FFF7FEFF 		bl	HAL_GetTick
 1002 06b6 0246     		mov	r2, r0
 1003 06b8 FB6C     		ldr	r3, [r7, #76]
 1004 06ba 9A42     		cmp	r2, r3
 1005 06bc 01D3     		bcc	.L61
 554:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           {
 555:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****             return HAL_TIMEOUT;
 1006              		.loc 2 555 0
 1007 06be 0323     		movs	r3, #3
 1008 06c0 0CE0     		b	.L13
 1009              	.L61:
 551:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         {
 1010              		.loc 2 551 0 discriminator 1
 1011 06c2 4FF46053 		mov	r3, #14336
 1012 06c6 C4F20203 		movt	r3, 16386
 1013 06ca 1B68     		ldr	r3, [r3]
 1014 06cc 03F00073 		and	r3, r3, #33554432
 1015 06d0 002B     		cmp	r3, #0
 1016 06d2 EED1     		bne	.L62
 1017 06d4 01E0     		b	.L48
 1018              	.L49:
 556:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           }      
 557:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         }
 558:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       }
 559:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     }
 560:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     else
 561:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     {
 562:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       return HAL_ERROR;
 1019              		.loc 2 562 0
 1020 06d6 0123     		movs	r3, #1
 1021 06d8 00E0     		b	.L13
 1022              	.L48:
 563:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     }
 564:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   }
 565:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   return HAL_OK;
 1023              		.loc 2 565 0
 1024 06da 0023     		movs	r3, #0
 1025              	.L13:
 566:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** }
 1026              		.loc 2 566 0
 1027 06dc 1846     		mov	r0, r3
 1028 06de 5037     		adds	r7, r7, #80
 1029 06e0 BD46     		mov	sp, r7
 1030              		@ sp needed
 1031 06e2 80BD     		pop	{r7, pc}
 1032              		.cfi_endproc
 1033              	.LFE56:
 1035              		.align	2
 1036              		.global	HAL_RCC_ClockConfig
 1037              		.thumb
 1038              		.thumb_func
 1040              	HAL_RCC_ClockConfig:
 1041              	.LFB57:
 567:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****  
 568:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** /**
 569:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @brief  Initializes the CPU, AHB and APB busses clocks according to the specified 
 570:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *         parameters in the RCC_ClkInitStruct.
 571:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @param  RCC_ClkInitStruct: pointer to an RCC_OscInitTypeDef structure that
 572:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *         contains the configuration information for the RCC peripheral.
 573:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @param  FLatency: FLASH Latency, this parameter depend on device selected
 574:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * 
 575:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
 576:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *         and updated by HAL_RCC_GetHCLKFreq() function called within this function
 577:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *
 578:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @note   The HSI is used (enabled by hardware) as system clock source after
 579:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *         startup from Reset, wake-up from STOP and STANDBY mode, or in case
 580:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *         of failure of the HSE used directly or indirectly as system clock
 581:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *         (if the Clock Security System CSS is enabled).
 582:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *           
 583:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @note   A switch from one clock source to another occurs only if the target
 584:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *         clock source is ready (clock stable after startup delay or PLL locked). 
 585:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *         If a clock source which is not yet ready is selected, the switch will
 586:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *         occur when the clock source will be ready. 
 587:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *           
 588:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @note   Depending on the device voltage range, the software has to set correctly
 589:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
 590:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *         (for more details refer to section above "Initialization/de-initialization functions")
 591:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @retval None
 592:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   */
 593:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
 594:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** {
 1042              		.loc 2 594 0
 1043              		.cfi_startproc
 1044              		@ args = 0, pretend = 0, frame = 16
 1045              		@ frame_needed = 1, uses_anonymous_args = 0
 1046 06e4 80B5     		push	{r7, lr}
 1047              		.cfi_def_cfa_offset 8
 1048              		.cfi_offset 7, -8
 1049              		.cfi_offset 14, -4
 1050 06e6 84B0     		sub	sp, sp, #16
 1051              		.cfi_def_cfa_offset 24
 1052 06e8 00AF     		add	r7, sp, #0
 1053              		.cfi_def_cfa_register 7
 1054 06ea 7860     		str	r0, [r7, #4]
 1055 06ec 3960     		str	r1, [r7]
 595:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 596:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   uint32_t timeout = 0;   
 1056              		.loc 2 596 0
 1057 06ee 0023     		movs	r3, #0
 1058 06f0 FB60     		str	r3, [r7, #12]
 597:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****  
 598:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* Check the parameters */
 599:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 600:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   assert_param(IS_FLASH_LATENCY(FLatency));
 601:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****  
 602:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
 603:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     must be correctly programmed according to the frequency of the CPU clock 
 604:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     (HCLK) and the supply voltage of the device. */
 605:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   
 606:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* Increasing the CPU frequency */
 607:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 1059              		.loc 2 607 0
 1060 06f2 4FF47053 		mov	r3, #15360
 1061 06f6 C4F20203 		movt	r3, 16386
 1062 06fa 1B68     		ldr	r3, [r3]
 1063 06fc 03F00702 		and	r2, r3, #7
 1064 0700 3B68     		ldr	r3, [r7]
 1065 0702 9A42     		cmp	r2, r3
 1066 0704 80F0AF80 		bcs	.L64
 608:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   {    
 609:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
 610:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     __HAL_FLASH_SET_LATENCY(FLatency);
 1067              		.loc 2 610 0
 1068 0708 4FF47053 		mov	r3, #15360
 1069 070c C4F20203 		movt	r3, 16386
 1070 0710 3A68     		ldr	r2, [r7]
 1071 0712 D2B2     		uxtb	r2, r2
 1072 0714 1A70     		strb	r2, [r3]
 611:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     
 612:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     /* Check that the new number of wait states is taken into account to access the Flash
 613:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     memory by reading the FLASH_ACR register */
 614:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 1073              		.loc 2 614 0
 1074 0716 4FF47053 		mov	r3, #15360
 1075 071a C4F20203 		movt	r3, 16386
 1076 071e 1B68     		ldr	r3, [r3]
 1077 0720 03F00702 		and	r2, r3, #7
 1078 0724 3B68     		ldr	r3, [r7]
 1079 0726 9A42     		cmp	r2, r3
 1080 0728 01D0     		beq	.L65
 615:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     {
 616:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       return HAL_ERROR;
 1081              		.loc 2 616 0
 1082 072a 0123     		movs	r3, #1
 1083 072c 81E1     		b	.L66
 1084              	.L65:
 617:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     }
 618:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 619:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     /*-------------------------- HCLK Configuration --------------------------*/
 620:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 1085              		.loc 2 620 0
 1086 072e 7B68     		ldr	r3, [r7, #4]
 1087 0730 1B68     		ldr	r3, [r3]
 1088 0732 03F00203 		and	r3, r3, #2
 1089 0736 002B     		cmp	r3, #0
 1090 0738 0ED0     		beq	.L67
 621:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     {
 622:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 623:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 1091              		.loc 2 623 0
 1092 073a 4FF46053 		mov	r3, #14336
 1093 073e C4F20203 		movt	r3, 16386
 1094 0742 4FF46052 		mov	r2, #14336
 1095 0746 C4F20202 		movt	r2, 16386
 1096 074a 9268     		ldr	r2, [r2, #8]
 1097 074c 22F0F001 		bic	r1, r2, #240
 1098 0750 7A68     		ldr	r2, [r7, #4]
 1099 0752 9268     		ldr	r2, [r2, #8]
 1100 0754 0A43     		orrs	r2, r2, r1
 1101 0756 9A60     		str	r2, [r3, #8]
 1102              	.L67:
 624:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     }
 625:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 626:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     /*------------------------- SYSCLK Configuration ---------------------------*/ 
 627:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 1103              		.loc 2 627 0
 1104 0758 7B68     		ldr	r3, [r7, #4]
 1105 075a 1B68     		ldr	r3, [r3]
 1106 075c 03F00103 		and	r3, r3, #1
 1107 0760 002B     		cmp	r3, #0
 1108 0762 00F02D81 		beq	.L68
 628:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     {    
 629:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 630:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       
 631:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       /* HSE is selected as System Clock Source */
 632:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 1109              		.loc 2 632 0
 1110 0766 7B68     		ldr	r3, [r7, #4]
 1111 0768 5B68     		ldr	r3, [r3, #4]
 1112 076a 012B     		cmp	r3, #1
 1113 076c 0AD1     		bne	.L69
 633:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       {
 634:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         /* Check the HSE ready flag */  
 635:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 1114              		.loc 2 635 0
 1115 076e 4FF46053 		mov	r3, #14336
 1116 0772 C4F20203 		movt	r3, 16386
 1117 0776 1B68     		ldr	r3, [r3]
 1118 0778 03F40033 		and	r3, r3, #131072
 1119 077c 002B     		cmp	r3, #0
 1120 077e 1BD1     		bne	.L70
 636:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         {
 637:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           return HAL_ERROR;
 1121              		.loc 2 637 0
 1122 0780 0123     		movs	r3, #1
 1123 0782 56E1     		b	.L66
 1124              	.L69:
 638:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         }
 639:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       }
 640:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       /* PLL is selected as System Clock Source */
 641:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 1125              		.loc 2 641 0
 1126 0784 7B68     		ldr	r3, [r7, #4]
 1127 0786 5B68     		ldr	r3, [r3, #4]
 1128 0788 022B     		cmp	r3, #2
 1129 078a 0AD1     		bne	.L71
 642:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       {
 643:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         /* Check the PLL ready flag */  
 644:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 1130              		.loc 2 644 0
 1131 078c 4FF46053 		mov	r3, #14336
 1132 0790 C4F20203 		movt	r3, 16386
 1133 0794 1B68     		ldr	r3, [r3]
 1134 0796 03F00073 		and	r3, r3, #33554432
 1135 079a 002B     		cmp	r3, #0
 1136 079c 0CD1     		bne	.L70
 645:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         {
 646:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           return HAL_ERROR;
 1137              		.loc 2 646 0
 1138 079e 0123     		movs	r3, #1
 1139 07a0 47E1     		b	.L66
 1140              	.L71:
 647:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         }
 648:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       }
 649:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       /* HSI is selected as System Clock Source */
 650:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       else
 651:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       {
 652:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         /* Check the HSI ready flag */  
 653:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 1141              		.loc 2 653 0
 1142 07a2 4FF46053 		mov	r3, #14336
 1143 07a6 C4F20203 		movt	r3, 16386
 1144 07aa 1B68     		ldr	r3, [r3]
 1145 07ac 03F00203 		and	r3, r3, #2
 1146 07b0 002B     		cmp	r3, #0
 1147 07b2 01D1     		bne	.L70
 654:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         {
 655:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           return HAL_ERROR;
 1148              		.loc 2 655 0
 1149 07b4 0123     		movs	r3, #1
 1150 07b6 3CE1     		b	.L66
 1151              	.L70:
 656:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         }
 657:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       }
 658:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 1152              		.loc 2 658 0
 1153 07b8 4FF46053 		mov	r3, #14336
 1154 07bc C4F20203 		movt	r3, 16386
 1155 07c0 4FF46052 		mov	r2, #14336
 1156 07c4 C4F20202 		movt	r2, 16386
 1157 07c8 9268     		ldr	r2, [r2, #8]
 1158 07ca 22F00301 		bic	r1, r2, #3
 1159 07ce 7A68     		ldr	r2, [r7, #4]
 1160 07d0 5268     		ldr	r2, [r2, #4]
 1161 07d2 0A43     		orrs	r2, r2, r1
 1162 07d4 9A60     		str	r2, [r3, #8]
 659:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****  
 660:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       /* Get timeout */
 661:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       timeout = HAL_GetTick() + CLOCKSWITCH_TIMEOUT_VALUE;
 1163              		.loc 2 661 0
 1164 07d6 FFF7FEFF 		bl	HAL_GetTick
 1165 07da 0346     		mov	r3, r0
 1166 07dc 03F59C53 		add	r3, r3, #4992
 1167 07e0 0833     		adds	r3, r3, #8
 1168 07e2 FB60     		str	r3, [r7, #12]
 662:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       
 663:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 1169              		.loc 2 663 0
 1170 07e4 7B68     		ldr	r3, [r7, #4]
 1171 07e6 5B68     		ldr	r3, [r3, #4]
 1172 07e8 012B     		cmp	r3, #1
 1173 07ea 12D1     		bne	.L72
 664:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       {
 665:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 1174              		.loc 2 665 0
 1175 07ec 07E0     		b	.L73
 1176              	.L74:
 666:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         {
 667:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           if(HAL_GetTick() >= timeout)
 1177              		.loc 2 667 0
 1178 07ee FFF7FEFF 		bl	HAL_GetTick
 1179 07f2 0246     		mov	r2, r0
 1180 07f4 FB68     		ldr	r3, [r7, #12]
 1181 07f6 9A42     		cmp	r2, r3
 1182 07f8 01D3     		bcc	.L73
 668:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           {
 669:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****             return HAL_TIMEOUT;
 1183              		.loc 2 669 0
 1184 07fa 0323     		movs	r3, #3
 1185 07fc 19E1     		b	.L66
 1186              	.L73:
 665:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         {
 1187              		.loc 2 665 0 discriminator 1
 1188 07fe 4FF46053 		mov	r3, #14336
 1189 0802 C4F20203 		movt	r3, 16386
 1190 0806 9B68     		ldr	r3, [r3, #8]
 1191 0808 03F00C03 		and	r3, r3, #12
 1192 080c 042B     		cmp	r3, #4
 1193 080e EED1     		bne	.L74
 1194 0810 D6E0     		b	.L68
 1195              	.L72:
 670:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           } 
 671:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         }
 672:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       }
 673:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 1196              		.loc 2 673 0
 1197 0812 7B68     		ldr	r3, [r7, #4]
 1198 0814 5B68     		ldr	r3, [r3, #4]
 1199 0816 022B     		cmp	r3, #2
 1200 0818 12D1     		bne	.L75
 674:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       {
 675:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 1201              		.loc 2 675 0
 1202 081a 07E0     		b	.L76
 1203              	.L77:
 676:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         {
 677:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           if(HAL_GetTick() >= timeout)
 1204              		.loc 2 677 0
 1205 081c FFF7FEFF 		bl	HAL_GetTick
 1206 0820 0246     		mov	r2, r0
 1207 0822 FB68     		ldr	r3, [r7, #12]
 1208 0824 9A42     		cmp	r2, r3
 1209 0826 01D3     		bcc	.L76
 678:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           {
 679:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****             return HAL_TIMEOUT;
 1210              		.loc 2 679 0
 1211 0828 0323     		movs	r3, #3
 1212 082a 02E1     		b	.L66
 1213              	.L76:
 675:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         {
 1214              		.loc 2 675 0 discriminator 1
 1215 082c 4FF46053 		mov	r3, #14336
 1216 0830 C4F20203 		movt	r3, 16386
 1217 0834 9B68     		ldr	r3, [r3, #8]
 1218 0836 03F00C03 		and	r3, r3, #12
 1219 083a 082B     		cmp	r3, #8
 1220 083c EED1     		bne	.L77
 1221 083e BFE0     		b	.L68
 1222              	.L75:
 680:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           } 
 681:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         }
 682:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       }
 683:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       else
 684:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       {
 685:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 1223              		.loc 2 685 0
 1224 0840 07E0     		b	.L78
 1225              	.L79:
 686:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         {
 687:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           if(HAL_GetTick() >= timeout)
 1226              		.loc 2 687 0
 1227 0842 FFF7FEFF 		bl	HAL_GetTick
 1228 0846 0246     		mov	r2, r0
 1229 0848 FB68     		ldr	r3, [r7, #12]
 1230 084a 9A42     		cmp	r2, r3
 1231 084c 01D3     		bcc	.L78
 688:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           {
 689:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****             return HAL_TIMEOUT;
 1232              		.loc 2 689 0
 1233 084e 0323     		movs	r3, #3
 1234 0850 EFE0     		b	.L66
 1235              	.L78:
 685:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         {
 1236              		.loc 2 685 0 discriminator 1
 1237 0852 4FF46053 		mov	r3, #14336
 1238 0856 C4F20203 		movt	r3, 16386
 1239 085a 9B68     		ldr	r3, [r3, #8]
 1240 085c 03F00C03 		and	r3, r3, #12
 1241 0860 002B     		cmp	r3, #0
 1242 0862 EED1     		bne	.L79
 1243 0864 ACE0     		b	.L68
 1244              	.L64:
 690:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           }
 691:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         }
 692:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       }
 693:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     }    
 694:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   }
 695:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* Decreasing the CPU frequency */
 696:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   else
 697:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   {
 698:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     /*-------------------------- HCLK Configuration --------------------------*/
 699:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 1245              		.loc 2 699 0
 1246 0866 7B68     		ldr	r3, [r7, #4]
 1247 0868 1B68     		ldr	r3, [r3]
 1248 086a 03F00203 		and	r3, r3, #2
 1249 086e 002B     		cmp	r3, #0
 1250 0870 0ED0     		beq	.L80
 700:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     {
 701:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 702:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 1251              		.loc 2 702 0
 1252 0872 4FF46053 		mov	r3, #14336
 1253 0876 C4F20203 		movt	r3, 16386
 1254 087a 4FF46052 		mov	r2, #14336
 1255 087e C4F20202 		movt	r2, 16386
 1256 0882 9268     		ldr	r2, [r2, #8]
 1257 0884 22F0F001 		bic	r1, r2, #240
 1258 0888 7A68     		ldr	r2, [r7, #4]
 1259 088a 9268     		ldr	r2, [r2, #8]
 1260 088c 0A43     		orrs	r2, r2, r1
 1261 088e 9A60     		str	r2, [r3, #8]
 1262              	.L80:
 703:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     }
 704:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 705:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     /*------------------------- SYSCLK Configuration -------------------------*/
 706:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 1263              		.loc 2 706 0
 1264 0890 7B68     		ldr	r3, [r7, #4]
 1265 0892 1B68     		ldr	r3, [r3]
 1266 0894 03F00103 		and	r3, r3, #1
 1267 0898 002B     		cmp	r3, #0
 1268 089a 7ED0     		beq	.L81
 707:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     {    
 708:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 709:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       
 710:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       /* HSE is selected as System Clock Source */
 711:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 1269              		.loc 2 711 0
 1270 089c 7B68     		ldr	r3, [r7, #4]
 1271 089e 5B68     		ldr	r3, [r3, #4]
 1272 08a0 012B     		cmp	r3, #1
 1273 08a2 0AD1     		bne	.L82
 712:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       {
 713:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         /* Check the HSE ready flag */  
 714:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 1274              		.loc 2 714 0
 1275 08a4 4FF46053 		mov	r3, #14336
 1276 08a8 C4F20203 		movt	r3, 16386
 1277 08ac 1B68     		ldr	r3, [r3]
 1278 08ae 03F40033 		and	r3, r3, #131072
 1279 08b2 002B     		cmp	r3, #0
 1280 08b4 1BD1     		bne	.L83
 715:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         {
 716:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           return HAL_ERROR;
 1281              		.loc 2 716 0
 1282 08b6 0123     		movs	r3, #1
 1283 08b8 BBE0     		b	.L66
 1284              	.L82:
 717:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         }
 718:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       }
 719:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       /* PLL is selected as System Clock Source */
 720:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 1285              		.loc 2 720 0
 1286 08ba 7B68     		ldr	r3, [r7, #4]
 1287 08bc 5B68     		ldr	r3, [r3, #4]
 1288 08be 022B     		cmp	r3, #2
 1289 08c0 0AD1     		bne	.L84
 721:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       {
 722:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         /* Check the PLL ready flag */  
 723:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 1290              		.loc 2 723 0
 1291 08c2 4FF46053 		mov	r3, #14336
 1292 08c6 C4F20203 		movt	r3, 16386
 1293 08ca 1B68     		ldr	r3, [r3]
 1294 08cc 03F00073 		and	r3, r3, #33554432
 1295 08d0 002B     		cmp	r3, #0
 1296 08d2 0CD1     		bne	.L83
 724:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         {
 725:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           return HAL_ERROR;
 1297              		.loc 2 725 0
 1298 08d4 0123     		movs	r3, #1
 1299 08d6 ACE0     		b	.L66
 1300              	.L84:
 726:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         }
 727:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       }
 728:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       /* HSI is selected as System Clock Source */
 729:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       else
 730:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       {
 731:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         /* Check the HSI ready flag */  
 732:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 1301              		.loc 2 732 0
 1302 08d8 4FF46053 		mov	r3, #14336
 1303 08dc C4F20203 		movt	r3, 16386
 1304 08e0 1B68     		ldr	r3, [r3]
 1305 08e2 03F00203 		and	r3, r3, #2
 1306 08e6 002B     		cmp	r3, #0
 1307 08e8 01D1     		bne	.L83
 733:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         {
 734:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           return HAL_ERROR;
 1308              		.loc 2 734 0
 1309 08ea 0123     		movs	r3, #1
 1310 08ec A1E0     		b	.L66
 1311              	.L83:
 735:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         }
 736:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       }
 737:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 1312              		.loc 2 737 0
 1313 08ee 4FF46053 		mov	r3, #14336
 1314 08f2 C4F20203 		movt	r3, 16386
 1315 08f6 4FF46052 		mov	r2, #14336
 1316 08fa C4F20202 		movt	r2, 16386
 1317 08fe 9268     		ldr	r2, [r2, #8]
 1318 0900 22F00301 		bic	r1, r2, #3
 1319 0904 7A68     		ldr	r2, [r7, #4]
 1320 0906 5268     		ldr	r2, [r2, #4]
 1321 0908 0A43     		orrs	r2, r2, r1
 1322 090a 9A60     		str	r2, [r3, #8]
 738:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       
 739:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       /* Get timeout */
 740:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       timeout = HAL_GetTick() + CLOCKSWITCH_TIMEOUT_VALUE;
 1323              		.loc 2 740 0
 1324 090c FFF7FEFF 		bl	HAL_GetTick
 1325 0910 0346     		mov	r3, r0
 1326 0912 03F59C53 		add	r3, r3, #4992
 1327 0916 0833     		adds	r3, r3, #8
 1328 0918 FB60     		str	r3, [r7, #12]
 741:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       
 742:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 1329              		.loc 2 742 0
 1330 091a 7B68     		ldr	r3, [r7, #4]
 1331 091c 5B68     		ldr	r3, [r3, #4]
 1332 091e 012B     		cmp	r3, #1
 1333 0920 12D1     		bne	.L85
 743:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       {
 744:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 1334              		.loc 2 744 0
 1335 0922 07E0     		b	.L86
 1336              	.L87:
 745:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         {
 746:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           if(HAL_GetTick() >= timeout)
 1337              		.loc 2 746 0
 1338 0924 FFF7FEFF 		bl	HAL_GetTick
 1339 0928 0246     		mov	r2, r0
 1340 092a FB68     		ldr	r3, [r7, #12]
 1341 092c 9A42     		cmp	r2, r3
 1342 092e 01D3     		bcc	.L86
 747:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           {
 748:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****             return HAL_TIMEOUT;
 1343              		.loc 2 748 0
 1344 0930 0323     		movs	r3, #3
 1345 0932 7EE0     		b	.L66
 1346              	.L86:
 744:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         {
 1347              		.loc 2 744 0 discriminator 1
 1348 0934 4FF46053 		mov	r3, #14336
 1349 0938 C4F20203 		movt	r3, 16386
 1350 093c 9B68     		ldr	r3, [r3, #8]
 1351 093e 03F00C03 		and	r3, r3, #12
 1352 0942 042B     		cmp	r3, #4
 1353 0944 EED1     		bne	.L87
 1354 0946 28E0     		b	.L81
 1355              	.L85:
 749:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           } 
 750:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         }
 751:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       }
 752:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 1356              		.loc 2 752 0
 1357 0948 7B68     		ldr	r3, [r7, #4]
 1358 094a 5B68     		ldr	r3, [r3, #4]
 1359 094c 022B     		cmp	r3, #2
 1360 094e 12D1     		bne	.L88
 753:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       {
 754:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 1361              		.loc 2 754 0
 1362 0950 07E0     		b	.L89
 1363              	.L90:
 755:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         {
 756:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           if(HAL_GetTick() >= timeout)
 1364              		.loc 2 756 0
 1365 0952 FFF7FEFF 		bl	HAL_GetTick
 1366 0956 0246     		mov	r2, r0
 1367 0958 FB68     		ldr	r3, [r7, #12]
 1368 095a 9A42     		cmp	r2, r3
 1369 095c 01D3     		bcc	.L89
 757:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           {
 758:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****             return HAL_TIMEOUT;
 1370              		.loc 2 758 0
 1371 095e 0323     		movs	r3, #3
 1372 0960 67E0     		b	.L66
 1373              	.L89:
 754:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         {
 1374              		.loc 2 754 0 discriminator 1
 1375 0962 4FF46053 		mov	r3, #14336
 1376 0966 C4F20203 		movt	r3, 16386
 1377 096a 9B68     		ldr	r3, [r3, #8]
 1378 096c 03F00C03 		and	r3, r3, #12
 1379 0970 082B     		cmp	r3, #8
 1380 0972 EED1     		bne	.L90
 1381 0974 11E0     		b	.L81
 1382              	.L88:
 759:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           } 
 760:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         }
 761:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       }
 762:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       else
 763:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       {
 764:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 1383              		.loc 2 764 0
 1384 0976 07E0     		b	.L91
 1385              	.L92:
 765:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         {
 766:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           if(HAL_GetTick() >= timeout)
 1386              		.loc 2 766 0
 1387 0978 FFF7FEFF 		bl	HAL_GetTick
 1388 097c 0246     		mov	r2, r0
 1389 097e FB68     		ldr	r3, [r7, #12]
 1390 0980 9A42     		cmp	r2, r3
 1391 0982 01D3     		bcc	.L91
 767:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           {
 768:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****             return HAL_TIMEOUT;
 1392              		.loc 2 768 0
 1393 0984 0323     		movs	r3, #3
 1394 0986 54E0     		b	.L66
 1395              	.L91:
 764:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         {
 1396              		.loc 2 764 0 discriminator 1
 1397 0988 4FF46053 		mov	r3, #14336
 1398 098c C4F20203 		movt	r3, 16386
 1399 0990 9B68     		ldr	r3, [r3, #8]
 1400 0992 03F00C03 		and	r3, r3, #12
 1401 0996 002B     		cmp	r3, #0
 1402 0998 EED1     		bne	.L92
 1403              	.L81:
 769:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           }  
 770:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         }
 771:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       }
 772:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     }
 773:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     
 774:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
 775:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     __HAL_FLASH_SET_LATENCY(FLatency);
 1404              		.loc 2 775 0
 1405 099a 4FF47053 		mov	r3, #15360
 1406 099e C4F20203 		movt	r3, 16386
 1407 09a2 3A68     		ldr	r2, [r7]
 1408 09a4 D2B2     		uxtb	r2, r2
 1409 09a6 1A70     		strb	r2, [r3]
 776:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     
 777:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     /* Check that the new number of wait states is taken into account to access the Flash
 778:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     memory by reading the FLASH_ACR register */
 779:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 1410              		.loc 2 779 0
 1411 09a8 4FF47053 		mov	r3, #15360
 1412 09ac C4F20203 		movt	r3, 16386
 1413 09b0 1B68     		ldr	r3, [r3]
 1414 09b2 03F00702 		and	r2, r3, #7
 1415 09b6 3B68     		ldr	r3, [r7]
 1416 09b8 9A42     		cmp	r2, r3
 1417 09ba 01D0     		beq	.L68
 780:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     {
 781:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       return HAL_ERROR;
 1418              		.loc 2 781 0
 1419 09bc 0123     		movs	r3, #1
 1420 09be 38E0     		b	.L66
 1421              	.L68:
 782:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     }
 783:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****  }
 784:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 785:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /*-------------------------- PCLK1 Configuration ---------------------------*/ 
 786:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 1422              		.loc 2 786 0
 1423 09c0 7B68     		ldr	r3, [r7, #4]
 1424 09c2 1B68     		ldr	r3, [r3]
 1425 09c4 03F00403 		and	r3, r3, #4
 1426 09c8 002B     		cmp	r3, #0
 1427 09ca 0ED0     		beq	.L93
 787:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   {
 788:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 789:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 1428              		.loc 2 789 0
 1429 09cc 4FF46053 		mov	r3, #14336
 1430 09d0 C4F20203 		movt	r3, 16386
 1431 09d4 4FF46052 		mov	r2, #14336
 1432 09d8 C4F20202 		movt	r2, 16386
 1433 09dc 9268     		ldr	r2, [r2, #8]
 1434 09de 22F4E051 		bic	r1, r2, #7168
 1435 09e2 7A68     		ldr	r2, [r7, #4]
 1436 09e4 D268     		ldr	r2, [r2, #12]
 1437 09e6 0A43     		orrs	r2, r2, r1
 1438 09e8 9A60     		str	r2, [r3, #8]
 1439              	.L93:
 790:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   }
 791:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   
 792:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /*-------------------------- PCLK2 Configuration ---------------------------*/ 
 793:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 1440              		.loc 2 793 0
 1441 09ea 7B68     		ldr	r3, [r7, #4]
 1442 09ec 1B68     		ldr	r3, [r3]
 1443 09ee 03F00803 		and	r3, r3, #8
 1444 09f2 002B     		cmp	r3, #0
 1445 09f4 0FD0     		beq	.L94
 794:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   {
 795:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 796:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 1446              		.loc 2 796 0
 1447 09f6 4FF46053 		mov	r3, #14336
 1448 09fa C4F20203 		movt	r3, 16386
 1449 09fe 4FF46052 		mov	r2, #14336
 1450 0a02 C4F20202 		movt	r2, 16386
 1451 0a06 9268     		ldr	r2, [r2, #8]
 1452 0a08 22F46041 		bic	r1, r2, #57344
 1453 0a0c 7A68     		ldr	r2, [r7, #4]
 1454 0a0e 1269     		ldr	r2, [r2, #16]
 1455 0a10 D200     		lsls	r2, r2, #3
 1456 0a12 0A43     		orrs	r2, r2, r1
 1457 0a14 9A60     		str	r2, [r3, #8]
 1458              	.L94:
 797:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   }
 798:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 799:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* Setup SysTick Timer for 1 msec interrupts.
 800:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****      ------------------------------------------
 801:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     The SysTick_Config() function is a CMSIS function which configure:
 802:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****        - The SysTick Reload register with value passed as function parameter.
 803:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****        - Configure the SysTick IRQ priority to the lowest value (0x0F).
 804:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****        - Reset the SysTick Counter register.
 805:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****        - Configure the SysTick Counter clock source to be Core Clock Source (HCLK).
 806:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****        - Enable the SysTick Interrupt.
 807:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****        - Start the SysTick Counter.*/
 808:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   SysTick_Config(HAL_RCC_GetHCLKFreq() / 1000);
 1459              		.loc 2 808 0
 1460 0a16 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 1461 0a1a 0246     		mov	r2, r0
 1462 0a1c 44F6D353 		movw	r3, #19923
 1463 0a20 C1F26203 		movt	r3, 4194
 1464 0a24 A3FB0213 		umull	r1, r3, r3, r2
 1465 0a28 9B09     		lsrs	r3, r3, #6
 1466 0a2a 1846     		mov	r0, r3
 1467 0a2c FFF714FB 		bl	SysTick_Config
 809:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   
 810:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   return HAL_OK;
 1468              		.loc 2 810 0
 1469 0a30 0023     		movs	r3, #0
 1470              	.L66:
 811:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** }
 1471              		.loc 2 811 0
 1472 0a32 1846     		mov	r0, r3
 1473 0a34 1037     		adds	r7, r7, #16
 1474 0a36 BD46     		mov	sp, r7
 1475              		@ sp needed
 1476 0a38 80BD     		pop	{r7, pc}
 1477              		.cfi_endproc
 1478              	.LFE57:
 1480 0a3a 00BF     		.align	2
 1481              		.global	HAL_RCC_MCOConfig
 1482              		.thumb
 1483              		.thumb_func
 1485              	HAL_RCC_MCOConfig:
 1486              	.LFB58:
 812:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 813:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** /**
 814:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @}
 815:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   */
 816:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 817:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** /** @defgroup RCC_Group2 Peripheral Control functions 
 818:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****  *  @brief   RCC clocks control functions 
 819:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****  *
 820:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** @verbatim   
 821:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****  ===============================================================================
 822:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****                       ##### Peripheral Control functions #####
 823:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****  ===============================================================================  
 824:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     [..]
 825:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     This subsection provides a set of functions allowing to control the RCC Clocks 
 826:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     frequencies.
 827:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       
 828:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** @endverbatim
 829:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @{
 830:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   */
 831:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 832:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** /**
 833:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @brief  Selects the clock source to output on MCO1 pin(PA8) or on MCO2 pin(PC9).
 834:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @note   PA8/PC9 should be configured in alternate function mode.
 835:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @param  RCC_MCOx: specifies the output direction for the clock source.
 836:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *          This parameter can be one of the following values:
 837:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *            @arg RCC_MCO1: Clock source to output on MCO1 pin(PA8).
 838:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *            @arg RCC_MCO2: Clock source to output on MCO2 pin(PC9).
 839:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @param  RCC_MCOSource: specifies the clock source to output.
 840:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *          This parameter can be one of the following values:
 841:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *            @arg RCC_MCO1SOURCE_HSI: HSI clock selected as MCO1 source
 842:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *            @arg RCC_MCO1SOURCE_LSE: LSE clock selected as MCO1 source
 843:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *            @arg RCC_MCO1SOURCE_HSE: HSE clock selected as MCO1 source
 844:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *            @arg RCC_MCO1SOURCE_PLLCLK: main PLL clock selected as MCO1 source
 845:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *            @arg RCC_MCO2SOURCE_SYSCLK: System clock (SYSCLK) selected as MCO2 source
 846:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *            @arg RCC_MCO2SOURCE_PLLI2SCLK: PLLI2S clock selected as MCO2 source
 847:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *            @arg RCC_MCO2SOURCE_HSE: HSE clock selected as MCO2 source
 848:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *            @arg RCC_MCO2SOURCE_PLLCLK: main PLL clock selected as MCO2 source
 849:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @param  RCC_MCODiv: specifies the MCOx prescaler.
 850:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *          This parameter can be one of the following values:
 851:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *            @arg RCC_MCODIV_1: no division applied to MCOx clock
 852:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *            @arg RCC_MCODIV_2: division by 2 applied to MCOx clock
 853:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *            @arg RCC_MCODIV_3: division by 3 applied to MCOx clock
 854:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *            @arg RCC_MCODIV_4: division by 4 applied to MCOx clock
 855:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *            @arg RCC_MCODIV_5: division by 5 applied to MCOx clock
 856:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @retval None
 857:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   */
 858:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
 859:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** {
 1487              		.loc 2 859 0
 1488              		.cfi_startproc
 1489              		@ args = 0, pretend = 0, frame = 40
 1490              		@ frame_needed = 1, uses_anonymous_args = 0
 1491 0a3c 80B5     		push	{r7, lr}
 1492              		.cfi_def_cfa_offset 8
 1493              		.cfi_offset 7, -8
 1494              		.cfi_offset 14, -4
 1495 0a3e 8AB0     		sub	sp, sp, #40
 1496              		.cfi_def_cfa_offset 48
 1497 0a40 00AF     		add	r7, sp, #0
 1498              		.cfi_def_cfa_register 7
 1499 0a42 F860     		str	r0, [r7, #12]
 1500 0a44 B960     		str	r1, [r7, #8]
 1501 0a46 7A60     		str	r2, [r7, #4]
 860:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   GPIO_InitTypeDef GPIO_InitStruct;
 861:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* Check the parameters */
 862:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   assert_param(IS_RCC_MCO(RCC_MCOx));
 863:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   assert_param(IS_RCC_MCODIV(RCC_MCODiv));
 864:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* RCC_MCO1 */
 865:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   if(RCC_MCOx == RCC_MCO1)
 1502              		.loc 2 865 0
 1503 0a48 FB68     		ldr	r3, [r7, #12]
 1504 0a4a 002B     		cmp	r3, #0
 1505 0a4c 2FD1     		bne	.L96
 866:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   {
 867:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
 868:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     
 869:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     /* MCO1 Clock Enable */
 870:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     __MCO1_CLK_ENABLE();
 1506              		.loc 2 870 0
 1507 0a4e 4FF46053 		mov	r3, #14336
 1508 0a52 C4F20203 		movt	r3, 16386
 1509 0a56 4FF46052 		mov	r2, #14336
 1510 0a5a C4F20202 		movt	r2, 16386
 1511 0a5e 126B     		ldr	r2, [r2, #48]
 1512 0a60 42F00102 		orr	r2, r2, #1
 1513 0a64 1A63     		str	r2, [r3, #48]
 871:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     
 872:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     /* Configue the MCO1 pin in alternate function mode */    
 873:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     GPIO_InitStruct.Pin = MCO1_PIN;
 1514              		.loc 2 873 0
 1515 0a66 4FF48073 		mov	r3, #256
 1516 0a6a 7B61     		str	r3, [r7, #20]
 874:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 1517              		.loc 2 874 0
 1518 0a6c 0223     		movs	r3, #2
 1519 0a6e BB61     		str	r3, [r7, #24]
 875:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 1520              		.loc 2 875 0
 1521 0a70 0323     		movs	r3, #3
 1522 0a72 3B62     		str	r3, [r7, #32]
 876:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 1523              		.loc 2 876 0
 1524 0a74 0023     		movs	r3, #0
 1525 0a76 FB61     		str	r3, [r7, #28]
 877:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 1526              		.loc 2 877 0
 1527 0a78 0023     		movs	r3, #0
 1528 0a7a 7B62     		str	r3, [r7, #36]
 878:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 1529              		.loc 2 878 0
 1530 0a7c 07F11403 		add	r3, r7, #20
 1531 0a80 0020     		movs	r0, #0
 1532 0a82 C4F20200 		movt	r0, 16386
 1533 0a86 1946     		mov	r1, r3
 1534 0a88 FFF7FEFF 		bl	HAL_GPIO_Init
 879:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     
 880:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
 881:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 1535              		.loc 2 881 0
 1536 0a8c 4FF46053 		mov	r3, #14336
 1537 0a90 C4F20203 		movt	r3, 16386
 1538 0a94 4FF46052 		mov	r2, #14336
 1539 0a98 C4F20202 		movt	r2, 16386
 1540 0a9c 9268     		ldr	r2, [r2, #8]
 1541 0a9e 22F0EC61 		bic	r1, r2, #123731968
 1542 0aa2 B868     		ldr	r0, [r7, #8]
 1543 0aa4 7A68     		ldr	r2, [r7, #4]
 1544 0aa6 0243     		orrs	r2, r2, r0
 1545 0aa8 0A43     		orrs	r2, r2, r1
 1546 0aaa 9A60     		str	r2, [r3, #8]
 1547 0aac 30E0     		b	.L95
 1548              	.L96:
 882:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   }
 883:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   else
 884:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   {
 885:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     assert_param(IS_RCC_MCO2SOURCE(RCC_MCOSource));
 886:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     
 887:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     /* MCO2 Clock Enable */
 888:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     __MCO2_CLK_ENABLE();
 1549              		.loc 2 888 0
 1550 0aae 4FF46053 		mov	r3, #14336
 1551 0ab2 C4F20203 		movt	r3, 16386
 1552 0ab6 4FF46052 		mov	r2, #14336
 1553 0aba C4F20202 		movt	r2, 16386
 1554 0abe 126B     		ldr	r2, [r2, #48]
 1555 0ac0 42F00402 		orr	r2, r2, #4
 1556 0ac4 1A63     		str	r2, [r3, #48]
 889:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     
 890:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     /* Configue the MCO2 pin in alternate function mode */
 891:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     GPIO_InitStruct.Pin = MCO2_PIN;
 1557              		.loc 2 891 0
 1558 0ac6 4FF40073 		mov	r3, #512
 1559 0aca 7B61     		str	r3, [r7, #20]
 892:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 1560              		.loc 2 892 0
 1561 0acc 0223     		movs	r3, #2
 1562 0ace BB61     		str	r3, [r7, #24]
 893:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 1563              		.loc 2 893 0
 1564 0ad0 0323     		movs	r3, #3
 1565 0ad2 3B62     		str	r3, [r7, #32]
 894:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 1566              		.loc 2 894 0
 1567 0ad4 0023     		movs	r3, #0
 1568 0ad6 FB61     		str	r3, [r7, #28]
 895:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 1569              		.loc 2 895 0
 1570 0ad8 0023     		movs	r3, #0
 1571 0ada 7B62     		str	r3, [r7, #36]
 896:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 1572              		.loc 2 896 0
 1573 0adc 07F11403 		add	r3, r7, #20
 1574 0ae0 4FF40060 		mov	r0, #2048
 1575 0ae4 C4F20200 		movt	r0, 16386
 1576 0ae8 1946     		mov	r1, r3
 1577 0aea FFF7FEFF 		bl	HAL_GPIO_Init
 897:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     
 898:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     /* Mask MCO2 and MCO2PRE[2:0] bits then Select MCO2 clock source and prescaler */
 899:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3)));
 1578              		.loc 2 899 0
 1579 0aee 4FF46053 		mov	r3, #14336
 1580 0af2 C4F20203 		movt	r3, 16386
 1581 0af6 4FF46052 		mov	r2, #14336
 1582 0afa C4F20202 		movt	r2, 16386
 1583 0afe 9268     		ldr	r2, [r2, #8]
 1584 0b00 22F07841 		bic	r1, r2, #-134217728
 1585 0b04 7A68     		ldr	r2, [r7, #4]
 1586 0b06 D000     		lsls	r0, r2, #3
 1587 0b08 BA68     		ldr	r2, [r7, #8]
 1588 0b0a 0243     		orrs	r2, r2, r0
 1589 0b0c 0A43     		orrs	r2, r2, r1
 1590 0b0e 9A60     		str	r2, [r3, #8]
 1591              	.L95:
 900:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   }
 901:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** }
 1592              		.loc 2 901 0
 1593 0b10 2837     		adds	r7, r7, #40
 1594 0b12 BD46     		mov	sp, r7
 1595              		@ sp needed
 1596 0b14 80BD     		pop	{r7, pc}
 1597              		.cfi_endproc
 1598              	.LFE58:
 1600 0b16 00BF     		.align	2
 1601              		.global	HAL_RCC_EnableCSS
 1602              		.thumb
 1603              		.thumb_func
 1605              	HAL_RCC_EnableCSS:
 1606              	.LFB59:
 902:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 903:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** /**
 904:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @brief  Enables the Clock Security System.
 905:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @note   If a failure is detected on the HSE oscillator clock, this oscillator
 906:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *         is automatically disabled and an interrupt is generated to inform the
 907:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *         software about the failure (Clock Security System Interrupt, CSSI),
 908:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *         allowing the MCU to perform rescue operations. The CSSI is linked to 
 909:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.  
 910:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @param  None
 911:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @retval None
 912:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   */
 913:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** void HAL_RCC_EnableCSS(void)
 914:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** {
 1607              		.loc 2 914 0
 1608              		.cfi_startproc
 1609              		@ args = 0, pretend = 0, frame = 0
 1610              		@ frame_needed = 1, uses_anonymous_args = 0
 1611              		@ link register save eliminated.
 1612 0b18 80B4     		push	{r7}
 1613              		.cfi_def_cfa_offset 4
 1614              		.cfi_offset 7, -4
 1615 0b1a 00AF     		add	r7, sp, #0
 1616              		.cfi_def_cfa_register 7
 915:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)ENABLE;
 1617              		.loc 2 915 0
 1618 0b1c 4C23     		movs	r3, #76
 1619 0b1e C4F24723 		movt	r3, 16967
 1620 0b22 0122     		movs	r2, #1
 1621 0b24 1A60     		str	r2, [r3]
 916:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** }
 1622              		.loc 2 916 0
 1623 0b26 BD46     		mov	sp, r7
 1624              		@ sp needed
 1625 0b28 5DF8047B 		ldr	r7, [sp], #4
 1626 0b2c 7047     		bx	lr
 1627              		.cfi_endproc
 1628              	.LFE59:
 1630 0b2e 00BF     		.align	2
 1631              		.global	HAL_RCC_DisableCSS
 1632              		.thumb
 1633              		.thumb_func
 1635              	HAL_RCC_DisableCSS:
 1636              	.LFB60:
 917:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 918:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** /**
 919:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @brief  Disables the Clock Security System.
 920:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @param  None
 921:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @retval None
 922:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   */
 923:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** void HAL_RCC_DisableCSS(void)
 924:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** {
 1637              		.loc 2 924 0
 1638              		.cfi_startproc
 1639              		@ args = 0, pretend = 0, frame = 0
 1640              		@ frame_needed = 1, uses_anonymous_args = 0
 1641              		@ link register save eliminated.
 1642 0b30 80B4     		push	{r7}
 1643              		.cfi_def_cfa_offset 4
 1644              		.cfi_offset 7, -4
 1645 0b32 00AF     		add	r7, sp, #0
 1646              		.cfi_def_cfa_register 7
 925:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)DISABLE;
 1647              		.loc 2 925 0
 1648 0b34 4C23     		movs	r3, #76
 1649 0b36 C4F24723 		movt	r3, 16967
 1650 0b3a 0022     		movs	r2, #0
 1651 0b3c 1A60     		str	r2, [r3]
 926:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** }
 1652              		.loc 2 926 0
 1653 0b3e BD46     		mov	sp, r7
 1654              		@ sp needed
 1655 0b40 5DF8047B 		ldr	r7, [sp], #4
 1656 0b44 7047     		bx	lr
 1657              		.cfi_endproc
 1658              	.LFE60:
 1660 0b46 00BF     		.align	2
 1661              		.global	HAL_RCC_GetSysClockFreq
 1662              		.thumb
 1663              		.thumb_func
 1665              	HAL_RCC_GetSysClockFreq:
 1666              	.LFB61:
 927:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 928:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** /**
 929:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @brief  Returns the SYSCLK frequency
 930:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *        
 931:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @note   The system frequency computed by this function is not the real 
 932:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *         frequency in the chip. It is calculated based on the predefined 
 933:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *         constant and the selected clock source:
 934:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @note     If SYSCLK source is HSI, function returns values based on HSI_VALUE(*)
 935:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @note     If SYSCLK source is HSE, function returns values based on HSE_VALUE(**)
 936:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @note     If SYSCLK source is PLL, function returns values based on HSE_VALUE(**) 
 937:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *           or HSI_VALUE(*) multiplied/divided by the PLL factors.         
 938:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @note     (*) HSI_VALUE is a constant defined in stm32f2xx_hal_conf.h file (default value
 939:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *               16 MHz) but the real value may vary depending on the variations
 940:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *               in voltage and temperature.
 941:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @note     (**) HSE_VALUE is a constant defined in stm32f2xx_hal_conf.h file (default value
 942:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *                25 MHz), user has to ensure that HSE_VALUE is same as the real
 943:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *                frequency of the crystal used. Otherwise, this function may
 944:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *                have wrong result.
 945:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *                  
 946:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @note   The result of this function could be not correct when using fractional
 947:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *         value for HSE crystal.
 948:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *           
 949:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @note   This function can be used by the user application to compute the 
 950:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *         baudrate for the communication peripherals or configure other parameters.
 951:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *           
 952:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @note   Each time SYSCLK changes, this function must be called to update the
 953:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *         right SYSCLK value. Otherwise, any configuration based on this function will be incorre
 954:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *         
 955:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *               
 956:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @param  None
 957:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @retval SYSCLK frequency
 958:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   */
 959:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** uint32_t HAL_RCC_GetSysClockFreq(void)
 960:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** {
 1667              		.loc 2 960 0
 1668              		.cfi_startproc
 1669              		@ args = 0, pretend = 0, frame = 80
 1670              		@ frame_needed = 1, uses_anonymous_args = 0
 1671              		@ link register save eliminated.
 1672 0b48 80B4     		push	{r7}
 1673              		.cfi_def_cfa_offset 4
 1674              		.cfi_offset 7, -4
 1675 0b4a 95B0     		sub	sp, sp, #84
 1676              		.cfi_def_cfa_offset 88
 1677 0b4c 00AF     		add	r7, sp, #0
 1678              		.cfi_def_cfa_register 7
 961:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   uint32_t pllm = 0, pllvco = 0, pllp = 0;
 1679              		.loc 2 961 0
 1680 0b4e 0023     		movs	r3, #0
 1681 0b50 7B64     		str	r3, [r7, #68]
 1682 0b52 0023     		movs	r3, #0
 1683 0b54 FB64     		str	r3, [r7, #76]
 1684 0b56 0023     		movs	r3, #0
 1685 0b58 3B64     		str	r3, [r7, #64]
 962:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   uint32_t sysclockfreq = 0;
 1686              		.loc 2 962 0
 1687 0b5a 0023     		movs	r3, #0
 1688 0b5c BB64     		str	r3, [r7, #72]
 963:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 964:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* Get SYSCLK source -------------------------------------------------------*/
 965:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   switch (RCC->CFGR & RCC_CFGR_SWS)
 1689              		.loc 2 965 0
 1690 0b5e 4FF46053 		mov	r3, #14336
 1691 0b62 C4F20203 		movt	r3, 16386
 1692 0b66 9B68     		ldr	r3, [r3, #8]
 1693 0b68 03F00C03 		and	r3, r3, #12
 1694 0b6c 042B     		cmp	r3, #4
 1695 0b6e 0AD0     		beq	.L102
 1696 0b70 082B     		cmp	r3, #8
 1697 0b72 0ED0     		beq	.L103
 1698 0b74 002B     		cmp	r3, #0
 1699 0b76 40F09480 		bne	.L117
 966:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   {
 967:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
 968:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     {
 969:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       sysclockfreq = HSI_VALUE;
 1700              		.loc 2 969 0
 1701 0b7a 4FF41053 		mov	r3, #9216
 1702 0b7e C0F2F403 		movt	r3, 244
 1703 0b82 BB64     		str	r3, [r7, #72]
 970:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****        break;
 1704              		.loc 2 970 0
 1705 0b84 93E0     		b	.L105
 1706              	.L102:
 971:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     }
 972:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
 973:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     {
 974:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       sysclockfreq = HSE_VALUE;
 1707              		.loc 2 974 0
 1708 0b86 47F64003 		movw	r3, #30784
 1709 0b8a C0F27D13 		movt	r3, 381
 1710 0b8e BB64     		str	r3, [r7, #72]
 975:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       break;
 1711              		.loc 2 975 0
 1712 0b90 8DE0     		b	.L105
 1713              	.L103:
 976:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     }
 977:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
 978:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     {
 979:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
 980:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       SYSCLK = PLL_VCO / PLLP */
 981:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 1714              		.loc 2 981 0
 1715 0b92 4FF46053 		mov	r3, #14336
 1716 0b96 C4F20203 		movt	r3, 16386
 1717 0b9a 5B68     		ldr	r3, [r3, #4]
 1718 0b9c 03F03F03 		and	r3, r3, #63
 1719 0ba0 7B64     		str	r3, [r7, #68]
 982:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       if (__RCC_PLLSRC() != 0)
 1720              		.loc 2 982 0
 1721 0ba2 4FF46053 		mov	r3, #14336
 1722 0ba6 C4F20203 		movt	r3, 16386
 1723 0baa 5B68     		ldr	r3, [r3, #4]
 1724 0bac 03F48002 		and	r2, r3, #4194304
 1725 0bb0 4FF48003 		mov	r3, #4194304
 1726 0bb4 FB63     		str	r3, [r7, #60]
 1727              	.LBB78:
 1728              	.LBB79:
 402:D:\workspace\console800480\system\core_cmInstr.h ****    return(result);
 1729              		.loc 3 402 0
 1730 0bb6 FB6B     		ldr	r3, [r7, #60]
 1731              	@ 402 "D:\workspace\console800480\system/core_cmInstr.h" 1
 1732 0bb8 93FAA3F3 		rbit r3, r3
 1733              	@ 0 "" 2
 1734              		.thumb
 1735 0bbc BB63     		str	r3, [r7, #56]
 403:D:\workspace\console800480\system\core_cmInstr.h **** }
 1736              		.loc 3 403 0
 1737 0bbe BB6B     		ldr	r3, [r7, #56]
 1738 0bc0 7B63     		str	r3, [r7, #52]
 1739              	.LBE79:
 1740              	.LBE78:
 1741              	.LBB80:
 1742              	.LBB81:
 563:D:\workspace\console800480\system\core_cmInstr.h ****   return(result);
 1743              		.loc 3 563 0
 1744 0bc2 7B6B     		ldr	r3, [r7, #52]
 1745              	@ 563 "D:\workspace\console800480\system/core_cmInstr.h" 1
 1746 0bc4 B3FA83F3 		clz r3, r3
 1747              	@ 0 "" 2
 1748              		.thumb
 1749 0bc8 87F83330 		strb	r3, [r7, #51]
 1750              		.loc 3 564 0
 1751 0bcc 97F83330 		ldrb	r3, [r7, #51]	@ zero_extendqisi2
 1752              	.LBE81:
 1753              	.LBE80:
 1754              		.loc 2 982 0
 1755 0bd0 22FA03F3 		lsr	r3, r2, r3
 1756 0bd4 002B     		cmp	r3, #0
 1757 0bd6 23D0     		beq	.L108
 983:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       {
 984:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         /* HSE used as PLL clock source */
 985:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCF
 1758              		.loc 2 985 0
 1759 0bd8 47F64003 		movw	r3, #30784
 1760 0bdc C0F27D13 		movt	r3, 381
 1761 0be0 7A6C     		ldr	r2, [r7, #68]
 1762 0be2 B3FBF2F2 		udiv	r2, r3, r2
 1763 0be6 4FF46053 		mov	r3, #14336
 1764 0bea C4F20203 		movt	r3, 16386
 1765 0bee 5968     		ldr	r1, [r3, #4]
 1766 0bf0 47F6C073 		movw	r3, #32704
 1767 0bf4 0B40     		ands	r3, r3, r1
 1768 0bf6 47F6C071 		movw	r1, #32704
 1769 0bfa F962     		str	r1, [r7, #44]
 1770              	.LBB82:
 1771              	.LBB83:
 402:D:\workspace\console800480\system\core_cmInstr.h ****    return(result);
 1772              		.loc 3 402 0
 1773 0bfc F96A     		ldr	r1, [r7, #44]
 1774              	@ 402 "D:\workspace\console800480\system/core_cmInstr.h" 1
 1775 0bfe 91FAA1F1 		rbit r1, r1
 1776              	@ 0 "" 2
 1777              		.thumb
 1778 0c02 B962     		str	r1, [r7, #40]
 403:D:\workspace\console800480\system\core_cmInstr.h **** }
 1779              		.loc 3 403 0
 1780 0c04 B96A     		ldr	r1, [r7, #40]
 1781 0c06 7962     		str	r1, [r7, #36]
 1782              	.LBE83:
 1783              	.LBE82:
 1784              	.LBB84:
 1785              	.LBB85:
 563:D:\workspace\console800480\system\core_cmInstr.h ****   return(result);
 1786              		.loc 3 563 0
 1787 0c08 796A     		ldr	r1, [r7, #36]
 1788              	@ 563 "D:\workspace\console800480\system/core_cmInstr.h" 1
 1789 0c0a B1FA81F1 		clz r1, r1
 1790              	@ 0 "" 2
 1791              		.thumb
 1792 0c0e 87F82310 		strb	r1, [r7, #35]
 1793              		.loc 3 564 0
 1794 0c12 97F82310 		ldrb	r1, [r7, #35]	@ zero_extendqisi2
 1795              	.LBE85:
 1796              	.LBE84:
 1797              		.loc 2 985 0
 1798 0c16 CB40     		lsrs	r3, r3, r1
 1799 0c18 03FB02F3 		mul	r3, r3, r2
 1800 0c1c FB64     		str	r3, [r7, #76]
 1801 0c1e 20E0     		b	.L111
 1802              	.L108:
 986:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       }
 987:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       else
 988:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       {
 989:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         /* HSI used as PLL clock source */
 990:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCF
 1803              		.loc 2 990 0
 1804 0c20 4FF41053 		mov	r3, #9216
 1805 0c24 C0F2F403 		movt	r3, 244
 1806 0c28 7A6C     		ldr	r2, [r7, #68]
 1807 0c2a B3FBF2F2 		udiv	r2, r3, r2
 1808 0c2e 4FF46053 		mov	r3, #14336
 1809 0c32 C4F20203 		movt	r3, 16386
 1810 0c36 5968     		ldr	r1, [r3, #4]
 1811 0c38 47F6C073 		movw	r3, #32704
 1812 0c3c 0B40     		ands	r3, r3, r1
 1813 0c3e 47F6C071 		movw	r1, #32704
 1814 0c42 F961     		str	r1, [r7, #28]
 1815              	.LBB86:
 1816              	.LBB87:
 402:D:\workspace\console800480\system\core_cmInstr.h ****    return(result);
 1817              		.loc 3 402 0
 1818 0c44 F969     		ldr	r1, [r7, #28]
 1819              	@ 402 "D:\workspace\console800480\system/core_cmInstr.h" 1
 1820 0c46 91FAA1F1 		rbit r1, r1
 1821              	@ 0 "" 2
 1822              		.thumb
 1823 0c4a B961     		str	r1, [r7, #24]
 403:D:\workspace\console800480\system\core_cmInstr.h **** }
 1824              		.loc 3 403 0
 1825 0c4c B969     		ldr	r1, [r7, #24]
 1826 0c4e 7961     		str	r1, [r7, #20]
 1827              	.LBE87:
 1828              	.LBE86:
 1829              	.LBB88:
 1830              	.LBB89:
 563:D:\workspace\console800480\system\core_cmInstr.h ****   return(result);
 1831              		.loc 3 563 0
 1832 0c50 7969     		ldr	r1, [r7, #20]
 1833              	@ 563 "D:\workspace\console800480\system/core_cmInstr.h" 1
 1834 0c52 B1FA81F1 		clz r1, r1
 1835              	@ 0 "" 2
 1836              		.thumb
 1837 0c56 F974     		strb	r1, [r7, #19]
 1838              		.loc 3 564 0
 1839 0c58 F97C     		ldrb	r1, [r7, #19]	@ zero_extendqisi2
 1840              	.LBE89:
 1841              	.LBE88:
 1842              		.loc 2 990 0
 1843 0c5a CB40     		lsrs	r3, r3, r1
 1844 0c5c 03FB02F3 		mul	r3, r3, r2
 1845 0c60 FB64     		str	r3, [r7, #76]
 1846              	.L111:
 991:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       }
 992:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 1847              		.loc 2 992 0
 1848 0c62 4FF46053 		mov	r3, #14336
 1849 0c66 C4F20203 		movt	r3, 16386
 1850 0c6a 5B68     		ldr	r3, [r3, #4]
 1851 0c6c 03F44032 		and	r2, r3, #196608
 1852 0c70 4FF44033 		mov	r3, #196608
 1853 0c74 FB60     		str	r3, [r7, #12]
 1854              	.LBB90:
 1855              	.LBB91:
 402:D:\workspace\console800480\system\core_cmInstr.h ****    return(result);
 1856              		.loc 3 402 0
 1857 0c76 FB68     		ldr	r3, [r7, #12]
 1858              	@ 402 "D:\workspace\console800480\system/core_cmInstr.h" 1
 1859 0c78 93FAA3F3 		rbit r3, r3
 1860              	@ 0 "" 2
 1861              		.thumb
 1862 0c7c BB60     		str	r3, [r7, #8]
 403:D:\workspace\console800480\system\core_cmInstr.h **** }
 1863              		.loc 3 403 0
 1864 0c7e BB68     		ldr	r3, [r7, #8]
 1865 0c80 7B60     		str	r3, [r7, #4]
 1866              	.LBE91:
 1867              	.LBE90:
 1868              	.LBB92:
 1869              	.LBB93:
 563:D:\workspace\console800480\system\core_cmInstr.h ****   return(result);
 1870              		.loc 3 563 0
 1871 0c82 7B68     		ldr	r3, [r7, #4]
 1872              	@ 563 "D:\workspace\console800480\system/core_cmInstr.h" 1
 1873 0c84 B3FA83F3 		clz r3, r3
 1874              	@ 0 "" 2
 1875              		.thumb
 1876 0c88 FB70     		strb	r3, [r7, #3]
 1877              		.loc 3 564 0
 1878 0c8a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1879              	.LBE93:
 1880              	.LBE92:
 1881              		.loc 2 992 0
 1882 0c8c 22FA03F3 		lsr	r3, r2, r3
 1883 0c90 0133     		adds	r3, r3, #1
 1884 0c92 5B00     		lsls	r3, r3, #1
 1885 0c94 3B64     		str	r3, [r7, #64]
 993:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       
 994:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       sysclockfreq = pllvco/pllp;
 1886              		.loc 2 994 0
 1887 0c96 FA6C     		ldr	r2, [r7, #76]
 1888 0c98 3B6C     		ldr	r3, [r7, #64]
 1889 0c9a B2FBF3F3 		udiv	r3, r2, r3
 1890 0c9e BB64     		str	r3, [r7, #72]
 995:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       break;
 1891              		.loc 2 995 0
 1892 0ca0 05E0     		b	.L105
 1893              	.L117:
 996:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     }
 997:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     default:
 998:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     {
 999:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       sysclockfreq = HSI_VALUE;
 1894              		.loc 2 999 0
 1895 0ca2 4FF41053 		mov	r3, #9216
 1896 0ca6 C0F2F403 		movt	r3, 244
 1897 0caa BB64     		str	r3, [r7, #72]
1000:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       break;
 1898              		.loc 2 1000 0
 1899 0cac 00BF     		nop
 1900              	.L105:
1001:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     }
1002:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   }
1003:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   return sysclockfreq;
 1901              		.loc 2 1003 0
 1902 0cae BB6C     		ldr	r3, [r7, #72]
1004:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** }
 1903              		.loc 2 1004 0
 1904 0cb0 1846     		mov	r0, r3
 1905 0cb2 5437     		adds	r7, r7, #84
 1906 0cb4 BD46     		mov	sp, r7
 1907              		@ sp needed
 1908 0cb6 5DF8047B 		ldr	r7, [sp], #4
 1909 0cba 7047     		bx	lr
 1910              		.cfi_endproc
 1911              	.LFE61:
 1913              		.align	2
 1914              		.global	HAL_RCC_GetHCLKFreq
 1915              		.thumb
 1916              		.thumb_func
 1918              	HAL_RCC_GetHCLKFreq:
 1919              	.LFB62:
1005:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
1006:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** /**
1007:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @brief  Returns the HCLK frequency     
1008:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @note   Each time HCLK changes, this function must be called to update the
1009:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *         right HCLK value. Otherwise, any configuration based on this function will be incorrect
1010:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * 
1011:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
1012:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *         and updated within this function
1013:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @param  None
1014:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @retval HCLK frequency
1015:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   */
1016:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** uint32_t HAL_RCC_GetHCLKFreq(void)
1017:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** {
 1920              		.loc 2 1017 0
 1921              		.cfi_startproc
 1922              		@ args = 0, pretend = 0, frame = 16
 1923              		@ frame_needed = 1, uses_anonymous_args = 0
 1924 0cbc 80B5     		push	{r7, lr}
 1925              		.cfi_def_cfa_offset 8
 1926              		.cfi_offset 7, -8
 1927              		.cfi_offset 14, -4
 1928 0cbe 84B0     		sub	sp, sp, #16
 1929              		.cfi_def_cfa_offset 24
 1930 0cc0 00AF     		add	r7, sp, #0
 1931              		.cfi_def_cfa_register 7
1018:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POS
 1932              		.loc 2 1018 0
 1933 0cc2 FFF7FEFF 		bl	HAL_RCC_GetSysClockFreq
 1934 0cc6 0246     		mov	r2, r0
 1935 0cc8 4FF46053 		mov	r3, #14336
 1936 0ccc C4F20203 		movt	r3, 16386
 1937 0cd0 9B68     		ldr	r3, [r3, #8]
 1938 0cd2 03F0F001 		and	r1, r3, #240
 1939 0cd6 F023     		movs	r3, #240
 1940 0cd8 FB60     		str	r3, [r7, #12]
 1941              	.LBB94:
 1942              	.LBB95:
 402:D:\workspace\console800480\system\core_cmInstr.h ****    return(result);
 1943              		.loc 3 402 0
 1944 0cda FB68     		ldr	r3, [r7, #12]
 1945              	@ 402 "D:\workspace\console800480\system/core_cmInstr.h" 1
 1946 0cdc 93FAA3F3 		rbit r3, r3
 1947              	@ 0 "" 2
 1948              		.thumb
 1949 0ce0 BB60     		str	r3, [r7, #8]
 403:D:\workspace\console800480\system\core_cmInstr.h **** }
 1950              		.loc 3 403 0
 1951 0ce2 BB68     		ldr	r3, [r7, #8]
 1952 0ce4 7B60     		str	r3, [r7, #4]
 1953              	.LBE95:
 1954              	.LBE94:
 1955              	.LBB96:
 1956              	.LBB97:
 563:D:\workspace\console800480\system\core_cmInstr.h ****   return(result);
 1957              		.loc 3 563 0
 1958 0ce6 7B68     		ldr	r3, [r7, #4]
 1959              	@ 563 "D:\workspace\console800480\system/core_cmInstr.h" 1
 1960 0ce8 B3FA83F3 		clz r3, r3
 1961              	@ 0 "" 2
 1962              		.thumb
 1963 0cec FB70     		strb	r3, [r7, #3]
 1964              		.loc 3 564 0
 1965 0cee FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1966              	.LBE97:
 1967              	.LBE96:
 1968              		.loc 2 1018 0
 1969 0cf0 D940     		lsrs	r1, r1, r3
 1970 0cf2 40F20003 		movw	r3, #:lower16:APBAHBPrescTable
 1971 0cf6 C0F20003 		movt	r3, #:upper16:APBAHBPrescTable
 1972 0cfa 5B5C     		ldrb	r3, [r3, r1]	@ zero_extendqisi2
 1973 0cfc DA40     		lsrs	r2, r2, r3
 1974 0cfe 40F20003 		movw	r3, #:lower16:SystemCoreClock
 1975 0d02 C0F20003 		movt	r3, #:upper16:SystemCoreClock
 1976 0d06 1A60     		str	r2, [r3]
1019:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   return SystemCoreClock;
 1977              		.loc 2 1019 0
 1978 0d08 40F20003 		movw	r3, #:lower16:SystemCoreClock
 1979 0d0c C0F20003 		movt	r3, #:upper16:SystemCoreClock
 1980 0d10 1B68     		ldr	r3, [r3]
1020:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** }
 1981              		.loc 2 1020 0
 1982 0d12 1846     		mov	r0, r3
 1983 0d14 1037     		adds	r7, r7, #16
 1984 0d16 BD46     		mov	sp, r7
 1985              		@ sp needed
 1986 0d18 80BD     		pop	{r7, pc}
 1987              		.cfi_endproc
 1988              	.LFE62:
 1990 0d1a 00BF     		.align	2
 1991              		.global	HAL_RCC_GetPCLK1Freq
 1992              		.thumb
 1993              		.thumb_func
 1995              	HAL_RCC_GetPCLK1Freq:
 1996              	.LFB63:
1021:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
1022:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** /**
1023:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @brief  Returns the PCLK1 frequency     
1024:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @note   Each time PCLK1 changes, this function must be called to update the
1025:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrec
1026:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @param  None
1027:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @retval PCLK1 frequency
1028:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   */
1029:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** uint32_t HAL_RCC_GetPCLK1Freq(void)
1030:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** {  
 1997              		.loc 2 1030 0
 1998              		.cfi_startproc
 1999              		@ args = 0, pretend = 0, frame = 16
 2000              		@ frame_needed = 1, uses_anonymous_args = 0
 2001 0d1c 80B5     		push	{r7, lr}
 2002              		.cfi_def_cfa_offset 8
 2003              		.cfi_offset 7, -8
 2004              		.cfi_offset 14, -4
 2005 0d1e 84B0     		sub	sp, sp, #16
 2006              		.cfi_def_cfa_offset 24
 2007 0d20 00AF     		add	r7, sp, #0
 2008              		.cfi_def_cfa_register 7
1031:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
1032:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   return (HAL_RCC_GetHCLKFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC
 2009              		.loc 2 1032 0
 2010 0d22 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 2011 0d26 0246     		mov	r2, r0
 2012 0d28 4FF46053 		mov	r3, #14336
 2013 0d2c C4F20203 		movt	r3, 16386
 2014 0d30 9B68     		ldr	r3, [r3, #8]
 2015 0d32 03F4E051 		and	r1, r3, #7168
 2016 0d36 4FF4E053 		mov	r3, #7168
 2017 0d3a FB60     		str	r3, [r7, #12]
 2018              	.LBB98:
 2019              	.LBB99:
 402:D:\workspace\console800480\system\core_cmInstr.h ****    return(result);
 2020              		.loc 3 402 0
 2021 0d3c FB68     		ldr	r3, [r7, #12]
 2022              	@ 402 "D:\workspace\console800480\system/core_cmInstr.h" 1
 2023 0d3e 93FAA3F3 		rbit r3, r3
 2024              	@ 0 "" 2
 2025              		.thumb
 2026 0d42 BB60     		str	r3, [r7, #8]
 403:D:\workspace\console800480\system\core_cmInstr.h **** }
 2027              		.loc 3 403 0
 2028 0d44 BB68     		ldr	r3, [r7, #8]
 2029 0d46 7B60     		str	r3, [r7, #4]
 2030              	.LBE99:
 2031              	.LBE98:
 2032              	.LBB100:
 2033              	.LBB101:
 563:D:\workspace\console800480\system\core_cmInstr.h ****   return(result);
 2034              		.loc 3 563 0
 2035 0d48 7B68     		ldr	r3, [r7, #4]
 2036              	@ 563 "D:\workspace\console800480\system/core_cmInstr.h" 1
 2037 0d4a B3FA83F3 		clz r3, r3
 2038              	@ 0 "" 2
 2039              		.thumb
 2040 0d4e FB70     		strb	r3, [r7, #3]
 2041              		.loc 3 564 0
 2042 0d50 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2043              	.LBE101:
 2044              	.LBE100:
 2045              		.loc 2 1032 0
 2046 0d52 D940     		lsrs	r1, r1, r3
 2047 0d54 40F20003 		movw	r3, #:lower16:APBAHBPrescTable
 2048 0d58 C0F20003 		movt	r3, #:upper16:APBAHBPrescTable
 2049 0d5c 5B5C     		ldrb	r3, [r3, r1]	@ zero_extendqisi2
 2050 0d5e 22FA03F3 		lsr	r3, r2, r3
1033:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** }
 2051              		.loc 2 1033 0
 2052 0d62 1846     		mov	r0, r3
 2053 0d64 1037     		adds	r7, r7, #16
 2054 0d66 BD46     		mov	sp, r7
 2055              		@ sp needed
 2056 0d68 80BD     		pop	{r7, pc}
 2057              		.cfi_endproc
 2058              	.LFE63:
 2060 0d6a 00BF     		.align	2
 2061              		.global	HAL_RCC_GetPCLK2Freq
 2062              		.thumb
 2063              		.thumb_func
 2065              	HAL_RCC_GetPCLK2Freq:
 2066              	.LFB64:
1034:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
1035:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** /**
1036:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @brief  Returns the PCLK2 frequency     
1037:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @note   Each time PCLK2 changes, this function must be called to update the
1038:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrec
1039:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @param  None
1040:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @retval PCLK2 frequency
1041:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   */
1042:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** uint32_t HAL_RCC_GetPCLK2Freq(void)
1043:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** {
 2067              		.loc 2 1043 0
 2068              		.cfi_startproc
 2069              		@ args = 0, pretend = 0, frame = 16
 2070              		@ frame_needed = 1, uses_anonymous_args = 0
 2071 0d6c 80B5     		push	{r7, lr}
 2072              		.cfi_def_cfa_offset 8
 2073              		.cfi_offset 7, -8
 2074              		.cfi_offset 14, -4
 2075 0d6e 84B0     		sub	sp, sp, #16
 2076              		.cfi_def_cfa_offset 24
 2077 0d70 00AF     		add	r7, sp, #0
 2078              		.cfi_def_cfa_register 7
1044:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
1045:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   return (HAL_RCC_GetHCLKFreq()>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_
 2079              		.loc 2 1045 0
 2080 0d72 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 2081 0d76 0246     		mov	r2, r0
 2082 0d78 4FF46053 		mov	r3, #14336
 2083 0d7c C4F20203 		movt	r3, 16386
 2084 0d80 9B68     		ldr	r3, [r3, #8]
 2085 0d82 03F46041 		and	r1, r3, #57344
 2086 0d86 4FF46043 		mov	r3, #57344
 2087 0d8a FB60     		str	r3, [r7, #12]
 2088              	.LBB102:
 2089              	.LBB103:
 402:D:\workspace\console800480\system\core_cmInstr.h ****    return(result);
 2090              		.loc 3 402 0
 2091 0d8c FB68     		ldr	r3, [r7, #12]
 2092              	@ 402 "D:\workspace\console800480\system/core_cmInstr.h" 1
 2093 0d8e 93FAA3F3 		rbit r3, r3
 2094              	@ 0 "" 2
 2095              		.thumb
 2096 0d92 BB60     		str	r3, [r7, #8]
 403:D:\workspace\console800480\system\core_cmInstr.h **** }
 2097              		.loc 3 403 0
 2098 0d94 BB68     		ldr	r3, [r7, #8]
 2099 0d96 7B60     		str	r3, [r7, #4]
 2100              	.LBE103:
 2101              	.LBE102:
 2102              	.LBB104:
 2103              	.LBB105:
 563:D:\workspace\console800480\system\core_cmInstr.h ****   return(result);
 2104              		.loc 3 563 0
 2105 0d98 7B68     		ldr	r3, [r7, #4]
 2106              	@ 563 "D:\workspace\console800480\system/core_cmInstr.h" 1
 2107 0d9a B3FA83F3 		clz r3, r3
 2108              	@ 0 "" 2
 2109              		.thumb
 2110 0d9e FB70     		strb	r3, [r7, #3]
 2111              		.loc 3 564 0
 2112 0da0 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2113              	.LBE105:
 2114              	.LBE104:
 2115              		.loc 2 1045 0
 2116 0da2 D940     		lsrs	r1, r1, r3
 2117 0da4 40F20003 		movw	r3, #:lower16:APBAHBPrescTable
 2118 0da8 C0F20003 		movt	r3, #:upper16:APBAHBPrescTable
 2119 0dac 5B5C     		ldrb	r3, [r3, r1]	@ zero_extendqisi2
 2120 0dae 22FA03F3 		lsr	r3, r2, r3
1046:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** } 
 2121              		.loc 2 1046 0
 2122 0db2 1846     		mov	r0, r3
 2123 0db4 1037     		adds	r7, r7, #16
 2124 0db6 BD46     		mov	sp, r7
 2125              		@ sp needed
 2126 0db8 80BD     		pop	{r7, pc}
 2127              		.cfi_endproc
 2128              	.LFE64:
 2130 0dba 00BF     		.align	2
 2131              		.global	HAL_RCC_GetOscConfig
 2132              		.thumb
 2133              		.thumb_func
 2135              	HAL_RCC_GetOscConfig:
 2136              	.LFB65:
1047:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
1048:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** /**
1049:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @brief  Configures the RCC_OscInitStruct according to the internal 
1050:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * RCC configuration registers.
1051:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @param  RCC_OscInitStruct: pointer to an RCC_OscInitTypeDef structure that 
1052:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * will be configured.
1053:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @retval None
1054:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   */
1055:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
1056:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** {
 2137              		.loc 2 1056 0
 2138              		.cfi_startproc
 2139              		@ args = 0, pretend = 0, frame = 72
 2140              		@ frame_needed = 1, uses_anonymous_args = 0
 2141              		@ link register save eliminated.
 2142 0dbc 80B4     		push	{r7}
 2143              		.cfi_def_cfa_offset 4
 2144              		.cfi_offset 7, -4
 2145 0dbe 93B0     		sub	sp, sp, #76
 2146              		.cfi_def_cfa_offset 80
 2147 0dc0 00AF     		add	r7, sp, #0
 2148              		.cfi_def_cfa_register 7
 2149 0dc2 7860     		str	r0, [r7, #4]
1057:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* Set all possible values for the Oscillator type parameter ---------------*/
1058:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLA
 2150              		.loc 2 1058 0
 2151 0dc4 7B68     		ldr	r3, [r7, #4]
 2152 0dc6 0F22     		movs	r2, #15
 2153 0dc8 1A60     		str	r2, [r3]
1059:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   
1060:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* Get the HSE configuration -----------------------------------------------*/
1061:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 2154              		.loc 2 1061 0
 2155 0dca 4FF46053 		mov	r3, #14336
 2156 0dce C4F20203 		movt	r3, 16386
 2157 0dd2 1B68     		ldr	r3, [r3]
 2158 0dd4 03F48023 		and	r3, r3, #262144
 2159 0dd8 002B     		cmp	r3, #0
 2160 0dda 03D0     		beq	.L131
1062:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   {
1063:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 2161              		.loc 2 1063 0
 2162 0ddc 7B68     		ldr	r3, [r7, #4]
 2163 0dde 0522     		movs	r2, #5
 2164 0de0 5A60     		str	r2, [r3, #4]
 2165 0de2 0FE0     		b	.L132
 2166              	.L131:
1064:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   }
1065:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
 2167              		.loc 2 1065 0
 2168 0de4 4FF46053 		mov	r3, #14336
 2169 0de8 C4F20203 		movt	r3, 16386
 2170 0dec 1B68     		ldr	r3, [r3]
 2171 0dee 03F48033 		and	r3, r3, #65536
 2172 0df2 002B     		cmp	r3, #0
 2173 0df4 03D0     		beq	.L133
1066:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   {
1067:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 2174              		.loc 2 1067 0
 2175 0df6 7B68     		ldr	r3, [r7, #4]
 2176 0df8 0122     		movs	r2, #1
 2177 0dfa 5A60     		str	r2, [r3, #4]
 2178 0dfc 02E0     		b	.L132
 2179              	.L133:
1068:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   }
1069:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   else
1070:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   {
1071:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 2180              		.loc 2 1071 0
 2181 0dfe 7B68     		ldr	r3, [r7, #4]
 2182 0e00 0022     		movs	r2, #0
 2183 0e02 5A60     		str	r2, [r3, #4]
 2184              	.L132:
1072:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   }
1073:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   
1074:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* Get the HSI configuration -----------------------------------------------*/
1075:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
 2185              		.loc 2 1075 0
 2186 0e04 4FF46053 		mov	r3, #14336
 2187 0e08 C4F20203 		movt	r3, 16386
 2188 0e0c 1B68     		ldr	r3, [r3]
 2189 0e0e 03F00103 		and	r3, r3, #1
 2190 0e12 002B     		cmp	r3, #0
 2191 0e14 03D0     		beq	.L134
1076:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   {
1077:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 2192              		.loc 2 1077 0
 2193 0e16 7B68     		ldr	r3, [r7, #4]
 2194 0e18 0122     		movs	r2, #1
 2195 0e1a DA60     		str	r2, [r3, #12]
 2196 0e1c 02E0     		b	.L135
 2197              	.L134:
1078:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   }
1079:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   else
1080:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   {
1081:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
 2198              		.loc 2 1081 0
 2199 0e1e 7B68     		ldr	r3, [r7, #4]
 2200 0e20 0022     		movs	r2, #0
 2201 0e22 DA60     		str	r2, [r3, #12]
 2202              	.L135:
1082:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   }
1083:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   
1084:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR &RCC_CR_HSITRIM) >> POSITION_VAL(RCC
 2203              		.loc 2 1084 0
 2204 0e24 4FF46053 		mov	r3, #14336
 2205 0e28 C4F20203 		movt	r3, 16386
 2206 0e2c 1B68     		ldr	r3, [r3]
 2207 0e2e 03F0F802 		and	r2, r3, #248
 2208 0e32 F823     		movs	r3, #248
 2209 0e34 7B64     		str	r3, [r7, #68]
 2210              	.LBB106:
 2211              	.LBB107:
 402:D:\workspace\console800480\system\core_cmInstr.h ****    return(result);
 2212              		.loc 3 402 0
 2213 0e36 7B6C     		ldr	r3, [r7, #68]
 2214              	@ 402 "D:\workspace\console800480\system/core_cmInstr.h" 1
 2215 0e38 93FAA3F3 		rbit r3, r3
 2216              	@ 0 "" 2
 2217              		.thumb
 2218 0e3c 3B64     		str	r3, [r7, #64]
 403:D:\workspace\console800480\system\core_cmInstr.h **** }
 2219              		.loc 3 403 0
 2220 0e3e 3B6C     		ldr	r3, [r7, #64]
 2221 0e40 FB63     		str	r3, [r7, #60]
 2222              	.LBE107:
 2223              	.LBE106:
 2224              	.LBB108:
 2225              	.LBB109:
 563:D:\workspace\console800480\system\core_cmInstr.h ****   return(result);
 2226              		.loc 3 563 0
 2227 0e42 FB6B     		ldr	r3, [r7, #60]
 2228              	@ 563 "D:\workspace\console800480\system/core_cmInstr.h" 1
 2229 0e44 B3FA83F3 		clz r3, r3
 2230              	@ 0 "" 2
 2231              		.thumb
 2232 0e48 87F83B30 		strb	r3, [r7, #59]
 2233              		.loc 3 564 0
 2234 0e4c 97F83B30 		ldrb	r3, [r7, #59]	@ zero_extendqisi2
 2235              	.LBE109:
 2236              	.LBE108:
 2237              		.loc 2 1084 0
 2238 0e50 DA40     		lsrs	r2, r2, r3
 2239 0e52 7B68     		ldr	r3, [r7, #4]
 2240 0e54 1A61     		str	r2, [r3, #16]
1085:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   
1086:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* Get the LSE configuration -----------------------------------------------*/
1087:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 2241              		.loc 2 1087 0
 2242 0e56 4FF46053 		mov	r3, #14336
 2243 0e5a C4F20203 		movt	r3, 16386
 2244 0e5e 1B6F     		ldr	r3, [r3, #112]
 2245 0e60 03F00403 		and	r3, r3, #4
 2246 0e64 002B     		cmp	r3, #0
 2247 0e66 03D0     		beq	.L138
1088:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   {
1089:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 2248              		.loc 2 1089 0
 2249 0e68 7B68     		ldr	r3, [r7, #4]
 2250 0e6a 0522     		movs	r2, #5
 2251 0e6c 9A60     		str	r2, [r3, #8]
 2252 0e6e 0FE0     		b	.L139
 2253              	.L138:
1090:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   }
1091:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   else if((RCC->BDCR &RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 2254              		.loc 2 1091 0
 2255 0e70 4FF46053 		mov	r3, #14336
 2256 0e74 C4F20203 		movt	r3, 16386
 2257 0e78 1B6F     		ldr	r3, [r3, #112]
 2258 0e7a 03F00103 		and	r3, r3, #1
 2259 0e7e 002B     		cmp	r3, #0
 2260 0e80 03D0     		beq	.L140
1092:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   {
1093:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 2261              		.loc 2 1093 0
 2262 0e82 7B68     		ldr	r3, [r7, #4]
 2263 0e84 0122     		movs	r2, #1
 2264 0e86 9A60     		str	r2, [r3, #8]
 2265 0e88 02E0     		b	.L139
 2266              	.L140:
1094:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   }
1095:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   else
1096:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   {
1097:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 2267              		.loc 2 1097 0
 2268 0e8a 7B68     		ldr	r3, [r7, #4]
 2269 0e8c 0022     		movs	r2, #0
 2270 0e8e 9A60     		str	r2, [r3, #8]
 2271              	.L139:
1098:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   }
1099:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   
1100:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* Get the LSI configuration -----------------------------------------------*/
1101:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
 2272              		.loc 2 1101 0
 2273 0e90 4FF46053 		mov	r3, #14336
 2274 0e94 C4F20203 		movt	r3, 16386
 2275 0e98 5B6F     		ldr	r3, [r3, #116]
 2276 0e9a 03F00103 		and	r3, r3, #1
 2277 0e9e 002B     		cmp	r3, #0
 2278 0ea0 03D0     		beq	.L141
1102:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   {
1103:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 2279              		.loc 2 1103 0
 2280 0ea2 7B68     		ldr	r3, [r7, #4]
 2281 0ea4 0122     		movs	r2, #1
 2282 0ea6 5A61     		str	r2, [r3, #20]
 2283 0ea8 02E0     		b	.L142
 2284              	.L141:
1104:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   }
1105:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   else
1106:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   {
1107:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
 2285              		.loc 2 1107 0
 2286 0eaa 7B68     		ldr	r3, [r7, #4]
 2287 0eac 0022     		movs	r2, #0
 2288 0eae 5A61     		str	r2, [r3, #20]
 2289              	.L142:
1108:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   }
1109:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   
1110:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* Get the PLL configuration -----------------------------------------------*/
1111:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
 2290              		.loc 2 1111 0
 2291 0eb0 4FF46053 		mov	r3, #14336
 2292 0eb4 C4F20203 		movt	r3, 16386
 2293 0eb8 1B68     		ldr	r3, [r3]
 2294 0eba 03F08073 		and	r3, r3, #16777216
 2295 0ebe 002B     		cmp	r3, #0
 2296 0ec0 03D0     		beq	.L143
1112:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   {
1113:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 2297              		.loc 2 1113 0
 2298 0ec2 7B68     		ldr	r3, [r7, #4]
 2299 0ec4 0222     		movs	r2, #2
 2300 0ec6 9A61     		str	r2, [r3, #24]
 2301 0ec8 02E0     		b	.L144
 2302              	.L143:
1114:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   }
1115:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   else
1116:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   {
1117:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 2303              		.loc 2 1117 0
 2304 0eca 7B68     		ldr	r3, [r7, #4]
 2305 0ecc 0122     		movs	r2, #1
 2306 0ece 9A61     		str	r2, [r3, #24]
 2307              	.L144:
1118:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   }
1119:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 2308              		.loc 2 1119 0
 2309 0ed0 4FF46053 		mov	r3, #14336
 2310 0ed4 C4F20203 		movt	r3, 16386
 2311 0ed8 5B68     		ldr	r3, [r3, #4]
 2312 0eda 03F48002 		and	r2, r3, #4194304
 2313 0ede 7B68     		ldr	r3, [r7, #4]
 2314 0ee0 DA61     		str	r2, [r3, #28]
1120:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   RCC_OscInitStruct->PLL.PLLM = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);
 2315              		.loc 2 1120 0
 2316 0ee2 4FF46053 		mov	r3, #14336
 2317 0ee6 C4F20203 		movt	r3, 16386
 2318 0eea 5B68     		ldr	r3, [r3, #4]
 2319 0eec 03F03F02 		and	r2, r3, #63
 2320 0ef0 7B68     		ldr	r3, [r7, #4]
 2321 0ef2 1A62     		str	r2, [r3, #32]
1121:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   RCC_OscInitStruct->PLL.PLLN = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PL
 2322              		.loc 2 1121 0
 2323 0ef4 4FF46053 		mov	r3, #14336
 2324 0ef8 C4F20203 		movt	r3, 16386
 2325 0efc 5A68     		ldr	r2, [r3, #4]
 2326 0efe 47F6C073 		movw	r3, #32704
 2327 0f02 1340     		ands	r3, r3, r2
 2328 0f04 47F6C072 		movw	r2, #32704
 2329 0f08 7A63     		str	r2, [r7, #52]
 2330              	.LBB110:
 2331              	.LBB111:
 402:D:\workspace\console800480\system\core_cmInstr.h ****    return(result);
 2332              		.loc 3 402 0
 2333 0f0a 7A6B     		ldr	r2, [r7, #52]
 2334              	@ 402 "D:\workspace\console800480\system/core_cmInstr.h" 1
 2335 0f0c 92FAA2F2 		rbit r2, r2
 2336              	@ 0 "" 2
 2337              		.thumb
 2338 0f10 3A63     		str	r2, [r7, #48]
 403:D:\workspace\console800480\system\core_cmInstr.h **** }
 2339              		.loc 3 403 0
 2340 0f12 3A6B     		ldr	r2, [r7, #48]
 2341 0f14 FA62     		str	r2, [r7, #44]
 2342              	.LBE111:
 2343              	.LBE110:
 2344              	.LBB112:
 2345              	.LBB113:
 563:D:\workspace\console800480\system\core_cmInstr.h ****   return(result);
 2346              		.loc 3 563 0
 2347 0f16 FA6A     		ldr	r2, [r7, #44]
 2348              	@ 563 "D:\workspace\console800480\system/core_cmInstr.h" 1
 2349 0f18 B2FA82F2 		clz r2, r2
 2350              	@ 0 "" 2
 2351              		.thumb
 2352 0f1c 87F82B20 		strb	r2, [r7, #43]
 2353              		.loc 3 564 0
 2354 0f20 97F82B20 		ldrb	r2, [r7, #43]	@ zero_extendqisi2
 2355              	.LBE113:
 2356              	.LBE112:
 2357              		.loc 2 1121 0
 2358 0f24 23FA02F2 		lsr	r2, r3, r2
 2359 0f28 7B68     		ldr	r3, [r7, #4]
 2360 0f2a 5A62     		str	r2, [r3, #36]
1122:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   RCC_OscInitStruct->PLL.PLLP = (uint32_t)((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) + RCC_PLLCFGR_PLLP_0
 2361              		.loc 2 1122 0
 2362 0f2c 4FF46053 		mov	r3, #14336
 2363 0f30 C4F20203 		movt	r3, 16386
 2364 0f34 5B68     		ldr	r3, [r3, #4]
 2365 0f36 03F44033 		and	r3, r3, #196608
 2366 0f3a 03F58033 		add	r3, r3, #65536
 2367 0f3e 5A00     		lsls	r2, r3, #1
 2368 0f40 4FF44033 		mov	r3, #196608
 2369 0f44 7B62     		str	r3, [r7, #36]
 2370              	.LBB114:
 2371              	.LBB115:
 402:D:\workspace\console800480\system\core_cmInstr.h ****    return(result);
 2372              		.loc 3 402 0
 2373 0f46 7B6A     		ldr	r3, [r7, #36]
 2374              	@ 402 "D:\workspace\console800480\system/core_cmInstr.h" 1
 2375 0f48 93FAA3F3 		rbit r3, r3
 2376              	@ 0 "" 2
 2377              		.thumb
 2378 0f4c 3B62     		str	r3, [r7, #32]
 403:D:\workspace\console800480\system\core_cmInstr.h **** }
 2379              		.loc 3 403 0
 2380 0f4e 3B6A     		ldr	r3, [r7, #32]
 2381 0f50 FB61     		str	r3, [r7, #28]
 2382              	.LBE115:
 2383              	.LBE114:
 2384              	.LBB116:
 2385              	.LBB117:
 563:D:\workspace\console800480\system\core_cmInstr.h ****   return(result);
 2386              		.loc 3 563 0
 2387 0f52 FB69     		ldr	r3, [r7, #28]
 2388              	@ 563 "D:\workspace\console800480\system/core_cmInstr.h" 1
 2389 0f54 B3FA83F3 		clz r3, r3
 2390              	@ 0 "" 2
 2391              		.thumb
 2392 0f58 FB76     		strb	r3, [r7, #27]
 2393              		.loc 3 564 0
 2394 0f5a FB7E     		ldrb	r3, [r7, #27]	@ zero_extendqisi2
 2395              	.LBE117:
 2396              	.LBE116:
 2397              		.loc 2 1122 0
 2398 0f5c DA40     		lsrs	r2, r2, r3
 2399 0f5e 7B68     		ldr	r3, [r7, #4]
 2400 0f60 9A62     		str	r2, [r3, #40]
1123:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   RCC_OscInitStruct->PLL.PLLQ = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) >> POSITION_VAL(RCC_PL
 2401              		.loc 2 1123 0
 2402 0f62 4FF46053 		mov	r3, #14336
 2403 0f66 C4F20203 		movt	r3, 16386
 2404 0f6a 5B68     		ldr	r3, [r3, #4]
 2405 0f6c 03F07062 		and	r2, r3, #251658240
 2406 0f70 4FF07063 		mov	r3, #251658240
 2407 0f74 7B61     		str	r3, [r7, #20]
 2408              	.LBB118:
 2409              	.LBB119:
 402:D:\workspace\console800480\system\core_cmInstr.h ****    return(result);
 2410              		.loc 3 402 0
 2411 0f76 7B69     		ldr	r3, [r7, #20]
 2412              	@ 402 "D:\workspace\console800480\system/core_cmInstr.h" 1
 2413 0f78 93FAA3F3 		rbit r3, r3
 2414              	@ 0 "" 2
 2415              		.thumb
 2416 0f7c 3B61     		str	r3, [r7, #16]
 403:D:\workspace\console800480\system\core_cmInstr.h **** }
 2417              		.loc 3 403 0
 2418 0f7e 3B69     		ldr	r3, [r7, #16]
 2419 0f80 FB60     		str	r3, [r7, #12]
 2420              	.LBE119:
 2421              	.LBE118:
 2422              	.LBB120:
 2423              	.LBB121:
 563:D:\workspace\console800480\system\core_cmInstr.h ****   return(result);
 2424              		.loc 3 563 0
 2425 0f82 FB68     		ldr	r3, [r7, #12]
 2426              	@ 563 "D:\workspace\console800480\system/core_cmInstr.h" 1
 2427 0f84 B3FA83F3 		clz r3, r3
 2428              	@ 0 "" 2
 2429              		.thumb
 2430 0f88 FB72     		strb	r3, [r7, #11]
 2431              		.loc 3 564 0
 2432 0f8a FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 2433              	.LBE121:
 2434              	.LBE120:
 2435              		.loc 2 1123 0
 2436 0f8c DA40     		lsrs	r2, r2, r3
 2437 0f8e 7B68     		ldr	r3, [r7, #4]
 2438 0f90 DA62     		str	r2, [r3, #44]
1124:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** }
 2439              		.loc 2 1124 0
 2440 0f92 4C37     		adds	r7, r7, #76
 2441 0f94 BD46     		mov	sp, r7
 2442              		@ sp needed
 2443 0f96 5DF8047B 		ldr	r7, [sp], #4
 2444 0f9a 7047     		bx	lr
 2445              		.cfi_endproc
 2446              	.LFE65:
 2448              		.align	2
 2449              		.global	HAL_RCC_GetClockConfig
 2450              		.thumb
 2451              		.thumb_func
 2453              	HAL_RCC_GetClockConfig:
 2454              	.LFB66:
1125:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
1126:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** /**
1127:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @brief  Configures the RCC_ClkInitStruct according to the internal 
1128:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * RCC configuration registers.
1129:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @param  RCC_OscInitStruct: pointer to an RCC_ClkInitTypeDef structure that 
1130:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * will be configured.
1131:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @param  pFLatency: Pointer on the Flash Latency.
1132:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @retval None
1133:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   */
1134:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
1135:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** {
 2455              		.loc 2 1135 0
 2456              		.cfi_startproc
 2457              		@ args = 0, pretend = 0, frame = 8
 2458              		@ frame_needed = 1, uses_anonymous_args = 0
 2459              		@ link register save eliminated.
 2460 0f9c 80B4     		push	{r7}
 2461              		.cfi_def_cfa_offset 4
 2462              		.cfi_offset 7, -4
 2463 0f9e 83B0     		sub	sp, sp, #12
 2464              		.cfi_def_cfa_offset 16
 2465 0fa0 00AF     		add	r7, sp, #0
 2466              		.cfi_def_cfa_register 7
 2467 0fa2 7860     		str	r0, [r7, #4]
 2468 0fa4 3960     		str	r1, [r7]
1136:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* Set all possible values for the Clock type parameter --------------------*/
1137:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | 
 2469              		.loc 2 1137 0
 2470 0fa6 7B68     		ldr	r3, [r7, #4]
 2471 0fa8 0F22     		movs	r2, #15
 2472 0faa 1A60     		str	r2, [r3]
1138:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****    
1139:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* Get the SYSCLK configuration --------------------------------------------*/ 
1140:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 2473              		.loc 2 1140 0
 2474 0fac 4FF46053 		mov	r3, #14336
 2475 0fb0 C4F20203 		movt	r3, 16386
 2476 0fb4 9B68     		ldr	r3, [r3, #8]
 2477 0fb6 03F00302 		and	r2, r3, #3
 2478 0fba 7B68     		ldr	r3, [r7, #4]
 2479 0fbc 5A60     		str	r2, [r3, #4]
1141:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   
1142:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* Get the HCLK configuration ----------------------------------------------*/ 
1143:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 2480              		.loc 2 1143 0
 2481 0fbe 4FF46053 		mov	r3, #14336
 2482 0fc2 C4F20203 		movt	r3, 16386
 2483 0fc6 9B68     		ldr	r3, [r3, #8]
 2484 0fc8 03F0F002 		and	r2, r3, #240
 2485 0fcc 7B68     		ldr	r3, [r7, #4]
 2486 0fce 9A60     		str	r2, [r3, #8]
1144:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   
1145:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* Get the APB1 configuration ----------------------------------------------*/ 
1146:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 2487              		.loc 2 1146 0
 2488 0fd0 4FF46053 		mov	r3, #14336
 2489 0fd4 C4F20203 		movt	r3, 16386
 2490 0fd8 9B68     		ldr	r3, [r3, #8]
 2491 0fda 03F4E052 		and	r2, r3, #7168
 2492 0fde 7B68     		ldr	r3, [r7, #4]
 2493 0fe0 DA60     		str	r2, [r3, #12]
1147:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   
1148:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* Get the APB2 configuration ----------------------------------------------*/ 
1149:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 2494              		.loc 2 1149 0
 2495 0fe2 4FF46053 		mov	r3, #14336
 2496 0fe6 C4F20203 		movt	r3, 16386
 2497 0fea 9B68     		ldr	r3, [r3, #8]
 2498 0fec 03F46043 		and	r3, r3, #57344
 2499 0ff0 DA08     		lsrs	r2, r3, #3
 2500 0ff2 7B68     		ldr	r3, [r7, #4]
 2501 0ff4 1A61     		str	r2, [r3, #16]
1150:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   
1151:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* Get the Flash Wait State (Latency) configuration ------------------------*/   
1152:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 2502              		.loc 2 1152 0
 2503 0ff6 4FF47053 		mov	r3, #15360
 2504 0ffa C4F20203 		movt	r3, 16386
 2505 0ffe 1B68     		ldr	r3, [r3]
 2506 1000 03F00702 		and	r2, r3, #7
 2507 1004 3B68     		ldr	r3, [r7]
 2508 1006 1A60     		str	r2, [r3]
1153:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** }
 2509              		.loc 2 1153 0
 2510 1008 0C37     		adds	r7, r7, #12
 2511 100a BD46     		mov	sp, r7
 2512              		@ sp needed
 2513 100c 5DF8047B 		ldr	r7, [sp], #4
 2514 1010 7047     		bx	lr
 2515              		.cfi_endproc
 2516              	.LFE66:
 2518 1012 00BF     		.align	2
 2519              		.global	HAL_RCC_NMI_IRQHandler
 2520              		.thumb
 2521              		.thumb_func
 2523              	HAL_RCC_NMI_IRQHandler:
 2524              	.LFB67:
1154:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
1155:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** /**
1156:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @brief This function handles the RCC CSS interrupt request.
1157:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @note This API should be called under the NMI_Handler().
1158:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @param None
1159:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @retval None
1160:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   */
1161:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** void HAL_RCC_NMI_IRQHandler(void)
1162:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** {
 2525              		.loc 2 1162 0
 2526              		.cfi_startproc
 2527              		@ args = 0, pretend = 0, frame = 0
 2528              		@ frame_needed = 1, uses_anonymous_args = 0
 2529 1014 80B5     		push	{r7, lr}
 2530              		.cfi_def_cfa_offset 8
 2531              		.cfi_offset 7, -8
 2532              		.cfi_offset 14, -4
 2533 1016 00AF     		add	r7, sp, #0
 2534              		.cfi_def_cfa_register 7
1163:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* Check RCC CSSF flag  */
1164:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 2535              		.loc 2 1164 0
 2536 1018 4FF46053 		mov	r3, #14336
 2537 101c C4F20203 		movt	r3, 16386
 2538 1020 DB68     		ldr	r3, [r3, #12]
 2539 1022 03F08003 		and	r3, r3, #128
 2540 1026 002B     		cmp	r3, #0
 2541 1028 07D0     		beq	.L152
1165:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   {
1166:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     /* RCC Clock Security System interrupt user callback */
1167:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     HAL_RCC_CCSCallback();
 2542              		.loc 2 1167 0
 2543 102a FFF7FEFF 		bl	HAL_RCC_CCSCallback
1168:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
1169:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     /* Clear RCC CSS pending bit */
1170:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 2544              		.loc 2 1170 0
 2545 102e 43F60E03 		movw	r3, #14350
 2546 1032 C4F20203 		movt	r3, 16386
 2547 1036 8022     		movs	r2, #128
 2548 1038 1A70     		strb	r2, [r3]
 2549              	.L152:
1171:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   }
1172:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** }
 2550              		.loc 2 1172 0
 2551 103a 80BD     		pop	{r7, pc}
 2552              		.cfi_endproc
 2553              	.LFE67:
 2555              		.align	2
 2556              		.weak	HAL_RCC_CCSCallback
 2557              		.thumb
 2558              		.thumb_func
 2560              	HAL_RCC_CCSCallback:
 2561              	.LFB68:
1173:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
1174:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** /**
1175:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @brief  RCC Clock Security System interrupt callback
1176:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @param  none 
1177:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @retval none
1178:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   */
1179:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** __weak void HAL_RCC_CCSCallback(void)
1180:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** {
 2562              		.loc 2 1180 0
 2563              		.cfi_startproc
 2564              		@ args = 0, pretend = 0, frame = 0
 2565              		@ frame_needed = 1, uses_anonymous_args = 0
 2566              		@ link register save eliminated.
 2567 103c 80B4     		push	{r7}
 2568              		.cfi_def_cfa_offset 4
 2569              		.cfi_offset 7, -4
 2570 103e 00AF     		add	r7, sp, #0
 2571              		.cfi_def_cfa_register 7
1181:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1182:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****             the HAL_RCC_CCSCallback could be implemented in the user file
1183:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****    */ 
1184:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** }
 2572              		.loc 2 1184 0
 2573 1040 BD46     		mov	sp, r7
 2574              		@ sp needed
 2575 1042 5DF8047B 		ldr	r7, [sp], #4
 2576 1046 7047     		bx	lr
 2577              		.cfi_endproc
 2578              	.LFE68:
 2580              	.Letext0:
 2581              		.file 4 "D:\\workspace\\console800480\\system/stm32f217xx.h"
 2582              		.file 5 "c:\\program files (x86)\\codesourcery\\arm-none-eabi\\include\\stdint.h"
 2583              		.file 6 "D:\\workspace\\console800480\\system/stm32f2xx.h"
 2584              		.file 7 "D:\\workspace\\console800480\\STM32F2xx_HAL_Driver\\Inc/stm32f2xx_hal_def.h"
 2585              		.file 8 "D:\\workspace\\console800480\\STM32F2xx_HAL_Driver\\Inc/stm32f2xx_hal_rcc.h"
 2586              		.file 9 "D:\\workspace\\console800480\\STM32F2xx_HAL_Driver\\Inc/stm32f2xx_hal_gpio.h"
 2587              		.file 10 "D:\\workspace\\console800480\\system/system_stm32f2xx.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f2xx_hal_rcc.c
C:\Users\sagok\AppData\Local\Temp\ccu9mEUG.s:18     .text:00000000 $t
C:\Users\sagok\AppData\Local\Temp\ccu9mEUG.s:22     .text:00000000 NVIC_SetPriority
C:\Users\sagok\AppData\Local\Temp\ccu9mEUG.s:82     .text:00000058 SysTick_Config
C:\Users\sagok\AppData\Local\Temp\ccu9mEUG.s:143    .rodata:00000000 APBAHBPrescTable
C:\Users\sagok\AppData\Local\Temp\ccu9mEUG.s:140    .rodata:00000000 $d
C:\Users\sagok\AppData\Local\Temp\ccu9mEUG.s:166    .text:000000ac HAL_RCC_DeInit
C:\Users\sagok\AppData\Local\Temp\ccu9mEUG.s:256    .text:00000174 HAL_RCC_OscConfig
C:\Users\sagok\AppData\Local\Temp\ccu9mEUG.s:1040   .text:000006e4 HAL_RCC_ClockConfig
C:\Users\sagok\AppData\Local\Temp\ccu9mEUG.s:1918   .text:00000cbc HAL_RCC_GetHCLKFreq
C:\Users\sagok\AppData\Local\Temp\ccu9mEUG.s:1485   .text:00000a3c HAL_RCC_MCOConfig
C:\Users\sagok\AppData\Local\Temp\ccu9mEUG.s:1605   .text:00000b18 HAL_RCC_EnableCSS
C:\Users\sagok\AppData\Local\Temp\ccu9mEUG.s:1635   .text:00000b30 HAL_RCC_DisableCSS
C:\Users\sagok\AppData\Local\Temp\ccu9mEUG.s:1665   .text:00000b48 HAL_RCC_GetSysClockFreq
C:\Users\sagok\AppData\Local\Temp\ccu9mEUG.s:1995   .text:00000d1c HAL_RCC_GetPCLK1Freq
C:\Users\sagok\AppData\Local\Temp\ccu9mEUG.s:2065   .text:00000d6c HAL_RCC_GetPCLK2Freq
C:\Users\sagok\AppData\Local\Temp\ccu9mEUG.s:2135   .text:00000dbc HAL_RCC_GetOscConfig
C:\Users\sagok\AppData\Local\Temp\ccu9mEUG.s:2453   .text:00000f9c HAL_RCC_GetClockConfig
C:\Users\sagok\AppData\Local\Temp\ccu9mEUG.s:2523   .text:00001014 HAL_RCC_NMI_IRQHandler
C:\Users\sagok\AppData\Local\Temp\ccu9mEUG.s:2560   .text:0000103c HAL_RCC_CCSCallback
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.7f551ac7fcad8b79b9df4bfdaa536673
                           .group:00000000 wm4.stm32f2xx_hal_conf.h.40.007126baefb9f966c36646edbf8040d2
                           .group:00000000 wm4.stm32f2xx.h.57.5ec1581efc43612c411d33a8686e9ec7
                           .group:00000000 wm4.stm32f217xx.h.52.9c940d76d00294b78837dc334c172fdd
                           .group:00000000 wm4.core_cm3.h.32.49180ccb4d36cabd2d7016d2a51d91ae
                           .group:00000000 wm4.newlib.h.8.384a112feabb3bef7b573ae48cde2e3b
                           .group:00000000 wm4.features.h.22.6a4ca7cd053637cc1d0db6c16f39b2d7
                           .group:00000000 wm4.config.h.183.aa62afef667fb61d15fa64c48beb2f14
                           .group:00000000 wm4._ansi.h.23.5644b60c990a4800b02a6e654e88f93a
                           .group:00000000 wm4.stdint.h.20.54ad762faa59e3c05491630641c8d8bf
                           .group:00000000 wm4.core_cmInstr.h.25.f50f886f2edf670cf199b35fd96f5c91
                           .group:00000000 wm4.core_cm3.h.130.63ab2348a6eed0fdb318040d970b676c
                           .group:00000000 wm4.stm32f217xx.h.978.a5c681952b2f704a0e7f2ba21d08adf5
                           .group:00000000 wm4.stm32f2xx.h.142.bc2155a1f7498bab16371e38413a9e41
                           .group:00000000 wm4.stm32f2xx_hal_def.h.74.8ad2dc8aa82c4fd02e5aeaae592641ba
                           .group:00000000 wm4.stm32f2xx_hal_rcc.h.142.ec0f91cc6576a6acebd17e6dd85829ae
                           .group:00000000 wm4.stm32f2xx_hal_rcc_ex.h.40.0829033e864455c6bdd0db01f8ba5a50
                           .group:00000000 wm4.stm32f2xx_hal_gpio.h.40.ba64e0bb94d9a68835f80159f39a86f1
                           .group:00000000 wm4.stm32f2xx_hal_gpio_ex.h.40.24e547fd402281923f446b510381083f
                           .group:00000000 wm4.stm32f2xx_hal_dma.h.40.5d9732ace2a21a4526ce8f0c52428fff
                           .group:00000000 wm4.stm32f2xx_hal_cortex.h.40.e10263d2ec5d4fa79b4180ce1a38aff1
                           .group:00000000 wm4.stm32f2xx_hal_adc.h.40.89ac8b78113cac4cf63847587daabac9
                           .group:00000000 wm4.stm32f2xx_hal_adc_ex.h.40.7de68ed256ef25526ee31cc017f2c291
                           .group:00000000 wm4.stm32f2xx_hal_flash.h.40.c3171719ce015e9cff20c795e44e886d
                           .group:00000000 wm4.stm32f2xx_hal_flash_ex.h.40.7389508bd24a0aeb077bde0c9fb651eb
                           .group:00000000 wm4.stm32f2xx_ll_fsmc.h.40.c1c32f2e1862f4dd342bd9b80fb895bb
                           .group:00000000 wm4.stm32f2xx_hal_pwr.h.40.812df32e5c31b609a128e9db0eb4cbd0
                           .group:00000000 wm4.stm32f2xx_hal_rtc.h.40.850fda5fe2cce8797446913dee18382f
                           .group:00000000 wm4.stm32f2xx_hal_rtc_ex.h.40.f3e0c408e3bf4e8a0352d7ec9a18a822
                           .group:00000000 wm4.stm32f2xx_ll_sdmmc.h.40.3719ab487c4b77401c572f459adf6eb7
                           .group:00000000 wm4.stm32f2xx_hal_sd.h.58.760215394dcc316161a6482c0af9b866
                           .group:00000000 wm4.stm32f2xx_hal_spi.h.40.7984243dbaba8b21c6392998a47e6987
                           .group:00000000 wm4.stm32f2xx_hal_tim.h.40.d79172f25d0e9a15dc346aba8515bdd6
                           .group:00000000 wm4.stm32f2xx_hal_tim_ex.h.40.361f280a7a3f60b4b238bb99ca728d83
                           .group:00000000 wm4.stm32f2xx_hal_uart.h.40.d74def561ae6f78f40f477c8426ecbef
                           .group:00000000 wm4.stm32f2xx_ll_usb.h.40.9b0206a05bc6ce3bec1648b51f22cb81
                           .group:00000000 wm4.stm32f2xx_hal_pcd.h.99.11faba414c39e357b2f23364912d0605
                           .group:00000000 wm4.stm32f2xx_hal_hcd.h.40.44ee5e972983ae0139ddbacdc75c44ef
                           .group:00000000 wm4.stm32f2xx_hal.h.64.ed79ee83e52b151b3c365392b398f866

UNDEFINED SYMBOLS
HAL_GetTick
HAL_GPIO_Init
SystemCoreClock
