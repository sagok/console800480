   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f2xx_hal_rtc.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.align	2
  19              		.global	HAL_RTC_Init
  20              		.thumb
  21              		.thumb_func
  23              	HAL_RTC_Init:
  24              	.LFB55:
  25              		.file 1 "../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c"
   1:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** /**
   2:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   ******************************************************************************
   3:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @file    stm32f2xx_hal_rtc.c
   4:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @author  MCD Application Team
   5:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @version V1.0.1
   6:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @date    25-March-2014
   7:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @brief   RTC HAL module driver.
   8:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   *          This file provides firmware functions to manage the following 
   9:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   *          functionalities of the Real Time Clock (RTC) peripheral:
  10:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   *           + Initialization and de-initialization functions
  11:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   *           + RTC Time and Date functions
  12:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   *           + RTC Alarm functions
  13:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   *           + Peripheral Control functions   
  14:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   *           + Peripheral State functions
  15:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   *         
  16:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   @verbatim
  17:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   ==============================================================================
  18:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****               ##### Backup Domain Operating Condition #####
  19:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   ==============================================================================
  20:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   [..] The real-time clock (RTC), the RTC backup registers, and the backup 
  21:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****        SRAM (BKP SRAM) can be powered from the VBAT voltage when the main 
  22:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****        VDD supply is powered off.
  23:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****        To retain the content of the RTC backup registers, backup SRAM, and supply 
  24:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****        the RTC when VDD is turned off, VBAT pin can be connected to an optional 
  25:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****        standby voltage supplied by a battery or by another source.
  26:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** 
  27:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   [..] To allow the RTC to operate even when the main digital supply (VDD) is turned
  28:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****        off, the VBAT pin powers the following blocks:
  29:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     (#) The RTC
  30:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     (#) The LSE oscillator
  31:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     (#) The backup SRAM when the low power backup regulator is enabled
  32:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     (#) PC13 to PC15 I/Os, plus PI8 I/O (when available)
  33:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   
  34:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   [..] When the backup domain is supplied by VDD (analog switch connected to VDD),
  35:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****        the following functions are available:
  36:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     (#) PC14 and PC15 can be used as either GPIO or LSE pins
  37:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     (#) PC13 can be used as a GPIO or as the RTC_AF1 pin
  38:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     (#) PI8 can be used as a GPIO or as the RTC_AF2 pin
  39:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   
  40:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   [..] When the backup domain is supplied by VBAT (analog switch connected to VBAT 
  41:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****        because VDD is not present), the following functions are available:
  42:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     (#) PC14 and PC15 can be used as LSE pins only
  43:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     (#) PC13 can be used as the RTC_AF1 pin 
  44:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     (#) PI8 can be used as the RTC_AF2 pin
  45:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****              
  46:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****                    ##### Backup Domain Reset #####
  47:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   ==================================================================
  48:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   [..] The backup domain reset sets all RTC registers and the RCC_BDCR register 
  49:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****        to their reset values. The BKPSRAM is not affected by this reset. The only
  50:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****        way of resetting the BKPSRAM is through the Flash interface by requesting 
  51:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****        a protection level change from 1 to 0.
  52:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   [..] A backup domain reset is generated when one of the following events occurs:
  53:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     (#) Software reset, triggered by setting the BDRST bit in the 
  54:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****         RCC Backup domain control register (RCC_BDCR). 
  55:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     (#) VDD or VBAT power on, if both supplies have previously been powered off.  
  56:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** 
  57:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****                    ##### Backup Domain Access #####
  58:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   ==================================================================
  59:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   [..] After reset, the backup domain (RTC registers, RTC backup data 
  60:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****        registers and backup SRAM) is protected against possible unwanted write 
  61:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****        accesses. 
  62:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   [..] To enable access to the RTC Domain and RTC registers, proceed as follows:
  63:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     (+) Enable the Power Controller (PWR) APB1 interface clock using the
  64:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****         __PWR_CLK_ENABLE() function.
  65:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     (+) Enable access to RTC domain using the HAL_PWR_EnableBkUpAccess() function.
  66:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     (+) Select the RTC clock source using the __HAL_RCC_RTC_CONFIG() function.
  67:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     (+) Enable RTC Clock using the __HAL_RCC_RTC_ENABLE() function.
  68:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   
  69:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   
  70:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****                   ##### How to use this driver #####
  71:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   ==================================================================
  72:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   [..] 
  73:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     (+) Enable the RTC domain access (see description in the section above).
  74:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     (+) Configure the RTC Prescaler (Asynchronous and Synchronous) and RTC hour 
  75:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****         format using the HAL_RTC_Init() function.
  76:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   
  77:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   *** Time and Date configuration ***
  78:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   ===================================
  79:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   [..] 
  80:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     (+) To configure the RTC Calendar (Time and Date) use the HAL_RTC_SetTime() 
  81:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****         and HAL_RTC_SetDate() functions.
  82:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     (+) To read the RTC Calendar, use the HAL_RTC_GetTime() and HAL_RTC_GetDate() functions. 
  83:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   
  84:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   *** Alarm configuration ***
  85:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   ===========================
  86:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   [..]
  87:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     (+) To configure the RTC Alarm use the HAL_RTC_SetAlarm() function. 
  88:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****         You can also configure the RTC Alarm with interrupt mode using the HAL_RTC_SetAlarm_IT() fu
  89:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     (+) To read the RTC Alarm, use the HAL_RTC_GetAlarm() function.
  90:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   
  91:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****                   ##### RTC and low power modes #####
  92:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   ==================================================================
  93:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   [..] The MCU can be woken up from a low power mode by an RTC alternate 
  94:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****        function.
  95:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   [..] The RTC alternate functions are the RTC alarms (Alarm A and Alarm B), 
  96:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****        RTC wakeup, RTC tamper event detection and RTC time stamp event detection.
  97:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****        These RTC alternate functions can wake up the system from the Stop and 
  98:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****        Standby low power modes.
  99:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   [..] The system can also wake up from low power modes without depending 
 100:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****        on an external interrupt (Auto-wakeup mode), by using the RTC alarm 
 101:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****        or the RTC wakeup events.
 102:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   [..] The RTC provides a programmable time base for waking up from the 
 103:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****        Stop or Standby mode at regular intervals.
 104:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****        Wakeup from STOP and Standby modes is possible only when the RTC clock source
 105:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****        is LSE or LSI.
 106:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****      
 107:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****    @endverbatim
 108:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   ******************************************************************************
 109:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @attention
 110:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   *
 111:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * <h2><center>&copy; COPYRIGHT(c) 2014 STMicroelectronics</center></h2>
 112:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   *
 113:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * Redistribution and use in source and binary forms, with or without modification,
 114:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * are permitted provided that the following conditions are met:
 115:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   *   1. Redistributions of source code must retain the above copyright notice,
 116:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   *      this list of conditions and the following disclaimer.
 117:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
 118:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   *      this list of conditions and the following disclaimer in the documentation
 119:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   *      and/or other materials provided with the distribution.
 120:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
 121:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   *      may be used to endorse or promote products derived from this software
 122:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   *      without specific prior written permission.
 123:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   *
 124:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 125:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 126:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 127:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 128:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 129:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 130:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 131:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 132:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 133:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 134:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   *
 135:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   ******************************************************************************
 136:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   */ 
 137:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** 
 138:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** /* Includes ------------------------------------------------------------------*/
 139:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** #include "stm32f2xx_hal.h"
 140:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** 
 141:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** /** @addtogroup STM32F2xx_HAL_Driver
 142:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @{
 143:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   */
 144:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** 
 145:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** /** @defgroup RTC 
 146:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @brief RTC HAL module driver
 147:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @{
 148:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   */
 149:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** 
 150:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** #ifdef HAL_RTC_MODULE_ENABLED
 151:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** 
 152:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** /* Private typedef -----------------------------------------------------------*/
 153:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** /* Private define ------------------------------------------------------------*/
 154:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** /* Private macro -------------------------------------------------------------*/
 155:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** /* Private variables ---------------------------------------------------------*/
 156:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** /* Private function prototypes -----------------------------------------------*/
 157:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** /* Private functions ---------------------------------------------------------*/
 158:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** 
 159:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** /** @defgroup RTC_Private_Functions
 160:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @{
 161:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   */
 162:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   
 163:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** /** @defgroup RTC_Group1 Initialization and de-initialization functions 
 164:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****  *  @brief    Initialization and Configuration functions 
 165:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****  *
 166:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** @verbatim    
 167:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****  ===============================================================================
 168:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****               ##### Initialization and de-initialization functions #####
 169:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****  ===============================================================================
 170:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****    [..] This section provide functions allowing to initialize and configure the 
 171:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****          RTC Prescaler (Synchronous and Asynchronous), RTC Hour format, disable 
 172:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****          RTC registers Write protection, enter and exit the RTC initialization mode, 
 173:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****          RTC registers synchronization check and reference clock detection enable.
 174:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****          (#) The RTC Prescaler is programmed to generate the RTC 1Hz time base. 
 175:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****              It is split into 2 programmable prescalers to minimize power consumption.
 176:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****              (++) A 7-bit asynchronous prescaler and A 13-bit synchronous prescaler.
 177:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****              (++) When both prescalers are used, it is recommended to configure the 
 178:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****                  asynchronous prescaler to a high value to minimize consumption.
 179:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****          (#) All RTC registers are Write protected. Writing to the RTC registers
 180:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****              is enabled by writing a key into the Write Protection register, RTC_WPR.
 181:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****          (#) To Configure the RTC Calendar, user application should enter 
 182:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****              initialization mode. In this mode, the calendar counter is stopped 
 183:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****              and its value can be updated. When the initialization sequence is 
 184:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****              complete, the calendar restarts counting after 4 RTCCLK cycles.
 185:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****          (#) To read the calendar through the shadow registers after Calendar 
 186:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****              initialization, calendar update or after wakeup from low power modes 
 187:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****              the software must first clear the RSF flag. The software must then 
 188:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****              wait until it is set again before reading the calendar, which means 
 189:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****              that the calendar registers have been correctly copied into the 
 190:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****              RTC_TR and RTC_DR shadow registers.The HAL_RTC_WaitForSynchro() function 
 191:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****              implements the above software sequence (RSF clear and RSF check).
 192:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****  
 193:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** @endverbatim
 194:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @{
 195:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   */
 196:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** 
 197:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** /**
 198:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @brief  Initializes the RTC peripheral 
 199:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @param  hrtc: RTC handle
 200:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @retval HAL status
 201:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   */
 202:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
 203:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** {
  26              		.loc 1 203 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 8
  29              		@ frame_needed = 1, uses_anonymous_args = 0
  30 0000 80B5     		push	{r7, lr}
  31              		.cfi_def_cfa_offset 8
  32              		.cfi_offset 7, -8
  33              		.cfi_offset 14, -4
  34 0002 82B0     		sub	sp, sp, #8
  35              		.cfi_def_cfa_offset 16
  36 0004 00AF     		add	r7, sp, #0
  37              		.cfi_def_cfa_register 7
  38 0006 7860     		str	r0, [r7, #4]
 204:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   /* Check the RTC peripheral state */
 205:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   if(hrtc == NULL)
  39              		.loc 1 205 0
  40 0008 7B68     		ldr	r3, [r7, #4]
  41 000a 002B     		cmp	r3, #0
  42 000c 01D1     		bne	.L2
 206:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   {
 207:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****      return HAL_ERROR;
  43              		.loc 1 207 0
  44 000e 0123     		movs	r3, #1
  45 0010 6AE0     		b	.L3
  46              	.L2:
 208:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   }
 209:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   
 210:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   /* Check the parameters */
 211:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 212:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 213:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 214:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   assert_param (IS_RTC_OUTPUT(hrtc->Init.OutPut));
 215:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   assert_param (IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 216:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 217:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     
 218:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   if(hrtc->State == HAL_RTC_STATE_RESET)
  47              		.loc 1 218 0
  48 0012 7B68     		ldr	r3, [r7, #4]
  49 0014 5B7F     		ldrb	r3, [r3, #29]
  50 0016 DBB2     		uxtb	r3, r3
  51 0018 002B     		cmp	r3, #0
  52 001a 02D1     		bne	.L4
 219:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   {
 220:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     /* Initialize RTC MSP */
 221:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     HAL_RTC_MspInit(hrtc);
  53              		.loc 1 221 0
  54 001c 7868     		ldr	r0, [r7, #4]
  55 001e FFF7FEFF 		bl	HAL_RTC_MspInit
  56              	.L4:
 222:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   }
 223:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   
 224:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   /* Set RTC state */  
 225:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;  
  57              		.loc 1 225 0
  58 0022 7B68     		ldr	r3, [r7, #4]
  59 0024 0222     		movs	r2, #2
  60 0026 5A77     		strb	r2, [r3, #29]
 226:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****        
 227:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
 228:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
  61              		.loc 1 228 0
  62 0028 7B68     		ldr	r3, [r7, #4]
  63 002a 1B68     		ldr	r3, [r3]
  64 002c CA22     		movs	r2, #202
  65 002e 5A62     		str	r2, [r3, #36]
  66 0030 7B68     		ldr	r3, [r7, #4]
  67 0032 1B68     		ldr	r3, [r3]
  68 0034 5322     		movs	r2, #83
  69 0036 5A62     		str	r2, [r3, #36]
 229:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** 
 230:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   /* Set Initialization mode */
 231:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   if(RTC_EnterInitMode(hrtc) != HAL_OK)
  70              		.loc 1 231 0
  71 0038 7868     		ldr	r0, [r7, #4]
  72 003a FFF7FEFF 		bl	RTC_EnterInitMode
  73 003e 0346     		mov	r3, r0
  74 0040 002B     		cmp	r3, #0
  75 0042 08D0     		beq	.L5
 232:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   {
 233:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     /* Enable the write protection for RTC registers */
 234:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
  76              		.loc 1 234 0
  77 0044 7B68     		ldr	r3, [r7, #4]
  78 0046 1B68     		ldr	r3, [r3]
  79 0048 FF22     		movs	r2, #255
  80 004a 5A62     		str	r2, [r3, #36]
 235:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     
 236:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     /* Set RTC state */
 237:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_ERROR;
  81              		.loc 1 237 0
  82 004c 7B68     		ldr	r3, [r7, #4]
  83 004e 0422     		movs	r2, #4
  84 0050 5A77     		strb	r2, [r3, #29]
 238:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     
 239:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     return HAL_ERROR;
  85              		.loc 1 239 0
  86 0052 0123     		movs	r3, #1
  87 0054 48E0     		b	.L3
  88              	.L5:
 240:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   } 
 241:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   else
 242:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   { 
 243:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     /* Clear RTC_CR FMT, OSEL and POL Bits */
 244:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
  89              		.loc 1 244 0
  90 0056 7B68     		ldr	r3, [r7, #4]
  91 0058 1A68     		ldr	r2, [r3]
  92 005a 7B68     		ldr	r3, [r7, #4]
  93 005c 1B68     		ldr	r3, [r3]
  94 005e 9B68     		ldr	r3, [r3, #8]
  95 0060 23F4E003 		bic	r3, r3, #7340032
  96 0064 23F04003 		bic	r3, r3, #64
  97 0068 9360     		str	r3, [r2, #8]
 245:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     /* Set RTC_CR register */
 246:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutP
  98              		.loc 1 246 0
  99 006a 7B68     		ldr	r3, [r7, #4]
 100 006c 1B68     		ldr	r3, [r3]
 101 006e 7A68     		ldr	r2, [r7, #4]
 102 0070 1268     		ldr	r2, [r2]
 103 0072 9168     		ldr	r1, [r2, #8]
 104 0074 7A68     		ldr	r2, [r7, #4]
 105 0076 5068     		ldr	r0, [r2, #4]
 106 0078 7A68     		ldr	r2, [r7, #4]
 107 007a 1269     		ldr	r2, [r2, #16]
 108 007c 1043     		orrs	r0, r0, r2
 109 007e 7A68     		ldr	r2, [r7, #4]
 110 0080 5269     		ldr	r2, [r2, #20]
 111 0082 0243     		orrs	r2, r2, r0
 112 0084 0A43     		orrs	r2, r2, r1
 113 0086 9A60     		str	r2, [r3, #8]
 247:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     
 248:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     /* Configure the RTC PRER */
 249:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 114              		.loc 1 249 0
 115 0088 7B68     		ldr	r3, [r7, #4]
 116 008a 1B68     		ldr	r3, [r3]
 117 008c 7A68     		ldr	r2, [r7, #4]
 118 008e D268     		ldr	r2, [r2, #12]
 119 0090 1A61     		str	r2, [r3, #16]
 250:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 120              		.loc 1 250 0
 121 0092 7B68     		ldr	r3, [r7, #4]
 122 0094 1B68     		ldr	r3, [r3]
 123 0096 7A68     		ldr	r2, [r7, #4]
 124 0098 1268     		ldr	r2, [r2]
 125 009a 1169     		ldr	r1, [r2, #16]
 126 009c 7A68     		ldr	r2, [r7, #4]
 127 009e 9268     		ldr	r2, [r2, #8]
 128 00a0 1204     		lsls	r2, r2, #16
 129 00a2 0A43     		orrs	r2, r2, r1
 130 00a4 1A61     		str	r2, [r3, #16]
 251:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     
 252:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     /* Exit Initialization mode */
 253:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 131              		.loc 1 253 0
 132 00a6 7B68     		ldr	r3, [r7, #4]
 133 00a8 1B68     		ldr	r3, [r3]
 134 00aa 7A68     		ldr	r2, [r7, #4]
 135 00ac 1268     		ldr	r2, [r2]
 136 00ae D268     		ldr	r2, [r2, #12]
 137 00b0 22F08002 		bic	r2, r2, #128
 138 00b4 DA60     		str	r2, [r3, #12]
 254:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     
 255:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 139              		.loc 1 255 0
 140 00b6 7B68     		ldr	r3, [r7, #4]
 141 00b8 1B68     		ldr	r3, [r3]
 142 00ba 7A68     		ldr	r2, [r7, #4]
 143 00bc 1268     		ldr	r2, [r2]
 144 00be 126C     		ldr	r2, [r2, #64]
 145 00c0 22F48022 		bic	r2, r2, #262144
 146 00c4 1A64     		str	r2, [r3, #64]
 256:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 147              		.loc 1 256 0
 148 00c6 7B68     		ldr	r3, [r7, #4]
 149 00c8 1B68     		ldr	r3, [r3]
 150 00ca 7A68     		ldr	r2, [r7, #4]
 151 00cc 1268     		ldr	r2, [r2]
 152 00ce 116C     		ldr	r1, [r2, #64]
 153 00d0 7A68     		ldr	r2, [r7, #4]
 154 00d2 9269     		ldr	r2, [r2, #24]
 155 00d4 0A43     		orrs	r2, r2, r1
 156 00d6 1A64     		str	r2, [r3, #64]
 257:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     
 258:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     /* Enable the write protection for RTC registers */
 259:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 157              		.loc 1 259 0
 158 00d8 7B68     		ldr	r3, [r7, #4]
 159 00da 1B68     		ldr	r3, [r3]
 160 00dc FF22     		movs	r2, #255
 161 00de 5A62     		str	r2, [r3, #36]
 260:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     
 261:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     /* Set RTC state */
 262:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_READY;
 162              		.loc 1 262 0
 163 00e0 7B68     		ldr	r3, [r7, #4]
 164 00e2 0122     		movs	r2, #1
 165 00e4 5A77     		strb	r2, [r3, #29]
 263:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     
 264:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     return HAL_OK;
 166              		.loc 1 264 0
 167 00e6 0023     		movs	r3, #0
 168              	.L3:
 265:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   }
 266:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** }
 169              		.loc 1 266 0
 170 00e8 1846     		mov	r0, r3
 171 00ea 0837     		adds	r7, r7, #8
 172 00ec BD46     		mov	sp, r7
 173              		@ sp needed
 174 00ee 80BD     		pop	{r7, pc}
 175              		.cfi_endproc
 176              	.LFE55:
 178              		.align	2
 179              		.global	HAL_RTC_DeInit
 180              		.thumb
 181              		.thumb_func
 183              	HAL_RTC_DeInit:
 184              	.LFB56:
 267:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** 
 268:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** /**
 269:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @brief  DeInitializes the RTC peripheral 
 270:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @param  hrtc: RTC handle
 271:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @note   This function doesn't reset the RTC Backup Data registers.   
 272:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @retval HAL status
 273:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   */
 274:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_DeInit(RTC_HandleTypeDef *hrtc)
 275:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** {
 185              		.loc 1 275 0
 186              		.cfi_startproc
 187              		@ args = 0, pretend = 0, frame = 16
 188              		@ frame_needed = 1, uses_anonymous_args = 0
 189 00f0 80B5     		push	{r7, lr}
 190              		.cfi_def_cfa_offset 8
 191              		.cfi_offset 7, -8
 192              		.cfi_offset 14, -4
 193 00f2 84B0     		sub	sp, sp, #16
 194              		.cfi_def_cfa_offset 24
 195 00f4 00AF     		add	r7, sp, #0
 196              		.cfi_def_cfa_register 7
 197 00f6 7860     		str	r0, [r7, #4]
 276:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   uint32_t timeout = 0;
 198              		.loc 1 276 0
 199 00f8 0023     		movs	r3, #0
 200 00fa FB60     		str	r3, [r7, #12]
 277:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** 
 278:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   /* Set RTC state */
 279:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY; 
 201              		.loc 1 279 0
 202 00fc 7B68     		ldr	r3, [r7, #4]
 203 00fe 0222     		movs	r2, #2
 204 0100 5A77     		strb	r2, [r3, #29]
 280:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   
 281:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
 282:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 205              		.loc 1 282 0
 206 0102 7B68     		ldr	r3, [r7, #4]
 207 0104 1B68     		ldr	r3, [r3]
 208 0106 CA22     		movs	r2, #202
 209 0108 5A62     		str	r2, [r3, #36]
 210 010a 7B68     		ldr	r3, [r7, #4]
 211 010c 1B68     		ldr	r3, [r3]
 212 010e 5322     		movs	r2, #83
 213 0110 5A62     		str	r2, [r3, #36]
 283:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   
 284:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   /* Set Initialization mode */
 285:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   if(RTC_EnterInitMode(hrtc) != HAL_OK)
 214              		.loc 1 285 0
 215 0112 7868     		ldr	r0, [r7, #4]
 216 0114 FFF7FEFF 		bl	RTC_EnterInitMode
 217 0118 0346     		mov	r3, r0
 218 011a 002B     		cmp	r3, #0
 219 011c 08D0     		beq	.L7
 286:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   {
 287:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     /* Enable the write protection for RTC registers */
 288:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 220              		.loc 1 288 0
 221 011e 7B68     		ldr	r3, [r7, #4]
 222 0120 1B68     		ldr	r3, [r3]
 223 0122 FF22     		movs	r2, #255
 224 0124 5A62     		str	r2, [r3, #36]
 289:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     
 290:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     /* Set RTC state */
 291:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_ERROR;
 225              		.loc 1 291 0
 226 0126 7B68     		ldr	r3, [r7, #4]
 227 0128 0422     		movs	r2, #4
 228 012a 5A77     		strb	r2, [r3, #29]
 292:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     
 293:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     return HAL_ERROR;
 229              		.loc 1 293 0
 230 012c 0123     		movs	r3, #1
 231 012e 70E0     		b	.L8
 232              	.L7:
 294:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   }  
 295:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   else
 296:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   {
 297:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     /* Reset TR, DR and CR registers */
 298:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     hrtc->Instance->TR = (uint32_t)0x00000000;
 233              		.loc 1 298 0
 234 0130 7B68     		ldr	r3, [r7, #4]
 235 0132 1B68     		ldr	r3, [r3]
 236 0134 0022     		movs	r2, #0
 237 0136 1A60     		str	r2, [r3]
 299:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     hrtc->Instance->DR = (uint32_t)0x00002101;
 238              		.loc 1 299 0
 239 0138 7B68     		ldr	r3, [r7, #4]
 240 013a 1B68     		ldr	r3, [r3]
 241 013c 42F20112 		movw	r2, #8449
 242 0140 5A60     		str	r2, [r3, #4]
 300:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     /* Reset All CR bits except CR[2:0] */
 301:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     hrtc->Instance->CR &= (uint32_t)0x00000007;
 243              		.loc 1 301 0
 244 0142 7B68     		ldr	r3, [r7, #4]
 245 0144 1B68     		ldr	r3, [r3]
 246 0146 7A68     		ldr	r2, [r7, #4]
 247 0148 1268     		ldr	r2, [r2]
 248 014a 9268     		ldr	r2, [r2, #8]
 249 014c 02F00702 		and	r2, r2, #7
 250 0150 9A60     		str	r2, [r3, #8]
 302:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****        
 303:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     timeout = HAL_GetTick() + RTC_TIMEOUT_VALUE;
 251              		.loc 1 303 0
 252 0152 FFF7FEFF 		bl	HAL_GetTick
 253 0156 0346     		mov	r3, r0
 254 0158 03F57A73 		add	r3, r3, #1000
 255 015c FB60     		str	r3, [r7, #12]
 304:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     
 305:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     /* Wait till WUTWF flag is set and if Time out is reached exit */
 306:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     while(((hrtc->Instance->ISR) & RTC_ISR_WUTWF) == (uint32_t)RESET)
 256              		.loc 1 306 0
 257 015e 0EE0     		b	.L9
 258              	.L10:
 307:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     {
 308:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       if(HAL_GetTick() >= timeout)
 259              		.loc 1 308 0
 260 0160 FFF7FEFF 		bl	HAL_GetTick
 261 0164 0246     		mov	r2, r0
 262 0166 FB68     		ldr	r3, [r7, #12]
 263 0168 9A42     		cmp	r2, r3
 264 016a 08D3     		bcc	.L9
 309:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       { 
 310:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
 311:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 265              		.loc 1 311 0
 266 016c 7B68     		ldr	r3, [r7, #4]
 267 016e 1B68     		ldr	r3, [r3]
 268 0170 FF22     		movs	r2, #255
 269 0172 5A62     		str	r2, [r3, #36]
 312:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****         
 313:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****         /* Set RTC state */
 314:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
 270              		.loc 1 314 0
 271 0174 7B68     		ldr	r3, [r7, #4]
 272 0176 0322     		movs	r2, #3
 273 0178 5A77     		strb	r2, [r3, #29]
 315:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****         
 316:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****         return HAL_TIMEOUT;
 274              		.loc 1 316 0
 275 017a 0323     		movs	r3, #3
 276 017c 49E0     		b	.L8
 277              	.L9:
 306:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     {
 278              		.loc 1 306 0 discriminator 1
 279 017e 7B68     		ldr	r3, [r7, #4]
 280 0180 1B68     		ldr	r3, [r3]
 281 0182 DB68     		ldr	r3, [r3, #12]
 282 0184 03F00403 		and	r3, r3, #4
 283 0188 002B     		cmp	r3, #0
 284 018a E9D0     		beq	.L10
 317:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       }      
 318:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     }
 319:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     
 320:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     /* Reset all RTC CR register bits */
 321:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     hrtc->Instance->CR &= (uint32_t)0x00000000;
 285              		.loc 1 321 0
 286 018c 7B68     		ldr	r3, [r7, #4]
 287 018e 1B68     		ldr	r3, [r3]
 288 0190 9B68     		ldr	r3, [r3, #8]
 289 0192 7B68     		ldr	r3, [r7, #4]
 290 0194 1B68     		ldr	r3, [r3]
 291 0196 0022     		movs	r2, #0
 292 0198 9A60     		str	r2, [r3, #8]
 322:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     hrtc->Instance->WUTR = (uint32_t)0x0000FFFF;
 293              		.loc 1 322 0
 294 019a 7B68     		ldr	r3, [r7, #4]
 295 019c 1B68     		ldr	r3, [r3]
 296 019e 4FF6FF72 		movw	r2, #65535
 297 01a2 5A61     		str	r2, [r3, #20]
 323:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     hrtc->Instance->PRER = (uint32_t)0x007F00FF;
 298              		.loc 1 323 0
 299 01a4 7B68     		ldr	r3, [r7, #4]
 300 01a6 1A68     		ldr	r2, [r3]
 301 01a8 FF23     		movs	r3, #255
 302 01aa C0F27F03 		movt	r3, 127
 303 01ae 1361     		str	r3, [r2, #16]
 324:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     hrtc->Instance->CALIBR = (uint32_t)0x00000000;
 304              		.loc 1 324 0
 305 01b0 7B68     		ldr	r3, [r7, #4]
 306 01b2 1B68     		ldr	r3, [r3]
 307 01b4 0022     		movs	r2, #0
 308 01b6 9A61     		str	r2, [r3, #24]
 325:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     hrtc->Instance->ALRMAR = (uint32_t)0x00000000;
 309              		.loc 1 325 0
 310 01b8 7B68     		ldr	r3, [r7, #4]
 311 01ba 1B68     		ldr	r3, [r3]
 312 01bc 0022     		movs	r2, #0
 313 01be DA61     		str	r2, [r3, #28]
 326:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     hrtc->Instance->ALRMBR = (uint32_t)0x00000000;
 314              		.loc 1 326 0
 315 01c0 7B68     		ldr	r3, [r7, #4]
 316 01c2 1B68     		ldr	r3, [r3]
 317 01c4 0022     		movs	r2, #0
 318 01c6 1A62     		str	r2, [r3, #32]
 327:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     
 328:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     /* Reset ISR register and exit initialization mode */
 329:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     hrtc->Instance->ISR = (uint32_t)0x00000000;
 319              		.loc 1 329 0
 320 01c8 7B68     		ldr	r3, [r7, #4]
 321 01ca 1B68     		ldr	r3, [r3]
 322 01cc 0022     		movs	r2, #0
 323 01ce DA60     		str	r2, [r3, #12]
 330:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     
 331:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     /* Reset Tamper and alternate functions configuration register */
 332:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     hrtc->Instance->TAFCR = 0x00000000;
 324              		.loc 1 332 0
 325 01d0 7B68     		ldr	r3, [r7, #4]
 326 01d2 1B68     		ldr	r3, [r3]
 327 01d4 0022     		movs	r2, #0
 328 01d6 1A64     		str	r2, [r3, #64]
 333:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** 
 334:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 329              		.loc 1 334 0
 330 01d8 7868     		ldr	r0, [r7, #4]
 331 01da FFF7FEFF 		bl	HAL_RTC_WaitForSynchro
 332 01de 0346     		mov	r3, r0
 333 01e0 002B     		cmp	r3, #0
 334 01e2 08D0     		beq	.L11
 335:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     {
 336:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       /* Enable the write protection for RTC registers */
 337:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 335              		.loc 1 337 0
 336 01e4 7B68     		ldr	r3, [r7, #4]
 337 01e6 1B68     		ldr	r3, [r3]
 338 01e8 FF22     		movs	r2, #255
 339 01ea 5A62     		str	r2, [r3, #36]
 338:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** 
 339:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       hrtc->State = HAL_RTC_STATE_ERROR;
 340              		.loc 1 339 0
 341 01ec 7B68     		ldr	r3, [r7, #4]
 342 01ee 0422     		movs	r2, #4
 343 01f0 5A77     		strb	r2, [r3, #29]
 340:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** 
 341:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       return HAL_ERROR;
 344              		.loc 1 341 0
 345 01f2 0123     		movs	r3, #1
 346 01f4 0DE0     		b	.L8
 347              	.L11:
 342:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     }    
 343:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   }
 344:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   
 345:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   /* Enable the write protection for RTC registers */
 346:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 348              		.loc 1 346 0
 349 01f6 7B68     		ldr	r3, [r7, #4]
 350 01f8 1B68     		ldr	r3, [r3]
 351 01fa FF22     		movs	r2, #255
 352 01fc 5A62     		str	r2, [r3, #36]
 347:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   
 348:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   /* De-Initialize RTC MSP */
 349:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   HAL_RTC_MspDeInit(hrtc);
 353              		.loc 1 349 0
 354 01fe 7868     		ldr	r0, [r7, #4]
 355 0200 FFF7FEFF 		bl	HAL_RTC_MspDeInit
 350:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   
 351:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_RESET; 
 356              		.loc 1 351 0
 357 0204 7B68     		ldr	r3, [r7, #4]
 358 0206 0022     		movs	r2, #0
 359 0208 5A77     		strb	r2, [r3, #29]
 352:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** 
 353:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   /* Release Lock */
 354:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);
 360              		.loc 1 354 0
 361 020a 7B68     		ldr	r3, [r7, #4]
 362 020c 0022     		movs	r2, #0
 363 020e 1A77     		strb	r2, [r3, #28]
 355:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** 
 356:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   return HAL_OK;
 364              		.loc 1 356 0
 365 0210 0023     		movs	r3, #0
 366              	.L8:
 357:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** }
 367              		.loc 1 357 0
 368 0212 1846     		mov	r0, r3
 369 0214 1037     		adds	r7, r7, #16
 370 0216 BD46     		mov	sp, r7
 371              		@ sp needed
 372 0218 80BD     		pop	{r7, pc}
 373              		.cfi_endproc
 374              	.LFE56:
 376 021a 00BF     		.align	2
 377              		.weak	HAL_RTC_MspInit
 378              		.thumb
 379              		.thumb_func
 381              	HAL_RTC_MspInit:
 382              	.LFB57:
 358:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** 
 359:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** /**
 360:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @brief  Initializes the RTC MSP.
 361:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @param  hrtc: RTC handle  
 362:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @retval None
 363:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   */
 364:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** __weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
 365:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** {
 383              		.loc 1 365 0
 384              		.cfi_startproc
 385              		@ args = 0, pretend = 0, frame = 8
 386              		@ frame_needed = 1, uses_anonymous_args = 0
 387              		@ link register save eliminated.
 388 021c 80B4     		push	{r7}
 389              		.cfi_def_cfa_offset 4
 390              		.cfi_offset 7, -4
 391 021e 83B0     		sub	sp, sp, #12
 392              		.cfi_def_cfa_offset 16
 393 0220 00AF     		add	r7, sp, #0
 394              		.cfi_def_cfa_register 7
 395 0222 7860     		str	r0, [r7, #4]
 366:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 367:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****             the HAL_RTC_MspInit could be implenetd in the user file
 368:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****    */ 
 369:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** }
 396              		.loc 1 369 0
 397 0224 0C37     		adds	r7, r7, #12
 398 0226 BD46     		mov	sp, r7
 399              		@ sp needed
 400 0228 5DF8047B 		ldr	r7, [sp], #4
 401 022c 7047     		bx	lr
 402              		.cfi_endproc
 403              	.LFE57:
 405 022e 00BF     		.align	2
 406              		.weak	HAL_RTC_MspDeInit
 407              		.thumb
 408              		.thumb_func
 410              	HAL_RTC_MspDeInit:
 411              	.LFB58:
 370:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** 
 371:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** /**
 372:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @brief  DeInitializes the RTC MSP.
 373:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @param  hrtc: RTC handle 
 374:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @retval None
 375:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   */
 376:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** __weak void HAL_RTC_MspDeInit(RTC_HandleTypeDef* hrtc)
 377:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** {
 412              		.loc 1 377 0
 413              		.cfi_startproc
 414              		@ args = 0, pretend = 0, frame = 8
 415              		@ frame_needed = 1, uses_anonymous_args = 0
 416              		@ link register save eliminated.
 417 0230 80B4     		push	{r7}
 418              		.cfi_def_cfa_offset 4
 419              		.cfi_offset 7, -4
 420 0232 83B0     		sub	sp, sp, #12
 421              		.cfi_def_cfa_offset 16
 422 0234 00AF     		add	r7, sp, #0
 423              		.cfi_def_cfa_register 7
 424 0236 7860     		str	r0, [r7, #4]
 378:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 379:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****             the HAL_RTC_MspDeInit could be implenetd in the user file
 380:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****    */ 
 381:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** }
 425              		.loc 1 381 0
 426 0238 0C37     		adds	r7, r7, #12
 427 023a BD46     		mov	sp, r7
 428              		@ sp needed
 429 023c 5DF8047B 		ldr	r7, [sp], #4
 430 0240 7047     		bx	lr
 431              		.cfi_endproc
 432              	.LFE58:
 434 0242 00BF     		.align	2
 435              		.global	HAL_RTC_SetTime
 436              		.thumb
 437              		.thumb_func
 439              	HAL_RTC_SetTime:
 440              	.LFB59:
 382:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** 
 383:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** /**
 384:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @}
 385:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   */
 386:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** 
 387:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** /** @defgroup RTC_Group2 RTC Time and Date functions
 388:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****  *  @brief   RTC Time and Date functions
 389:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****  *
 390:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** @verbatim   
 391:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****  ===============================================================================
 392:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****                  ##### RTC Time and Date functions #####
 393:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****  ===============================================================================  
 394:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****  
 395:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****  [..] This section provide functions allowing to configure Time and Date features
 396:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** 
 397:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** @endverbatim
 398:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @{
 399:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   */
 400:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** 
 401:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** /**
 402:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @brief  Sets RTC current time.
 403:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @param  hrtc: RTC handle
 404:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @param  sTime: Pointer to Time structure
 405:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @param  Format: Specifies the format of the entered parameters.
 406:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   *          This parameter can be one of the following values:
 407:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   *            @arg Format_BIN: Binary data format 
 408:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   *            @arg Format_BCD: BCD data format
 409:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @retval HAL status
 410:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   */
 411:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
 412:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** {
 441              		.loc 1 412 0
 442              		.cfi_startproc
 443              		@ args = 0, pretend = 0, frame = 24
 444              		@ frame_needed = 1, uses_anonymous_args = 0
 445 0244 90B5     		push	{r4, r7, lr}
 446              		.cfi_def_cfa_offset 12
 447              		.cfi_offset 4, -12
 448              		.cfi_offset 7, -8
 449              		.cfi_offset 14, -4
 450 0246 87B0     		sub	sp, sp, #28
 451              		.cfi_def_cfa_offset 40
 452 0248 00AF     		add	r7, sp, #0
 453              		.cfi_def_cfa_register 7
 454 024a F860     		str	r0, [r7, #12]
 455 024c B960     		str	r1, [r7, #8]
 456 024e 7A60     		str	r2, [r7, #4]
 413:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   uint32_t tmpreg = 0;
 457              		.loc 1 413 0
 458 0250 0023     		movs	r3, #0
 459 0252 7B61     		str	r3, [r7, #20]
 414:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   
 415:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****  /* Check the parameters */
 416:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
 417:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 418:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
 419:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   
 420:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   /* Process Locked */ 
 421:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
 460              		.loc 1 421 0
 461 0254 FB68     		ldr	r3, [r7, #12]
 462 0256 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 463 0258 012B     		cmp	r3, #1
 464 025a 01D1     		bne	.L15
 465              		.loc 1 421 0 is_stmt 0 discriminator 1
 466 025c 0223     		movs	r3, #2
 467 025e ABE0     		b	.L16
 468              	.L15:
 469              		.loc 1 421 0 discriminator 2
 470 0260 FB68     		ldr	r3, [r7, #12]
 471 0262 0122     		movs	r2, #1
 472 0264 1A77     		strb	r2, [r3, #28]
 422:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   
 423:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 473              		.loc 1 423 0 is_stmt 1 discriminator 2
 474 0266 FB68     		ldr	r3, [r7, #12]
 475 0268 0222     		movs	r2, #2
 476 026a 5A77     		strb	r2, [r3, #29]
 424:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   
 425:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   if(Format == FORMAT_BIN)
 477              		.loc 1 425 0 discriminator 2
 478 026c 7B68     		ldr	r3, [r7, #4]
 479 026e 002B     		cmp	r3, #0
 480 0270 26D1     		bne	.L17
 426:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   {
 427:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 481              		.loc 1 427 0
 482 0272 FB68     		ldr	r3, [r7, #12]
 483 0274 1B68     		ldr	r3, [r3]
 484 0276 9B68     		ldr	r3, [r3, #8]
 485 0278 03F04003 		and	r3, r3, #64
 486 027c 002B     		cmp	r3, #0
 487 027e 02D1     		bne	.L18
 428:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     {
 429:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR12(sTime->Hours));
 430:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 431:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     } 
 432:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     else
 433:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     {
 434:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       sTime->TimeFormat = 0x00;
 488              		.loc 1 434 0
 489 0280 BB68     		ldr	r3, [r7, #8]
 490 0282 0022     		movs	r2, #0
 491 0284 DA70     		strb	r2, [r3, #3]
 492              	.L18:
 435:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(sTime->Hours));
 436:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     }
 437:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(sTime->Minutes));
 438:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(sTime->Seconds));
 439:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     
 440:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 493              		.loc 1 440 0 discriminator 1
 494 0286 BB68     		ldr	r3, [r7, #8]
 495 0288 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 496 028a 1846     		mov	r0, r3
 497 028c FFF7FEFF 		bl	RTC_ByteToBcd2
 498 0290 0346     		mov	r3, r0
 499 0292 1C04     		lsls	r4, r3, #16
 441:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****                         ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 500              		.loc 1 441 0 discriminator 1
 501 0294 BB68     		ldr	r3, [r7, #8]
 502 0296 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 503 0298 1846     		mov	r0, r3
 504 029a FFF7FEFF 		bl	RTC_ByteToBcd2
 505 029e 0346     		mov	r3, r0
 506 02a0 1B02     		lsls	r3, r3, #8
 440:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****                         ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 507              		.loc 1 440 0 discriminator 1
 508 02a2 1C43     		orrs	r4, r4, r3
 442:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****                         ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 509              		.loc 1 442 0 discriminator 1
 510 02a4 BB68     		ldr	r3, [r7, #8]
 511 02a6 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 512 02a8 1846     		mov	r0, r3
 513 02aa FFF7FEFF 		bl	RTC_ByteToBcd2
 514 02ae 0346     		mov	r3, r0
 441:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****                         ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 515              		.loc 1 441 0 discriminator 1
 516 02b0 44EA0302 		orr	r2, r4, r3
 443:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****                         (((uint32_t)sTime->TimeFormat) << 16));  
 517              		.loc 1 443 0 discriminator 1
 518 02b4 BB68     		ldr	r3, [r7, #8]
 519 02b6 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 520 02b8 1B04     		lsls	r3, r3, #16
 440:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****                         ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 521              		.loc 1 440 0 discriminator 1
 522 02ba 1343     		orrs	r3, r3, r2
 523 02bc 7B61     		str	r3, [r7, #20]
 524 02be 20E0     		b	.L19
 525              	.L17:
 444:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   }
 445:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   else
 446:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   {
 447:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 526              		.loc 1 447 0
 527 02c0 FB68     		ldr	r3, [r7, #12]
 528 02c2 1B68     		ldr	r3, [r3]
 529 02c4 9B68     		ldr	r3, [r3, #8]
 530 02c6 03F04003 		and	r3, r3, #64
 531 02ca 002B     		cmp	r3, #0
 532 02cc 07D0     		beq	.L20
 448:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     {
 449:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       tmpreg = RTC_Bcd2ToByte(sTime->Hours);
 533              		.loc 1 449 0
 534 02ce BB68     		ldr	r3, [r7, #8]
 535 02d0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 536 02d2 1846     		mov	r0, r3
 537 02d4 FFF7FEFF 		bl	RTC_Bcd2ToByte
 538 02d8 0346     		mov	r3, r0
 539 02da 7B61     		str	r3, [r7, #20]
 540 02dc 02E0     		b	.L21
 541              	.L20:
 450:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
 451:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat)); 
 452:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     } 
 453:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     else
 454:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     {
 455:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       sTime->TimeFormat = 0x00;
 542              		.loc 1 455 0
 543 02de BB68     		ldr	r3, [r7, #8]
 544 02e0 0022     		movs	r2, #0
 545 02e2 DA70     		strb	r2, [r3, #3]
 546              	.L21:
 456:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 457:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     }
 458:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 459:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 460:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 547              		.loc 1 460 0
 548 02e4 BB68     		ldr	r3, [r7, #8]
 549 02e6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 550 02e8 1A04     		lsls	r2, r3, #16
 461:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****               ((uint32_t)(sTime->Minutes) << 8) | \
 551              		.loc 1 461 0
 552 02ea BB68     		ldr	r3, [r7, #8]
 553 02ec 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 554 02ee 1B02     		lsls	r3, r3, #8
 460:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****               ((uint32_t)(sTime->Minutes) << 8) | \
 555              		.loc 1 460 0
 556 02f0 1A43     		orrs	r2, r2, r3
 462:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****               ((uint32_t)sTime->Seconds) | \
 557              		.loc 1 462 0
 558 02f2 BB68     		ldr	r3, [r7, #8]
 559 02f4 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 461:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****               ((uint32_t)(sTime->Minutes) << 8) | \
 560              		.loc 1 461 0
 561 02f6 1A43     		orrs	r2, r2, r3
 463:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****               ((uint32_t)(sTime->TimeFormat) << 16));   
 562              		.loc 1 463 0
 563 02f8 BB68     		ldr	r3, [r7, #8]
 564 02fa DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 565 02fc 1B04     		lsls	r3, r3, #16
 460:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****               ((uint32_t)(sTime->Minutes) << 8) | \
 566              		.loc 1 460 0
 567 02fe 1343     		orrs	r3, r3, r2
 568 0300 7B61     		str	r3, [r7, #20]
 569              	.L19:
 464:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   }
 465:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   
 466:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
 467:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 570              		.loc 1 467 0
 571 0302 FB68     		ldr	r3, [r7, #12]
 572 0304 1B68     		ldr	r3, [r3]
 573 0306 CA22     		movs	r2, #202
 574 0308 5A62     		str	r2, [r3, #36]
 575 030a FB68     		ldr	r3, [r7, #12]
 576 030c 1B68     		ldr	r3, [r3]
 577 030e 5322     		movs	r2, #83
 578 0310 5A62     		str	r2, [r3, #36]
 468:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   
 469:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   /* Set Initialization mode */
 470:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   if(RTC_EnterInitMode(hrtc) != HAL_OK)
 579              		.loc 1 470 0
 580 0312 F868     		ldr	r0, [r7, #12]
 581 0314 FFF7FEFF 		bl	RTC_EnterInitMode
 582 0318 0346     		mov	r3, r0
 583 031a 002B     		cmp	r3, #0
 584 031c 0BD0     		beq	.L22
 471:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   {
 472:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     /* Enable the write protection for RTC registers */
 473:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 585              		.loc 1 473 0
 586 031e FB68     		ldr	r3, [r7, #12]
 587 0320 1B68     		ldr	r3, [r3]
 588 0322 FF22     		movs	r2, #255
 589 0324 5A62     		str	r2, [r3, #36]
 474:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     
 475:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     /* Set RTC state */
 476:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_ERROR;
 590              		.loc 1 476 0
 591 0326 FB68     		ldr	r3, [r7, #12]
 592 0328 0422     		movs	r2, #4
 593 032a 5A77     		strb	r2, [r3, #29]
 477:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     
 478:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     /* Process Unlocked */ 
 479:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     __HAL_UNLOCK(hrtc);
 594              		.loc 1 479 0
 595 032c FB68     		ldr	r3, [r7, #12]
 596 032e 0022     		movs	r2, #0
 597 0330 1A77     		strb	r2, [r3, #28]
 480:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     
 481:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     return HAL_ERROR;
 598              		.loc 1 481 0
 599 0332 0123     		movs	r3, #1
 600 0334 40E0     		b	.L16
 601              	.L22:
 482:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   } 
 483:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   else
 484:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   {
 485:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     /* Set the RTC_TR register */
 486:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 602              		.loc 1 486 0
 603 0336 FB68     		ldr	r3, [r7, #12]
 604 0338 1A68     		ldr	r2, [r3]
 605 033a 7B69     		ldr	r3, [r7, #20]
 606 033c 03F07F33 		and	r3, r3, #2139062143
 607 0340 23F0FE43 		bic	r3, r3, #2130706432
 608 0344 1360     		str	r3, [r2]
 487:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****      
 488:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     /* Clear the bits to be configured */
 489:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 609              		.loc 1 489 0
 610 0346 FB68     		ldr	r3, [r7, #12]
 611 0348 1B68     		ldr	r3, [r3]
 612 034a FA68     		ldr	r2, [r7, #12]
 613 034c 1268     		ldr	r2, [r2]
 614 034e 9268     		ldr	r2, [r2, #8]
 615 0350 22F48022 		bic	r2, r2, #262144
 616 0354 9A60     		str	r2, [r3, #8]
 490:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     
 491:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     /* Configure the RTC_CR register */
 492:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 617              		.loc 1 492 0
 618 0356 FB68     		ldr	r3, [r7, #12]
 619 0358 1B68     		ldr	r3, [r3]
 620 035a FA68     		ldr	r2, [r7, #12]
 621 035c 1268     		ldr	r2, [r2]
 622 035e 9168     		ldr	r1, [r2, #8]
 623 0360 BA68     		ldr	r2, [r7, #8]
 624 0362 5068     		ldr	r0, [r2, #4]
 625 0364 BA68     		ldr	r2, [r7, #8]
 626 0366 9268     		ldr	r2, [r2, #8]
 627 0368 0243     		orrs	r2, r2, r0
 628 036a 0A43     		orrs	r2, r2, r1
 629 036c 9A60     		str	r2, [r3, #8]
 493:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     
 494:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     /* Exit Initialization mode */
 495:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;  
 630              		.loc 1 495 0
 631 036e FB68     		ldr	r3, [r7, #12]
 632 0370 1B68     		ldr	r3, [r3]
 633 0372 FA68     		ldr	r2, [r7, #12]
 634 0374 1268     		ldr	r2, [r2]
 635 0376 D268     		ldr	r2, [r2, #12]
 636 0378 22F08002 		bic	r2, r2, #128
 637 037c DA60     		str	r2, [r3, #12]
 496:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     
 497:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 638              		.loc 1 497 0
 639 037e F868     		ldr	r0, [r7, #12]
 640 0380 FFF7FEFF 		bl	HAL_RTC_WaitForSynchro
 641 0384 0346     		mov	r3, r0
 642 0386 002B     		cmp	r3, #0
 643 0388 0BD0     		beq	.L23
 498:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     {
 499:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       /* Enable the write protection for RTC registers */
 500:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 644              		.loc 1 500 0
 645 038a FB68     		ldr	r3, [r7, #12]
 646 038c 1B68     		ldr	r3, [r3]
 647 038e FF22     		movs	r2, #255
 648 0390 5A62     		str	r2, [r3, #36]
 501:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****         
 502:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       hrtc->State = HAL_RTC_STATE_ERROR;
 649              		.loc 1 502 0
 650 0392 FB68     		ldr	r3, [r7, #12]
 651 0394 0422     		movs	r2, #4
 652 0396 5A77     		strb	r2, [r3, #29]
 503:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****         
 504:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       /* Process Unlocked */ 
 505:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       __HAL_UNLOCK(hrtc);
 653              		.loc 1 505 0
 654 0398 FB68     		ldr	r3, [r7, #12]
 655 039a 0022     		movs	r2, #0
 656 039c 1A77     		strb	r2, [r3, #28]
 506:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****         
 507:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       return HAL_ERROR;
 657              		.loc 1 507 0
 658 039e 0123     		movs	r3, #1
 659 03a0 0AE0     		b	.L16
 660              	.L23:
 508:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     }
 509:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     
 510:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     /* Enable the write protection for RTC registers */
 511:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 661              		.loc 1 511 0
 662 03a2 FB68     		ldr	r3, [r7, #12]
 663 03a4 1B68     		ldr	r3, [r3]
 664 03a6 FF22     		movs	r2, #255
 665 03a8 5A62     		str	r2, [r3, #36]
 512:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     
 513:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****    hrtc->State = HAL_RTC_STATE_READY;
 666              		.loc 1 513 0
 667 03aa FB68     		ldr	r3, [r7, #12]
 668 03ac 0122     		movs	r2, #1
 669 03ae 5A77     		strb	r2, [r3, #29]
 514:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   
 515:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****    __HAL_UNLOCK(hrtc); 
 670              		.loc 1 515 0
 671 03b0 FB68     		ldr	r3, [r7, #12]
 672 03b2 0022     		movs	r2, #0
 673 03b4 1A77     		strb	r2, [r3, #28]
 516:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****      
 517:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****    return HAL_OK;
 674              		.loc 1 517 0
 675 03b6 0023     		movs	r3, #0
 676              	.L16:
 518:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   }
 519:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** }
 677              		.loc 1 519 0
 678 03b8 1846     		mov	r0, r3
 679 03ba 1C37     		adds	r7, r7, #28
 680 03bc BD46     		mov	sp, r7
 681              		@ sp needed
 682 03be 90BD     		pop	{r4, r7, pc}
 683              		.cfi_endproc
 684              	.LFE59:
 686              		.align	2
 687              		.global	HAL_RTC_GetTime
 688              		.thumb
 689              		.thumb_func
 691              	HAL_RTC_GetTime:
 692              	.LFB60:
 520:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** 
 521:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** /**
 522:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @brief  Gets RTC current time.
 523:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @param  hrtc: RTC handle
 524:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @param  sTime: Pointer to Time structure
 525:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @param  Format: Specifies the format of the entered parameters.
 526:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   *          This parameter can be one of the following values:
 527:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   *            @arg Format_BIN: Binary data format 
 528:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   *            @arg Format_BCD: BCD data format
 529:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @note   Call HAL_RTC_GetDate() after HAL_RTC_GetTime() to unlock the values 
 530:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   *         in the higher-order calendar shadow registers.
 531:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @retval HAL status
 532:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   */
 533:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
 534:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** {
 693              		.loc 1 534 0
 694              		.cfi_startproc
 695              		@ args = 0, pretend = 0, frame = 24
 696              		@ frame_needed = 1, uses_anonymous_args = 0
 697 03c0 80B5     		push	{r7, lr}
 698              		.cfi_def_cfa_offset 8
 699              		.cfi_offset 7, -8
 700              		.cfi_offset 14, -4
 701 03c2 86B0     		sub	sp, sp, #24
 702              		.cfi_def_cfa_offset 32
 703 03c4 00AF     		add	r7, sp, #0
 704              		.cfi_def_cfa_register 7
 705 03c6 F860     		str	r0, [r7, #12]
 706 03c8 B960     		str	r1, [r7, #8]
 707 03ca 7A60     		str	r2, [r7, #4]
 535:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   uint32_t tmpreg = 0;
 708              		.loc 1 535 0
 709 03cc 0023     		movs	r3, #0
 710 03ce 7B61     		str	r3, [r7, #20]
 536:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** 
 537:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   /* Check the parameters */
 538:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
 539:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   
 540:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   /* Get the TR register */
 541:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 711              		.loc 1 541 0
 712 03d0 FB68     		ldr	r3, [r7, #12]
 713 03d2 1B68     		ldr	r3, [r3]
 714 03d4 1B68     		ldr	r3, [r3]
 715 03d6 03F07F33 		and	r3, r3, #2139062143
 716 03da 23F0FE43 		bic	r3, r3, #2130706432
 717 03de 7B61     		str	r3, [r7, #20]
 542:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   
 543:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   /* Fill the structure fields with the read parameters */
 544:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 718              		.loc 1 544 0
 719 03e0 7B69     		ldr	r3, [r7, #20]
 720 03e2 03F47C13 		and	r3, r3, #4128768
 721 03e6 1B0C     		lsrs	r3, r3, #16
 722 03e8 DAB2     		uxtb	r2, r3
 723 03ea BB68     		ldr	r3, [r7, #8]
 724 03ec 1A70     		strb	r2, [r3]
 545:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 725              		.loc 1 545 0
 726 03ee 7B69     		ldr	r3, [r7, #20]
 727 03f0 03F4FE43 		and	r3, r3, #32512
 728 03f4 1B0A     		lsrs	r3, r3, #8
 729 03f6 DAB2     		uxtb	r2, r3
 730 03f8 BB68     		ldr	r3, [r7, #8]
 731 03fa 5A70     		strb	r2, [r3, #1]
 546:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 732              		.loc 1 546 0
 733 03fc 7B69     		ldr	r3, [r7, #20]
 734 03fe DBB2     		uxtb	r3, r3
 735 0400 03F07F03 		and	r3, r3, #127
 736 0404 DAB2     		uxtb	r2, r3
 737 0406 BB68     		ldr	r3, [r7, #8]
 738 0408 9A70     		strb	r2, [r3, #2]
 547:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 739              		.loc 1 547 0
 740 040a 7B69     		ldr	r3, [r7, #20]
 741 040c 03F48003 		and	r3, r3, #4194304
 742 0410 1B0C     		lsrs	r3, r3, #16
 743 0412 DAB2     		uxtb	r2, r3
 744 0414 BB68     		ldr	r3, [r7, #8]
 745 0416 DA70     		strb	r2, [r3, #3]
 548:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   
 549:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   /* Check the input parameters format */
 550:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   if(Format == FORMAT_BIN)
 746              		.loc 1 550 0
 747 0418 7B68     		ldr	r3, [r7, #4]
 748 041a 002B     		cmp	r3, #0
 749 041c 1AD1     		bne	.L25
 551:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   {
 552:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     /* Convert the time structure parameters to Binary format */
 553:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 750              		.loc 1 553 0
 751 041e BB68     		ldr	r3, [r7, #8]
 752 0420 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 753 0422 1846     		mov	r0, r3
 754 0424 FFF7FEFF 		bl	RTC_Bcd2ToByte
 755 0428 0346     		mov	r3, r0
 756 042a 1A46     		mov	r2, r3
 757 042c BB68     		ldr	r3, [r7, #8]
 758 042e 1A70     		strb	r2, [r3]
 554:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 759              		.loc 1 554 0
 760 0430 BB68     		ldr	r3, [r7, #8]
 761 0432 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 762 0434 1846     		mov	r0, r3
 763 0436 FFF7FEFF 		bl	RTC_Bcd2ToByte
 764 043a 0346     		mov	r3, r0
 765 043c 1A46     		mov	r2, r3
 766 043e BB68     		ldr	r3, [r7, #8]
 767 0440 5A70     		strb	r2, [r3, #1]
 555:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 768              		.loc 1 555 0
 769 0442 BB68     		ldr	r3, [r7, #8]
 770 0444 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 771 0446 1846     		mov	r0, r3
 772 0448 FFF7FEFF 		bl	RTC_Bcd2ToByte
 773 044c 0346     		mov	r3, r0
 774 044e 1A46     		mov	r2, r3
 775 0450 BB68     		ldr	r3, [r7, #8]
 776 0452 9A70     		strb	r2, [r3, #2]
 777              	.L25:
 556:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   }
 557:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   
 558:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   return HAL_OK;
 778              		.loc 1 558 0
 779 0454 0023     		movs	r3, #0
 559:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** }
 780              		.loc 1 559 0
 781 0456 1846     		mov	r0, r3
 782 0458 1837     		adds	r7, r7, #24
 783 045a BD46     		mov	sp, r7
 784              		@ sp needed
 785 045c 80BD     		pop	{r7, pc}
 786              		.cfi_endproc
 787              	.LFE60:
 789 045e 00BF     		.align	2
 790              		.global	HAL_RTC_SetDate
 791              		.thumb
 792              		.thumb_func
 794              	HAL_RTC_SetDate:
 795              	.LFB61:
 560:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** 
 561:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** /**
 562:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @brief  Sets RTC current date.
 563:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @param  hrtc: RTC handle
 564:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @param  sDate: Pointer to date structure
 565:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @param  Format: specifies the format of the entered parameters.
 566:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   *          This parameter can be one of the following values:
 567:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   *            @arg Format_BIN: Binary data format 
 568:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   *            @arg Format_BCD: BCD data format
 569:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @retval HAL status
 570:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   */
 571:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
 572:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** {
 796              		.loc 1 572 0
 797              		.cfi_startproc
 798              		@ args = 0, pretend = 0, frame = 24
 799              		@ frame_needed = 1, uses_anonymous_args = 0
 800 0460 90B5     		push	{r4, r7, lr}
 801              		.cfi_def_cfa_offset 12
 802              		.cfi_offset 4, -12
 803              		.cfi_offset 7, -8
 804              		.cfi_offset 14, -4
 805 0462 87B0     		sub	sp, sp, #28
 806              		.cfi_def_cfa_offset 40
 807 0464 00AF     		add	r7, sp, #0
 808              		.cfi_def_cfa_register 7
 809 0466 F860     		str	r0, [r7, #12]
 810 0468 B960     		str	r1, [r7, #8]
 811 046a 7A60     		str	r2, [r7, #4]
 573:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   uint32_t datetmpreg = 0;
 812              		.loc 1 573 0
 813 046c 0023     		movs	r3, #0
 814 046e 7B61     		str	r3, [r7, #20]
 574:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   
 575:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****  /* Check the parameters */
 576:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
 577:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   
 578:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****  /* Process Locked */ 
 579:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****  __HAL_LOCK(hrtc);
 815              		.loc 1 579 0
 816 0470 FB68     		ldr	r3, [r7, #12]
 817 0472 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 818 0474 012B     		cmp	r3, #1
 819 0476 01D1     		bne	.L28
 820              		.loc 1 579 0 is_stmt 0 discriminator 1
 821 0478 0223     		movs	r3, #2
 822 047a 9BE0     		b	.L29
 823              	.L28:
 824              		.loc 1 579 0 discriminator 2
 825 047c FB68     		ldr	r3, [r7, #12]
 826 047e 0122     		movs	r2, #1
 827 0480 1A77     		strb	r2, [r3, #28]
 580:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   
 581:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY; 
 828              		.loc 1 581 0 is_stmt 1 discriminator 2
 829 0482 FB68     		ldr	r3, [r7, #12]
 830 0484 0222     		movs	r2, #2
 831 0486 5A77     		strb	r2, [r3, #29]
 582:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   
 583:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   if((Format == FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 832              		.loc 1 583 0 discriminator 2
 833 0488 7B68     		ldr	r3, [r7, #4]
 834 048a 002B     		cmp	r3, #0
 835 048c 0ED1     		bne	.L30
 836              		.loc 1 583 0 is_stmt 0 discriminator 1
 837 048e BB68     		ldr	r3, [r7, #8]
 838 0490 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 839 0492 03F01003 		and	r3, r3, #16
 840 0496 002B     		cmp	r3, #0
 841 0498 08D0     		beq	.L30
 584:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   {
 585:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10)) + (uint8_t)0x0A);
 842              		.loc 1 585 0 is_stmt 1
 843 049a BB68     		ldr	r3, [r7, #8]
 844 049c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 845 049e 23F01003 		bic	r3, r3, #16
 846 04a2 DBB2     		uxtb	r3, r3
 847 04a4 0A33     		adds	r3, r3, #10
 848 04a6 DAB2     		uxtb	r2, r3
 849 04a8 BB68     		ldr	r3, [r7, #8]
 850 04aa 5A70     		strb	r2, [r3, #1]
 851              	.L30:
 586:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   }
 587:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   
 588:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 589:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   
 590:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   if(Format == FORMAT_BIN)
 852              		.loc 1 590 0
 853 04ac 7B68     		ldr	r3, [r7, #4]
 854 04ae 002B     		cmp	r3, #0
 855 04b0 1CD1     		bne	.L31
 591:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   {   
 592:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     assert_param(IS_RTC_YEAR(sDate->Year));
 593:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     assert_param(IS_RTC_MONTH(sDate->Month));
 594:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     assert_param(IS_RTC_DATE(sDate->Date)); 
 595:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     
 596:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 856              		.loc 1 596 0
 857 04b2 BB68     		ldr	r3, [r7, #8]
 858 04b4 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 859 04b6 1846     		mov	r0, r3
 860 04b8 FFF7FEFF 		bl	RTC_ByteToBcd2
 861 04bc 0346     		mov	r3, r0
 862 04be 1C04     		lsls	r4, r3, #16
 597:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 863              		.loc 1 597 0
 864 04c0 BB68     		ldr	r3, [r7, #8]
 865 04c2 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 866 04c4 1846     		mov	r0, r3
 867 04c6 FFF7FEFF 		bl	RTC_ByteToBcd2
 868 04ca 0346     		mov	r3, r0
 869 04cc 1B02     		lsls	r3, r3, #8
 596:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 870              		.loc 1 596 0
 871 04ce 1C43     		orrs	r4, r4, r3
 598:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 872              		.loc 1 598 0
 873 04d0 BB68     		ldr	r3, [r7, #8]
 874 04d2 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 875 04d4 1846     		mov	r0, r3
 876 04d6 FFF7FEFF 		bl	RTC_ByteToBcd2
 877 04da 0346     		mov	r3, r0
 597:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 878              		.loc 1 597 0
 879 04dc 44EA0302 		orr	r2, r4, r3
 599:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****                  ((uint32_t)sDate->WeekDay << 13));   
 880              		.loc 1 599 0
 881 04e0 BB68     		ldr	r3, [r7, #8]
 882 04e2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 883 04e4 5B03     		lsls	r3, r3, #13
 596:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 884              		.loc 1 596 0
 885 04e6 1343     		orrs	r3, r3, r2
 886 04e8 7B61     		str	r3, [r7, #20]
 887 04ea 1CE0     		b	.L32
 888              	.L31:
 600:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   }
 601:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   else
 602:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   {   
 603:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 604:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     datetmpreg = RTC_Bcd2ToByte(sDate->Month);
 889              		.loc 1 604 0
 890 04ec BB68     		ldr	r3, [r7, #8]
 891 04ee 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 892 04f0 1846     		mov	r0, r3
 893 04f2 FFF7FEFF 		bl	RTC_Bcd2ToByte
 894 04f6 0346     		mov	r3, r0
 895 04f8 7B61     		str	r3, [r7, #20]
 605:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     assert_param(IS_RTC_MONTH(datetmpreg));
 606:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     datetmpreg = RTC_Bcd2ToByte(sDate->Date);
 896              		.loc 1 606 0
 897 04fa BB68     		ldr	r3, [r7, #8]
 898 04fc 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 899 04fe 1846     		mov	r0, r3
 900 0500 FFF7FEFF 		bl	RTC_Bcd2ToByte
 901 0504 0346     		mov	r3, r0
 902 0506 7B61     		str	r3, [r7, #20]
 607:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     assert_param(IS_RTC_DATE(datetmpreg));
 608:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     
 609:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 903              		.loc 1 609 0
 904 0508 BB68     		ldr	r3, [r7, #8]
 905 050a DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 906 050c 1A04     		lsls	r2, r3, #16
 610:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****                   (((uint32_t)sDate->Month) << 8) | \
 907              		.loc 1 610 0
 908 050e BB68     		ldr	r3, [r7, #8]
 909 0510 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 910 0512 1B02     		lsls	r3, r3, #8
 609:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****                   (((uint32_t)sDate->Month) << 8) | \
 911              		.loc 1 609 0
 912 0514 1A43     		orrs	r2, r2, r3
 611:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****                   ((uint32_t)sDate->Date) | \
 913              		.loc 1 611 0
 914 0516 BB68     		ldr	r3, [r7, #8]
 915 0518 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 610:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****                   (((uint32_t)sDate->Month) << 8) | \
 916              		.loc 1 610 0
 917 051a 1A43     		orrs	r2, r2, r3
 612:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****                   (((uint32_t)sDate->WeekDay) << 13));  
 918              		.loc 1 612 0
 919 051c BB68     		ldr	r3, [r7, #8]
 920 051e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 921 0520 5B03     		lsls	r3, r3, #13
 609:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****                   (((uint32_t)sDate->Month) << 8) | \
 922              		.loc 1 609 0
 923 0522 1343     		orrs	r3, r3, r2
 924 0524 7B61     		str	r3, [r7, #20]
 925              	.L32:
 613:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   }
 614:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** 
 615:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
 616:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 926              		.loc 1 616 0
 927 0526 FB68     		ldr	r3, [r7, #12]
 928 0528 1B68     		ldr	r3, [r3]
 929 052a CA22     		movs	r2, #202
 930 052c 5A62     		str	r2, [r3, #36]
 931 052e FB68     		ldr	r3, [r7, #12]
 932 0530 1B68     		ldr	r3, [r3]
 933 0532 5322     		movs	r2, #83
 934 0534 5A62     		str	r2, [r3, #36]
 617:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   
 618:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   /* Set Initialization mode */
 619:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   if(RTC_EnterInitMode(hrtc) != HAL_OK)
 935              		.loc 1 619 0
 936 0536 F868     		ldr	r0, [r7, #12]
 937 0538 FFF7FEFF 		bl	RTC_EnterInitMode
 938 053c 0346     		mov	r3, r0
 939 053e 002B     		cmp	r3, #0
 940 0540 0BD0     		beq	.L33
 620:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   {
 621:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     /* Enable the write protection for RTC registers */
 622:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 941              		.loc 1 622 0
 942 0542 FB68     		ldr	r3, [r7, #12]
 943 0544 1B68     		ldr	r3, [r3]
 944 0546 FF22     		movs	r2, #255
 945 0548 5A62     		str	r2, [r3, #36]
 623:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     
 624:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     /* Set RTC state*/
 625:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_ERROR;
 946              		.loc 1 625 0
 947 054a FB68     		ldr	r3, [r7, #12]
 948 054c 0422     		movs	r2, #4
 949 054e 5A77     		strb	r2, [r3, #29]
 626:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     
 627:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     /* Process Unlocked */ 
 628:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     __HAL_UNLOCK(hrtc);
 950              		.loc 1 628 0
 951 0550 FB68     		ldr	r3, [r7, #12]
 952 0552 0022     		movs	r2, #0
 953 0554 1A77     		strb	r2, [r3, #28]
 629:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     
 630:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     return HAL_ERROR;
 954              		.loc 1 630 0
 955 0556 0123     		movs	r3, #1
 956 0558 2CE0     		b	.L29
 957              	.L33:
 631:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   } 
 632:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   else
 633:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   {
 634:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     /* Set the RTC_DR register */
 635:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 958              		.loc 1 635 0
 959 055a FB68     		ldr	r3, [r7, #12]
 960 055c 1A68     		ldr	r2, [r3]
 961 055e 7B69     		ldr	r3, [r7, #20]
 962 0560 23F07F43 		bic	r3, r3, #-16777216
 963 0564 23F0C003 		bic	r3, r3, #192
 964 0568 5360     		str	r3, [r2, #4]
 636:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     
 637:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     /* Exit Initialization mode */
 638:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;  
 965              		.loc 1 638 0
 966 056a FB68     		ldr	r3, [r7, #12]
 967 056c 1B68     		ldr	r3, [r3]
 968 056e FA68     		ldr	r2, [r7, #12]
 969 0570 1268     		ldr	r2, [r2]
 970 0572 D268     		ldr	r2, [r2, #12]
 971 0574 22F08002 		bic	r2, r2, #128
 972 0578 DA60     		str	r2, [r3, #12]
 639:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     
 640:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 973              		.loc 1 640 0
 974 057a F868     		ldr	r0, [r7, #12]
 975 057c FFF7FEFF 		bl	HAL_RTC_WaitForSynchro
 976 0580 0346     		mov	r3, r0
 977 0582 002B     		cmp	r3, #0
 978 0584 0BD0     		beq	.L34
 641:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     {   
 642:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       /* Enable the write protection for RTC registers */
 643:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 979              		.loc 1 643 0
 980 0586 FB68     		ldr	r3, [r7, #12]
 981 0588 1B68     		ldr	r3, [r3]
 982 058a FF22     		movs	r2, #255
 983 058c 5A62     		str	r2, [r3, #36]
 644:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****         
 645:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       hrtc->State = HAL_RTC_STATE_ERROR;
 984              		.loc 1 645 0
 985 058e FB68     		ldr	r3, [r7, #12]
 986 0590 0422     		movs	r2, #4
 987 0592 5A77     		strb	r2, [r3, #29]
 646:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****         
 647:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       /* Process Unlocked */ 
 648:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       __HAL_UNLOCK(hrtc);
 988              		.loc 1 648 0
 989 0594 FB68     		ldr	r3, [r7, #12]
 990 0596 0022     		movs	r2, #0
 991 0598 1A77     		strb	r2, [r3, #28]
 649:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****         
 650:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       return HAL_ERROR;
 992              		.loc 1 650 0
 993 059a 0123     		movs	r3, #1
 994 059c 0AE0     		b	.L29
 995              	.L34:
 651:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     }
 652:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     
 653:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     /* Enable the write protection for RTC registers */
 654:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 996              		.loc 1 654 0
 997 059e FB68     		ldr	r3, [r7, #12]
 998 05a0 1B68     		ldr	r3, [r3]
 999 05a2 FF22     		movs	r2, #255
 1000 05a4 5A62     		str	r2, [r3, #36]
 655:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     
 656:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_READY ;
 1001              		.loc 1 656 0
 1002 05a6 FB68     		ldr	r3, [r7, #12]
 1003 05a8 0122     		movs	r2, #1
 1004 05aa 5A77     		strb	r2, [r3, #29]
 657:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     
 658:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     /* Process Unlocked */ 
 659:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     __HAL_UNLOCK(hrtc);
 1005              		.loc 1 659 0
 1006 05ac FB68     		ldr	r3, [r7, #12]
 1007 05ae 0022     		movs	r2, #0
 1008 05b0 1A77     		strb	r2, [r3, #28]
 660:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     
 661:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     return HAL_OK;    
 1009              		.loc 1 661 0
 1010 05b2 0023     		movs	r3, #0
 1011              	.L29:
 662:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   }
 663:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** }
 1012              		.loc 1 663 0
 1013 05b4 1846     		mov	r0, r3
 1014 05b6 1C37     		adds	r7, r7, #28
 1015 05b8 BD46     		mov	sp, r7
 1016              		@ sp needed
 1017 05ba 90BD     		pop	{r4, r7, pc}
 1018              		.cfi_endproc
 1019              	.LFE61:
 1021              		.align	2
 1022              		.global	HAL_RTC_GetDate
 1023              		.thumb
 1024              		.thumb_func
 1026              	HAL_RTC_GetDate:
 1027              	.LFB62:
 664:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** 
 665:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** /**
 666:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @brief  Gets RTC current date.
 667:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @param  hrtc: RTC handle
 668:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @param  sDate: Pointer to Date structure
 669:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @param  Format: Specifies the format of the entered parameters.
 670:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   *          This parameter can be one of the following values:
 671:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   *            @arg Format_BIN :  Binary data format 
 672:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   *            @arg Format_BCD :  BCD data format
 673:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @retval HAL status
 674:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   */
 675:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
 676:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** {
 1028              		.loc 1 676 0
 1029              		.cfi_startproc
 1030              		@ args = 0, pretend = 0, frame = 24
 1031              		@ frame_needed = 1, uses_anonymous_args = 0
 1032 05bc 80B5     		push	{r7, lr}
 1033              		.cfi_def_cfa_offset 8
 1034              		.cfi_offset 7, -8
 1035              		.cfi_offset 14, -4
 1036 05be 86B0     		sub	sp, sp, #24
 1037              		.cfi_def_cfa_offset 32
 1038 05c0 00AF     		add	r7, sp, #0
 1039              		.cfi_def_cfa_register 7
 1040 05c2 F860     		str	r0, [r7, #12]
 1041 05c4 B960     		str	r1, [r7, #8]
 1042 05c6 7A60     		str	r2, [r7, #4]
 677:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   uint32_t datetmpreg = 0;
 1043              		.loc 1 677 0
 1044 05c8 0023     		movs	r3, #0
 1045 05ca 7B61     		str	r3, [r7, #20]
 678:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** 
 679:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   /* Check the parameters */
 680:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
 681:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****           
 682:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   /* Get the DR register */
 683:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 1046              		.loc 1 683 0
 1047 05cc FB68     		ldr	r3, [r7, #12]
 1048 05ce 1B68     		ldr	r3, [r3]
 1049 05d0 5B68     		ldr	r3, [r3, #4]
 1050 05d2 23F07F43 		bic	r3, r3, #-16777216
 1051 05d6 23F0C003 		bic	r3, r3, #192
 1052 05da 7B61     		str	r3, [r7, #20]
 684:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** 
 685:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   /* Fill the structure fields with the read parameters */
 686:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 1053              		.loc 1 686 0
 1054 05dc 7B69     		ldr	r3, [r7, #20]
 1055 05de 03F47F03 		and	r3, r3, #16711680
 1056 05e2 1B0C     		lsrs	r3, r3, #16
 1057 05e4 DAB2     		uxtb	r2, r3
 1058 05e6 BB68     		ldr	r3, [r7, #8]
 1059 05e8 DA70     		strb	r2, [r3, #3]
 687:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 1060              		.loc 1 687 0
 1061 05ea 7B69     		ldr	r3, [r7, #20]
 1062 05ec 03F4F853 		and	r3, r3, #7936
 1063 05f0 1B0A     		lsrs	r3, r3, #8
 1064 05f2 DAB2     		uxtb	r2, r3
 1065 05f4 BB68     		ldr	r3, [r7, #8]
 1066 05f6 5A70     		strb	r2, [r3, #1]
 688:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 1067              		.loc 1 688 0
 1068 05f8 7B69     		ldr	r3, [r7, #20]
 1069 05fa DBB2     		uxtb	r3, r3
 1070 05fc 03F03F03 		and	r3, r3, #63
 1071 0600 DAB2     		uxtb	r2, r3
 1072 0602 BB68     		ldr	r3, [r7, #8]
 1073 0604 9A70     		strb	r2, [r3, #2]
 689:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 1074              		.loc 1 689 0
 1075 0606 7B69     		ldr	r3, [r7, #20]
 1076 0608 03F46043 		and	r3, r3, #57344
 1077 060c 5B0B     		lsrs	r3, r3, #13
 1078 060e DAB2     		uxtb	r2, r3
 1079 0610 BB68     		ldr	r3, [r7, #8]
 1080 0612 1A70     		strb	r2, [r3]
 690:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** 
 691:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   /* Check the input parameters format */
 692:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   if(Format == FORMAT_BIN)
 1081              		.loc 1 692 0
 1082 0614 7B68     		ldr	r3, [r7, #4]
 1083 0616 002B     		cmp	r3, #0
 1084 0618 1AD1     		bne	.L36
 693:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   {    
 694:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     /* Convert the date structure parameters to Binary format */
 695:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 1085              		.loc 1 695 0
 1086 061a BB68     		ldr	r3, [r7, #8]
 1087 061c DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1088 061e 1846     		mov	r0, r3
 1089 0620 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1090 0624 0346     		mov	r3, r0
 1091 0626 1A46     		mov	r2, r3
 1092 0628 BB68     		ldr	r3, [r7, #8]
 1093 062a DA70     		strb	r2, [r3, #3]
 696:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 1094              		.loc 1 696 0
 1095 062c BB68     		ldr	r3, [r7, #8]
 1096 062e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1097 0630 1846     		mov	r0, r3
 1098 0632 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1099 0636 0346     		mov	r3, r0
 1100 0638 1A46     		mov	r2, r3
 1101 063a BB68     		ldr	r3, [r7, #8]
 1102 063c 5A70     		strb	r2, [r3, #1]
 697:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 1103              		.loc 1 697 0
 1104 063e BB68     		ldr	r3, [r7, #8]
 1105 0640 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1106 0642 1846     		mov	r0, r3
 1107 0644 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1108 0648 0346     		mov	r3, r0
 1109 064a 1A46     		mov	r2, r3
 1110 064c BB68     		ldr	r3, [r7, #8]
 1111 064e 9A70     		strb	r2, [r3, #2]
 1112              	.L36:
 698:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   }
 699:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   return HAL_OK;
 1113              		.loc 1 699 0
 1114 0650 0023     		movs	r3, #0
 700:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** }
 1115              		.loc 1 700 0
 1116 0652 1846     		mov	r0, r3
 1117 0654 1837     		adds	r7, r7, #24
 1118 0656 BD46     		mov	sp, r7
 1119              		@ sp needed
 1120 0658 80BD     		pop	{r7, pc}
 1121              		.cfi_endproc
 1122              	.LFE62:
 1124 065a 00BF     		.align	2
 1125              		.global	HAL_RTC_SetAlarm
 1126              		.thumb
 1127              		.thumb_func
 1129              	HAL_RTC_SetAlarm:
 1130              	.LFB63:
 701:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** 
 702:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** /**
 703:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @}
 704:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   */
 705:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** 
 706:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** /** @defgroup RTC_Group3 RTC Alarm functions
 707:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****  *  @brief   RTC Alarm functions
 708:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****  *
 709:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** @verbatim   
 710:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****  ===============================================================================
 711:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****                  ##### RTC Alarm functions #####
 712:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****  ===============================================================================  
 713:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****  
 714:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****  [..] This section provide functions allowing to configure Alarm feature
 715:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** 
 716:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** @endverbatim
 717:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @{
 718:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   */
 719:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** /**
 720:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @brief  Sets the specified RTC Alarm.
 721:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @param  hrtc: RTC handle
 722:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @param  sAlarm: Pointer to Alarm structure
 723:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @param  Format: Specifies the format of the entered parameters.
 724:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   *          This parameter can be one of the following values:
 725:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   *             @arg Format_BIN: Binary data format 
 726:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   *             @arg Format_BCD: BCD data format
 727:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @retval HAL status
 728:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   */
 729:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Form
 730:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** {
 1131              		.loc 1 730 0
 1132              		.cfi_startproc
 1133              		@ args = 0, pretend = 0, frame = 24
 1134              		@ frame_needed = 1, uses_anonymous_args = 0
 1135 065c 90B5     		push	{r4, r7, lr}
 1136              		.cfi_def_cfa_offset 12
 1137              		.cfi_offset 4, -12
 1138              		.cfi_offset 7, -8
 1139              		.cfi_offset 14, -4
 1140 065e 87B0     		sub	sp, sp, #28
 1141              		.cfi_def_cfa_offset 40
 1142 0660 00AF     		add	r7, sp, #0
 1143              		.cfi_def_cfa_register 7
 1144 0662 F860     		str	r0, [r7, #12]
 1145 0664 B960     		str	r1, [r7, #8]
 1146 0666 7A60     		str	r2, [r7, #4]
 731:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   uint32_t timeout = 0;
 1147              		.loc 1 731 0
 1148 0668 0023     		movs	r3, #0
 1149 066a 3B61     		str	r3, [r7, #16]
 732:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   uint32_t tmpreg = 0;
 1150              		.loc 1 732 0
 1151 066c 0023     		movs	r3, #0
 1152 066e 7B61     		str	r3, [r7, #20]
 733:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   
 734:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   /* Check the parameters */
 735:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
 736:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   assert_param(IS_ALARM(sAlarm->Alarm));
 737:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   assert_param(IS_ALARM_MASK(sAlarm->AlarmMask));
 738:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
 739:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** 
 740:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   /* Process Locked */ 
 741:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
 1153              		.loc 1 741 0
 1154 0670 FB68     		ldr	r3, [r7, #12]
 1155 0672 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 1156 0674 012B     		cmp	r3, #1
 1157 0676 01D1     		bne	.L39
 1158              		.loc 1 741 0 is_stmt 0 discriminator 1
 1159 0678 0223     		movs	r3, #2
 1160 067a 0EE1     		b	.L40
 1161              	.L39:
 1162              		.loc 1 741 0 discriminator 2
 1163 067c FB68     		ldr	r3, [r7, #12]
 1164 067e 0122     		movs	r2, #1
 1165 0680 1A77     		strb	r2, [r3, #28]
 742:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   
 743:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 1166              		.loc 1 743 0 is_stmt 1 discriminator 2
 1167 0682 FB68     		ldr	r3, [r7, #12]
 1168 0684 0222     		movs	r2, #2
 1169 0686 5A77     		strb	r2, [r3, #29]
 744:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   
 745:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   if(Format == FORMAT_BIN)
 1170              		.loc 1 745 0 discriminator 2
 1171 0688 7B68     		ldr	r3, [r7, #4]
 1172 068a 002B     		cmp	r3, #0
 1173 068c 36D1     		bne	.L41
 746:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   {
 747:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 1174              		.loc 1 747 0
 1175 068e FB68     		ldr	r3, [r7, #12]
 1176 0690 1B68     		ldr	r3, [r3]
 1177 0692 9B68     		ldr	r3, [r3, #8]
 1178 0694 03F04003 		and	r3, r3, #64
 1179 0698 002B     		cmp	r3, #0
 1180 069a 02D1     		bne	.L42
 748:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     {
 749:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
 750:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
 751:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     } 
 752:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     else
 753:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     {
 754:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       sAlarm->AlarmTime.TimeFormat = 0x00;
 1181              		.loc 1 754 0
 1182 069c BB68     		ldr	r3, [r7, #8]
 1183 069e 0022     		movs	r2, #0
 1184 06a0 DA70     		strb	r2, [r3, #3]
 1185              	.L42:
 755:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
 756:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     }
 757:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
 758:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));
 759:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     
 760:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 761:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     {
 762:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(sAlarm->AlarmDateWeekDay));
 763:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     }
 764:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     else
 765:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     {
 766:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
 767:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     }
 768:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     
 769:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 1186              		.loc 1 769 0
 1187 06a2 BB68     		ldr	r3, [r7, #8]
 1188 06a4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1189 06a6 1846     		mov	r0, r3
 1190 06a8 FFF7FEFF 		bl	RTC_ByteToBcd2
 1191 06ac 0346     		mov	r3, r0
 1192 06ae 1C04     		lsls	r4, r3, #16
 770:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 1193              		.loc 1 770 0
 1194 06b0 BB68     		ldr	r3, [r7, #8]
 1195 06b2 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1196 06b4 1846     		mov	r0, r3
 1197 06b6 FFF7FEFF 		bl	RTC_ByteToBcd2
 1198 06ba 0346     		mov	r3, r0
 1199 06bc 1B02     		lsls	r3, r3, #8
 769:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 1200              		.loc 1 769 0
 1201 06be 1C43     		orrs	r4, r4, r3
 771:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 1202              		.loc 1 771 0
 1203 06c0 BB68     		ldr	r3, [r7, #8]
 1204 06c2 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1205 06c4 1846     		mov	r0, r3
 1206 06c6 FFF7FEFF 		bl	RTC_ByteToBcd2
 1207 06ca 0346     		mov	r3, r0
 770:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 1208              		.loc 1 770 0
 1209 06cc 44EA0302 		orr	r2, r4, r3
 772:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 1210              		.loc 1 772 0
 1211 06d0 BB68     		ldr	r3, [r7, #8]
 1212 06d2 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1213 06d4 1B04     		lsls	r3, r3, #16
 771:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 1214              		.loc 1 771 0
 1215 06d6 42EA0304 		orr	r4, r2, r3
 773:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 1216              		.loc 1 773 0
 1217 06da BB68     		ldr	r3, [r7, #8]
 1218 06dc 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 1219 06de 1846     		mov	r0, r3
 1220 06e0 FFF7FEFF 		bl	RTC_ByteToBcd2
 1221 06e4 0346     		mov	r3, r0
 1222 06e6 1B06     		lsls	r3, r3, #24
 772:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 1223              		.loc 1 772 0
 1224 06e8 44EA0302 		orr	r2, r4, r3
 774:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 1225              		.loc 1 774 0
 1226 06ec BB68     		ldr	r3, [r7, #8]
 1227 06ee 1B69     		ldr	r3, [r3, #16]
 773:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 1228              		.loc 1 773 0
 1229 06f0 1A43     		orrs	r2, r2, r3
 775:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmMask)); 
 1230              		.loc 1 775 0
 1231 06f2 BB68     		ldr	r3, [r7, #8]
 1232 06f4 DB68     		ldr	r3, [r3, #12]
 769:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 1233              		.loc 1 769 0
 1234 06f6 1343     		orrs	r3, r3, r2
 1235 06f8 7B61     		str	r3, [r7, #20]
 1236 06fa 3DE0     		b	.L43
 1237              	.L41:
 776:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   }
 777:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   else
 778:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   {
 779:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 1238              		.loc 1 779 0
 1239 06fc FB68     		ldr	r3, [r7, #12]
 1240 06fe 1B68     		ldr	r3, [r3]
 1241 0700 9B68     		ldr	r3, [r3, #8]
 1242 0702 03F04003 		and	r3, r3, #64
 1243 0706 002B     		cmp	r3, #0
 1244 0708 07D0     		beq	.L44
 780:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     {
 781:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 1245              		.loc 1 781 0
 1246 070a BB68     		ldr	r3, [r7, #8]
 1247 070c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1248 070e 1846     		mov	r0, r3
 1249 0710 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1250 0714 0346     		mov	r3, r0
 1251 0716 7B61     		str	r3, [r7, #20]
 1252 0718 02E0     		b	.L45
 1253              	.L44:
 782:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
 783:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
 784:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     } 
 785:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     else
 786:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     {
 787:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       sAlarm->AlarmTime.TimeFormat = 0x00;
 1254              		.loc 1 787 0
 1255 071a BB68     		ldr	r3, [r7, #8]
 1256 071c 0022     		movs	r2, #0
 1257 071e DA70     		strb	r2, [r3, #3]
 1258              	.L45:
 788:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 789:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     }
 790:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     
 791:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
 792:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 793:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     
 794:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 1259              		.loc 1 794 0
 1260 0720 BB68     		ldr	r3, [r7, #8]
 1261 0722 1B69     		ldr	r3, [r3, #16]
 1262 0724 002B     		cmp	r3, #0
 1263 0726 07D1     		bne	.L46
 795:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     {
 796:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 1264              		.loc 1 796 0
 1265 0728 BB68     		ldr	r3, [r7, #8]
 1266 072a 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 1267 072c 1846     		mov	r0, r3
 1268 072e FFF7FEFF 		bl	RTC_Bcd2ToByte
 1269 0732 0346     		mov	r3, r0
 1270 0734 7B61     		str	r3, [r7, #20]
 1271 0736 06E0     		b	.L47
 1272              	.L46:
 797:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));    
 798:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     }
 799:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     else
 800:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     {
 801:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 1273              		.loc 1 801 0
 1274 0738 BB68     		ldr	r3, [r7, #8]
 1275 073a 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 1276 073c 1846     		mov	r0, r3
 1277 073e FFF7FEFF 		bl	RTC_Bcd2ToByte
 1278 0742 0346     		mov	r3, r0
 1279 0744 7B61     		str	r3, [r7, #20]
 1280              	.L47:
 802:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));      
 803:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     }  
 804:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     
 805:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 1281              		.loc 1 805 0
 1282 0746 BB68     		ldr	r3, [r7, #8]
 1283 0748 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1284 074a 1A04     		lsls	r2, r3, #16
 806:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 1285              		.loc 1 806 0
 1286 074c BB68     		ldr	r3, [r7, #8]
 1287 074e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1288 0750 1B02     		lsls	r3, r3, #8
 805:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 1289              		.loc 1 805 0
 1290 0752 1A43     		orrs	r2, r2, r3
 807:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****               ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 1291              		.loc 1 807 0
 1292 0754 BB68     		ldr	r3, [r7, #8]
 1293 0756 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 806:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 1294              		.loc 1 806 0
 1295 0758 1A43     		orrs	r2, r2, r3
 808:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 1296              		.loc 1 808 0
 1297 075a BB68     		ldr	r3, [r7, #8]
 1298 075c DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1299 075e 1B04     		lsls	r3, r3, #16
 807:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****               ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 1300              		.loc 1 807 0
 1301 0760 1A43     		orrs	r2, r2, r3
 809:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 1302              		.loc 1 809 0
 1303 0762 BB68     		ldr	r3, [r7, #8]
 1304 0764 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 1305 0766 1B06     		lsls	r3, r3, #24
 808:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 1306              		.loc 1 808 0
 1307 0768 1A43     		orrs	r2, r2, r3
 810:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 1308              		.loc 1 810 0
 1309 076a BB68     		ldr	r3, [r7, #8]
 1310 076c 1B69     		ldr	r3, [r3, #16]
 809:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 1311              		.loc 1 809 0
 1312 076e 1A43     		orrs	r2, r2, r3
 811:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmMask));   
 1313              		.loc 1 811 0
 1314 0770 BB68     		ldr	r3, [r7, #8]
 1315 0772 DB68     		ldr	r3, [r3, #12]
 805:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 1316              		.loc 1 805 0
 1317 0774 1343     		orrs	r3, r3, r2
 1318 0776 7B61     		str	r3, [r7, #20]
 1319              	.L43:
 812:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   }
 813:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** 
 814:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
 815:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 1320              		.loc 1 815 0
 1321 0778 FB68     		ldr	r3, [r7, #12]
 1322 077a 1B68     		ldr	r3, [r3]
 1323 077c CA22     		movs	r2, #202
 1324 077e 5A62     		str	r2, [r3, #36]
 1325 0780 FB68     		ldr	r3, [r7, #12]
 1326 0782 1B68     		ldr	r3, [r3]
 1327 0784 5322     		movs	r2, #83
 1328 0786 5A62     		str	r2, [r3, #36]
 816:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** 
 817:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   /* Configure the Alarm register */
 818:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   if(sAlarm->Alarm == RTC_ALARM_A)
 1329              		.loc 1 818 0
 1330 0788 BB68     		ldr	r3, [r7, #8]
 1331 078a 9B69     		ldr	r3, [r3, #24]
 1332 078c B3F5807F 		cmp	r3, #256
 1333 0790 3CD1     		bne	.L48
 819:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   {
 820:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     /* Disable the Alarm A interrupt */
 821:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     __HAL_RTC_ALARMA_DISABLE(hrtc);
 1334              		.loc 1 821 0
 1335 0792 FB68     		ldr	r3, [r7, #12]
 1336 0794 1B68     		ldr	r3, [r3]
 1337 0796 FA68     		ldr	r2, [r7, #12]
 1338 0798 1268     		ldr	r2, [r2]
 1339 079a 9268     		ldr	r2, [r2, #8]
 1340 079c 22F48072 		bic	r2, r2, #256
 1341 07a0 9A60     		str	r2, [r3, #8]
 822:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     
 823:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     /* In case of interrupt mode is used, the interrupt source must disabled */ 
 824:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 1342              		.loc 1 824 0
 1343 07a2 FB68     		ldr	r3, [r7, #12]
 1344 07a4 1B68     		ldr	r3, [r3]
 1345 07a6 FA68     		ldr	r2, [r7, #12]
 1346 07a8 1268     		ldr	r2, [r2]
 1347 07aa 9268     		ldr	r2, [r2, #8]
 1348 07ac 22F48052 		bic	r2, r2, #4096
 1349 07b0 9A60     		str	r2, [r3, #8]
 825:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****          
 826:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     timeout = HAL_GetTick() + RTC_TIMEOUT_VALUE;
 1350              		.loc 1 826 0
 1351 07b2 FFF7FEFF 		bl	HAL_GetTick
 1352 07b6 0346     		mov	r3, r0
 1353 07b8 03F57A73 		add	r3, r3, #1000
 1354 07bc 3B61     		str	r3, [r7, #16]
 827:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
 828:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 1355              		.loc 1 828 0
 1356 07be 11E0     		b	.L49
 1357              	.L50:
 829:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     {
 830:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       if(HAL_GetTick() >= timeout)
 1358              		.loc 1 830 0
 1359 07c0 FFF7FEFF 		bl	HAL_GetTick
 1360 07c4 0246     		mov	r2, r0
 1361 07c6 3B69     		ldr	r3, [r7, #16]
 1362 07c8 9A42     		cmp	r2, r3
 1363 07ca 0BD3     		bcc	.L49
 831:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       {
 832:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
 833:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 1364              		.loc 1 833 0
 1365 07cc FB68     		ldr	r3, [r7, #12]
 1366 07ce 1B68     		ldr	r3, [r3]
 1367 07d0 FF22     		movs	r2, #255
 1368 07d2 5A62     		str	r2, [r3, #36]
 834:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****         
 835:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 1369              		.loc 1 835 0
 1370 07d4 FB68     		ldr	r3, [r7, #12]
 1371 07d6 0322     		movs	r2, #3
 1372 07d8 5A77     		strb	r2, [r3, #29]
 836:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****         
 837:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****         /* Process Unlocked */ 
 838:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
 1373              		.loc 1 838 0
 1374 07da FB68     		ldr	r3, [r7, #12]
 1375 07dc 0022     		movs	r2, #0
 1376 07de 1A77     		strb	r2, [r3, #28]
 839:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****         
 840:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****         return HAL_TIMEOUT;
 1377              		.loc 1 840 0
 1378 07e0 0323     		movs	r3, #3
 1379 07e2 5AE0     		b	.L40
 1380              	.L49:
 828:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     {
 1381              		.loc 1 828 0 discriminator 1
 1382 07e4 FB68     		ldr	r3, [r7, #12]
 1383 07e6 1B68     		ldr	r3, [r3]
 1384 07e8 DB68     		ldr	r3, [r3, #12]
 1385 07ea 03F00103 		and	r3, r3, #1
 1386 07ee 002B     		cmp	r3, #0
 1387 07f0 E6D0     		beq	.L50
 841:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       }   
 842:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     }
 843:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     
 844:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 1388              		.loc 1 844 0
 1389 07f2 FB68     		ldr	r3, [r7, #12]
 1390 07f4 1B68     		ldr	r3, [r3]
 1391 07f6 7A69     		ldr	r2, [r7, #20]
 1392 07f8 DA61     		str	r2, [r3, #28]
 845:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     /* Configure the Alarm state: Enable Alarm */
 846:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     __HAL_RTC_ALARMA_ENABLE(hrtc);
 1393              		.loc 1 846 0
 1394 07fa FB68     		ldr	r3, [r7, #12]
 1395 07fc 1B68     		ldr	r3, [r3]
 1396 07fe FA68     		ldr	r2, [r7, #12]
 1397 0800 1268     		ldr	r2, [r2]
 1398 0802 9268     		ldr	r2, [r2, #8]
 1399 0804 42F48072 		orr	r2, r2, #256
 1400 0808 9A60     		str	r2, [r3, #8]
 1401 080a 3BE0     		b	.L51
 1402              	.L48:
 847:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   }
 848:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   else
 849:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   {
 850:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     /* Disable the Alarm B interrupt */
 851:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     __HAL_RTC_ALARMB_DISABLE(hrtc);
 1403              		.loc 1 851 0
 1404 080c FB68     		ldr	r3, [r7, #12]
 1405 080e 1B68     		ldr	r3, [r3]
 1406 0810 FA68     		ldr	r2, [r7, #12]
 1407 0812 1268     		ldr	r2, [r2]
 1408 0814 9268     		ldr	r2, [r2, #8]
 1409 0816 22F40072 		bic	r2, r2, #512
 1410 081a 9A60     		str	r2, [r3, #8]
 852:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     
 853:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     /* In case of interrupt mode is used, the interrupt source must disabled */ 
 854:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 1411              		.loc 1 854 0
 1412 081c FB68     		ldr	r3, [r7, #12]
 1413 081e 1B68     		ldr	r3, [r3]
 1414 0820 FA68     		ldr	r2, [r7, #12]
 1415 0822 1268     		ldr	r2, [r2]
 1416 0824 9268     		ldr	r2, [r2, #8]
 1417 0826 22F40052 		bic	r2, r2, #8192
 1418 082a 9A60     		str	r2, [r3, #8]
 855:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****        
 856:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     timeout = HAL_GetTick() + RTC_TIMEOUT_VALUE;
 1419              		.loc 1 856 0
 1420 082c FFF7FEFF 		bl	HAL_GetTick
 1421 0830 0346     		mov	r3, r0
 1422 0832 03F57A73 		add	r3, r3, #1000
 1423 0836 3B61     		str	r3, [r7, #16]
 857:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
 858:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 1424              		.loc 1 858 0
 1425 0838 11E0     		b	.L52
 1426              	.L53:
 859:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     {
 860:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       if(HAL_GetTick() >= timeout)
 1427              		.loc 1 860 0
 1428 083a FFF7FEFF 		bl	HAL_GetTick
 1429 083e 0246     		mov	r2, r0
 1430 0840 3B69     		ldr	r3, [r7, #16]
 1431 0842 9A42     		cmp	r2, r3
 1432 0844 0BD3     		bcc	.L52
 861:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       {
 862:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
 863:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 1433              		.loc 1 863 0
 1434 0846 FB68     		ldr	r3, [r7, #12]
 1435 0848 1B68     		ldr	r3, [r3]
 1436 084a FF22     		movs	r2, #255
 1437 084c 5A62     		str	r2, [r3, #36]
 864:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****         
 865:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 1438              		.loc 1 865 0
 1439 084e FB68     		ldr	r3, [r7, #12]
 1440 0850 0322     		movs	r2, #3
 1441 0852 5A77     		strb	r2, [r3, #29]
 866:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****         
 867:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****         /* Process Unlocked */ 
 868:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
 1442              		.loc 1 868 0
 1443 0854 FB68     		ldr	r3, [r7, #12]
 1444 0856 0022     		movs	r2, #0
 1445 0858 1A77     		strb	r2, [r3, #28]
 869:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****         
 870:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****         return HAL_TIMEOUT;
 1446              		.loc 1 870 0
 1447 085a 0323     		movs	r3, #3
 1448 085c 1DE0     		b	.L40
 1449              	.L52:
 858:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     {
 1450              		.loc 1 858 0 discriminator 1
 1451 085e FB68     		ldr	r3, [r7, #12]
 1452 0860 1B68     		ldr	r3, [r3]
 1453 0862 DB68     		ldr	r3, [r3, #12]
 1454 0864 03F00203 		and	r3, r3, #2
 1455 0868 002B     		cmp	r3, #0
 1456 086a E6D0     		beq	.L53
 871:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       }  
 872:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     }    
 873:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     
 874:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 1457              		.loc 1 874 0
 1458 086c FB68     		ldr	r3, [r7, #12]
 1459 086e 1B68     		ldr	r3, [r3]
 1460 0870 7A69     		ldr	r2, [r7, #20]
 1461 0872 1A62     		str	r2, [r3, #32]
 875:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     /* Configure the Alarm state: Enable Alarm */
 876:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     __HAL_RTC_ALARMB_ENABLE(hrtc); 
 1462              		.loc 1 876 0
 1463 0874 FB68     		ldr	r3, [r7, #12]
 1464 0876 1B68     		ldr	r3, [r3]
 1465 0878 FA68     		ldr	r2, [r7, #12]
 1466 087a 1268     		ldr	r2, [r2]
 1467 087c 9268     		ldr	r2, [r2, #8]
 1468 087e 42F40072 		orr	r2, r2, #512
 1469 0882 9A60     		str	r2, [r3, #8]
 1470              	.L51:
 877:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   }
 878:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   
 879:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   /* Enable the write protection for RTC registers */
 880:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);   
 1471              		.loc 1 880 0
 1472 0884 FB68     		ldr	r3, [r7, #12]
 1473 0886 1B68     		ldr	r3, [r3]
 1474 0888 FF22     		movs	r2, #255
 1475 088a 5A62     		str	r2, [r3, #36]
 881:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   
 882:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   /* Change RTC state */
 883:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_READY; 
 1476              		.loc 1 883 0
 1477 088c FB68     		ldr	r3, [r7, #12]
 1478 088e 0122     		movs	r2, #1
 1479 0890 5A77     		strb	r2, [r3, #29]
 884:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   
 885:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   /* Process Unlocked */ 
 886:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);
 1480              		.loc 1 886 0
 1481 0892 FB68     		ldr	r3, [r7, #12]
 1482 0894 0022     		movs	r2, #0
 1483 0896 1A77     		strb	r2, [r3, #28]
 887:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   
 888:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   return HAL_OK;
 1484              		.loc 1 888 0
 1485 0898 0023     		movs	r3, #0
 1486              	.L40:
 889:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** }
 1487              		.loc 1 889 0
 1488 089a 1846     		mov	r0, r3
 1489 089c 1C37     		adds	r7, r7, #28
 1490 089e BD46     		mov	sp, r7
 1491              		@ sp needed
 1492 08a0 90BD     		pop	{r4, r7, pc}
 1493              		.cfi_endproc
 1494              	.LFE63:
 1496 08a2 00BF     		.align	2
 1497              		.global	HAL_RTC_SetAlarm_IT
 1498              		.thumb
 1499              		.thumb_func
 1501              	HAL_RTC_SetAlarm_IT:
 1502              	.LFB64:
 890:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** 
 891:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** /**
 892:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @brief  Sets the specified RTC Alarm with Interrupt 
 893:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @param  hrtc: RTC handle
 894:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @param  sAlarm: Pointer to Alarm structure
 895:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @param  Format: Specifies the format of the entered parameters.
 896:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   *          This parameter can be one of the following values:
 897:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   *             @arg Format_BIN: Binary data format 
 898:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   *             @arg Format_BCD: BCD data format
 899:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @retval HAL status
 900:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   */
 901:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t F
 902:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** {
 1503              		.loc 1 902 0
 1504              		.cfi_startproc
 1505              		@ args = 0, pretend = 0, frame = 24
 1506              		@ frame_needed = 1, uses_anonymous_args = 0
 1507 08a4 90B5     		push	{r4, r7, lr}
 1508              		.cfi_def_cfa_offset 12
 1509              		.cfi_offset 4, -12
 1510              		.cfi_offset 7, -8
 1511              		.cfi_offset 14, -4
 1512 08a6 87B0     		sub	sp, sp, #28
 1513              		.cfi_def_cfa_offset 40
 1514 08a8 00AF     		add	r7, sp, #0
 1515              		.cfi_def_cfa_register 7
 1516 08aa F860     		str	r0, [r7, #12]
 1517 08ac B960     		str	r1, [r7, #8]
 1518 08ae 7A60     		str	r2, [r7, #4]
 903:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   uint32_t timeout = 0;
 1519              		.loc 1 903 0
 1520 08b0 0023     		movs	r3, #0
 1521 08b2 3B61     		str	r3, [r7, #16]
 904:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   uint32_t tmpreg = 0;
 1522              		.loc 1 904 0
 1523 08b4 0023     		movs	r3, #0
 1524 08b6 7B61     		str	r3, [r7, #20]
 905:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   
 906:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   /* Check the parameters */
 907:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
 908:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   assert_param(IS_ALARM(sAlarm->Alarm));
 909:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   assert_param(IS_ALARM_MASK(sAlarm->AlarmMask));
 910:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
 911:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       
 912:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   /* Process Locked */ 
 913:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
 1525              		.loc 1 913 0
 1526 08b8 FB68     		ldr	r3, [r7, #12]
 1527 08ba 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 1528 08bc 012B     		cmp	r3, #1
 1529 08be 01D1     		bne	.L55
 1530              		.loc 1 913 0 is_stmt 0 discriminator 1
 1531 08c0 0223     		movs	r3, #2
 1532 08c2 38E1     		b	.L56
 1533              	.L55:
 1534              		.loc 1 913 0 discriminator 2
 1535 08c4 FB68     		ldr	r3, [r7, #12]
 1536 08c6 0122     		movs	r2, #1
 1537 08c8 1A77     		strb	r2, [r3, #28]
 914:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   
 915:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 1538              		.loc 1 915 0 is_stmt 1 discriminator 2
 1539 08ca FB68     		ldr	r3, [r7, #12]
 1540 08cc 0222     		movs	r2, #2
 1541 08ce 5A77     		strb	r2, [r3, #29]
 916:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   
 917:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   if(Format == FORMAT_BIN)
 1542              		.loc 1 917 0 discriminator 2
 1543 08d0 7B68     		ldr	r3, [r7, #4]
 1544 08d2 002B     		cmp	r3, #0
 1545 08d4 36D1     		bne	.L57
 918:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   {
 919:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 1546              		.loc 1 919 0
 1547 08d6 FB68     		ldr	r3, [r7, #12]
 1548 08d8 1B68     		ldr	r3, [r3]
 1549 08da 9B68     		ldr	r3, [r3, #8]
 1550 08dc 03F04003 		and	r3, r3, #64
 1551 08e0 002B     		cmp	r3, #0
 1552 08e2 02D1     		bne	.L58
 920:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     {
 921:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
 922:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
 923:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     } 
 924:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     else
 925:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     {
 926:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       sAlarm->AlarmTime.TimeFormat = 0x00;
 1553              		.loc 1 926 0
 1554 08e4 BB68     		ldr	r3, [r7, #8]
 1555 08e6 0022     		movs	r2, #0
 1556 08e8 DA70     		strb	r2, [r3, #3]
 1557              	.L58:
 927:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
 928:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     }
 929:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
 930:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));
 931:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     
 932:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 933:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     {
 934:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(sAlarm->AlarmDateWeekDay));
 935:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     }
 936:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     else
 937:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     {
 938:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
 939:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     }
 940:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 1558              		.loc 1 940 0
 1559 08ea BB68     		ldr	r3, [r7, #8]
 1560 08ec 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1561 08ee 1846     		mov	r0, r3
 1562 08f0 FFF7FEFF 		bl	RTC_ByteToBcd2
 1563 08f4 0346     		mov	r3, r0
 1564 08f6 1C04     		lsls	r4, r3, #16
 941:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 1565              		.loc 1 941 0
 1566 08f8 BB68     		ldr	r3, [r7, #8]
 1567 08fa 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1568 08fc 1846     		mov	r0, r3
 1569 08fe FFF7FEFF 		bl	RTC_ByteToBcd2
 1570 0902 0346     		mov	r3, r0
 1571 0904 1B02     		lsls	r3, r3, #8
 940:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 1572              		.loc 1 940 0
 1573 0906 1C43     		orrs	r4, r4, r3
 942:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 1574              		.loc 1 942 0
 1575 0908 BB68     		ldr	r3, [r7, #8]
 1576 090a 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1577 090c 1846     		mov	r0, r3
 1578 090e FFF7FEFF 		bl	RTC_ByteToBcd2
 1579 0912 0346     		mov	r3, r0
 941:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 1580              		.loc 1 941 0
 1581 0914 44EA0302 		orr	r2, r4, r3
 943:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 1582              		.loc 1 943 0
 1583 0918 BB68     		ldr	r3, [r7, #8]
 1584 091a DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1585 091c 1B04     		lsls	r3, r3, #16
 942:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 1586              		.loc 1 942 0
 1587 091e 42EA0304 		orr	r4, r2, r3
 944:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 1588              		.loc 1 944 0
 1589 0922 BB68     		ldr	r3, [r7, #8]
 1590 0924 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 1591 0926 1846     		mov	r0, r3
 1592 0928 FFF7FEFF 		bl	RTC_ByteToBcd2
 1593 092c 0346     		mov	r3, r0
 1594 092e 1B06     		lsls	r3, r3, #24
 943:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 1595              		.loc 1 943 0
 1596 0930 44EA0302 		orr	r2, r4, r3
 945:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 1597              		.loc 1 945 0
 1598 0934 BB68     		ldr	r3, [r7, #8]
 1599 0936 1B69     		ldr	r3, [r3, #16]
 944:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 1600              		.loc 1 944 0
 1601 0938 1A43     		orrs	r2, r2, r3
 946:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmMask)); 
 1602              		.loc 1 946 0
 1603 093a BB68     		ldr	r3, [r7, #8]
 1604 093c DB68     		ldr	r3, [r3, #12]
 940:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 1605              		.loc 1 940 0
 1606 093e 1343     		orrs	r3, r3, r2
 1607 0940 7B61     		str	r3, [r7, #20]
 1608 0942 3DE0     		b	.L59
 1609              	.L57:
 947:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   }
 948:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   else
 949:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   {
 950:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 1610              		.loc 1 950 0
 1611 0944 FB68     		ldr	r3, [r7, #12]
 1612 0946 1B68     		ldr	r3, [r3]
 1613 0948 9B68     		ldr	r3, [r3, #8]
 1614 094a 03F04003 		and	r3, r3, #64
 1615 094e 002B     		cmp	r3, #0
 1616 0950 07D0     		beq	.L60
 951:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     {
 952:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 1617              		.loc 1 952 0
 1618 0952 BB68     		ldr	r3, [r7, #8]
 1619 0954 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1620 0956 1846     		mov	r0, r3
 1621 0958 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1622 095c 0346     		mov	r3, r0
 1623 095e 7B61     		str	r3, [r7, #20]
 1624 0960 02E0     		b	.L61
 1625              	.L60:
 953:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
 954:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
 955:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     } 
 956:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     else
 957:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     {
 958:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       sAlarm->AlarmTime.TimeFormat = 0x00;
 1626              		.loc 1 958 0
 1627 0962 BB68     		ldr	r3, [r7, #8]
 1628 0964 0022     		movs	r2, #0
 1629 0966 DA70     		strb	r2, [r3, #3]
 1630              	.L61:
 959:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 960:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     }
 961:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     
 962:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
 963:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 964:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     
 965:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 1631              		.loc 1 965 0
 1632 0968 BB68     		ldr	r3, [r7, #8]
 1633 096a 1B69     		ldr	r3, [r3, #16]
 1634 096c 002B     		cmp	r3, #0
 1635 096e 07D1     		bne	.L62
 966:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     {
 967:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 1636              		.loc 1 967 0
 1637 0970 BB68     		ldr	r3, [r7, #8]
 1638 0972 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 1639 0974 1846     		mov	r0, r3
 1640 0976 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1641 097a 0346     		mov	r3, r0
 1642 097c 7B61     		str	r3, [r7, #20]
 1643 097e 06E0     		b	.L63
 1644              	.L62:
 968:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));    
 969:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     }
 970:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     else
 971:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     {
 972:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 1645              		.loc 1 972 0
 1646 0980 BB68     		ldr	r3, [r7, #8]
 1647 0982 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 1648 0984 1846     		mov	r0, r3
 1649 0986 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1650 098a 0346     		mov	r3, r0
 1651 098c 7B61     		str	r3, [r7, #20]
 1652              	.L63:
 973:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));      
 974:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     }
 975:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 1653              		.loc 1 975 0
 1654 098e BB68     		ldr	r3, [r7, #8]
 1655 0990 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1656 0992 1A04     		lsls	r2, r3, #16
 976:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 1657              		.loc 1 976 0
 1658 0994 BB68     		ldr	r3, [r7, #8]
 1659 0996 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1660 0998 1B02     		lsls	r3, r3, #8
 975:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 1661              		.loc 1 975 0
 1662 099a 1A43     		orrs	r2, r2, r3
 977:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****               ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 1663              		.loc 1 977 0
 1664 099c BB68     		ldr	r3, [r7, #8]
 1665 099e 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 976:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 1666              		.loc 1 976 0
 1667 09a0 1A43     		orrs	r2, r2, r3
 978:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 1668              		.loc 1 978 0
 1669 09a2 BB68     		ldr	r3, [r7, #8]
 1670 09a4 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1671 09a6 1B04     		lsls	r3, r3, #16
 977:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****               ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 1672              		.loc 1 977 0
 1673 09a8 1A43     		orrs	r2, r2, r3
 979:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 1674              		.loc 1 979 0
 1675 09aa BB68     		ldr	r3, [r7, #8]
 1676 09ac 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 1677 09ae 1B06     		lsls	r3, r3, #24
 978:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 1678              		.loc 1 978 0
 1679 09b0 1A43     		orrs	r2, r2, r3
 980:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 1680              		.loc 1 980 0
 1681 09b2 BB68     		ldr	r3, [r7, #8]
 1682 09b4 1B69     		ldr	r3, [r3, #16]
 979:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 1683              		.loc 1 979 0
 1684 09b6 1A43     		orrs	r2, r2, r3
 981:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmMask));     
 1685              		.loc 1 981 0
 1686 09b8 BB68     		ldr	r3, [r7, #8]
 1687 09ba DB68     		ldr	r3, [r3, #12]
 975:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 1688              		.loc 1 975 0
 1689 09bc 1343     		orrs	r3, r3, r2
 1690 09be 7B61     		str	r3, [r7, #20]
 1691              	.L59:
 982:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   }
 983:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   
 984:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
 985:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 1692              		.loc 1 985 0
 1693 09c0 FB68     		ldr	r3, [r7, #12]
 1694 09c2 1B68     		ldr	r3, [r3]
 1695 09c4 CA22     		movs	r2, #202
 1696 09c6 5A62     		str	r2, [r3, #36]
 1697 09c8 FB68     		ldr	r3, [r7, #12]
 1698 09ca 1B68     		ldr	r3, [r3]
 1699 09cc 5322     		movs	r2, #83
 1700 09ce 5A62     		str	r2, [r3, #36]
 986:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   
 987:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   /* Configure the Alarm register */
 988:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   if(sAlarm->Alarm == RTC_ALARM_A)
 1701              		.loc 1 988 0
 1702 09d0 BB68     		ldr	r3, [r7, #8]
 1703 09d2 9B69     		ldr	r3, [r3, #24]
 1704 09d4 B3F5807F 		cmp	r3, #256
 1705 09d8 45D1     		bne	.L64
 989:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   {
 990:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     /* Disable the Alarm A interrupt */
 991:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     __HAL_RTC_ALARMA_DISABLE(hrtc);
 1706              		.loc 1 991 0
 1707 09da FB68     		ldr	r3, [r7, #12]
 1708 09dc 1B68     		ldr	r3, [r3]
 1709 09de FA68     		ldr	r2, [r7, #12]
 1710 09e0 1268     		ldr	r2, [r2]
 1711 09e2 9268     		ldr	r2, [r2, #8]
 1712 09e4 22F48072 		bic	r2, r2, #256
 1713 09e8 9A60     		str	r2, [r3, #8]
 992:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** 
 993:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     /* Clear flag alarm A */
 994:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 1714              		.loc 1 994 0
 1715 09ea FB68     		ldr	r3, [r7, #12]
 1716 09ec 1B68     		ldr	r3, [r3]
 1717 09ee FA68     		ldr	r2, [r7, #12]
 1718 09f0 1268     		ldr	r2, [r2]
 1719 09f2 D268     		ldr	r2, [r2, #12]
 1720 09f4 D2B2     		uxtb	r2, r2
 1721 09f6 62F4C072 		orn	r2, r2, #384
 1722 09fa DA60     		str	r2, [r3, #12]
 995:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** 
 996:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     timeout = HAL_GetTick() + RTC_TIMEOUT_VALUE;
 1723              		.loc 1 996 0
 1724 09fc FFF7FEFF 		bl	HAL_GetTick
 1725 0a00 0346     		mov	r3, r0
 1726 0a02 03F57A73 		add	r3, r3, #1000
 1727 0a06 3B61     		str	r3, [r7, #16]
 997:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
 998:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 1728              		.loc 1 998 0
 1729 0a08 11E0     		b	.L65
 1730              	.L66:
 999:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     {
1000:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       if(HAL_GetTick() >= timeout)
 1731              		.loc 1 1000 0
 1732 0a0a FFF7FEFF 		bl	HAL_GetTick
 1733 0a0e 0246     		mov	r2, r0
 1734 0a10 3B69     		ldr	r3, [r7, #16]
 1735 0a12 9A42     		cmp	r2, r3
 1736 0a14 0BD3     		bcc	.L65
1001:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       {
1002:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
1003:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 1737              		.loc 1 1003 0
 1738 0a16 FB68     		ldr	r3, [r7, #12]
 1739 0a18 1B68     		ldr	r3, [r3]
 1740 0a1a FF22     		movs	r2, #255
 1741 0a1c 5A62     		str	r2, [r3, #36]
1004:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****         
1005:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 1742              		.loc 1 1005 0
 1743 0a1e FB68     		ldr	r3, [r7, #12]
 1744 0a20 0322     		movs	r2, #3
 1745 0a22 5A77     		strb	r2, [r3, #29]
1006:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****         
1007:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****         /* Process Unlocked */ 
1008:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
 1746              		.loc 1 1008 0
 1747 0a24 FB68     		ldr	r3, [r7, #12]
 1748 0a26 0022     		movs	r2, #0
 1749 0a28 1A77     		strb	r2, [r3, #28]
1009:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****         
1010:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****         return HAL_TIMEOUT;
 1750              		.loc 1 1010 0
 1751 0a2a 0323     		movs	r3, #3
 1752 0a2c 83E0     		b	.L56
 1753              	.L65:
 998:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     {
 1754              		.loc 1 998 0 discriminator 1
 1755 0a2e FB68     		ldr	r3, [r7, #12]
 1756 0a30 1B68     		ldr	r3, [r3]
 1757 0a32 DB68     		ldr	r3, [r3, #12]
 1758 0a34 03F00103 		and	r3, r3, #1
 1759 0a38 002B     		cmp	r3, #0
 1760 0a3a E6D0     		beq	.L66
1011:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       }  
1012:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     }
1013:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     
1014:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 1761              		.loc 1 1014 0
 1762 0a3c FB68     		ldr	r3, [r7, #12]
 1763 0a3e 1B68     		ldr	r3, [r3]
 1764 0a40 7A69     		ldr	r2, [r7, #20]
 1765 0a42 DA61     		str	r2, [r3, #28]
1015:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     /* Configure the Alarm state: Enable Alarm */
1016:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     __HAL_RTC_ALARMA_ENABLE(hrtc);
 1766              		.loc 1 1016 0
 1767 0a44 FB68     		ldr	r3, [r7, #12]
 1768 0a46 1B68     		ldr	r3, [r3]
 1769 0a48 FA68     		ldr	r2, [r7, #12]
 1770 0a4a 1268     		ldr	r2, [r2]
 1771 0a4c 9268     		ldr	r2, [r2, #8]
 1772 0a4e 42F48072 		orr	r2, r2, #256
 1773 0a52 9A60     		str	r2, [r3, #8]
1017:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     /* Configure the Alarm interrupt */
1018:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 1774              		.loc 1 1018 0
 1775 0a54 FB68     		ldr	r3, [r7, #12]
 1776 0a56 1B68     		ldr	r3, [r3]
 1777 0a58 FA68     		ldr	r2, [r7, #12]
 1778 0a5a 1268     		ldr	r2, [r2]
 1779 0a5c 9268     		ldr	r2, [r2, #8]
 1780 0a5e 42F48052 		orr	r2, r2, #4096
 1781 0a62 9A60     		str	r2, [r3, #8]
 1782 0a64 44E0     		b	.L67
 1783              	.L64:
1019:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   }
1020:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   else
1021:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   {
1022:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     /* Disable the Alarm B interrupt */
1023:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     __HAL_RTC_ALARMB_DISABLE(hrtc);
 1784              		.loc 1 1023 0
 1785 0a66 FB68     		ldr	r3, [r7, #12]
 1786 0a68 1B68     		ldr	r3, [r3]
 1787 0a6a FA68     		ldr	r2, [r7, #12]
 1788 0a6c 1268     		ldr	r2, [r2]
 1789 0a6e 9268     		ldr	r2, [r2, #8]
 1790 0a70 22F40072 		bic	r2, r2, #512
 1791 0a74 9A60     		str	r2, [r3, #8]
1024:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** 
1025:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     /* Clear flag alarm B */
1026:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 1792              		.loc 1 1026 0
 1793 0a76 FB68     		ldr	r3, [r7, #12]
 1794 0a78 1B68     		ldr	r3, [r3]
 1795 0a7a FA68     		ldr	r2, [r7, #12]
 1796 0a7c 1268     		ldr	r2, [r2]
 1797 0a7e D268     		ldr	r2, [r2, #12]
 1798 0a80 D2B2     		uxtb	r2, r2
 1799 0a82 62F42072 		orn	r2, r2, #640
 1800 0a86 DA60     		str	r2, [r3, #12]
1027:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** 
1028:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     timeout = HAL_GetTick() + RTC_TIMEOUT_VALUE;
 1801              		.loc 1 1028 0
 1802 0a88 FFF7FEFF 		bl	HAL_GetTick
 1803 0a8c 0346     		mov	r3, r0
 1804 0a8e 03F57A73 		add	r3, r3, #1000
 1805 0a92 3B61     		str	r3, [r7, #16]
1029:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
1030:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 1806              		.loc 1 1030 0
 1807 0a94 11E0     		b	.L68
 1808              	.L69:
1031:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     {
1032:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       if(HAL_GetTick() >= timeout)
 1809              		.loc 1 1032 0
 1810 0a96 FFF7FEFF 		bl	HAL_GetTick
 1811 0a9a 0246     		mov	r2, r0
 1812 0a9c 3B69     		ldr	r3, [r7, #16]
 1813 0a9e 9A42     		cmp	r2, r3
 1814 0aa0 0BD3     		bcc	.L68
1033:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       {
1034:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
1035:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 1815              		.loc 1 1035 0
 1816 0aa2 FB68     		ldr	r3, [r7, #12]
 1817 0aa4 1B68     		ldr	r3, [r3]
 1818 0aa6 FF22     		movs	r2, #255
 1819 0aa8 5A62     		str	r2, [r3, #36]
1036:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****         
1037:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 1820              		.loc 1 1037 0
 1821 0aaa FB68     		ldr	r3, [r7, #12]
 1822 0aac 0322     		movs	r2, #3
 1823 0aae 5A77     		strb	r2, [r3, #29]
1038:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****         
1039:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****         /* Process Unlocked */ 
1040:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
 1824              		.loc 1 1040 0
 1825 0ab0 FB68     		ldr	r3, [r7, #12]
 1826 0ab2 0022     		movs	r2, #0
 1827 0ab4 1A77     		strb	r2, [r3, #28]
1041:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****         
1042:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****         return HAL_TIMEOUT;
 1828              		.loc 1 1042 0
 1829 0ab6 0323     		movs	r3, #3
 1830 0ab8 3DE0     		b	.L56
 1831              	.L68:
1030:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     {
 1832              		.loc 1 1030 0 discriminator 1
 1833 0aba FB68     		ldr	r3, [r7, #12]
 1834 0abc 1B68     		ldr	r3, [r3]
 1835 0abe DB68     		ldr	r3, [r3, #12]
 1836 0ac0 03F00203 		and	r3, r3, #2
 1837 0ac4 002B     		cmp	r3, #0
 1838 0ac6 E6D0     		beq	.L69
1043:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       }  
1044:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     }
1045:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** 
1046:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 1839              		.loc 1 1046 0
 1840 0ac8 FB68     		ldr	r3, [r7, #12]
 1841 0aca 1B68     		ldr	r3, [r3]
 1842 0acc 7A69     		ldr	r2, [r7, #20]
 1843 0ace 1A62     		str	r2, [r3, #32]
1047:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     /* Configure the Alarm state: Enable Alarm */
1048:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     __HAL_RTC_ALARMB_ENABLE(hrtc);
 1844              		.loc 1 1048 0
 1845 0ad0 FB68     		ldr	r3, [r7, #12]
 1846 0ad2 1B68     		ldr	r3, [r3]
 1847 0ad4 FA68     		ldr	r2, [r7, #12]
 1848 0ad6 1268     		ldr	r2, [r2]
 1849 0ad8 9268     		ldr	r2, [r2, #8]
 1850 0ada 42F40072 		orr	r2, r2, #512
 1851 0ade 9A60     		str	r2, [r3, #8]
1049:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     /* Configure the Alarm interrupt */
1050:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 1852              		.loc 1 1050 0
 1853 0ae0 FB68     		ldr	r3, [r7, #12]
 1854 0ae2 1B68     		ldr	r3, [r3]
 1855 0ae4 FA68     		ldr	r2, [r7, #12]
 1856 0ae6 1268     		ldr	r2, [r2]
 1857 0ae8 9268     		ldr	r2, [r2, #8]
 1858 0aea 42F40052 		orr	r2, r2, #8192
 1859 0aee 9A60     		str	r2, [r3, #8]
 1860              	.L67:
1051:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   }
1052:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** 
1053:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   /* RTC Alarm Interrupt Configuration: EXTI configuration */
1054:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   __HAL_RTC_ENABLE_IT(RTC_EXTI_LINE_ALARM_EVENT);
 1861              		.loc 1 1054 0
 1862 0af0 4FF47053 		mov	r3, #15360
 1863 0af4 C4F20103 		movt	r3, 16385
 1864 0af8 4FF47052 		mov	r2, #15360
 1865 0afc C4F20102 		movt	r2, 16385
 1866 0b00 1268     		ldr	r2, [r2]
 1867 0b02 42F40032 		orr	r2, r2, #131072
 1868 0b06 1A60     		str	r2, [r3]
1055:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   
1056:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 1869              		.loc 1 1056 0
 1870 0b08 4FF47053 		mov	r3, #15360
 1871 0b0c C4F20103 		movt	r3, 16385
 1872 0b10 4FF47052 		mov	r2, #15360
 1873 0b14 C4F20102 		movt	r2, 16385
 1874 0b18 9268     		ldr	r2, [r2, #8]
 1875 0b1a 42F40032 		orr	r2, r2, #131072
 1876 0b1e 9A60     		str	r2, [r3, #8]
1057:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   
1058:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   /* Enable the write protection for RTC registers */
1059:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 1877              		.loc 1 1059 0
 1878 0b20 FB68     		ldr	r3, [r7, #12]
 1879 0b22 1B68     		ldr	r3, [r3]
 1880 0b24 FF22     		movs	r2, #255
 1881 0b26 5A62     		str	r2, [r3, #36]
1060:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   
1061:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_READY; 
 1882              		.loc 1 1061 0
 1883 0b28 FB68     		ldr	r3, [r7, #12]
 1884 0b2a 0122     		movs	r2, #1
 1885 0b2c 5A77     		strb	r2, [r3, #29]
1062:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   
1063:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   /* Process Unlocked */ 
1064:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);  
 1886              		.loc 1 1064 0
 1887 0b2e FB68     		ldr	r3, [r7, #12]
 1888 0b30 0022     		movs	r2, #0
 1889 0b32 1A77     		strb	r2, [r3, #28]
1065:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   
1066:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   return HAL_OK;
 1890              		.loc 1 1066 0
 1891 0b34 0023     		movs	r3, #0
 1892              	.L56:
1067:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** }
 1893              		.loc 1 1067 0
 1894 0b36 1846     		mov	r0, r3
 1895 0b38 1C37     		adds	r7, r7, #28
 1896 0b3a BD46     		mov	sp, r7
 1897              		@ sp needed
 1898 0b3c 90BD     		pop	{r4, r7, pc}
 1899              		.cfi_endproc
 1900              	.LFE64:
 1902 0b3e 00BF     		.align	2
 1903              		.global	HAL_RTC_DeactivateAlarm
 1904              		.thumb
 1905              		.thumb_func
 1907              	HAL_RTC_DeactivateAlarm:
 1908              	.LFB65:
1068:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** 
1069:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** /**
1070:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @brief  Deactive the specified RTC Alarm 
1071:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @param  hrtc: RTC handle
1072:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @param  Alarm: Specifies the Alarm.
1073:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   *          This parameter can be one of the following values:
1074:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   *            @arg ALARM_A :  AlarmA
1075:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   *            @arg ALARM_B :  AlarmB
1076:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @retval HAL status
1077:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   */
1078:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
1079:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** {
 1909              		.loc 1 1079 0
 1910              		.cfi_startproc
 1911              		@ args = 0, pretend = 0, frame = 16
 1912              		@ frame_needed = 1, uses_anonymous_args = 0
 1913 0b40 80B5     		push	{r7, lr}
 1914              		.cfi_def_cfa_offset 8
 1915              		.cfi_offset 7, -8
 1916              		.cfi_offset 14, -4
 1917 0b42 84B0     		sub	sp, sp, #16
 1918              		.cfi_def_cfa_offset 24
 1919 0b44 00AF     		add	r7, sp, #0
 1920              		.cfi_def_cfa_register 7
 1921 0b46 7860     		str	r0, [r7, #4]
 1922 0b48 3960     		str	r1, [r7]
1080:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   uint32_t timeout = 0;
 1923              		.loc 1 1080 0
 1924 0b4a 0023     		movs	r3, #0
 1925 0b4c FB60     		str	r3, [r7, #12]
1081:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   
1082:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   /* Check the parameters */
1083:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   assert_param(IS_ALARM(Alarm));
1084:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   
1085:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   /* Process Locked */ 
1086:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
 1926              		.loc 1 1086 0
 1927 0b4e 7B68     		ldr	r3, [r7, #4]
 1928 0b50 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 1929 0b52 012B     		cmp	r3, #1
 1930 0b54 01D1     		bne	.L71
 1931              		.loc 1 1086 0 is_stmt 0 discriminator 1
 1932 0b56 0223     		movs	r3, #2
 1933 0b58 7DE0     		b	.L72
 1934              	.L71:
 1935              		.loc 1 1086 0 discriminator 2
 1936 0b5a 7B68     		ldr	r3, [r7, #4]
 1937 0b5c 0122     		movs	r2, #1
 1938 0b5e 1A77     		strb	r2, [r3, #28]
1087:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   
1088:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 1939              		.loc 1 1088 0 is_stmt 1 discriminator 2
 1940 0b60 7B68     		ldr	r3, [r7, #4]
 1941 0b62 0222     		movs	r2, #2
 1942 0b64 5A77     		strb	r2, [r3, #29]
1089:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   
1090:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
1091:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 1943              		.loc 1 1091 0 discriminator 2
 1944 0b66 7B68     		ldr	r3, [r7, #4]
 1945 0b68 1B68     		ldr	r3, [r3]
 1946 0b6a CA22     		movs	r2, #202
 1947 0b6c 5A62     		str	r2, [r3, #36]
 1948 0b6e 7B68     		ldr	r3, [r7, #4]
 1949 0b70 1B68     		ldr	r3, [r3]
 1950 0b72 5322     		movs	r2, #83
 1951 0b74 5A62     		str	r2, [r3, #36]
1092:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   
1093:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   if(Alarm == RTC_ALARM_A)
 1952              		.loc 1 1093 0 discriminator 2
 1953 0b76 3B68     		ldr	r3, [r7]
 1954 0b78 B3F5807F 		cmp	r3, #256
 1955 0b7c 30D1     		bne	.L73
1094:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   {
1095:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     /* AlarmA */
1096:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     __HAL_RTC_ALARMA_DISABLE(hrtc);
 1956              		.loc 1 1096 0
 1957 0b7e 7B68     		ldr	r3, [r7, #4]
 1958 0b80 1B68     		ldr	r3, [r3]
 1959 0b82 7A68     		ldr	r2, [r7, #4]
 1960 0b84 1268     		ldr	r2, [r2]
 1961 0b86 9268     		ldr	r2, [r2, #8]
 1962 0b88 22F48072 		bic	r2, r2, #256
 1963 0b8c 9A60     		str	r2, [r3, #8]
1097:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     
1098:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     /* In case of interrupt mode is used, the interrupt source must disabled */ 
1099:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 1964              		.loc 1 1099 0
 1965 0b8e 7B68     		ldr	r3, [r7, #4]
 1966 0b90 1B68     		ldr	r3, [r3]
 1967 0b92 7A68     		ldr	r2, [r7, #4]
 1968 0b94 1268     		ldr	r2, [r2]
 1969 0b96 9268     		ldr	r2, [r2, #8]
 1970 0b98 22F48052 		bic	r2, r2, #4096
 1971 0b9c 9A60     		str	r2, [r3, #8]
1100:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     
1101:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     timeout = HAL_GetTick() + RTC_TIMEOUT_VALUE;
 1972              		.loc 1 1101 0
 1973 0b9e FFF7FEFF 		bl	HAL_GetTick
 1974 0ba2 0346     		mov	r3, r0
 1975 0ba4 03F57A73 		add	r3, r3, #1000
 1976 0ba8 FB60     		str	r3, [r7, #12]
1102:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     
1103:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
1104:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 1977              		.loc 1 1104 0
 1978 0baa 11E0     		b	.L74
 1979              	.L75:
1105:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     {
1106:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       if(HAL_GetTick() >= timeout)
 1980              		.loc 1 1106 0
 1981 0bac FFF7FEFF 		bl	HAL_GetTick
 1982 0bb0 0246     		mov	r2, r0
 1983 0bb2 FB68     		ldr	r3, [r7, #12]
 1984 0bb4 9A42     		cmp	r2, r3
 1985 0bb6 0BD3     		bcc	.L74
1107:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       { 
1108:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
1109:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 1986              		.loc 1 1109 0
 1987 0bb8 7B68     		ldr	r3, [r7, #4]
 1988 0bba 1B68     		ldr	r3, [r3]
 1989 0bbc FF22     		movs	r2, #255
 1990 0bbe 5A62     		str	r2, [r3, #36]
1110:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****         
1111:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 1991              		.loc 1 1111 0
 1992 0bc0 7B68     		ldr	r3, [r7, #4]
 1993 0bc2 0322     		movs	r2, #3
 1994 0bc4 5A77     		strb	r2, [r3, #29]
1112:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****         
1113:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****         /* Process Unlocked */ 
1114:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
 1995              		.loc 1 1114 0
 1996 0bc6 7B68     		ldr	r3, [r7, #4]
 1997 0bc8 0022     		movs	r2, #0
 1998 0bca 1A77     		strb	r2, [r3, #28]
1115:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****         
1116:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****         return HAL_TIMEOUT;
 1999              		.loc 1 1116 0
 2000 0bcc 0323     		movs	r3, #3
 2001 0bce 42E0     		b	.L72
 2002              	.L74:
1104:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     {
 2003              		.loc 1 1104 0 discriminator 1
 2004 0bd0 7B68     		ldr	r3, [r7, #4]
 2005 0bd2 1B68     		ldr	r3, [r3]
 2006 0bd4 DB68     		ldr	r3, [r3, #12]
 2007 0bd6 03F00103 		and	r3, r3, #1
 2008 0bda 002B     		cmp	r3, #0
 2009 0bdc E6D0     		beq	.L75
 2010 0bde 2FE0     		b	.L76
 2011              	.L73:
1117:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       }      
1118:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     }
1119:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   }
1120:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   else
1121:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   {
1122:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     /* AlarmB */
1123:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     __HAL_RTC_ALARMB_DISABLE(hrtc);
 2012              		.loc 1 1123 0
 2013 0be0 7B68     		ldr	r3, [r7, #4]
 2014 0be2 1B68     		ldr	r3, [r3]
 2015 0be4 7A68     		ldr	r2, [r7, #4]
 2016 0be6 1268     		ldr	r2, [r2]
 2017 0be8 9268     		ldr	r2, [r2, #8]
 2018 0bea 22F40072 		bic	r2, r2, #512
 2019 0bee 9A60     		str	r2, [r3, #8]
1124:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     
1125:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     /* In case of interrupt mode is used, the interrupt source must disabled */ 
1126:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     __HAL_RTC_ALARM_DISABLE_IT(hrtc,RTC_IT_ALRB);
 2020              		.loc 1 1126 0
 2021 0bf0 7B68     		ldr	r3, [r7, #4]
 2022 0bf2 1B68     		ldr	r3, [r3]
 2023 0bf4 7A68     		ldr	r2, [r7, #4]
 2024 0bf6 1268     		ldr	r2, [r2]
 2025 0bf8 9268     		ldr	r2, [r2, #8]
 2026 0bfa 22F40052 		bic	r2, r2, #8192
 2027 0bfe 9A60     		str	r2, [r3, #8]
1127:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     
1128:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     timeout = HAL_GetTick() + RTC_TIMEOUT_VALUE;
 2028              		.loc 1 1128 0
 2029 0c00 FFF7FEFF 		bl	HAL_GetTick
 2030 0c04 0346     		mov	r3, r0
 2031 0c06 03F57A73 		add	r3, r3, #1000
 2032 0c0a FB60     		str	r3, [r7, #12]
1129:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     
1130:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
1131:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 2033              		.loc 1 1131 0
 2034 0c0c 11E0     		b	.L77
 2035              	.L78:
1132:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     {
1133:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       if(HAL_GetTick() >= timeout)
 2036              		.loc 1 1133 0
 2037 0c0e FFF7FEFF 		bl	HAL_GetTick
 2038 0c12 0246     		mov	r2, r0
 2039 0c14 FB68     		ldr	r3, [r7, #12]
 2040 0c16 9A42     		cmp	r2, r3
 2041 0c18 0BD3     		bcc	.L77
1134:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       {
1135:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
1136:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 2042              		.loc 1 1136 0
 2043 0c1a 7B68     		ldr	r3, [r7, #4]
 2044 0c1c 1B68     		ldr	r3, [r3]
 2045 0c1e FF22     		movs	r2, #255
 2046 0c20 5A62     		str	r2, [r3, #36]
1137:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****         
1138:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 2047              		.loc 1 1138 0
 2048 0c22 7B68     		ldr	r3, [r7, #4]
 2049 0c24 0322     		movs	r2, #3
 2050 0c26 5A77     		strb	r2, [r3, #29]
1139:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****         
1140:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****         /* Process Unlocked */ 
1141:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
 2051              		.loc 1 1141 0
 2052 0c28 7B68     		ldr	r3, [r7, #4]
 2053 0c2a 0022     		movs	r2, #0
 2054 0c2c 1A77     		strb	r2, [r3, #28]
1142:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****         
1143:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****         return HAL_TIMEOUT;
 2055              		.loc 1 1143 0
 2056 0c2e 0323     		movs	r3, #3
 2057 0c30 11E0     		b	.L72
 2058              	.L77:
1131:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     {
 2059              		.loc 1 1131 0 discriminator 1
 2060 0c32 7B68     		ldr	r3, [r7, #4]
 2061 0c34 1B68     		ldr	r3, [r3]
 2062 0c36 DB68     		ldr	r3, [r3, #12]
 2063 0c38 03F00203 		and	r3, r3, #2
 2064 0c3c 002B     		cmp	r3, #0
 2065 0c3e E6D0     		beq	.L78
 2066              	.L76:
1144:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       }    
1145:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     }
1146:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   }
1147:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   /* Enable the write protection for RTC registers */
1148:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 2067              		.loc 1 1148 0
 2068 0c40 7B68     		ldr	r3, [r7, #4]
 2069 0c42 1B68     		ldr	r3, [r3]
 2070 0c44 FF22     		movs	r2, #255
 2071 0c46 5A62     		str	r2, [r3, #36]
1149:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   
1150:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_READY; 
 2072              		.loc 1 1150 0
 2073 0c48 7B68     		ldr	r3, [r7, #4]
 2074 0c4a 0122     		movs	r2, #1
 2075 0c4c 5A77     		strb	r2, [r3, #29]
1151:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   
1152:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   /* Process Unlocked */ 
1153:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);  
 2076              		.loc 1 1153 0
 2077 0c4e 7B68     		ldr	r3, [r7, #4]
 2078 0c50 0022     		movs	r2, #0
 2079 0c52 1A77     		strb	r2, [r3, #28]
1154:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   
1155:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   return HAL_OK; 
 2080              		.loc 1 1155 0
 2081 0c54 0023     		movs	r3, #0
 2082              	.L72:
1156:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** }
 2083              		.loc 1 1156 0
 2084 0c56 1846     		mov	r0, r3
 2085 0c58 1037     		adds	r7, r7, #16
 2086 0c5a BD46     		mov	sp, r7
 2087              		@ sp needed
 2088 0c5c 80BD     		pop	{r7, pc}
 2089              		.cfi_endproc
 2090              	.LFE65:
 2092 0c5e 00BF     		.align	2
 2093              		.global	HAL_RTC_GetAlarm
 2094              		.thumb
 2095              		.thumb_func
 2097              	HAL_RTC_GetAlarm:
 2098              	.LFB66:
1157:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****            
1158:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** /**
1159:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @brief  Gets the RTC Alarm value and masks.
1160:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @param  hrtc: RTC handle
1161:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @param  sAlarm: Pointer to Date structure
1162:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @param  Alarm: Specifies the Alarm
1163:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   *          This parameter can be one of the following values:
1164:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   *             @arg ALARM_A: AlarmA
1165:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   *             @arg ALARM_B: AlarmB  
1166:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @param  Format: Specifies the format of the entered parameters.
1167:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   *          This parameter can be one of the following values:
1168:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   *             @arg Format_BIN: Binary data format 
1169:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   *             @arg Format_BCD: BCD data format
1170:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @retval HAL status
1171:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   */
1172:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alar
1173:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** {
 2099              		.loc 1 1173 0
 2100              		.cfi_startproc
 2101              		@ args = 0, pretend = 0, frame = 24
 2102              		@ frame_needed = 1, uses_anonymous_args = 0
 2103 0c60 80B5     		push	{r7, lr}
 2104              		.cfi_def_cfa_offset 8
 2105              		.cfi_offset 7, -8
 2106              		.cfi_offset 14, -4
 2107 0c62 86B0     		sub	sp, sp, #24
 2108              		.cfi_def_cfa_offset 32
 2109 0c64 00AF     		add	r7, sp, #0
 2110              		.cfi_def_cfa_register 7
 2111 0c66 F860     		str	r0, [r7, #12]
 2112 0c68 B960     		str	r1, [r7, #8]
 2113 0c6a 7A60     		str	r2, [r7, #4]
 2114 0c6c 3B60     		str	r3, [r7]
1174:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   uint32_t tmpreg = 0;
 2115              		.loc 1 1174 0
 2116 0c6e 0023     		movs	r3, #0
 2117 0c70 7B61     		str	r3, [r7, #20]
1175:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   
1176:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   /* Check the parameters */
1177:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
1178:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   assert_param(IS_ALARM(Alarm));
1179:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   
1180:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   if(Alarm == RTC_ALARM_A)
 2118              		.loc 1 1180 0
 2119 0c72 7B68     		ldr	r3, [r7, #4]
 2120 0c74 B3F5807F 		cmp	r3, #256
 2121 0c78 08D1     		bne	.L80
1181:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   {
1182:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     /* AlarmA */
1183:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     sAlarm->Alarm = RTC_ALARM_A;
 2122              		.loc 1 1183 0
 2123 0c7a BB68     		ldr	r3, [r7, #8]
 2124 0c7c 4FF48072 		mov	r2, #256
 2125 0c80 9A61     		str	r2, [r3, #24]
1184:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     
1185:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 2126              		.loc 1 1185 0
 2127 0c82 FB68     		ldr	r3, [r7, #12]
 2128 0c84 1B68     		ldr	r3, [r3]
 2129 0c86 DB69     		ldr	r3, [r3, #28]
 2130 0c88 7B61     		str	r3, [r7, #20]
 2131 0c8a 07E0     		b	.L81
 2132              	.L80:
1186:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   }
1187:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   else
1188:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   {
1189:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     sAlarm->Alarm = RTC_ALARM_B;
 2133              		.loc 1 1189 0
 2134 0c8c BB68     		ldr	r3, [r7, #8]
 2135 0c8e 4FF40072 		mov	r2, #512
 2136 0c92 9A61     		str	r2, [r3, #24]
1190:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     
1191:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 2137              		.loc 1 1191 0
 2138 0c94 FB68     		ldr	r3, [r7, #12]
 2139 0c96 1B68     		ldr	r3, [r3]
 2140 0c98 1B6A     		ldr	r3, [r3, #32]
 2141 0c9a 7B61     		str	r3, [r7, #20]
 2142              	.L81:
1192:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   }
1193:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     
1194:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   /* Fill the structure with the read parameters */
1195:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   sAlarm->AlarmTime.Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> 16);
 2143              		.loc 1 1195 0
 2144 0c9c 7B69     		ldr	r3, [r7, #20]
 2145 0c9e 03F47C13 		and	r3, r3, #4128768
 2146 0ca2 1B0C     		lsrs	r3, r3, #16
 2147 0ca4 DAB2     		uxtb	r2, r3
 2148 0ca6 BB68     		ldr	r3, [r7, #8]
 2149 0ca8 1A70     		strb	r2, [r3]
1196:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   sAlarm->AlarmTime.Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> 8);
 2150              		.loc 1 1196 0
 2151 0caa 7B69     		ldr	r3, [r7, #20]
 2152 0cac 03F4FE43 		and	r3, r3, #32512
 2153 0cb0 1B0A     		lsrs	r3, r3, #8
 2154 0cb2 DAB2     		uxtb	r2, r3
 2155 0cb4 BB68     		ldr	r3, [r7, #8]
 2156 0cb6 5A70     		strb	r2, [r3, #1]
1197:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   sAlarm->AlarmTime.Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU));
 2157              		.loc 1 1197 0
 2158 0cb8 7B69     		ldr	r3, [r7, #20]
 2159 0cba DBB2     		uxtb	r3, r3
 2160 0cbc 03F07F03 		and	r3, r3, #127
 2161 0cc0 DAB2     		uxtb	r2, r3
 2162 0cc2 BB68     		ldr	r3, [r7, #8]
 2163 0cc4 9A70     		strb	r2, [r3, #2]
1198:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   sAlarm->AlarmTime.TimeFormat = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
 2164              		.loc 1 1198 0
 2165 0cc6 7B69     		ldr	r3, [r7, #20]
 2166 0cc8 03F48003 		and	r3, r3, #4194304
 2167 0ccc 1B0C     		lsrs	r3, r3, #16
 2168 0cce DAB2     		uxtb	r2, r3
 2169 0cd0 BB68     		ldr	r3, [r7, #8]
 2170 0cd2 DA70     		strb	r2, [r3, #3]
1199:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   sAlarm->AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24);
 2171              		.loc 1 1199 0
 2172 0cd4 7B69     		ldr	r3, [r7, #20]
 2173 0cd6 03F07C53 		and	r3, r3, #1056964608
 2174 0cda 1B0E     		lsrs	r3, r3, #24
 2175 0cdc DAB2     		uxtb	r2, r3
 2176 0cde BB68     		ldr	r3, [r7, #8]
 2177 0ce0 1A75     		strb	r2, [r3, #20]
1200:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 2178              		.loc 1 1200 0
 2179 0ce2 7B69     		ldr	r3, [r7, #20]
 2180 0ce4 03F08042 		and	r2, r3, #1073741824
 2181 0ce8 BB68     		ldr	r3, [r7, #8]
 2182 0cea 1A61     		str	r2, [r3, #16]
1201:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 2183              		.loc 1 1201 0
 2184 0cec 7B69     		ldr	r3, [r7, #20]
 2185 0cee 03F08032 		and	r2, r3, #-2139062144
 2186 0cf2 BB68     		ldr	r3, [r7, #8]
 2187 0cf4 DA60     		str	r2, [r3, #12]
1202:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     
1203:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   if(Format == FORMAT_BIN)
 2188              		.loc 1 1203 0
 2189 0cf6 3B68     		ldr	r3, [r7]
 2190 0cf8 002B     		cmp	r3, #0
 2191 0cfa 23D1     		bne	.L82
1204:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   {
1205:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 2192              		.loc 1 1205 0
 2193 0cfc BB68     		ldr	r3, [r7, #8]
 2194 0cfe 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2195 0d00 1846     		mov	r0, r3
 2196 0d02 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2197 0d06 0346     		mov	r3, r0
 2198 0d08 1A46     		mov	r2, r3
 2199 0d0a BB68     		ldr	r3, [r7, #8]
 2200 0d0c 1A70     		strb	r2, [r3]
1206:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 2201              		.loc 1 1206 0
 2202 0d0e BB68     		ldr	r3, [r7, #8]
 2203 0d10 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2204 0d12 1846     		mov	r0, r3
 2205 0d14 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2206 0d18 0346     		mov	r3, r0
 2207 0d1a 1A46     		mov	r2, r3
 2208 0d1c BB68     		ldr	r3, [r7, #8]
 2209 0d1e 5A70     		strb	r2, [r3, #1]
1207:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 2210              		.loc 1 1207 0
 2211 0d20 BB68     		ldr	r3, [r7, #8]
 2212 0d22 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 2213 0d24 1846     		mov	r0, r3
 2214 0d26 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2215 0d2a 0346     		mov	r3, r0
 2216 0d2c 1A46     		mov	r2, r3
 2217 0d2e BB68     		ldr	r3, [r7, #8]
 2218 0d30 9A70     		strb	r2, [r3, #2]
1208:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 2219              		.loc 1 1208 0
 2220 0d32 BB68     		ldr	r3, [r7, #8]
 2221 0d34 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 2222 0d36 1846     		mov	r0, r3
 2223 0d38 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2224 0d3c 0346     		mov	r3, r0
 2225 0d3e 1A46     		mov	r2, r3
 2226 0d40 BB68     		ldr	r3, [r7, #8]
 2227 0d42 1A75     		strb	r2, [r3, #20]
 2228              	.L82:
1209:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   }  
1210:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     
1211:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   return HAL_OK;
 2229              		.loc 1 1211 0
 2230 0d44 0023     		movs	r3, #0
1212:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** }
 2231              		.loc 1 1212 0
 2232 0d46 1846     		mov	r0, r3
 2233 0d48 1837     		adds	r7, r7, #24
 2234 0d4a BD46     		mov	sp, r7
 2235              		@ sp needed
 2236 0d4c 80BD     		pop	{r7, pc}
 2237              		.cfi_endproc
 2238              	.LFE66:
 2240 0d4e 00BF     		.align	2
 2241              		.global	HAL_RTC_AlarmIRQHandler
 2242              		.thumb
 2243              		.thumb_func
 2245              	HAL_RTC_AlarmIRQHandler:
 2246              	.LFB67:
1213:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** 
1214:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** /**
1215:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @brief  This function handles Alarm interrupt request.
1216:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @param  hrtc: RTC handle
1217:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @retval None
1218:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   */
1219:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
1220:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** {  
 2247              		.loc 1 1220 0
 2248              		.cfi_startproc
 2249              		@ args = 0, pretend = 0, frame = 8
 2250              		@ frame_needed = 1, uses_anonymous_args = 0
 2251 0d50 80B5     		push	{r7, lr}
 2252              		.cfi_def_cfa_offset 8
 2253              		.cfi_offset 7, -8
 2254              		.cfi_offset 14, -4
 2255 0d52 82B0     		sub	sp, sp, #8
 2256              		.cfi_def_cfa_offset 16
 2257 0d54 00AF     		add	r7, sp, #0
 2258              		.cfi_def_cfa_register 7
 2259 0d56 7860     		str	r0, [r7, #4]
1221:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   if(__HAL_RTC_ALARM_GET_IT(hrtc, RTC_IT_ALRA))
 2260              		.loc 1 1221 0
 2261 0d58 7B68     		ldr	r3, [r7, #4]
 2262 0d5a 1B68     		ldr	r3, [r3]
 2263 0d5c DB68     		ldr	r3, [r3, #12]
 2264 0d5e 03F48073 		and	r3, r3, #256
 2265 0d62 002B     		cmp	r3, #0
 2266 0d64 12D0     		beq	.L85
1222:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   {
1223:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     /* Get the status of the Interrupt */
1224:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     if((uint32_t)(hrtc->Instance->CR & RTC_IT_ALRA) != (uint32_t)RESET)
 2267              		.loc 1 1224 0
 2268 0d66 7B68     		ldr	r3, [r7, #4]
 2269 0d68 1B68     		ldr	r3, [r3]
 2270 0d6a 9B68     		ldr	r3, [r3, #8]
 2271 0d6c 03F48053 		and	r3, r3, #4096
 2272 0d70 002B     		cmp	r3, #0
 2273 0d72 0BD0     		beq	.L85
1225:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     {
1226:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       /* AlarmA callback */ 
1227:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       HAL_RTC_AlarmAEventCallback(hrtc);
 2274              		.loc 1 1227 0
 2275 0d74 7868     		ldr	r0, [r7, #4]
 2276 0d76 FFF7FEFF 		bl	HAL_RTC_AlarmAEventCallback
1228:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       
1229:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       /* Clear the Alarm interrupt pending bit */
1230:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 2277              		.loc 1 1230 0
 2278 0d7a 7B68     		ldr	r3, [r7, #4]
 2279 0d7c 1B68     		ldr	r3, [r3]
 2280 0d7e 7A68     		ldr	r2, [r7, #4]
 2281 0d80 1268     		ldr	r2, [r2]
 2282 0d82 D268     		ldr	r2, [r2, #12]
 2283 0d84 D2B2     		uxtb	r2, r2
 2284 0d86 62F4C072 		orn	r2, r2, #384
 2285 0d8a DA60     		str	r2, [r3, #12]
 2286              	.L85:
1231:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     }
1232:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   }
1233:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   
1234:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   if(__HAL_RTC_ALARM_GET_IT(hrtc, RTC_IT_ALRB))
 2287              		.loc 1 1234 0
 2288 0d8c 7B68     		ldr	r3, [r7, #4]
 2289 0d8e 1B68     		ldr	r3, [r3]
 2290 0d90 DB68     		ldr	r3, [r3, #12]
 2291 0d92 03F40073 		and	r3, r3, #512
 2292 0d96 002B     		cmp	r3, #0
 2293 0d98 12D0     		beq	.L86
1235:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   {
1236:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     /* Get the status of the Interrupt */
1237:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     if((uint32_t)(hrtc->Instance->CR & RTC_IT_ALRB) != (uint32_t)RESET)
 2294              		.loc 1 1237 0
 2295 0d9a 7B68     		ldr	r3, [r7, #4]
 2296 0d9c 1B68     		ldr	r3, [r3]
 2297 0d9e 9B68     		ldr	r3, [r3, #8]
 2298 0da0 03F40053 		and	r3, r3, #8192
 2299 0da4 002B     		cmp	r3, #0
 2300 0da6 0BD0     		beq	.L86
1238:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     {
1239:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       /* AlarmB callback */ 
1240:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       HAL_RTCEx_AlarmBEventCallback(hrtc);
 2301              		.loc 1 1240 0
 2302 0da8 7868     		ldr	r0, [r7, #4]
 2303 0daa FFF7FEFF 		bl	HAL_RTCEx_AlarmBEventCallback
1241:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       
1242:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       /* Clear the Alarm interrupt pending bit */
1243:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 2304              		.loc 1 1243 0
 2305 0dae 7B68     		ldr	r3, [r7, #4]
 2306 0db0 1B68     		ldr	r3, [r3]
 2307 0db2 7A68     		ldr	r2, [r7, #4]
 2308 0db4 1268     		ldr	r2, [r2]
 2309 0db6 D268     		ldr	r2, [r2, #12]
 2310 0db8 D2B2     		uxtb	r2, r2
 2311 0dba 62F42072 		orn	r2, r2, #640
 2312 0dbe DA60     		str	r2, [r3, #12]
 2313              	.L86:
1244:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     }
1245:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   }
1246:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   
1247:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   /* Clear the EXTI's line Flag for RTC Alarm */
1248:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   __HAL_RTC_CLEAR_FLAG(RTC_EXTI_LINE_ALARM_EVENT);
 2314              		.loc 1 1248 0
 2315 0dc0 4FF47053 		mov	r3, #15360
 2316 0dc4 C4F20103 		movt	r3, 16385
 2317 0dc8 4FF40032 		mov	r2, #131072
 2318 0dcc 5A61     		str	r2, [r3, #20]
1249:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   
1250:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   /* Change RTC state */
1251:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_READY; 
 2319              		.loc 1 1251 0
 2320 0dce 7B68     		ldr	r3, [r7, #4]
 2321 0dd0 0122     		movs	r2, #1
 2322 0dd2 5A77     		strb	r2, [r3, #29]
1252:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** }
 2323              		.loc 1 1252 0
 2324 0dd4 0837     		adds	r7, r7, #8
 2325 0dd6 BD46     		mov	sp, r7
 2326              		@ sp needed
 2327 0dd8 80BD     		pop	{r7, pc}
 2328              		.cfi_endproc
 2329              	.LFE67:
 2331 0dda 00BF     		.align	2
 2332              		.weak	HAL_RTC_AlarmAEventCallback
 2333              		.thumb
 2334              		.thumb_func
 2336              	HAL_RTC_AlarmAEventCallback:
 2337              	.LFB68:
1253:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** 
1254:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** /**
1255:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @brief  Alarm A callback.
1256:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @param  hrtc: RTC handle
1257:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @retval None
1258:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   */
1259:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** __weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
1260:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** {
 2338              		.loc 1 1260 0
 2339              		.cfi_startproc
 2340              		@ args = 0, pretend = 0, frame = 8
 2341              		@ frame_needed = 1, uses_anonymous_args = 0
 2342              		@ link register save eliminated.
 2343 0ddc 80B4     		push	{r7}
 2344              		.cfi_def_cfa_offset 4
 2345              		.cfi_offset 7, -4
 2346 0dde 83B0     		sub	sp, sp, #12
 2347              		.cfi_def_cfa_offset 16
 2348 0de0 00AF     		add	r7, sp, #0
 2349              		.cfi_def_cfa_register 7
 2350 0de2 7860     		str	r0, [r7, #4]
1261:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1262:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****             the HAL_RTC_AlarmAEventCallback could be implemented in the user file
1263:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****    */
1264:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** }
 2351              		.loc 1 1264 0
 2352 0de4 0C37     		adds	r7, r7, #12
 2353 0de6 BD46     		mov	sp, r7
 2354              		@ sp needed
 2355 0de8 5DF8047B 		ldr	r7, [sp], #4
 2356 0dec 7047     		bx	lr
 2357              		.cfi_endproc
 2358              	.LFE68:
 2360 0dee 00BF     		.align	2
 2361              		.global	HAL_RTC_PollForAlarmAEvent
 2362              		.thumb
 2363              		.thumb_func
 2365              	HAL_RTC_PollForAlarmAEvent:
 2366              	.LFB69:
1265:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** 
1266:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** /**
1267:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @brief  This function handles AlarmA Polling request.
1268:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @param  hrtc: RTC handle
1269:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @param  Timeout: Timeout duration
1270:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @retval HAL status
1271:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   */
1272:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_PollForAlarmAEvent(RTC_HandleTypeDef *hrtc, uint32_t Timeout)
1273:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** {  
 2367              		.loc 1 1273 0
 2368              		.cfi_startproc
 2369              		@ args = 0, pretend = 0, frame = 16
 2370              		@ frame_needed = 1, uses_anonymous_args = 0
 2371 0df0 80B5     		push	{r7, lr}
 2372              		.cfi_def_cfa_offset 8
 2373              		.cfi_offset 7, -8
 2374              		.cfi_offset 14, -4
 2375 0df2 84B0     		sub	sp, sp, #16
 2376              		.cfi_def_cfa_offset 24
 2377 0df4 00AF     		add	r7, sp, #0
 2378              		.cfi_def_cfa_register 7
 2379 0df6 7860     		str	r0, [r7, #4]
 2380 0df8 3960     		str	r1, [r7]
1274:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** 
1275:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   uint32_t timeout = 0; 
 2381              		.loc 1 1275 0
 2382 0dfa 0023     		movs	r3, #0
 2383 0dfc FB60     		str	r3, [r7, #12]
1276:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** 
1277:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   /* Get Timeout value */
1278:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   timeout = HAL_GetTick() + Timeout;   
 2384              		.loc 1 1278 0
 2385 0dfe FFF7FEFF 		bl	HAL_GetTick
 2386 0e02 0246     		mov	r2, r0
 2387 0e04 3B68     		ldr	r3, [r7]
 2388 0e06 1344     		add	r3, r3, r2
 2389 0e08 FB60     		str	r3, [r7, #12]
1279:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   
1280:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) == RESET)
 2390              		.loc 1 1280 0
 2391 0e0a 0EE0     		b	.L89
 2392              	.L91:
1281:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   {
1282:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     if(Timeout != HAL_MAX_DELAY)
 2393              		.loc 1 1282 0
 2394 0e0c 3B68     		ldr	r3, [r7]
 2395 0e0e B3F1FF3F 		cmp	r3, #-1
 2396 0e12 0AD0     		beq	.L89
1283:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     {
1284:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       if(HAL_GetTick() >= timeout)
 2397              		.loc 1 1284 0
 2398 0e14 FFF7FEFF 		bl	HAL_GetTick
 2399 0e18 0246     		mov	r2, r0
 2400 0e1a FB68     		ldr	r3, [r7, #12]
 2401 0e1c 9A42     		cmp	r2, r3
 2402 0e1e 04D3     		bcc	.L89
1285:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       {
1286:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
 2403              		.loc 1 1286 0
 2404 0e20 7B68     		ldr	r3, [r7, #4]
 2405 0e22 0322     		movs	r2, #3
 2406 0e24 5A77     		strb	r2, [r3, #29]
1287:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****         return HAL_TIMEOUT;
 2407              		.loc 1 1287 0
 2408 0e26 0323     		movs	r3, #3
 2409 0e28 13E0     		b	.L90
 2410              	.L89:
1280:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   {
 2411              		.loc 1 1280 0 discriminator 1
 2412 0e2a 7B68     		ldr	r3, [r7, #4]
 2413 0e2c 1B68     		ldr	r3, [r3]
 2414 0e2e DB68     		ldr	r3, [r3, #12]
 2415 0e30 03F48073 		and	r3, r3, #256
 2416 0e34 002B     		cmp	r3, #0
 2417 0e36 E9D0     		beq	.L91
1288:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       }
1289:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     }
1290:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   }
1291:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   
1292:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   /* Clear the Alarm interrupt pending bit */
1293:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 2418              		.loc 1 1293 0
 2419 0e38 7B68     		ldr	r3, [r7, #4]
 2420 0e3a 1B68     		ldr	r3, [r3]
 2421 0e3c 7A68     		ldr	r2, [r7, #4]
 2422 0e3e 1268     		ldr	r2, [r2]
 2423 0e40 D268     		ldr	r2, [r2, #12]
 2424 0e42 D2B2     		uxtb	r2, r2
 2425 0e44 62F4C072 		orn	r2, r2, #384
 2426 0e48 DA60     		str	r2, [r3, #12]
1294:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   
1295:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   /* Change RTC state */
1296:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_READY; 
 2427              		.loc 1 1296 0
 2428 0e4a 7B68     		ldr	r3, [r7, #4]
 2429 0e4c 0122     		movs	r2, #1
 2430 0e4e 5A77     		strb	r2, [r3, #29]
1297:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   
1298:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   return HAL_OK;  
 2431              		.loc 1 1298 0
 2432 0e50 0023     		movs	r3, #0
 2433              	.L90:
1299:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** }
 2434              		.loc 1 1299 0
 2435 0e52 1846     		mov	r0, r3
 2436 0e54 1037     		adds	r7, r7, #16
 2437 0e56 BD46     		mov	sp, r7
 2438              		@ sp needed
 2439 0e58 80BD     		pop	{r7, pc}
 2440              		.cfi_endproc
 2441              	.LFE69:
 2443 0e5a 00BF     		.align	2
 2444              		.global	HAL_RTC_WaitForSynchro
 2445              		.thumb
 2446              		.thumb_func
 2448              	HAL_RTC_WaitForSynchro:
 2449              	.LFB70:
1300:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** 
1301:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** /**
1302:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @}
1303:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   */
1304:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** 
1305:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** /** @defgroup RTC_Group4 Peripheral Control functions 
1306:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****  *  @brief   Peripheral Control functions 
1307:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****  *
1308:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** @verbatim   
1309:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****  ===============================================================================
1310:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****                      ##### Peripheral Control functions #####
1311:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****  ===============================================================================  
1312:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     [..]
1313:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     This subsection provides functions allowing to
1314:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       (+) Wait for RTC Time and Date Synchronization
1315:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** 
1316:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** @endverbatim
1317:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @{
1318:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   */
1319:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** 
1320:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** /**
1321:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @brief  Waits until the RTC Time and Date registers (RTC_TR and RTC_DR) are 
1322:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   *         synchronized with RTC APB clock.
1323:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @note   The RTC Resynchronization mode is write protected, use the 
1324:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function. 
1325:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @note   To read the calendar through the shadow registers after Calendar 
1326:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   *         initialization, calendar update or after wakeup from low power modes 
1327:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   *         the software must first clear the RSF flag. 
1328:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   *         The software must then wait until it is set again before reading 
1329:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   *         the calendar, which means that the calendar registers have been 
1330:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   *         correctly copied into the RTC_TR and RTC_DR shadow registers.   
1331:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @param  hrtc: RTC handle
1332:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @retval HAL status
1333:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   */
1334:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
1335:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** {
 2450              		.loc 1 1335 0
 2451              		.cfi_startproc
 2452              		@ args = 0, pretend = 0, frame = 16
 2453              		@ frame_needed = 1, uses_anonymous_args = 0
 2454 0e5c 80B5     		push	{r7, lr}
 2455              		.cfi_def_cfa_offset 8
 2456              		.cfi_offset 7, -8
 2457              		.cfi_offset 14, -4
 2458 0e5e 84B0     		sub	sp, sp, #16
 2459              		.cfi_def_cfa_offset 24
 2460 0e60 00AF     		add	r7, sp, #0
 2461              		.cfi_def_cfa_register 7
 2462 0e62 7860     		str	r0, [r7, #4]
1336:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   uint32_t timeout = 0;
 2463              		.loc 1 1336 0
 2464 0e64 0023     		movs	r3, #0
 2465 0e66 FB60     		str	r3, [r7, #12]
1337:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** 
1338:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   /* Clear RSF flag */
1339:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 2466              		.loc 1 1339 0
 2467 0e68 7B68     		ldr	r3, [r7, #4]
 2468 0e6a 1B68     		ldr	r3, [r3]
 2469 0e6c 7A68     		ldr	r2, [r7, #4]
 2470 0e6e 1268     		ldr	r2, [r2]
 2471 0e70 D268     		ldr	r2, [r2, #12]
 2472 0e72 22F0A002 		bic	r2, r2, #160
 2473 0e76 DA60     		str	r2, [r3, #12]
1340:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   
1341:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   timeout = HAL_GetTick() + RTC_TIMEOUT_VALUE;
 2474              		.loc 1 1341 0
 2475 0e78 FFF7FEFF 		bl	HAL_GetTick
 2476 0e7c 0346     		mov	r3, r0
 2477 0e7e 03F57A73 		add	r3, r3, #1000
 2478 0e82 FB60     		str	r3, [r7, #12]
1342:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** 
1343:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   /* Wait the registers to be synchronised */
1344:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 2479              		.loc 1 1344 0
 2480 0e84 07E0     		b	.L93
 2481              	.L95:
1345:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   {
1346:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     if(HAL_GetTick() >= timeout)
 2482              		.loc 1 1346 0
 2483 0e86 FFF7FEFF 		bl	HAL_GetTick
 2484 0e8a 0246     		mov	r2, r0
 2485 0e8c FB68     		ldr	r3, [r7, #12]
 2486 0e8e 9A42     		cmp	r2, r3
 2487 0e90 01D3     		bcc	.L93
1347:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     {       
1348:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       return HAL_TIMEOUT;
 2488              		.loc 1 1348 0
 2489 0e92 0323     		movs	r3, #3
 2490 0e94 07E0     		b	.L94
 2491              	.L93:
1344:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   {
 2492              		.loc 1 1344 0 discriminator 1
 2493 0e96 7B68     		ldr	r3, [r7, #4]
 2494 0e98 1B68     		ldr	r3, [r3]
 2495 0e9a DB68     		ldr	r3, [r3, #12]
 2496 0e9c 03F02003 		and	r3, r3, #32
 2497 0ea0 002B     		cmp	r3, #0
 2498 0ea2 F0D0     		beq	.L95
1349:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     } 
1350:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   }
1351:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** 
1352:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   return HAL_OK;
 2499              		.loc 1 1352 0
 2500 0ea4 0023     		movs	r3, #0
 2501              	.L94:
1353:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** }
 2502              		.loc 1 1353 0
 2503 0ea6 1846     		mov	r0, r3
 2504 0ea8 1037     		adds	r7, r7, #16
 2505 0eaa BD46     		mov	sp, r7
 2506              		@ sp needed
 2507 0eac 80BD     		pop	{r7, pc}
 2508              		.cfi_endproc
 2509              	.LFE70:
 2511 0eae 00BF     		.align	2
 2512              		.global	HAL_RTC_GetState
 2513              		.thumb
 2514              		.thumb_func
 2516              	HAL_RTC_GetState:
 2517              	.LFB71:
1354:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** 
1355:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** /** @defgroup RTC_Group5 Peripheral State functions 
1356:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****  *  @brief   Peripheral State functions 
1357:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****  *
1358:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** @verbatim   
1359:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****  ===============================================================================
1360:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****                      ##### Peripheral State functions #####
1361:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****  ===============================================================================  
1362:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     [..]
1363:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     This subsection provides functions allowing to
1364:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       (+) Get RTC state
1365:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** 
1366:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** @endverbatim
1367:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @{
1368:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   */
1369:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** /**
1370:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @brief  Returns the Alarm state.
1371:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @param  hrtc: RTC handle
1372:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @retval HAL state
1373:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   */
1374:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** HAL_RTCStateTypeDef HAL_RTC_GetState(RTC_HandleTypeDef* hrtc)
1375:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** {
 2518              		.loc 1 1375 0
 2519              		.cfi_startproc
 2520              		@ args = 0, pretend = 0, frame = 8
 2521              		@ frame_needed = 1, uses_anonymous_args = 0
 2522              		@ link register save eliminated.
 2523 0eb0 80B4     		push	{r7}
 2524              		.cfi_def_cfa_offset 4
 2525              		.cfi_offset 7, -4
 2526 0eb2 83B0     		sub	sp, sp, #12
 2527              		.cfi_def_cfa_offset 16
 2528 0eb4 00AF     		add	r7, sp, #0
 2529              		.cfi_def_cfa_register 7
 2530 0eb6 7860     		str	r0, [r7, #4]
1376:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   return hrtc->State;
 2531              		.loc 1 1376 0
 2532 0eb8 7B68     		ldr	r3, [r7, #4]
 2533 0eba 5B7F     		ldrb	r3, [r3, #29]
 2534 0ebc DBB2     		uxtb	r3, r3
1377:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** }
 2535              		.loc 1 1377 0
 2536 0ebe 1846     		mov	r0, r3
 2537 0ec0 0C37     		adds	r7, r7, #12
 2538 0ec2 BD46     		mov	sp, r7
 2539              		@ sp needed
 2540 0ec4 5DF8047B 		ldr	r7, [sp], #4
 2541 0ec8 7047     		bx	lr
 2542              		.cfi_endproc
 2543              	.LFE71:
 2545 0eca 00BF     		.align	2
 2546              		.global	RTC_EnterInitMode
 2547              		.thumb
 2548              		.thumb_func
 2550              	RTC_EnterInitMode:
 2551              	.LFB72:
1378:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** 
1379:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** /**
1380:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @}
1381:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   */
1382:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** 
1383:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** /**
1384:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @brief  Enters the RTC Initialization mode.
1385:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @note   The RTC Initialization mode is write protected, use the
1386:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
1387:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @param  hrtc: RTC handle
1388:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @retval HAL status
1389:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   */
1390:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
1391:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** {
 2552              		.loc 1 1391 0
 2553              		.cfi_startproc
 2554              		@ args = 0, pretend = 0, frame = 16
 2555              		@ frame_needed = 1, uses_anonymous_args = 0
 2556 0ecc 80B5     		push	{r7, lr}
 2557              		.cfi_def_cfa_offset 8
 2558              		.cfi_offset 7, -8
 2559              		.cfi_offset 14, -4
 2560 0ece 84B0     		sub	sp, sp, #16
 2561              		.cfi_def_cfa_offset 24
 2562 0ed0 00AF     		add	r7, sp, #0
 2563              		.cfi_def_cfa_register 7
 2564 0ed2 7860     		str	r0, [r7, #4]
1392:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   uint32_t timeout = 0; 
 2565              		.loc 1 1392 0
 2566 0ed4 0023     		movs	r3, #0
 2567 0ed6 FB60     		str	r3, [r7, #12]
1393:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   
1394:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   /* Check if the Initialization mode is set */
1395:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 2568              		.loc 1 1395 0
 2569 0ed8 7B68     		ldr	r3, [r7, #4]
 2570 0eda 1B68     		ldr	r3, [r3]
 2571 0edc DB68     		ldr	r3, [r3, #12]
 2572 0ede 03F04003 		and	r3, r3, #64
 2573 0ee2 002B     		cmp	r3, #0
 2574 0ee4 1AD1     		bne	.L99
1396:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   {
1397:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     /* Set the Initialization mode */
1398:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 2575              		.loc 1 1398 0
 2576 0ee6 7B68     		ldr	r3, [r7, #4]
 2577 0ee8 1B68     		ldr	r3, [r3]
 2578 0eea 4FF0FF32 		mov	r2, #-1
 2579 0eee DA60     		str	r2, [r3, #12]
1399:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     
1400:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     timeout = HAL_GetTick() + RTC_TIMEOUT_VALUE;
 2580              		.loc 1 1400 0
 2581 0ef0 FFF7FEFF 		bl	HAL_GetTick
 2582 0ef4 0346     		mov	r3, r0
 2583 0ef6 03F57A73 		add	r3, r3, #1000
 2584 0efa FB60     		str	r3, [r7, #12]
1401:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     /* Wait till RTC is in INIT state and if Time out is reached exit */
1402:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 2585              		.loc 1 1402 0
 2586 0efc 07E0     		b	.L100
 2587              	.L102:
1403:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     {
1404:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       if(HAL_GetTick() >= timeout)
 2588              		.loc 1 1404 0
 2589 0efe FFF7FEFF 		bl	HAL_GetTick
 2590 0f02 0246     		mov	r2, r0
 2591 0f04 FB68     		ldr	r3, [r7, #12]
 2592 0f06 9A42     		cmp	r2, r3
 2593 0f08 01D3     		bcc	.L100
1405:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       {       
1406:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****         return HAL_TIMEOUT;
 2594              		.loc 1 1406 0
 2595 0f0a 0323     		movs	r3, #3
 2596 0f0c 07E0     		b	.L101
 2597              	.L100:
1402:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     {
 2598              		.loc 1 1402 0 discriminator 1
 2599 0f0e 7B68     		ldr	r3, [r7, #4]
 2600 0f10 1B68     		ldr	r3, [r3]
 2601 0f12 DB68     		ldr	r3, [r3, #12]
 2602 0f14 03F04003 		and	r3, r3, #64
 2603 0f18 002B     		cmp	r3, #0
 2604 0f1a F0D0     		beq	.L102
 2605              	.L99:
1407:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****       } 
1408:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     }
1409:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   }
1410:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   
1411:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   return HAL_OK;  
 2606              		.loc 1 1411 0
 2607 0f1c 0023     		movs	r3, #0
 2608              	.L101:
1412:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** }
 2609              		.loc 1 1412 0
 2610 0f1e 1846     		mov	r0, r3
 2611 0f20 1037     		adds	r7, r7, #16
 2612 0f22 BD46     		mov	sp, r7
 2613              		@ sp needed
 2614 0f24 80BD     		pop	{r7, pc}
 2615              		.cfi_endproc
 2616              	.LFE72:
 2618 0f26 00BF     		.align	2
 2619              		.global	RTC_ByteToBcd2
 2620              		.thumb
 2621              		.thumb_func
 2623              	RTC_ByteToBcd2:
 2624              	.LFB73:
1413:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** 
1414:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** 
1415:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** /**
1416:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @brief  Converts a 2 digit decimal to BCD format.
1417:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @param  Value: Byte to be converted
1418:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @retval Converted byte
1419:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   */
1420:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** uint8_t RTC_ByteToBcd2(uint8_t Value)
1421:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** {
 2625              		.loc 1 1421 0
 2626              		.cfi_startproc
 2627              		@ args = 0, pretend = 0, frame = 16
 2628              		@ frame_needed = 1, uses_anonymous_args = 0
 2629              		@ link register save eliminated.
 2630 0f28 80B4     		push	{r7}
 2631              		.cfi_def_cfa_offset 4
 2632              		.cfi_offset 7, -4
 2633 0f2a 85B0     		sub	sp, sp, #20
 2634              		.cfi_def_cfa_offset 24
 2635 0f2c 00AF     		add	r7, sp, #0
 2636              		.cfi_def_cfa_register 7
 2637 0f2e 0346     		mov	r3, r0
 2638 0f30 FB71     		strb	r3, [r7, #7]
1422:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   uint32_t bcdhigh = 0;
 2639              		.loc 1 1422 0
 2640 0f32 0023     		movs	r3, #0
 2641 0f34 FB60     		str	r3, [r7, #12]
1423:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   
1424:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   while(Value >= 10)
 2642              		.loc 1 1424 0
 2643 0f36 05E0     		b	.L104
 2644              	.L105:
1425:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   {
1426:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     bcdhigh++;
 2645              		.loc 1 1426 0
 2646 0f38 FB68     		ldr	r3, [r7, #12]
 2647 0f3a 0133     		adds	r3, r3, #1
 2648 0f3c FB60     		str	r3, [r7, #12]
1427:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****     Value -= 10;
 2649              		.loc 1 1427 0
 2650 0f3e FB79     		ldrb	r3, [r7, #7]
 2651 0f40 0A3B     		subs	r3, r3, #10
 2652 0f42 FB71     		strb	r3, [r7, #7]
 2653              	.L104:
1424:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   {
 2654              		.loc 1 1424 0 discriminator 1
 2655 0f44 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2656 0f46 092B     		cmp	r3, #9
 2657 0f48 F6D8     		bhi	.L105
1428:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   }
1429:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   
1430:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   return  ((uint8_t)(bcdhigh << 4) | Value);
 2658              		.loc 1 1430 0
 2659 0f4a FB68     		ldr	r3, [r7, #12]
 2660 0f4c DBB2     		uxtb	r3, r3
 2661 0f4e 1B01     		lsls	r3, r3, #4
 2662 0f50 DAB2     		uxtb	r2, r3
 2663 0f52 FB79     		ldrb	r3, [r7, #7]
 2664 0f54 1343     		orrs	r3, r3, r2
 2665 0f56 DBB2     		uxtb	r3, r3
1431:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** }
 2666              		.loc 1 1431 0
 2667 0f58 1846     		mov	r0, r3
 2668 0f5a 1437     		adds	r7, r7, #20
 2669 0f5c BD46     		mov	sp, r7
 2670              		@ sp needed
 2671 0f5e 5DF8047B 		ldr	r7, [sp], #4
 2672 0f62 7047     		bx	lr
 2673              		.cfi_endproc
 2674              	.LFE73:
 2676              		.align	2
 2677              		.global	RTC_Bcd2ToByte
 2678              		.thumb
 2679              		.thumb_func
 2681              	RTC_Bcd2ToByte:
 2682              	.LFB74:
1432:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** 
1433:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** /**
1434:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @brief  Converts from 2 digit BCD to Binary.
1435:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @param  Value: BCD value to be converted
1436:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   * @retval Converted word
1437:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   */
1438:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** uint8_t RTC_Bcd2ToByte(uint8_t Value)
1439:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** {
 2683              		.loc 1 1439 0
 2684              		.cfi_startproc
 2685              		@ args = 0, pretend = 0, frame = 16
 2686              		@ frame_needed = 1, uses_anonymous_args = 0
 2687              		@ link register save eliminated.
 2688 0f64 80B4     		push	{r7}
 2689              		.cfi_def_cfa_offset 4
 2690              		.cfi_offset 7, -4
 2691 0f66 85B0     		sub	sp, sp, #20
 2692              		.cfi_def_cfa_offset 24
 2693 0f68 00AF     		add	r7, sp, #0
 2694              		.cfi_def_cfa_register 7
 2695 0f6a 0346     		mov	r3, r0
 2696 0f6c FB71     		strb	r3, [r7, #7]
1440:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   uint32_t tmp = 0;
 2697              		.loc 1 1440 0
 2698 0f6e 0023     		movs	r3, #0
 2699 0f70 FB60     		str	r3, [r7, #12]
1441:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 2700              		.loc 1 1441 0
 2701 0f72 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2702 0f74 1B09     		lsrs	r3, r3, #4
 2703 0f76 DBB2     		uxtb	r3, r3
 2704 0f78 1A46     		mov	r2, r3
 2705 0f7a 1346     		mov	r3, r2
 2706 0f7c 9B00     		lsls	r3, r3, #2
 2707 0f7e 1344     		add	r3, r3, r2
 2708 0f80 5B00     		lsls	r3, r3, #1
 2709 0f82 FB60     		str	r3, [r7, #12]
1442:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c ****   return (tmp + (Value & (uint8_t)0x0F));
 2710              		.loc 1 1442 0
 2711 0f84 FB79     		ldrb	r3, [r7, #7]
 2712 0f86 03F00F03 		and	r3, r3, #15
 2713 0f8a DAB2     		uxtb	r2, r3
 2714 0f8c FB68     		ldr	r3, [r7, #12]
 2715 0f8e DBB2     		uxtb	r3, r3
 2716 0f90 1344     		add	r3, r3, r2
 2717 0f92 DBB2     		uxtb	r3, r3
1443:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rtc.c **** }
 2718              		.loc 1 1443 0
 2719 0f94 1846     		mov	r0, r3
 2720 0f96 1437     		adds	r7, r7, #20
 2721 0f98 BD46     		mov	sp, r7
 2722              		@ sp needed
 2723 0f9a 5DF8047B 		ldr	r7, [sp], #4
 2724 0f9e 7047     		bx	lr
 2725              		.cfi_endproc
 2726              	.LFE74:
 2728              	.Letext0:
 2729              		.file 2 "c:\\program files (x86)\\codesourcery\\arm-none-eabi\\include\\stdint.h"
 2730              		.file 3 "D:\\workspace\\console800480\\system/stm32f217xx.h"
 2731              		.file 4 "D:\\workspace\\console800480\\system/stm32f2xx.h"
 2732              		.file 5 "D:\\workspace\\console800480\\STM32F2xx_HAL_Driver\\Inc/stm32f2xx_hal_def.h"
 2733              		.file 6 "D:\\workspace\\console800480\\STM32F2xx_HAL_Driver\\Inc/stm32f2xx_hal_rtc.h"
 2734              		.file 7 "D:\\workspace\\console800480\\system/core_cm3.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f2xx_hal_rtc.c
C:\Users\sagok\AppData\Local\Temp\ccQCUb5a.s:18     .text:00000000 $t
C:\Users\sagok\AppData\Local\Temp\ccQCUb5a.s:23     .text:00000000 HAL_RTC_Init
C:\Users\sagok\AppData\Local\Temp\ccQCUb5a.s:381    .text:0000021c HAL_RTC_MspInit
C:\Users\sagok\AppData\Local\Temp\ccQCUb5a.s:2550   .text:00000ecc RTC_EnterInitMode
C:\Users\sagok\AppData\Local\Temp\ccQCUb5a.s:183    .text:000000f0 HAL_RTC_DeInit
C:\Users\sagok\AppData\Local\Temp\ccQCUb5a.s:2448   .text:00000e5c HAL_RTC_WaitForSynchro
C:\Users\sagok\AppData\Local\Temp\ccQCUb5a.s:410    .text:00000230 HAL_RTC_MspDeInit
C:\Users\sagok\AppData\Local\Temp\ccQCUb5a.s:439    .text:00000244 HAL_RTC_SetTime
C:\Users\sagok\AppData\Local\Temp\ccQCUb5a.s:2623   .text:00000f28 RTC_ByteToBcd2
C:\Users\sagok\AppData\Local\Temp\ccQCUb5a.s:2681   .text:00000f64 RTC_Bcd2ToByte
C:\Users\sagok\AppData\Local\Temp\ccQCUb5a.s:691    .text:000003c0 HAL_RTC_GetTime
C:\Users\sagok\AppData\Local\Temp\ccQCUb5a.s:794    .text:00000460 HAL_RTC_SetDate
C:\Users\sagok\AppData\Local\Temp\ccQCUb5a.s:1026   .text:000005bc HAL_RTC_GetDate
C:\Users\sagok\AppData\Local\Temp\ccQCUb5a.s:1129   .text:0000065c HAL_RTC_SetAlarm
C:\Users\sagok\AppData\Local\Temp\ccQCUb5a.s:1501   .text:000008a4 HAL_RTC_SetAlarm_IT
C:\Users\sagok\AppData\Local\Temp\ccQCUb5a.s:1907   .text:00000b40 HAL_RTC_DeactivateAlarm
C:\Users\sagok\AppData\Local\Temp\ccQCUb5a.s:2097   .text:00000c60 HAL_RTC_GetAlarm
C:\Users\sagok\AppData\Local\Temp\ccQCUb5a.s:2245   .text:00000d50 HAL_RTC_AlarmIRQHandler
C:\Users\sagok\AppData\Local\Temp\ccQCUb5a.s:2336   .text:00000ddc HAL_RTC_AlarmAEventCallback
C:\Users\sagok\AppData\Local\Temp\ccQCUb5a.s:2365   .text:00000df0 HAL_RTC_PollForAlarmAEvent
C:\Users\sagok\AppData\Local\Temp\ccQCUb5a.s:2516   .text:00000eb0 HAL_RTC_GetState
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.7f551ac7fcad8b79b9df4bfdaa536673
                           .group:00000000 wm4.stm32f2xx_hal_conf.h.40.007126baefb9f966c36646edbf8040d2
                           .group:00000000 wm4.stm32f2xx.h.57.5ec1581efc43612c411d33a8686e9ec7
                           .group:00000000 wm4.stm32f217xx.h.52.9c940d76d00294b78837dc334c172fdd
                           .group:00000000 wm4.core_cm3.h.32.49180ccb4d36cabd2d7016d2a51d91ae
                           .group:00000000 wm4.newlib.h.8.384a112feabb3bef7b573ae48cde2e3b
                           .group:00000000 wm4.features.h.22.6a4ca7cd053637cc1d0db6c16f39b2d7
                           .group:00000000 wm4.config.h.183.aa62afef667fb61d15fa64c48beb2f14
                           .group:00000000 wm4._ansi.h.23.5644b60c990a4800b02a6e654e88f93a
                           .group:00000000 wm4.stdint.h.20.54ad762faa59e3c05491630641c8d8bf
                           .group:00000000 wm4.core_cmInstr.h.25.f50f886f2edf670cf199b35fd96f5c91
                           .group:00000000 wm4.core_cm3.h.130.63ab2348a6eed0fdb318040d970b676c
                           .group:00000000 wm4.stm32f217xx.h.978.a5c681952b2f704a0e7f2ba21d08adf5
                           .group:00000000 wm4.stm32f2xx.h.142.bc2155a1f7498bab16371e38413a9e41
                           .group:00000000 wm4.stm32f2xx_hal_def.h.74.8ad2dc8aa82c4fd02e5aeaae592641ba
                           .group:00000000 wm4.stm32f2xx_hal_rcc.h.142.ec0f91cc6576a6acebd17e6dd85829ae
                           .group:00000000 wm4.stm32f2xx_hal_rcc_ex.h.40.0829033e864455c6bdd0db01f8ba5a50
                           .group:00000000 wm4.stm32f2xx_hal_gpio.h.40.ba64e0bb94d9a68835f80159f39a86f1
                           .group:00000000 wm4.stm32f2xx_hal_gpio_ex.h.40.24e547fd402281923f446b510381083f
                           .group:00000000 wm4.stm32f2xx_hal_dma.h.40.5d9732ace2a21a4526ce8f0c52428fff
                           .group:00000000 wm4.stm32f2xx_hal_cortex.h.40.e10263d2ec5d4fa79b4180ce1a38aff1
                           .group:00000000 wm4.stm32f2xx_hal_adc.h.40.89ac8b78113cac4cf63847587daabac9
                           .group:00000000 wm4.stm32f2xx_hal_adc_ex.h.40.7de68ed256ef25526ee31cc017f2c291
                           .group:00000000 wm4.stm32f2xx_hal_flash.h.40.c3171719ce015e9cff20c795e44e886d
                           .group:00000000 wm4.stm32f2xx_hal_flash_ex.h.40.7389508bd24a0aeb077bde0c9fb651eb
                           .group:00000000 wm4.stm32f2xx_ll_fsmc.h.40.c1c32f2e1862f4dd342bd9b80fb895bb
                           .group:00000000 wm4.stm32f2xx_hal_pwr.h.40.812df32e5c31b609a128e9db0eb4cbd0
                           .group:00000000 wm4.stm32f2xx_hal_rtc.h.40.850fda5fe2cce8797446913dee18382f
                           .group:00000000 wm4.stm32f2xx_hal_rtc_ex.h.40.f3e0c408e3bf4e8a0352d7ec9a18a822
                           .group:00000000 wm4.stm32f2xx_ll_sdmmc.h.40.3719ab487c4b77401c572f459adf6eb7
                           .group:00000000 wm4.stm32f2xx_hal_sd.h.58.760215394dcc316161a6482c0af9b866
                           .group:00000000 wm4.stm32f2xx_hal_spi.h.40.7984243dbaba8b21c6392998a47e6987
                           .group:00000000 wm4.stm32f2xx_hal_tim.h.40.d79172f25d0e9a15dc346aba8515bdd6
                           .group:00000000 wm4.stm32f2xx_hal_tim_ex.h.40.361f280a7a3f60b4b238bb99ca728d83
                           .group:00000000 wm4.stm32f2xx_hal_uart.h.40.d74def561ae6f78f40f477c8426ecbef
                           .group:00000000 wm4.stm32f2xx_ll_usb.h.40.9b0206a05bc6ce3bec1648b51f22cb81
                           .group:00000000 wm4.stm32f2xx_hal_pcd.h.99.11faba414c39e357b2f23364912d0605
                           .group:00000000 wm4.stm32f2xx_hal_hcd.h.40.44ee5e972983ae0139ddbacdc75c44ef
                           .group:00000000 wm4.stm32f2xx_hal.h.64.ed79ee83e52b151b3c365392b398f866

UNDEFINED SYMBOLS
HAL_GetTick
HAL_RTCEx_AlarmBEventCallback
