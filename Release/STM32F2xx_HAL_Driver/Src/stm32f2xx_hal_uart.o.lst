   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f2xx_hal_uart.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.align	2
  19              		.global	HAL_UART_Init
  20              		.thumb
  21              		.thumb_func
  23              	HAL_UART_Init:
  24              	.LFB55:
  25              		.file 1 "../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c"
   1:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** /**
   2:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   ******************************************************************************
   3:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @file    stm32f2xx_hal_uart.c
   4:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @author  MCD Application Team
   5:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @version V1.0.1
   6:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @date    25-March-2014
   7:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @brief   UART HAL module driver.
   8:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   *          This file provides firmware functions to manage the following 
   9:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   *          functionalities of the Universal Asynchronous Receiver Transmitter (UART) peripheral:
  10:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   *           + Initialization and de-initialization functions
  11:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   *           + IO operation functions
  12:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   *           + Peripheral Control functions  
  13:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   *           + Peripheral State and Errors functions  
  14:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   *           
  15:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   @verbatim       
  16:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   ==============================================================================
  17:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****                         ##### How to use this driver #####
  18:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   ==============================================================================
  19:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   [..]
  20:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     The UART HAL driver can be used as follows:
  21:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     
  22:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     (#) Declare a UART_HandleTypeDef handle structure.
  23:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
  24:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     (#) Initialize the UART low level resources by implement the HAL_UART_MspInit() API:
  25:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         (##) Enable the USARTx interface clock.
  26:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         (##) UART pins configuration:
  27:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****             (+++) Enable the clock for the UART GPIOs.
  28:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****             (+++) Configure these UART pins as alternate function pull-up.
  29:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         (##) NVIC configuration if you need to use interrupt process (HAL_UART_Transmit_IT()
  30:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****              and HAL_UART_Receive_IT() APIs):
  31:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****             (+++) Configure the USARTx interrupt priority.
  32:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****             (+++) Enable the NVIC USART IRQ handle.
  33:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         (##) DMA Configuration if you need to use DMA process (HAL_UART_Transmit_DMA()
  34:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****              and HAL_UART_Receive_DMA() APIs):
  35:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****             (+++) Declare a DMA handle structure for the Tx/Rx stream.
  36:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****             (+++) Enable the DMAx interface clock.
  37:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****             (+++) Configure the declared DMA handle structure with the required 
  38:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****                   Tx/Rx parameters.                
  39:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****             (+++) Configure the DMA Tx/Rx Stream.
  40:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****             (+++) Associate the initialized DMA handle to the UART DMA Tx/Rx handle.
  41:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****             (+++) Configure the priority and enable the NVIC for the transfer complete 
  42:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****                   interrupt on the DMA Tx/Rx Stream.
  43:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
  44:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     (#) Program the Baud Rate, Word Length, Stop Bit, Parity, Hardware 
  45:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         flow control and Mode(Receiver/Transmitter) in the huart Init structure.
  46:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
  47:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     (#) For the UART asynchronous mode, initialize the UART registers by calling
  48:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         the HAL_UART_Init() API.
  49:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     
  50:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     (#) For the UART Half duplex mode, initialize the UART registers by calling 
  51:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         the HAL_HalfDuplex_Init() API.
  52:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     
  53:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     (#) For the LIN mode, initialize the UART registers by calling the HAL_LIN_Init() API.
  54:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     
  55:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     (#) For the Multi-Processor mode, initialize the UART registers by calling 
  56:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         the HAL_MultiProcessor_Init() API.
  57:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         
  58:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         -@- The specific UART interrupts (Transmission complete interrupt, 
  59:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****             RXNE interrupt and Error Interrupts) will be managed using the macros
  60:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****             __HAL_UART_ENABLE_IT() and __HAL_UART_DISABLE_IT() inside the transmit 
  61:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****             and receive process.
  62:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****           
  63:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         -@- These API's(HAL_UART_Init() and HAL_HalfDuplex_Init()) configures also the 
  64:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****             low level Hardware GPIO, CLOCK, CORTEX...etc) by calling the customed 
  65:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****             HAL_UART_MspInit() API.
  66:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****           
  67:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     (#) Three mode of operations are available within this driver :     
  68:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
  69:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****      *** Polling mode IO operation ***
  70:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****      =================================
  71:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****      [..]    
  72:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****        (+) Send an amount of data in blocking mode using HAL_UART_Transmit() 
  73:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****        (+) Receive an amount of data in blocking mode using HAL_UART_Receive()
  74:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****        
  75:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****      *** Interrupt mode IO operation ***    
  76:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****      ===================================
  77:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****      [..]    
  78:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****        (+) Send an amount of data in non blocking mode using HAL_UART_Transmit_IT() 
  79:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****        (+) At transmission end of half transfer HAL_UART_TxHalfCpltCallback is executed and user ca
  80:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_TxHalfCpltCallback 
  81:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****        (+) At transmission end of transfer HAL_UART_TxCpltCallback is executed and user can 
  82:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_TxCpltCallback
  83:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****        (+) Receive an amount of data in non blocking mode using HAL_UART_Receive_IT() 
  84:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****        (+) At reception end of half transfer HAL_UART_RxHalfCpltCallback is executed and user can 
  85:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_RxHalfCpltCallback 
  86:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****        (+) At reception end of transfer HAL_UART_RxCpltCallback is executed and user can 
  87:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_RxCpltCallback          
  88:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****        (+) In case of transfer Error, HAL_UART_ErrorCallback() function is executed and user can 
  89:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_ErrorCallback
  90:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
  91:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****      *** DMA mode IO operation ***    
  92:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****      ==============================
  93:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****      [..] 
  94:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****        (+) Send an amount of data in non blocking mode (DMA) using HAL_UART_Transmit_DMA() 
  95:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****        (+) At transmission end of half transfer HAL_UART_TxHalfCpltCallback is executed and user ca
  96:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_TxHalfCpltCallback 
  97:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****        (+) At transmission end of transfer HAL_UART_TxCpltCallback is executed and user can 
  98:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_TxCpltCallback
  99:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****        (+) Receive an amount of data in non blocking mode (DMA) using HAL_UART_Receive_DMA() 
 100:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****        (+) At reception end of half transfer HAL_UART_RxHalfCpltCallback is executed and user can 
 101:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_RxHalfCpltCallback 
 102:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****        (+) At reception end of transfer HAL_UART_RxCpltCallback is executed and user can 
 103:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_RxCpltCallback          
 104:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****        (+) In case of transfer Error, HAL_UART_ErrorCallback() function is executed and user can 
 105:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_ErrorCallback
 106:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****        (+) Pause the DMA Transfer using HAL_UART_DMAPause()      
 107:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****        (+) Resume the DMA Transfer using HAL_UART_DMAResume()  
 108:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****        (+) Stop the DMA Transfer using HAL_UART_DMAStop()      
 109:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     
 110:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****      *** UART HAL driver macros list ***
 111:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****      ============================================= 
 112:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****      [..]
 113:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****        Below the list of most used macros in UART HAL driver.
 114:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****        
 115:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       (+) __HAL_UART_ENABLE: Enable the UART peripheral 
 116:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       (+) __HAL_UART_DISABLE: Disable the UART peripheral     
 117:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       (+) __HAL_UART_GET_FLAG : Checks whether the specified UART flag is set or not
 118:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       (+) __HAL_UART_CLEAR_FLAG : Clears the specified UART pending flag
 119:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       (+) __HAL_UART_ENABLE_IT: Enables the specified UART interrupt
 120:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       (+) __HAL_UART_DISABLE_IT: Disables the specified UART interrupt
 121:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       
 122:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****      [..] 
 123:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****        (@) You can refer to the UART HAL driver header file for more useful macros 
 124:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       
 125:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   @endverbatim
 126:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   ******************************************************************************
 127:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @attention
 128:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   *
 129:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * <h2><center>&copy; COPYRIGHT(c) 2014 STMicroelectronics</center></h2>
 130:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   *
 131:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * Redistribution and use in source and binary forms, with or without modification,
 132:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * are permitted provided that the following conditions are met:
 133:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   *   1. Redistributions of source code must retain the above copyright notice,
 134:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   *      this list of conditions and the following disclaimer.
 135:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
 136:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   *      this list of conditions and the following disclaimer in the documentation
 137:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   *      and/or other materials provided with the distribution.
 138:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
 139:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   *      may be used to endorse or promote products derived from this software
 140:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   *      without specific prior written permission.
 141:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   *
 142:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 143:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 144:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 145:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 146:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 147:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 148:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 149:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 150:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 151:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 152:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   *
 153:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   ******************************************************************************
 154:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   */ 
 155:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
 156:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** /* Includes ------------------------------------------------------------------*/
 157:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** #include "stm32f2xx_hal.h"
 158:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** #include "LEDs.h"
 159:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
 160:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** /** @addtogroup STM32F2xx_HAL_Driver
 161:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @{
 162:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   */
 163:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
 164:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** /** @defgroup UART 
 165:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @brief HAL UART module driver
 166:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @{
 167:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   */
 168:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** #ifdef HAL_UART_MODULE_ENABLED
 169:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     
 170:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** /* Private typedef -----------------------------------------------------------*/
 171:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** /* Private define ------------------------------------------------------------*/
 172:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** #define UART_TIMEOUT_VALUE  22000
 173:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** /* Private macro -------------------------------------------------------------*/
 174:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** /* Private variables ---------------------------------------------------------*/
 175:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** /* Private function prototypes -----------------------------------------------*/
 176:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** static void UART_SetConfig (UART_HandleTypeDef *huart);
 177:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart);
 178:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart);
 179:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma);
 180:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma);
 181:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma);
 182:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma);
 183:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** static void UART_DMAError(DMA_HandleTypeDef *hdma); 
 184:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, Flag
 185:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
 186:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** /* Private functions ---------------------------------------------------------*/
 187:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
 188:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** /** @defgroup UART_Private_Functions
 189:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @{
 190:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   */
 191:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
 192:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** /** @defgroup UART_Group1 Initialization and de-initialization functions 
 193:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   *  @brief    Initialization and Configuration functions 
 194:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   *
 195:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** @verbatim    
 196:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** ===============================================================================
 197:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****             ##### Initialization and Configuration functions #####
 198:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****  ===============================================================================  
 199:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     [..]
 200:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     This subsection provides a set of functions allowing to initialize the USARTx or the UARTy 
 201:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     in asynchronous mode.
 202:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       (+) For the asynchronous mode only these parameters can be configured: 
 203:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         (++) Baud Rate
 204:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         (++) Word Length 
 205:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         (++) Stop Bit
 206:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         (++) Parity: If the parity is enabled, then the MSB bit of the data written
 207:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****              in the data register is transmitted but is changed by the parity bit.
 208:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****              Depending on the frame length defined by the M bit (8-bits or 9-bits),
 209:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****              the possible UART frame formats are as listed in the following table:
 210:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****    +-------------------------------------------------------------+     
 211:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****    |   M bit |  PCE bit  |            UART frame                 |
 212:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****    |---------------------|---------------------------------------|             
 213:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****    |    0    |    0      |    | SB | 8 bit data | STB |          |
 214:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****    |---------|-----------|---------------------------------------|  
 215:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****    |    0    |    1      |    | SB | 7 bit data | PB | STB |     |
 216:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****    |---------|-----------|---------------------------------------|  
 217:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****    |    1    |    0      |    | SB | 9 bit data | STB |          |
 218:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****    |---------|-----------|---------------------------------------|  
 219:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****    |    1    |    1      |    | SB | 8 bit data | PB | STB |     |
 220:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****    +-------------------------------------------------------------+            
 221:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         (++) Hardware flow control
 222:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         (++) Receiver/transmitter modes
 223:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         (++) Over Sampling Methode
 224:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     [..]
 225:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     The HAL_UART_Init(), HAL_HalfDuplex_Init(), HAL_LIN_Init() and HAL_MultiProcessor_Init() APIs 
 226:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     follow respectively the UART asynchronous, UART Half duplex, LIN and Multi-Processor
 227:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     configuration procedures (details for the procedures are available in reference manual (RM0329)
 228:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
 229:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** @endverbatim
 230:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @{
 231:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   */
 232:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
 233:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** /**
 234:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @brief  Initializes the UART mode according to the specified parameters in
 235:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   *         the UART_InitTypeDef and create the associated handle.
 236:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @param  huart: UART handle
 237:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @retval HAL status
 238:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   */
 239:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
 240:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** {
  26              		.loc 1 240 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 8
  29              		@ frame_needed = 1, uses_anonymous_args = 0
  30 0000 80B5     		push	{r7, lr}
  31              		.cfi_def_cfa_offset 8
  32              		.cfi_offset 7, -8
  33              		.cfi_offset 14, -4
  34 0002 82B0     		sub	sp, sp, #8
  35              		.cfi_def_cfa_offset 16
  36 0004 00AF     		add	r7, sp, #0
  37              		.cfi_def_cfa_register 7
  38 0006 7860     		str	r0, [r7, #4]
 241:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* Check the UART handle allocation */
 242:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   if(huart == NULL)
  39              		.loc 1 242 0
  40 0008 7B68     		ldr	r3, [r7, #4]
  41 000a 002B     		cmp	r3, #0
  42 000c 01D1     		bne	.L2
 243:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   {
 244:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     return HAL_ERROR;
  43              		.loc 1 244 0
  44 000e 0123     		movs	r3, #1
  45 0010 38E0     		b	.L3
  46              	.L2:
 245:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   }
 246:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
 247:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   if(huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 248:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   {
 249:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     /* Check the parameters */
 250:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 251:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   }
 252:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   else
 253:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   {
 254:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     /* Check the parameters */
 255:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     assert_param(IS_UART_INSTANCE(huart->Instance));
 256:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   }
 257:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
 258:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   if(huart->State == HAL_UART_STATE_RESET)
  47              		.loc 1 258 0
  48 0012 7B68     		ldr	r3, [r7, #4]
  49 0014 93F83930 		ldrb	r3, [r3, #57]
  50 0018 DBB2     		uxtb	r3, r3
  51 001a 002B     		cmp	r3, #0
  52 001c 02D1     		bne	.L4
 259:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   {  
 260:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     /* Init the low level hardware */
 261:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     HAL_UART_MspInit(huart);
  53              		.loc 1 261 0
  54 001e 7868     		ldr	r0, [r7, #4]
  55 0020 FFF7FEFF 		bl	HAL_UART_MspInit
  56              	.L4:
 262:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   }
 263:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
 264:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   huart->State = HAL_UART_STATE_BUSY;
  57              		.loc 1 264 0
  58 0024 7B68     		ldr	r3, [r7, #4]
  59 0026 0222     		movs	r2, #2
  60 0028 83F83920 		strb	r2, [r3, #57]
 265:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
 266:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* Disable the peripheral */
 267:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
  61              		.loc 1 267 0
  62 002c 7B68     		ldr	r3, [r7, #4]
  63 002e 1B68     		ldr	r3, [r3]
  64 0030 7A68     		ldr	r2, [r7, #4]
  65 0032 1268     		ldr	r2, [r2]
  66 0034 D268     		ldr	r2, [r2, #12]
  67 0036 22F40052 		bic	r2, r2, #8192
  68 003a DA60     		str	r2, [r3, #12]
 268:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
 269:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* Set the UART Communication parameters */
 270:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   UART_SetConfig(huart);
  69              		.loc 1 270 0
  70 003c 7868     		ldr	r0, [r7, #4]
  71 003e 01F02BFA 		bl	UART_SetConfig
 271:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
 272:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* In asynchronous mode, the following bits must be kept cleared: 
 273:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****      - LINEN and CLKEN bits in the USART_CR2 register,
 274:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****      - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
 275:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
  72              		.loc 1 275 0
  73 0042 7B68     		ldr	r3, [r7, #4]
  74 0044 1B68     		ldr	r3, [r3]
  75 0046 7A68     		ldr	r2, [r7, #4]
  76 0048 1268     		ldr	r2, [r2]
  77 004a 1269     		ldr	r2, [r2, #16]
  78 004c 22F49042 		bic	r2, r2, #18432
  79 0050 1A61     		str	r2, [r3, #16]
 276:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
  80              		.loc 1 276 0
  81 0052 7B68     		ldr	r3, [r7, #4]
  82 0054 1B68     		ldr	r3, [r3]
  83 0056 7A68     		ldr	r2, [r7, #4]
  84 0058 1268     		ldr	r2, [r2]
  85 005a 5269     		ldr	r2, [r2, #20]
  86 005c 22F02A02 		bic	r2, r2, #42
  87 0060 5A61     		str	r2, [r3, #20]
 277:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
 278:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* Enable the peripheral */
 279:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
  88              		.loc 1 279 0
  89 0062 7B68     		ldr	r3, [r7, #4]
  90 0064 1B68     		ldr	r3, [r3]
  91 0066 7A68     		ldr	r2, [r7, #4]
  92 0068 1268     		ldr	r2, [r2]
  93 006a D268     		ldr	r2, [r2, #12]
  94 006c 42F40052 		orr	r2, r2, #8192
  95 0070 DA60     		str	r2, [r3, #12]
 280:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
 281:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* Initialize the UART state */
 282:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
  96              		.loc 1 282 0
  97 0072 7B68     		ldr	r3, [r7, #4]
  98 0074 0022     		movs	r2, #0
  99 0076 83F83A20 		strb	r2, [r3, #58]
 283:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   huart->State= HAL_UART_STATE_READY;
 100              		.loc 1 283 0
 101 007a 7B68     		ldr	r3, [r7, #4]
 102 007c 0122     		movs	r2, #1
 103 007e 83F83920 		strb	r2, [r3, #57]
 284:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
 285:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   return HAL_OK;
 104              		.loc 1 285 0
 105 0082 0023     		movs	r3, #0
 106              	.L3:
 286:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** }
 107              		.loc 1 286 0
 108 0084 1846     		mov	r0, r3
 109 0086 0837     		adds	r7, r7, #8
 110 0088 BD46     		mov	sp, r7
 111              		@ sp needed
 112 008a 80BD     		pop	{r7, pc}
 113              		.cfi_endproc
 114              	.LFE55:
 116              		.align	2
 117              		.global	HAL_HalfDuplex_Init
 118              		.thumb
 119              		.thumb_func
 121              	HAL_HalfDuplex_Init:
 122              	.LFB56:
 287:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
 288:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** /**
 289:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @brief  Initializes the half-duplex mode according to the specified
 290:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   *         parameters in the UART_InitTypeDef and create the associated handle.
 291:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @param  huart: UART handle
 292:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @retval HAL status
 293:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   */
 294:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
 295:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** {
 123              		.loc 1 295 0
 124              		.cfi_startproc
 125              		@ args = 0, pretend = 0, frame = 8
 126              		@ frame_needed = 1, uses_anonymous_args = 0
 127 008c 80B5     		push	{r7, lr}
 128              		.cfi_def_cfa_offset 8
 129              		.cfi_offset 7, -8
 130              		.cfi_offset 14, -4
 131 008e 82B0     		sub	sp, sp, #8
 132              		.cfi_def_cfa_offset 16
 133 0090 00AF     		add	r7, sp, #0
 134              		.cfi_def_cfa_register 7
 135 0092 7860     		str	r0, [r7, #4]
 296:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* Check the UART handle allocation */
 297:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   if(huart == NULL)
 136              		.loc 1 297 0
 137 0094 7B68     		ldr	r3, [r7, #4]
 138 0096 002B     		cmp	r3, #0
 139 0098 01D1     		bne	.L6
 298:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   {
 299:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     return HAL_ERROR;
 140              		.loc 1 299 0
 141 009a 0123     		movs	r3, #1
 142 009c 40E0     		b	.L7
 143              	.L6:
 300:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   }
 301:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
 302:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   if(huart->State == HAL_UART_STATE_RESET)
 144              		.loc 1 302 0
 145 009e 7B68     		ldr	r3, [r7, #4]
 146 00a0 93F83930 		ldrb	r3, [r3, #57]
 147 00a4 DBB2     		uxtb	r3, r3
 148 00a6 002B     		cmp	r3, #0
 149 00a8 02D1     		bne	.L8
 303:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   {   
 304:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     /* Init the low level hardware */
 305:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     HAL_UART_MspInit(huart);
 150              		.loc 1 305 0
 151 00aa 7868     		ldr	r0, [r7, #4]
 152 00ac FFF7FEFF 		bl	HAL_UART_MspInit
 153              	.L8:
 306:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   }
 307:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
 308:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   huart->State = HAL_UART_STATE_BUSY;
 154              		.loc 1 308 0
 155 00b0 7B68     		ldr	r3, [r7, #4]
 156 00b2 0222     		movs	r2, #2
 157 00b4 83F83920 		strb	r2, [r3, #57]
 309:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
 310:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* Disable the peripheral */
 311:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 158              		.loc 1 311 0
 159 00b8 7B68     		ldr	r3, [r7, #4]
 160 00ba 1B68     		ldr	r3, [r3]
 161 00bc 7A68     		ldr	r2, [r7, #4]
 162 00be 1268     		ldr	r2, [r2]
 163 00c0 D268     		ldr	r2, [r2, #12]
 164 00c2 22F40052 		bic	r2, r2, #8192
 165 00c6 DA60     		str	r2, [r3, #12]
 312:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
 313:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* Set the UART Communication parameters */
 314:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   UART_SetConfig(huart);
 166              		.loc 1 314 0
 167 00c8 7868     		ldr	r0, [r7, #4]
 168 00ca 01F0E5F9 		bl	UART_SetConfig
 315:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
 316:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* In half-duplex mode, the following bits must be kept cleared: 
 317:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****      - LINEN and CLKEN bits in the USART_CR2 register,
 318:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****      - SCEN and IREN bits in the USART_CR3 register.*/
 319:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 169              		.loc 1 319 0
 170 00ce 7B68     		ldr	r3, [r7, #4]
 171 00d0 1B68     		ldr	r3, [r3]
 172 00d2 7A68     		ldr	r2, [r7, #4]
 173 00d4 1268     		ldr	r2, [r2]
 174 00d6 1269     		ldr	r2, [r2, #16]
 175 00d8 22F49042 		bic	r2, r2, #18432
 176 00dc 1A61     		str	r2, [r3, #16]
 320:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   huart->Instance->CR3 &= ~(USART_CR3_IREN | USART_CR3_SCEN);
 177              		.loc 1 320 0
 178 00de 7B68     		ldr	r3, [r7, #4]
 179 00e0 1B68     		ldr	r3, [r3]
 180 00e2 7A68     		ldr	r2, [r7, #4]
 181 00e4 1268     		ldr	r2, [r2]
 182 00e6 5269     		ldr	r2, [r2, #20]
 183 00e8 22F02202 		bic	r2, r2, #34
 184 00ec 5A61     		str	r2, [r3, #20]
 321:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
 322:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
 323:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   huart->Instance->CR3 |= USART_CR3_HDSEL;
 185              		.loc 1 323 0
 186 00ee 7B68     		ldr	r3, [r7, #4]
 187 00f0 1B68     		ldr	r3, [r3]
 188 00f2 7A68     		ldr	r2, [r7, #4]
 189 00f4 1268     		ldr	r2, [r2]
 190 00f6 5269     		ldr	r2, [r2, #20]
 191 00f8 42F00802 		orr	r2, r2, #8
 192 00fc 5A61     		str	r2, [r3, #20]
 324:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****  
 325:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* Enable the peripheral */
 326:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
 193              		.loc 1 326 0
 194 00fe 7B68     		ldr	r3, [r7, #4]
 195 0100 1B68     		ldr	r3, [r3]
 196 0102 7A68     		ldr	r2, [r7, #4]
 197 0104 1268     		ldr	r2, [r2]
 198 0106 D268     		ldr	r2, [r2, #12]
 199 0108 42F40052 		orr	r2, r2, #8192
 200 010c DA60     		str	r2, [r3, #12]
 327:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
 328:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* Initialize the UART state*/
 329:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 201              		.loc 1 329 0
 202 010e 7B68     		ldr	r3, [r7, #4]
 203 0110 0022     		movs	r2, #0
 204 0112 83F83A20 		strb	r2, [r3, #58]
 330:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   huart->State= HAL_UART_STATE_READY;
 205              		.loc 1 330 0
 206 0116 7B68     		ldr	r3, [r7, #4]
 207 0118 0122     		movs	r2, #1
 208 011a 83F83920 		strb	r2, [r3, #57]
 331:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
 332:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   return HAL_OK;
 209              		.loc 1 332 0
 210 011e 0023     		movs	r3, #0
 211              	.L7:
 333:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** }
 212              		.loc 1 333 0
 213 0120 1846     		mov	r0, r3
 214 0122 0837     		adds	r7, r7, #8
 215 0124 BD46     		mov	sp, r7
 216              		@ sp needed
 217 0126 80BD     		pop	{r7, pc}
 218              		.cfi_endproc
 219              	.LFE56:
 221              		.align	2
 222              		.global	HAL_LIN_Init
 223              		.thumb
 224              		.thumb_func
 226              	HAL_LIN_Init:
 227              	.LFB57:
 334:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
 335:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** /**
 336:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @brief  Initializes the LIN mode according to the specified
 337:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   *         parameters in the UART_InitTypeDef and create the associated handle.
 338:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @param  huart: UART handle
 339:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @param  BreakDetectLength: Specifies the LIN break detection length.
 340:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   *         This parameter can be one of the following values:
 341:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   *            @arg UART_LINBREAKDETECTLENGTH_10B: 10-bit break detection
 342:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   *            @arg UART_LINBREAKDETECTLENGTH_11B: 11-bit break detection
 343:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @retval HAL status
 344:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   */
 345:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** HAL_StatusTypeDef HAL_LIN_Init(UART_HandleTypeDef *huart, uint32_t BreakDetectLength)
 346:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** {
 228              		.loc 1 346 0
 229              		.cfi_startproc
 230              		@ args = 0, pretend = 0, frame = 8
 231              		@ frame_needed = 1, uses_anonymous_args = 0
 232 0128 80B5     		push	{r7, lr}
 233              		.cfi_def_cfa_offset 8
 234              		.cfi_offset 7, -8
 235              		.cfi_offset 14, -4
 236 012a 82B0     		sub	sp, sp, #8
 237              		.cfi_def_cfa_offset 16
 238 012c 00AF     		add	r7, sp, #0
 239              		.cfi_def_cfa_register 7
 240 012e 7860     		str	r0, [r7, #4]
 241 0130 3960     		str	r1, [r7]
 347:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* Check the UART handle allocation */
 348:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   if(huart == NULL)
 242              		.loc 1 348 0
 243 0132 7B68     		ldr	r3, [r7, #4]
 244 0134 002B     		cmp	r3, #0
 245 0136 01D1     		bne	.L10
 349:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   {
 350:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     return HAL_ERROR;
 246              		.loc 1 350 0
 247 0138 0123     		movs	r3, #1
 248 013a 50E0     		b	.L11
 249              	.L10:
 351:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   }
 352:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* Check the Break detection length parameter */
 353:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   assert_param(IS_UART_LIN_BREAK_DETECT_LENGTH(BreakDetectLength));
 354:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
 355:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   if(huart->State == HAL_UART_STATE_RESET)
 250              		.loc 1 355 0
 251 013c 7B68     		ldr	r3, [r7, #4]
 252 013e 93F83930 		ldrb	r3, [r3, #57]
 253 0142 DBB2     		uxtb	r3, r3
 254 0144 002B     		cmp	r3, #0
 255 0146 02D1     		bne	.L12
 356:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   {   
 357:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     /* Init the low level hardware */
 358:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     HAL_UART_MspInit(huart);
 256              		.loc 1 358 0
 257 0148 7868     		ldr	r0, [r7, #4]
 258 014a FFF7FEFF 		bl	HAL_UART_MspInit
 259              	.L12:
 359:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   }
 360:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
 361:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   huart->State = HAL_UART_STATE_BUSY;
 260              		.loc 1 361 0
 261 014e 7B68     		ldr	r3, [r7, #4]
 262 0150 0222     		movs	r2, #2
 263 0152 83F83920 		strb	r2, [r3, #57]
 362:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
 363:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* Disable the peripheral */
 364:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 264              		.loc 1 364 0
 265 0156 7B68     		ldr	r3, [r7, #4]
 266 0158 1B68     		ldr	r3, [r3]
 267 015a 7A68     		ldr	r2, [r7, #4]
 268 015c 1268     		ldr	r2, [r2]
 269 015e D268     		ldr	r2, [r2, #12]
 270 0160 22F40052 		bic	r2, r2, #8192
 271 0164 DA60     		str	r2, [r3, #12]
 365:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
 366:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* Set the UART Communication parameters */
 367:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   UART_SetConfig(huart);
 272              		.loc 1 367 0
 273 0166 7868     		ldr	r0, [r7, #4]
 274 0168 01F096F9 		bl	UART_SetConfig
 368:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
 369:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* In LIN mode, the following bits must be kept cleared: 
 370:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****      - LINEN and CLKEN bits in the USART_CR2 register,
 371:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****      - SCEN and IREN bits in the USART_CR3 register.*/
 372:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   huart->Instance->CR2 &= ~(USART_CR2_CLKEN);
 275              		.loc 1 372 0
 276 016c 7B68     		ldr	r3, [r7, #4]
 277 016e 1B68     		ldr	r3, [r3]
 278 0170 7A68     		ldr	r2, [r7, #4]
 279 0172 1268     		ldr	r2, [r2]
 280 0174 1269     		ldr	r2, [r2, #16]
 281 0176 22F40062 		bic	r2, r2, #2048
 282 017a 1A61     		str	r2, [r3, #16]
 373:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   huart->Instance->CR3 &= ~(USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN);
 283              		.loc 1 373 0
 284 017c 7B68     		ldr	r3, [r7, #4]
 285 017e 1B68     		ldr	r3, [r3]
 286 0180 7A68     		ldr	r2, [r7, #4]
 287 0182 1268     		ldr	r2, [r2]
 288 0184 5269     		ldr	r2, [r2, #20]
 289 0186 22F02A02 		bic	r2, r2, #42
 290 018a 5A61     		str	r2, [r3, #20]
 374:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
 375:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
 376:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   huart->Instance->CR2 |= USART_CR2_LINEN;
 291              		.loc 1 376 0
 292 018c 7B68     		ldr	r3, [r7, #4]
 293 018e 1B68     		ldr	r3, [r3]
 294 0190 7A68     		ldr	r2, [r7, #4]
 295 0192 1268     		ldr	r2, [r2]
 296 0194 1269     		ldr	r2, [r2, #16]
 297 0196 42F48042 		orr	r2, r2, #16384
 298 019a 1A61     		str	r2, [r3, #16]
 377:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
 378:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* Set the USART LIN Break detection length. */
 379:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   huart->Instance->CR2 &= ~(USART_CR2_LBDL);
 299              		.loc 1 379 0
 300 019c 7B68     		ldr	r3, [r7, #4]
 301 019e 1B68     		ldr	r3, [r3]
 302 01a0 7A68     		ldr	r2, [r7, #4]
 303 01a2 1268     		ldr	r2, [r2]
 304 01a4 1269     		ldr	r2, [r2, #16]
 305 01a6 22F02002 		bic	r2, r2, #32
 306 01aa 1A61     		str	r2, [r3, #16]
 380:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   huart->Instance->CR2 |= BreakDetectLength; 
 307              		.loc 1 380 0
 308 01ac 7B68     		ldr	r3, [r7, #4]
 309 01ae 1B68     		ldr	r3, [r3]
 310 01b0 7A68     		ldr	r2, [r7, #4]
 311 01b2 1268     		ldr	r2, [r2]
 312 01b4 1169     		ldr	r1, [r2, #16]
 313 01b6 3A68     		ldr	r2, [r7]
 314 01b8 0A43     		orrs	r2, r2, r1
 315 01ba 1A61     		str	r2, [r3, #16]
 381:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
 382:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* Enable the peripheral */
 383:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
 316              		.loc 1 383 0
 317 01bc 7B68     		ldr	r3, [r7, #4]
 318 01be 1B68     		ldr	r3, [r3]
 319 01c0 7A68     		ldr	r2, [r7, #4]
 320 01c2 1268     		ldr	r2, [r2]
 321 01c4 D268     		ldr	r2, [r2, #12]
 322 01c6 42F40052 		orr	r2, r2, #8192
 323 01ca DA60     		str	r2, [r3, #12]
 384:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
 385:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* Initialize the UART state*/
 386:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 324              		.loc 1 386 0
 325 01cc 7B68     		ldr	r3, [r7, #4]
 326 01ce 0022     		movs	r2, #0
 327 01d0 83F83A20 		strb	r2, [r3, #58]
 387:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   huart->State= HAL_UART_STATE_READY;
 328              		.loc 1 387 0
 329 01d4 7B68     		ldr	r3, [r7, #4]
 330 01d6 0122     		movs	r2, #1
 331 01d8 83F83920 		strb	r2, [r3, #57]
 388:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
 389:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   return HAL_OK;
 332              		.loc 1 389 0
 333 01dc 0023     		movs	r3, #0
 334              	.L11:
 390:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** }
 335              		.loc 1 390 0
 336 01de 1846     		mov	r0, r3
 337 01e0 0837     		adds	r7, r7, #8
 338 01e2 BD46     		mov	sp, r7
 339              		@ sp needed
 340 01e4 80BD     		pop	{r7, pc}
 341              		.cfi_endproc
 342              	.LFE57:
 344 01e6 00BF     		.align	2
 345              		.global	HAL_MultiProcessor_Init
 346              		.thumb
 347              		.thumb_func
 349              	HAL_MultiProcessor_Init:
 350              	.LFB58:
 391:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
 392:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** /**
 393:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @brief  Initializes the Multi-Processor mode according to the specified
 394:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   *         parameters in the UART_InitTypeDef and create the associated handle.
 395:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @param  huart: UART handle
 396:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @param  Address: USART address
 397:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @param  WakeUpMethode: specifies the USART wakeup method.
 398:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   *          This parameter can be one of the following values:
 399:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   *            @arg UART_WAKEUPMETHODE_IDLELINE: Wakeup by an idle line detection
 400:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   *            @arg UART_WAKEUPMETHODE_ADDRESSMARK: Wakeup by an address mark
 401:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @retval HAL status
 402:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   */
 403:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t Wake
 404:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** {
 351              		.loc 1 404 0
 352              		.cfi_startproc
 353              		@ args = 0, pretend = 0, frame = 16
 354              		@ frame_needed = 1, uses_anonymous_args = 0
 355 01e8 80B5     		push	{r7, lr}
 356              		.cfi_def_cfa_offset 8
 357              		.cfi_offset 7, -8
 358              		.cfi_offset 14, -4
 359 01ea 84B0     		sub	sp, sp, #16
 360              		.cfi_def_cfa_offset 24
 361 01ec 00AF     		add	r7, sp, #0
 362              		.cfi_def_cfa_register 7
 363 01ee F860     		str	r0, [r7, #12]
 364 01f0 0B46     		mov	r3, r1
 365 01f2 7A60     		str	r2, [r7, #4]
 366 01f4 FB72     		strb	r3, [r7, #11]
 405:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* Check the UART handle allocation */
 406:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   if(huart == NULL)
 367              		.loc 1 406 0
 368 01f6 FB68     		ldr	r3, [r7, #12]
 369 01f8 002B     		cmp	r3, #0
 370 01fa 01D1     		bne	.L14
 407:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   {
 408:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     return HAL_ERROR;
 371              		.loc 1 408 0
 372 01fc 0123     		movs	r3, #1
 373 01fe 58E0     		b	.L15
 374              	.L14:
 409:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   }
 410:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
 411:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* Check the Address & wake up method parameters */
 412:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   assert_param(IS_UART_WAKEUPMETHODE(WakeUpMethode));
 413:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   assert_param(IS_UART_ADDRESS(Address));
 414:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
 415:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   if(huart->State == HAL_UART_STATE_RESET)
 375              		.loc 1 415 0
 376 0200 FB68     		ldr	r3, [r7, #12]
 377 0202 93F83930 		ldrb	r3, [r3, #57]
 378 0206 DBB2     		uxtb	r3, r3
 379 0208 002B     		cmp	r3, #0
 380 020a 02D1     		bne	.L16
 416:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   {   
 417:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     /* Init the low level hardware */
 418:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     HAL_UART_MspInit(huart);
 381              		.loc 1 418 0
 382 020c F868     		ldr	r0, [r7, #12]
 383 020e FFF7FEFF 		bl	HAL_UART_MspInit
 384              	.L16:
 419:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   }
 420:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
 421:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   huart->State = HAL_UART_STATE_BUSY;
 385              		.loc 1 421 0
 386 0212 FB68     		ldr	r3, [r7, #12]
 387 0214 0222     		movs	r2, #2
 388 0216 83F83920 		strb	r2, [r3, #57]
 422:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
 423:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* Disable the peripheral */
 424:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 389              		.loc 1 424 0
 390 021a FB68     		ldr	r3, [r7, #12]
 391 021c 1B68     		ldr	r3, [r3]
 392 021e FA68     		ldr	r2, [r7, #12]
 393 0220 1268     		ldr	r2, [r2]
 394 0222 D268     		ldr	r2, [r2, #12]
 395 0224 22F40052 		bic	r2, r2, #8192
 396 0228 DA60     		str	r2, [r3, #12]
 425:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
 426:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* Set the UART Communication parameters */
 427:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   UART_SetConfig(huart);
 397              		.loc 1 427 0
 398 022a F868     		ldr	r0, [r7, #12]
 399 022c 01F034F9 		bl	UART_SetConfig
 428:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
 429:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* In Multi-Processor mode, the following bits must be kept cleared: 
 430:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****      - LINEN and CLKEN bits in the USART_CR2 register,
 431:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****      - SCEN, HDSEL and IREN  bits in the USART_CR3 register */
 432:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 400              		.loc 1 432 0
 401 0230 FB68     		ldr	r3, [r7, #12]
 402 0232 1B68     		ldr	r3, [r3]
 403 0234 FA68     		ldr	r2, [r7, #12]
 404 0236 1268     		ldr	r2, [r2]
 405 0238 1269     		ldr	r2, [r2, #16]
 406 023a 22F49042 		bic	r2, r2, #18432
 407 023e 1A61     		str	r2, [r3, #16]
 433:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 408              		.loc 1 433 0
 409 0240 FB68     		ldr	r3, [r7, #12]
 410 0242 1B68     		ldr	r3, [r3]
 411 0244 FA68     		ldr	r2, [r7, #12]
 412 0246 1268     		ldr	r2, [r2]
 413 0248 5269     		ldr	r2, [r2, #20]
 414 024a 22F02A02 		bic	r2, r2, #42
 415 024e 5A61     		str	r2, [r3, #20]
 434:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
 435:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* Clear the USART address */
 436:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   huart->Instance->CR2 &= ~(USART_CR2_ADD);
 416              		.loc 1 436 0
 417 0250 FB68     		ldr	r3, [r7, #12]
 418 0252 1B68     		ldr	r3, [r3]
 419 0254 FA68     		ldr	r2, [r7, #12]
 420 0256 1268     		ldr	r2, [r2]
 421 0258 1269     		ldr	r2, [r2, #16]
 422 025a 22F00F02 		bic	r2, r2, #15
 423 025e 1A61     		str	r2, [r3, #16]
 437:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* Set the USART address node */
 438:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   huart->Instance->CR2 |= Address;
 424              		.loc 1 438 0
 425 0260 FB68     		ldr	r3, [r7, #12]
 426 0262 1B68     		ldr	r3, [r3]
 427 0264 FA68     		ldr	r2, [r7, #12]
 428 0266 1268     		ldr	r2, [r2]
 429 0268 1169     		ldr	r1, [r2, #16]
 430 026a FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 431 026c 0A43     		orrs	r2, r2, r1
 432 026e 1A61     		str	r2, [r3, #16]
 439:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
 440:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* Set the wake up methode by setting the WAKE bit in the CR1 register */
 441:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   huart->Instance->CR1 &= ~(USART_CR1_WAKE);
 433              		.loc 1 441 0
 434 0270 FB68     		ldr	r3, [r7, #12]
 435 0272 1B68     		ldr	r3, [r3]
 436 0274 FA68     		ldr	r2, [r7, #12]
 437 0276 1268     		ldr	r2, [r2]
 438 0278 D268     		ldr	r2, [r2, #12]
 439 027a 22F40062 		bic	r2, r2, #2048
 440 027e DA60     		str	r2, [r3, #12]
 442:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   huart->Instance->CR1 |= WakeUpMethode;
 441              		.loc 1 442 0
 442 0280 FB68     		ldr	r3, [r7, #12]
 443 0282 1B68     		ldr	r3, [r3]
 444 0284 FA68     		ldr	r2, [r7, #12]
 445 0286 1268     		ldr	r2, [r2]
 446 0288 D168     		ldr	r1, [r2, #12]
 447 028a 7A68     		ldr	r2, [r7, #4]
 448 028c 0A43     		orrs	r2, r2, r1
 449 028e DA60     		str	r2, [r3, #12]
 443:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
 444:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* Enable the peripheral */
 445:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
 450              		.loc 1 445 0
 451 0290 FB68     		ldr	r3, [r7, #12]
 452 0292 1B68     		ldr	r3, [r3]
 453 0294 FA68     		ldr	r2, [r7, #12]
 454 0296 1268     		ldr	r2, [r2]
 455 0298 D268     		ldr	r2, [r2, #12]
 456 029a 42F40052 		orr	r2, r2, #8192
 457 029e DA60     		str	r2, [r3, #12]
 446:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
 447:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* Initialize the UART state */
 448:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 458              		.loc 1 448 0
 459 02a0 FB68     		ldr	r3, [r7, #12]
 460 02a2 0022     		movs	r2, #0
 461 02a4 83F83A20 		strb	r2, [r3, #58]
 449:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   huart->State= HAL_UART_STATE_READY;
 462              		.loc 1 449 0
 463 02a8 FB68     		ldr	r3, [r7, #12]
 464 02aa 0122     		movs	r2, #1
 465 02ac 83F83920 		strb	r2, [r3, #57]
 450:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
 451:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   return HAL_OK;
 466              		.loc 1 451 0
 467 02b0 0023     		movs	r3, #0
 468              	.L15:
 452:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** }
 469              		.loc 1 452 0
 470 02b2 1846     		mov	r0, r3
 471 02b4 1037     		adds	r7, r7, #16
 472 02b6 BD46     		mov	sp, r7
 473              		@ sp needed
 474 02b8 80BD     		pop	{r7, pc}
 475              		.cfi_endproc
 476              	.LFE58:
 478 02ba 00BF     		.align	2
 479              		.global	HAL_UART_DeInit
 480              		.thumb
 481              		.thumb_func
 483              	HAL_UART_DeInit:
 484              	.LFB59:
 453:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
 454:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** /**
 455:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @brief  DeInitializes the UART peripheral. 
 456:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @param  huart: UART handle
 457:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @retval HAL status
 458:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   */
 459:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
 460:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** {
 485              		.loc 1 460 0
 486              		.cfi_startproc
 487              		@ args = 0, pretend = 0, frame = 8
 488              		@ frame_needed = 1, uses_anonymous_args = 0
 489 02bc 80B5     		push	{r7, lr}
 490              		.cfi_def_cfa_offset 8
 491              		.cfi_offset 7, -8
 492              		.cfi_offset 14, -4
 493 02be 82B0     		sub	sp, sp, #8
 494              		.cfi_def_cfa_offset 16
 495 02c0 00AF     		add	r7, sp, #0
 496              		.cfi_def_cfa_register 7
 497 02c2 7860     		str	r0, [r7, #4]
 461:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* Check the UART handle allocation */
 462:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   if(huart == NULL)
 498              		.loc 1 462 0
 499 02c4 7B68     		ldr	r3, [r7, #4]
 500 02c6 002B     		cmp	r3, #0
 501 02c8 01D1     		bne	.L18
 463:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   {
 464:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     return HAL_ERROR;
 502              		.loc 1 464 0
 503 02ca 0123     		movs	r3, #1
 504 02cc 13E0     		b	.L19
 505              	.L18:
 465:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   }
 466:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
 467:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* Check the parameters */
 468:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   assert_param(IS_UART_INSTANCE(huart->Instance));
 469:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
 470:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   huart->State = HAL_UART_STATE_BUSY;
 506              		.loc 1 470 0
 507 02ce 7B68     		ldr	r3, [r7, #4]
 508 02d0 0222     		movs	r2, #2
 509 02d2 83F83920 		strb	r2, [r3, #57]
 471:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
 472:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* DeInit the low level hardware */
 473:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   HAL_UART_MspDeInit(huart);
 510              		.loc 1 473 0
 511 02d6 7868     		ldr	r0, [r7, #4]
 512 02d8 FFF7FEFF 		bl	HAL_UART_MspDeInit
 474:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
 475:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 513              		.loc 1 475 0
 514 02dc 7B68     		ldr	r3, [r7, #4]
 515 02de 0022     		movs	r2, #0
 516 02e0 83F83A20 		strb	r2, [r3, #58]
 476:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   huart->State = HAL_UART_STATE_RESET;
 517              		.loc 1 476 0
 518 02e4 7B68     		ldr	r3, [r7, #4]
 519 02e6 0022     		movs	r2, #0
 520 02e8 83F83920 		strb	r2, [r3, #57]
 477:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
 478:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* Process Lock */
 479:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 521              		.loc 1 479 0
 522 02ec 7B68     		ldr	r3, [r7, #4]
 523 02ee 0022     		movs	r2, #0
 524 02f0 83F83820 		strb	r2, [r3, #56]
 480:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
 481:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   return HAL_OK;
 525              		.loc 1 481 0
 526 02f4 0023     		movs	r3, #0
 527              	.L19:
 482:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** }
 528              		.loc 1 482 0
 529 02f6 1846     		mov	r0, r3
 530 02f8 0837     		adds	r7, r7, #8
 531 02fa BD46     		mov	sp, r7
 532              		@ sp needed
 533 02fc 80BD     		pop	{r7, pc}
 534              		.cfi_endproc
 535              	.LFE59:
 537 02fe 00BF     		.align	2
 538              		.weak	HAL_UART_MspInit
 539              		.thumb
 540              		.thumb_func
 542              	HAL_UART_MspInit:
 543              	.LFB60:
 483:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
 484:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** /**
 485:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @brief  UART MSP Init.
 486:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @param  huart: UART handle
 487:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @retval None
 488:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   */
 489:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****  __weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
 490:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** {
 544              		.loc 1 490 0
 545              		.cfi_startproc
 546              		@ args = 0, pretend = 0, frame = 8
 547              		@ frame_needed = 1, uses_anonymous_args = 0
 548              		@ link register save eliminated.
 549 0300 80B4     		push	{r7}
 550              		.cfi_def_cfa_offset 4
 551              		.cfi_offset 7, -4
 552 0302 83B0     		sub	sp, sp, #12
 553              		.cfi_def_cfa_offset 16
 554 0304 00AF     		add	r7, sp, #0
 555              		.cfi_def_cfa_register 7
 556 0306 7860     		str	r0, [r7, #4]
 491:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* NOTE: This function Should not be modified, when the callback is needed,
 492:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****            the HAL_UART_MspInit could be implemented in the user file
 493:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****    */ 
 494:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
 495:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** }
 557              		.loc 1 495 0
 558 0308 0C37     		adds	r7, r7, #12
 559 030a BD46     		mov	sp, r7
 560              		@ sp needed
 561 030c 5DF8047B 		ldr	r7, [sp], #4
 562 0310 7047     		bx	lr
 563              		.cfi_endproc
 564              	.LFE60:
 566 0312 00BF     		.align	2
 567              		.weak	HAL_UART_MspDeInit
 568              		.thumb
 569              		.thumb_func
 571              	HAL_UART_MspDeInit:
 572              	.LFB61:
 496:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
 497:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** /**
 498:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @brief  UART MSP DeInit.
 499:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @param  huart: UART handle
 500:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @retval None
 501:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   */
 502:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****  __weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
 503:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** {
 573              		.loc 1 503 0
 574              		.cfi_startproc
 575              		@ args = 0, pretend = 0, frame = 8
 576              		@ frame_needed = 1, uses_anonymous_args = 0
 577              		@ link register save eliminated.
 578 0314 80B4     		push	{r7}
 579              		.cfi_def_cfa_offset 4
 580              		.cfi_offset 7, -4
 581 0316 83B0     		sub	sp, sp, #12
 582              		.cfi_def_cfa_offset 16
 583 0318 00AF     		add	r7, sp, #0
 584              		.cfi_def_cfa_register 7
 585 031a 7860     		str	r0, [r7, #4]
 504:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* NOTE: This function Should not be modified, when the callback is needed,
 505:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****            the HAL_UART_MspDeInit could be implemented in the user file
 506:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****    */ 
 507:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** }
 586              		.loc 1 507 0
 587 031c 0C37     		adds	r7, r7, #12
 588 031e BD46     		mov	sp, r7
 589              		@ sp needed
 590 0320 5DF8047B 		ldr	r7, [sp], #4
 591 0324 7047     		bx	lr
 592              		.cfi_endproc
 593              	.LFE61:
 595 0326 00BF     		.align	2
 596              		.global	HAL_UART_Transmit
 597              		.thumb
 598              		.thumb_func
 600              	HAL_UART_Transmit:
 601              	.LFB62:
 508:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
 509:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** /**
 510:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @}
 511:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   */
 512:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
 513:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** /** @defgroup UART_Group2 IO operation functions 
 514:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   *  @brief UART Transmit and Receive functions 
 515:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   *
 516:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** @verbatim   
 517:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   ==============================================================================
 518:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****                       ##### IO operation functions #####
 519:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   ==============================================================================  
 520:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   [..]
 521:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     This subsection provides a set of functions allowing to manage the UART asynchronous
 522:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     and Half duplex data transfers.
 523:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
 524:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     (#) There are two modes of transfer:
 525:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****        (++) Blocking mode: The communication is performed in polling mode. 
 526:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****             The HAL status of all data processing is returned by the same function 
 527:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****             after finishing transfer.  
 528:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****        (++) Non-Blocking mode: The communication is performed using Interrupts 
 529:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****             or DMA, these APIs return the HAL status.
 530:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****             The end of the data processing will be indicated through the 
 531:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****             dedicated UART IRQ when using Interrupt mode or the DMA IRQ when 
 532:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****             using DMA mode.
 533:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****             The HAL_UART_TxCpltCallback(), HAL_UART_RxCpltCallback() user callbacks 
 534:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****             will be executed respectivelly at the end of the transmit or receive process.
 535:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****             The HAL_UART_ErrorCallback() user callback will be executed when 
 536:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****             a communication error is detected.
 537:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
 538:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     (#) Blocking mode API's are:
 539:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         (++) HAL_UART_Transmit()
 540:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         (++) HAL_UART_Receive() 
 541:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         
 542:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     (#) Non-Blocking mode API's with Interrupt are:
 543:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         (++) HAL_UART_Transmit_IT()
 544:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         (++) HAL_UART_Receive_IT()
 545:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         (++) HAL_UART_IRQHandler()
 546:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
 547:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     (#) No-Blocking mode functions with DMA are:
 548:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         (++) HAL_UART_Transmit_DMA()
 549:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         (++) HAL_UART_Receive_DMA()
 550:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
 551:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     (#) A set of Transfer Complete Callbacks are provided in Non-Blocking mode:
 552:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         (++) HAL_UART_TxCpltCallback()
 553:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         (++) HAL_UART_RxCpltCallback()
 554:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         (++) HAL_UART_ErrorCallback()
 555:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
 556:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     [..] 
 557:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       (@) In the Half duplex communication, it is forbidden to run the transmit 
 558:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****           and receive process in parallel, the UART state HAL_UART_STATE_BUSY_TX_RX 
 559:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****           can't be useful.
 560:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       
 561:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** @endverbatim
 562:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @{
 563:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   */
 564:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
 565:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** /**
 566:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @brief  Sends an amount of data in blocking mode. 
 567:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @param  huart: UART handle
 568:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @param  pData: Pointer to data buffer
 569:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @param  Size: Amount of data to be sent
 570:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @param  Timeout: Timeout duration  
 571:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @retval HAL status
 572:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   */
 573:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint3
 574:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** {
 602              		.loc 1 574 0
 603              		.cfi_startproc
 604              		@ args = 0, pretend = 0, frame = 24
 605              		@ frame_needed = 1, uses_anonymous_args = 0
 606 0328 80B5     		push	{r7, lr}
 607              		.cfi_def_cfa_offset 8
 608              		.cfi_offset 7, -8
 609              		.cfi_offset 14, -4
 610 032a 86B0     		sub	sp, sp, #24
 611              		.cfi_def_cfa_offset 32
 612 032c 00AF     		add	r7, sp, #0
 613              		.cfi_def_cfa_register 7
 614 032e F860     		str	r0, [r7, #12]
 615 0330 B960     		str	r1, [r7, #8]
 616 0332 3B60     		str	r3, [r7]
 617 0334 1346     		mov	r3, r2	@ movhi
 618 0336 FB80     		strh	r3, [r7, #6]	@ movhi
 575:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   uint16_t* tmp;
 576:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   uint32_t tmp1 = 0;
 619              		.loc 1 576 0
 620 0338 0023     		movs	r3, #0
 621 033a 7B61     		str	r3, [r7, #20]
 577:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
 578:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   tmp1 = huart->State;
 622              		.loc 1 578 0
 623 033c FB68     		ldr	r3, [r7, #12]
 624 033e 93F83930 		ldrb	r3, [r3, #57]
 625 0342 DBB2     		uxtb	r3, r3
 626 0344 7B61     		str	r3, [r7, #20]
 579:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   if((tmp1 == HAL_UART_STATE_READY) || (tmp1 == HAL_UART_STATE_BUSY_RX))
 627              		.loc 1 579 0
 628 0346 7B69     		ldr	r3, [r7, #20]
 629 0348 012B     		cmp	r3, #1
 630 034a 03D0     		beq	.L23
 631              		.loc 1 579 0 is_stmt 0 discriminator 1
 632 034c 7B69     		ldr	r3, [r7, #20]
 633 034e 222B     		cmp	r3, #34
 634 0350 40F08E80 		bne	.L24
 635              	.L23:
 580:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   {
 581:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     if((pData == NULL ) || (Size == 0)) 
 636              		.loc 1 581 0 is_stmt 1
 637 0354 BB68     		ldr	r3, [r7, #8]
 638 0356 002B     		cmp	r3, #0
 639 0358 02D0     		beq	.L25
 640              		.loc 1 581 0 is_stmt 0 discriminator 1
 641 035a FB88     		ldrh	r3, [r7, #6]
 642 035c 002B     		cmp	r3, #0
 643 035e 01D1     		bne	.L26
 644              	.L25:
 582:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     {
 583:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       return  HAL_ERROR;
 645              		.loc 1 583 0 is_stmt 1
 646 0360 0123     		movs	r3, #1
 647 0362 86E0     		b	.L27
 648              	.L26:
 584:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     }
 585:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     
 586:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     /* Process Locked */
 587:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     __HAL_LOCK(huart);
 649              		.loc 1 587 0
 650 0364 FB68     		ldr	r3, [r7, #12]
 651 0366 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 652 036a 012B     		cmp	r3, #1
 653 036c 01D1     		bne	.L28
 654              		.loc 1 587 0 is_stmt 0 discriminator 1
 655 036e 0223     		movs	r3, #2
 656 0370 7FE0     		b	.L27
 657              	.L28:
 658              		.loc 1 587 0 discriminator 2
 659 0372 FB68     		ldr	r3, [r7, #12]
 660 0374 0122     		movs	r2, #1
 661 0376 83F83820 		strb	r2, [r3, #56]
 588:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     
 589:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 662              		.loc 1 589 0 is_stmt 1 discriminator 2
 663 037a FB68     		ldr	r3, [r7, #12]
 664 037c 0022     		movs	r2, #0
 665 037e 83F83A20 		strb	r2, [r3, #58]
 590:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     /* Check if a non-blocking receive process is ongoing or not */
 591:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     if(huart->State == HAL_UART_STATE_BUSY_RX) 
 666              		.loc 1 591 0 discriminator 2
 667 0382 FB68     		ldr	r3, [r7, #12]
 668 0384 93F83930 		ldrb	r3, [r3, #57]
 669 0388 DBB2     		uxtb	r3, r3
 670 038a 222B     		cmp	r3, #34
 671 038c 04D1     		bne	.L29
 592:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     {
 593:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       huart->State = HAL_UART_STATE_BUSY_TX_RX;
 672              		.loc 1 593 0
 673 038e FB68     		ldr	r3, [r7, #12]
 674 0390 3222     		movs	r2, #50
 675 0392 83F83920 		strb	r2, [r3, #57]
 676 0396 03E0     		b	.L30
 677              	.L29:
 594:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     }
 595:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     else
 596:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     {
 597:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       huart->State = HAL_UART_STATE_BUSY_TX;
 678              		.loc 1 597 0
 679 0398 FB68     		ldr	r3, [r7, #12]
 680 039a 1222     		movs	r2, #18
 681 039c 83F83920 		strb	r2, [r3, #57]
 682              	.L30:
 598:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     }
 599:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
 600:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     huart->TxXferSize = Size;
 683              		.loc 1 600 0
 684 03a0 FB68     		ldr	r3, [r7, #12]
 685 03a2 FA88     		ldrh	r2, [r7, #6]	@ movhi
 686 03a4 9A84     		strh	r2, [r3, #36]	@ movhi
 601:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     huart->TxXferCount = Size;
 687              		.loc 1 601 0
 688 03a6 FB68     		ldr	r3, [r7, #12]
 689 03a8 FA88     		ldrh	r2, [r7, #6]	@ movhi
 690 03aa DA84     		strh	r2, [r3, #38]	@ movhi
 602:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     while(huart->TxXferCount > 0)
 691              		.loc 1 602 0
 692 03ac 3CE0     		b	.L31
 693              	.L37:
 603:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     {
 604:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       huart->TxXferCount--;
 694              		.loc 1 604 0
 695 03ae FB68     		ldr	r3, [r7, #12]
 696 03b0 DB8C     		ldrh	r3, [r3, #38]
 697 03b2 013B     		subs	r3, r3, #1
 698 03b4 9AB2     		uxth	r2, r3
 699 03b6 FB68     		ldr	r3, [r7, #12]
 700 03b8 DA84     		strh	r2, [r3, #38]	@ movhi
 605:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 701              		.loc 1 605 0
 702 03ba FB68     		ldr	r3, [r7, #12]
 703 03bc 9B68     		ldr	r3, [r3, #8]
 704 03be B3F5805F 		cmp	r3, #4096
 705 03c2 1FD1     		bne	.L32
 606:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       {
 607:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 706              		.loc 1 607 0
 707 03c4 F868     		ldr	r0, [r7, #12]
 708 03c6 8021     		movs	r1, #128
 709 03c8 0022     		movs	r2, #0
 710 03ca 3B68     		ldr	r3, [r7]
 711 03cc 00F096FE 		bl	UART_WaitOnFlagUntilTimeout
 712 03d0 0346     		mov	r3, r0
 713 03d2 002B     		cmp	r3, #0
 714 03d4 01D0     		beq	.L33
 608:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         { 
 609:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****           return HAL_TIMEOUT;
 715              		.loc 1 609 0
 716 03d6 0323     		movs	r3, #3
 717 03d8 4BE0     		b	.L27
 718              	.L33:
 610:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         }
 611:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         tmp = (uint16_t*) pData;
 719              		.loc 1 611 0
 720 03da BB68     		ldr	r3, [r7, #8]
 721 03dc 3B61     		str	r3, [r7, #16]
 612:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 722              		.loc 1 612 0
 723 03de FB68     		ldr	r3, [r7, #12]
 724 03e0 1B68     		ldr	r3, [r3]
 725 03e2 3A69     		ldr	r2, [r7, #16]
 726 03e4 1288     		ldrh	r2, [r2]
 727 03e6 C2F30802 		ubfx	r2, r2, #0, #9
 728 03ea 5A60     		str	r2, [r3, #4]
 613:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         if(huart->Init.Parity == UART_PARITY_NONE)
 729              		.loc 1 613 0
 730 03ec FB68     		ldr	r3, [r7, #12]
 731 03ee 1B69     		ldr	r3, [r3, #16]
 732 03f0 002B     		cmp	r3, #0
 733 03f2 03D1     		bne	.L34
 614:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         {
 615:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****           pData +=2;
 734              		.loc 1 615 0
 735 03f4 BB68     		ldr	r3, [r7, #8]
 736 03f6 0233     		adds	r3, r3, #2
 737 03f8 BB60     		str	r3, [r7, #8]
 738 03fa 15E0     		b	.L31
 739              	.L34:
 616:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         }
 617:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         else
 618:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         { 
 619:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****           pData +=1;
 740              		.loc 1 619 0
 741 03fc BB68     		ldr	r3, [r7, #8]
 742 03fe 0133     		adds	r3, r3, #1
 743 0400 BB60     		str	r3, [r7, #8]
 744 0402 11E0     		b	.L31
 745              	.L32:
 620:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         }
 621:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       } 
 622:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       else
 623:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       {
 624:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 746              		.loc 1 624 0
 747 0404 F868     		ldr	r0, [r7, #12]
 748 0406 8021     		movs	r1, #128
 749 0408 0022     		movs	r2, #0
 750 040a 3B68     		ldr	r3, [r7]
 751 040c 00F076FE 		bl	UART_WaitOnFlagUntilTimeout
 752 0410 0346     		mov	r3, r0
 753 0412 002B     		cmp	r3, #0
 754 0414 01D0     		beq	.L36
 625:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         {
 626:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****           return HAL_TIMEOUT;
 755              		.loc 1 626 0
 756 0416 0323     		movs	r3, #3
 757 0418 2BE0     		b	.L27
 758              	.L36:
 627:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         }
 628:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 759              		.loc 1 628 0
 760 041a FB68     		ldr	r3, [r7, #12]
 761 041c 1A68     		ldr	r2, [r3]
 762 041e BB68     		ldr	r3, [r7, #8]
 763 0420 591C     		adds	r1, r3, #1
 764 0422 B960     		str	r1, [r7, #8]
 765 0424 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 766 0426 5360     		str	r3, [r2, #4]
 767              	.L31:
 602:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     {
 768              		.loc 1 602 0 discriminator 1
 769 0428 FB68     		ldr	r3, [r7, #12]
 770 042a DB8C     		ldrh	r3, [r3, #38]
 771 042c 002B     		cmp	r3, #0
 772 042e BED1     		bne	.L37
 629:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       } 
 630:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     }
 631:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     
 632:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 773              		.loc 1 632 0
 774 0430 F868     		ldr	r0, [r7, #12]
 775 0432 4021     		movs	r1, #64
 776 0434 0022     		movs	r2, #0
 777 0436 3B68     		ldr	r3, [r7]
 778 0438 00F060FE 		bl	UART_WaitOnFlagUntilTimeout
 779 043c 0346     		mov	r3, r0
 780 043e 002B     		cmp	r3, #0
 781 0440 01D0     		beq	.L38
 633:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     { 
 634:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       return HAL_TIMEOUT;
 782              		.loc 1 634 0
 783 0442 0323     		movs	r3, #3
 784 0444 15E0     		b	.L27
 785              	.L38:
 635:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     }
 636:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     
 637:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     /* Check if a non-blocking receive process is ongoing or not */
 638:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 786              		.loc 1 638 0
 787 0446 FB68     		ldr	r3, [r7, #12]
 788 0448 93F83930 		ldrb	r3, [r3, #57]
 789 044c DBB2     		uxtb	r3, r3
 790 044e 322B     		cmp	r3, #50
 791 0450 04D1     		bne	.L39
 639:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     {
 640:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       huart->State = HAL_UART_STATE_BUSY_RX;
 792              		.loc 1 640 0
 793 0452 FB68     		ldr	r3, [r7, #12]
 794 0454 2222     		movs	r2, #34
 795 0456 83F83920 		strb	r2, [r3, #57]
 796 045a 03E0     		b	.L40
 797              	.L39:
 641:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     }
 642:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     else
 643:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     {
 644:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       huart->State = HAL_UART_STATE_READY;
 798              		.loc 1 644 0
 799 045c FB68     		ldr	r3, [r7, #12]
 800 045e 0122     		movs	r2, #1
 801 0460 83F83920 		strb	r2, [r3, #57]
 802              	.L40:
 645:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     }
 646:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     
 647:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     /* Process Unlocked */
 648:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     __HAL_UNLOCK(huart);
 803              		.loc 1 648 0
 804 0464 FB68     		ldr	r3, [r7, #12]
 805 0466 0022     		movs	r2, #0
 806 0468 83F83820 		strb	r2, [r3, #56]
 649:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     
 650:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     return HAL_OK;
 807              		.loc 1 650 0
 808 046c 0023     		movs	r3, #0
 809 046e 00E0     		b	.L27
 810              	.L24:
 651:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   }
 652:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   else
 653:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   {
 654:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     return HAL_BUSY;   
 811              		.loc 1 654 0
 812 0470 0223     		movs	r3, #2
 813              	.L27:
 655:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   }
 656:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** }
 814              		.loc 1 656 0
 815 0472 1846     		mov	r0, r3
 816 0474 1837     		adds	r7, r7, #24
 817 0476 BD46     		mov	sp, r7
 818              		@ sp needed
 819 0478 80BD     		pop	{r7, pc}
 820              		.cfi_endproc
 821              	.LFE62:
 823 047a 00BF     		.align	2
 824              		.global	HAL_UART_Receive
 825              		.thumb
 826              		.thumb_func
 828              	HAL_UART_Receive:
 829              	.LFB63:
 657:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
 658:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** /**
 659:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @brief  Receives an amount of data in blocking mode. 
 660:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @param  huart: UART handle
 661:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @param  pData: Pointer to data buffer
 662:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @param  Size: Amount of data to be received
 663:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @param  Timeout: Timeout duration
 664:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @retval HAL status
 665:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   */
 666:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32
 667:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** { 
 830              		.loc 1 667 0
 831              		.cfi_startproc
 832              		@ args = 0, pretend = 0, frame = 24
 833              		@ frame_needed = 1, uses_anonymous_args = 0
 834 047c 80B5     		push	{r7, lr}
 835              		.cfi_def_cfa_offset 8
 836              		.cfi_offset 7, -8
 837              		.cfi_offset 14, -4
 838 047e 86B0     		sub	sp, sp, #24
 839              		.cfi_def_cfa_offset 32
 840 0480 00AF     		add	r7, sp, #0
 841              		.cfi_def_cfa_register 7
 842 0482 F860     		str	r0, [r7, #12]
 843 0484 B960     		str	r1, [r7, #8]
 844 0486 3B60     		str	r3, [r7]
 845 0488 1346     		mov	r3, r2	@ movhi
 846 048a FB80     		strh	r3, [r7, #6]	@ movhi
 668:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   uint16_t* tmp;
 669:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   uint32_t tmp1 = 0;
 847              		.loc 1 669 0
 848 048c 0023     		movs	r3, #0
 849 048e 7B61     		str	r3, [r7, #20]
 670:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
 671:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   tmp1 = huart->State;
 850              		.loc 1 671 0
 851 0490 FB68     		ldr	r3, [r7, #12]
 852 0492 93F83930 		ldrb	r3, [r3, #57]
 853 0496 DBB2     		uxtb	r3, r3
 854 0498 7B61     		str	r3, [r7, #20]
 672:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   if((tmp1 == HAL_UART_STATE_READY) || (tmp1 == HAL_UART_STATE_BUSY_TX))
 855              		.loc 1 672 0
 856 049a 7B69     		ldr	r3, [r7, #20]
 857 049c 012B     		cmp	r3, #1
 858 049e 03D0     		beq	.L42
 859              		.loc 1 672 0 is_stmt 0 discriminator 1
 860 04a0 7B69     		ldr	r3, [r7, #20]
 861 04a2 122B     		cmp	r3, #18
 862 04a4 40F09E80 		bne	.L43
 863              	.L42:
 673:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   { 
 674:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     if((pData == NULL ) || (Size == 0)) 
 864              		.loc 1 674 0 is_stmt 1
 865 04a8 BB68     		ldr	r3, [r7, #8]
 866 04aa 002B     		cmp	r3, #0
 867 04ac 02D0     		beq	.L44
 868              		.loc 1 674 0 is_stmt 0 discriminator 1
 869 04ae FB88     		ldrh	r3, [r7, #6]
 870 04b0 002B     		cmp	r3, #0
 871 04b2 01D1     		bne	.L45
 872              	.L44:
 675:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     {
 676:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       return  HAL_ERROR;
 873              		.loc 1 676 0 is_stmt 1
 874 04b4 0123     		movs	r3, #1
 875 04b6 96E0     		b	.L46
 876              	.L45:
 677:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     }
 678:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     
 679:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     /* Process Locked */
 680:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     __HAL_LOCK(huart);
 877              		.loc 1 680 0
 878 04b8 FB68     		ldr	r3, [r7, #12]
 879 04ba 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 880 04be 012B     		cmp	r3, #1
 881 04c0 01D1     		bne	.L47
 882              		.loc 1 680 0 is_stmt 0 discriminator 1
 883 04c2 0223     		movs	r3, #2
 884 04c4 8FE0     		b	.L46
 885              	.L47:
 886              		.loc 1 680 0 discriminator 2
 887 04c6 FB68     		ldr	r3, [r7, #12]
 888 04c8 0122     		movs	r2, #1
 889 04ca 83F83820 		strb	r2, [r3, #56]
 681:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     
 682:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 890              		.loc 1 682 0 is_stmt 1 discriminator 2
 891 04ce FB68     		ldr	r3, [r7, #12]
 892 04d0 0022     		movs	r2, #0
 893 04d2 83F83A20 		strb	r2, [r3, #58]
 683:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     /* Check if a non-blocking transmit process is ongoing or not */
 684:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     if(huart->State == HAL_UART_STATE_BUSY_TX) 
 894              		.loc 1 684 0 discriminator 2
 895 04d6 FB68     		ldr	r3, [r7, #12]
 896 04d8 93F83930 		ldrb	r3, [r3, #57]
 897 04dc DBB2     		uxtb	r3, r3
 898 04de 122B     		cmp	r3, #18
 899 04e0 04D1     		bne	.L48
 685:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     {
 686:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       huart->State = HAL_UART_STATE_BUSY_TX_RX;
 900              		.loc 1 686 0
 901 04e2 FB68     		ldr	r3, [r7, #12]
 902 04e4 3222     		movs	r2, #50
 903 04e6 83F83920 		strb	r2, [r3, #57]
 904 04ea 03E0     		b	.L49
 905              	.L48:
 687:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     }
 688:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     else
 689:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     {
 690:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       huart->State = HAL_UART_STATE_BUSY_RX;
 906              		.loc 1 690 0
 907 04ec FB68     		ldr	r3, [r7, #12]
 908 04ee 2222     		movs	r2, #34
 909 04f0 83F83920 		strb	r2, [r3, #57]
 910              	.L49:
 691:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     }
 692:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     
 693:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     huart->RxXferSize = Size; 
 911              		.loc 1 693 0
 912 04f4 FB68     		ldr	r3, [r7, #12]
 913 04f6 FA88     		ldrh	r2, [r7, #6]	@ movhi
 914 04f8 9A85     		strh	r2, [r3, #44]	@ movhi
 694:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     huart->RxXferCount = Size;
 915              		.loc 1 694 0
 916 04fa FB68     		ldr	r3, [r7, #12]
 917 04fc FA88     		ldrh	r2, [r7, #6]	@ movhi
 918 04fe DA85     		strh	r2, [r3, #46]	@ movhi
 695:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     
 696:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     /* Check the remain data to be received */
 697:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     while(huart->RxXferCount > 0)
 919              		.loc 1 697 0
 920 0500 57E0     		b	.L50
 921              	.L57:
 698:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     {
 699:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       huart->RxXferCount--;
 922              		.loc 1 699 0
 923 0502 FB68     		ldr	r3, [r7, #12]
 924 0504 DB8D     		ldrh	r3, [r3, #46]
 925 0506 013B     		subs	r3, r3, #1
 926 0508 9AB2     		uxth	r2, r3
 927 050a FB68     		ldr	r3, [r7, #12]
 928 050c DA85     		strh	r2, [r3, #46]	@ movhi
 700:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 929              		.loc 1 700 0
 930 050e FB68     		ldr	r3, [r7, #12]
 931 0510 9B68     		ldr	r3, [r3, #8]
 932 0512 B3F5805F 		cmp	r3, #4096
 933 0516 29D1     		bne	.L51
 701:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       {
 702:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 934              		.loc 1 702 0
 935 0518 F868     		ldr	r0, [r7, #12]
 936 051a 2021     		movs	r1, #32
 937 051c 0022     		movs	r2, #0
 938 051e 3B68     		ldr	r3, [r7]
 939 0520 00F0ECFD 		bl	UART_WaitOnFlagUntilTimeout
 940 0524 0346     		mov	r3, r0
 941 0526 002B     		cmp	r3, #0
 942 0528 01D0     		beq	.L52
 703:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         { 
 704:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****           return HAL_TIMEOUT;
 943              		.loc 1 704 0
 944 052a 0323     		movs	r3, #3
 945 052c 5BE0     		b	.L46
 946              	.L52:
 705:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         }
 706:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         tmp = (uint16_t*) pData ;
 947              		.loc 1 706 0
 948 052e BB68     		ldr	r3, [r7, #8]
 949 0530 3B61     		str	r3, [r7, #16]
 707:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         if(huart->Init.Parity == UART_PARITY_NONE)
 950              		.loc 1 707 0
 951 0532 FB68     		ldr	r3, [r7, #12]
 952 0534 1B69     		ldr	r3, [r3, #16]
 953 0536 002B     		cmp	r3, #0
 954 0538 0CD1     		bne	.L53
 708:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         {
 709:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****           *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 955              		.loc 1 709 0
 956 053a FB68     		ldr	r3, [r7, #12]
 957 053c 1B68     		ldr	r3, [r3]
 958 053e 5B68     		ldr	r3, [r3, #4]
 959 0540 9BB2     		uxth	r3, r3
 960 0542 C3F30803 		ubfx	r3, r3, #0, #9
 961 0546 9AB2     		uxth	r2, r3
 962 0548 3B69     		ldr	r3, [r7, #16]
 963 054a 1A80     		strh	r2, [r3]	@ movhi
 710:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****           pData +=2;
 964              		.loc 1 710 0
 965 054c BB68     		ldr	r3, [r7, #8]
 966 054e 0233     		adds	r3, r3, #2
 967 0550 BB60     		str	r3, [r7, #8]
 968 0552 2EE0     		b	.L50
 969              	.L53:
 711:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         }
 712:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         else
 713:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         {
 714:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****           *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 970              		.loc 1 714 0
 971 0554 FB68     		ldr	r3, [r7, #12]
 972 0556 1B68     		ldr	r3, [r3]
 973 0558 5B68     		ldr	r3, [r3, #4]
 974 055a 9BB2     		uxth	r3, r3
 975 055c DBB2     		uxtb	r3, r3
 976 055e 9AB2     		uxth	r2, r3
 977 0560 3B69     		ldr	r3, [r7, #16]
 978 0562 1A80     		strh	r2, [r3]	@ movhi
 715:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****           pData +=1;
 979              		.loc 1 715 0
 980 0564 BB68     		ldr	r3, [r7, #8]
 981 0566 0133     		adds	r3, r3, #1
 982 0568 BB60     		str	r3, [r7, #8]
 983 056a 22E0     		b	.L50
 984              	.L51:
 716:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         }
 717:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
 718:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       } 
 719:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       else
 720:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       {
 721:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 985              		.loc 1 721 0
 986 056c F868     		ldr	r0, [r7, #12]
 987 056e 2021     		movs	r1, #32
 988 0570 0022     		movs	r2, #0
 989 0572 3B68     		ldr	r3, [r7]
 990 0574 00F0C2FD 		bl	UART_WaitOnFlagUntilTimeout
 991 0578 0346     		mov	r3, r0
 992 057a 002B     		cmp	r3, #0
 993 057c 01D0     		beq	.L55
 722:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         { 
 723:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****           return HAL_TIMEOUT;
 994              		.loc 1 723 0
 995 057e 0323     		movs	r3, #3
 996 0580 31E0     		b	.L46
 997              	.L55:
 724:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         }
 725:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         if(huart->Init.Parity == UART_PARITY_NONE)
 998              		.loc 1 725 0
 999 0582 FB68     		ldr	r3, [r7, #12]
 1000 0584 1B69     		ldr	r3, [r3, #16]
 1001 0586 002B     		cmp	r3, #0
 1002 0588 08D1     		bne	.L56
 726:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         {
 727:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****           *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 1003              		.loc 1 727 0
 1004 058a BB68     		ldr	r3, [r7, #8]
 1005 058c 5A1C     		adds	r2, r3, #1
 1006 058e BA60     		str	r2, [r7, #8]
 1007 0590 FA68     		ldr	r2, [r7, #12]
 1008 0592 1268     		ldr	r2, [r2]
 1009 0594 5268     		ldr	r2, [r2, #4]
 1010 0596 D2B2     		uxtb	r2, r2
 1011 0598 1A70     		strb	r2, [r3]
 1012 059a 0AE0     		b	.L50
 1013              	.L56:
 728:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         }
 729:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         else
 730:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         {
 731:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****           *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 1014              		.loc 1 731 0
 1015 059c BB68     		ldr	r3, [r7, #8]
 1016 059e 5A1C     		adds	r2, r3, #1
 1017 05a0 BA60     		str	r2, [r7, #8]
 1018 05a2 FA68     		ldr	r2, [r7, #12]
 1019 05a4 1268     		ldr	r2, [r2]
 1020 05a6 5268     		ldr	r2, [r2, #4]
 1021 05a8 D2B2     		uxtb	r2, r2
 1022 05aa 02F07F02 		and	r2, r2, #127
 1023 05ae D2B2     		uxtb	r2, r2
 1024 05b0 1A70     		strb	r2, [r3]
 1025              	.L50:
 697:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     {
 1026              		.loc 1 697 0 discriminator 1
 1027 05b2 FB68     		ldr	r3, [r7, #12]
 1028 05b4 DB8D     		ldrh	r3, [r3, #46]
 1029 05b6 002B     		cmp	r3, #0
 1030 05b8 A3D1     		bne	.L57
 732:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         }
 733:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         
 734:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       }
 735:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     }
 736:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     
 737:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     /* Check if a non-blocking transmit process is ongoing or not */
 738:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 1031              		.loc 1 738 0
 1032 05ba FB68     		ldr	r3, [r7, #12]
 1033 05bc 93F83930 		ldrb	r3, [r3, #57]
 1034 05c0 DBB2     		uxtb	r3, r3
 1035 05c2 322B     		cmp	r3, #50
 1036 05c4 04D1     		bne	.L58
 739:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     {
 740:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       huart->State = HAL_UART_STATE_BUSY_TX;
 1037              		.loc 1 740 0
 1038 05c6 FB68     		ldr	r3, [r7, #12]
 1039 05c8 1222     		movs	r2, #18
 1040 05ca 83F83920 		strb	r2, [r3, #57]
 1041 05ce 03E0     		b	.L59
 1042              	.L58:
 741:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     }
 742:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     else
 743:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     {
 744:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       huart->State = HAL_UART_STATE_READY;
 1043              		.loc 1 744 0
 1044 05d0 FB68     		ldr	r3, [r7, #12]
 1045 05d2 0122     		movs	r2, #1
 1046 05d4 83F83920 		strb	r2, [r3, #57]
 1047              	.L59:
 745:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     } 
 746:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     /* Process Unlocked */
 747:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     __HAL_UNLOCK(huart);
 1048              		.loc 1 747 0
 1049 05d8 FB68     		ldr	r3, [r7, #12]
 1050 05da 0022     		movs	r2, #0
 1051 05dc 83F83820 		strb	r2, [r3, #56]
 748:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     
 749:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     return HAL_OK;
 1052              		.loc 1 749 0
 1053 05e0 0023     		movs	r3, #0
 1054 05e2 00E0     		b	.L46
 1055              	.L43:
 750:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   }
 751:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   else
 752:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   {
 753:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     return HAL_BUSY;   
 1056              		.loc 1 753 0
 1057 05e4 0223     		movs	r3, #2
 1058              	.L46:
 754:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   }
 755:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** }
 1059              		.loc 1 755 0
 1060 05e6 1846     		mov	r0, r3
 1061 05e8 1837     		adds	r7, r7, #24
 1062 05ea BD46     		mov	sp, r7
 1063              		@ sp needed
 1064 05ec 80BD     		pop	{r7, pc}
 1065              		.cfi_endproc
 1066              	.LFE63:
 1068 05ee 00BF     		.align	2
 1069              		.global	HAL_UART_Transmit_IT
 1070              		.thumb
 1071              		.thumb_func
 1073              	HAL_UART_Transmit_IT:
 1074              	.LFB64:
 756:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
 757:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** /**
 758:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @brief  Sends an amount of data in non blocking mode.
 759:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @param  huart: UART handle
 760:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @param  pData: Pointer to data buffer
 761:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @param  Size: Amount of data to be sent
 762:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @retval HAL status
 763:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   */
 764:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
 765:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** {
 1075              		.loc 1 765 0
 1076              		.cfi_startproc
 1077              		@ args = 0, pretend = 0, frame = 24
 1078              		@ frame_needed = 1, uses_anonymous_args = 0
 1079              		@ link register save eliminated.
 1080 05f0 80B4     		push	{r7}
 1081              		.cfi_def_cfa_offset 4
 1082              		.cfi_offset 7, -4
 1083 05f2 87B0     		sub	sp, sp, #28
 1084              		.cfi_def_cfa_offset 32
 1085 05f4 00AF     		add	r7, sp, #0
 1086              		.cfi_def_cfa_register 7
 1087 05f6 F860     		str	r0, [r7, #12]
 1088 05f8 B960     		str	r1, [r7, #8]
 1089 05fa 1346     		mov	r3, r2
 1090 05fc FB80     		strh	r3, [r7, #6]	@ movhi
 766:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   uint32_t tmp = 0;
 1091              		.loc 1 766 0
 1092 05fe 0023     		movs	r3, #0
 1093 0600 7B61     		str	r3, [r7, #20]
 767:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
 768:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   tmp = huart->State;
 1094              		.loc 1 768 0
 1095 0602 FB68     		ldr	r3, [r7, #12]
 1096 0604 93F83930 		ldrb	r3, [r3, #57]
 1097 0608 DBB2     		uxtb	r3, r3
 1098 060a 7B61     		str	r3, [r7, #20]
 769:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   if((tmp == HAL_UART_STATE_READY) || (tmp == HAL_UART_STATE_BUSY_RX))
 1099              		.loc 1 769 0
 1100 060c 7B69     		ldr	r3, [r7, #20]
 1101 060e 012B     		cmp	r3, #1
 1102 0610 02D0     		beq	.L61
 1103              		.loc 1 769 0 is_stmt 0 discriminator 1
 1104 0612 7B69     		ldr	r3, [r7, #20]
 1105 0614 222B     		cmp	r3, #34
 1106 0616 4CD1     		bne	.L62
 1107              	.L61:
 770:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   {
 771:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     if((pData == NULL ) || (Size == 0)) 
 1108              		.loc 1 771 0 is_stmt 1
 1109 0618 BB68     		ldr	r3, [r7, #8]
 1110 061a 002B     		cmp	r3, #0
 1111 061c 02D0     		beq	.L63
 1112              		.loc 1 771 0 is_stmt 0 discriminator 1
 1113 061e FB88     		ldrh	r3, [r7, #6]
 1114 0620 002B     		cmp	r3, #0
 1115 0622 01D1     		bne	.L64
 1116              	.L63:
 772:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     {
 773:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       return HAL_ERROR;
 1117              		.loc 1 773 0 is_stmt 1
 1118 0624 0123     		movs	r3, #1
 1119 0626 45E0     		b	.L65
 1120              	.L64:
 774:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     }
 775:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     
 776:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     /* Process Locked */
 777:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     __HAL_LOCK(huart);
 1121              		.loc 1 777 0
 1122 0628 FB68     		ldr	r3, [r7, #12]
 1123 062a 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 1124 062e 012B     		cmp	r3, #1
 1125 0630 01D1     		bne	.L66
 1126              		.loc 1 777 0 is_stmt 0 discriminator 1
 1127 0632 0223     		movs	r3, #2
 1128 0634 3EE0     		b	.L65
 1129              	.L66:
 1130              		.loc 1 777 0 discriminator 2
 1131 0636 FB68     		ldr	r3, [r7, #12]
 1132 0638 0122     		movs	r2, #1
 1133 063a 83F83820 		strb	r2, [r3, #56]
 778:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     
 779:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     huart->pTxBuffPtr = pData;
 1134              		.loc 1 779 0 is_stmt 1 discriminator 2
 1135 063e FB68     		ldr	r3, [r7, #12]
 1136 0640 BA68     		ldr	r2, [r7, #8]
 1137 0642 1A62     		str	r2, [r3, #32]
 780:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     huart->TxXferSize = Size;
 1138              		.loc 1 780 0 discriminator 2
 1139 0644 FB68     		ldr	r3, [r7, #12]
 1140 0646 FA88     		ldrh	r2, [r7, #6]	@ movhi
 1141 0648 9A84     		strh	r2, [r3, #36]	@ movhi
 781:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     huart->TxXferCount = Size;
 1142              		.loc 1 781 0 discriminator 2
 1143 064a FB68     		ldr	r3, [r7, #12]
 1144 064c FA88     		ldrh	r2, [r7, #6]	@ movhi
 1145 064e DA84     		strh	r2, [r3, #38]	@ movhi
 782:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
 783:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 1146              		.loc 1 783 0 discriminator 2
 1147 0650 FB68     		ldr	r3, [r7, #12]
 1148 0652 0022     		movs	r2, #0
 1149 0654 83F83A20 		strb	r2, [r3, #58]
 784:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     /* Check if a receive process is ongoing or not */
 785:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     if(huart->State == HAL_UART_STATE_BUSY_RX) 
 1150              		.loc 1 785 0 discriminator 2
 1151 0658 FB68     		ldr	r3, [r7, #12]
 1152 065a 93F83930 		ldrb	r3, [r3, #57]
 1153 065e DBB2     		uxtb	r3, r3
 1154 0660 222B     		cmp	r3, #34
 1155 0662 04D1     		bne	.L67
 786:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     {
 787:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       huart->State = HAL_UART_STATE_BUSY_TX_RX;
 1156              		.loc 1 787 0
 1157 0664 FB68     		ldr	r3, [r7, #12]
 1158 0666 3222     		movs	r2, #50
 1159 0668 83F83920 		strb	r2, [r3, #57]
 1160 066c 03E0     		b	.L68
 1161              	.L67:
 788:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     }
 789:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     else
 790:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     {
 791:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       huart->State = HAL_UART_STATE_BUSY_TX;
 1162              		.loc 1 791 0
 1163 066e FB68     		ldr	r3, [r7, #12]
 1164 0670 1222     		movs	r2, #18
 1165 0672 83F83920 		strb	r2, [r3, #57]
 1166              	.L68:
 792:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     }
 793:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
 794:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     /* Enable the UART Parity Error Interrupt */
 795:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 1167              		.loc 1 795 0
 1168 0676 FB68     		ldr	r3, [r7, #12]
 1169 0678 1B68     		ldr	r3, [r3]
 1170 067a FA68     		ldr	r2, [r7, #12]
 1171 067c 1268     		ldr	r2, [r2]
 1172 067e D268     		ldr	r2, [r2, #12]
 1173 0680 42F48072 		orr	r2, r2, #256
 1174 0684 DA60     		str	r2, [r3, #12]
 796:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
 797:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
 798:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 1175              		.loc 1 798 0
 1176 0686 FB68     		ldr	r3, [r7, #12]
 1177 0688 1B68     		ldr	r3, [r3]
 1178 068a FA68     		ldr	r2, [r7, #12]
 1179 068c 1268     		ldr	r2, [r2]
 1180 068e 5269     		ldr	r2, [r2, #20]
 1181 0690 42F00102 		orr	r2, r2, #1
 1182 0694 5A61     		str	r2, [r3, #20]
 799:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
 800:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     /* Process Unlocked */
 801:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     __HAL_UNLOCK(huart);
 1183              		.loc 1 801 0
 1184 0696 FB68     		ldr	r3, [r7, #12]
 1185 0698 0022     		movs	r2, #0
 1186 069a 83F83820 		strb	r2, [r3, #56]
 802:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
 803:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     /* Enable the UART Transmit Complete Interrupt */
 804:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 1187              		.loc 1 804 0
 1188 069e FB68     		ldr	r3, [r7, #12]
 1189 06a0 1B68     		ldr	r3, [r3]
 1190 06a2 FA68     		ldr	r2, [r7, #12]
 1191 06a4 1268     		ldr	r2, [r2]
 1192 06a6 D268     		ldr	r2, [r2, #12]
 1193 06a8 42F04002 		orr	r2, r2, #64
 1194 06ac DA60     		str	r2, [r3, #12]
 805:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     
 806:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     return HAL_OK;
 1195              		.loc 1 806 0
 1196 06ae 0023     		movs	r3, #0
 1197 06b0 00E0     		b	.L65
 1198              	.L62:
 807:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   }
 808:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   else
 809:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   {
 810:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     return HAL_BUSY;   
 1199              		.loc 1 810 0
 1200 06b2 0223     		movs	r3, #2
 1201              	.L65:
 811:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   }
 812:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** }
 1202              		.loc 1 812 0
 1203 06b4 1846     		mov	r0, r3
 1204 06b6 1C37     		adds	r7, r7, #28
 1205 06b8 BD46     		mov	sp, r7
 1206              		@ sp needed
 1207 06ba 5DF8047B 		ldr	r7, [sp], #4
 1208 06be 7047     		bx	lr
 1209              		.cfi_endproc
 1210              	.LFE64:
 1212              		.align	2
 1213              		.global	HAL_UART_Receive_IT
 1214              		.thumb
 1215              		.thumb_func
 1217              	HAL_UART_Receive_IT:
 1218              	.LFB65:
 813:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
 814:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** /**
 815:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @brief  Receives an amount of data in non blocking mode 
 816:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @param  huart: UART handle
 817:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @param  pData: Pointer to data buffer
 818:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @param  Size: Amount of data to be received
 819:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @retval HAL status
 820:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   */
 821:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
 822:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** {
 1219              		.loc 1 822 0
 1220              		.cfi_startproc
 1221              		@ args = 0, pretend = 0, frame = 24
 1222              		@ frame_needed = 1, uses_anonymous_args = 0
 1223              		@ link register save eliminated.
 1224 06c0 80B4     		push	{r7}
 1225              		.cfi_def_cfa_offset 4
 1226              		.cfi_offset 7, -4
 1227 06c2 87B0     		sub	sp, sp, #28
 1228              		.cfi_def_cfa_offset 32
 1229 06c4 00AF     		add	r7, sp, #0
 1230              		.cfi_def_cfa_register 7
 1231 06c6 F860     		str	r0, [r7, #12]
 1232 06c8 B960     		str	r1, [r7, #8]
 1233 06ca 1346     		mov	r3, r2
 1234 06cc FB80     		strh	r3, [r7, #6]	@ movhi
 823:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   uint32_t tmp = 0;
 1235              		.loc 1 823 0
 1236 06ce 0023     		movs	r3, #0
 1237 06d0 7B61     		str	r3, [r7, #20]
 824:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
 825:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   tmp = huart->State;  
 1238              		.loc 1 825 0
 1239 06d2 FB68     		ldr	r3, [r7, #12]
 1240 06d4 93F83930 		ldrb	r3, [r3, #57]
 1241 06d8 DBB2     		uxtb	r3, r3
 1242 06da 7B61     		str	r3, [r7, #20]
 826:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   if((tmp == HAL_UART_STATE_READY) || (tmp == HAL_UART_STATE_BUSY_TX))
 1243              		.loc 1 826 0
 1244 06dc 7B69     		ldr	r3, [r7, #20]
 1245 06de 012B     		cmp	r3, #1
 1246 06e0 02D0     		beq	.L70
 1247              		.loc 1 826 0 is_stmt 0 discriminator 1
 1248 06e2 7B69     		ldr	r3, [r7, #20]
 1249 06e4 122B     		cmp	r3, #18
 1250 06e6 4CD1     		bne	.L71
 1251              	.L70:
 827:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   {
 828:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     if((pData == NULL ) || (Size == 0)) 
 1252              		.loc 1 828 0 is_stmt 1
 1253 06e8 BB68     		ldr	r3, [r7, #8]
 1254 06ea 002B     		cmp	r3, #0
 1255 06ec 02D0     		beq	.L72
 1256              		.loc 1 828 0 is_stmt 0 discriminator 1
 1257 06ee FB88     		ldrh	r3, [r7, #6]
 1258 06f0 002B     		cmp	r3, #0
 1259 06f2 01D1     		bne	.L73
 1260              	.L72:
 829:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     {
 830:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       return HAL_ERROR;
 1261              		.loc 1 830 0 is_stmt 1
 1262 06f4 0123     		movs	r3, #1
 1263 06f6 45E0     		b	.L74
 1264              	.L73:
 831:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     }
 832:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     
 833:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     /* Process Locked */
 834:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     __HAL_LOCK(huart);
 1265              		.loc 1 834 0
 1266 06f8 FB68     		ldr	r3, [r7, #12]
 1267 06fa 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 1268 06fe 012B     		cmp	r3, #1
 1269 0700 01D1     		bne	.L75
 1270              		.loc 1 834 0 is_stmt 0 discriminator 1
 1271 0702 0223     		movs	r3, #2
 1272 0704 3EE0     		b	.L74
 1273              	.L75:
 1274              		.loc 1 834 0 discriminator 2
 1275 0706 FB68     		ldr	r3, [r7, #12]
 1276 0708 0122     		movs	r2, #1
 1277 070a 83F83820 		strb	r2, [r3, #56]
 835:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     
 836:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     huart->pRxBuffPtr = pData;
 1278              		.loc 1 836 0 is_stmt 1 discriminator 2
 1279 070e FB68     		ldr	r3, [r7, #12]
 1280 0710 BA68     		ldr	r2, [r7, #8]
 1281 0712 9A62     		str	r2, [r3, #40]
 837:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     huart->RxXferSize = Size;
 1282              		.loc 1 837 0 discriminator 2
 1283 0714 FB68     		ldr	r3, [r7, #12]
 1284 0716 FA88     		ldrh	r2, [r7, #6]	@ movhi
 1285 0718 9A85     		strh	r2, [r3, #44]	@ movhi
 838:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     huart->RxXferCount = Size;
 1286              		.loc 1 838 0 discriminator 2
 1287 071a FB68     		ldr	r3, [r7, #12]
 1288 071c FA88     		ldrh	r2, [r7, #6]	@ movhi
 1289 071e DA85     		strh	r2, [r3, #46]	@ movhi
 839:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     
 840:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 1290              		.loc 1 840 0 discriminator 2
 1291 0720 FB68     		ldr	r3, [r7, #12]
 1292 0722 0022     		movs	r2, #0
 1293 0724 83F83A20 		strb	r2, [r3, #58]
 841:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     /* Check if a transmit process is ongoing or not */
 842:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     if(huart->State == HAL_UART_STATE_BUSY_TX) 
 1294              		.loc 1 842 0 discriminator 2
 1295 0728 FB68     		ldr	r3, [r7, #12]
 1296 072a 93F83930 		ldrb	r3, [r3, #57]
 1297 072e DBB2     		uxtb	r3, r3
 1298 0730 122B     		cmp	r3, #18
 1299 0732 04D1     		bne	.L76
 843:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     {
 844:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       huart->State = HAL_UART_STATE_BUSY_TX_RX;
 1300              		.loc 1 844 0
 1301 0734 FB68     		ldr	r3, [r7, #12]
 1302 0736 3222     		movs	r2, #50
 1303 0738 83F83920 		strb	r2, [r3, #57]
 1304 073c 03E0     		b	.L77
 1305              	.L76:
 845:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     }
 846:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     else
 847:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     {
 848:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       huart->State = HAL_UART_STATE_BUSY_RX;
 1306              		.loc 1 848 0
 1307 073e FB68     		ldr	r3, [r7, #12]
 1308 0740 2222     		movs	r2, #34
 1309 0742 83F83920 		strb	r2, [r3, #57]
 1310              	.L77:
 849:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     }
 850:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     
 851:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     /* Enable the UART Parity Error Interrupt */
 852:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 1311              		.loc 1 852 0
 1312 0746 FB68     		ldr	r3, [r7, #12]
 1313 0748 1B68     		ldr	r3, [r3]
 1314 074a FA68     		ldr	r2, [r7, #12]
 1315 074c 1268     		ldr	r2, [r2]
 1316 074e D268     		ldr	r2, [r2, #12]
 1317 0750 42F48072 		orr	r2, r2, #256
 1318 0754 DA60     		str	r2, [r3, #12]
 853:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     
 854:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
 855:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 1319              		.loc 1 855 0
 1320 0756 FB68     		ldr	r3, [r7, #12]
 1321 0758 1B68     		ldr	r3, [r3]
 1322 075a FA68     		ldr	r2, [r7, #12]
 1323 075c 1268     		ldr	r2, [r2]
 1324 075e 5269     		ldr	r2, [r2, #20]
 1325 0760 42F00102 		orr	r2, r2, #1
 1326 0764 5A61     		str	r2, [r3, #20]
 856:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     
 857:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     /* Process Unlocked */
 858:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     __HAL_UNLOCK(huart);
 1327              		.loc 1 858 0
 1328 0766 FB68     		ldr	r3, [r7, #12]
 1329 0768 0022     		movs	r2, #0
 1330 076a 83F83820 		strb	r2, [r3, #56]
 859:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     
 860:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     /* Enable the UART Data Register not empty Interrupt */
 861:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 1331              		.loc 1 861 0
 1332 076e FB68     		ldr	r3, [r7, #12]
 1333 0770 1B68     		ldr	r3, [r3]
 1334 0772 FA68     		ldr	r2, [r7, #12]
 1335 0774 1268     		ldr	r2, [r2]
 1336 0776 D268     		ldr	r2, [r2, #12]
 1337 0778 42F02002 		orr	r2, r2, #32
 1338 077c DA60     		str	r2, [r3, #12]
 862:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     
 863:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     return HAL_OK;
 1339              		.loc 1 863 0
 1340 077e 0023     		movs	r3, #0
 1341 0780 00E0     		b	.L74
 1342              	.L71:
 864:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   }
 865:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   else
 866:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   {
 867:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     return HAL_BUSY; 
 1343              		.loc 1 867 0
 1344 0782 0223     		movs	r3, #2
 1345              	.L74:
 868:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   }
 869:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** }
 1346              		.loc 1 869 0
 1347 0784 1846     		mov	r0, r3
 1348 0786 1C37     		adds	r7, r7, #28
 1349 0788 BD46     		mov	sp, r7
 1350              		@ sp needed
 1351 078a 5DF8047B 		ldr	r7, [sp], #4
 1352 078e 7047     		bx	lr
 1353              		.cfi_endproc
 1354              	.LFE65:
 1356              		.align	2
 1357              		.global	HAL_UART_Transmit_DMA
 1358              		.thumb
 1359              		.thumb_func
 1361              	HAL_UART_Transmit_DMA:
 1362              	.LFB66:
 870:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
 871:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** /**
 872:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @brief  Sends an amount of data in non blocking mode. 
 873:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @param  huart: UART handle
 874:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @param  pData: Pointer to data buffer
 875:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @param  Size: Amount of data to be sent
 876:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @retval HAL status
 877:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   */
 878:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
 879:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** {
 1363              		.loc 1 879 0
 1364              		.cfi_startproc
 1365              		@ args = 0, pretend = 0, frame = 24
 1366              		@ frame_needed = 1, uses_anonymous_args = 0
 1367 0790 80B5     		push	{r7, lr}
 1368              		.cfi_def_cfa_offset 8
 1369              		.cfi_offset 7, -8
 1370              		.cfi_offset 14, -4
 1371 0792 86B0     		sub	sp, sp, #24
 1372              		.cfi_def_cfa_offset 32
 1373 0794 00AF     		add	r7, sp, #0
 1374              		.cfi_def_cfa_register 7
 1375 0796 F860     		str	r0, [r7, #12]
 1376 0798 B960     		str	r1, [r7, #8]
 1377 079a 1346     		mov	r3, r2
 1378 079c FB80     		strh	r3, [r7, #6]	@ movhi
 880:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   uint32_t *tmp;
 881:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   uint32_t tmp1 = 0;
 1379              		.loc 1 881 0
 1380 079e 0023     		movs	r3, #0
 1381 07a0 7B61     		str	r3, [r7, #20]
 882:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
 883:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   tmp1 = huart->State;  
 1382              		.loc 1 883 0
 1383 07a2 FB68     		ldr	r3, [r7, #12]
 1384 07a4 93F83930 		ldrb	r3, [r3, #57]
 1385 07a8 DBB2     		uxtb	r3, r3
 1386 07aa 7B61     		str	r3, [r7, #20]
 884:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   if((tmp1 == HAL_UART_STATE_READY) || (tmp1 == HAL_UART_STATE_BUSY_RX))
 1387              		.loc 1 884 0
 1388 07ac 7B69     		ldr	r3, [r7, #20]
 1389 07ae 012B     		cmp	r3, #1
 1390 07b0 02D0     		beq	.L79
 1391              		.loc 1 884 0 is_stmt 0 discriminator 1
 1392 07b2 7B69     		ldr	r3, [r7, #20]
 1393 07b4 222B     		cmp	r3, #34
 1394 07b6 5FD1     		bne	.L80
 1395              	.L79:
 885:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   {
 886:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     if((pData == NULL ) || (Size == 0)) 
 1396              		.loc 1 886 0 is_stmt 1
 1397 07b8 BB68     		ldr	r3, [r7, #8]
 1398 07ba 002B     		cmp	r3, #0
 1399 07bc 02D0     		beq	.L81
 1400              		.loc 1 886 0 is_stmt 0 discriminator 1
 1401 07be FB88     		ldrh	r3, [r7, #6]
 1402 07c0 002B     		cmp	r3, #0
 1403 07c2 01D1     		bne	.L82
 1404              	.L81:
 887:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     {
 888:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       return HAL_ERROR;
 1405              		.loc 1 888 0 is_stmt 1
 1406 07c4 0123     		movs	r3, #1
 1407 07c6 58E0     		b	.L83
 1408              	.L82:
 889:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     }
 890:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     
 891:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     /* Process Locked */
 892:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     __HAL_LOCK(huart);
 1409              		.loc 1 892 0
 1410 07c8 FB68     		ldr	r3, [r7, #12]
 1411 07ca 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 1412 07ce 012B     		cmp	r3, #1
 1413 07d0 01D1     		bne	.L84
 1414              		.loc 1 892 0 is_stmt 0 discriminator 1
 1415 07d2 0223     		movs	r3, #2
 1416 07d4 51E0     		b	.L83
 1417              	.L84:
 1418              		.loc 1 892 0 discriminator 2
 1419 07d6 FB68     		ldr	r3, [r7, #12]
 1420 07d8 0122     		movs	r2, #1
 1421 07da 83F83820 		strb	r2, [r3, #56]
 893:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     
 894:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     huart->pTxBuffPtr = pData;
 1422              		.loc 1 894 0 is_stmt 1 discriminator 2
 1423 07de BA68     		ldr	r2, [r7, #8]
 1424 07e0 FB68     		ldr	r3, [r7, #12]
 1425 07e2 1A62     		str	r2, [r3, #32]
 895:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     huart->TxXferSize = Size;
 1426              		.loc 1 895 0 discriminator 2
 1427 07e4 FB68     		ldr	r3, [r7, #12]
 1428 07e6 FA88     		ldrh	r2, [r7, #6]	@ movhi
 1429 07e8 9A84     		strh	r2, [r3, #36]	@ movhi
 896:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     huart->TxXferCount = Size;
 1430              		.loc 1 896 0 discriminator 2
 1431 07ea FB68     		ldr	r3, [r7, #12]
 1432 07ec FA88     		ldrh	r2, [r7, #6]	@ movhi
 1433 07ee DA84     		strh	r2, [r3, #38]	@ movhi
 897:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     
 898:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 1434              		.loc 1 898 0 discriminator 2
 1435 07f0 FB68     		ldr	r3, [r7, #12]
 1436 07f2 0022     		movs	r2, #0
 1437 07f4 83F83A20 		strb	r2, [r3, #58]
 899:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     /* Check if a receive process is ongoing or not */
 900:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     if(huart->State == HAL_UART_STATE_BUSY_RX) 
 1438              		.loc 1 900 0 discriminator 2
 1439 07f8 FB68     		ldr	r3, [r7, #12]
 1440 07fa 93F83930 		ldrb	r3, [r3, #57]
 1441 07fe DBB2     		uxtb	r3, r3
 1442 0800 222B     		cmp	r3, #34
 1443 0802 04D1     		bne	.L85
 901:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     {
 902:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       huart->State = HAL_UART_STATE_BUSY_TX_RX;
 1444              		.loc 1 902 0
 1445 0804 FB68     		ldr	r3, [r7, #12]
 1446 0806 3222     		movs	r2, #50
 1447 0808 83F83920 		strb	r2, [r3, #57]
 1448 080c 03E0     		b	.L86
 1449              	.L85:
 903:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     }
 904:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     else
 905:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     {
 906:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       huart->State = HAL_UART_STATE_BUSY_TX;
 1450              		.loc 1 906 0
 1451 080e FB68     		ldr	r3, [r7, #12]
 1452 0810 1222     		movs	r2, #18
 1453 0812 83F83920 		strb	r2, [r3, #57]
 1454              	.L86:
 907:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     }
 908:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     
 909:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     /* Set the UART DMA transfer complete callback */
 910:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 1455              		.loc 1 910 0
 1456 0816 FB68     		ldr	r3, [r7, #12]
 1457 0818 1A6B     		ldr	r2, [r3, #48]
 1458 081a 40F20003 		movw	r3, #:lower16:UART_DMATransmitCplt
 1459 081e C0F20003 		movt	r3, #:upper16:UART_DMATransmitCplt
 1460 0822 D363     		str	r3, [r2, #60]
 911:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     
 912:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     /* Set the UART DMA Half transfer complete callback */
 913:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 1461              		.loc 1 913 0
 1462 0824 FB68     		ldr	r3, [r7, #12]
 1463 0826 1A6B     		ldr	r2, [r3, #48]
 1464 0828 40F20003 		movw	r3, #:lower16:UART_DMATxHalfCplt
 1465 082c C0F20003 		movt	r3, #:upper16:UART_DMATxHalfCplt
 1466 0830 1364     		str	r3, [r2, #64]
 914:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     
 915:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     /* Set the DMA error callback */
 916:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     huart->hdmatx->XferErrorCallback = UART_DMAError;
 1467              		.loc 1 916 0
 1468 0832 FB68     		ldr	r3, [r7, #12]
 1469 0834 1A6B     		ldr	r2, [r3, #48]
 1470 0836 40F20003 		movw	r3, #:lower16:UART_DMAError
 1471 083a C0F20003 		movt	r3, #:upper16:UART_DMAError
 1472 083e 9364     		str	r3, [r2, #72]
 917:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
 918:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     /* Enable the UART transmit DMA Stream */
 919:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     tmp = (uint32_t*)&pData;
 1473              		.loc 1 919 0
 1474 0840 07F10803 		add	r3, r7, #8
 1475 0844 3B61     		str	r3, [r7, #16]
 920:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 1476              		.loc 1 920 0
 1477 0846 FB68     		ldr	r3, [r7, #12]
 1478 0848 186B     		ldr	r0, [r3, #48]
 1479 084a 3B69     		ldr	r3, [r7, #16]
 1480 084c 1968     		ldr	r1, [r3]
 1481 084e FB68     		ldr	r3, [r7, #12]
 1482 0850 1B68     		ldr	r3, [r3]
 1483 0852 0433     		adds	r3, r3, #4
 1484 0854 1A46     		mov	r2, r3
 1485 0856 FB88     		ldrh	r3, [r7, #6]
 1486 0858 FFF7FEFF 		bl	HAL_DMA_Start_IT
 921:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     
 922:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     /* Enable the DMA transfer for transmit request by setting the DMAT bit
 923:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****        in the UART CR3 register */
 924:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     huart->Instance->CR3 |= USART_CR3_DMAT;
 1487              		.loc 1 924 0
 1488 085c FB68     		ldr	r3, [r7, #12]
 1489 085e 1B68     		ldr	r3, [r3]
 1490 0860 FA68     		ldr	r2, [r7, #12]
 1491 0862 1268     		ldr	r2, [r2]
 1492 0864 5269     		ldr	r2, [r2, #20]
 1493 0866 42F08002 		orr	r2, r2, #128
 1494 086a 5A61     		str	r2, [r3, #20]
 925:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     
 926:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     /* Process Unlocked */
 927:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     __HAL_UNLOCK(huart);
 1495              		.loc 1 927 0
 1496 086c FB68     		ldr	r3, [r7, #12]
 1497 086e 0022     		movs	r2, #0
 1498 0870 83F83820 		strb	r2, [r3, #56]
 928:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     
 929:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     return HAL_OK;
 1499              		.loc 1 929 0
 1500 0874 0023     		movs	r3, #0
 1501 0876 00E0     		b	.L83
 1502              	.L80:
 930:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   }
 931:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   else
 932:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   {
 933:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     return HAL_BUSY;   
 1503              		.loc 1 933 0
 1504 0878 0223     		movs	r3, #2
 1505              	.L83:
 934:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   }
 935:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** }
 1506              		.loc 1 935 0
 1507 087a 1846     		mov	r0, r3
 1508 087c 1837     		adds	r7, r7, #24
 1509 087e BD46     		mov	sp, r7
 1510              		@ sp needed
 1511 0880 80BD     		pop	{r7, pc}
 1512              		.cfi_endproc
 1513              	.LFE66:
 1515 0882 00BF     		.align	2
 1516              		.global	HAL_UART_Receive_DMA
 1517              		.thumb
 1518              		.thumb_func
 1520              	HAL_UART_Receive_DMA:
 1521              	.LFB67:
 936:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
 937:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** /**
 938:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @brief  Receives an amount of data in non blocking mode. 
 939:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @param  huart: UART handle
 940:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @param  pData: Pointer to data buffer
 941:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @param  Size: Amount of data to be received
 942:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @note   When the UART parity is enabled (PCE = 1) the data received contain the parity bit.
 943:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @retval HAL status
 944:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   */
 945:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
 946:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** {
 1522              		.loc 1 946 0
 1523              		.cfi_startproc
 1524              		@ args = 0, pretend = 0, frame = 24
 1525              		@ frame_needed = 1, uses_anonymous_args = 0
 1526 0884 80B5     		push	{r7, lr}
 1527              		.cfi_def_cfa_offset 8
 1528              		.cfi_offset 7, -8
 1529              		.cfi_offset 14, -4
 1530 0886 86B0     		sub	sp, sp, #24
 1531              		.cfi_def_cfa_offset 32
 1532 0888 00AF     		add	r7, sp, #0
 1533              		.cfi_def_cfa_register 7
 1534 088a F860     		str	r0, [r7, #12]
 1535 088c B960     		str	r1, [r7, #8]
 1536 088e 1346     		mov	r3, r2
 1537 0890 FB80     		strh	r3, [r7, #6]	@ movhi
 947:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   uint32_t *tmp;
 948:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   uint32_t tmp1 = 0;
 1538              		.loc 1 948 0
 1539 0892 0023     		movs	r3, #0
 1540 0894 7B61     		str	r3, [r7, #20]
 949:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
 950:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   tmp1 = huart->State;    
 1541              		.loc 1 950 0
 1542 0896 FB68     		ldr	r3, [r7, #12]
 1543 0898 93F83930 		ldrb	r3, [r3, #57]
 1544 089c DBB2     		uxtb	r3, r3
 1545 089e 7B61     		str	r3, [r7, #20]
 951:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   if((tmp1 == HAL_UART_STATE_READY) || (tmp1 == HAL_UART_STATE_BUSY_TX))
 1546              		.loc 1 951 0
 1547 08a0 7B69     		ldr	r3, [r7, #20]
 1548 08a2 012B     		cmp	r3, #1
 1549 08a4 02D0     		beq	.L88
 1550              		.loc 1 951 0 is_stmt 0 discriminator 1
 1551 08a6 7B69     		ldr	r3, [r7, #20]
 1552 08a8 122B     		cmp	r3, #18
 1553 08aa 5CD1     		bne	.L89
 1554              	.L88:
 952:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   {
 953:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     if((pData == NULL ) || (Size == 0)) 
 1555              		.loc 1 953 0 is_stmt 1
 1556 08ac BB68     		ldr	r3, [r7, #8]
 1557 08ae 002B     		cmp	r3, #0
 1558 08b0 02D0     		beq	.L90
 1559              		.loc 1 953 0 is_stmt 0 discriminator 1
 1560 08b2 FB88     		ldrh	r3, [r7, #6]
 1561 08b4 002B     		cmp	r3, #0
 1562 08b6 01D1     		bne	.L91
 1563              	.L90:
 954:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     {
 955:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       return HAL_ERROR;
 1564              		.loc 1 955 0 is_stmt 1
 1565 08b8 0123     		movs	r3, #1
 1566 08ba 55E0     		b	.L92
 1567              	.L91:
 956:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     }
 957:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     
 958:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     /* Process Locked */
 959:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     __HAL_LOCK(huart);
 1568              		.loc 1 959 0
 1569 08bc FB68     		ldr	r3, [r7, #12]
 1570 08be 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 1571 08c2 012B     		cmp	r3, #1
 1572 08c4 01D1     		bne	.L93
 1573              		.loc 1 959 0 is_stmt 0 discriminator 1
 1574 08c6 0223     		movs	r3, #2
 1575 08c8 4EE0     		b	.L92
 1576              	.L93:
 1577              		.loc 1 959 0 discriminator 2
 1578 08ca FB68     		ldr	r3, [r7, #12]
 1579 08cc 0122     		movs	r2, #1
 1580 08ce 83F83820 		strb	r2, [r3, #56]
 960:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     
 961:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     huart->pRxBuffPtr = pData;
 1581              		.loc 1 961 0 is_stmt 1 discriminator 2
 1582 08d2 BA68     		ldr	r2, [r7, #8]
 1583 08d4 FB68     		ldr	r3, [r7, #12]
 1584 08d6 9A62     		str	r2, [r3, #40]
 962:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     huart->RxXferSize = Size;
 1585              		.loc 1 962 0 discriminator 2
 1586 08d8 FB68     		ldr	r3, [r7, #12]
 1587 08da FA88     		ldrh	r2, [r7, #6]	@ movhi
 1588 08dc 9A85     		strh	r2, [r3, #44]	@ movhi
 963:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     
 964:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 1589              		.loc 1 964 0 discriminator 2
 1590 08de FB68     		ldr	r3, [r7, #12]
 1591 08e0 0022     		movs	r2, #0
 1592 08e2 83F83A20 		strb	r2, [r3, #58]
 965:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     /* Check if a transmit process is ongoing or not */
 966:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     if(huart->State == HAL_UART_STATE_BUSY_TX) 
 1593              		.loc 1 966 0 discriminator 2
 1594 08e6 FB68     		ldr	r3, [r7, #12]
 1595 08e8 93F83930 		ldrb	r3, [r3, #57]
 1596 08ec DBB2     		uxtb	r3, r3
 1597 08ee 122B     		cmp	r3, #18
 1598 08f0 04D1     		bne	.L94
 967:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     {
 968:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       huart->State = HAL_UART_STATE_BUSY_TX_RX;
 1599              		.loc 1 968 0
 1600 08f2 FB68     		ldr	r3, [r7, #12]
 1601 08f4 3222     		movs	r2, #50
 1602 08f6 83F83920 		strb	r2, [r3, #57]
 1603 08fa 03E0     		b	.L95
 1604              	.L94:
 969:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     }
 970:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     else
 971:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     {
 972:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       huart->State = HAL_UART_STATE_BUSY_RX;
 1605              		.loc 1 972 0
 1606 08fc FB68     		ldr	r3, [r7, #12]
 1607 08fe 2222     		movs	r2, #34
 1608 0900 83F83920 		strb	r2, [r3, #57]
 1609              	.L95:
 973:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     }
 974:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     
 975:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     /* Set the UART DMA transfer complete callback */
 976:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 1610              		.loc 1 976 0
 1611 0904 FB68     		ldr	r3, [r7, #12]
 1612 0906 5A6B     		ldr	r2, [r3, #52]
 1613 0908 40F20003 		movw	r3, #:lower16:UART_DMAReceiveCplt
 1614 090c C0F20003 		movt	r3, #:upper16:UART_DMAReceiveCplt
 1615 0910 D363     		str	r3, [r2, #60]
 977:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     
 978:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     /* Set the UART DMA Half transfer complete callback */
 979:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 1616              		.loc 1 979 0
 1617 0912 FB68     		ldr	r3, [r7, #12]
 1618 0914 5A6B     		ldr	r2, [r3, #52]
 1619 0916 40F20003 		movw	r3, #:lower16:UART_DMARxHalfCplt
 1620 091a C0F20003 		movt	r3, #:upper16:UART_DMARxHalfCplt
 1621 091e 1364     		str	r3, [r2, #64]
 980:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     
 981:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     /* Set the DMA error callback */
 982:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     huart->hdmarx->XferErrorCallback = UART_DMAError;
 1622              		.loc 1 982 0
 1623 0920 FB68     		ldr	r3, [r7, #12]
 1624 0922 5A6B     		ldr	r2, [r3, #52]
 1625 0924 40F20003 		movw	r3, #:lower16:UART_DMAError
 1626 0928 C0F20003 		movt	r3, #:upper16:UART_DMAError
 1627 092c 9364     		str	r3, [r2, #72]
 983:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
 984:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     /* Enable the DMA Stream */
 985:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     tmp = (uint32_t*)&pData;
 1628              		.loc 1 985 0
 1629 092e 07F10803 		add	r3, r7, #8
 1630 0932 3B61     		str	r3, [r7, #16]
 986:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 1631              		.loc 1 986 0
 1632 0934 FB68     		ldr	r3, [r7, #12]
 1633 0936 586B     		ldr	r0, [r3, #52]
 1634 0938 FB68     		ldr	r3, [r7, #12]
 1635 093a 1B68     		ldr	r3, [r3]
 1636 093c 0433     		adds	r3, r3, #4
 1637 093e 1946     		mov	r1, r3
 1638 0940 3B69     		ldr	r3, [r7, #16]
 1639 0942 1A68     		ldr	r2, [r3]
 1640 0944 FB88     		ldrh	r3, [r7, #6]
 1641 0946 FFF7FEFF 		bl	HAL_DMA_Start_IT
 987:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     
 988:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     /* Enable the DMA transfer for the receiver request by setting the DMAR bit 
 989:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     in the UART CR3 register */
 990:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     huart->Instance->CR3 |= USART_CR3_DMAR;
 1642              		.loc 1 990 0
 1643 094a FB68     		ldr	r3, [r7, #12]
 1644 094c 1B68     		ldr	r3, [r3]
 1645 094e FA68     		ldr	r2, [r7, #12]
 1646 0950 1268     		ldr	r2, [r2]
 1647 0952 5269     		ldr	r2, [r2, #20]
 1648 0954 42F04002 		orr	r2, r2, #64
 1649 0958 5A61     		str	r2, [r3, #20]
 991:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     
 992:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     /* Process Unlocked */
 993:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     __HAL_UNLOCK(huart);
 1650              		.loc 1 993 0
 1651 095a FB68     		ldr	r3, [r7, #12]
 1652 095c 0022     		movs	r2, #0
 1653 095e 83F83820 		strb	r2, [r3, #56]
 994:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     
 995:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     return HAL_OK;
 1654              		.loc 1 995 0
 1655 0962 0023     		movs	r3, #0
 1656 0964 00E0     		b	.L92
 1657              	.L89:
 996:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   }
 997:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   else
 998:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   {
 999:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     return HAL_BUSY; 
 1658              		.loc 1 999 0
 1659 0966 0223     		movs	r3, #2
 1660              	.L92:
1000:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   }
1001:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** }
 1661              		.loc 1 1001 0
 1662 0968 1846     		mov	r0, r3
 1663 096a 1837     		adds	r7, r7, #24
 1664 096c BD46     		mov	sp, r7
 1665              		@ sp needed
 1666 096e 80BD     		pop	{r7, pc}
 1667              		.cfi_endproc
 1668              	.LFE67:
 1670              		.align	2
 1671              		.global	HAL_UART_DMAPause
 1672              		.thumb
 1673              		.thumb_func
 1675              	HAL_UART_DMAPause:
 1676              	.LFB68:
1002:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     
1003:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** /**
1004:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @brief Pauses the DMA Transfer.
1005:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @param huart: UART handle
1006:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @retval None
1007:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   */
1008:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
1009:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** {
 1677              		.loc 1 1009 0
 1678              		.cfi_startproc
 1679              		@ args = 0, pretend = 0, frame = 8
 1680              		@ frame_needed = 1, uses_anonymous_args = 0
 1681              		@ link register save eliminated.
 1682 0970 80B4     		push	{r7}
 1683              		.cfi_def_cfa_offset 4
 1684              		.cfi_offset 7, -4
 1685 0972 83B0     		sub	sp, sp, #12
 1686              		.cfi_def_cfa_offset 16
 1687 0974 00AF     		add	r7, sp, #0
 1688              		.cfi_def_cfa_register 7
 1689 0976 7860     		str	r0, [r7, #4]
1010:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* Process Locked */
1011:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   __HAL_LOCK(huart);
 1690              		.loc 1 1011 0
 1691 0978 7B68     		ldr	r3, [r7, #4]
 1692 097a 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 1693 097e 012B     		cmp	r3, #1
 1694 0980 01D1     		bne	.L97
 1695              		.loc 1 1011 0 is_stmt 0 discriminator 1
 1696 0982 0223     		movs	r3, #2
 1697 0984 3CE0     		b	.L98
 1698              	.L97:
 1699              		.loc 1 1011 0 discriminator 2
 1700 0986 7B68     		ldr	r3, [r7, #4]
 1701 0988 0122     		movs	r2, #1
 1702 098a 83F83820 		strb	r2, [r3, #56]
1012:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
1013:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   if(huart->State == HAL_UART_STATE_BUSY_TX)
 1703              		.loc 1 1013 0 is_stmt 1 discriminator 2
 1704 098e 7B68     		ldr	r3, [r7, #4]
 1705 0990 93F83930 		ldrb	r3, [r3, #57]
 1706 0994 DBB2     		uxtb	r3, r3
 1707 0996 122B     		cmp	r3, #18
 1708 0998 08D1     		bne	.L99
1014:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   {
1015:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     /* Disable the UART DMA Tx request */
1016:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     huart->Instance->CR3 &= (uint32_t)(~USART_CR3_DMAT);
 1709              		.loc 1 1016 0
 1710 099a 7B68     		ldr	r3, [r7, #4]
 1711 099c 1B68     		ldr	r3, [r3]
 1712 099e 7A68     		ldr	r2, [r7, #4]
 1713 09a0 1268     		ldr	r2, [r2]
 1714 09a2 5269     		ldr	r2, [r2, #20]
 1715 09a4 22F08002 		bic	r2, r2, #128
 1716 09a8 5A61     		str	r2, [r3, #20]
 1717 09aa 24E0     		b	.L100
 1718              	.L99:
1017:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   }
1018:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   else if(huart->State == HAL_UART_STATE_BUSY_RX)
 1719              		.loc 1 1018 0
 1720 09ac 7B68     		ldr	r3, [r7, #4]
 1721 09ae 93F83930 		ldrb	r3, [r3, #57]
 1722 09b2 DBB2     		uxtb	r3, r3
 1723 09b4 222B     		cmp	r3, #34
 1724 09b6 08D1     		bne	.L101
1019:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   {
1020:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     /* Disable the UART DMA Rx request */
1021:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     huart->Instance->CR3 &= (uint32_t)(~USART_CR3_DMAR);
 1725              		.loc 1 1021 0
 1726 09b8 7B68     		ldr	r3, [r7, #4]
 1727 09ba 1B68     		ldr	r3, [r3]
 1728 09bc 7A68     		ldr	r2, [r7, #4]
 1729 09be 1268     		ldr	r2, [r2]
 1730 09c0 5269     		ldr	r2, [r2, #20]
 1731 09c2 22F04002 		bic	r2, r2, #64
 1732 09c6 5A61     		str	r2, [r3, #20]
 1733 09c8 15E0     		b	.L100
 1734              	.L101:
1022:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   }
1023:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   else if (huart->State == HAL_UART_STATE_BUSY_TX_RX)
 1735              		.loc 1 1023 0
 1736 09ca 7B68     		ldr	r3, [r7, #4]
 1737 09cc 93F83930 		ldrb	r3, [r3, #57]
 1738 09d0 DBB2     		uxtb	r3, r3
 1739 09d2 322B     		cmp	r3, #50
 1740 09d4 0FD1     		bne	.L100
1024:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   {
1025:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     /* Disable the UART DMA Tx & Rx requests */
1026:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     huart->Instance->CR3 &= (uint32_t)(~USART_CR3_DMAT);
 1741              		.loc 1 1026 0
 1742 09d6 7B68     		ldr	r3, [r7, #4]
 1743 09d8 1B68     		ldr	r3, [r3]
 1744 09da 7A68     		ldr	r2, [r7, #4]
 1745 09dc 1268     		ldr	r2, [r2]
 1746 09de 5269     		ldr	r2, [r2, #20]
 1747 09e0 22F08002 		bic	r2, r2, #128
 1748 09e4 5A61     		str	r2, [r3, #20]
1027:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     huart->Instance->CR3 &= (uint32_t)(~USART_CR3_DMAR);
 1749              		.loc 1 1027 0
 1750 09e6 7B68     		ldr	r3, [r7, #4]
 1751 09e8 1B68     		ldr	r3, [r3]
 1752 09ea 7A68     		ldr	r2, [r7, #4]
 1753 09ec 1268     		ldr	r2, [r2]
 1754 09ee 5269     		ldr	r2, [r2, #20]
 1755 09f0 22F04002 		bic	r2, r2, #64
 1756 09f4 5A61     		str	r2, [r3, #20]
 1757              	.L100:
1028:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   }
1029:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
1030:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* Process Unlocked */
1031:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 1758              		.loc 1 1031 0
 1759 09f6 7B68     		ldr	r3, [r7, #4]
 1760 09f8 0022     		movs	r2, #0
 1761 09fa 83F83820 		strb	r2, [r3, #56]
1032:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
1033:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   return HAL_OK; 
 1762              		.loc 1 1033 0
 1763 09fe 0023     		movs	r3, #0
 1764              	.L98:
1034:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** }
 1765              		.loc 1 1034 0
 1766 0a00 1846     		mov	r0, r3
 1767 0a02 0C37     		adds	r7, r7, #12
 1768 0a04 BD46     		mov	sp, r7
 1769              		@ sp needed
 1770 0a06 5DF8047B 		ldr	r7, [sp], #4
 1771 0a0a 7047     		bx	lr
 1772              		.cfi_endproc
 1773              	.LFE68:
 1775              		.align	2
 1776              		.global	HAL_UART_DMAResume
 1777              		.thumb
 1778              		.thumb_func
 1780              	HAL_UART_DMAResume:
 1781              	.LFB69:
1035:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
1036:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** /**
1037:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @brief Resumes the DMA Transfer.
1038:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @param huart: UART handle
1039:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @retval None
1040:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   */
1041:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
1042:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** {
 1782              		.loc 1 1042 0
 1783              		.cfi_startproc
 1784              		@ args = 0, pretend = 0, frame = 8
 1785              		@ frame_needed = 1, uses_anonymous_args = 0
 1786              		@ link register save eliminated.
 1787 0a0c 80B4     		push	{r7}
 1788              		.cfi_def_cfa_offset 4
 1789              		.cfi_offset 7, -4
 1790 0a0e 83B0     		sub	sp, sp, #12
 1791              		.cfi_def_cfa_offset 16
 1792 0a10 00AF     		add	r7, sp, #0
 1793              		.cfi_def_cfa_register 7
 1794 0a12 7860     		str	r0, [r7, #4]
1043:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* Process Locked */
1044:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   __HAL_LOCK(huart);
 1795              		.loc 1 1044 0
 1796 0a14 7B68     		ldr	r3, [r7, #4]
 1797 0a16 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 1798 0a1a 012B     		cmp	r3, #1
 1799 0a1c 01D1     		bne	.L103
 1800              		.loc 1 1044 0 is_stmt 0 discriminator 1
 1801 0a1e 0223     		movs	r3, #2
 1802 0a20 4BE0     		b	.L104
 1803              	.L103:
 1804              		.loc 1 1044 0 discriminator 2
 1805 0a22 7B68     		ldr	r3, [r7, #4]
 1806 0a24 0122     		movs	r2, #1
 1807 0a26 83F83820 		strb	r2, [r3, #56]
1045:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
1046:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   if(huart->State == HAL_UART_STATE_BUSY_TX)
 1808              		.loc 1 1046 0 is_stmt 1 discriminator 2
 1809 0a2a 7B68     		ldr	r3, [r7, #4]
 1810 0a2c 93F83930 		ldrb	r3, [r3, #57]
 1811 0a30 DBB2     		uxtb	r3, r3
 1812 0a32 122B     		cmp	r3, #18
 1813 0a34 08D1     		bne	.L105
1047:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   {
1048:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     /* Enable the UART DMA Tx request */
1049:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     huart->Instance->CR3 |= USART_CR3_DMAT;
 1814              		.loc 1 1049 0
 1815 0a36 7B68     		ldr	r3, [r7, #4]
 1816 0a38 1B68     		ldr	r3, [r3]
 1817 0a3a 7A68     		ldr	r2, [r7, #4]
 1818 0a3c 1268     		ldr	r2, [r2]
 1819 0a3e 5269     		ldr	r2, [r2, #20]
 1820 0a40 42F08002 		orr	r2, r2, #128
 1821 0a44 5A61     		str	r2, [r3, #20]
 1822 0a46 24E0     		b	.L106
 1823              	.L105:
1050:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   }
1051:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   else if(huart->State == HAL_UART_STATE_BUSY_RX)
 1824              		.loc 1 1051 0
 1825 0a48 7B68     		ldr	r3, [r7, #4]
 1826 0a4a 93F83930 		ldrb	r3, [r3, #57]
 1827 0a4e DBB2     		uxtb	r3, r3
 1828 0a50 222B     		cmp	r3, #34
 1829 0a52 08D1     		bne	.L107
1052:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   {
1053:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     /* Enable the UART DMA Rx request */
1054:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     huart->Instance->CR3 |= USART_CR3_DMAR;
 1830              		.loc 1 1054 0
 1831 0a54 7B68     		ldr	r3, [r7, #4]
 1832 0a56 1B68     		ldr	r3, [r3]
 1833 0a58 7A68     		ldr	r2, [r7, #4]
 1834 0a5a 1268     		ldr	r2, [r2]
 1835 0a5c 5269     		ldr	r2, [r2, #20]
 1836 0a5e 42F04002 		orr	r2, r2, #64
 1837 0a62 5A61     		str	r2, [r3, #20]
 1838 0a64 15E0     		b	.L106
 1839              	.L107:
1055:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   }
1056:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   else if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 1840              		.loc 1 1056 0
 1841 0a66 7B68     		ldr	r3, [r7, #4]
 1842 0a68 93F83930 		ldrb	r3, [r3, #57]
 1843 0a6c DBB2     		uxtb	r3, r3
 1844 0a6e 322B     		cmp	r3, #50
 1845 0a70 0FD1     		bne	.L106
1057:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   {
1058:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     /* Enable the UART DMA Tx & Rx request */
1059:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     huart->Instance->CR3 |= USART_CR3_DMAT;
 1846              		.loc 1 1059 0
 1847 0a72 7B68     		ldr	r3, [r7, #4]
 1848 0a74 1B68     		ldr	r3, [r3]
 1849 0a76 7A68     		ldr	r2, [r7, #4]
 1850 0a78 1268     		ldr	r2, [r2]
 1851 0a7a 5269     		ldr	r2, [r2, #20]
 1852 0a7c 42F08002 		orr	r2, r2, #128
 1853 0a80 5A61     		str	r2, [r3, #20]
1060:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     huart->Instance->CR3 |= USART_CR3_DMAR;
 1854              		.loc 1 1060 0
 1855 0a82 7B68     		ldr	r3, [r7, #4]
 1856 0a84 1B68     		ldr	r3, [r3]
 1857 0a86 7A68     		ldr	r2, [r7, #4]
 1858 0a88 1268     		ldr	r2, [r2]
 1859 0a8a 5269     		ldr	r2, [r2, #20]
 1860 0a8c 42F04002 		orr	r2, r2, #64
 1861 0a90 5A61     		str	r2, [r3, #20]
 1862              	.L106:
1061:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   }
1062:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
1063:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* If the UART peripheral is still not enabled, enable it */
1064:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   if ((huart->Instance->CR1 & USART_CR1_UE) == 0)
 1863              		.loc 1 1064 0
 1864 0a92 7B68     		ldr	r3, [r7, #4]
 1865 0a94 1B68     		ldr	r3, [r3]
 1866 0a96 DB68     		ldr	r3, [r3, #12]
 1867 0a98 03F40053 		and	r3, r3, #8192
 1868 0a9c 002B     		cmp	r3, #0
 1869 0a9e 07D1     		bne	.L108
1065:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   {
1066:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     /* Enable UART peripheral */    
1067:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     __HAL_UART_ENABLE(huart);
 1870              		.loc 1 1067 0
 1871 0aa0 7B68     		ldr	r3, [r7, #4]
 1872 0aa2 1B68     		ldr	r3, [r3]
 1873 0aa4 7A68     		ldr	r2, [r7, #4]
 1874 0aa6 1268     		ldr	r2, [r2]
 1875 0aa8 D268     		ldr	r2, [r2, #12]
 1876 0aaa 42F40052 		orr	r2, r2, #8192
 1877 0aae DA60     		str	r2, [r3, #12]
 1878              	.L108:
1068:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   }
1069:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
1070:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* Process Unlocked */
1071:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 1879              		.loc 1 1071 0
 1880 0ab0 7B68     		ldr	r3, [r7, #4]
 1881 0ab2 0022     		movs	r2, #0
 1882 0ab4 83F83820 		strb	r2, [r3, #56]
1072:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
1073:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   return HAL_OK;
 1883              		.loc 1 1073 0
 1884 0ab8 0023     		movs	r3, #0
 1885              	.L104:
1074:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** }
 1886              		.loc 1 1074 0
 1887 0aba 1846     		mov	r0, r3
 1888 0abc 0C37     		adds	r7, r7, #12
 1889 0abe BD46     		mov	sp, r7
 1890              		@ sp needed
 1891 0ac0 5DF8047B 		ldr	r7, [sp], #4
 1892 0ac4 7047     		bx	lr
 1893              		.cfi_endproc
 1894              	.LFE69:
 1896 0ac6 00BF     		.align	2
 1897              		.global	HAL_UART_DMAStop
 1898              		.thumb
 1899              		.thumb_func
 1901              	HAL_UART_DMAStop:
 1902              	.LFB70:
1075:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
1076:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** /**
1077:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @brief Stops the DMA Transfer.
1078:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @param huart: UART handle
1079:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @retval None
1080:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   */
1081:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
1082:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** {
 1903              		.loc 1 1082 0
 1904              		.cfi_startproc
 1905              		@ args = 0, pretend = 0, frame = 8
 1906              		@ frame_needed = 1, uses_anonymous_args = 0
 1907 0ac8 80B5     		push	{r7, lr}
 1908              		.cfi_def_cfa_offset 8
 1909              		.cfi_offset 7, -8
 1910              		.cfi_offset 14, -4
 1911 0aca 82B0     		sub	sp, sp, #8
 1912              		.cfi_def_cfa_offset 16
 1913 0acc 00AF     		add	r7, sp, #0
 1914              		.cfi_def_cfa_register 7
 1915 0ace 7860     		str	r0, [r7, #4]
1083:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* Process Locked */
1084:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   __HAL_LOCK(huart);
 1916              		.loc 1 1084 0
 1917 0ad0 7B68     		ldr	r3, [r7, #4]
 1918 0ad2 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 1919 0ad6 012B     		cmp	r3, #1
 1920 0ad8 01D1     		bne	.L110
 1921              		.loc 1 1084 0 is_stmt 0 discriminator 1
 1922 0ada 0223     		movs	r3, #2
 1923 0adc 36E0     		b	.L111
 1924              	.L110:
 1925              		.loc 1 1084 0 discriminator 2
 1926 0ade 7B68     		ldr	r3, [r7, #4]
 1927 0ae0 0122     		movs	r2, #1
 1928 0ae2 83F83820 		strb	r2, [r3, #56]
1085:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
1086:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* Disable the UART Tx/Rx DMA requests */
1087:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   huart->Instance->CR3 &= ~USART_CR3_DMAT;
 1929              		.loc 1 1087 0 is_stmt 1 discriminator 2
 1930 0ae6 7B68     		ldr	r3, [r7, #4]
 1931 0ae8 1B68     		ldr	r3, [r3]
 1932 0aea 7A68     		ldr	r2, [r7, #4]
 1933 0aec 1268     		ldr	r2, [r2]
 1934 0aee 5269     		ldr	r2, [r2, #20]
 1935 0af0 22F08002 		bic	r2, r2, #128
 1936 0af4 5A61     		str	r2, [r3, #20]
1088:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   huart->Instance->CR3 &= ~USART_CR3_DMAR;
 1937              		.loc 1 1088 0 discriminator 2
 1938 0af6 7B68     		ldr	r3, [r7, #4]
 1939 0af8 1B68     		ldr	r3, [r3]
 1940 0afa 7A68     		ldr	r2, [r7, #4]
 1941 0afc 1268     		ldr	r2, [r2]
 1942 0afe 5269     		ldr	r2, [r2, #20]
 1943 0b00 22F04002 		bic	r2, r2, #64
 1944 0b04 5A61     		str	r2, [r3, #20]
1089:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
1090:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* Abort the UART DMA tx Stream */
1091:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   if(huart->hdmatx != NULL)
 1945              		.loc 1 1091 0 discriminator 2
 1946 0b06 7B68     		ldr	r3, [r7, #4]
 1947 0b08 1B6B     		ldr	r3, [r3, #48]
 1948 0b0a 002B     		cmp	r3, #0
 1949 0b0c 04D0     		beq	.L112
1092:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   {
1093:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     HAL_DMA_Abort(huart->hdmatx);
 1950              		.loc 1 1093 0
 1951 0b0e 7B68     		ldr	r3, [r7, #4]
 1952 0b10 1B6B     		ldr	r3, [r3, #48]
 1953 0b12 1846     		mov	r0, r3
 1954 0b14 FFF7FEFF 		bl	HAL_DMA_Abort
 1955              	.L112:
1094:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   }
1095:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* Abort the UART DMA rx Stream */
1096:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   if(huart->hdmarx != NULL)
 1956              		.loc 1 1096 0
 1957 0b18 7B68     		ldr	r3, [r7, #4]
 1958 0b1a 5B6B     		ldr	r3, [r3, #52]
 1959 0b1c 002B     		cmp	r3, #0
 1960 0b1e 04D0     		beq	.L113
1097:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   {
1098:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     HAL_DMA_Abort(huart->hdmarx);
 1961              		.loc 1 1098 0
 1962 0b20 7B68     		ldr	r3, [r7, #4]
 1963 0b22 5B6B     		ldr	r3, [r3, #52]
 1964 0b24 1846     		mov	r0, r3
 1965 0b26 FFF7FEFF 		bl	HAL_DMA_Abort
 1966              	.L113:
1099:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   }
1100:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* Disable UART peripheral */
1101:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 1967              		.loc 1 1101 0
 1968 0b2a 7B68     		ldr	r3, [r7, #4]
 1969 0b2c 1B68     		ldr	r3, [r3]
 1970 0b2e 7A68     		ldr	r2, [r7, #4]
 1971 0b30 1268     		ldr	r2, [r2]
 1972 0b32 D268     		ldr	r2, [r2, #12]
 1973 0b34 22F40052 		bic	r2, r2, #8192
 1974 0b38 DA60     		str	r2, [r3, #12]
1102:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
1103:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   huart->State = HAL_UART_STATE_READY;
 1975              		.loc 1 1103 0
 1976 0b3a 7B68     		ldr	r3, [r7, #4]
 1977 0b3c 0122     		movs	r2, #1
 1978 0b3e 83F83920 		strb	r2, [r3, #57]
1104:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
1105:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* Process Unlocked */
1106:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 1979              		.loc 1 1106 0
 1980 0b42 7B68     		ldr	r3, [r7, #4]
 1981 0b44 0022     		movs	r2, #0
 1982 0b46 83F83820 		strb	r2, [r3, #56]
1107:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
1108:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   return HAL_OK;
 1983              		.loc 1 1108 0
 1984 0b4a 0023     		movs	r3, #0
 1985              	.L111:
1109:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** }
 1986              		.loc 1 1109 0
 1987 0b4c 1846     		mov	r0, r3
 1988 0b4e 0837     		adds	r7, r7, #8
 1989 0b50 BD46     		mov	sp, r7
 1990              		@ sp needed
 1991 0b52 80BD     		pop	{r7, pc}
 1992              		.cfi_endproc
 1993              	.LFE70:
 1995              		.align	2
 1996              		.global	HAL_UART_IRQHandler
 1997              		.thumb
 1998              		.thumb_func
 2000              	HAL_UART_IRQHandler:
 2001              	.LFB71:
1110:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
1111:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** /**
1112:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @brief  This function handles UART interrupt request.
1113:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @param  huart: UART handle
1114:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @retval None
1115:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   */
1116:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
1117:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** {
 2002              		.loc 1 1117 0
 2003              		.cfi_startproc
 2004              		@ args = 0, pretend = 0, frame = 16
 2005              		@ frame_needed = 1, uses_anonymous_args = 0
 2006 0b54 80B5     		push	{r7, lr}
 2007              		.cfi_def_cfa_offset 8
 2008              		.cfi_offset 7, -8
 2009              		.cfi_offset 14, -4
 2010 0b56 84B0     		sub	sp, sp, #16
 2011              		.cfi_def_cfa_offset 24
 2012 0b58 00AF     		add	r7, sp, #0
 2013              		.cfi_def_cfa_register 7
 2014 0b5a 7860     		str	r0, [r7, #4]
1118:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   uint32_t tmp1 = 0, tmp2 = 0;
 2015              		.loc 1 1118 0
 2016 0b5c 0023     		movs	r3, #0
 2017 0b5e FB60     		str	r3, [r7, #12]
 2018 0b60 0023     		movs	r3, #0
 2019 0b62 BB60     		str	r3, [r7, #8]
1119:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
1120:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
 2020              		.loc 1 1120 0
 2021 0b64 7B68     		ldr	r3, [r7, #4]
 2022 0b66 1B68     		ldr	r3, [r3]
 2023 0b68 1B68     		ldr	r3, [r3]
 2024 0b6a 03F00103 		and	r3, r3, #1
 2025 0b6e 002B     		cmp	r3, #0
 2026 0b70 0CBF     		ite	eq
 2027 0b72 0023     		moveq	r3, #0
 2028 0b74 0123     		movne	r3, #1
 2029 0b76 DBB2     		uxtb	r3, r3
 2030 0b78 FB60     		str	r3, [r7, #12]
1121:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE);  
 2031              		.loc 1 1121 0
 2032 0b7a 7B68     		ldr	r3, [r7, #4]
 2033 0b7c 1B68     		ldr	r3, [r3]
 2034 0b7e DB68     		ldr	r3, [r3, #12]
 2035 0b80 03F48073 		and	r3, r3, #256
 2036 0b84 BB60     		str	r3, [r7, #8]
1122:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* UART parity error interrupt occurred ------------------------------------*/
1123:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   if((tmp1 != RESET) && (tmp2 != RESET))
 2037              		.loc 1 1123 0
 2038 0b86 FB68     		ldr	r3, [r7, #12]
 2039 0b88 002B     		cmp	r3, #0
 2040 0b8a 14D0     		beq	.L115
 2041              		.loc 1 1123 0 is_stmt 0 discriminator 1
 2042 0b8c BB68     		ldr	r3, [r7, #8]
 2043 0b8e 002B     		cmp	r3, #0
 2044 0b90 11D0     		beq	.L115
1124:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   { 
1125:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_PE);
 2045              		.loc 1 1125 0 is_stmt 1
 2046 0b92 7B68     		ldr	r3, [r7, #4]
 2047 0b94 1B68     		ldr	r3, [r3]
 2048 0b96 7A68     		ldr	r2, [r7, #4]
 2049 0b98 1268     		ldr	r2, [r2]
 2050 0b9a 1268     		ldr	r2, [r2]
 2051 0b9c 22F00102 		bic	r2, r2, #1
 2052 0ba0 1A60     		str	r2, [r3]
1126:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     
1127:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     huart->ErrorCode |= HAL_UART_ERROR_PE;
 2053              		.loc 1 1127 0
 2054 0ba2 7B68     		ldr	r3, [r7, #4]
 2055 0ba4 93F83A30 		ldrb	r3, [r3, #58]
 2056 0ba8 DBB2     		uxtb	r3, r3
 2057 0baa 43F00103 		orr	r3, r3, #1
 2058 0bae DAB2     		uxtb	r2, r3
 2059 0bb0 7B68     		ldr	r3, [r7, #4]
 2060 0bb2 83F83A20 		strb	r2, [r3, #58]
 2061              	.L115:
1128:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   }
1129:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
1130:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_FE);
 2062              		.loc 1 1130 0
 2063 0bb6 7B68     		ldr	r3, [r7, #4]
 2064 0bb8 1B68     		ldr	r3, [r3]
 2065 0bba 1B68     		ldr	r3, [r3]
 2066 0bbc 03F00203 		and	r3, r3, #2
 2067 0bc0 002B     		cmp	r3, #0
 2068 0bc2 0CBF     		ite	eq
 2069 0bc4 0023     		moveq	r3, #0
 2070 0bc6 0123     		movne	r3, #1
 2071 0bc8 DBB2     		uxtb	r3, r3
 2072 0bca FB60     		str	r3, [r7, #12]
1131:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 2073              		.loc 1 1131 0
 2074 0bcc 7B68     		ldr	r3, [r7, #4]
 2075 0bce 1B68     		ldr	r3, [r3]
 2076 0bd0 5B69     		ldr	r3, [r3, #20]
 2077 0bd2 03F00103 		and	r3, r3, #1
 2078 0bd6 BB60     		str	r3, [r7, #8]
1132:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* UART frame error interrupt occurred -------------------------------------*/
1133:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   if((tmp1 != RESET) && (tmp2 != RESET))
 2079              		.loc 1 1133 0
 2080 0bd8 FB68     		ldr	r3, [r7, #12]
 2081 0bda 002B     		cmp	r3, #0
 2082 0bdc 14D0     		beq	.L116
 2083              		.loc 1 1133 0 is_stmt 0 discriminator 1
 2084 0bde BB68     		ldr	r3, [r7, #8]
 2085 0be0 002B     		cmp	r3, #0
 2086 0be2 11D0     		beq	.L116
1134:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   { 
1135:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_FE);
 2087              		.loc 1 1135 0 is_stmt 1
 2088 0be4 7B68     		ldr	r3, [r7, #4]
 2089 0be6 1B68     		ldr	r3, [r3]
 2090 0be8 7A68     		ldr	r2, [r7, #4]
 2091 0bea 1268     		ldr	r2, [r2]
 2092 0bec 1268     		ldr	r2, [r2]
 2093 0bee 22F00202 		bic	r2, r2, #2
 2094 0bf2 1A60     		str	r2, [r3]
1136:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     
1137:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     huart->ErrorCode |= HAL_UART_ERROR_FE;
 2095              		.loc 1 1137 0
 2096 0bf4 7B68     		ldr	r3, [r7, #4]
 2097 0bf6 93F83A30 		ldrb	r3, [r3, #58]
 2098 0bfa DBB2     		uxtb	r3, r3
 2099 0bfc 43F00403 		orr	r3, r3, #4
 2100 0c00 DAB2     		uxtb	r2, r3
 2101 0c02 7B68     		ldr	r3, [r7, #4]
 2102 0c04 83F83A20 		strb	r2, [r3, #58]
 2103              	.L116:
1138:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   }
1139:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
1140:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_NE);
 2104              		.loc 1 1140 0
 2105 0c08 7B68     		ldr	r3, [r7, #4]
 2106 0c0a 1B68     		ldr	r3, [r3]
 2107 0c0c 1B68     		ldr	r3, [r3]
 2108 0c0e 03F00403 		and	r3, r3, #4
 2109 0c12 002B     		cmp	r3, #0
 2110 0c14 0CBF     		ite	eq
 2111 0c16 0023     		moveq	r3, #0
 2112 0c18 0123     		movne	r3, #1
 2113 0c1a DBB2     		uxtb	r3, r3
 2114 0c1c FB60     		str	r3, [r7, #12]
1141:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 2115              		.loc 1 1141 0
 2116 0c1e 7B68     		ldr	r3, [r7, #4]
 2117 0c20 1B68     		ldr	r3, [r3]
 2118 0c22 5B69     		ldr	r3, [r3, #20]
 2119 0c24 03F00103 		and	r3, r3, #1
 2120 0c28 BB60     		str	r3, [r7, #8]
1142:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* UART noise error interrupt occurred -------------------------------------*/
1143:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   if((tmp1 != RESET) && (tmp2 != RESET))
 2121              		.loc 1 1143 0
 2122 0c2a FB68     		ldr	r3, [r7, #12]
 2123 0c2c 002B     		cmp	r3, #0
 2124 0c2e 14D0     		beq	.L117
 2125              		.loc 1 1143 0 is_stmt 0 discriminator 1
 2126 0c30 BB68     		ldr	r3, [r7, #8]
 2127 0c32 002B     		cmp	r3, #0
 2128 0c34 11D0     		beq	.L117
1144:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   { 
1145:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_NE);
 2129              		.loc 1 1145 0 is_stmt 1
 2130 0c36 7B68     		ldr	r3, [r7, #4]
 2131 0c38 1B68     		ldr	r3, [r3]
 2132 0c3a 7A68     		ldr	r2, [r7, #4]
 2133 0c3c 1268     		ldr	r2, [r2]
 2134 0c3e 1268     		ldr	r2, [r2]
 2135 0c40 22F00402 		bic	r2, r2, #4
 2136 0c44 1A60     		str	r2, [r3]
1146:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     
1147:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     huart->ErrorCode |= HAL_UART_ERROR_NE;
 2137              		.loc 1 1147 0
 2138 0c46 7B68     		ldr	r3, [r7, #4]
 2139 0c48 93F83A30 		ldrb	r3, [r3, #58]
 2140 0c4c DBB2     		uxtb	r3, r3
 2141 0c4e 43F00203 		orr	r3, r3, #2
 2142 0c52 DAB2     		uxtb	r2, r3
 2143 0c54 7B68     		ldr	r3, [r7, #4]
 2144 0c56 83F83A20 		strb	r2, [r3, #58]
 2145              	.L117:
1148:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   }
1149:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
1150:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_ORE);
 2146              		.loc 1 1150 0
 2147 0c5a 7B68     		ldr	r3, [r7, #4]
 2148 0c5c 1B68     		ldr	r3, [r3]
 2149 0c5e 1B68     		ldr	r3, [r3]
 2150 0c60 03F00803 		and	r3, r3, #8
 2151 0c64 002B     		cmp	r3, #0
 2152 0c66 0CBF     		ite	eq
 2153 0c68 0023     		moveq	r3, #0
 2154 0c6a 0123     		movne	r3, #1
 2155 0c6c DBB2     		uxtb	r3, r3
 2156 0c6e FB60     		str	r3, [r7, #12]
1151:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 2157              		.loc 1 1151 0
 2158 0c70 7B68     		ldr	r3, [r7, #4]
 2159 0c72 1B68     		ldr	r3, [r3]
 2160 0c74 5B69     		ldr	r3, [r3, #20]
 2161 0c76 03F00103 		and	r3, r3, #1
 2162 0c7a BB60     		str	r3, [r7, #8]
1152:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* UART Over-Run interrupt occurred ----------------------------------------*/
1153:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   if((tmp1 != RESET) && (tmp2 != RESET))
 2163              		.loc 1 1153 0
 2164 0c7c FB68     		ldr	r3, [r7, #12]
 2165 0c7e 002B     		cmp	r3, #0
 2166 0c80 14D0     		beq	.L118
 2167              		.loc 1 1153 0 is_stmt 0 discriminator 1
 2168 0c82 BB68     		ldr	r3, [r7, #8]
 2169 0c84 002B     		cmp	r3, #0
 2170 0c86 11D0     		beq	.L118
1154:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   { 
1155:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_ORE);
 2171              		.loc 1 1155 0 is_stmt 1
 2172 0c88 7B68     		ldr	r3, [r7, #4]
 2173 0c8a 1B68     		ldr	r3, [r3]
 2174 0c8c 7A68     		ldr	r2, [r7, #4]
 2175 0c8e 1268     		ldr	r2, [r2]
 2176 0c90 1268     		ldr	r2, [r2]
 2177 0c92 22F00802 		bic	r2, r2, #8
 2178 0c96 1A60     		str	r2, [r3]
1156:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     
1157:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     huart->ErrorCode |= HAL_UART_ERROR_ORE;
 2179              		.loc 1 1157 0
 2180 0c98 7B68     		ldr	r3, [r7, #4]
 2181 0c9a 93F83A30 		ldrb	r3, [r3, #58]
 2182 0c9e DBB2     		uxtb	r3, r3
 2183 0ca0 43F00803 		orr	r3, r3, #8
 2184 0ca4 DAB2     		uxtb	r2, r3
 2185 0ca6 7B68     		ldr	r3, [r7, #4]
 2186 0ca8 83F83A20 		strb	r2, [r3, #58]
 2187              	.L118:
1158:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   }
1159:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
1160:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE);
 2188              		.loc 1 1160 0
 2189 0cac 7B68     		ldr	r3, [r7, #4]
 2190 0cae 1B68     		ldr	r3, [r3]
 2191 0cb0 1B68     		ldr	r3, [r3]
 2192 0cb2 03F02003 		and	r3, r3, #32
 2193 0cb6 002B     		cmp	r3, #0
 2194 0cb8 0CBF     		ite	eq
 2195 0cba 0023     		moveq	r3, #0
 2196 0cbc 0123     		movne	r3, #1
 2197 0cbe DBB2     		uxtb	r3, r3
 2198 0cc0 FB60     		str	r3, [r7, #12]
1161:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE);
 2199              		.loc 1 1161 0
 2200 0cc2 7B68     		ldr	r3, [r7, #4]
 2201 0cc4 1B68     		ldr	r3, [r3]
 2202 0cc6 DB68     		ldr	r3, [r3, #12]
 2203 0cc8 03F02003 		and	r3, r3, #32
 2204 0ccc BB60     		str	r3, [r7, #8]
1162:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* UART in mode Receiver ---------------------------------------------------*/
1163:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   if((tmp1 != RESET) && (tmp2 != RESET))
 2205              		.loc 1 1163 0
 2206 0cce FB68     		ldr	r3, [r7, #12]
 2207 0cd0 002B     		cmp	r3, #0
 2208 0cd2 0DD0     		beq	.L119
 2209              		.loc 1 1163 0 is_stmt 0 discriminator 1
 2210 0cd4 BB68     		ldr	r3, [r7, #8]
 2211 0cd6 002B     		cmp	r3, #0
 2212 0cd8 0AD0     		beq	.L119
1164:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   { 
1165:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     UART_Receive_IT(huart);
 2213              		.loc 1 1165 0 is_stmt 1
 2214 0cda 7868     		ldr	r0, [r7, #4]
 2215 0cdc 00F02CFB 		bl	UART_Receive_IT
1166:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_RXNE);
 2216              		.loc 1 1166 0
 2217 0ce0 7B68     		ldr	r3, [r7, #4]
 2218 0ce2 1B68     		ldr	r3, [r3]
 2219 0ce4 7A68     		ldr	r2, [r7, #4]
 2220 0ce6 1268     		ldr	r2, [r2]
 2221 0ce8 1268     		ldr	r2, [r2]
 2222 0cea 22F02002 		bic	r2, r2, #32
 2223 0cee 1A60     		str	r2, [r3]
 2224              	.L119:
1167:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   }
1168:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
1169:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_TC);
 2225              		.loc 1 1169 0
 2226 0cf0 7B68     		ldr	r3, [r7, #4]
 2227 0cf2 1B68     		ldr	r3, [r3]
 2228 0cf4 1B68     		ldr	r3, [r3]
 2229 0cf6 03F04003 		and	r3, r3, #64
 2230 0cfa 002B     		cmp	r3, #0
 2231 0cfc 0CBF     		ite	eq
 2232 0cfe 0023     		moveq	r3, #0
 2233 0d00 0123     		movne	r3, #1
 2234 0d02 DBB2     		uxtb	r3, r3
 2235 0d04 FB60     		str	r3, [r7, #12]
1170:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC);
 2236              		.loc 1 1170 0
 2237 0d06 7B68     		ldr	r3, [r7, #4]
 2238 0d08 1B68     		ldr	r3, [r3]
 2239 0d0a DB68     		ldr	r3, [r3, #12]
 2240 0d0c 03F04003 		and	r3, r3, #64
 2241 0d10 BB60     		str	r3, [r7, #8]
1171:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* UART in mode Transmitter ------------------------------------------------*/
1172:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   if((tmp1 != RESET) && (tmp2 != RESET))
 2242              		.loc 1 1172 0
 2243 0d12 FB68     		ldr	r3, [r7, #12]
 2244 0d14 002B     		cmp	r3, #0
 2245 0d16 0DD0     		beq	.L120
 2246              		.loc 1 1172 0 is_stmt 0 discriminator 1
 2247 0d18 BB68     		ldr	r3, [r7, #8]
 2248 0d1a 002B     		cmp	r3, #0
 2249 0d1c 0AD0     		beq	.L120
1173:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   {
1174:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     UART_Transmit_IT(huart);
 2250              		.loc 1 1174 0 is_stmt 1
 2251 0d1e 7868     		ldr	r0, [r7, #4]
 2252 0d20 00F080FA 		bl	UART_Transmit_IT
1175:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 2253              		.loc 1 1175 0
 2254 0d24 7B68     		ldr	r3, [r7, #4]
 2255 0d26 1B68     		ldr	r3, [r3]
 2256 0d28 7A68     		ldr	r2, [r7, #4]
 2257 0d2a 1268     		ldr	r2, [r2]
 2258 0d2c 1268     		ldr	r2, [r2]
 2259 0d2e 22F04002 		bic	r2, r2, #64
 2260 0d32 1A60     		str	r2, [r3]
 2261              	.L120:
1176:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   }
1177:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
1178:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 2262              		.loc 1 1178 0
 2263 0d34 7B68     		ldr	r3, [r7, #4]
 2264 0d36 93F83A30 		ldrb	r3, [r3, #58]
 2265 0d3a DBB2     		uxtb	r3, r3
 2266 0d3c 002B     		cmp	r3, #0
 2267 0d3e 06D0     		beq	.L114
1179:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   {
1180:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     /* Set the UART state ready to be able to start again the process */
1181:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     huart->State = HAL_UART_STATE_READY;
 2268              		.loc 1 1181 0
 2269 0d40 7B68     		ldr	r3, [r7, #4]
 2270 0d42 0122     		movs	r2, #1
 2271 0d44 83F83920 		strb	r2, [r3, #57]
1182:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     
1183:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     HAL_UART_ErrorCallback(huart);
 2272              		.loc 1 1183 0
 2273 0d48 7868     		ldr	r0, [r7, #4]
 2274 0d4a FFF7FEFF 		bl	HAL_UART_ErrorCallback
 2275              	.L114:
1184:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   }  
1185:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** }
 2276              		.loc 1 1185 0
 2277 0d4e 1037     		adds	r7, r7, #16
 2278 0d50 BD46     		mov	sp, r7
 2279              		@ sp needed
 2280 0d52 80BD     		pop	{r7, pc}
 2281              		.cfi_endproc
 2282              	.LFE71:
 2284              		.align	2
 2285              		.weak	HAL_UART_TxCpltCallback
 2286              		.thumb
 2287              		.thumb_func
 2289              	HAL_UART_TxCpltCallback:
 2290              	.LFB72:
1186:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
1187:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** /**
1188:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @brief  Tx Transfer completed callbacks.
1189:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @param  huart: UART handle
1190:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @retval None
1191:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   */
1192:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****  __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
1193:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** {
 2291              		.loc 1 1193 0
 2292              		.cfi_startproc
 2293              		@ args = 0, pretend = 0, frame = 8
 2294              		@ frame_needed = 1, uses_anonymous_args = 0
 2295              		@ link register save eliminated.
 2296 0d54 80B4     		push	{r7}
 2297              		.cfi_def_cfa_offset 4
 2298              		.cfi_offset 7, -4
 2299 0d56 83B0     		sub	sp, sp, #12
 2300              		.cfi_def_cfa_offset 16
 2301 0d58 00AF     		add	r7, sp, #0
 2302              		.cfi_def_cfa_register 7
 2303 0d5a 7860     		str	r0, [r7, #4]
1194:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* NOTE: This function Should not be modified, when the callback is needed,
1195:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****            the HAL_UART_TxCpltCallback could be implemented in the user file
1196:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****    */ 
1197:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** }
 2304              		.loc 1 1197 0
 2305 0d5c 0C37     		adds	r7, r7, #12
 2306 0d5e BD46     		mov	sp, r7
 2307              		@ sp needed
 2308 0d60 5DF8047B 		ldr	r7, [sp], #4
 2309 0d64 7047     		bx	lr
 2310              		.cfi_endproc
 2311              	.LFE72:
 2313 0d66 00BF     		.align	2
 2314              		.weak	HAL_UART_TxHalfCpltCallback
 2315              		.thumb
 2316              		.thumb_func
 2318              	HAL_UART_TxHalfCpltCallback:
 2319              	.LFB73:
1198:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
1199:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** /**
1200:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @brief  Tx Half Transfer completed callbacks.
1201:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @param  huart: UART handle
1202:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @retval None
1203:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   */
1204:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****  __weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
1205:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** {
 2320              		.loc 1 1205 0
 2321              		.cfi_startproc
 2322              		@ args = 0, pretend = 0, frame = 8
 2323              		@ frame_needed = 1, uses_anonymous_args = 0
 2324              		@ link register save eliminated.
 2325 0d68 80B4     		push	{r7}
 2326              		.cfi_def_cfa_offset 4
 2327              		.cfi_offset 7, -4
 2328 0d6a 83B0     		sub	sp, sp, #12
 2329              		.cfi_def_cfa_offset 16
 2330 0d6c 00AF     		add	r7, sp, #0
 2331              		.cfi_def_cfa_register 7
 2332 0d6e 7860     		str	r0, [r7, #4]
1206:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* NOTE: This function Should not be modified, when the callback is needed,
1207:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****            the HAL_UART_TxCpltCallback could be implemented in the user file
1208:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****    */ 
1209:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** }
 2333              		.loc 1 1209 0
 2334 0d70 0C37     		adds	r7, r7, #12
 2335 0d72 BD46     		mov	sp, r7
 2336              		@ sp needed
 2337 0d74 5DF8047B 		ldr	r7, [sp], #4
 2338 0d78 7047     		bx	lr
 2339              		.cfi_endproc
 2340              	.LFE73:
 2342 0d7a 00BF     		.align	2
 2343              		.weak	HAL_UART_RxCpltCallback
 2344              		.thumb
 2345              		.thumb_func
 2347              	HAL_UART_RxCpltCallback:
 2348              	.LFB74:
1210:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
1211:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** /**
1212:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @brief  Rx Transfer completed callbacks.
1213:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @param  huart: UART handle
1214:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @retval None
1215:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   */
1216:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** __weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
1217:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** {
 2349              		.loc 1 1217 0
 2350              		.cfi_startproc
 2351              		@ args = 0, pretend = 0, frame = 8
 2352              		@ frame_needed = 1, uses_anonymous_args = 0
 2353              		@ link register save eliminated.
 2354 0d7c 80B4     		push	{r7}
 2355              		.cfi_def_cfa_offset 4
 2356              		.cfi_offset 7, -4
 2357 0d7e 83B0     		sub	sp, sp, #12
 2358              		.cfi_def_cfa_offset 16
 2359 0d80 00AF     		add	r7, sp, #0
 2360              		.cfi_def_cfa_register 7
 2361 0d82 7860     		str	r0, [r7, #4]
1218:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* NOTE: This function Should not be modified, when the callback is needed,
1219:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****            the HAL_UART_TxCpltCallback could be implemented in the user file
1220:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****    */
1221:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** }
 2362              		.loc 1 1221 0
 2363 0d84 0C37     		adds	r7, r7, #12
 2364 0d86 BD46     		mov	sp, r7
 2365              		@ sp needed
 2366 0d88 5DF8047B 		ldr	r7, [sp], #4
 2367 0d8c 7047     		bx	lr
 2368              		.cfi_endproc
 2369              	.LFE74:
 2371 0d8e 00BF     		.align	2
 2372              		.weak	HAL_UART_RxHalfCpltCallback
 2373              		.thumb
 2374              		.thumb_func
 2376              	HAL_UART_RxHalfCpltCallback:
 2377              	.LFB75:
1222:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
1223:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** /**
1224:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @brief  Rx Half Transfer completed callbacks.
1225:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @param  huart: UART handle
1226:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @retval None
1227:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   */
1228:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** __weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
1229:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** {
 2378              		.loc 1 1229 0
 2379              		.cfi_startproc
 2380              		@ args = 0, pretend = 0, frame = 8
 2381              		@ frame_needed = 1, uses_anonymous_args = 0
 2382              		@ link register save eliminated.
 2383 0d90 80B4     		push	{r7}
 2384              		.cfi_def_cfa_offset 4
 2385              		.cfi_offset 7, -4
 2386 0d92 83B0     		sub	sp, sp, #12
 2387              		.cfi_def_cfa_offset 16
 2388 0d94 00AF     		add	r7, sp, #0
 2389              		.cfi_def_cfa_register 7
 2390 0d96 7860     		str	r0, [r7, #4]
1230:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* NOTE: This function Should not be modified, when the callback is needed,
1231:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****            the HAL_UART_TxCpltCallback could be implemented in the user file
1232:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****    */
1233:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** }
 2391              		.loc 1 1233 0
 2392 0d98 0C37     		adds	r7, r7, #12
 2393 0d9a BD46     		mov	sp, r7
 2394              		@ sp needed
 2395 0d9c 5DF8047B 		ldr	r7, [sp], #4
 2396 0da0 7047     		bx	lr
 2397              		.cfi_endproc
 2398              	.LFE75:
 2400 0da2 00BF     		.align	2
 2401              		.weak	HAL_UART_ErrorCallback
 2402              		.thumb
 2403              		.thumb_func
 2405              	HAL_UART_ErrorCallback:
 2406              	.LFB76:
1234:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
1235:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** /**
1236:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @brief  UART error callbacks.
1237:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @param  huart: UART handle
1238:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @retval None
1239:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   */
1240:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****  __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
1241:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** {
 2407              		.loc 1 1241 0
 2408              		.cfi_startproc
 2409              		@ args = 0, pretend = 0, frame = 8
 2410              		@ frame_needed = 1, uses_anonymous_args = 0
 2411              		@ link register save eliminated.
 2412 0da4 80B4     		push	{r7}
 2413              		.cfi_def_cfa_offset 4
 2414              		.cfi_offset 7, -4
 2415 0da6 83B0     		sub	sp, sp, #12
 2416              		.cfi_def_cfa_offset 16
 2417 0da8 00AF     		add	r7, sp, #0
 2418              		.cfi_def_cfa_register 7
 2419 0daa 7860     		str	r0, [r7, #4]
1242:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* NOTE: This function Should not be modified, when the callback is needed,
1243:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****            the HAL_UART_ErrorCallback could be implemented in the user file
1244:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****    */ 
1245:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** }
 2420              		.loc 1 1245 0
 2421 0dac 0C37     		adds	r7, r7, #12
 2422 0dae BD46     		mov	sp, r7
 2423              		@ sp needed
 2424 0db0 5DF8047B 		ldr	r7, [sp], #4
 2425 0db4 7047     		bx	lr
 2426              		.cfi_endproc
 2427              	.LFE76:
 2429 0db6 00BF     		.align	2
 2430              		.global	HAL_LIN_SendBreak
 2431              		.thumb
 2432              		.thumb_func
 2434              	HAL_LIN_SendBreak:
 2435              	.LFB77:
1246:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
1247:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** /**
1248:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @}
1249:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   */
1250:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
1251:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** /** @defgroup UART_Group3 Peripheral Control functions 
1252:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   *  @brief   UART control functions 
1253:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   *
1254:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** @verbatim   
1255:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   ==============================================================================
1256:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****                       ##### Peripheral Control functions #####
1257:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   ==============================================================================  
1258:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   [..]
1259:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     This subsection provides a set of functions allowing to control the UART:
1260:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     (+) HAL_LIN_SendBreak() API can be helpful to transmit the break character.
1261:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     (+) HAL_MultiProcessor_EnterMuteMode() API can be helpful to enter the UART in mute mode. 
1262:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     (+) HAL_MultiProcessor_ExitMuteMode() API can be helpful to exit the UART mute mode by software
1263:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     
1264:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** @endverbatim
1265:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @{
1266:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   */
1267:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
1268:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** /**
1269:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @brief  Transmits break characters.
1270:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @param  huart: UART handle
1271:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @retval HAL status
1272:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   */
1273:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** HAL_StatusTypeDef HAL_LIN_SendBreak(UART_HandleTypeDef *huart)
1274:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** {
 2436              		.loc 1 1274 0
 2437              		.cfi_startproc
 2438              		@ args = 0, pretend = 0, frame = 8
 2439              		@ frame_needed = 1, uses_anonymous_args = 0
 2440              		@ link register save eliminated.
 2441 0db8 80B4     		push	{r7}
 2442              		.cfi_def_cfa_offset 4
 2443              		.cfi_offset 7, -4
 2444 0dba 83B0     		sub	sp, sp, #12
 2445              		.cfi_def_cfa_offset 16
 2446 0dbc 00AF     		add	r7, sp, #0
 2447              		.cfi_def_cfa_register 7
 2448 0dbe 7860     		str	r0, [r7, #4]
1275:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* Check the parameters */
1276:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   assert_param(IS_UART_INSTANCE(huart->Instance));
1277:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
1278:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* Process Locked */
1279:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   __HAL_LOCK(huart);
 2449              		.loc 1 1279 0
 2450 0dc0 7B68     		ldr	r3, [r7, #4]
 2451 0dc2 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 2452 0dc6 012B     		cmp	r3, #1
 2453 0dc8 01D1     		bne	.L128
 2454              		.loc 1 1279 0 is_stmt 0 discriminator 1
 2455 0dca 0223     		movs	r3, #2
 2456 0dcc 18E0     		b	.L129
 2457              	.L128:
 2458              		.loc 1 1279 0 discriminator 2
 2459 0dce 7B68     		ldr	r3, [r7, #4]
 2460 0dd0 0122     		movs	r2, #1
 2461 0dd2 83F83820 		strb	r2, [r3, #56]
1280:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
1281:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   huart->State = HAL_UART_STATE_BUSY;
 2462              		.loc 1 1281 0 is_stmt 1 discriminator 2
 2463 0dd6 7B68     		ldr	r3, [r7, #4]
 2464 0dd8 0222     		movs	r2, #2
 2465 0dda 83F83920 		strb	r2, [r3, #57]
1282:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
1283:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* Send break characters */
1284:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   huart->Instance->CR1 |= USART_CR1_SBK;
 2466              		.loc 1 1284 0 discriminator 2
 2467 0dde 7B68     		ldr	r3, [r7, #4]
 2468 0de0 1B68     		ldr	r3, [r3]
 2469 0de2 7A68     		ldr	r2, [r7, #4]
 2470 0de4 1268     		ldr	r2, [r2]
 2471 0de6 D268     		ldr	r2, [r2, #12]
 2472 0de8 42F00102 		orr	r2, r2, #1
 2473 0dec DA60     		str	r2, [r3, #12]
1285:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****  
1286:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   huart->State = HAL_UART_STATE_READY;
 2474              		.loc 1 1286 0 discriminator 2
 2475 0dee 7B68     		ldr	r3, [r7, #4]
 2476 0df0 0122     		movs	r2, #1
 2477 0df2 83F83920 		strb	r2, [r3, #57]
1287:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
1288:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* Process Unlocked */
1289:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 2478              		.loc 1 1289 0 discriminator 2
 2479 0df6 7B68     		ldr	r3, [r7, #4]
 2480 0df8 0022     		movs	r2, #0
 2481 0dfa 83F83820 		strb	r2, [r3, #56]
1290:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
1291:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   return HAL_OK; 
 2482              		.loc 1 1291 0 discriminator 2
 2483 0dfe 0023     		movs	r3, #0
 2484              	.L129:
1292:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** }
 2485              		.loc 1 1292 0
 2486 0e00 1846     		mov	r0, r3
 2487 0e02 0C37     		adds	r7, r7, #12
 2488 0e04 BD46     		mov	sp, r7
 2489              		@ sp needed
 2490 0e06 5DF8047B 		ldr	r7, [sp], #4
 2491 0e0a 7047     		bx	lr
 2492              		.cfi_endproc
 2493              	.LFE77:
 2495              		.align	2
 2496              		.global	HAL_MultiProcessor_EnterMuteMode
 2497              		.thumb
 2498              		.thumb_func
 2500              	HAL_MultiProcessor_EnterMuteMode:
 2501              	.LFB78:
1293:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
1294:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** /**
1295:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @brief  Enters the UART in mute mode. 
1296:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @param  huart: UART handle
1297:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @retval HAL status
1298:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   */
1299:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** HAL_StatusTypeDef HAL_MultiProcessor_EnterMuteMode(UART_HandleTypeDef *huart)
1300:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** {
 2502              		.loc 1 1300 0
 2503              		.cfi_startproc
 2504              		@ args = 0, pretend = 0, frame = 8
 2505              		@ frame_needed = 1, uses_anonymous_args = 0
 2506              		@ link register save eliminated.
 2507 0e0c 80B4     		push	{r7}
 2508              		.cfi_def_cfa_offset 4
 2509              		.cfi_offset 7, -4
 2510 0e0e 83B0     		sub	sp, sp, #12
 2511              		.cfi_def_cfa_offset 16
 2512 0e10 00AF     		add	r7, sp, #0
 2513              		.cfi_def_cfa_register 7
 2514 0e12 7860     		str	r0, [r7, #4]
1301:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* Check the parameters */
1302:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   assert_param(IS_UART_INSTANCE(huart->Instance));
1303:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
1304:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* Process Locked */
1305:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   __HAL_LOCK(huart);
 2515              		.loc 1 1305 0
 2516 0e14 7B68     		ldr	r3, [r7, #4]
 2517 0e16 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 2518 0e1a 012B     		cmp	r3, #1
 2519 0e1c 01D1     		bne	.L131
 2520              		.loc 1 1305 0 is_stmt 0 discriminator 1
 2521 0e1e 0223     		movs	r3, #2
 2522 0e20 18E0     		b	.L132
 2523              	.L131:
 2524              		.loc 1 1305 0 discriminator 2
 2525 0e22 7B68     		ldr	r3, [r7, #4]
 2526 0e24 0122     		movs	r2, #1
 2527 0e26 83F83820 		strb	r2, [r3, #56]
1306:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
1307:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   huart->State = HAL_UART_STATE_BUSY;
 2528              		.loc 1 1307 0 is_stmt 1 discriminator 2
 2529 0e2a 7B68     		ldr	r3, [r7, #4]
 2530 0e2c 0222     		movs	r2, #2
 2531 0e2e 83F83920 		strb	r2, [r3, #57]
1308:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
1309:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
1310:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   huart->Instance->CR1 |= USART_CR1_RWU;
 2532              		.loc 1 1310 0 discriminator 2
 2533 0e32 7B68     		ldr	r3, [r7, #4]
 2534 0e34 1B68     		ldr	r3, [r3]
 2535 0e36 7A68     		ldr	r2, [r7, #4]
 2536 0e38 1268     		ldr	r2, [r2]
 2537 0e3a D268     		ldr	r2, [r2, #12]
 2538 0e3c 42F00202 		orr	r2, r2, #2
 2539 0e40 DA60     		str	r2, [r3, #12]
1311:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
1312:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   huart->State = HAL_UART_STATE_READY;
 2540              		.loc 1 1312 0 discriminator 2
 2541 0e42 7B68     		ldr	r3, [r7, #4]
 2542 0e44 0122     		movs	r2, #1
 2543 0e46 83F83920 		strb	r2, [r3, #57]
1313:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
1314:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* Process Unlocked */
1315:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 2544              		.loc 1 1315 0 discriminator 2
 2545 0e4a 7B68     		ldr	r3, [r7, #4]
 2546 0e4c 0022     		movs	r2, #0
 2547 0e4e 83F83820 		strb	r2, [r3, #56]
1316:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
1317:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   return HAL_OK; 
 2548              		.loc 1 1317 0 discriminator 2
 2549 0e52 0023     		movs	r3, #0
 2550              	.L132:
1318:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** }
 2551              		.loc 1 1318 0
 2552 0e54 1846     		mov	r0, r3
 2553 0e56 0C37     		adds	r7, r7, #12
 2554 0e58 BD46     		mov	sp, r7
 2555              		@ sp needed
 2556 0e5a 5DF8047B 		ldr	r7, [sp], #4
 2557 0e5e 7047     		bx	lr
 2558              		.cfi_endproc
 2559              	.LFE78:
 2561              		.align	2
 2562              		.global	HAL_MultiProcessor_ExitMuteMode
 2563              		.thumb
 2564              		.thumb_func
 2566              	HAL_MultiProcessor_ExitMuteMode:
 2567              	.LFB79:
1319:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
1320:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** /**
1321:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @brief  Exits the UART mute mode: wake up software. 
1322:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @param  huart: UART handle
1323:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @retval HAL status
1324:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   */
1325:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** HAL_StatusTypeDef HAL_MultiProcessor_ExitMuteMode(UART_HandleTypeDef *huart)
1326:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** {
 2568              		.loc 1 1326 0
 2569              		.cfi_startproc
 2570              		@ args = 0, pretend = 0, frame = 8
 2571              		@ frame_needed = 1, uses_anonymous_args = 0
 2572              		@ link register save eliminated.
 2573 0e60 80B4     		push	{r7}
 2574              		.cfi_def_cfa_offset 4
 2575              		.cfi_offset 7, -4
 2576 0e62 83B0     		sub	sp, sp, #12
 2577              		.cfi_def_cfa_offset 16
 2578 0e64 00AF     		add	r7, sp, #0
 2579              		.cfi_def_cfa_register 7
 2580 0e66 7860     		str	r0, [r7, #4]
1327:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* Check the parameters */
1328:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   assert_param(IS_UART_INSTANCE(huart->Instance));
1329:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
1330:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* Process Locked */
1331:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   __HAL_LOCK(huart);
 2581              		.loc 1 1331 0
 2582 0e68 7B68     		ldr	r3, [r7, #4]
 2583 0e6a 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 2584 0e6e 012B     		cmp	r3, #1
 2585 0e70 01D1     		bne	.L134
 2586              		.loc 1 1331 0 is_stmt 0 discriminator 1
 2587 0e72 0223     		movs	r3, #2
 2588 0e74 18E0     		b	.L135
 2589              	.L134:
 2590              		.loc 1 1331 0 discriminator 2
 2591 0e76 7B68     		ldr	r3, [r7, #4]
 2592 0e78 0122     		movs	r2, #1
 2593 0e7a 83F83820 		strb	r2, [r3, #56]
1332:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
1333:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   huart->State = HAL_UART_STATE_BUSY;
 2594              		.loc 1 1333 0 is_stmt 1 discriminator 2
 2595 0e7e 7B68     		ldr	r3, [r7, #4]
 2596 0e80 0222     		movs	r2, #2
 2597 0e82 83F83920 		strb	r2, [r3, #57]
1334:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
1335:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
1336:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   huart->Instance->CR1 &= (uint32_t)~((uint32_t)USART_CR1_RWU);
 2598              		.loc 1 1336 0 discriminator 2
 2599 0e86 7B68     		ldr	r3, [r7, #4]
 2600 0e88 1B68     		ldr	r3, [r3]
 2601 0e8a 7A68     		ldr	r2, [r7, #4]
 2602 0e8c 1268     		ldr	r2, [r2]
 2603 0e8e D268     		ldr	r2, [r2, #12]
 2604 0e90 22F00202 		bic	r2, r2, #2
 2605 0e94 DA60     		str	r2, [r3, #12]
1337:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
1338:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   huart->State = HAL_UART_STATE_READY;
 2606              		.loc 1 1338 0 discriminator 2
 2607 0e96 7B68     		ldr	r3, [r7, #4]
 2608 0e98 0122     		movs	r2, #1
 2609 0e9a 83F83920 		strb	r2, [r3, #57]
1339:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
1340:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* Process Unlocked */
1341:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 2610              		.loc 1 1341 0 discriminator 2
 2611 0e9e 7B68     		ldr	r3, [r7, #4]
 2612 0ea0 0022     		movs	r2, #0
 2613 0ea2 83F83820 		strb	r2, [r3, #56]
1342:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
1343:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   return HAL_OK; 
 2614              		.loc 1 1343 0 discriminator 2
 2615 0ea6 0023     		movs	r3, #0
 2616              	.L135:
1344:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** }
 2617              		.loc 1 1344 0
 2618 0ea8 1846     		mov	r0, r3
 2619 0eaa 0C37     		adds	r7, r7, #12
 2620 0eac BD46     		mov	sp, r7
 2621              		@ sp needed
 2622 0eae 5DF8047B 		ldr	r7, [sp], #4
 2623 0eb2 7047     		bx	lr
 2624              		.cfi_endproc
 2625              	.LFE79:
 2627              		.align	2
 2628              		.global	HAL_HalfDuplex_EnableTransmitter
 2629              		.thumb
 2630              		.thumb_func
 2632              	HAL_HalfDuplex_EnableTransmitter:
 2633              	.LFB80:
1345:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
1346:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** /**
1347:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @brief  Enables the UART transmitter and disables the UART receiver.
1348:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @param  huart: UART handle
1349:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @retval HAL status
1350:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @retval None
1351:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   */
1352:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
1353:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** {
 2634              		.loc 1 1353 0
 2635              		.cfi_startproc
 2636              		@ args = 0, pretend = 0, frame = 16
 2637              		@ frame_needed = 1, uses_anonymous_args = 0
 2638              		@ link register save eliminated.
 2639 0eb4 80B4     		push	{r7}
 2640              		.cfi_def_cfa_offset 4
 2641              		.cfi_offset 7, -4
 2642 0eb6 85B0     		sub	sp, sp, #20
 2643              		.cfi_def_cfa_offset 24
 2644 0eb8 00AF     		add	r7, sp, #0
 2645              		.cfi_def_cfa_register 7
 2646 0eba 7860     		str	r0, [r7, #4]
1354:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   uint32_t tmpreg = 0x00;
 2647              		.loc 1 1354 0
 2648 0ebc 0023     		movs	r3, #0
 2649 0ebe FB60     		str	r3, [r7, #12]
1355:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
1356:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* Process Locked */
1357:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   __HAL_LOCK(huart);
 2650              		.loc 1 1357 0
 2651 0ec0 7B68     		ldr	r3, [r7, #4]
 2652 0ec2 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 2653 0ec6 012B     		cmp	r3, #1
 2654 0ec8 01D1     		bne	.L137
 2655              		.loc 1 1357 0 is_stmt 0 discriminator 1
 2656 0eca 0223     		movs	r3, #2
 2657 0ecc 20E0     		b	.L138
 2658              	.L137:
 2659              		.loc 1 1357 0 discriminator 2
 2660 0ece 7B68     		ldr	r3, [r7, #4]
 2661 0ed0 0122     		movs	r2, #1
 2662 0ed2 83F83820 		strb	r2, [r3, #56]
1358:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
1359:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   huart->State = HAL_UART_STATE_BUSY;
 2663              		.loc 1 1359 0 is_stmt 1 discriminator 2
 2664 0ed6 7B68     		ldr	r3, [r7, #4]
 2665 0ed8 0222     		movs	r2, #2
 2666 0eda 83F83920 		strb	r2, [r3, #57]
1360:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
1361:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /*-------------------------- USART CR1 Configuration -----------------------*/
1362:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   tmpreg = huart->Instance->CR1;
 2667              		.loc 1 1362 0 discriminator 2
 2668 0ede 7B68     		ldr	r3, [r7, #4]
 2669 0ee0 1B68     		ldr	r3, [r3]
 2670 0ee2 DB68     		ldr	r3, [r3, #12]
 2671 0ee4 FB60     		str	r3, [r7, #12]
1363:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
1364:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* Clear TE and RE bits */
1365:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 2672              		.loc 1 1365 0 discriminator 2
 2673 0ee6 FB68     		ldr	r3, [r7, #12]
 2674 0ee8 23F00C03 		bic	r3, r3, #12
 2675 0eec FB60     		str	r3, [r7, #12]
1366:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
1367:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
1368:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   tmpreg |= (uint32_t)USART_CR1_TE;
 2676              		.loc 1 1368 0 discriminator 2
 2677 0eee FB68     		ldr	r3, [r7, #12]
 2678 0ef0 43F00803 		orr	r3, r3, #8
 2679 0ef4 FB60     		str	r3, [r7, #12]
1369:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
1370:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* Write to USART CR1 */
1371:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   huart->Instance->CR1 = (uint32_t)tmpreg;
 2680              		.loc 1 1371 0 discriminator 2
 2681 0ef6 7B68     		ldr	r3, [r7, #4]
 2682 0ef8 1B68     		ldr	r3, [r3]
 2683 0efa FA68     		ldr	r2, [r7, #12]
 2684 0efc DA60     		str	r2, [r3, #12]
1372:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****  
1373:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   huart->State = HAL_UART_STATE_READY;
 2685              		.loc 1 1373 0 discriminator 2
 2686 0efe 7B68     		ldr	r3, [r7, #4]
 2687 0f00 0122     		movs	r2, #1
 2688 0f02 83F83920 		strb	r2, [r3, #57]
1374:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
1375:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* Process Unlocked */
1376:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 2689              		.loc 1 1376 0 discriminator 2
 2690 0f06 7B68     		ldr	r3, [r7, #4]
 2691 0f08 0022     		movs	r2, #0
 2692 0f0a 83F83820 		strb	r2, [r3, #56]
1377:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
1378:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   return HAL_OK; 
 2693              		.loc 1 1378 0 discriminator 2
 2694 0f0e 0023     		movs	r3, #0
 2695              	.L138:
1379:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** }
 2696              		.loc 1 1379 0
 2697 0f10 1846     		mov	r0, r3
 2698 0f12 1437     		adds	r7, r7, #20
 2699 0f14 BD46     		mov	sp, r7
 2700              		@ sp needed
 2701 0f16 5DF8047B 		ldr	r7, [sp], #4
 2702 0f1a 7047     		bx	lr
 2703              		.cfi_endproc
 2704              	.LFE80:
 2706              		.align	2
 2707              		.global	HAL_HalfDuplex_EnableReceiver
 2708              		.thumb
 2709              		.thumb_func
 2711              	HAL_HalfDuplex_EnableReceiver:
 2712              	.LFB81:
1380:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
1381:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** /**
1382:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @brief  Enables the UART receiver and disables the UART transmitter.
1383:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @param  huart: UART handle
1384:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @retval HAL status
1385:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   */
1386:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
1387:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** {
 2713              		.loc 1 1387 0
 2714              		.cfi_startproc
 2715              		@ args = 0, pretend = 0, frame = 16
 2716              		@ frame_needed = 1, uses_anonymous_args = 0
 2717              		@ link register save eliminated.
 2718 0f1c 80B4     		push	{r7}
 2719              		.cfi_def_cfa_offset 4
 2720              		.cfi_offset 7, -4
 2721 0f1e 85B0     		sub	sp, sp, #20
 2722              		.cfi_def_cfa_offset 24
 2723 0f20 00AF     		add	r7, sp, #0
 2724              		.cfi_def_cfa_register 7
 2725 0f22 7860     		str	r0, [r7, #4]
1388:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   uint32_t tmpreg = 0x00;
 2726              		.loc 1 1388 0
 2727 0f24 0023     		movs	r3, #0
 2728 0f26 FB60     		str	r3, [r7, #12]
1389:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
1390:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* Process Locked */
1391:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   __HAL_LOCK(huart);
 2729              		.loc 1 1391 0
 2730 0f28 7B68     		ldr	r3, [r7, #4]
 2731 0f2a 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 2732 0f2e 012B     		cmp	r3, #1
 2733 0f30 01D1     		bne	.L140
 2734              		.loc 1 1391 0 is_stmt 0 discriminator 1
 2735 0f32 0223     		movs	r3, #2
 2736 0f34 20E0     		b	.L141
 2737              	.L140:
 2738              		.loc 1 1391 0 discriminator 2
 2739 0f36 7B68     		ldr	r3, [r7, #4]
 2740 0f38 0122     		movs	r2, #1
 2741 0f3a 83F83820 		strb	r2, [r3, #56]
1392:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
1393:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   huart->State = HAL_UART_STATE_BUSY;
 2742              		.loc 1 1393 0 is_stmt 1 discriminator 2
 2743 0f3e 7B68     		ldr	r3, [r7, #4]
 2744 0f40 0222     		movs	r2, #2
 2745 0f42 83F83920 		strb	r2, [r3, #57]
1394:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
1395:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /*-------------------------- USART CR1 Configuration -----------------------*/
1396:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   tmpreg = huart->Instance->CR1;
 2746              		.loc 1 1396 0 discriminator 2
 2747 0f46 7B68     		ldr	r3, [r7, #4]
 2748 0f48 1B68     		ldr	r3, [r3]
 2749 0f4a DB68     		ldr	r3, [r3, #12]
 2750 0f4c FB60     		str	r3, [r7, #12]
1397:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
1398:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* Clear TE and RE bits */
1399:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 2751              		.loc 1 1399 0 discriminator 2
 2752 0f4e FB68     		ldr	r3, [r7, #12]
 2753 0f50 23F00C03 		bic	r3, r3, #12
 2754 0f54 FB60     		str	r3, [r7, #12]
1400:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
1401:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
1402:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   tmpreg |= (uint32_t)USART_CR1_RE;
 2755              		.loc 1 1402 0 discriminator 2
 2756 0f56 FB68     		ldr	r3, [r7, #12]
 2757 0f58 43F00403 		orr	r3, r3, #4
 2758 0f5c FB60     		str	r3, [r7, #12]
1403:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
1404:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* Write to USART CR1 */
1405:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   huart->Instance->CR1 = (uint32_t)tmpreg;
 2759              		.loc 1 1405 0 discriminator 2
 2760 0f5e 7B68     		ldr	r3, [r7, #4]
 2761 0f60 1B68     		ldr	r3, [r3]
 2762 0f62 FA68     		ldr	r2, [r7, #12]
 2763 0f64 DA60     		str	r2, [r3, #12]
1406:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
1407:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   huart->State = HAL_UART_STATE_READY;
 2764              		.loc 1 1407 0 discriminator 2
 2765 0f66 7B68     		ldr	r3, [r7, #4]
 2766 0f68 0122     		movs	r2, #1
 2767 0f6a 83F83920 		strb	r2, [r3, #57]
1408:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
1409:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* Process Unlocked */
1410:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 2768              		.loc 1 1410 0 discriminator 2
 2769 0f6e 7B68     		ldr	r3, [r7, #4]
 2770 0f70 0022     		movs	r2, #0
 2771 0f72 83F83820 		strb	r2, [r3, #56]
1411:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
1412:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   return HAL_OK; 
 2772              		.loc 1 1412 0 discriminator 2
 2773 0f76 0023     		movs	r3, #0
 2774              	.L141:
1413:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** }
 2775              		.loc 1 1413 0
 2776 0f78 1846     		mov	r0, r3
 2777 0f7a 1437     		adds	r7, r7, #20
 2778 0f7c BD46     		mov	sp, r7
 2779              		@ sp needed
 2780 0f7e 5DF8047B 		ldr	r7, [sp], #4
 2781 0f82 7047     		bx	lr
 2782              		.cfi_endproc
 2783              	.LFE81:
 2785              		.align	2
 2786              		.global	HAL_UART_GetState
 2787              		.thumb
 2788              		.thumb_func
 2790              	HAL_UART_GetState:
 2791              	.LFB82:
1414:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
1415:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** /**
1416:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @}
1417:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   */
1418:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
1419:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** /** @defgroup UART_Group4 Peripheral State and Errors functions 
1420:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   *  @brief   UART State and Errors functions 
1421:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   *
1422:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** @verbatim   
1423:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   ==============================================================================
1424:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****                  ##### Peripheral State and Errors functions #####
1425:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   ==============================================================================  
1426:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****  [..]
1427:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****    This subsection provides a set of functions allowing to return the State of 
1428:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****    UART communication process, return Peripheral Errors occured during communication 
1429:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****    process
1430:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****    (+) HAL_UART_GetState() API can be helpful to check in run-time the state of the UART peripheral
1431:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****    (+) HAL_UART_GetError() check in run-time errors that could be occured durung communication. 
1432:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
1433:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** @endverbatim
1434:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @{
1435:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   */
1436:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
1437:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** /**
1438:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @brief  Returns the UART state.
1439:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @param  huart: UART handle
1440:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @retval HAL state
1441:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   */
1442:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
1443:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** {
 2792              		.loc 1 1443 0
 2793              		.cfi_startproc
 2794              		@ args = 0, pretend = 0, frame = 8
 2795              		@ frame_needed = 1, uses_anonymous_args = 0
 2796              		@ link register save eliminated.
 2797 0f84 80B4     		push	{r7}
 2798              		.cfi_def_cfa_offset 4
 2799              		.cfi_offset 7, -4
 2800 0f86 83B0     		sub	sp, sp, #12
 2801              		.cfi_def_cfa_offset 16
 2802 0f88 00AF     		add	r7, sp, #0
 2803              		.cfi_def_cfa_register 7
 2804 0f8a 7860     		str	r0, [r7, #4]
1444:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   return huart->State;
 2805              		.loc 1 1444 0
 2806 0f8c 7B68     		ldr	r3, [r7, #4]
 2807 0f8e 93F83930 		ldrb	r3, [r3, #57]
 2808 0f92 DBB2     		uxtb	r3, r3
1445:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** }
 2809              		.loc 1 1445 0
 2810 0f94 1846     		mov	r0, r3
 2811 0f96 0C37     		adds	r7, r7, #12
 2812 0f98 BD46     		mov	sp, r7
 2813              		@ sp needed
 2814 0f9a 5DF8047B 		ldr	r7, [sp], #4
 2815 0f9e 7047     		bx	lr
 2816              		.cfi_endproc
 2817              	.LFE82:
 2819              		.align	2
 2820              		.global	HAL_UART_GetError
 2821              		.thumb
 2822              		.thumb_func
 2824              	HAL_UART_GetError:
 2825              	.LFB83:
1446:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
1447:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** /**
1448:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** * @brief  Return the UART error code
1449:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** * @param  huart : pointer to a UART_HandleTypeDef structure that contains
1450:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   *              the configuration information for the specified UART.
1451:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** * @retval UART Error Code
1452:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** */
1453:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
1454:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** {
 2826              		.loc 1 1454 0
 2827              		.cfi_startproc
 2828              		@ args = 0, pretend = 0, frame = 8
 2829              		@ frame_needed = 1, uses_anonymous_args = 0
 2830              		@ link register save eliminated.
 2831 0fa0 80B4     		push	{r7}
 2832              		.cfi_def_cfa_offset 4
 2833              		.cfi_offset 7, -4
 2834 0fa2 83B0     		sub	sp, sp, #12
 2835              		.cfi_def_cfa_offset 16
 2836 0fa4 00AF     		add	r7, sp, #0
 2837              		.cfi_def_cfa_register 7
 2838 0fa6 7860     		str	r0, [r7, #4]
1455:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   return huart->ErrorCode;
 2839              		.loc 1 1455 0
 2840 0fa8 7B68     		ldr	r3, [r7, #4]
 2841 0faa 93F83A30 		ldrb	r3, [r3, #58]
 2842 0fae DBB2     		uxtb	r3, r3
1456:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** }
 2843              		.loc 1 1456 0
 2844 0fb0 1846     		mov	r0, r3
 2845 0fb2 0C37     		adds	r7, r7, #12
 2846 0fb4 BD46     		mov	sp, r7
 2847              		@ sp needed
 2848 0fb6 5DF8047B 		ldr	r7, [sp], #4
 2849 0fba 7047     		bx	lr
 2850              		.cfi_endproc
 2851              	.LFE83:
 2853              		.align	2
 2854              		.thumb
 2855              		.thumb_func
 2857              	UART_DMATransmitCplt:
 2858              	.LFB84:
1457:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
1458:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** /**
1459:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @}
1460:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   */
1461:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
1462:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** /**
1463:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @brief  DMA UART transmit process complete callback. 
1464:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @param  hdma: DMA handle
1465:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @retval None
1466:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   */
1467:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)     
1468:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** {
 2859              		.loc 1 1468 0
 2860              		.cfi_startproc
 2861              		@ args = 0, pretend = 0, frame = 16
 2862              		@ frame_needed = 1, uses_anonymous_args = 0
 2863 0fbc 80B5     		push	{r7, lr}
 2864              		.cfi_def_cfa_offset 8
 2865              		.cfi_offset 7, -8
 2866              		.cfi_offset 14, -4
 2867 0fbe 84B0     		sub	sp, sp, #16
 2868              		.cfi_def_cfa_offset 24
 2869 0fc0 00AF     		add	r7, sp, #0
 2870              		.cfi_def_cfa_register 7
 2871 0fc2 7860     		str	r0, [r7, #4]
1469:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 2872              		.loc 1 1469 0
 2873 0fc4 7B68     		ldr	r3, [r7, #4]
 2874 0fc6 9B6B     		ldr	r3, [r3, #56]
 2875 0fc8 FB60     		str	r3, [r7, #12]
1470:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   huart->TxXferCount = 0;
 2876              		.loc 1 1470 0
 2877 0fca FB68     		ldr	r3, [r7, #12]
 2878 0fcc 0022     		movs	r2, #0
 2879 0fce DA84     		strh	r2, [r3, #38]	@ movhi
1471:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
1472:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* Disable the DMA transfer for transmit request by setting the DMAT bit
1473:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****      in the UART CR3 register */
1474:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAT);
 2880              		.loc 1 1474 0
 2881 0fd0 FB68     		ldr	r3, [r7, #12]
 2882 0fd2 1B68     		ldr	r3, [r3]
 2883 0fd4 FA68     		ldr	r2, [r7, #12]
 2884 0fd6 1268     		ldr	r2, [r2]
 2885 0fd8 5269     		ldr	r2, [r2, #20]
 2886 0fda 22F08002 		bic	r2, r2, #128
 2887 0fde 5A61     		str	r2, [r3, #20]
1475:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
1476:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* Wait for UART TC Flag */
1477:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, UART_TIMEOUT_VALUE) != HAL_OK)
 2888              		.loc 1 1477 0
 2889 0fe0 F868     		ldr	r0, [r7, #12]
 2890 0fe2 4021     		movs	r1, #64
 2891 0fe4 0022     		movs	r2, #0
 2892 0fe6 45F2F053 		movw	r3, #22000
 2893 0fea 00F087F8 		bl	UART_WaitOnFlagUntilTimeout
 2894 0fee 0346     		mov	r3, r0
 2895 0ff0 002B     		cmp	r3, #0
 2896 0ff2 07D0     		beq	.L147
1478:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   {
1479:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     /* Timeout Occured */ 
1480:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     huart->State = HAL_UART_STATE_TIMEOUT;
 2897              		.loc 1 1480 0
 2898 0ff4 FB68     		ldr	r3, [r7, #12]
 2899 0ff6 0322     		movs	r2, #3
 2900 0ff8 83F83920 		strb	r2, [r3, #57]
1481:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     HAL_UART_ErrorCallback(huart);
 2901              		.loc 1 1481 0
 2902 0ffc F868     		ldr	r0, [r7, #12]
 2903 0ffe FFF7FEFF 		bl	HAL_UART_ErrorCallback
 2904 1002 11E0     		b	.L146
 2905              	.L147:
1482:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   }
1483:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   else
1484:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   {
1485:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     /* No Timeout */
1486:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     /* Check if a receive process is ongoing or not */
1487:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 2906              		.loc 1 1487 0
 2907 1004 FB68     		ldr	r3, [r7, #12]
 2908 1006 93F83930 		ldrb	r3, [r3, #57]
 2909 100a DBB2     		uxtb	r3, r3
 2910 100c 322B     		cmp	r3, #50
 2911 100e 04D1     		bne	.L149
1488:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     {
1489:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       huart->State = HAL_UART_STATE_BUSY_RX;
 2912              		.loc 1 1489 0
 2913 1010 FB68     		ldr	r3, [r7, #12]
 2914 1012 2222     		movs	r2, #34
 2915 1014 83F83920 		strb	r2, [r3, #57]
 2916 1018 03E0     		b	.L150
 2917              	.L149:
1490:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     }
1491:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     else
1492:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     {
1493:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       huart->State = HAL_UART_STATE_READY;
 2918              		.loc 1 1493 0
 2919 101a FB68     		ldr	r3, [r7, #12]
 2920 101c 0122     		movs	r2, #1
 2921 101e 83F83920 		strb	r2, [r3, #57]
 2922              	.L150:
1494:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     }
1495:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     HAL_UART_TxCpltCallback(huart);
 2923              		.loc 1 1495 0
 2924 1022 F868     		ldr	r0, [r7, #12]
 2925 1024 FFF7FEFF 		bl	HAL_UART_TxCpltCallback
 2926              	.L146:
1496:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   }
1497:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** }
 2927              		.loc 1 1497 0
 2928 1028 1037     		adds	r7, r7, #16
 2929 102a BD46     		mov	sp, r7
 2930              		@ sp needed
 2931 102c 80BD     		pop	{r7, pc}
 2932              		.cfi_endproc
 2933              	.LFE84:
 2935 102e 00BF     		.align	2
 2936              		.thumb
 2937              		.thumb_func
 2939              	UART_DMATxHalfCplt:
 2940              	.LFB85:
1498:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
1499:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** /**
1500:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @brief DMA UART transmit process half complete callback 
1501:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @param hdma : DMA handle
1502:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @retval None
1503:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   */
1504:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
1505:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** {
 2941              		.loc 1 1505 0
 2942              		.cfi_startproc
 2943              		@ args = 0, pretend = 0, frame = 16
 2944              		@ frame_needed = 1, uses_anonymous_args = 0
 2945 1030 80B5     		push	{r7, lr}
 2946              		.cfi_def_cfa_offset 8
 2947              		.cfi_offset 7, -8
 2948              		.cfi_offset 14, -4
 2949 1032 84B0     		sub	sp, sp, #16
 2950              		.cfi_def_cfa_offset 24
 2951 1034 00AF     		add	r7, sp, #0
 2952              		.cfi_def_cfa_register 7
 2953 1036 7860     		str	r0, [r7, #4]
1506:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 2954              		.loc 1 1506 0
 2955 1038 7B68     		ldr	r3, [r7, #4]
 2956 103a 9B6B     		ldr	r3, [r3, #56]
 2957 103c FB60     		str	r3, [r7, #12]
1507:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
1508:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   HAL_UART_TxHalfCpltCallback(huart);
 2958              		.loc 1 1508 0
 2959 103e F868     		ldr	r0, [r7, #12]
 2960 1040 FFF7FEFF 		bl	HAL_UART_TxHalfCpltCallback
1509:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** }
 2961              		.loc 1 1509 0
 2962 1044 1037     		adds	r7, r7, #16
 2963 1046 BD46     		mov	sp, r7
 2964              		@ sp needed
 2965 1048 80BD     		pop	{r7, pc}
 2966              		.cfi_endproc
 2967              	.LFE85:
 2969 104a 00BF     		.align	2
 2970              		.thumb
 2971              		.thumb_func
 2973              	UART_DMAReceiveCplt:
 2974              	.LFB86:
1510:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
1511:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** /**
1512:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @brief  DMA UART receive process complete callback. 
1513:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @param  hdma: DMA handle
1514:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @retval None
1515:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   */
1516:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)  
1517:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** {
 2975              		.loc 1 1517 0
 2976              		.cfi_startproc
 2977              		@ args = 0, pretend = 0, frame = 16
 2978              		@ frame_needed = 1, uses_anonymous_args = 0
 2979 104c 80B5     		push	{r7, lr}
 2980              		.cfi_def_cfa_offset 8
 2981              		.cfi_offset 7, -8
 2982              		.cfi_offset 14, -4
 2983 104e 84B0     		sub	sp, sp, #16
 2984              		.cfi_def_cfa_offset 24
 2985 1050 00AF     		add	r7, sp, #0
 2986              		.cfi_def_cfa_register 7
 2987 1052 7860     		str	r0, [r7, #4]
1518:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 2988              		.loc 1 1518 0
 2989 1054 7B68     		ldr	r3, [r7, #4]
 2990 1056 9B6B     		ldr	r3, [r3, #56]
 2991 1058 FB60     		str	r3, [r7, #12]
1519:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   huart->RxXferCount = 0;
 2992              		.loc 1 1519 0
 2993 105a FB68     		ldr	r3, [r7, #12]
 2994 105c 0022     		movs	r2, #0
 2995 105e DA85     		strh	r2, [r3, #46]	@ movhi
1520:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
1521:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* Disable the DMA transfer for the receiver request by setting the DMAR bit 
1522:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****      in the UART CR3 register */
1523:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAR);
 2996              		.loc 1 1523 0
 2997 1060 FB68     		ldr	r3, [r7, #12]
 2998 1062 1B68     		ldr	r3, [r3]
 2999 1064 FA68     		ldr	r2, [r7, #12]
 3000 1066 1268     		ldr	r2, [r2]
 3001 1068 5269     		ldr	r2, [r2, #20]
 3002 106a 22F04002 		bic	r2, r2, #64
 3003 106e 5A61     		str	r2, [r3, #20]
1524:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
1525:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* Check if a transmit process is ongoing or not */
1526:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 3004              		.loc 1 1526 0
 3005 1070 FB68     		ldr	r3, [r7, #12]
 3006 1072 93F83930 		ldrb	r3, [r3, #57]
 3007 1076 DBB2     		uxtb	r3, r3
 3008 1078 322B     		cmp	r3, #50
 3009 107a 04D1     		bne	.L153
1527:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   {
1528:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     huart->State = HAL_UART_STATE_BUSY_TX;
 3010              		.loc 1 1528 0
 3011 107c FB68     		ldr	r3, [r7, #12]
 3012 107e 1222     		movs	r2, #18
 3013 1080 83F83920 		strb	r2, [r3, #57]
 3014 1084 03E0     		b	.L154
 3015              	.L153:
1529:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   }
1530:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   else
1531:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   {
1532:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     huart->State = HAL_UART_STATE_READY;
 3016              		.loc 1 1532 0
 3017 1086 FB68     		ldr	r3, [r7, #12]
 3018 1088 0122     		movs	r2, #1
 3019 108a 83F83920 		strb	r2, [r3, #57]
 3020              	.L154:
1533:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   }
1534:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   HAL_UART_RxCpltCallback(huart);
 3021              		.loc 1 1534 0
 3022 108e F868     		ldr	r0, [r7, #12]
 3023 1090 FFF7FEFF 		bl	HAL_UART_RxCpltCallback
1535:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** }
 3024              		.loc 1 1535 0
 3025 1094 1037     		adds	r7, r7, #16
 3026 1096 BD46     		mov	sp, r7
 3027              		@ sp needed
 3028 1098 80BD     		pop	{r7, pc}
 3029              		.cfi_endproc
 3030              	.LFE86:
 3032 109a 00BF     		.align	2
 3033              		.thumb
 3034              		.thumb_func
 3036              	UART_DMARxHalfCplt:
 3037              	.LFB87:
1536:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
1537:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** /**
1538:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @brief DMA UART receive process half complete callback 
1539:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @param hdma : DMA handle
1540:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @retval None
1541:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   */
1542:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
1543:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** {
 3038              		.loc 1 1543 0
 3039              		.cfi_startproc
 3040              		@ args = 0, pretend = 0, frame = 16
 3041              		@ frame_needed = 1, uses_anonymous_args = 0
 3042 109c 80B5     		push	{r7, lr}
 3043              		.cfi_def_cfa_offset 8
 3044              		.cfi_offset 7, -8
 3045              		.cfi_offset 14, -4
 3046 109e 84B0     		sub	sp, sp, #16
 3047              		.cfi_def_cfa_offset 24
 3048 10a0 00AF     		add	r7, sp, #0
 3049              		.cfi_def_cfa_register 7
 3050 10a2 7860     		str	r0, [r7, #4]
1544:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 3051              		.loc 1 1544 0
 3052 10a4 7B68     		ldr	r3, [r7, #4]
 3053 10a6 9B6B     		ldr	r3, [r3, #56]
 3054 10a8 FB60     		str	r3, [r7, #12]
1545:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
1546:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   HAL_UART_RxHalfCpltCallback(huart); 
 3055              		.loc 1 1546 0
 3056 10aa F868     		ldr	r0, [r7, #12]
 3057 10ac FFF7FEFF 		bl	HAL_UART_RxHalfCpltCallback
1547:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** }
 3058              		.loc 1 1547 0
 3059 10b0 1037     		adds	r7, r7, #16
 3060 10b2 BD46     		mov	sp, r7
 3061              		@ sp needed
 3062 10b4 80BD     		pop	{r7, pc}
 3063              		.cfi_endproc
 3064              	.LFE87:
 3066 10b6 00BF     		.align	2
 3067              		.thumb
 3068              		.thumb_func
 3070              	UART_DMAError:
 3071              	.LFB88:
1548:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
1549:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** /**
1550:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @brief  DMA UART communication error callback.
1551:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @param  hdma: DMA handle
1552:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @retval None
1553:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   */
1554:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** static void UART_DMAError(DMA_HandleTypeDef *hdma)   
1555:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** {
 3072              		.loc 1 1555 0
 3073              		.cfi_startproc
 3074              		@ args = 0, pretend = 0, frame = 16
 3075              		@ frame_needed = 1, uses_anonymous_args = 0
 3076 10b8 80B5     		push	{r7, lr}
 3077              		.cfi_def_cfa_offset 8
 3078              		.cfi_offset 7, -8
 3079              		.cfi_offset 14, -4
 3080 10ba 84B0     		sub	sp, sp, #16
 3081              		.cfi_def_cfa_offset 24
 3082 10bc 00AF     		add	r7, sp, #0
 3083              		.cfi_def_cfa_register 7
 3084 10be 7860     		str	r0, [r7, #4]
1556:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 3085              		.loc 1 1556 0
 3086 10c0 7B68     		ldr	r3, [r7, #4]
 3087 10c2 9B6B     		ldr	r3, [r3, #56]
 3088 10c4 FB60     		str	r3, [r7, #12]
1557:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   huart->RxXferCount = 0;
 3089              		.loc 1 1557 0
 3090 10c6 FB68     		ldr	r3, [r7, #12]
 3091 10c8 0022     		movs	r2, #0
 3092 10ca DA85     		strh	r2, [r3, #46]	@ movhi
1558:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   huart->TxXferCount = 0;
 3093              		.loc 1 1558 0
 3094 10cc FB68     		ldr	r3, [r7, #12]
 3095 10ce 0022     		movs	r2, #0
 3096 10d0 DA84     		strh	r2, [r3, #38]	@ movhi
1559:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   huart->State= HAL_UART_STATE_READY;
 3097              		.loc 1 1559 0
 3098 10d2 FB68     		ldr	r3, [r7, #12]
 3099 10d4 0122     		movs	r2, #1
 3100 10d6 83F83920 		strb	r2, [r3, #57]
1560:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   huart->ErrorCode |= HAL_UART_ERROR_DMA;
 3101              		.loc 1 1560 0
 3102 10da FB68     		ldr	r3, [r7, #12]
 3103 10dc 93F83A30 		ldrb	r3, [r3, #58]
 3104 10e0 DBB2     		uxtb	r3, r3
 3105 10e2 43F01003 		orr	r3, r3, #16
 3106 10e6 DAB2     		uxtb	r2, r3
 3107 10e8 FB68     		ldr	r3, [r7, #12]
 3108 10ea 83F83A20 		strb	r2, [r3, #58]
1561:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   HAL_UART_ErrorCallback(huart);
 3109              		.loc 1 1561 0
 3110 10ee F868     		ldr	r0, [r7, #12]
 3111 10f0 FFF7FEFF 		bl	HAL_UART_ErrorCallback
1562:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** }
 3112              		.loc 1 1562 0
 3113 10f4 1037     		adds	r7, r7, #16
 3114 10f6 BD46     		mov	sp, r7
 3115              		@ sp needed
 3116 10f8 80BD     		pop	{r7, pc}
 3117              		.cfi_endproc
 3118              	.LFE88:
 3120 10fa 00BF     		.align	2
 3121              		.thumb
 3122              		.thumb_func
 3124              	UART_WaitOnFlagUntilTimeout:
 3125              	.LFB89:
1563:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
1564:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** /**
1565:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @brief  This function handles UART Communication Timeout.
1566:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @param  huart: UART handle
1567:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @param  Flag: specifies the UART flag to check.
1568:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @param  Status: The new Flag status (SET or RESET).
1569:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @param  Timeout: Timeout duration
1570:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @retval HAL status
1571:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   */
1572:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, Flag
1573:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** {
 3126              		.loc 1 1573 0
 3127              		.cfi_startproc
 3128              		@ args = 0, pretend = 0, frame = 24
 3129              		@ frame_needed = 1, uses_anonymous_args = 0
 3130 10fc 80B5     		push	{r7, lr}
 3131              		.cfi_def_cfa_offset 8
 3132              		.cfi_offset 7, -8
 3133              		.cfi_offset 14, -4
 3134 10fe 86B0     		sub	sp, sp, #24
 3135              		.cfi_def_cfa_offset 32
 3136 1100 00AF     		add	r7, sp, #0
 3137              		.cfi_def_cfa_register 7
 3138 1102 F860     		str	r0, [r7, #12]
 3139 1104 B960     		str	r1, [r7, #8]
 3140 1106 3B60     		str	r3, [r7]
 3141 1108 1346     		mov	r3, r2
 3142 110a FB71     		strb	r3, [r7, #7]
1574:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   uint32_t timeout = 0;
 3143              		.loc 1 1574 0
 3144 110c 0023     		movs	r3, #0
 3145 110e 7B61     		str	r3, [r7, #20]
1575:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
1576:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   timeout = HAL_GetTick() + Timeout;
 3146              		.loc 1 1576 0
 3147 1110 FFF7FEFF 		bl	HAL_GetTick
 3148 1114 0246     		mov	r2, r0
 3149 1116 3B68     		ldr	r3, [r7]
 3150 1118 1344     		add	r3, r3, r2
 3151 111a 7B61     		str	r3, [r7, #20]
1577:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
1578:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* Wait until flag is set */
1579:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   if(Status == RESET)
 3152              		.loc 1 1579 0
 3153 111c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3154 111e 002B     		cmp	r3, #0
 3155 1120 3DD1     		bne	.L158
1580:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   {
1581:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 3156              		.loc 1 1581 0
 3157 1122 33E0     		b	.L159
 3158              	.L161:
1582:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     {
1583:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       /* Check for the Timeout */
1584:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       if(Timeout != HAL_MAX_DELAY)
 3159              		.loc 1 1584 0
 3160 1124 3B68     		ldr	r3, [r7]
 3161 1126 B3F1FF3F 		cmp	r3, #-1
 3162 112a 2FD0     		beq	.L159
1585:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       {
1586:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         if(HAL_GetTick() >= timeout)
 3163              		.loc 1 1586 0
 3164 112c FFF7FEFF 		bl	HAL_GetTick
 3165 1130 0246     		mov	r2, r0
 3166 1132 7B69     		ldr	r3, [r7, #20]
 3167 1134 9A42     		cmp	r2, r3
 3168 1136 29D3     		bcc	.L159
1587:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         {
1588:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****           /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for
1589:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****           __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 3169              		.loc 1 1589 0
 3170 1138 FB68     		ldr	r3, [r7, #12]
 3171 113a 1B68     		ldr	r3, [r3]
 3172 113c FA68     		ldr	r2, [r7, #12]
 3173 113e 1268     		ldr	r2, [r2]
 3174 1140 D268     		ldr	r2, [r2, #12]
 3175 1142 22F08002 		bic	r2, r2, #128
 3176 1146 DA60     		str	r2, [r3, #12]
1590:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****           __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 3177              		.loc 1 1590 0
 3178 1148 FB68     		ldr	r3, [r7, #12]
 3179 114a 1B68     		ldr	r3, [r3]
 3180 114c FA68     		ldr	r2, [r7, #12]
 3181 114e 1268     		ldr	r2, [r2]
 3182 1150 D268     		ldr	r2, [r2, #12]
 3183 1152 22F02002 		bic	r2, r2, #32
 3184 1156 DA60     		str	r2, [r3, #12]
1591:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****           __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 3185              		.loc 1 1591 0
 3186 1158 FB68     		ldr	r3, [r7, #12]
 3187 115a 1B68     		ldr	r3, [r3]
 3188 115c FA68     		ldr	r2, [r7, #12]
 3189 115e 1268     		ldr	r2, [r2]
 3190 1160 D268     		ldr	r2, [r2, #12]
 3191 1162 22F48072 		bic	r2, r2, #256
 3192 1166 DA60     		str	r2, [r3, #12]
1592:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****           __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 3193              		.loc 1 1592 0
 3194 1168 FB68     		ldr	r3, [r7, #12]
 3195 116a 1B68     		ldr	r3, [r3]
 3196 116c FA68     		ldr	r2, [r7, #12]
 3197 116e 1268     		ldr	r2, [r2]
 3198 1170 5269     		ldr	r2, [r2, #20]
 3199 1172 22F00102 		bic	r2, r2, #1
 3200 1176 5A61     		str	r2, [r3, #20]
1593:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
1594:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****           huart->State= HAL_UART_STATE_READY;
 3201              		.loc 1 1594 0
 3202 1178 FB68     		ldr	r3, [r7, #12]
 3203 117a 0122     		movs	r2, #1
 3204 117c 83F83920 		strb	r2, [r3, #57]
1595:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
1596:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****           /* Process Unlocked */
1597:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****           __HAL_UNLOCK(huart);
 3205              		.loc 1 1597 0
 3206 1180 FB68     		ldr	r3, [r7, #12]
 3207 1182 0022     		movs	r2, #0
 3208 1184 83F83820 		strb	r2, [r3, #56]
1598:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
1599:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****           return HAL_TIMEOUT;
 3209              		.loc 1 1599 0
 3210 1188 0323     		movs	r3, #3
 3211 118a 46E0     		b	.L160
 3212              	.L159:
1581:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     {
 3213              		.loc 1 1581 0 discriminator 1
 3214 118c FB68     		ldr	r3, [r7, #12]
 3215 118e 1B68     		ldr	r3, [r3]
 3216 1190 1A68     		ldr	r2, [r3]
 3217 1192 BB68     		ldr	r3, [r7, #8]
 3218 1194 1A40     		ands	r2, r2, r3
 3219 1196 BB68     		ldr	r3, [r7, #8]
 3220 1198 9A42     		cmp	r2, r3
 3221 119a C3D1     		bne	.L161
 3222 119c 3CE0     		b	.L162
 3223              	.L158:
1600:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         }
1601:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       }
1602:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     }
1603:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   }
1604:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   else
1605:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   {
1606:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 3224              		.loc 1 1606 0
 3225 119e 33E0     		b	.L163
 3226              	.L164:
1607:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     {
1608:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       /* Check for the Timeout */
1609:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       if(Timeout != HAL_MAX_DELAY)
 3227              		.loc 1 1609 0
 3228 11a0 3B68     		ldr	r3, [r7]
 3229 11a2 B3F1FF3F 		cmp	r3, #-1
 3230 11a6 2FD0     		beq	.L163
1610:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       {
1611:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         if(HAL_GetTick() >= timeout)
 3231              		.loc 1 1611 0
 3232 11a8 FFF7FEFF 		bl	HAL_GetTick
 3233 11ac 0246     		mov	r2, r0
 3234 11ae 7B69     		ldr	r3, [r7, #20]
 3235 11b0 9A42     		cmp	r2, r3
 3236 11b2 29D3     		bcc	.L163
1612:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         {
1613:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****           /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for
1614:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****           __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 3237              		.loc 1 1614 0
 3238 11b4 FB68     		ldr	r3, [r7, #12]
 3239 11b6 1B68     		ldr	r3, [r3]
 3240 11b8 FA68     		ldr	r2, [r7, #12]
 3241 11ba 1268     		ldr	r2, [r2]
 3242 11bc D268     		ldr	r2, [r2, #12]
 3243 11be 22F08002 		bic	r2, r2, #128
 3244 11c2 DA60     		str	r2, [r3, #12]
1615:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****           __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 3245              		.loc 1 1615 0
 3246 11c4 FB68     		ldr	r3, [r7, #12]
 3247 11c6 1B68     		ldr	r3, [r3]
 3248 11c8 FA68     		ldr	r2, [r7, #12]
 3249 11ca 1268     		ldr	r2, [r2]
 3250 11cc D268     		ldr	r2, [r2, #12]
 3251 11ce 22F02002 		bic	r2, r2, #32
 3252 11d2 DA60     		str	r2, [r3, #12]
1616:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****           __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 3253              		.loc 1 1616 0
 3254 11d4 FB68     		ldr	r3, [r7, #12]
 3255 11d6 1B68     		ldr	r3, [r3]
 3256 11d8 FA68     		ldr	r2, [r7, #12]
 3257 11da 1268     		ldr	r2, [r2]
 3258 11dc D268     		ldr	r2, [r2, #12]
 3259 11de 22F48072 		bic	r2, r2, #256
 3260 11e2 DA60     		str	r2, [r3, #12]
1617:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****           __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 3261              		.loc 1 1617 0
 3262 11e4 FB68     		ldr	r3, [r7, #12]
 3263 11e6 1B68     		ldr	r3, [r3]
 3264 11e8 FA68     		ldr	r2, [r7, #12]
 3265 11ea 1268     		ldr	r2, [r2]
 3266 11ec 5269     		ldr	r2, [r2, #20]
 3267 11ee 22F00102 		bic	r2, r2, #1
 3268 11f2 5A61     		str	r2, [r3, #20]
1618:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
1619:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****           huart->State= HAL_UART_STATE_READY;
 3269              		.loc 1 1619 0
 3270 11f4 FB68     		ldr	r3, [r7, #12]
 3271 11f6 0122     		movs	r2, #1
 3272 11f8 83F83920 		strb	r2, [r3, #57]
1620:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
1621:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****           /* Process Unlocked */
1622:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****           __HAL_UNLOCK(huart);
 3273              		.loc 1 1622 0
 3274 11fc FB68     		ldr	r3, [r7, #12]
 3275 11fe 0022     		movs	r2, #0
 3276 1200 83F83820 		strb	r2, [r3, #56]
1623:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         
1624:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****           return HAL_TIMEOUT;
 3277              		.loc 1 1624 0
 3278 1204 0323     		movs	r3, #3
 3279 1206 08E0     		b	.L160
 3280              	.L163:
1606:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     {
 3281              		.loc 1 1606 0 discriminator 1
 3282 1208 FB68     		ldr	r3, [r7, #12]
 3283 120a 1B68     		ldr	r3, [r3]
 3284 120c 1A68     		ldr	r2, [r3]
 3285 120e BB68     		ldr	r3, [r7, #8]
 3286 1210 1A40     		ands	r2, r2, r3
 3287 1212 BB68     		ldr	r3, [r7, #8]
 3288 1214 9A42     		cmp	r2, r3
 3289 1216 C3D0     		beq	.L164
 3290              	.L162:
1625:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         }
1626:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       }
1627:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     }
1628:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   }
1629:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   return HAL_OK;      
 3291              		.loc 1 1629 0
 3292 1218 0023     		movs	r3, #0
 3293              	.L160:
1630:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** }
 3294              		.loc 1 1630 0
 3295 121a 1846     		mov	r0, r3
 3296 121c 1837     		adds	r7, r7, #24
 3297 121e BD46     		mov	sp, r7
 3298              		@ sp needed
 3299 1220 80BD     		pop	{r7, pc}
 3300              		.cfi_endproc
 3301              	.LFE89:
 3303 1222 00BF     		.align	2
 3304              		.thumb
 3305              		.thumb_func
 3307              	UART_Transmit_IT:
 3308              	.LFB90:
1631:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
1632:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** /**
1633:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @brief  Sends an amount of data in non blocking mode.
1634:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @param  huart: UART handle
1635:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @retval HAL status
1636:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   */
1637:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
1638:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** {
 3309              		.loc 1 1638 0
 3310              		.cfi_startproc
 3311              		@ args = 0, pretend = 0, frame = 16
 3312              		@ frame_needed = 1, uses_anonymous_args = 0
 3313 1224 80B5     		push	{r7, lr}
 3314              		.cfi_def_cfa_offset 8
 3315              		.cfi_offset 7, -8
 3316              		.cfi_offset 14, -4
 3317 1226 84B0     		sub	sp, sp, #16
 3318              		.cfi_def_cfa_offset 24
 3319 1228 00AF     		add	r7, sp, #0
 3320              		.cfi_def_cfa_register 7
 3321 122a 7860     		str	r0, [r7, #4]
1639:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   uint16_t* tmp;
1640:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   uint32_t tmp1 = 0;
 3322              		.loc 1 1640 0
 3323 122c 0023     		movs	r3, #0
 3324 122e FB60     		str	r3, [r7, #12]
1641:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
1642:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   tmp1 = huart->State;
 3325              		.loc 1 1642 0
 3326 1230 7B68     		ldr	r3, [r7, #4]
 3327 1232 93F83930 		ldrb	r3, [r3, #57]
 3328 1236 DBB2     		uxtb	r3, r3
 3329 1238 FB60     		str	r3, [r7, #12]
1643:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   if((tmp1 == HAL_UART_STATE_BUSY_TX) || (tmp1 == HAL_UART_STATE_BUSY_TX_RX))
 3330              		.loc 1 1643 0
 3331 123a FB68     		ldr	r3, [r7, #12]
 3332 123c 122B     		cmp	r3, #18
 3333 123e 02D0     		beq	.L166
 3334              		.loc 1 1643 0 is_stmt 0 discriminator 1
 3335 1240 FB68     		ldr	r3, [r7, #12]
 3336 1242 322B     		cmp	r3, #50
 3337 1244 72D1     		bne	.L167
 3338              	.L166:
1644:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   {
1645:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     /* Process Locked */
1646:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     __HAL_LOCK(huart);
 3339              		.loc 1 1646 0 is_stmt 1
 3340 1246 7B68     		ldr	r3, [r7, #4]
 3341 1248 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 3342 124c 012B     		cmp	r3, #1
 3343 124e 01D1     		bne	.L168
 3344              		.loc 1 1646 0 is_stmt 0 discriminator 1
 3345 1250 0223     		movs	r3, #2
 3346 1252 6CE0     		b	.L169
 3347              	.L168:
 3348              		.loc 1 1646 0 discriminator 2
 3349 1254 7B68     		ldr	r3, [r7, #4]
 3350 1256 0122     		movs	r2, #1
 3351 1258 83F83820 		strb	r2, [r3, #56]
1647:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     
1648:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 3352              		.loc 1 1648 0 is_stmt 1 discriminator 2
 3353 125c 7B68     		ldr	r3, [r7, #4]
 3354 125e 9B68     		ldr	r3, [r3, #8]
 3355 1260 B3F5805F 		cmp	r3, #4096
 3356 1264 19D1     		bne	.L170
1649:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     {
1650:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       tmp = (uint16_t*) huart->pTxBuffPtr;
 3357              		.loc 1 1650 0
 3358 1266 7B68     		ldr	r3, [r7, #4]
 3359 1268 1B6A     		ldr	r3, [r3, #32]
 3360 126a BB60     		str	r3, [r7, #8]
1651:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 3361              		.loc 1 1651 0
 3362 126c 7B68     		ldr	r3, [r7, #4]
 3363 126e 1B68     		ldr	r3, [r3]
 3364 1270 BA68     		ldr	r2, [r7, #8]
 3365 1272 1288     		ldrh	r2, [r2]
 3366 1274 C2F30802 		ubfx	r2, r2, #0, #9
 3367 1278 5A60     		str	r2, [r3, #4]
1652:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       if(huart->Init.Parity == UART_PARITY_NONE)
 3368              		.loc 1 1652 0
 3369 127a 7B68     		ldr	r3, [r7, #4]
 3370 127c 1B69     		ldr	r3, [r3, #16]
 3371 127e 002B     		cmp	r3, #0
 3372 1280 05D1     		bne	.L171
1653:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       {
1654:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         huart->pTxBuffPtr += 2;
 3373              		.loc 1 1654 0
 3374 1282 7B68     		ldr	r3, [r7, #4]
 3375 1284 1B6A     		ldr	r3, [r3, #32]
 3376 1286 9A1C     		adds	r2, r3, #2
 3377 1288 7B68     		ldr	r3, [r7, #4]
 3378 128a 1A62     		str	r2, [r3, #32]
 3379 128c 0EE0     		b	.L173
 3380              	.L171:
1655:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       }
1656:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       else
1657:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       {
1658:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         huart->pTxBuffPtr += 1;
 3381              		.loc 1 1658 0
 3382 128e 7B68     		ldr	r3, [r7, #4]
 3383 1290 1B6A     		ldr	r3, [r3, #32]
 3384 1292 5A1C     		adds	r2, r3, #1
 3385 1294 7B68     		ldr	r3, [r7, #4]
 3386 1296 1A62     		str	r2, [r3, #32]
 3387 1298 08E0     		b	.L173
 3388              	.L170:
1659:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       }
1660:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     } 
1661:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     else
1662:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     {
1663:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 3389              		.loc 1 1663 0
 3390 129a 7B68     		ldr	r3, [r7, #4]
 3391 129c 1A68     		ldr	r2, [r3]
 3392 129e 7B68     		ldr	r3, [r7, #4]
 3393 12a0 1B6A     		ldr	r3, [r3, #32]
 3394 12a2 581C     		adds	r0, r3, #1
 3395 12a4 7968     		ldr	r1, [r7, #4]
 3396 12a6 0862     		str	r0, [r1, #32]
 3397 12a8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3398 12aa 5360     		str	r3, [r2, #4]
 3399              	.L173:
1664:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     }
1665:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
1666:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     if(--huart->TxXferCount == 0)
 3400              		.loc 1 1666 0
 3401 12ac 7B68     		ldr	r3, [r7, #4]
 3402 12ae DB8C     		ldrh	r3, [r3, #38]
 3403 12b0 013B     		subs	r3, r3, #1
 3404 12b2 9AB2     		uxth	r2, r3
 3405 12b4 7B68     		ldr	r3, [r7, #4]
 3406 12b6 DA84     		strh	r2, [r3, #38]	@ movhi
 3407 12b8 7B68     		ldr	r3, [r7, #4]
 3408 12ba DB8C     		ldrh	r3, [r3, #38]
 3409 12bc 002B     		cmp	r3, #0
 3410 12be 2FD1     		bne	.L174
1667:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     {
1668:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       /* Disable the UART Transmit Complete Interrupt */
1669:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 3411              		.loc 1 1669 0
 3412 12c0 7B68     		ldr	r3, [r7, #4]
 3413 12c2 1B68     		ldr	r3, [r3]
 3414 12c4 7A68     		ldr	r2, [r7, #4]
 3415 12c6 1268     		ldr	r2, [r2]
 3416 12c8 D268     		ldr	r2, [r2, #12]
 3417 12ca 22F04002 		bic	r2, r2, #64
 3418 12ce DA60     		str	r2, [r3, #12]
1670:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       
1671:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       /* Check if a receive process is ongoing or not */
1672:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 3419              		.loc 1 1672 0
 3420 12d0 7B68     		ldr	r3, [r7, #4]
 3421 12d2 93F83930 		ldrb	r3, [r3, #57]
 3422 12d6 DBB2     		uxtb	r3, r3
 3423 12d8 322B     		cmp	r3, #50
 3424 12da 04D1     		bne	.L175
1673:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       {
1674:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         huart->State = HAL_UART_STATE_BUSY_RX;
 3425              		.loc 1 1674 0
 3426 12dc 7B68     		ldr	r3, [r7, #4]
 3427 12de 2222     		movs	r2, #34
 3428 12e0 83F83920 		strb	r2, [r3, #57]
 3429 12e4 13E0     		b	.L176
 3430              	.L175:
1675:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       }
1676:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       else
1677:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       {
1678:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         /* Disable the UART Parity Error Interrupt */
1679:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 3431              		.loc 1 1679 0
 3432 12e6 7B68     		ldr	r3, [r7, #4]
 3433 12e8 1B68     		ldr	r3, [r3]
 3434 12ea 7A68     		ldr	r2, [r7, #4]
 3435 12ec 1268     		ldr	r2, [r2]
 3436 12ee D268     		ldr	r2, [r2, #12]
 3437 12f0 22F48072 		bic	r2, r2, #256
 3438 12f4 DA60     		str	r2, [r3, #12]
1680:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         
1681:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
1682:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 3439              		.loc 1 1682 0
 3440 12f6 7B68     		ldr	r3, [r7, #4]
 3441 12f8 1B68     		ldr	r3, [r3]
 3442 12fa 7A68     		ldr	r2, [r7, #4]
 3443 12fc 1268     		ldr	r2, [r2]
 3444 12fe 5269     		ldr	r2, [r2, #20]
 3445 1300 22F00102 		bic	r2, r2, #1
 3446 1304 5A61     		str	r2, [r3, #20]
1683:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         
1684:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         huart->State = HAL_UART_STATE_READY;
 3447              		.loc 1 1684 0
 3448 1306 7B68     		ldr	r3, [r7, #4]
 3449 1308 0122     		movs	r2, #1
 3450 130a 83F83920 		strb	r2, [r3, #57]
 3451              	.L176:
1685:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       }
1686:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       /* Call the Process Unlocked before calling the Tx callback API to give the possibility to
1687:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****          start again the Transmission under the Tx callback API */
1688:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       __HAL_UNLOCK(huart);
 3452              		.loc 1 1688 0
 3453 130e 7B68     		ldr	r3, [r7, #4]
 3454 1310 0022     		movs	r2, #0
 3455 1312 83F83820 		strb	r2, [r3, #56]
1689:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       
1690:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       HAL_UART_TxCpltCallback(huart);
 3456              		.loc 1 1690 0
 3457 1316 7868     		ldr	r0, [r7, #4]
 3458 1318 FFF7FEFF 		bl	HAL_UART_TxCpltCallback
1691:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       
1692:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       return HAL_OK;
 3459              		.loc 1 1692 0
 3460 131c 0023     		movs	r3, #0
 3461 131e 06E0     		b	.L169
 3462              	.L174:
1693:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     }
1694:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
1695:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     /* Process Unlocked */
1696:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     __HAL_UNLOCK(huart);
 3463              		.loc 1 1696 0
 3464 1320 7B68     		ldr	r3, [r7, #4]
 3465 1322 0022     		movs	r2, #0
 3466 1324 83F83820 		strb	r2, [r3, #56]
1697:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
1698:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       return HAL_OK;
 3467              		.loc 1 1698 0
 3468 1328 0023     		movs	r3, #0
 3469 132a 00E0     		b	.L169
 3470              	.L167:
1699:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   }
1700:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   else
1701:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   {
1702:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     return HAL_BUSY;   
 3471              		.loc 1 1702 0
 3472 132c 0223     		movs	r3, #2
 3473              	.L169:
1703:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   }
1704:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** }
 3474              		.loc 1 1704 0
 3475 132e 1846     		mov	r0, r3
 3476 1330 1037     		adds	r7, r7, #16
 3477 1332 BD46     		mov	sp, r7
 3478              		@ sp needed
 3479 1334 80BD     		pop	{r7, pc}
 3480              		.cfi_endproc
 3481              	.LFE90:
 3483 1336 00BF     		.align	2
 3484              		.thumb
 3485              		.thumb_func
 3487              	UART_Receive_IT:
 3488              	.LFB91:
1705:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** /**
1706:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @brief  Receives an amount of data in non blocking mode 
1707:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @param  huart: UART handle
1708:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @retval HAL status
1709:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   */
1710:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
1711:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** {
 3489              		.loc 1 1711 0
 3490              		.cfi_startproc
 3491              		@ args = 0, pretend = 0, frame = 16
 3492              		@ frame_needed = 1, uses_anonymous_args = 0
 3493 1338 80B5     		push	{r7, lr}
 3494              		.cfi_def_cfa_offset 8
 3495              		.cfi_offset 7, -8
 3496              		.cfi_offset 14, -4
 3497 133a 84B0     		sub	sp, sp, #16
 3498              		.cfi_def_cfa_offset 24
 3499 133c 00AF     		add	r7, sp, #0
 3500              		.cfi_def_cfa_register 7
 3501 133e 7860     		str	r0, [r7, #4]
1712:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   uint16_t* tmp;
1713:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   uint32_t tmp1 = 0;
 3502              		.loc 1 1713 0
 3503 1340 0023     		movs	r3, #0
 3504 1342 FB60     		str	r3, [r7, #12]
1714:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
1715:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   tmp1 = huart->State; 
 3505              		.loc 1 1715 0
 3506 1344 7B68     		ldr	r3, [r7, #4]
 3507 1346 93F83930 		ldrb	r3, [r3, #57]
 3508 134a DBB2     		uxtb	r3, r3
 3509 134c FB60     		str	r3, [r7, #12]
1716:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   if((tmp1 == HAL_UART_STATE_BUSY_RX) || (tmp1 == HAL_UART_STATE_BUSY_TX_RX))
 3510              		.loc 1 1716 0
 3511 134e FB68     		ldr	r3, [r7, #12]
 3512 1350 222B     		cmp	r3, #34
 3513 1352 03D0     		beq	.L178
 3514              		.loc 1 1716 0 is_stmt 0 discriminator 1
 3515 1354 FB68     		ldr	r3, [r7, #12]
 3516 1356 322B     		cmp	r3, #50
 3517 1358 40F09880 		bne	.L179
 3518              	.L178:
1717:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   {
1718:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     /* Process Locked */
1719:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     __HAL_LOCK(huart);
 3519              		.loc 1 1719 0 is_stmt 1
 3520 135c 7B68     		ldr	r3, [r7, #4]
 3521 135e 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 3522 1362 012B     		cmp	r3, #1
 3523 1364 01D1     		bne	.L180
 3524              		.loc 1 1719 0 is_stmt 0 discriminator 1
 3525 1366 0223     		movs	r3, #2
 3526 1368 91E0     		b	.L181
 3527              	.L180:
 3528              		.loc 1 1719 0 discriminator 2
 3529 136a 7B68     		ldr	r3, [r7, #4]
 3530 136c 0122     		movs	r2, #1
 3531 136e 83F83820 		strb	r2, [r3, #56]
1720:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     
1721:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 3532              		.loc 1 1721 0 is_stmt 1 discriminator 2
 3533 1372 7B68     		ldr	r3, [r7, #4]
 3534 1374 9B68     		ldr	r3, [r3, #8]
 3535 1376 B3F5805F 		cmp	r3, #4096
 3536 137a 23D1     		bne	.L182
1722:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     {
1723:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       tmp = (uint16_t*) huart->pRxBuffPtr;
 3537              		.loc 1 1723 0
 3538 137c 7B68     		ldr	r3, [r7, #4]
 3539 137e 9B6A     		ldr	r3, [r3, #40]
 3540 1380 BB60     		str	r3, [r7, #8]
1724:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       if(huart->Init.Parity == UART_PARITY_NONE)
 3541              		.loc 1 1724 0
 3542 1382 7B68     		ldr	r3, [r7, #4]
 3543 1384 1B69     		ldr	r3, [r3, #16]
 3544 1386 002B     		cmp	r3, #0
 3545 1388 0ED1     		bne	.L183
1725:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       {
1726:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 3546              		.loc 1 1726 0
 3547 138a 7B68     		ldr	r3, [r7, #4]
 3548 138c 1B68     		ldr	r3, [r3]
 3549 138e 5B68     		ldr	r3, [r3, #4]
 3550 1390 9BB2     		uxth	r3, r3
 3551 1392 C3F30803 		ubfx	r3, r3, #0, #9
 3552 1396 9AB2     		uxth	r2, r3
 3553 1398 BB68     		ldr	r3, [r7, #8]
 3554 139a 1A80     		strh	r2, [r3]	@ movhi
1727:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         huart->pRxBuffPtr += 2;
 3555              		.loc 1 1727 0
 3556 139c 7B68     		ldr	r3, [r7, #4]
 3557 139e 9B6A     		ldr	r3, [r3, #40]
 3558 13a0 9A1C     		adds	r2, r3, #2
 3559 13a2 7B68     		ldr	r3, [r7, #4]
 3560 13a4 9A62     		str	r2, [r3, #40]
 3561 13a6 29E0     		b	.L185
 3562              	.L183:
1728:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       }
1729:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       else
1730:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       {
1731:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 3563              		.loc 1 1731 0
 3564 13a8 7B68     		ldr	r3, [r7, #4]
 3565 13aa 1B68     		ldr	r3, [r3]
 3566 13ac 5B68     		ldr	r3, [r3, #4]
 3567 13ae 9BB2     		uxth	r3, r3
 3568 13b0 DBB2     		uxtb	r3, r3
 3569 13b2 9AB2     		uxth	r2, r3
 3570 13b4 BB68     		ldr	r3, [r7, #8]
 3571 13b6 1A80     		strh	r2, [r3]	@ movhi
1732:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         huart->pRxBuffPtr += 1;
 3572              		.loc 1 1732 0
 3573 13b8 7B68     		ldr	r3, [r7, #4]
 3574 13ba 9B6A     		ldr	r3, [r3, #40]
 3575 13bc 5A1C     		adds	r2, r3, #1
 3576 13be 7B68     		ldr	r3, [r7, #4]
 3577 13c0 9A62     		str	r2, [r3, #40]
 3578 13c2 1BE0     		b	.L185
 3579              	.L182:
1733:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       }
1734:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     }
1735:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     else
1736:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     {
1737:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       if(huart->Init.Parity == UART_PARITY_NONE)
 3580              		.loc 1 1737 0
 3581 13c4 7B68     		ldr	r3, [r7, #4]
 3582 13c6 1B69     		ldr	r3, [r3, #16]
 3583 13c8 002B     		cmp	r3, #0
 3584 13ca 0AD1     		bne	.L186
1738:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       {
1739:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 3585              		.loc 1 1739 0
 3586 13cc 7B68     		ldr	r3, [r7, #4]
 3587 13ce 9B6A     		ldr	r3, [r3, #40]
 3588 13d0 591C     		adds	r1, r3, #1
 3589 13d2 7A68     		ldr	r2, [r7, #4]
 3590 13d4 9162     		str	r1, [r2, #40]
 3591 13d6 7A68     		ldr	r2, [r7, #4]
 3592 13d8 1268     		ldr	r2, [r2]
 3593 13da 5268     		ldr	r2, [r2, #4]
 3594 13dc D2B2     		uxtb	r2, r2
 3595 13de 1A70     		strb	r2, [r3]
 3596 13e0 0CE0     		b	.L185
 3597              	.L186:
1740:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       }
1741:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       else
1742:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       {
1743:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 3598              		.loc 1 1743 0
 3599 13e2 7B68     		ldr	r3, [r7, #4]
 3600 13e4 9B6A     		ldr	r3, [r3, #40]
 3601 13e6 591C     		adds	r1, r3, #1
 3602 13e8 7A68     		ldr	r2, [r7, #4]
 3603 13ea 9162     		str	r1, [r2, #40]
 3604 13ec 7A68     		ldr	r2, [r7, #4]
 3605 13ee 1268     		ldr	r2, [r2]
 3606 13f0 5268     		ldr	r2, [r2, #4]
 3607 13f2 D2B2     		uxtb	r2, r2
 3608 13f4 02F07F02 		and	r2, r2, #127
 3609 13f8 D2B2     		uxtb	r2, r2
 3610 13fa 1A70     		strb	r2, [r3]
 3611              	.L185:
1744:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       }
1745:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     }
1746:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     
1747:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     if(--huart->RxXferCount == 0)
 3612              		.loc 1 1747 0
 3613 13fc 7B68     		ldr	r3, [r7, #4]
 3614 13fe DB8D     		ldrh	r3, [r3, #46]
 3615 1400 013B     		subs	r3, r3, #1
 3616 1402 9AB2     		uxth	r2, r3
 3617 1404 7B68     		ldr	r3, [r7, #4]
 3618 1406 DA85     		strh	r2, [r3, #46]	@ movhi
 3619 1408 7B68     		ldr	r3, [r7, #4]
 3620 140a DB8D     		ldrh	r3, [r3, #46]
 3621 140c 002B     		cmp	r3, #0
 3622 140e 37D1     		bne	.L187
1748:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     {
1749:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       while(HAL_IS_BIT_SET(huart->Instance->SR, UART_FLAG_RXNE))
 3623              		.loc 1 1749 0
 3624 1410 00BF     		nop
 3625              	.L188:
 3626              		.loc 1 1749 0 is_stmt 0 discriminator 1
 3627 1412 7B68     		ldr	r3, [r7, #4]
 3628 1414 1B68     		ldr	r3, [r3]
 3629 1416 1B68     		ldr	r3, [r3]
 3630 1418 03F02003 		and	r3, r3, #32
 3631 141c 002B     		cmp	r3, #0
 3632 141e F8D1     		bne	.L188
1750:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       {
1751:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       }
1752:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 3633              		.loc 1 1752 0 is_stmt 1
 3634 1420 7B68     		ldr	r3, [r7, #4]
 3635 1422 1B68     		ldr	r3, [r3]
 3636 1424 7A68     		ldr	r2, [r7, #4]
 3637 1426 1268     		ldr	r2, [r2]
 3638 1428 D268     		ldr	r2, [r2, #12]
 3639 142a 22F02002 		bic	r2, r2, #32
 3640 142e DA60     		str	r2, [r3, #12]
1753:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       
1754:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       /* Check if a transmit process is ongoing or not */
1755:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 3641              		.loc 1 1755 0
 3642 1430 7B68     		ldr	r3, [r7, #4]
 3643 1432 93F83930 		ldrb	r3, [r3, #57]
 3644 1436 DBB2     		uxtb	r3, r3
 3645 1438 322B     		cmp	r3, #50
 3646 143a 04D1     		bne	.L189
1756:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       {
1757:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         huart->State = HAL_UART_STATE_BUSY_TX;
 3647              		.loc 1 1757 0
 3648 143c 7B68     		ldr	r3, [r7, #4]
 3649 143e 1222     		movs	r2, #18
 3650 1440 83F83920 		strb	r2, [r3, #57]
 3651 1444 13E0     		b	.L190
 3652              	.L189:
1758:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       }
1759:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       else
1760:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       {
1761:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         /* Disable the UART Parity Error Interrupt */
1762:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 3653              		.loc 1 1762 0
 3654 1446 7B68     		ldr	r3, [r7, #4]
 3655 1448 1B68     		ldr	r3, [r3]
 3656 144a 7A68     		ldr	r2, [r7, #4]
 3657 144c 1268     		ldr	r2, [r2]
 3658 144e D268     		ldr	r2, [r2, #12]
 3659 1450 22F48072 		bic	r2, r2, #256
 3660 1454 DA60     		str	r2, [r3, #12]
1763:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         
1764:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
1765:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 3661              		.loc 1 1765 0
 3662 1456 7B68     		ldr	r3, [r7, #4]
 3663 1458 1B68     		ldr	r3, [r3]
 3664 145a 7A68     		ldr	r2, [r7, #4]
 3665 145c 1268     		ldr	r2, [r2]
 3666 145e 5269     		ldr	r2, [r2, #20]
 3667 1460 22F00102 		bic	r2, r2, #1
 3668 1464 5A61     		str	r2, [r3, #20]
1766:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         
1767:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****         huart->State = HAL_UART_STATE_READY;
 3669              		.loc 1 1767 0
 3670 1466 7B68     		ldr	r3, [r7, #4]
 3671 1468 0122     		movs	r2, #1
 3672 146a 83F83920 		strb	r2, [r3, #57]
 3673              	.L190:
1768:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       }
1769:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       /* Call the Process Unlocked before calling the Rx callback API to give the possibility to
1770:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****          start again the reception under the Rx callback API */
1771:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       __HAL_UNLOCK(huart);
 3674              		.loc 1 1771 0
 3675 146e 7B68     		ldr	r3, [r7, #4]
 3676 1470 0022     		movs	r2, #0
 3677 1472 83F83820 		strb	r2, [r3, #56]
1772:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       
1773:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       HAL_UART_RxCpltCallback(huart);
 3678              		.loc 1 1773 0
 3679 1476 7868     		ldr	r0, [r7, #4]
 3680 1478 FFF7FEFF 		bl	HAL_UART_RxCpltCallback
1774:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       
1775:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       return HAL_OK;
 3681              		.loc 1 1775 0
 3682 147c 0023     		movs	r3, #0
 3683 147e 06E0     		b	.L181
 3684              	.L187:
1776:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     }
1777:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     /* Process Unlocked */
1778:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     __HAL_UNLOCK(huart);
 3685              		.loc 1 1778 0
 3686 1480 7B68     		ldr	r3, [r7, #4]
 3687 1482 0022     		movs	r2, #0
 3688 1484 83F83820 		strb	r2, [r3, #56]
1779:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     
1780:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     return HAL_OK;
 3689              		.loc 1 1780 0
 3690 1488 0023     		movs	r3, #0
 3691 148a 00E0     		b	.L181
 3692              	.L179:
1781:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   }
1782:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   else
1783:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   {
1784:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     return HAL_BUSY; 
 3693              		.loc 1 1784 0
 3694 148c 0223     		movs	r3, #2
 3695              	.L181:
1785:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   }
1786:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** }
 3696              		.loc 1 1786 0
 3697 148e 1846     		mov	r0, r3
 3698 1490 1037     		adds	r7, r7, #16
 3699 1492 BD46     		mov	sp, r7
 3700              		@ sp needed
 3701 1494 80BD     		pop	{r7, pc}
 3702              		.cfi_endproc
 3703              	.LFE91:
 3705 1496 00BF     		.align	2
 3706              		.thumb
 3707              		.thumb_func
 3709              	UART_SetConfig:
 3710              	.LFB92:
1787:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
1788:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** /**
1789:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @brief  Configures the UART peripheral. 
1790:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @param  huart: UART handle
1791:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   * @retval None
1792:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   */
1793:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** static void UART_SetConfig(UART_HandleTypeDef *huart)
1794:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** {
 3711              		.loc 1 1794 0
 3712              		.cfi_startproc
 3713              		@ args = 0, pretend = 0, frame = 16
 3714              		@ frame_needed = 1, uses_anonymous_args = 0
 3715 1498 F0B5     		push	{r4, r5, r6, r7, lr}
 3716              		.cfi_def_cfa_offset 20
 3717              		.cfi_offset 4, -20
 3718              		.cfi_offset 5, -16
 3719              		.cfi_offset 6, -12
 3720              		.cfi_offset 7, -8
 3721              		.cfi_offset 14, -4
 3722 149a 85B0     		sub	sp, sp, #20
 3723              		.cfi_def_cfa_offset 40
 3724 149c 00AF     		add	r7, sp, #0
 3725              		.cfi_def_cfa_register 7
 3726 149e 7860     		str	r0, [r7, #4]
1795:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   uint32_t tmpreg = 0x00;
 3727              		.loc 1 1795 0
 3728 14a0 0023     		movs	r3, #0
 3729 14a2 FB60     		str	r3, [r7, #12]
1796:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
1797:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* Check the parameters */
1798:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   assert_param(IS_UART_INSTANCE(huart->Instance));
1799:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));  
1800:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
1801:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
1802:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   assert_param(IS_UART_PARITY(huart->Init.Parity));
1803:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   assert_param(IS_UART_MODE(huart->Init.Mode));
1804:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
1805:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
1806:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* The hardware flow control is available only for USART1, USART2, USART3 and USART6 */
1807:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   if(huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
1808:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   {
1809:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
1810:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   }
1811:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
1812:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /*-------------------------- USART CR2 Configuration -----------------------*/
1813:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   tmpreg = huart->Instance->CR2;
 3730              		.loc 1 1813 0
 3731 14a4 7B68     		ldr	r3, [r7, #4]
 3732 14a6 1B68     		ldr	r3, [r3]
 3733 14a8 1B69     		ldr	r3, [r3, #16]
 3734 14aa FB60     		str	r3, [r7, #12]
1814:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
1815:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* Clear STOP[13:12] bits */
1816:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 3735              		.loc 1 1816 0
 3736 14ac FB68     		ldr	r3, [r7, #12]
 3737 14ae 23F44053 		bic	r3, r3, #12288
 3738 14b2 FB60     		str	r3, [r7, #12]
1817:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
1818:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
1819:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   tmpreg |= (uint32_t)huart->Init.StopBits;
 3739              		.loc 1 1819 0
 3740 14b4 7B68     		ldr	r3, [r7, #4]
 3741 14b6 DB68     		ldr	r3, [r3, #12]
 3742 14b8 FA68     		ldr	r2, [r7, #12]
 3743 14ba 1343     		orrs	r3, r3, r2
 3744 14bc FB60     		str	r3, [r7, #12]
1820:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
1821:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* Write to USART CR2 */
1822:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   huart->Instance->CR2 = (uint32_t)tmpreg;
 3745              		.loc 1 1822 0
 3746 14be 7B68     		ldr	r3, [r7, #4]
 3747 14c0 1B68     		ldr	r3, [r3]
 3748 14c2 FA68     		ldr	r2, [r7, #12]
 3749 14c4 1A61     		str	r2, [r3, #16]
1823:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
1824:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /*-------------------------- USART CR1 Configuration -----------------------*/
1825:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   tmpreg = huart->Instance->CR1;
 3750              		.loc 1 1825 0
 3751 14c6 7B68     		ldr	r3, [r7, #4]
 3752 14c8 1B68     		ldr	r3, [r3]
 3753 14ca DB68     		ldr	r3, [r3, #12]
 3754 14cc FB60     		str	r3, [r7, #12]
1826:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
1827:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* Clear M, PCE, PS, TE and RE bits */
1828:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 3755              		.loc 1 1828 0
 3756 14ce FB68     		ldr	r3, [r7, #12]
 3757 14d0 23F41643 		bic	r3, r3, #38400
 3758 14d4 23F00C03 		bic	r3, r3, #12
 3759 14d8 FB60     		str	r3, [r7, #12]
1829:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****                                    USART_CR1_RE | USART_CR1_OVER8));
1830:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** 
1831:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* Configure the UART Word Length, Parity and mode: 
1832:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****      Set the M bits according to huart->Init.WordLength value 
1833:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****      Set PCE and PS bits according to huart->Init.Parity value
1834:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****      Set TE and RE bits according to huart->Init.Mode value
1835:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****      Set OVER8 bit according to huart->Init.OverSampling value */
1836:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.
 3760              		.loc 1 1836 0
 3761 14da 7B68     		ldr	r3, [r7, #4]
 3762 14dc 9A68     		ldr	r2, [r3, #8]
 3763 14de 7B68     		ldr	r3, [r7, #4]
 3764 14e0 1B69     		ldr	r3, [r3, #16]
 3765 14e2 1A43     		orrs	r2, r2, r3
 3766 14e4 7B68     		ldr	r3, [r7, #4]
 3767 14e6 5B69     		ldr	r3, [r3, #20]
 3768 14e8 1A43     		orrs	r2, r2, r3
 3769 14ea 7B68     		ldr	r3, [r7, #4]
 3770 14ec DB69     		ldr	r3, [r3, #28]
 3771 14ee 1343     		orrs	r3, r3, r2
 3772 14f0 FA68     		ldr	r2, [r7, #12]
 3773 14f2 1343     		orrs	r3, r3, r2
 3774 14f4 FB60     		str	r3, [r7, #12]
1837:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
1838:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* Write to USART CR1 */
1839:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   huart->Instance->CR1 = (uint32_t)tmpreg;
 3775              		.loc 1 1839 0
 3776 14f6 7B68     		ldr	r3, [r7, #4]
 3777 14f8 1B68     		ldr	r3, [r3]
 3778 14fa FA68     		ldr	r2, [r7, #12]
 3779 14fc DA60     		str	r2, [r3, #12]
1840:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
1841:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /*-------------------------- USART CR3 Configuration -----------------------*/  
1842:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   tmpreg = huart->Instance->CR3;
 3780              		.loc 1 1842 0
 3781 14fe 7B68     		ldr	r3, [r7, #4]
 3782 1500 1B68     		ldr	r3, [r3]
 3783 1502 5B69     		ldr	r3, [r3, #20]
 3784 1504 FB60     		str	r3, [r7, #12]
1843:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
1844:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* Clear CTSE and RTSE bits */
1845:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 3785              		.loc 1 1845 0
 3786 1506 FB68     		ldr	r3, [r7, #12]
 3787 1508 23F44073 		bic	r3, r3, #768
 3788 150c FB60     		str	r3, [r7, #12]
1846:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
1847:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
1848:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   tmpreg |= huart->Init.HwFlowCtl;
 3789              		.loc 1 1848 0
 3790 150e 7B68     		ldr	r3, [r7, #4]
 3791 1510 9B69     		ldr	r3, [r3, #24]
 3792 1512 FA68     		ldr	r2, [r7, #12]
 3793 1514 1343     		orrs	r3, r3, r2
 3794 1516 FB60     		str	r3, [r7, #12]
1849:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
1850:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* Write to USART CR3 */
1851:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   huart->Instance->CR3 = (uint32_t)tmpreg;
 3795              		.loc 1 1851 0
 3796 1518 7B68     		ldr	r3, [r7, #4]
 3797 151a 1B68     		ldr	r3, [r3]
 3798 151c FA68     		ldr	r2, [r7, #12]
 3799 151e 5A61     		str	r2, [r3, #20]
1852:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   
1853:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   /* Check the Over Sampling */
1854:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 3800              		.loc 1 1854 0
 3801 1520 7B68     		ldr	r3, [r7, #4]
 3802 1522 DB69     		ldr	r3, [r3, #28]
 3803 1524 B3F5004F 		cmp	r3, #32768
 3804 1528 40F0A680 		bne	.L192
1855:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   {
1856:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     /*-------------------------- USART BRR Configuration ---------------------*/
1857:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     if((huart->Instance == USART1) || (huart->Instance == USART6))
 3805              		.loc 1 1857 0
 3806 152c 7B68     		ldr	r3, [r7, #4]
 3807 152e 1A68     		ldr	r2, [r3]
 3808 1530 4FF48053 		mov	r3, #4096
 3809 1534 C4F20103 		movt	r3, 16385
 3810 1538 9A42     		cmp	r2, r3
 3811 153a 07D0     		beq	.L193
 3812              		.loc 1 1857 0 is_stmt 0 discriminator 1
 3813 153c 7B68     		ldr	r3, [r7, #4]
 3814 153e 1A68     		ldr	r2, [r3]
 3815 1540 4FF4A053 		mov	r3, #5120
 3816 1544 C4F20103 		movt	r3, 16385
 3817 1548 9A42     		cmp	r2, r3
 3818 154a 4AD1     		bne	.L194
 3819              	.L193:
1858:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     {
1859:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       huart->Instance->BRR = __UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 3820              		.loc 1 1859 0 is_stmt 1
 3821 154c 7B68     		ldr	r3, [r7, #4]
 3822 154e 1C68     		ldr	r4, [r3]
 3823 1550 FFF7FEFF 		bl	HAL_RCC_GetPCLK2Freq
 3824 1554 0246     		mov	r2, r0
 3825 1556 1346     		mov	r3, r2
 3826 1558 9B00     		lsls	r3, r3, #2
 3827 155a 1344     		add	r3, r3, r2
 3828 155c 9A00     		lsls	r2, r3, #2
 3829 155e 1A44     		add	r2, r2, r3
 3830 1560 7B68     		ldr	r3, [r7, #4]
 3831 1562 5B68     		ldr	r3, [r3, #4]
 3832 1564 5B00     		lsls	r3, r3, #1
 3833 1566 B2FBF3F2 		udiv	r2, r2, r3
 3834 156a 48F21F53 		movw	r3, #34079
 3835 156e C5F2EB13 		movt	r3, 20971
 3836 1572 A3FB0213 		umull	r1, r3, r3, r2
 3837 1576 5B09     		lsrs	r3, r3, #5
 3838 1578 1D01     		lsls	r5, r3, #4
 3839 157a FFF7FEFF 		bl	HAL_RCC_GetPCLK2Freq
 3840 157e 0246     		mov	r2, r0
 3841 1580 1346     		mov	r3, r2
 3842 1582 9B00     		lsls	r3, r3, #2
 3843 1584 1344     		add	r3, r3, r2
 3844 1586 9A00     		lsls	r2, r3, #2
 3845 1588 1A44     		add	r2, r2, r3
 3846 158a 7B68     		ldr	r3, [r7, #4]
 3847 158c 5B68     		ldr	r3, [r3, #4]
 3848 158e 5B00     		lsls	r3, r3, #1
 3849 1590 B2FBF3F6 		udiv	r6, r2, r3
 3850 1594 FFF7FEFF 		bl	HAL_RCC_GetPCLK2Freq
 3851 1598 0246     		mov	r2, r0
 3852 159a 1346     		mov	r3, r2
 3853 159c 9B00     		lsls	r3, r3, #2
 3854 159e 1344     		add	r3, r3, r2
 3855 15a0 9A00     		lsls	r2, r3, #2
 3856 15a2 1A44     		add	r2, r2, r3
 3857 15a4 7B68     		ldr	r3, [r7, #4]
 3858 15a6 5B68     		ldr	r3, [r3, #4]
 3859 15a8 5B00     		lsls	r3, r3, #1
 3860 15aa B2FBF3F2 		udiv	r2, r2, r3
 3861 15ae 48F21F53 		movw	r3, #34079
 3862 15b2 C5F2EB13 		movt	r3, 20971
 3863 15b6 A3FB0213 		umull	r1, r3, r3, r2
 3864 15ba 5B09     		lsrs	r3, r3, #5
 3865 15bc 6422     		movs	r2, #100
 3866 15be 02FB03F3 		mul	r3, r2, r3
 3867 15c2 F31A     		subs	r3, r6, r3
 3868 15c4 1B01     		lsls	r3, r3, #4
 3869 15c6 03F13202 		add	r2, r3, #50
 3870 15ca 48F21F53 		movw	r3, #34079
 3871 15ce C5F2EB13 		movt	r3, 20971
 3872 15d2 A3FB0213 		umull	r1, r3, r3, r2
 3873 15d6 5B09     		lsrs	r3, r3, #5
 3874 15d8 03F00F03 		and	r3, r3, #15
 3875 15dc 2B43     		orrs	r3, r3, r5
 3876 15de A360     		str	r3, [r4, #8]
 3877 15e0 EFE0     		b	.L191
 3878              	.L194:
1860:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     }
1861:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     else
1862:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     {
1863:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       huart->Instance->BRR = __UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 3879              		.loc 1 1863 0
 3880 15e2 7B68     		ldr	r3, [r7, #4]
 3881 15e4 1C68     		ldr	r4, [r3]
 3882 15e6 FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq
 3883 15ea 0246     		mov	r2, r0
 3884 15ec 1346     		mov	r3, r2
 3885 15ee 9B00     		lsls	r3, r3, #2
 3886 15f0 1344     		add	r3, r3, r2
 3887 15f2 9A00     		lsls	r2, r3, #2
 3888 15f4 1A44     		add	r2, r2, r3
 3889 15f6 7B68     		ldr	r3, [r7, #4]
 3890 15f8 5B68     		ldr	r3, [r3, #4]
 3891 15fa 5B00     		lsls	r3, r3, #1
 3892 15fc B2FBF3F2 		udiv	r2, r2, r3
 3893 1600 48F21F53 		movw	r3, #34079
 3894 1604 C5F2EB13 		movt	r3, 20971
 3895 1608 A3FB0213 		umull	r1, r3, r3, r2
 3896 160c 5B09     		lsrs	r3, r3, #5
 3897 160e 1D01     		lsls	r5, r3, #4
 3898 1610 FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq
 3899 1614 0246     		mov	r2, r0
 3900 1616 1346     		mov	r3, r2
 3901 1618 9B00     		lsls	r3, r3, #2
 3902 161a 1344     		add	r3, r3, r2
 3903 161c 9A00     		lsls	r2, r3, #2
 3904 161e 1A44     		add	r2, r2, r3
 3905 1620 7B68     		ldr	r3, [r7, #4]
 3906 1622 5B68     		ldr	r3, [r3, #4]
 3907 1624 5B00     		lsls	r3, r3, #1
 3908 1626 B2FBF3F6 		udiv	r6, r2, r3
 3909 162a FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq
 3910 162e 0246     		mov	r2, r0
 3911 1630 1346     		mov	r3, r2
 3912 1632 9B00     		lsls	r3, r3, #2
 3913 1634 1344     		add	r3, r3, r2
 3914 1636 9A00     		lsls	r2, r3, #2
 3915 1638 1A44     		add	r2, r2, r3
 3916 163a 7B68     		ldr	r3, [r7, #4]
 3917 163c 5B68     		ldr	r3, [r3, #4]
 3918 163e 5B00     		lsls	r3, r3, #1
 3919 1640 B2FBF3F2 		udiv	r2, r2, r3
 3920 1644 48F21F53 		movw	r3, #34079
 3921 1648 C5F2EB13 		movt	r3, 20971
 3922 164c A3FB0213 		umull	r1, r3, r3, r2
 3923 1650 5B09     		lsrs	r3, r3, #5
 3924 1652 6422     		movs	r2, #100
 3925 1654 02FB03F3 		mul	r3, r2, r3
 3926 1658 F31A     		subs	r3, r6, r3
 3927 165a 1B01     		lsls	r3, r3, #4
 3928 165c 03F13202 		add	r2, r3, #50
 3929 1660 48F21F53 		movw	r3, #34079
 3930 1664 C5F2EB13 		movt	r3, 20971
 3931 1668 A3FB0213 		umull	r1, r3, r3, r2
 3932 166c 5B09     		lsrs	r3, r3, #5
 3933 166e 03F00F03 		and	r3, r3, #15
 3934 1672 2B43     		orrs	r3, r3, r5
 3935 1674 A360     		str	r3, [r4, #8]
 3936 1676 A4E0     		b	.L191
 3937              	.L192:
1864:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     }
1865:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   }
1866:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   else
1867:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   {
1868:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     /*-------------------------- USART BRR Configuration ---------------------*/
1869:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     if((huart->Instance == USART1) || (huart->Instance == USART6))
 3938              		.loc 1 1869 0
 3939 1678 7B68     		ldr	r3, [r7, #4]
 3940 167a 1A68     		ldr	r2, [r3]
 3941 167c 4FF48053 		mov	r3, #4096
 3942 1680 C4F20103 		movt	r3, 16385
 3943 1684 9A42     		cmp	r2, r3
 3944 1686 07D0     		beq	.L197
 3945              		.loc 1 1869 0 is_stmt 0 discriminator 1
 3946 1688 7B68     		ldr	r3, [r7, #4]
 3947 168a 1A68     		ldr	r2, [r3]
 3948 168c 4FF4A053 		mov	r3, #5120
 3949 1690 C4F20103 		movt	r3, 16385
 3950 1694 9A42     		cmp	r2, r3
 3951 1696 4AD1     		bne	.L198
 3952              	.L197:
1870:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     {
1871:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       huart->Instance->BRR = __UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 3953              		.loc 1 1871 0 is_stmt 1
 3954 1698 7B68     		ldr	r3, [r7, #4]
 3955 169a 1C68     		ldr	r4, [r3]
 3956 169c FFF7FEFF 		bl	HAL_RCC_GetPCLK2Freq
 3957 16a0 0246     		mov	r2, r0
 3958 16a2 1346     		mov	r3, r2
 3959 16a4 9B00     		lsls	r3, r3, #2
 3960 16a6 1344     		add	r3, r3, r2
 3961 16a8 9A00     		lsls	r2, r3, #2
 3962 16aa 1A44     		add	r2, r2, r3
 3963 16ac 7B68     		ldr	r3, [r7, #4]
 3964 16ae 5B68     		ldr	r3, [r3, #4]
 3965 16b0 9B00     		lsls	r3, r3, #2
 3966 16b2 B2FBF3F2 		udiv	r2, r2, r3
 3967 16b6 48F21F53 		movw	r3, #34079
 3968 16ba C5F2EB13 		movt	r3, 20971
 3969 16be A3FB0213 		umull	r1, r3, r3, r2
 3970 16c2 5B09     		lsrs	r3, r3, #5
 3971 16c4 1D01     		lsls	r5, r3, #4
 3972 16c6 FFF7FEFF 		bl	HAL_RCC_GetPCLK2Freq
 3973 16ca 0246     		mov	r2, r0
 3974 16cc 1346     		mov	r3, r2
 3975 16ce 9B00     		lsls	r3, r3, #2
 3976 16d0 1344     		add	r3, r3, r2
 3977 16d2 9A00     		lsls	r2, r3, #2
 3978 16d4 1A44     		add	r2, r2, r3
 3979 16d6 7B68     		ldr	r3, [r7, #4]
 3980 16d8 5B68     		ldr	r3, [r3, #4]
 3981 16da 9B00     		lsls	r3, r3, #2
 3982 16dc B2FBF3F6 		udiv	r6, r2, r3
 3983 16e0 FFF7FEFF 		bl	HAL_RCC_GetPCLK2Freq
 3984 16e4 0246     		mov	r2, r0
 3985 16e6 1346     		mov	r3, r2
 3986 16e8 9B00     		lsls	r3, r3, #2
 3987 16ea 1344     		add	r3, r3, r2
 3988 16ec 9A00     		lsls	r2, r3, #2
 3989 16ee 1A44     		add	r2, r2, r3
 3990 16f0 7B68     		ldr	r3, [r7, #4]
 3991 16f2 5B68     		ldr	r3, [r3, #4]
 3992 16f4 9B00     		lsls	r3, r3, #2
 3993 16f6 B2FBF3F2 		udiv	r2, r2, r3
 3994 16fa 48F21F53 		movw	r3, #34079
 3995 16fe C5F2EB13 		movt	r3, 20971
 3996 1702 A3FB0213 		umull	r1, r3, r3, r2
 3997 1706 5B09     		lsrs	r3, r3, #5
 3998 1708 6422     		movs	r2, #100
 3999 170a 02FB03F3 		mul	r3, r2, r3
 4000 170e F31A     		subs	r3, r6, r3
 4001 1710 1B01     		lsls	r3, r3, #4
 4002 1712 03F13202 		add	r2, r3, #50
 4003 1716 48F21F53 		movw	r3, #34079
 4004 171a C5F2EB13 		movt	r3, 20971
 4005 171e A3FB0213 		umull	r1, r3, r3, r2
 4006 1722 5B09     		lsrs	r3, r3, #5
 4007 1724 03F00F03 		and	r3, r3, #15
 4008 1728 2B43     		orrs	r3, r3, r5
 4009 172a A360     		str	r3, [r4, #8]
 4010 172c 49E0     		b	.L191
 4011              	.L198:
1872:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     }
1873:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     else
1874:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     {
1875:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****       huart->Instance->BRR = __UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 4012              		.loc 1 1875 0
 4013 172e 7B68     		ldr	r3, [r7, #4]
 4014 1730 1C68     		ldr	r4, [r3]
 4015 1732 FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq
 4016 1736 0246     		mov	r2, r0
 4017 1738 1346     		mov	r3, r2
 4018 173a 9B00     		lsls	r3, r3, #2
 4019 173c 1344     		add	r3, r3, r2
 4020 173e 9A00     		lsls	r2, r3, #2
 4021 1740 1A44     		add	r2, r2, r3
 4022 1742 7B68     		ldr	r3, [r7, #4]
 4023 1744 5B68     		ldr	r3, [r3, #4]
 4024 1746 9B00     		lsls	r3, r3, #2
 4025 1748 B2FBF3F2 		udiv	r2, r2, r3
 4026 174c 48F21F53 		movw	r3, #34079
 4027 1750 C5F2EB13 		movt	r3, 20971
 4028 1754 A3FB0213 		umull	r1, r3, r3, r2
 4029 1758 5B09     		lsrs	r3, r3, #5
 4030 175a 1D01     		lsls	r5, r3, #4
 4031 175c FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq
 4032 1760 0246     		mov	r2, r0
 4033 1762 1346     		mov	r3, r2
 4034 1764 9B00     		lsls	r3, r3, #2
 4035 1766 1344     		add	r3, r3, r2
 4036 1768 9A00     		lsls	r2, r3, #2
 4037 176a 1A44     		add	r2, r2, r3
 4038 176c 7B68     		ldr	r3, [r7, #4]
 4039 176e 5B68     		ldr	r3, [r3, #4]
 4040 1770 9B00     		lsls	r3, r3, #2
 4041 1772 B2FBF3F6 		udiv	r6, r2, r3
 4042 1776 FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq
 4043 177a 0246     		mov	r2, r0
 4044 177c 1346     		mov	r3, r2
 4045 177e 9B00     		lsls	r3, r3, #2
 4046 1780 1344     		add	r3, r3, r2
 4047 1782 9A00     		lsls	r2, r3, #2
 4048 1784 1A44     		add	r2, r2, r3
 4049 1786 7B68     		ldr	r3, [r7, #4]
 4050 1788 5B68     		ldr	r3, [r3, #4]
 4051 178a 9B00     		lsls	r3, r3, #2
 4052 178c B2FBF3F2 		udiv	r2, r2, r3
 4053 1790 48F21F53 		movw	r3, #34079
 4054 1794 C5F2EB13 		movt	r3, 20971
 4055 1798 A3FB0213 		umull	r1, r3, r3, r2
 4056 179c 5B09     		lsrs	r3, r3, #5
 4057 179e 6422     		movs	r2, #100
 4058 17a0 02FB03F3 		mul	r3, r2, r3
 4059 17a4 F31A     		subs	r3, r6, r3
 4060 17a6 1B01     		lsls	r3, r3, #4
 4061 17a8 03F13202 		add	r2, r3, #50
 4062 17ac 48F21F53 		movw	r3, #34079
 4063 17b0 C5F2EB13 		movt	r3, 20971
 4064 17b4 A3FB0213 		umull	r1, r3, r3, r2
 4065 17b8 5B09     		lsrs	r3, r3, #5
 4066 17ba 03F00F03 		and	r3, r3, #15
 4067 17be 2B43     		orrs	r3, r3, r5
 4068 17c0 A360     		str	r3, [r4, #8]
 4069              	.L191:
1876:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****     }
1877:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c ****   }
1878:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_uart.c **** }
 4070              		.loc 1 1878 0
 4071 17c2 1437     		adds	r7, r7, #20
 4072 17c4 BD46     		mov	sp, r7
 4073              		@ sp needed
 4074 17c6 F0BD     		pop	{r4, r5, r6, r7, pc}
 4075              		.cfi_endproc
 4076              	.LFE92:
 4078              	.Letext0:
 4079              		.file 2 "c:\\program files (x86)\\codesourcery\\arm-none-eabi\\include\\stdint.h"
 4080              		.file 3 "D:\\workspace\\console800480\\system/stm32f217xx.h"
 4081              		.file 4 "D:\\workspace\\console800480\\system/stm32f2xx.h"
 4082              		.file 5 "D:\\workspace\\console800480\\STM32F2xx_HAL_Driver\\Inc/stm32f2xx_hal_def.h"
 4083              		.file 6 "D:\\workspace\\console800480\\STM32F2xx_HAL_Driver\\Inc/stm32f2xx_hal_dma.h"
 4084              		.file 7 "D:\\workspace\\console800480\\STM32F2xx_HAL_Driver\\Inc/stm32f2xx_hal_uart.h"
 4085              		.file 8 "D:\\workspace\\console800480\\system/core_cm3.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f2xx_hal_uart.c
C:\Users\sagok\AppData\Local\Temp\ccDUcMX7.s:18     .text:00000000 $t
C:\Users\sagok\AppData\Local\Temp\ccDUcMX7.s:23     .text:00000000 HAL_UART_Init
C:\Users\sagok\AppData\Local\Temp\ccDUcMX7.s:542    .text:00000300 HAL_UART_MspInit
C:\Users\sagok\AppData\Local\Temp\ccDUcMX7.s:3709   .text:00001498 UART_SetConfig
C:\Users\sagok\AppData\Local\Temp\ccDUcMX7.s:121    .text:0000008c HAL_HalfDuplex_Init
C:\Users\sagok\AppData\Local\Temp\ccDUcMX7.s:226    .text:00000128 HAL_LIN_Init
C:\Users\sagok\AppData\Local\Temp\ccDUcMX7.s:349    .text:000001e8 HAL_MultiProcessor_Init
C:\Users\sagok\AppData\Local\Temp\ccDUcMX7.s:483    .text:000002bc HAL_UART_DeInit
C:\Users\sagok\AppData\Local\Temp\ccDUcMX7.s:571    .text:00000314 HAL_UART_MspDeInit
C:\Users\sagok\AppData\Local\Temp\ccDUcMX7.s:600    .text:00000328 HAL_UART_Transmit
C:\Users\sagok\AppData\Local\Temp\ccDUcMX7.s:3124   .text:000010fc UART_WaitOnFlagUntilTimeout
C:\Users\sagok\AppData\Local\Temp\ccDUcMX7.s:828    .text:0000047c HAL_UART_Receive
C:\Users\sagok\AppData\Local\Temp\ccDUcMX7.s:1073   .text:000005f0 HAL_UART_Transmit_IT
C:\Users\sagok\AppData\Local\Temp\ccDUcMX7.s:1217   .text:000006c0 HAL_UART_Receive_IT
C:\Users\sagok\AppData\Local\Temp\ccDUcMX7.s:1361   .text:00000790 HAL_UART_Transmit_DMA
C:\Users\sagok\AppData\Local\Temp\ccDUcMX7.s:2857   .text:00000fbc UART_DMATransmitCplt
C:\Users\sagok\AppData\Local\Temp\ccDUcMX7.s:2939   .text:00001030 UART_DMATxHalfCplt
C:\Users\sagok\AppData\Local\Temp\ccDUcMX7.s:3070   .text:000010b8 UART_DMAError
C:\Users\sagok\AppData\Local\Temp\ccDUcMX7.s:1520   .text:00000884 HAL_UART_Receive_DMA
C:\Users\sagok\AppData\Local\Temp\ccDUcMX7.s:2973   .text:0000104c UART_DMAReceiveCplt
C:\Users\sagok\AppData\Local\Temp\ccDUcMX7.s:3036   .text:0000109c UART_DMARxHalfCplt
C:\Users\sagok\AppData\Local\Temp\ccDUcMX7.s:1675   .text:00000970 HAL_UART_DMAPause
C:\Users\sagok\AppData\Local\Temp\ccDUcMX7.s:1780   .text:00000a0c HAL_UART_DMAResume
C:\Users\sagok\AppData\Local\Temp\ccDUcMX7.s:1901   .text:00000ac8 HAL_UART_DMAStop
C:\Users\sagok\AppData\Local\Temp\ccDUcMX7.s:2000   .text:00000b54 HAL_UART_IRQHandler
C:\Users\sagok\AppData\Local\Temp\ccDUcMX7.s:3487   .text:00001338 UART_Receive_IT
C:\Users\sagok\AppData\Local\Temp\ccDUcMX7.s:3307   .text:00001224 UART_Transmit_IT
C:\Users\sagok\AppData\Local\Temp\ccDUcMX7.s:2405   .text:00000da4 HAL_UART_ErrorCallback
C:\Users\sagok\AppData\Local\Temp\ccDUcMX7.s:2289   .text:00000d54 HAL_UART_TxCpltCallback
C:\Users\sagok\AppData\Local\Temp\ccDUcMX7.s:2318   .text:00000d68 HAL_UART_TxHalfCpltCallback
C:\Users\sagok\AppData\Local\Temp\ccDUcMX7.s:2347   .text:00000d7c HAL_UART_RxCpltCallback
C:\Users\sagok\AppData\Local\Temp\ccDUcMX7.s:2376   .text:00000d90 HAL_UART_RxHalfCpltCallback
C:\Users\sagok\AppData\Local\Temp\ccDUcMX7.s:2434   .text:00000db8 HAL_LIN_SendBreak
C:\Users\sagok\AppData\Local\Temp\ccDUcMX7.s:2500   .text:00000e0c HAL_MultiProcessor_EnterMuteMode
C:\Users\sagok\AppData\Local\Temp\ccDUcMX7.s:2566   .text:00000e60 HAL_MultiProcessor_ExitMuteMode
C:\Users\sagok\AppData\Local\Temp\ccDUcMX7.s:2632   .text:00000eb4 HAL_HalfDuplex_EnableTransmitter
C:\Users\sagok\AppData\Local\Temp\ccDUcMX7.s:2711   .text:00000f1c HAL_HalfDuplex_EnableReceiver
C:\Users\sagok\AppData\Local\Temp\ccDUcMX7.s:2790   .text:00000f84 HAL_UART_GetState
C:\Users\sagok\AppData\Local\Temp\ccDUcMX7.s:2824   .text:00000fa0 HAL_UART_GetError
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.7f551ac7fcad8b79b9df4bfdaa536673
                           .group:00000000 wm4.stm32f2xx_hal_conf.h.40.007126baefb9f966c36646edbf8040d2
                           .group:00000000 wm4.stm32f2xx.h.57.5ec1581efc43612c411d33a8686e9ec7
                           .group:00000000 wm4.stm32f217xx.h.52.9c940d76d00294b78837dc334c172fdd
                           .group:00000000 wm4.core_cm3.h.32.49180ccb4d36cabd2d7016d2a51d91ae
                           .group:00000000 wm4.newlib.h.8.384a112feabb3bef7b573ae48cde2e3b
                           .group:00000000 wm4.features.h.22.6a4ca7cd053637cc1d0db6c16f39b2d7
                           .group:00000000 wm4.config.h.183.aa62afef667fb61d15fa64c48beb2f14
                           .group:00000000 wm4._ansi.h.23.5644b60c990a4800b02a6e654e88f93a
                           .group:00000000 wm4.stdint.h.20.54ad762faa59e3c05491630641c8d8bf
                           .group:00000000 wm4.core_cmInstr.h.25.f50f886f2edf670cf199b35fd96f5c91
                           .group:00000000 wm4.core_cm3.h.130.63ab2348a6eed0fdb318040d970b676c
                           .group:00000000 wm4.stm32f217xx.h.978.a5c681952b2f704a0e7f2ba21d08adf5
                           .group:00000000 wm4.stm32f2xx.h.142.bc2155a1f7498bab16371e38413a9e41
                           .group:00000000 wm4.stm32f2xx_hal_def.h.74.8ad2dc8aa82c4fd02e5aeaae592641ba
                           .group:00000000 wm4.stm32f2xx_hal_rcc.h.142.ec0f91cc6576a6acebd17e6dd85829ae
                           .group:00000000 wm4.stm32f2xx_hal_rcc_ex.h.40.0829033e864455c6bdd0db01f8ba5a50
                           .group:00000000 wm4.stm32f2xx_hal_gpio.h.40.ba64e0bb94d9a68835f80159f39a86f1
                           .group:00000000 wm4.stm32f2xx_hal_gpio_ex.h.40.24e547fd402281923f446b510381083f
                           .group:00000000 wm4.stm32f2xx_hal_dma.h.40.5d9732ace2a21a4526ce8f0c52428fff
                           .group:00000000 wm4.stm32f2xx_hal_cortex.h.40.e10263d2ec5d4fa79b4180ce1a38aff1
                           .group:00000000 wm4.stm32f2xx_hal_adc.h.40.89ac8b78113cac4cf63847587daabac9
                           .group:00000000 wm4.stm32f2xx_hal_adc_ex.h.40.7de68ed256ef25526ee31cc017f2c291
                           .group:00000000 wm4.stm32f2xx_hal_flash.h.40.c3171719ce015e9cff20c795e44e886d
                           .group:00000000 wm4.stm32f2xx_hal_flash_ex.h.40.7389508bd24a0aeb077bde0c9fb651eb
                           .group:00000000 wm4.stm32f2xx_ll_fsmc.h.40.c1c32f2e1862f4dd342bd9b80fb895bb
                           .group:00000000 wm4.stm32f2xx_hal_pwr.h.40.812df32e5c31b609a128e9db0eb4cbd0
                           .group:00000000 wm4.stm32f2xx_hal_rtc.h.40.850fda5fe2cce8797446913dee18382f
                           .group:00000000 wm4.stm32f2xx_hal_rtc_ex.h.40.f3e0c408e3bf4e8a0352d7ec9a18a822
                           .group:00000000 wm4.stm32f2xx_ll_sdmmc.h.40.3719ab487c4b77401c572f459adf6eb7
                           .group:00000000 wm4.stm32f2xx_hal_sd.h.58.760215394dcc316161a6482c0af9b866
                           .group:00000000 wm4.stm32f2xx_hal_spi.h.40.7984243dbaba8b21c6392998a47e6987
                           .group:00000000 wm4.stm32f2xx_hal_tim.h.40.d79172f25d0e9a15dc346aba8515bdd6
                           .group:00000000 wm4.stm32f2xx_hal_tim_ex.h.40.361f280a7a3f60b4b238bb99ca728d83
                           .group:00000000 wm4.stm32f2xx_hal_uart.h.40.d74def561ae6f78f40f477c8426ecbef
                           .group:00000000 wm4.stm32f2xx_ll_usb.h.40.9b0206a05bc6ce3bec1648b51f22cb81
                           .group:00000000 wm4.stm32f2xx_hal_pcd.h.99.11faba414c39e357b2f23364912d0605
                           .group:00000000 wm4.stm32f2xx_hal_hcd.h.40.44ee5e972983ae0139ddbacdc75c44ef
                           .group:00000000 wm4.stm32f2xx_hal.h.64.ed79ee83e52b151b3c365392b398f866
                           .group:00000000 wm4.LEDs.h.9.36ffa4b30bd168dc58d64fa6e53a9a30

UNDEFINED SYMBOLS
HAL_DMA_Start_IT
HAL_DMA_Abort
HAL_GetTick
HAL_RCC_GetPCLK2Freq
HAL_RCC_GetPCLK1Freq
