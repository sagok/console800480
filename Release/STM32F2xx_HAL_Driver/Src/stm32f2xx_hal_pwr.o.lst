   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f2xx_hal_pwr.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.align	2
  19              		.global	HAL_PWR_DeInit
  20              		.thumb
  21              		.thumb_func
  23              	HAL_PWR_DeInit:
  24              	.LFB55:
  25              		.file 1 "../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c"
   1:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /**
   2:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   ******************************************************************************
   3:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @file    stm32f2xx_hal_pwr.c
   4:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @author  MCD Application Team
   5:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @version V1.0.1
   6:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @date    25-March-2014
   7:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @brief   PWR HAL module driver.
   8:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *          This file provides firmware functions to manage the following 
   9:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *          functionalities of the Power Controller (PWR) peripheral:
  10:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *           + Initialization and de-initialization functions
  11:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *           + Peripheral Control functions 
  12:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *         
  13:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   ******************************************************************************
  14:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @attention
  15:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *
  16:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * <h2><center>&copy; COPYRIGHT(c) 2014 STMicroelectronics</center></h2>
  17:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *
  18:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * Redistribution and use in source and binary forms, with or without modification,
  19:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * are permitted provided that the following conditions are met:
  20:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  21:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *      this list of conditions and the following disclaimer.
  22:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  23:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *      this list of conditions and the following disclaimer in the documentation
  24:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *      and/or other materials provided with the distribution.
  25:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  26:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *      may be used to endorse or promote products derived from this software
  27:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *      without specific prior written permission.
  28:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *
  29:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  30:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  31:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  32:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  33:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  34:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  35:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  36:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  37:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  38:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  39:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *
  40:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   ******************************************************************************
  41:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   */ 
  42:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
  43:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /* Includes ------------------------------------------------------------------*/
  44:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** #include "stm32f2xx_hal.h"
  45:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
  46:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /** @addtogroup STM32F2xx_HAL_Driver
  47:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @{
  48:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   */
  49:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
  50:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /** @defgroup PWR 
  51:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @brief PWR HAL module driver
  52:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @{
  53:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   */
  54:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
  55:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** #ifdef HAL_PWR_MODULE_ENABLED
  56:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
  57:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /* Private typedef -----------------------------------------------------------*/
  58:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /* Private define ------------------------------------------------------------*/
  59:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /* Private macro -------------------------------------------------------------*/
  60:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /* Private variables ---------------------------------------------------------*/
  61:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /* Private function prototypes -----------------------------------------------*/
  62:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /* Private functions ---------------------------------------------------------*/
  63:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
  64:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /** @defgroup PWR_Private_Functions
  65:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @{
  66:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   */
  67:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
  68:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /** @defgroup PWR_Group1 Initialization and de-initialization functions 
  69:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *  @brief    Initialization and de-initialization functions
  70:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *
  71:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** @verbatim
  72:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****  ===============================================================================
  73:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****               ##### Initialization and de-initialization functions #####
  74:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****  ===============================================================================
  75:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     [..]
  76:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       After reset, the backup domain (RTC registers, RTC backup data 
  77:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       registers and backup SRAM) is protected against possible unwanted 
  78:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       write accesses. 
  79:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       To enable access to the RTC Domain and RTC registers, proceed as follows:
  80:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****         (+) Enable the Power Controller (PWR) APB1 interface clock using the
  81:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****             __PWR_CLK_ENABLE() macro.
  82:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****         (+) Enable access to RTC domain using the HAL_PWR_EnableBkUpAccess() function.
  83:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****  
  84:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** @endverbatim
  85:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @{
  86:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   */
  87:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
  88:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /**
  89:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @brief Deinitializes the HAL PWR peripheral registers to their default reset values.
  90:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @param None
  91:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @retval None
  92:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   */
  93:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** void HAL_PWR_DeInit(void)
  94:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** {
  26              		.loc 1 94 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 1, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31 0000 80B4     		push	{r7}
  32              		.cfi_def_cfa_offset 4
  33              		.cfi_offset 7, -4
  34 0002 00AF     		add	r7, sp, #0
  35              		.cfi_def_cfa_register 7
  95:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   __PWR_FORCE_RESET();
  36              		.loc 1 95 0
  37 0004 4FF46053 		mov	r3, #14336
  38 0008 C4F20203 		movt	r3, 16386
  39 000c 4FF46052 		mov	r2, #14336
  40 0010 C4F20202 		movt	r2, 16386
  41 0014 126A     		ldr	r2, [r2, #32]
  42 0016 42F08052 		orr	r2, r2, #268435456
  43 001a 1A62     		str	r2, [r3, #32]
  96:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   __PWR_RELEASE_RESET();
  44              		.loc 1 96 0
  45 001c 4FF46053 		mov	r3, #14336
  46 0020 C4F20203 		movt	r3, 16386
  47 0024 4FF46052 		mov	r2, #14336
  48 0028 C4F20202 		movt	r2, 16386
  49 002c 126A     		ldr	r2, [r2, #32]
  50 002e 22F08052 		bic	r2, r2, #268435456
  51 0032 1A62     		str	r2, [r3, #32]
  97:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** }
  52              		.loc 1 97 0
  53 0034 BD46     		mov	sp, r7
  54              		@ sp needed
  55 0036 5DF8047B 		ldr	r7, [sp], #4
  56 003a 7047     		bx	lr
  57              		.cfi_endproc
  58              	.LFE55:
  60              		.align	2
  61              		.global	HAL_PWR_EnableBkUpAccess
  62              		.thumb
  63              		.thumb_func
  65              	HAL_PWR_EnableBkUpAccess:
  66              	.LFB56:
  98:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
  99:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /**
 100:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @brief Enables access to the backup domain (RTC registers, RTC 
 101:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *         backup data registers and backup SRAM).
 102:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
 103:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *         Backup Domain Access should be kept enabled.
 104:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @param None
 105:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @retval None
 106:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   */
 107:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** void HAL_PWR_EnableBkUpAccess(void)
 108:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** {
  67              		.loc 1 108 0
  68              		.cfi_startproc
  69              		@ args = 0, pretend = 0, frame = 0
  70              		@ frame_needed = 1, uses_anonymous_args = 0
  71              		@ link register save eliminated.
  72 003c 80B4     		push	{r7}
  73              		.cfi_def_cfa_offset 4
  74              		.cfi_offset 7, -4
  75 003e 00AF     		add	r7, sp, #0
  76              		.cfi_def_cfa_register 7
 109:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
  77              		.loc 1 109 0
  78 0040 2023     		movs	r3, #32
  79 0042 C4F20E23 		movt	r3, 16910
  80 0046 0122     		movs	r2, #1
  81 0048 1A60     		str	r2, [r3]
 110:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** }
  82              		.loc 1 110 0
  83 004a BD46     		mov	sp, r7
  84              		@ sp needed
  85 004c 5DF8047B 		ldr	r7, [sp], #4
  86 0050 7047     		bx	lr
  87              		.cfi_endproc
  88              	.LFE56:
  90 0052 00BF     		.align	2
  91              		.global	HAL_PWR_DisableBkUpAccess
  92              		.thumb
  93              		.thumb_func
  95              	HAL_PWR_DisableBkUpAccess:
  96              	.LFB57:
 111:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 112:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /**
 113:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @brief Disables access to the backup domain (RTC registers, RTC 
 114:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *         backup data registers and backup SRAM).
 115:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
 116:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *         Backup Domain Access should be kept enabled.
 117:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @param None
 118:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @retval None
 119:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   */
 120:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** void HAL_PWR_DisableBkUpAccess(void)
 121:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** {
  97              		.loc 1 121 0
  98              		.cfi_startproc
  99              		@ args = 0, pretend = 0, frame = 0
 100              		@ frame_needed = 1, uses_anonymous_args = 0
 101              		@ link register save eliminated.
 102 0054 80B4     		push	{r7}
 103              		.cfi_def_cfa_offset 4
 104              		.cfi_offset 7, -4
 105 0056 00AF     		add	r7, sp, #0
 106              		.cfi_def_cfa_register 7
 122:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 107              		.loc 1 122 0
 108 0058 2023     		movs	r3, #32
 109 005a C4F20E23 		movt	r3, 16910
 110 005e 0022     		movs	r2, #0
 111 0060 1A60     		str	r2, [r3]
 123:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** }
 112              		.loc 1 123 0
 113 0062 BD46     		mov	sp, r7
 114              		@ sp needed
 115 0064 5DF8047B 		ldr	r7, [sp], #4
 116 0068 7047     		bx	lr
 117              		.cfi_endproc
 118              	.LFE57:
 120 006a 00BF     		.align	2
 121              		.global	HAL_PWR_PVDConfig
 122              		.thumb
 123              		.thumb_func
 125              	HAL_PWR_PVDConfig:
 126              	.LFB58:
 124:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 125:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /**
 126:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @}
 127:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   */
 128:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 129:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /** @defgroup PWR_Group2 Peripheral Control functions 
 130:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *  @brief Low Power modes configuration functions 
 131:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *
 132:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** @verbatim
 133:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 134:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****  ===============================================================================
 135:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****                  ##### Peripheral Control functions #####
 136:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****  ===============================================================================
 137:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****      
 138:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     *** PVD configuration ***
 139:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     =========================
 140:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     [..]
 141:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       (+) The PVD is used to monitor the VDD power supply by comparing it to a 
 142:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****           threshold selected by the PVD Level (PLS[2:0] bits in the PWR_CR).
 143:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       (+) A PVDO flag is available to indicate if VDD/VDDA is higher or lower 
 144:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****           than the PVD threshold. This event is internally connected to the EXTI 
 145:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****           line16 and can generate an interrupt if enabled. This is done through
 146:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****           __HAL_PVD_EXTI_ENABLE_IT() macro.
 147:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       (+) The PVD is stopped in Standby mode.
 148:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 149:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     *** WakeUp pin configuration ***
 150:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     ================================
 151:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     [..]
 152:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       (+) WakeUp pin is used to wake up the system from Standby mode. This pin is 
 153:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****           forced in input pull-down configuration and is active on rising edges.
 154:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       (+) There is only one WakeUp pin: WakeUp Pin 1 on PA.00.
 155:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 156:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     *** Low Power modes configuration ***
 157:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     =====================================
 158:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     [..]
 159:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       The devices feature 3 low-power modes:
 160:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       (+) Sleep mode: Cortex-M3 core stopped, peripherals kept running.
 161:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       (+) Stop mode: all clocks are stopped, regulator running, regulator 
 162:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****           in low power mode
 163:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       (+) Standby mode: 1.2V domain powered off.
 164:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****    
 165:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****    *** Sleep mode ***
 166:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****    ==================
 167:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     [..]
 168:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       (+) Entry:
 169:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****         The Sleep mode is entered by using the HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLE
 170:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****               functions with
 171:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****           (++) PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
 172:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****           (++) PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
 173:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       
 174:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       -@@- The Regulator parameter is not used for the STM32F2 family 
 175:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****               and is kept as parameter just to maintain compatibility with the 
 176:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****               lower power families (STM32L).
 177:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       (+) Exit:
 178:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****         Any peripheral interrupt acknowledged by the nested vectored interrupt 
 179:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****               controller (NVIC) can wake up the device from Sleep mode.
 180:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 181:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****    *** Stop mode ***
 182:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****    =================
 183:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     [..]
 184:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       In Stop mode, all clocks in the 1.2V domain are stopped, the PLL, the HSI,
 185:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       and the HSE RC oscillators are disabled. Internal SRAM and register contents 
 186:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       are preserved.
 187:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       The voltage regulator can be configured either in normal or low-power mode.
 188:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       To minimize the consumption In Stop mode, FLASH can be powered off before 
 189:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       entering the Stop mode using the HAL_PWR_EnableFlashPowerDown() function.
 190:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       It can be switched on again by software after exiting the Stop mode using
 191:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       the HAL_PWR_DisableFlashPowerDown() function. 
 192:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 193:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       (+) Entry:
 194:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****          The Stop mode is entered using the HAL_PWR_EnterSTOPMode(PWR_MAINREGULATOR_ON) 
 195:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****              function with:
 196:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****           (++) Main regulator ON.
 197:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****           (++) Low Power regulator ON.
 198:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       (+) Exit:
 199:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****         Any EXTI Line (Internal or External) configured in Interrupt/Event mode.
 200:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 201:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****    *** Standby mode ***
 202:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****    ====================
 203:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     [..]
 204:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     (+)
 205:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       The Standby mode allows to achieve the lowest power consumption. It is based 
 206:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       on the Cortex-M3 deep sleep mode, with the voltage regulator disabled. 
 207:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       The 1.2V domain is consequently powered off. The PLL, the HSI oscillator and 
 208:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       the HSE oscillator are also switched off. SRAM and register contents are lost 
 209:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       except for the RTC registers, RTC backup registers, backup SRAM and Standby 
 210:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       circuitry.
 211:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****    
 212:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       The voltage regulator is OFF.
 213:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       
 214:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       (++) Entry:
 215:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****         (+++) The Standby mode is entered using the HAL_PWR_EnterSTANDBYMode() function.
 216:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       (++) Exit:
 217:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****         (+++) WKUP pin rising edge, RTC alarm (Alarm A and Alarm B), RTC wakeup,
 218:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****              tamper event, time-stamp event, external reset in NRST pin, IWDG reset.
 219:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 220:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****    *** Auto-wakeup (AWU) from low-power mode ***
 221:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****    =============================================
 222:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     [..]
 223:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     
 224:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****      (+) The MCU can be woken up from low-power mode by an RTC Alarm event, an RTC 
 225:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       Wakeup event, a tamper event or a time-stamp event, without depending on 
 226:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       an external interrupt (Auto-wakeup mode).
 227:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 228:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       (+) RTC auto-wakeup (AWU) from the Stop and Standby modes
 229:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****        
 230:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****         (++) To wake up from the Stop mode with an RTC alarm event, it is necessary to 
 231:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****               configure the RTC to generate the RTC alarm using the HAL_RTC_SetAlarm_IT() function.
 232:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 233:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****         (++) To wake up from the Stop mode with an RTC Tamper or time stamp event, it 
 234:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****              is necessary to configure the RTC to detect the tamper or time stamp event using the
 235:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****                 HAL_RTCEx_SetTimeStamp_IT() or HAL_RTCEx_SetTamper_IT() functions.
 236:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****                   
 237:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****         (++) To wake up from the Stop mode with an RTC WakeUp event, it is necessary to
 238:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****               configure the RTC to generate the RTC WakeUp event using the HAL_RTCEx_SetWakeUpTimer
 239:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 240:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** @endverbatim
 241:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @{
 242:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   */
 243:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 244:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /**
 245:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @brief Configures the voltage threshold detected by the Power Voltage Detector(PVD).
 246:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @param sConfigPVD: pointer to an PWR_PVDTypeDef structure that contains the configuration
 247:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *        information for the PVD.
 248:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @note Refer to the electrical characteristics of your device datasheet for
 249:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *         more details about the voltage threshold corresponding to each 
 250:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *         detection level.
 251:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @retval None
 252:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   */
 253:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** void HAL_PWR_PVDConfig(PWR_PVDTypeDef *sConfigPVD)
 254:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** {
 127              		.loc 1 254 0
 128              		.cfi_startproc
 129              		@ args = 0, pretend = 0, frame = 16
 130              		@ frame_needed = 1, uses_anonymous_args = 0
 131              		@ link register save eliminated.
 132 006c 80B4     		push	{r7}
 133              		.cfi_def_cfa_offset 4
 134              		.cfi_offset 7, -4
 135 006e 85B0     		sub	sp, sp, #20
 136              		.cfi_def_cfa_offset 24
 137 0070 00AF     		add	r7, sp, #0
 138              		.cfi_def_cfa_register 7
 139 0072 7860     		str	r0, [r7, #4]
 255:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   uint32_t tmpreg = 0;
 140              		.loc 1 255 0
 141 0074 0023     		movs	r3, #0
 142 0076 FB60     		str	r3, [r7, #12]
 256:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 257:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Check the parameters */
 258:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
 259:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));
 260:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   
 261:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   tmpreg = PWR->CR;
 143              		.loc 1 261 0
 144 0078 4FF4E043 		mov	r3, #28672
 145 007c C4F20003 		movt	r3, 16384
 146 0080 1B68     		ldr	r3, [r3]
 147 0082 FB60     		str	r3, [r7, #12]
 262:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   
 263:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Clear PLS[7:5] bits */
 264:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   tmpreg &= ~ (uint32_t)PWR_CR_PLS;
 148              		.loc 1 264 0
 149 0084 FB68     		ldr	r3, [r7, #12]
 150 0086 23F0E003 		bic	r3, r3, #224
 151 008a FB60     		str	r3, [r7, #12]
 265:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   
 266:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Set PLS[7:5] bits according to PVDLevel value */
 267:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   tmpreg |= sConfigPVD->PVDLevel;
 152              		.loc 1 267 0
 153 008c 7B68     		ldr	r3, [r7, #4]
 154 008e 1B68     		ldr	r3, [r3]
 155 0090 FA68     		ldr	r2, [r7, #12]
 156 0092 1343     		orrs	r3, r3, r2
 157 0094 FB60     		str	r3, [r7, #12]
 268:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   
 269:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Store the new value */
 270:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   PWR->CR = tmpreg;
 158              		.loc 1 270 0
 159 0096 4FF4E043 		mov	r3, #28672
 160 009a C4F20003 		movt	r3, 16384
 161 009e FA68     		ldr	r2, [r7, #12]
 162 00a0 1A60     		str	r2, [r3]
 271:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   
 272:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Configure the EXTI 16 interrupt */
 273:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   if((sConfigPVD->Mode == PWR_MODE_IT_RISING_FALLING) ||\
 163              		.loc 1 273 0
 164 00a2 7B68     		ldr	r3, [r7, #4]
 165 00a4 5B68     		ldr	r3, [r3, #4]
 166 00a6 032B     		cmp	r3, #3
 167 00a8 07D0     		beq	.L5
 274:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****      (sConfigPVD->Mode == PWR_MODE_IT_FALLING) ||\
 168              		.loc 1 274 0 discriminator 1
 169 00aa 7B68     		ldr	r3, [r7, #4]
 170 00ac 5B68     		ldr	r3, [r3, #4]
 273:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****      (sConfigPVD->Mode == PWR_MODE_IT_FALLING) ||\
 171              		.loc 1 273 0 discriminator 1
 172 00ae 022B     		cmp	r3, #2
 173 00b0 03D0     		beq	.L5
 275:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****      (sConfigPVD->Mode == PWR_MODE_IT_RISING)) 
 174              		.loc 1 275 0
 175 00b2 7B68     		ldr	r3, [r7, #4]
 176 00b4 5B68     		ldr	r3, [r3, #4]
 274:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****      (sConfigPVD->Mode == PWR_MODE_IT_FALLING) ||\
 177              		.loc 1 274 0
 178 00b6 012B     		cmp	r3, #1
 179 00b8 0BD1     		bne	.L6
 180              	.L5:
 276:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   {
 277:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     __HAL_PVD_EXTI_ENABLE_IT(PWR_EXTI_LINE_PVD);
 181              		.loc 1 277 0
 182 00ba 4FF47053 		mov	r3, #15360
 183 00be C4F20103 		movt	r3, 16385
 184 00c2 4FF47052 		mov	r2, #15360
 185 00c6 C4F20102 		movt	r2, 16385
 186 00ca 1268     		ldr	r2, [r2]
 187 00cc 42F48032 		orr	r2, r2, #65536
 188 00d0 1A60     		str	r2, [r3]
 189              	.L6:
 278:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   }
 279:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Clear the edge trigger  for the EXTI Line 16 (PVD) */
 280:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   EXTI->RTSR &= ~EXTI_RTSR_TR16;
 190              		.loc 1 280 0
 191 00d2 4FF47053 		mov	r3, #15360
 192 00d6 C4F20103 		movt	r3, 16385
 193 00da 4FF47052 		mov	r2, #15360
 194 00de C4F20102 		movt	r2, 16385
 195 00e2 9268     		ldr	r2, [r2, #8]
 196 00e4 22F48032 		bic	r2, r2, #65536
 197 00e8 9A60     		str	r2, [r3, #8]
 281:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   EXTI->FTSR &= ~EXTI_FTSR_TR16;  
 198              		.loc 1 281 0
 199 00ea 4FF47053 		mov	r3, #15360
 200 00ee C4F20103 		movt	r3, 16385
 201 00f2 4FF47052 		mov	r2, #15360
 202 00f6 C4F20102 		movt	r2, 16385
 203 00fa D268     		ldr	r2, [r2, #12]
 204 00fc 22F48032 		bic	r2, r2, #65536
 205 0100 DA60     		str	r2, [r3, #12]
 282:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Configure the rising edge */
 283:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   if((sConfigPVD->Mode == PWR_MODE_IT_RISING_FALLING) ||\
 206              		.loc 1 283 0
 207 0102 7B68     		ldr	r3, [r7, #4]
 208 0104 5B68     		ldr	r3, [r3, #4]
 209 0106 032B     		cmp	r3, #3
 210 0108 03D0     		beq	.L7
 284:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****      (sConfigPVD->Mode == PWR_MODE_IT_RISING))
 211              		.loc 1 284 0 discriminator 1
 212 010a 7B68     		ldr	r3, [r7, #4]
 213 010c 5B68     		ldr	r3, [r3, #4]
 283:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****      (sConfigPVD->Mode == PWR_MODE_IT_RISING))
 214              		.loc 1 283 0 discriminator 1
 215 010e 012B     		cmp	r3, #1
 216 0110 0BD1     		bne	.L8
 217              	.L7:
 285:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   {
 286:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     EXTI->RTSR |= PWR_EXTI_LINE_PVD;
 218              		.loc 1 286 0
 219 0112 4FF47053 		mov	r3, #15360
 220 0116 C4F20103 		movt	r3, 16385
 221 011a 4FF47052 		mov	r2, #15360
 222 011e C4F20102 		movt	r2, 16385
 223 0122 9268     		ldr	r2, [r2, #8]
 224 0124 42F48032 		orr	r2, r2, #65536
 225 0128 9A60     		str	r2, [r3, #8]
 226              	.L8:
 287:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   }
 288:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Configure the falling edge */
 289:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   if((sConfigPVD->Mode == PWR_MODE_IT_RISING_FALLING) ||\
 227              		.loc 1 289 0
 228 012a 7B68     		ldr	r3, [r7, #4]
 229 012c 5B68     		ldr	r3, [r3, #4]
 230 012e 032B     		cmp	r3, #3
 231 0130 03D0     		beq	.L9
 290:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****      (sConfigPVD->Mode == PWR_MODE_IT_FALLING))
 232              		.loc 1 290 0 discriminator 1
 233 0132 7B68     		ldr	r3, [r7, #4]
 234 0134 5B68     		ldr	r3, [r3, #4]
 289:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****      (sConfigPVD->Mode == PWR_MODE_IT_FALLING))
 235              		.loc 1 289 0 discriminator 1
 236 0136 022B     		cmp	r3, #2
 237 0138 0BD1     		bne	.L4
 238              	.L9:
 291:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   {
 292:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     EXTI->FTSR |= PWR_EXTI_LINE_PVD;
 239              		.loc 1 292 0
 240 013a 4FF47053 		mov	r3, #15360
 241 013e C4F20103 		movt	r3, 16385
 242 0142 4FF47052 		mov	r2, #15360
 243 0146 C4F20102 		movt	r2, 16385
 244 014a D268     		ldr	r2, [r2, #12]
 245 014c 42F48032 		orr	r2, r2, #65536
 246 0150 DA60     		str	r2, [r3, #12]
 247              	.L4:
 293:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   }
 294:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** }
 248              		.loc 1 294 0
 249 0152 1437     		adds	r7, r7, #20
 250 0154 BD46     		mov	sp, r7
 251              		@ sp needed
 252 0156 5DF8047B 		ldr	r7, [sp], #4
 253 015a 7047     		bx	lr
 254              		.cfi_endproc
 255              	.LFE58:
 257              		.align	2
 258              		.global	HAL_PWR_EnablePVD
 259              		.thumb
 260              		.thumb_func
 262              	HAL_PWR_EnablePVD:
 263              	.LFB59:
 295:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 296:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /**
 297:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @brief Enables the Power Voltage Detector(PVD).
 298:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @param None
 299:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @retval None
 300:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   */
 301:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** void HAL_PWR_EnablePVD(void)
 302:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** {
 264              		.loc 1 302 0
 265              		.cfi_startproc
 266              		@ args = 0, pretend = 0, frame = 0
 267              		@ frame_needed = 1, uses_anonymous_args = 0
 268              		@ link register save eliminated.
 269 015c 80B4     		push	{r7}
 270              		.cfi_def_cfa_offset 4
 271              		.cfi_offset 7, -4
 272 015e 00AF     		add	r7, sp, #0
 273              		.cfi_def_cfa_register 7
 303:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)ENABLE;
 274              		.loc 1 303 0
 275 0160 1023     		movs	r3, #16
 276 0162 C4F20E23 		movt	r3, 16910
 277 0166 0122     		movs	r2, #1
 278 0168 1A60     		str	r2, [r3]
 304:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** }
 279              		.loc 1 304 0
 280 016a BD46     		mov	sp, r7
 281              		@ sp needed
 282 016c 5DF8047B 		ldr	r7, [sp], #4
 283 0170 7047     		bx	lr
 284              		.cfi_endproc
 285              	.LFE59:
 287 0172 00BF     		.align	2
 288              		.global	HAL_PWR_DisablePVD
 289              		.thumb
 290              		.thumb_func
 292              	HAL_PWR_DisablePVD:
 293              	.LFB60:
 305:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 306:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /**
 307:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @brief Disables the Power Voltage Detector(PVD).
 308:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @param None
 309:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @retval None
 310:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   */
 311:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** void HAL_PWR_DisablePVD(void)
 312:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** {
 294              		.loc 1 312 0
 295              		.cfi_startproc
 296              		@ args = 0, pretend = 0, frame = 0
 297              		@ frame_needed = 1, uses_anonymous_args = 0
 298              		@ link register save eliminated.
 299 0174 80B4     		push	{r7}
 300              		.cfi_def_cfa_offset 4
 301              		.cfi_offset 7, -4
 302 0176 00AF     		add	r7, sp, #0
 303              		.cfi_def_cfa_register 7
 313:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)DISABLE;
 304              		.loc 1 313 0
 305 0178 1023     		movs	r3, #16
 306 017a C4F20E23 		movt	r3, 16910
 307 017e 0022     		movs	r2, #0
 308 0180 1A60     		str	r2, [r3]
 314:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** }
 309              		.loc 1 314 0
 310 0182 BD46     		mov	sp, r7
 311              		@ sp needed
 312 0184 5DF8047B 		ldr	r7, [sp], #4
 313 0188 7047     		bx	lr
 314              		.cfi_endproc
 315              	.LFE60:
 317 018a 00BF     		.align	2
 318              		.global	HAL_PWR_EnableWakeUpPin
 319              		.thumb
 320              		.thumb_func
 322              	HAL_PWR_EnableWakeUpPin:
 323              	.LFB61:
 315:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 316:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /**
 317:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @brief Enables the WakeUp PINx functionality.
 318:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @param WakeUpPinx: Specifies the Power Wake-Up pin to enable
 319:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *         This parameter can be one of the following values:
 320:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *           @arg PWR_WAKEUP_PIN1
 321:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @retval None
 322:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   */
 323:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
 324:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** {
 324              		.loc 1 324 0
 325              		.cfi_startproc
 326              		@ args = 0, pretend = 0, frame = 8
 327              		@ frame_needed = 1, uses_anonymous_args = 0
 328              		@ link register save eliminated.
 329 018c 80B4     		push	{r7}
 330              		.cfi_def_cfa_offset 4
 331              		.cfi_offset 7, -4
 332 018e 83B0     		sub	sp, sp, #12
 333              		.cfi_def_cfa_offset 16
 334 0190 00AF     		add	r7, sp, #0
 335              		.cfi_def_cfa_register 7
 336 0192 7860     		str	r0, [r7, #4]
 325:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Check the parameter */
 326:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
 327:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *(__IO uint32_t *) CSR_EWUP_BB = (uint32_t)ENABLE;
 337              		.loc 1 327 0
 338 0194 A023     		movs	r3, #160
 339 0196 C4F20E23 		movt	r3, 16910
 340 019a 0122     		movs	r2, #1
 341 019c 1A60     		str	r2, [r3]
 328:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** }
 342              		.loc 1 328 0
 343 019e 0C37     		adds	r7, r7, #12
 344 01a0 BD46     		mov	sp, r7
 345              		@ sp needed
 346 01a2 5DF8047B 		ldr	r7, [sp], #4
 347 01a6 7047     		bx	lr
 348              		.cfi_endproc
 349              	.LFE61:
 351              		.align	2
 352              		.global	HAL_PWR_DisableWakeUpPin
 353              		.thumb
 354              		.thumb_func
 356              	HAL_PWR_DisableWakeUpPin:
 357              	.LFB62:
 329:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 330:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /**
 331:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @brief Disables the WakeUp PINx functionality.
 332:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @param WakeUpPinx: Specifies the Power Wake-Up pin to disable
 333:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *         This parameter can be one of the following values:
 334:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *           @arg PWR_WAKEUP_PIN1
 335:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @retval None
 336:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   */
 337:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
 338:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** {
 358              		.loc 1 338 0
 359              		.cfi_startproc
 360              		@ args = 0, pretend = 0, frame = 8
 361              		@ frame_needed = 1, uses_anonymous_args = 0
 362              		@ link register save eliminated.
 363 01a8 80B4     		push	{r7}
 364              		.cfi_def_cfa_offset 4
 365              		.cfi_offset 7, -4
 366 01aa 83B0     		sub	sp, sp, #12
 367              		.cfi_def_cfa_offset 16
 368 01ac 00AF     		add	r7, sp, #0
 369              		.cfi_def_cfa_register 7
 370 01ae 7860     		str	r0, [r7, #4]
 339:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Check the parameter */
 340:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  
 341:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *(__IO uint32_t *) CSR_EWUP_BB = (uint32_t)DISABLE;
 371              		.loc 1 341 0
 372 01b0 A023     		movs	r3, #160
 373 01b2 C4F20E23 		movt	r3, 16910
 374 01b6 0022     		movs	r2, #0
 375 01b8 1A60     		str	r2, [r3]
 342:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** }
 376              		.loc 1 342 0
 377 01ba 0C37     		adds	r7, r7, #12
 378 01bc BD46     		mov	sp, r7
 379              		@ sp needed
 380 01be 5DF8047B 		ldr	r7, [sp], #4
 381 01c2 7047     		bx	lr
 382              		.cfi_endproc
 383              	.LFE62:
 385              		.align	2
 386              		.global	HAL_PWR_EnterSLEEPMode
 387              		.thumb
 388              		.thumb_func
 390              	HAL_PWR_EnterSLEEPMode:
 391              	.LFB63:
 343:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   
 344:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /**
 345:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @brief Enters Sleep mode.
 346:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *   
 347:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @note In Sleep mode, all I/O pins keep the same state as in Run mode.
 348:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * 
 349:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @note In Sleep mode, the systick is stopped to avoid exit from this mode with
 350:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *       systick interrupt when used as time base for Timeout 
 351:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *                
 352:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @param Regulator: Specifies the regulator state in SLEEP mode.
 353:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *            This parameter can be one of the following values:
 354:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *            @arg PWR_MAINREGULATOR_ON: SLEEP mode with regulator ON
 355:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *            @arg PWR_LOWPOWERREGULATOR_ON: SLEEP mode with low power regulator ON
 356:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @note This parameter is not used for the STM32F2 family and is kept as parameter
 357:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *       just to maintain compatibility with the lower power families.
 358:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @param SLEEPEntry: Specifies if SLEEP mode in entered with WFI or WFE instruction.
 359:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *          This parameter can be one of the following values:
 360:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
 361:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
 362:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @retval None
 363:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   */
 364:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
 365:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** {
 392              		.loc 1 365 0
 393              		.cfi_startproc
 394              		@ args = 0, pretend = 0, frame = 8
 395              		@ frame_needed = 1, uses_anonymous_args = 0
 396              		@ link register save eliminated.
 397 01c4 80B4     		push	{r7}
 398              		.cfi_def_cfa_offset 4
 399              		.cfi_offset 7, -4
 400 01c6 83B0     		sub	sp, sp, #12
 401              		.cfi_def_cfa_offset 16
 402 01c8 00AF     		add	r7, sp, #0
 403              		.cfi_def_cfa_register 7
 404 01ca 7860     		str	r0, [r7, #4]
 405 01cc 0B46     		mov	r3, r1
 406 01ce FB70     		strb	r3, [r7, #3]
 366:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Check the parameters */
 367:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   assert_param(IS_PWR_REGULATOR(Regulator));
 368:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));
 369:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   
 370:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Disable SysTick Timer */
 371:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   SysTick->CTRL  &= 0xFE;
 407              		.loc 1 371 0
 408 01d0 4EF21003 		movw	r3, #57360
 409 01d4 CEF20003 		movt	r3, 57344
 410 01d8 4EF21002 		movw	r2, #57360
 411 01dc CEF20002 		movt	r2, 57344
 412 01e0 1268     		ldr	r2, [r2]
 413 01e2 02F0FE02 		and	r2, r2, #254
 414 01e6 1A60     		str	r2, [r3]
 372:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   
 373:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Select SLEEP mode entry -------------------------------------------------*/
 374:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 415              		.loc 1 374 0
 416 01e8 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 417 01ea 012B     		cmp	r3, #1
 418 01ec 01D1     		bne	.L16
 419              	.LBB12:
 420              	.LBB13:
 421              		.file 2 "D:\\workspace\\console800480\\system/core_cmInstr.h"
   1:D:\workspace\console800480\system\core_cmInstr.h **** /**************************************************************************//**
   2:D:\workspace\console800480\system\core_cmInstr.h ****  * @file     core_cmInstr.h
   3:D:\workspace\console800480\system\core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:D:\workspace\console800480\system\core_cmInstr.h ****  * @version  V2.10
   5:D:\workspace\console800480\system\core_cmInstr.h ****  * @date     19. July 2011
   6:D:\workspace\console800480\system\core_cmInstr.h ****  *
   7:D:\workspace\console800480\system\core_cmInstr.h ****  * @note
   8:D:\workspace\console800480\system\core_cmInstr.h ****  * Copyright (C) 2009-2011 ARM Limited. All rights reserved.
   9:D:\workspace\console800480\system\core_cmInstr.h ****  *
  10:D:\workspace\console800480\system\core_cmInstr.h ****  * @par
  11:D:\workspace\console800480\system\core_cmInstr.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:D:\workspace\console800480\system\core_cmInstr.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:D:\workspace\console800480\system\core_cmInstr.h ****  * within development tools that are supporting such ARM based processors. 
  14:D:\workspace\console800480\system\core_cmInstr.h ****  *
  15:D:\workspace\console800480\system\core_cmInstr.h ****  * @par
  16:D:\workspace\console800480\system\core_cmInstr.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:D:\workspace\console800480\system\core_cmInstr.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:D:\workspace\console800480\system\core_cmInstr.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:D:\workspace\console800480\system\core_cmInstr.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:D:\workspace\console800480\system\core_cmInstr.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:D:\workspace\console800480\system\core_cmInstr.h ****  *
  22:D:\workspace\console800480\system\core_cmInstr.h ****  ******************************************************************************/
  23:D:\workspace\console800480\system\core_cmInstr.h **** 
  24:D:\workspace\console800480\system\core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  25:D:\workspace\console800480\system\core_cmInstr.h **** #define __CORE_CMINSTR_H
  26:D:\workspace\console800480\system\core_cmInstr.h **** 
  27:D:\workspace\console800480\system\core_cmInstr.h **** 
  28:D:\workspace\console800480\system\core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  29:D:\workspace\console800480\system\core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  30:D:\workspace\console800480\system\core_cmInstr.h ****   Access to dedicated instructions
  31:D:\workspace\console800480\system\core_cmInstr.h ****   @{
  32:D:\workspace\console800480\system\core_cmInstr.h **** */
  33:D:\workspace\console800480\system\core_cmInstr.h **** 
  34:D:\workspace\console800480\system\core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  35:D:\workspace\console800480\system\core_cmInstr.h **** /* ARM armcc specific functions */
  36:D:\workspace\console800480\system\core_cmInstr.h **** 
  37:D:\workspace\console800480\system\core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  38:D:\workspace\console800480\system\core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  39:D:\workspace\console800480\system\core_cmInstr.h **** #endif
  40:D:\workspace\console800480\system\core_cmInstr.h **** 
  41:D:\workspace\console800480\system\core_cmInstr.h **** 
  42:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  No Operation
  43:D:\workspace\console800480\system\core_cmInstr.h **** 
  44:D:\workspace\console800480\system\core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  45:D:\workspace\console800480\system\core_cmInstr.h ****  */
  46:D:\workspace\console800480\system\core_cmInstr.h **** #define __NOP                             __nop
  47:D:\workspace\console800480\system\core_cmInstr.h **** 
  48:D:\workspace\console800480\system\core_cmInstr.h **** 
  49:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Wait For Interrupt
  50:D:\workspace\console800480\system\core_cmInstr.h **** 
  51:D:\workspace\console800480\system\core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  52:D:\workspace\console800480\system\core_cmInstr.h ****     until one of a number of events occurs.
  53:D:\workspace\console800480\system\core_cmInstr.h ****  */
  54:D:\workspace\console800480\system\core_cmInstr.h **** #define __WFI                             __wfi
  55:D:\workspace\console800480\system\core_cmInstr.h **** 
  56:D:\workspace\console800480\system\core_cmInstr.h **** 
  57:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Wait For Event
  58:D:\workspace\console800480\system\core_cmInstr.h **** 
  59:D:\workspace\console800480\system\core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  60:D:\workspace\console800480\system\core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  61:D:\workspace\console800480\system\core_cmInstr.h ****  */
  62:D:\workspace\console800480\system\core_cmInstr.h **** #define __WFE                             __wfe
  63:D:\workspace\console800480\system\core_cmInstr.h **** 
  64:D:\workspace\console800480\system\core_cmInstr.h **** 
  65:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Send Event
  66:D:\workspace\console800480\system\core_cmInstr.h **** 
  67:D:\workspace\console800480\system\core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  68:D:\workspace\console800480\system\core_cmInstr.h ****  */
  69:D:\workspace\console800480\system\core_cmInstr.h **** #define __SEV                             __sev
  70:D:\workspace\console800480\system\core_cmInstr.h **** 
  71:D:\workspace\console800480\system\core_cmInstr.h **** 
  72:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  73:D:\workspace\console800480\system\core_cmInstr.h **** 
  74:D:\workspace\console800480\system\core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor, 
  75:D:\workspace\console800480\system\core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or 
  76:D:\workspace\console800480\system\core_cmInstr.h ****     memory, after the instruction has been completed.
  77:D:\workspace\console800480\system\core_cmInstr.h ****  */
  78:D:\workspace\console800480\system\core_cmInstr.h **** #define __ISB()                           __isb(0xF)
  79:D:\workspace\console800480\system\core_cmInstr.h **** 
  80:D:\workspace\console800480\system\core_cmInstr.h **** 
  81:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  82:D:\workspace\console800480\system\core_cmInstr.h **** 
  83:D:\workspace\console800480\system\core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier. 
  84:D:\workspace\console800480\system\core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
  85:D:\workspace\console800480\system\core_cmInstr.h ****  */
  86:D:\workspace\console800480\system\core_cmInstr.h **** #define __DSB()                           __dsb(0xF)
  87:D:\workspace\console800480\system\core_cmInstr.h **** 
  88:D:\workspace\console800480\system\core_cmInstr.h **** 
  89:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Data Memory Barrier
  90:D:\workspace\console800480\system\core_cmInstr.h **** 
  91:D:\workspace\console800480\system\core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before 
  92:D:\workspace\console800480\system\core_cmInstr.h ****     and after the instruction, without ensuring their completion.
  93:D:\workspace\console800480\system\core_cmInstr.h ****  */
  94:D:\workspace\console800480\system\core_cmInstr.h **** #define __DMB()                           __dmb(0xF)
  95:D:\workspace\console800480\system\core_cmInstr.h **** 
  96:D:\workspace\console800480\system\core_cmInstr.h **** 
  97:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
  98:D:\workspace\console800480\system\core_cmInstr.h **** 
  99:D:\workspace\console800480\system\core_cmInstr.h ****     This function reverses the byte order in integer value.
 100:D:\workspace\console800480\system\core_cmInstr.h **** 
 101:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]    value  Value to reverse
 102:D:\workspace\console800480\system\core_cmInstr.h ****     \return               Reversed value
 103:D:\workspace\console800480\system\core_cmInstr.h ****  */
 104:D:\workspace\console800480\system\core_cmInstr.h **** #define __REV                             __rev
 105:D:\workspace\console800480\system\core_cmInstr.h **** 
 106:D:\workspace\console800480\system\core_cmInstr.h **** 
 107:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 108:D:\workspace\console800480\system\core_cmInstr.h **** 
 109:D:\workspace\console800480\system\core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 110:D:\workspace\console800480\system\core_cmInstr.h **** 
 111:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]    value  Value to reverse
 112:D:\workspace\console800480\system\core_cmInstr.h ****     \return               Reversed value
 113:D:\workspace\console800480\system\core_cmInstr.h ****  */
 114:D:\workspace\console800480\system\core_cmInstr.h **** static __INLINE __ASM uint32_t __REV16(uint32_t value)
 115:D:\workspace\console800480\system\core_cmInstr.h **** {
 116:D:\workspace\console800480\system\core_cmInstr.h ****   rev16 r0, r0
 117:D:\workspace\console800480\system\core_cmInstr.h ****   bx lr
 118:D:\workspace\console800480\system\core_cmInstr.h **** }
 119:D:\workspace\console800480\system\core_cmInstr.h **** 
 120:D:\workspace\console800480\system\core_cmInstr.h **** 
 121:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 122:D:\workspace\console800480\system\core_cmInstr.h **** 
 123:D:\workspace\console800480\system\core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 124:D:\workspace\console800480\system\core_cmInstr.h **** 
 125:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]    value  Value to reverse
 126:D:\workspace\console800480\system\core_cmInstr.h ****     \return               Reversed value
 127:D:\workspace\console800480\system\core_cmInstr.h ****  */
 128:D:\workspace\console800480\system\core_cmInstr.h **** static __INLINE __ASM int32_t __REVSH(int32_t value)
 129:D:\workspace\console800480\system\core_cmInstr.h **** {
 130:D:\workspace\console800480\system\core_cmInstr.h ****   revsh r0, r0
 131:D:\workspace\console800480\system\core_cmInstr.h ****   bx lr
 132:D:\workspace\console800480\system\core_cmInstr.h **** }
 133:D:\workspace\console800480\system\core_cmInstr.h **** 
 134:D:\workspace\console800480\system\core_cmInstr.h **** 
 135:D:\workspace\console800480\system\core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 136:D:\workspace\console800480\system\core_cmInstr.h **** 
 137:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Reverse bit order of value
 138:D:\workspace\console800480\system\core_cmInstr.h **** 
 139:D:\workspace\console800480\system\core_cmInstr.h ****     This function reverses the bit order of the given value.
 140:D:\workspace\console800480\system\core_cmInstr.h **** 
 141:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]    value  Value to reverse
 142:D:\workspace\console800480\system\core_cmInstr.h ****     \return               Reversed value
 143:D:\workspace\console800480\system\core_cmInstr.h ****  */
 144:D:\workspace\console800480\system\core_cmInstr.h **** #define __RBIT                            __rbit
 145:D:\workspace\console800480\system\core_cmInstr.h **** 
 146:D:\workspace\console800480\system\core_cmInstr.h **** 
 147:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 148:D:\workspace\console800480\system\core_cmInstr.h **** 
 149:D:\workspace\console800480\system\core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 150:D:\workspace\console800480\system\core_cmInstr.h **** 
 151:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 152:D:\workspace\console800480\system\core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 153:D:\workspace\console800480\system\core_cmInstr.h ****  */
 154:D:\workspace\console800480\system\core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 155:D:\workspace\console800480\system\core_cmInstr.h **** 
 156:D:\workspace\console800480\system\core_cmInstr.h **** 
 157:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 158:D:\workspace\console800480\system\core_cmInstr.h **** 
 159:D:\workspace\console800480\system\core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 160:D:\workspace\console800480\system\core_cmInstr.h **** 
 161:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 162:D:\workspace\console800480\system\core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 163:D:\workspace\console800480\system\core_cmInstr.h ****  */
 164:D:\workspace\console800480\system\core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 165:D:\workspace\console800480\system\core_cmInstr.h **** 
 166:D:\workspace\console800480\system\core_cmInstr.h **** 
 167:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 168:D:\workspace\console800480\system\core_cmInstr.h **** 
 169:D:\workspace\console800480\system\core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 170:D:\workspace\console800480\system\core_cmInstr.h **** 
 171:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 172:D:\workspace\console800480\system\core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 173:D:\workspace\console800480\system\core_cmInstr.h ****  */
 174:D:\workspace\console800480\system\core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 175:D:\workspace\console800480\system\core_cmInstr.h **** 
 176:D:\workspace\console800480\system\core_cmInstr.h **** 
 177:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 178:D:\workspace\console800480\system\core_cmInstr.h **** 
 179:D:\workspace\console800480\system\core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 180:D:\workspace\console800480\system\core_cmInstr.h **** 
 181:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]  value  Value to store
 182:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 183:D:\workspace\console800480\system\core_cmInstr.h ****     \return          0  Function succeeded
 184:D:\workspace\console800480\system\core_cmInstr.h ****     \return          1  Function failed
 185:D:\workspace\console800480\system\core_cmInstr.h ****  */
 186:D:\workspace\console800480\system\core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 187:D:\workspace\console800480\system\core_cmInstr.h **** 
 188:D:\workspace\console800480\system\core_cmInstr.h **** 
 189:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 190:D:\workspace\console800480\system\core_cmInstr.h **** 
 191:D:\workspace\console800480\system\core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 192:D:\workspace\console800480\system\core_cmInstr.h **** 
 193:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]  value  Value to store
 194:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 195:D:\workspace\console800480\system\core_cmInstr.h ****     \return          0  Function succeeded
 196:D:\workspace\console800480\system\core_cmInstr.h ****     \return          1  Function failed
 197:D:\workspace\console800480\system\core_cmInstr.h ****  */
 198:D:\workspace\console800480\system\core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 199:D:\workspace\console800480\system\core_cmInstr.h **** 
 200:D:\workspace\console800480\system\core_cmInstr.h **** 
 201:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 202:D:\workspace\console800480\system\core_cmInstr.h **** 
 203:D:\workspace\console800480\system\core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 204:D:\workspace\console800480\system\core_cmInstr.h **** 
 205:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]  value  Value to store
 206:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 207:D:\workspace\console800480\system\core_cmInstr.h ****     \return          0  Function succeeded
 208:D:\workspace\console800480\system\core_cmInstr.h ****     \return          1  Function failed
 209:D:\workspace\console800480\system\core_cmInstr.h ****  */
 210:D:\workspace\console800480\system\core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 211:D:\workspace\console800480\system\core_cmInstr.h **** 
 212:D:\workspace\console800480\system\core_cmInstr.h **** 
 213:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Remove the exclusive lock
 214:D:\workspace\console800480\system\core_cmInstr.h **** 
 215:D:\workspace\console800480\system\core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 216:D:\workspace\console800480\system\core_cmInstr.h **** 
 217:D:\workspace\console800480\system\core_cmInstr.h ****  */
 218:D:\workspace\console800480\system\core_cmInstr.h **** #define __CLREX                           __clrex
 219:D:\workspace\console800480\system\core_cmInstr.h **** 
 220:D:\workspace\console800480\system\core_cmInstr.h **** 
 221:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Signed Saturate
 222:D:\workspace\console800480\system\core_cmInstr.h **** 
 223:D:\workspace\console800480\system\core_cmInstr.h ****     This function saturates a signed value.
 224:D:\workspace\console800480\system\core_cmInstr.h **** 
 225:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]  value  Value to be saturated
 226:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 227:D:\workspace\console800480\system\core_cmInstr.h ****     \return             Saturated value
 228:D:\workspace\console800480\system\core_cmInstr.h ****  */
 229:D:\workspace\console800480\system\core_cmInstr.h **** #define __SSAT                            __ssat
 230:D:\workspace\console800480\system\core_cmInstr.h **** 
 231:D:\workspace\console800480\system\core_cmInstr.h **** 
 232:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Unsigned Saturate
 233:D:\workspace\console800480\system\core_cmInstr.h **** 
 234:D:\workspace\console800480\system\core_cmInstr.h ****     This function saturates an unsigned value.
 235:D:\workspace\console800480\system\core_cmInstr.h **** 
 236:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]  value  Value to be saturated
 237:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 238:D:\workspace\console800480\system\core_cmInstr.h ****     \return             Saturated value
 239:D:\workspace\console800480\system\core_cmInstr.h ****  */
 240:D:\workspace\console800480\system\core_cmInstr.h **** #define __USAT                            __usat
 241:D:\workspace\console800480\system\core_cmInstr.h **** 
 242:D:\workspace\console800480\system\core_cmInstr.h **** 
 243:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Count leading zeros
 244:D:\workspace\console800480\system\core_cmInstr.h **** 
 245:D:\workspace\console800480\system\core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 246:D:\workspace\console800480\system\core_cmInstr.h **** 
 247:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 248:D:\workspace\console800480\system\core_cmInstr.h ****     \return             number of leading zeros in value
 249:D:\workspace\console800480\system\core_cmInstr.h ****  */
 250:D:\workspace\console800480\system\core_cmInstr.h **** #define __CLZ                             __clz 
 251:D:\workspace\console800480\system\core_cmInstr.h **** 
 252:D:\workspace\console800480\system\core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) */
 253:D:\workspace\console800480\system\core_cmInstr.h **** 
 254:D:\workspace\console800480\system\core_cmInstr.h **** 
 255:D:\workspace\console800480\system\core_cmInstr.h **** 
 256:D:\workspace\console800480\system\core_cmInstr.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 257:D:\workspace\console800480\system\core_cmInstr.h **** /* IAR iccarm specific functions */
 258:D:\workspace\console800480\system\core_cmInstr.h **** 
 259:D:\workspace\console800480\system\core_cmInstr.h **** #include <cmsis_iar.h>
 260:D:\workspace\console800480\system\core_cmInstr.h **** 
 261:D:\workspace\console800480\system\core_cmInstr.h **** 
 262:D:\workspace\console800480\system\core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 263:D:\workspace\console800480\system\core_cmInstr.h **** /* GNU gcc specific functions */
 264:D:\workspace\console800480\system\core_cmInstr.h **** 
 265:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  No Operation
 266:D:\workspace\console800480\system\core_cmInstr.h **** 
 267:D:\workspace\console800480\system\core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 268:D:\workspace\console800480\system\core_cmInstr.h ****  */
 269:D:\workspace\console800480\system\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __NOP(void)
 270:D:\workspace\console800480\system\core_cmInstr.h **** {
 271:D:\workspace\console800480\system\core_cmInstr.h ****   __ASM volatile ("nop");
 272:D:\workspace\console800480\system\core_cmInstr.h **** }
 273:D:\workspace\console800480\system\core_cmInstr.h **** 
 274:D:\workspace\console800480\system\core_cmInstr.h **** 
 275:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Wait For Interrupt
 276:D:\workspace\console800480\system\core_cmInstr.h **** 
 277:D:\workspace\console800480\system\core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 278:D:\workspace\console800480\system\core_cmInstr.h ****     until one of a number of events occurs.
 279:D:\workspace\console800480\system\core_cmInstr.h ****  */
 280:D:\workspace\console800480\system\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __WFI(void)
 281:D:\workspace\console800480\system\core_cmInstr.h **** {
 282:D:\workspace\console800480\system\core_cmInstr.h ****   __ASM volatile ("wfi");
 422              		.loc 2 282 0
 423              	@ 282 "D:\workspace\console800480\system/core_cmInstr.h" 1
 424 01ee 30BF     		wfi
 425              	@ 0 "" 2
 426              		.thumb
 427              	.LBE13:
 428              	.LBE12:
 429 01f0 00E0     		b	.L17
 430              	.L16:
 431              	.LBB14:
 432              	.LBB15:
 283:D:\workspace\console800480\system\core_cmInstr.h **** }
 284:D:\workspace\console800480\system\core_cmInstr.h **** 
 285:D:\workspace\console800480\system\core_cmInstr.h **** 
 286:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Wait For Event
 287:D:\workspace\console800480\system\core_cmInstr.h **** 
 288:D:\workspace\console800480\system\core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 289:D:\workspace\console800480\system\core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 290:D:\workspace\console800480\system\core_cmInstr.h ****  */
 291:D:\workspace\console800480\system\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __WFE(void)
 292:D:\workspace\console800480\system\core_cmInstr.h **** {
 293:D:\workspace\console800480\system\core_cmInstr.h ****   __ASM volatile ("wfe");
 433              		.loc 2 293 0
 434              	@ 293 "D:\workspace\console800480\system/core_cmInstr.h" 1
 435 01f2 20BF     		wfe
 436              	@ 0 "" 2
 437              		.thumb
 438              	.L17:
 439              	.LBE15:
 440              	.LBE14:
 375:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   {   
 376:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     /* Request Wait For Interrupt */
 377:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     __WFI();
 378:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   }
 379:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   else
 380:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   {
 381:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     /* Request Wait For Event */
 382:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     __WFE();
 383:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   }
 384:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 385:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Enable SysTick Timer */
 386:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   SysTick->CTRL  |= 0x01;
 441              		.loc 1 386 0
 442 01f4 4EF21003 		movw	r3, #57360
 443 01f8 CEF20003 		movt	r3, 57344
 444 01fc 4EF21002 		movw	r2, #57360
 445 0200 CEF20002 		movt	r2, 57344
 446 0204 1268     		ldr	r2, [r2]
 447 0206 42F00102 		orr	r2, r2, #1
 448 020a 1A60     		str	r2, [r3]
 387:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** }
 449              		.loc 1 387 0
 450 020c 0C37     		adds	r7, r7, #12
 451 020e BD46     		mov	sp, r7
 452              		@ sp needed
 453 0210 5DF8047B 		ldr	r7, [sp], #4
 454 0214 7047     		bx	lr
 455              		.cfi_endproc
 456              	.LFE63:
 458 0216 00BF     		.align	2
 459              		.global	HAL_PWR_EnterSTOPMode
 460              		.thumb
 461              		.thumb_func
 463              	HAL_PWR_EnterSTOPMode:
 464              	.LFB64:
 388:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 389:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /**
 390:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @brief Enters Stop mode. 
 391:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @note In Stop mode, all I/O pins keep the same state as in Run mode.
 392:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @note When exiting Stop mode by issuing an interrupt or a wakeup event, 
 393:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *         the HSI RC oscillator is selected as system clock.
 394:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @note When the voltage regulator operates in low power mode, an additional 
 395:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *         startup delay is incurred when waking up from Stop mode. 
 396:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *         By keeping the internal regulator ON during Stop mode, the consumption 
 397:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *         is higher although the startup time is reduced.    
 398:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @param Regulator: Specifies the regulator state in Stop mode.
 399:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *          This parameter can be one of the following values:
 400:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *            @arg PWR_MAINREGULATOR_ON: Stop mode with regulator ON
 401:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *            @arg PWR_LOWPOWERREGULATOR_ON: Stop mode with low power regulator ON
 402:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @param STOPEntry: Specifies if Stop mode in entered with WFI or WFE instruction.
 403:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *          This parameter can be one of the following values:
 404:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
 405:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction
 406:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @retval None
 407:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   */
 408:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
 409:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** {
 465              		.loc 1 409 0
 466              		.cfi_startproc
 467              		@ args = 0, pretend = 0, frame = 16
 468              		@ frame_needed = 1, uses_anonymous_args = 0
 469              		@ link register save eliminated.
 470 0218 80B4     		push	{r7}
 471              		.cfi_def_cfa_offset 4
 472              		.cfi_offset 7, -4
 473 021a 85B0     		sub	sp, sp, #20
 474              		.cfi_def_cfa_offset 24
 475 021c 00AF     		add	r7, sp, #0
 476              		.cfi_def_cfa_register 7
 477 021e 7860     		str	r0, [r7, #4]
 478 0220 0B46     		mov	r3, r1
 479 0222 FB70     		strb	r3, [r7, #3]
 410:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   uint32_t tmpreg = 0;
 480              		.loc 1 410 0
 481 0224 0023     		movs	r3, #0
 482 0226 FB60     		str	r3, [r7, #12]
 411:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   
 412:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Check the parameters */
 413:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   assert_param(IS_PWR_REGULATOR(Regulator));
 414:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
 415:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   
 416:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Select the regulator state in Stop mode ---------------------------------*/
 417:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   tmpreg = PWR->CR;
 483              		.loc 1 417 0
 484 0228 4FF4E043 		mov	r3, #28672
 485 022c C4F20003 		movt	r3, 16384
 486 0230 1B68     		ldr	r3, [r3]
 487 0232 FB60     		str	r3, [r7, #12]
 418:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Clear PDDS and LPDS bits */
 419:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   tmpreg &= (uint32_t)~(PWR_CR_PDDS | PWR_CR_LPDS);
 488              		.loc 1 419 0
 489 0234 FB68     		ldr	r3, [r7, #12]
 490 0236 23F00303 		bic	r3, r3, #3
 491 023a FB60     		str	r3, [r7, #12]
 420:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   
 421:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Set LPDS, MRLVDS and LPLVDS bits according to Regulator value */
 422:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   tmpreg |= Regulator;
 492              		.loc 1 422 0
 493 023c FA68     		ldr	r2, [r7, #12]
 494 023e 7B68     		ldr	r3, [r7, #4]
 495 0240 1343     		orrs	r3, r3, r2
 496 0242 FB60     		str	r3, [r7, #12]
 423:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   
 424:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Store the new value */
 425:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   PWR->CR = tmpreg;
 497              		.loc 1 425 0
 498 0244 4FF4E043 		mov	r3, #28672
 499 0248 C4F20003 		movt	r3, 16384
 500 024c FA68     		ldr	r2, [r7, #12]
 501 024e 1A60     		str	r2, [r3]
 426:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   
 427:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
 428:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 502              		.loc 1 428 0
 503 0250 4FF46D43 		mov	r3, #60672
 504 0254 CEF20003 		movt	r3, 57344
 505 0258 4FF46D42 		mov	r2, #60672
 506 025c CEF20002 		movt	r2, 57344
 507 0260 1269     		ldr	r2, [r2, #16]
 508 0262 42F00402 		orr	r2, r2, #4
 509 0266 1A61     		str	r2, [r3, #16]
 429:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   
 430:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Select Stop mode entry --------------------------------------------------*/
 431:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   if(STOPEntry == PWR_STOPENTRY_WFI)
 510              		.loc 1 431 0
 511 0268 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 512 026a 012B     		cmp	r3, #1
 513 026c 01D1     		bne	.L19
 514              	.LBB16:
 515              	.LBB17:
 282:D:\workspace\console800480\system\core_cmInstr.h **** }
 516              		.loc 2 282 0
 517              	@ 282 "D:\workspace\console800480\system/core_cmInstr.h" 1
 518 026e 30BF     		wfi
 519              	@ 0 "" 2
 520              		.thumb
 521              	.LBE17:
 522              	.LBE16:
 523 0270 00E0     		b	.L20
 524              	.L19:
 525              	.LBB18:
 526              	.LBB19:
 527              		.loc 2 293 0
 528              	@ 293 "D:\workspace\console800480\system/core_cmInstr.h" 1
 529 0272 20BF     		wfe
 530              	@ 0 "" 2
 531              		.thumb
 532              	.L20:
 533              	.LBE19:
 534              	.LBE18:
 432:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   {   
 433:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     /* Request Wait For Interrupt */
 434:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     __WFI();
 435:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   }
 436:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   else
 437:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   {
 438:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     /* Request Wait For Event */
 439:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     __WFE();
 440:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   }
 441:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Reset SLEEPDEEP bit of Cortex System Control Register */
 442:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);  
 535              		.loc 1 442 0
 536 0274 4FF46D43 		mov	r3, #60672
 537 0278 CEF20003 		movt	r3, 57344
 538 027c 4FF46D42 		mov	r2, #60672
 539 0280 CEF20002 		movt	r2, 57344
 540 0284 1269     		ldr	r2, [r2, #16]
 541 0286 22F00402 		bic	r2, r2, #4
 542 028a 1A61     		str	r2, [r3, #16]
 443:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** }
 543              		.loc 1 443 0
 544 028c 1437     		adds	r7, r7, #20
 545 028e BD46     		mov	sp, r7
 546              		@ sp needed
 547 0290 5DF8047B 		ldr	r7, [sp], #4
 548 0294 7047     		bx	lr
 549              		.cfi_endproc
 550              	.LFE64:
 552 0296 00BF     		.align	2
 553              		.global	HAL_PWR_EnterSTANDBYMode
 554              		.thumb
 555              		.thumb_func
 557              	HAL_PWR_EnterSTANDBYMode:
 558              	.LFB65:
 444:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 445:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /**
 446:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @brief Enters Standby mode.
 447:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @note In Standby mode, all I/O pins are high impedance except for:
 448:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *          - Reset pad (still available) 
 449:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *          - RTC_AF1 pin (PC13) if configured for tamper, time-stamp, RTC 
 450:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *            Alarm out, or RTC clock calibration out.
 451:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
 452:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *          - WKUP pin 1 (PA0) if enabled.       
 453:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @param None
 454:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @retval None
 455:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   */
 456:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** void HAL_PWR_EnterSTANDBYMode(void)
 457:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** {
 559              		.loc 1 457 0
 560              		.cfi_startproc
 561              		@ args = 0, pretend = 0, frame = 0
 562              		@ frame_needed = 1, uses_anonymous_args = 0
 563              		@ link register save eliminated.
 564 0298 80B4     		push	{r7}
 565              		.cfi_def_cfa_offset 4
 566              		.cfi_offset 7, -4
 567 029a 00AF     		add	r7, sp, #0
 568              		.cfi_def_cfa_register 7
 458:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Clear Wakeup flag */
 459:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   PWR->CR |= PWR_CR_CWUF;
 569              		.loc 1 459 0
 570 029c 4FF4E043 		mov	r3, #28672
 571 02a0 C4F20003 		movt	r3, 16384
 572 02a4 4FF4E042 		mov	r2, #28672
 573 02a8 C4F20002 		movt	r2, 16384
 574 02ac 1268     		ldr	r2, [r2]
 575 02ae 42F00402 		orr	r2, r2, #4
 576 02b2 1A60     		str	r2, [r3]
 460:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   
 461:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Select Standby mode */
 462:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   PWR->CR |= PWR_CR_PDDS;
 577              		.loc 1 462 0
 578 02b4 4FF4E043 		mov	r3, #28672
 579 02b8 C4F20003 		movt	r3, 16384
 580 02bc 4FF4E042 		mov	r2, #28672
 581 02c0 C4F20002 		movt	r2, 16384
 582 02c4 1268     		ldr	r2, [r2]
 583 02c6 42F00202 		orr	r2, r2, #2
 584 02ca 1A60     		str	r2, [r3]
 463:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   
 464:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
 465:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 585              		.loc 1 465 0
 586 02cc 4FF46D43 		mov	r3, #60672
 587 02d0 CEF20003 		movt	r3, 57344
 588 02d4 4FF46D42 		mov	r2, #60672
 589 02d8 CEF20002 		movt	r2, 57344
 590 02dc 1269     		ldr	r2, [r2, #16]
 591 02de 42F00402 		orr	r2, r2, #4
 592 02e2 1A61     		str	r2, [r3, #16]
 593              	.LBB20:
 594              	.LBB21:
 282:D:\workspace\console800480\system\core_cmInstr.h **** }
 595              		.loc 2 282 0
 596              	@ 282 "D:\workspace\console800480\system/core_cmInstr.h" 1
 597 02e4 30BF     		wfi
 598              	@ 0 "" 2
 599              		.thumb
 600              	.LBE21:
 601              	.LBE20:
 466:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   
 467:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* This option is used to ensure that store operations are completed */
 468:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** #if defined ( __CC_ARM)
 469:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   __force_stores();
 470:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** #endif
 471:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Request Wait For Interrupt */
 472:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   __WFI();
 473:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** }
 602              		.loc 1 473 0
 603 02e6 BD46     		mov	sp, r7
 604              		@ sp needed
 605 02e8 5DF8047B 		ldr	r7, [sp], #4
 606 02ec 7047     		bx	lr
 607              		.cfi_endproc
 608              	.LFE65:
 610 02ee 00BF     		.align	2
 611              		.global	HAL_PWR_PVD_IRQHandler
 612              		.thumb
 613              		.thumb_func
 615              	HAL_PWR_PVD_IRQHandler:
 616              	.LFB66:
 474:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 475:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /**
 476:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @brief This function handles the PWR PVD interrupt request.
 477:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @note This API should be called under the PVD_IRQHandler().
 478:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @param None
 479:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @retval None
 480:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   */
 481:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** void HAL_PWR_PVD_IRQHandler(void)
 482:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** {
 617              		.loc 1 482 0
 618              		.cfi_startproc
 619              		@ args = 0, pretend = 0, frame = 0
 620              		@ frame_needed = 1, uses_anonymous_args = 0
 621 02f0 80B5     		push	{r7, lr}
 622              		.cfi_def_cfa_offset 8
 623              		.cfi_offset 7, -8
 624              		.cfi_offset 14, -4
 625 02f2 00AF     		add	r7, sp, #0
 626              		.cfi_def_cfa_register 7
 483:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Check PWR exti flag */
 484:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   if(__HAL_PVD_EXTI_GET_FLAG(PWR_EXTI_LINE_PVD) != RESET)
 627              		.loc 1 484 0
 628 02f4 4FF47053 		mov	r3, #15360
 629 02f8 C4F20103 		movt	r3, 16385
 630 02fc 5B69     		ldr	r3, [r3, #20]
 631 02fe 03F48033 		and	r3, r3, #65536
 632 0302 002B     		cmp	r3, #0
 633 0304 08D0     		beq	.L22
 485:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   {
 486:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     /* PWR PVD interrupt user callback */
 487:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     HAL_PWR_PVDCallback();
 634              		.loc 1 487 0
 635 0306 FFF7FEFF 		bl	HAL_PWR_PVDCallback
 488:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     
 489:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     /* Clear PWR Exti pending bit */
 490:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     __HAL_PVD_EXTI_CLEAR_FLAG(PWR_EXTI_LINE_PVD);
 636              		.loc 1 490 0
 637 030a 4FF47053 		mov	r3, #15360
 638 030e C4F20103 		movt	r3, 16385
 639 0312 4FF48032 		mov	r2, #65536
 640 0316 5A61     		str	r2, [r3, #20]
 641              	.L22:
 491:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   }
 492:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** }
 642              		.loc 1 492 0
 643 0318 80BD     		pop	{r7, pc}
 644              		.cfi_endproc
 645              	.LFE66:
 647 031a 00BF     		.align	2
 648              		.weak	HAL_PWR_PVDCallback
 649              		.thumb
 650              		.thumb_func
 652              	HAL_PWR_PVDCallback:
 653              	.LFB67:
 493:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 494:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /**
 495:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @brief  PWR PVD interrupt callback
 496:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @param  none 
 497:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @retval none
 498:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   */
 499:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** __weak void HAL_PWR_PVDCallback(void)
 500:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** {
 654              		.loc 1 500 0
 655              		.cfi_startproc
 656              		@ args = 0, pretend = 0, frame = 0
 657              		@ frame_needed = 1, uses_anonymous_args = 0
 658              		@ link register save eliminated.
 659 031c 80B4     		push	{r7}
 660              		.cfi_def_cfa_offset 4
 661              		.cfi_offset 7, -4
 662 031e 00AF     		add	r7, sp, #0
 663              		.cfi_def_cfa_register 7
 501:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 502:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****             the HAL_PWR_PVDCallback could be implemented in the user file
 503:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****    */ 
 504:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** }
 664              		.loc 1 504 0
 665 0320 BD46     		mov	sp, r7
 666              		@ sp needed
 667 0322 5DF8047B 		ldr	r7, [sp], #4
 668 0326 7047     		bx	lr
 669              		.cfi_endproc
 670              	.LFE67:
 672              	.Letext0:
 673              		.file 3 "c:\\program files (x86)\\codesourcery\\arm-none-eabi\\include\\stdint.h"
 674              		.file 4 "D:\\workspace\\console800480\\system/core_cm3.h"
 675              		.file 5 "D:\\workspace\\console800480\\system/stm32f217xx.h"
 676              		.file 6 "D:\\workspace\\console800480\\system/stm32f2xx.h"
 677              		.file 7 "D:\\workspace\\console800480\\STM32F2xx_HAL_Driver\\Inc/stm32f2xx_hal_pwr.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f2xx_hal_pwr.c
C:\Users\sagok\AppData\Local\Temp\ccNTcuz6.s:18     .text:00000000 $t
C:\Users\sagok\AppData\Local\Temp\ccNTcuz6.s:23     .text:00000000 HAL_PWR_DeInit
C:\Users\sagok\AppData\Local\Temp\ccNTcuz6.s:65     .text:0000003c HAL_PWR_EnableBkUpAccess
C:\Users\sagok\AppData\Local\Temp\ccNTcuz6.s:95     .text:00000054 HAL_PWR_DisableBkUpAccess
C:\Users\sagok\AppData\Local\Temp\ccNTcuz6.s:125    .text:0000006c HAL_PWR_PVDConfig
C:\Users\sagok\AppData\Local\Temp\ccNTcuz6.s:262    .text:0000015c HAL_PWR_EnablePVD
C:\Users\sagok\AppData\Local\Temp\ccNTcuz6.s:292    .text:00000174 HAL_PWR_DisablePVD
C:\Users\sagok\AppData\Local\Temp\ccNTcuz6.s:322    .text:0000018c HAL_PWR_EnableWakeUpPin
C:\Users\sagok\AppData\Local\Temp\ccNTcuz6.s:356    .text:000001a8 HAL_PWR_DisableWakeUpPin
C:\Users\sagok\AppData\Local\Temp\ccNTcuz6.s:390    .text:000001c4 HAL_PWR_EnterSLEEPMode
C:\Users\sagok\AppData\Local\Temp\ccNTcuz6.s:463    .text:00000218 HAL_PWR_EnterSTOPMode
C:\Users\sagok\AppData\Local\Temp\ccNTcuz6.s:557    .text:00000298 HAL_PWR_EnterSTANDBYMode
C:\Users\sagok\AppData\Local\Temp\ccNTcuz6.s:615    .text:000002f0 HAL_PWR_PVD_IRQHandler
C:\Users\sagok\AppData\Local\Temp\ccNTcuz6.s:652    .text:0000031c HAL_PWR_PVDCallback
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.7f551ac7fcad8b79b9df4bfdaa536673
                           .group:00000000 wm4.stm32f2xx_hal_conf.h.40.007126baefb9f966c36646edbf8040d2
                           .group:00000000 wm4.stm32f2xx.h.57.5ec1581efc43612c411d33a8686e9ec7
                           .group:00000000 wm4.stm32f217xx.h.52.9c940d76d00294b78837dc334c172fdd
                           .group:00000000 wm4.core_cm3.h.32.49180ccb4d36cabd2d7016d2a51d91ae
                           .group:00000000 wm4.newlib.h.8.384a112feabb3bef7b573ae48cde2e3b
                           .group:00000000 wm4.features.h.22.6a4ca7cd053637cc1d0db6c16f39b2d7
                           .group:00000000 wm4.config.h.183.aa62afef667fb61d15fa64c48beb2f14
                           .group:00000000 wm4._ansi.h.23.5644b60c990a4800b02a6e654e88f93a
                           .group:00000000 wm4.stdint.h.20.54ad762faa59e3c05491630641c8d8bf
                           .group:00000000 wm4.core_cmInstr.h.25.f50f886f2edf670cf199b35fd96f5c91
                           .group:00000000 wm4.core_cm3.h.130.63ab2348a6eed0fdb318040d970b676c
                           .group:00000000 wm4.stm32f217xx.h.978.a5c681952b2f704a0e7f2ba21d08adf5
                           .group:00000000 wm4.stm32f2xx.h.142.bc2155a1f7498bab16371e38413a9e41
                           .group:00000000 wm4.stm32f2xx_hal_def.h.74.8ad2dc8aa82c4fd02e5aeaae592641ba
                           .group:00000000 wm4.stm32f2xx_hal_rcc.h.142.ec0f91cc6576a6acebd17e6dd85829ae
                           .group:00000000 wm4.stm32f2xx_hal_rcc_ex.h.40.0829033e864455c6bdd0db01f8ba5a50
                           .group:00000000 wm4.stm32f2xx_hal_gpio.h.40.ba64e0bb94d9a68835f80159f39a86f1
                           .group:00000000 wm4.stm32f2xx_hal_gpio_ex.h.40.24e547fd402281923f446b510381083f
                           .group:00000000 wm4.stm32f2xx_hal_dma.h.40.5d9732ace2a21a4526ce8f0c52428fff
                           .group:00000000 wm4.stm32f2xx_hal_cortex.h.40.e10263d2ec5d4fa79b4180ce1a38aff1
                           .group:00000000 wm4.stm32f2xx_hal_adc.h.40.89ac8b78113cac4cf63847587daabac9
                           .group:00000000 wm4.stm32f2xx_hal_adc_ex.h.40.7de68ed256ef25526ee31cc017f2c291
                           .group:00000000 wm4.stm32f2xx_hal_flash.h.40.c3171719ce015e9cff20c795e44e886d
                           .group:00000000 wm4.stm32f2xx_hal_flash_ex.h.40.7389508bd24a0aeb077bde0c9fb651eb
                           .group:00000000 wm4.stm32f2xx_ll_fsmc.h.40.c1c32f2e1862f4dd342bd9b80fb895bb
                           .group:00000000 wm4.stm32f2xx_hal_pwr.h.40.812df32e5c31b609a128e9db0eb4cbd0
                           .group:00000000 wm4.stm32f2xx_hal_rtc.h.40.850fda5fe2cce8797446913dee18382f
                           .group:00000000 wm4.stm32f2xx_hal_rtc_ex.h.40.f3e0c408e3bf4e8a0352d7ec9a18a822
                           .group:00000000 wm4.stm32f2xx_ll_sdmmc.h.40.3719ab487c4b77401c572f459adf6eb7
                           .group:00000000 wm4.stm32f2xx_hal_sd.h.58.760215394dcc316161a6482c0af9b866
                           .group:00000000 wm4.stm32f2xx_hal_spi.h.40.7984243dbaba8b21c6392998a47e6987
                           .group:00000000 wm4.stm32f2xx_hal_tim.h.40.d79172f25d0e9a15dc346aba8515bdd6
                           .group:00000000 wm4.stm32f2xx_hal_tim_ex.h.40.361f280a7a3f60b4b238bb99ca728d83
                           .group:00000000 wm4.stm32f2xx_hal_uart.h.40.d74def561ae6f78f40f477c8426ecbef
                           .group:00000000 wm4.stm32f2xx_ll_usb.h.40.9b0206a05bc6ce3bec1648b51f22cb81
                           .group:00000000 wm4.stm32f2xx_hal_pcd.h.99.11faba414c39e357b2f23364912d0605
                           .group:00000000 wm4.stm32f2xx_hal_hcd.h.40.44ee5e972983ae0139ddbacdc75c44ef
                           .group:00000000 wm4.stm32f2xx_hal.h.64.ed79ee83e52b151b3c365392b398f866

NO UNDEFINED SYMBOLS
