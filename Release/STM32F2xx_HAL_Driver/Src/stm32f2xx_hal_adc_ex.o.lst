   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f2xx_hal_adc_ex.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.align	2
  19              		.global	HAL_ADCEx_InjectedStart
  20              		.thumb
  21              		.thumb_func
  23              	HAL_ADCEx_InjectedStart:
  24              	.LFB55:
  25              		.file 1 "../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c"
   1:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** /**
   2:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   ******************************************************************************
   3:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   * @file    stm32f2xx_hal_adc_ex.c
   4:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   * @author  MCD Application Team
   5:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   * @version V1.0.1
   6:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   * @date    25-March-2014
   7:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   *          functionalities of the ADC extension peripheral:
   9:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   *           + Extended features functions
  10:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   *         
  11:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   @verbatim
  12:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   ==============================================================================
  13:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****                     ##### How to use this driver #####
  14:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   ==============================================================================
  15:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     [..]
  16:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     (#)Initialize the ADC low level resources by implementing the HAL_ADC_MspInit():
  17:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****        (##) Enable the ADC interface clock using __ADC_CLK_ENABLE()
  18:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****        (##) ADC pins configuration
  19:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****              (+++) Enable the clock for the ADC GPIOs using the following function:
  20:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****                    __GPIOx_CLK_ENABLE()  
  21:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****              (+++) Configure these ADC pins in analog mode using HAL_GPIO_Init() 
  22:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****        (##) In case of using interrupts (e.g. HAL_ADC_Start_IT())
  23:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****              (+++) Configure the ADC interrupt priority using HAL_NVIC_SetPriority()
  24:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****              (+++) Enable the ADC IRQ handler using HAL_NVIC_EnableIRQ()
  25:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****              (+++) In ADC IRQ handler, call HAL_ADC_IRQHandler()
  26:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****       (##) In case of using DMA to control data transfer (e.g. HAL_ADC_Start_DMA())
  27:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****              (++) Enable the DMAx interface clock using __DMAx_CLK_ENABLE()
  28:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****              (++) Configure and enable two DMA streams stream for managing data
  29:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****                  transfer from peripheral to memory (output stream)
  30:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****              (++) Associate the initilalized DMA handle to the CRYP DMA handle
  31:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****                  using  __HAL_LINKDMA()
  32:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****              (++) Configure the priority and enable the NVIC for the transfer complete
  33:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****                  interrupt on the two DMA Streams. The output stream should have higher
  34:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****                  priority than the input stream.
  35:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****                        
  36:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****      (#) Configure the ADC Prescaler, conversion resolution and data alignment 
  37:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****          using the HAL_ADC_Init() function. 
  38:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   
  39:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****      (#) Configure the ADC Injected channels group features, use HAL_ADC_Init()
  40:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****          and HAL_ADC_ConfigChannel() functions.
  41:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****          
  42:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****      (#) Three mode of operations are available within this driver :     
  43:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   
  44:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****      *** Polling mode IO operation ***
  45:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****      =================================
  46:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****      [..]    
  47:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****        (+) Start the ADC peripheral using HAL_ADCEx_InjectedStart() 
  48:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****        (+) Wait for end of conversion using HAL_ADC_PollForConversion(), at this stage
  49:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****            user can specify the value of timeout according to his end application      
  50:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****        (+) To read the ADC converted values, use the HAL_ADCEx_InjectedGetValue() function.
  51:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****        (+) Stop the ADC peripheral using HAL_ADCEx_InjectedStop()
  52:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   
  53:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****      *** Interrupt mode IO operation ***    
  54:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****      ===================================
  55:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****      [..]    
  56:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****        (+) Start the ADC peripheral using HAL_ADCEx_InjectedStart_IT() 
  57:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****        (+) Use HAL_ADC_IRQHandler() called under ADC_IRQHandler() Interrupt subroutine
  58:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****        (+) At ADC end of conversion HAL_ADCEx_InjectedConvCpltCallback() function is executed and u
  59:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****             add his own code by customization of function pointer HAL_ADCEx_InjectedConvCpltCallbac
  60:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****        (+) In case of ADC Error, HAL_ADCEx_InjectedErrorCallback() function is executed and user ca
  61:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****             add his own code by customization of function pointer HAL_ADCEx_InjectedErrorCallback
  62:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****        (+) Stop the ADC peripheral using HAL_ADCEx_InjectedStop_IT()
  63:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****        
  64:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****             
  65:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****      *** DMA mode IO operation ***    
  66:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****      ==============================
  67:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****      [..]    
  68:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****        (+) Start the ADC peripheral using HAL_ADCEx_InjectedStart_DMA(), at this stage the user spe
  69:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****            of data to be transfered at each end of conversion 
  70:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****        (+) At The end of data transfer ba HAL_ADCEx_InjectedConvCpltCallback() function is executed
  71:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****             add his own code by customization of function pointer HAL_ADCEx_InjectedConvCpltCallbac
  72:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****        (+) In case of transfer Error, HAL_ADCEx_InjectedErrorCallback() function is executed and us
  73:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****             add his own code by customization of function pointer HAL_ADCEx_InjectedErrorCallback
  74:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****         (+) Stop the ADC peripheral using HAL_ADCEx_InjectedStop_DMA()
  75:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****         
  76:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****      *** Multi mode ADCs Regular channels configuration ***
  77:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****      ======================================================
  78:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****      [..]        
  79:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****        (+) Select the Multi mode ADC regular channels features (dual or triple mode)  
  80:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****           and configure the DMA mode using HAL_ADCEx_MultiModeConfigChannel() functions. 
  81:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****        (+) Start the ADC peripheral using HAL_ADCEx_MultiModeStart_DMA(), at this stage the user sp
  82:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****            of data to be transfered at each end of conversion           
  83:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****        (+) Read the ADCs converted values using the HAL_ADCEx_MultiModeGetValue() function.
  84:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   
  85:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   
  86:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     @endverbatim
  87:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   ******************************************************************************
  88:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   * @attention
  89:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   *
  90:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   * <h2><center>&copy; COPYRIGHT(c) 2014 STMicroelectronics</center></h2>
  91:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   *
  92:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   * Redistribution and use in source and binary forms, with or without modification,
  93:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   * are permitted provided that the following conditions are met:
  94:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  95:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   *      this list of conditions and the following disclaimer.
  96:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  97:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   *      this list of conditions and the following disclaimer in the documentation
  98:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   *      and/or other materials provided with the distribution.
  99:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
 100:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   *      may be used to endorse or promote products derived from this software
 101:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   *      without specific prior written permission.
 102:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   *
 103:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 104:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 105:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 106:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 107:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 108:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 109:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 110:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 111:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 112:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 113:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   *
 114:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   ******************************************************************************
 115:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   */ 
 116:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** 
 117:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** /* Includes ------------------------------------------------------------------*/
 118:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** #include "stm32f2xx_hal.h"
 119:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** 
 120:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** /** @addtogroup STM32F2xx_HAL_Driver
 121:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   * @{
 122:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   */
 123:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** 
 124:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** /** @defgroup ADCEx 
 125:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   * @brief ADC Extended driver modules
 126:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   * @{
 127:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   */ 
 128:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** 
 129:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** #ifdef HAL_ADC_MODULE_ENABLED
 130:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     
 131:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** /* Private typedef -----------------------------------------------------------*/
 132:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** /* Private define ------------------------------------------------------------*/ 
 133:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** /* Private macro -------------------------------------------------------------*/
 134:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** /* Private variables ---------------------------------------------------------*/
 135:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** /* Private function prototypes -----------------------------------------------*/
 136:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** static void ADC_MultiModeDMAConvCplt(DMA_HandleTypeDef *hdma);
 137:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** static void ADC_MultiModeDMAError(DMA_HandleTypeDef *hdma);
 138:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** static void ADC_MultiModeDMAHalfConvCplt(DMA_HandleTypeDef *hdma); 
 139:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** /* Private functions ---------------------------------------------------------*/
 140:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** 
 141:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** /** @defgroup ADCEx_Private_Functions
 142:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   * @{
 143:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   */ 
 144:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** 
 145:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** /** @defgroup ADCEx_Group1 Extended features functions 
 146:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****  *  @brief    Extended features functions  
 147:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****  *
 148:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** @verbatim   
 149:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****  ===============================================================================
 150:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****                  ##### Extended features functions #####
 151:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****  ===============================================================================  
 152:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     [..]  This section provides functions allowing to:
 153:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****       (+) Start conversion of injected channel.
 154:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****       (+) Stop conversion of injected channel.
 155:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****       (+) Start multimode and enable DMA transfer.
 156:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****       (+) Stop multimode and disable DMA transfer.
 157:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****       (+) Get result of injected channel conversion.
 158:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****       (+) Get result of multimode conversion.
 159:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****       (+) Configure injected channels.
 160:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****       (+) Configure multimode.
 161:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****                
 162:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** @endverbatim
 163:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   * @{
 164:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   */
 165:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** 
 166:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** /**
 167:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   * @brief  Enables the selected ADC software start conversion of the injected channels.
 168:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
 169:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   *         the configuration information for the specified ADC.
 170:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   * @retval HAL status
 171:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   */
 172:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef* hadc)
 173:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** {
  26              		.loc 1 173 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 24
  29              		@ frame_needed = 1, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31 0000 80B4     		push	{r7}
  32              		.cfi_def_cfa_offset 4
  33              		.cfi_offset 7, -4
  34 0002 87B0     		sub	sp, sp, #28
  35              		.cfi_def_cfa_offset 32
  36 0004 00AF     		add	r7, sp, #0
  37              		.cfi_def_cfa_register 7
  38 0006 7860     		str	r0, [r7, #4]
 174:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   uint32_t i = 0, tmp1 = 0, tmp2 = 0;
  39              		.loc 1 174 0
  40 0008 0023     		movs	r3, #0
  41 000a 7B61     		str	r3, [r7, #20]
  42 000c 0023     		movs	r3, #0
  43 000e 3B61     		str	r3, [r7, #16]
  44 0010 0023     		movs	r3, #0
  45 0012 FB60     		str	r3, [r7, #12]
 175:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   
 176:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   /* Process locked */
 177:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
  46              		.loc 1 177 0
  47 0014 7B68     		ldr	r3, [r7, #4]
  48 0016 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
  49 001a 012B     		cmp	r3, #1
  50 001c 01D1     		bne	.L2
  51              		.loc 1 177 0 is_stmt 0 discriminator 1
  52 001e 0223     		movs	r3, #2
  53 0020 89E0     		b	.L3
  54              	.L2:
  55              		.loc 1 177 0 discriminator 2
  56 0022 7B68     		ldr	r3, [r7, #4]
  57 0024 0122     		movs	r2, #1
  58 0026 83F83C20 		strb	r2, [r3, #60]
 178:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   
 179:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   /* Check if a regular conversion is ongoing */
 180:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   if(hadc->State == HAL_ADC_STATE_BUSY_REG)
  59              		.loc 1 180 0 is_stmt 1 discriminator 2
  60 002a 7B68     		ldr	r3, [r7, #4]
  61 002c 93F83D30 		ldrb	r3, [r3, #61]
  62 0030 DBB2     		uxtb	r3, r3
  63 0032 122B     		cmp	r3, #18
  64 0034 04D1     		bne	.L4
 181:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   {
 182:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     /* Change ADC state */
 183:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     hadc->State = HAL_ADC_STATE_BUSY_INJ_REG;  
  65              		.loc 1 183 0
  66 0036 7B68     		ldr	r3, [r7, #4]
  67 0038 3222     		movs	r2, #50
  68 003a 83F83D20 		strb	r2, [r3, #61]
  69 003e 03E0     		b	.L5
  70              	.L4:
 184:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   }
 185:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   else
 186:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   {
 187:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     /* Change ADC state */
 188:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     hadc->State = HAL_ADC_STATE_BUSY_INJ;
  71              		.loc 1 188 0
  72 0040 7B68     		ldr	r3, [r7, #4]
  73 0042 2222     		movs	r2, #34
  74 0044 83F83D20 		strb	r2, [r3, #61]
  75              	.L5:
 189:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   } 
 190:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   
 191:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   /* Check if ADC peripheral is disabled in order to enable it and wait during 
 192:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****      Tstab time the ADC's stabilization */
 193:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
  76              		.loc 1 193 0
  77 0048 7B68     		ldr	r3, [r7, #4]
  78 004a 1B68     		ldr	r3, [r3]
  79 004c 9B68     		ldr	r3, [r3, #8]
  80 004e 03F00103 		and	r3, r3, #1
  81 0052 002B     		cmp	r3, #0
  82 0054 10D1     		bne	.L6
 194:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   {  
 195:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     /* Enable the Peripheral */
 196:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     __HAL_ADC_ENABLE(hadc);
  83              		.loc 1 196 0
  84 0056 7B68     		ldr	r3, [r7, #4]
  85 0058 1B68     		ldr	r3, [r3]
  86 005a 7A68     		ldr	r2, [r7, #4]
  87 005c 1268     		ldr	r2, [r2]
  88 005e 9268     		ldr	r2, [r2, #8]
  89 0060 42F00102 		orr	r2, r2, #1
  90 0064 9A60     		str	r2, [r3, #8]
 197:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     
 198:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     /* Delay inserted to wait during Tstab time the ADC's stabilazation */
 199:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     for(; i <= 540; i++)
  91              		.loc 1 199 0
  92 0066 03E0     		b	.L7
  93              	.L8:
  94              	.LBB8:
  95              	.LBB9:
  96              		.file 2 "D:\\workspace\\console800480\\system/core_cmInstr.h"
   1:D:\workspace\console800480\system\core_cmInstr.h **** /**************************************************************************//**
   2:D:\workspace\console800480\system\core_cmInstr.h ****  * @file     core_cmInstr.h
   3:D:\workspace\console800480\system\core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:D:\workspace\console800480\system\core_cmInstr.h ****  * @version  V2.10
   5:D:\workspace\console800480\system\core_cmInstr.h ****  * @date     19. July 2011
   6:D:\workspace\console800480\system\core_cmInstr.h ****  *
   7:D:\workspace\console800480\system\core_cmInstr.h ****  * @note
   8:D:\workspace\console800480\system\core_cmInstr.h ****  * Copyright (C) 2009-2011 ARM Limited. All rights reserved.
   9:D:\workspace\console800480\system\core_cmInstr.h ****  *
  10:D:\workspace\console800480\system\core_cmInstr.h ****  * @par
  11:D:\workspace\console800480\system\core_cmInstr.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:D:\workspace\console800480\system\core_cmInstr.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:D:\workspace\console800480\system\core_cmInstr.h ****  * within development tools that are supporting such ARM based processors. 
  14:D:\workspace\console800480\system\core_cmInstr.h ****  *
  15:D:\workspace\console800480\system\core_cmInstr.h ****  * @par
  16:D:\workspace\console800480\system\core_cmInstr.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:D:\workspace\console800480\system\core_cmInstr.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:D:\workspace\console800480\system\core_cmInstr.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:D:\workspace\console800480\system\core_cmInstr.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:D:\workspace\console800480\system\core_cmInstr.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:D:\workspace\console800480\system\core_cmInstr.h ****  *
  22:D:\workspace\console800480\system\core_cmInstr.h ****  ******************************************************************************/
  23:D:\workspace\console800480\system\core_cmInstr.h **** 
  24:D:\workspace\console800480\system\core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  25:D:\workspace\console800480\system\core_cmInstr.h **** #define __CORE_CMINSTR_H
  26:D:\workspace\console800480\system\core_cmInstr.h **** 
  27:D:\workspace\console800480\system\core_cmInstr.h **** 
  28:D:\workspace\console800480\system\core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  29:D:\workspace\console800480\system\core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  30:D:\workspace\console800480\system\core_cmInstr.h ****   Access to dedicated instructions
  31:D:\workspace\console800480\system\core_cmInstr.h ****   @{
  32:D:\workspace\console800480\system\core_cmInstr.h **** */
  33:D:\workspace\console800480\system\core_cmInstr.h **** 
  34:D:\workspace\console800480\system\core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  35:D:\workspace\console800480\system\core_cmInstr.h **** /* ARM armcc specific functions */
  36:D:\workspace\console800480\system\core_cmInstr.h **** 
  37:D:\workspace\console800480\system\core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  38:D:\workspace\console800480\system\core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  39:D:\workspace\console800480\system\core_cmInstr.h **** #endif
  40:D:\workspace\console800480\system\core_cmInstr.h **** 
  41:D:\workspace\console800480\system\core_cmInstr.h **** 
  42:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  No Operation
  43:D:\workspace\console800480\system\core_cmInstr.h **** 
  44:D:\workspace\console800480\system\core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  45:D:\workspace\console800480\system\core_cmInstr.h ****  */
  46:D:\workspace\console800480\system\core_cmInstr.h **** #define __NOP                             __nop
  47:D:\workspace\console800480\system\core_cmInstr.h **** 
  48:D:\workspace\console800480\system\core_cmInstr.h **** 
  49:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Wait For Interrupt
  50:D:\workspace\console800480\system\core_cmInstr.h **** 
  51:D:\workspace\console800480\system\core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  52:D:\workspace\console800480\system\core_cmInstr.h ****     until one of a number of events occurs.
  53:D:\workspace\console800480\system\core_cmInstr.h ****  */
  54:D:\workspace\console800480\system\core_cmInstr.h **** #define __WFI                             __wfi
  55:D:\workspace\console800480\system\core_cmInstr.h **** 
  56:D:\workspace\console800480\system\core_cmInstr.h **** 
  57:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Wait For Event
  58:D:\workspace\console800480\system\core_cmInstr.h **** 
  59:D:\workspace\console800480\system\core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  60:D:\workspace\console800480\system\core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  61:D:\workspace\console800480\system\core_cmInstr.h ****  */
  62:D:\workspace\console800480\system\core_cmInstr.h **** #define __WFE                             __wfe
  63:D:\workspace\console800480\system\core_cmInstr.h **** 
  64:D:\workspace\console800480\system\core_cmInstr.h **** 
  65:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Send Event
  66:D:\workspace\console800480\system\core_cmInstr.h **** 
  67:D:\workspace\console800480\system\core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  68:D:\workspace\console800480\system\core_cmInstr.h ****  */
  69:D:\workspace\console800480\system\core_cmInstr.h **** #define __SEV                             __sev
  70:D:\workspace\console800480\system\core_cmInstr.h **** 
  71:D:\workspace\console800480\system\core_cmInstr.h **** 
  72:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  73:D:\workspace\console800480\system\core_cmInstr.h **** 
  74:D:\workspace\console800480\system\core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor, 
  75:D:\workspace\console800480\system\core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or 
  76:D:\workspace\console800480\system\core_cmInstr.h ****     memory, after the instruction has been completed.
  77:D:\workspace\console800480\system\core_cmInstr.h ****  */
  78:D:\workspace\console800480\system\core_cmInstr.h **** #define __ISB()                           __isb(0xF)
  79:D:\workspace\console800480\system\core_cmInstr.h **** 
  80:D:\workspace\console800480\system\core_cmInstr.h **** 
  81:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  82:D:\workspace\console800480\system\core_cmInstr.h **** 
  83:D:\workspace\console800480\system\core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier. 
  84:D:\workspace\console800480\system\core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
  85:D:\workspace\console800480\system\core_cmInstr.h ****  */
  86:D:\workspace\console800480\system\core_cmInstr.h **** #define __DSB()                           __dsb(0xF)
  87:D:\workspace\console800480\system\core_cmInstr.h **** 
  88:D:\workspace\console800480\system\core_cmInstr.h **** 
  89:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Data Memory Barrier
  90:D:\workspace\console800480\system\core_cmInstr.h **** 
  91:D:\workspace\console800480\system\core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before 
  92:D:\workspace\console800480\system\core_cmInstr.h ****     and after the instruction, without ensuring their completion.
  93:D:\workspace\console800480\system\core_cmInstr.h ****  */
  94:D:\workspace\console800480\system\core_cmInstr.h **** #define __DMB()                           __dmb(0xF)
  95:D:\workspace\console800480\system\core_cmInstr.h **** 
  96:D:\workspace\console800480\system\core_cmInstr.h **** 
  97:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
  98:D:\workspace\console800480\system\core_cmInstr.h **** 
  99:D:\workspace\console800480\system\core_cmInstr.h ****     This function reverses the byte order in integer value.
 100:D:\workspace\console800480\system\core_cmInstr.h **** 
 101:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]    value  Value to reverse
 102:D:\workspace\console800480\system\core_cmInstr.h ****     \return               Reversed value
 103:D:\workspace\console800480\system\core_cmInstr.h ****  */
 104:D:\workspace\console800480\system\core_cmInstr.h **** #define __REV                             __rev
 105:D:\workspace\console800480\system\core_cmInstr.h **** 
 106:D:\workspace\console800480\system\core_cmInstr.h **** 
 107:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 108:D:\workspace\console800480\system\core_cmInstr.h **** 
 109:D:\workspace\console800480\system\core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 110:D:\workspace\console800480\system\core_cmInstr.h **** 
 111:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]    value  Value to reverse
 112:D:\workspace\console800480\system\core_cmInstr.h ****     \return               Reversed value
 113:D:\workspace\console800480\system\core_cmInstr.h ****  */
 114:D:\workspace\console800480\system\core_cmInstr.h **** static __INLINE __ASM uint32_t __REV16(uint32_t value)
 115:D:\workspace\console800480\system\core_cmInstr.h **** {
 116:D:\workspace\console800480\system\core_cmInstr.h ****   rev16 r0, r0
 117:D:\workspace\console800480\system\core_cmInstr.h ****   bx lr
 118:D:\workspace\console800480\system\core_cmInstr.h **** }
 119:D:\workspace\console800480\system\core_cmInstr.h **** 
 120:D:\workspace\console800480\system\core_cmInstr.h **** 
 121:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 122:D:\workspace\console800480\system\core_cmInstr.h **** 
 123:D:\workspace\console800480\system\core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 124:D:\workspace\console800480\system\core_cmInstr.h **** 
 125:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]    value  Value to reverse
 126:D:\workspace\console800480\system\core_cmInstr.h ****     \return               Reversed value
 127:D:\workspace\console800480\system\core_cmInstr.h ****  */
 128:D:\workspace\console800480\system\core_cmInstr.h **** static __INLINE __ASM int32_t __REVSH(int32_t value)
 129:D:\workspace\console800480\system\core_cmInstr.h **** {
 130:D:\workspace\console800480\system\core_cmInstr.h ****   revsh r0, r0
 131:D:\workspace\console800480\system\core_cmInstr.h ****   bx lr
 132:D:\workspace\console800480\system\core_cmInstr.h **** }
 133:D:\workspace\console800480\system\core_cmInstr.h **** 
 134:D:\workspace\console800480\system\core_cmInstr.h **** 
 135:D:\workspace\console800480\system\core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 136:D:\workspace\console800480\system\core_cmInstr.h **** 
 137:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Reverse bit order of value
 138:D:\workspace\console800480\system\core_cmInstr.h **** 
 139:D:\workspace\console800480\system\core_cmInstr.h ****     This function reverses the bit order of the given value.
 140:D:\workspace\console800480\system\core_cmInstr.h **** 
 141:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]    value  Value to reverse
 142:D:\workspace\console800480\system\core_cmInstr.h ****     \return               Reversed value
 143:D:\workspace\console800480\system\core_cmInstr.h ****  */
 144:D:\workspace\console800480\system\core_cmInstr.h **** #define __RBIT                            __rbit
 145:D:\workspace\console800480\system\core_cmInstr.h **** 
 146:D:\workspace\console800480\system\core_cmInstr.h **** 
 147:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 148:D:\workspace\console800480\system\core_cmInstr.h **** 
 149:D:\workspace\console800480\system\core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 150:D:\workspace\console800480\system\core_cmInstr.h **** 
 151:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 152:D:\workspace\console800480\system\core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 153:D:\workspace\console800480\system\core_cmInstr.h ****  */
 154:D:\workspace\console800480\system\core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 155:D:\workspace\console800480\system\core_cmInstr.h **** 
 156:D:\workspace\console800480\system\core_cmInstr.h **** 
 157:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 158:D:\workspace\console800480\system\core_cmInstr.h **** 
 159:D:\workspace\console800480\system\core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 160:D:\workspace\console800480\system\core_cmInstr.h **** 
 161:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 162:D:\workspace\console800480\system\core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 163:D:\workspace\console800480\system\core_cmInstr.h ****  */
 164:D:\workspace\console800480\system\core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 165:D:\workspace\console800480\system\core_cmInstr.h **** 
 166:D:\workspace\console800480\system\core_cmInstr.h **** 
 167:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 168:D:\workspace\console800480\system\core_cmInstr.h **** 
 169:D:\workspace\console800480\system\core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 170:D:\workspace\console800480\system\core_cmInstr.h **** 
 171:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 172:D:\workspace\console800480\system\core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 173:D:\workspace\console800480\system\core_cmInstr.h ****  */
 174:D:\workspace\console800480\system\core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 175:D:\workspace\console800480\system\core_cmInstr.h **** 
 176:D:\workspace\console800480\system\core_cmInstr.h **** 
 177:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 178:D:\workspace\console800480\system\core_cmInstr.h **** 
 179:D:\workspace\console800480\system\core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 180:D:\workspace\console800480\system\core_cmInstr.h **** 
 181:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]  value  Value to store
 182:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 183:D:\workspace\console800480\system\core_cmInstr.h ****     \return          0  Function succeeded
 184:D:\workspace\console800480\system\core_cmInstr.h ****     \return          1  Function failed
 185:D:\workspace\console800480\system\core_cmInstr.h ****  */
 186:D:\workspace\console800480\system\core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 187:D:\workspace\console800480\system\core_cmInstr.h **** 
 188:D:\workspace\console800480\system\core_cmInstr.h **** 
 189:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 190:D:\workspace\console800480\system\core_cmInstr.h **** 
 191:D:\workspace\console800480\system\core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 192:D:\workspace\console800480\system\core_cmInstr.h **** 
 193:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]  value  Value to store
 194:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 195:D:\workspace\console800480\system\core_cmInstr.h ****     \return          0  Function succeeded
 196:D:\workspace\console800480\system\core_cmInstr.h ****     \return          1  Function failed
 197:D:\workspace\console800480\system\core_cmInstr.h ****  */
 198:D:\workspace\console800480\system\core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 199:D:\workspace\console800480\system\core_cmInstr.h **** 
 200:D:\workspace\console800480\system\core_cmInstr.h **** 
 201:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 202:D:\workspace\console800480\system\core_cmInstr.h **** 
 203:D:\workspace\console800480\system\core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 204:D:\workspace\console800480\system\core_cmInstr.h **** 
 205:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]  value  Value to store
 206:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 207:D:\workspace\console800480\system\core_cmInstr.h ****     \return          0  Function succeeded
 208:D:\workspace\console800480\system\core_cmInstr.h ****     \return          1  Function failed
 209:D:\workspace\console800480\system\core_cmInstr.h ****  */
 210:D:\workspace\console800480\system\core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 211:D:\workspace\console800480\system\core_cmInstr.h **** 
 212:D:\workspace\console800480\system\core_cmInstr.h **** 
 213:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Remove the exclusive lock
 214:D:\workspace\console800480\system\core_cmInstr.h **** 
 215:D:\workspace\console800480\system\core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 216:D:\workspace\console800480\system\core_cmInstr.h **** 
 217:D:\workspace\console800480\system\core_cmInstr.h ****  */
 218:D:\workspace\console800480\system\core_cmInstr.h **** #define __CLREX                           __clrex
 219:D:\workspace\console800480\system\core_cmInstr.h **** 
 220:D:\workspace\console800480\system\core_cmInstr.h **** 
 221:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Signed Saturate
 222:D:\workspace\console800480\system\core_cmInstr.h **** 
 223:D:\workspace\console800480\system\core_cmInstr.h ****     This function saturates a signed value.
 224:D:\workspace\console800480\system\core_cmInstr.h **** 
 225:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]  value  Value to be saturated
 226:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 227:D:\workspace\console800480\system\core_cmInstr.h ****     \return             Saturated value
 228:D:\workspace\console800480\system\core_cmInstr.h ****  */
 229:D:\workspace\console800480\system\core_cmInstr.h **** #define __SSAT                            __ssat
 230:D:\workspace\console800480\system\core_cmInstr.h **** 
 231:D:\workspace\console800480\system\core_cmInstr.h **** 
 232:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Unsigned Saturate
 233:D:\workspace\console800480\system\core_cmInstr.h **** 
 234:D:\workspace\console800480\system\core_cmInstr.h ****     This function saturates an unsigned value.
 235:D:\workspace\console800480\system\core_cmInstr.h **** 
 236:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]  value  Value to be saturated
 237:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 238:D:\workspace\console800480\system\core_cmInstr.h ****     \return             Saturated value
 239:D:\workspace\console800480\system\core_cmInstr.h ****  */
 240:D:\workspace\console800480\system\core_cmInstr.h **** #define __USAT                            __usat
 241:D:\workspace\console800480\system\core_cmInstr.h **** 
 242:D:\workspace\console800480\system\core_cmInstr.h **** 
 243:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  Count leading zeros
 244:D:\workspace\console800480\system\core_cmInstr.h **** 
 245:D:\workspace\console800480\system\core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 246:D:\workspace\console800480\system\core_cmInstr.h **** 
 247:D:\workspace\console800480\system\core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 248:D:\workspace\console800480\system\core_cmInstr.h ****     \return             number of leading zeros in value
 249:D:\workspace\console800480\system\core_cmInstr.h ****  */
 250:D:\workspace\console800480\system\core_cmInstr.h **** #define __CLZ                             __clz 
 251:D:\workspace\console800480\system\core_cmInstr.h **** 
 252:D:\workspace\console800480\system\core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) */
 253:D:\workspace\console800480\system\core_cmInstr.h **** 
 254:D:\workspace\console800480\system\core_cmInstr.h **** 
 255:D:\workspace\console800480\system\core_cmInstr.h **** 
 256:D:\workspace\console800480\system\core_cmInstr.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 257:D:\workspace\console800480\system\core_cmInstr.h **** /* IAR iccarm specific functions */
 258:D:\workspace\console800480\system\core_cmInstr.h **** 
 259:D:\workspace\console800480\system\core_cmInstr.h **** #include <cmsis_iar.h>
 260:D:\workspace\console800480\system\core_cmInstr.h **** 
 261:D:\workspace\console800480\system\core_cmInstr.h **** 
 262:D:\workspace\console800480\system\core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 263:D:\workspace\console800480\system\core_cmInstr.h **** /* GNU gcc specific functions */
 264:D:\workspace\console800480\system\core_cmInstr.h **** 
 265:D:\workspace\console800480\system\core_cmInstr.h **** /** \brief  No Operation
 266:D:\workspace\console800480\system\core_cmInstr.h **** 
 267:D:\workspace\console800480\system\core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 268:D:\workspace\console800480\system\core_cmInstr.h ****  */
 269:D:\workspace\console800480\system\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __NOP(void)
 270:D:\workspace\console800480\system\core_cmInstr.h **** {
 271:D:\workspace\console800480\system\core_cmInstr.h ****   __ASM volatile ("nop");
  97              		.loc 2 271 0 discriminator 2
  98              	@ 271 "D:\workspace\console800480\system/core_cmInstr.h" 1
  99 0068 00BF     		nop
 100              	@ 0 "" 2
 101              		.thumb
 102              	.LBE9:
 103              	.LBE8:
 104              		.loc 1 199 0 discriminator 2
 105 006a 7B69     		ldr	r3, [r7, #20]
 106 006c 0133     		adds	r3, r3, #1
 107 006e 7B61     		str	r3, [r7, #20]
 108              	.L7:
 109              		.loc 1 199 0 is_stmt 0 discriminator 1
 110 0070 7B69     		ldr	r3, [r7, #20]
 111 0072 B3F5077F 		cmp	r3, #540
 112 0076 F7D9     		bls	.L8
 113              	.L6:
 200:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     {
 201:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****       __NOP();
 202:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     }
 203:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   }
 204:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   
 205:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   /* Check if Multimode enabled */
 206:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 114              		.loc 1 206 0 is_stmt 1
 115 0078 4FF40C53 		mov	r3, #8960
 116 007c C4F20103 		movt	r3, 16385
 117 0080 5B68     		ldr	r3, [r3, #4]
 118 0082 03F01F03 		and	r3, r3, #31
 119 0086 002B     		cmp	r3, #0
 120 0088 24D1     		bne	.L9
 207:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   {
 208:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 121              		.loc 1 208 0
 122 008a 7B68     		ldr	r3, [r7, #4]
 123 008c 1B68     		ldr	r3, [r3]
 124 008e 9B68     		ldr	r3, [r3, #8]
 125 0090 03F44013 		and	r3, r3, #3145728
 126 0094 002B     		cmp	r3, #0
 127 0096 14BF     		ite	ne
 128 0098 0023     		movne	r3, #0
 129 009a 0123     		moveq	r3, #1
 130 009c DBB2     		uxtb	r3, r3
 131 009e 3B61     		str	r3, [r7, #16]
 209:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 132              		.loc 1 209 0
 133 00a0 7B68     		ldr	r3, [r7, #4]
 134 00a2 1B68     		ldr	r3, [r3]
 135 00a4 5B68     		ldr	r3, [r3, #4]
 136 00a6 03F48063 		and	r3, r3, #1024
 137 00aa 002B     		cmp	r3, #0
 138 00ac 14BF     		ite	ne
 139 00ae 0023     		movne	r3, #0
 140 00b0 0123     		moveq	r3, #1
 141 00b2 DBB2     		uxtb	r3, r3
 142 00b4 FB60     		str	r3, [r7, #12]
 210:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     if(tmp1 && tmp2)
 143              		.loc 1 210 0
 144 00b6 3B69     		ldr	r3, [r7, #16]
 145 00b8 002B     		cmp	r3, #0
 146 00ba 37D0     		beq	.L11
 147              		.loc 1 210 0 is_stmt 0 discriminator 1
 148 00bc FB68     		ldr	r3, [r7, #12]
 149 00be 002B     		cmp	r3, #0
 150 00c0 34D0     		beq	.L11
 211:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     {
 212:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****       /* Enable the selected ADC software conversion for injected group */
 213:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****       hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 151              		.loc 1 213 0 is_stmt 1
 152 00c2 7B68     		ldr	r3, [r7, #4]
 153 00c4 1B68     		ldr	r3, [r3]
 154 00c6 7A68     		ldr	r2, [r7, #4]
 155 00c8 1268     		ldr	r2, [r2]
 156 00ca 9268     		ldr	r2, [r2, #8]
 157 00cc 42F48002 		orr	r2, r2, #4194304
 158 00d0 9A60     		str	r2, [r3, #8]
 159 00d2 2BE0     		b	.L11
 160              	.L9:
 214:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     }
 215:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   }
 216:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   else
 217:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   {
 218:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 161              		.loc 1 218 0
 162 00d4 7B68     		ldr	r3, [r7, #4]
 163 00d6 1B68     		ldr	r3, [r3]
 164 00d8 9B68     		ldr	r3, [r3, #8]
 165 00da 03F44013 		and	r3, r3, #3145728
 166 00de 002B     		cmp	r3, #0
 167 00e0 14BF     		ite	ne
 168 00e2 0023     		movne	r3, #0
 169 00e4 0123     		moveq	r3, #1
 170 00e6 DBB2     		uxtb	r3, r3
 171 00e8 3B61     		str	r3, [r7, #16]
 219:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 172              		.loc 1 219 0
 173 00ea 7B68     		ldr	r3, [r7, #4]
 174 00ec 1B68     		ldr	r3, [r3]
 175 00ee 5B68     		ldr	r3, [r3, #4]
 176 00f0 03F48063 		and	r3, r3, #1024
 177 00f4 002B     		cmp	r3, #0
 178 00f6 14BF     		ite	ne
 179 00f8 0023     		movne	r3, #0
 180 00fa 0123     		moveq	r3, #1
 181 00fc DBB2     		uxtb	r3, r3
 182 00fe FB60     		str	r3, [r7, #12]
 220:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     if((hadc->Instance == ADC1) && tmp1 && tmp2)  
 183              		.loc 1 220 0
 184 0100 7B68     		ldr	r3, [r7, #4]
 185 0102 1A68     		ldr	r2, [r3]
 186 0104 4FF40053 		mov	r3, #8192
 187 0108 C4F20103 		movt	r3, 16385
 188 010c 9A42     		cmp	r2, r3
 189 010e 0DD1     		bne	.L11
 190              		.loc 1 220 0 is_stmt 0 discriminator 1
 191 0110 3B69     		ldr	r3, [r7, #16]
 192 0112 002B     		cmp	r3, #0
 193 0114 0AD0     		beq	.L11
 194 0116 FB68     		ldr	r3, [r7, #12]
 195 0118 002B     		cmp	r3, #0
 196 011a 07D0     		beq	.L11
 221:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     {
 222:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****       /* Enable the selected ADC software conversion for injected group */
 223:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****       hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 197              		.loc 1 223 0 is_stmt 1
 198 011c 7B68     		ldr	r3, [r7, #4]
 199 011e 1B68     		ldr	r3, [r3]
 200 0120 7A68     		ldr	r2, [r7, #4]
 201 0122 1268     		ldr	r2, [r2]
 202 0124 9268     		ldr	r2, [r2, #8]
 203 0126 42F48002 		orr	r2, r2, #4194304
 204 012a 9A60     		str	r2, [r3, #8]
 205              	.L11:
 224:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     }
 225:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   }
 226:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   
 227:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   /* Process unlocked */
 228:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 206              		.loc 1 228 0
 207 012c 7B68     		ldr	r3, [r7, #4]
 208 012e 0022     		movs	r2, #0
 209 0130 83F83C20 		strb	r2, [r3, #60]
 229:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   
 230:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   /* Return function status */
 231:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   return HAL_OK;
 210              		.loc 1 231 0
 211 0134 0023     		movs	r3, #0
 212              	.L3:
 232:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** }
 213              		.loc 1 232 0
 214 0136 1846     		mov	r0, r3
 215 0138 1C37     		adds	r7, r7, #28
 216 013a BD46     		mov	sp, r7
 217              		@ sp needed
 218 013c 5DF8047B 		ldr	r7, [sp], #4
 219 0140 7047     		bx	lr
 220              		.cfi_endproc
 221              	.LFE55:
 223 0142 00BF     		.align	2
 224              		.global	HAL_ADCEx_InjectedStart_IT
 225              		.thumb
 226              		.thumb_func
 228              	HAL_ADCEx_InjectedStart_IT:
 229              	.LFB56:
 233:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** 
 234:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** /**
 235:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   * @brief  Enables the interrupt and starts ADC conversion of injected channels.
 236:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
 237:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   *         the configuration information for the specified ADC.
 238:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   *
 239:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   * @retval HAL status.
 240:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   */
 241:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef* hadc)
 242:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** {
 230              		.loc 1 242 0
 231              		.cfi_startproc
 232              		@ args = 0, pretend = 0, frame = 24
 233              		@ frame_needed = 1, uses_anonymous_args = 0
 234              		@ link register save eliminated.
 235 0144 80B4     		push	{r7}
 236              		.cfi_def_cfa_offset 4
 237              		.cfi_offset 7, -4
 238 0146 87B0     		sub	sp, sp, #28
 239              		.cfi_def_cfa_offset 32
 240 0148 00AF     		add	r7, sp, #0
 241              		.cfi_def_cfa_register 7
 242 014a 7860     		str	r0, [r7, #4]
 243:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   uint32_t i = 0, tmp1 = 0, tmp2 =0;
 243              		.loc 1 243 0
 244 014c 0023     		movs	r3, #0
 245 014e 7B61     		str	r3, [r7, #20]
 246 0150 0023     		movs	r3, #0
 247 0152 3B61     		str	r3, [r7, #16]
 248 0154 0023     		movs	r3, #0
 249 0156 FB60     		str	r3, [r7, #12]
 244:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   
 245:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   /* Process locked */
 246:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 250              		.loc 1 246 0
 251 0158 7B68     		ldr	r3, [r7, #4]
 252 015a 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 253 015e 012B     		cmp	r3, #1
 254 0160 01D1     		bne	.L13
 255              		.loc 1 246 0 is_stmt 0 discriminator 1
 256 0162 0223     		movs	r3, #2
 257 0164 9CE0     		b	.L14
 258              	.L13:
 259              		.loc 1 246 0 discriminator 2
 260 0166 7B68     		ldr	r3, [r7, #4]
 261 0168 0122     		movs	r2, #1
 262 016a 83F83C20 		strb	r2, [r3, #60]
 247:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   
 248:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   /* Check if a regular conversion is ongoing */
 249:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   if(hadc->State == HAL_ADC_STATE_BUSY_REG)
 263              		.loc 1 249 0 is_stmt 1 discriminator 2
 264 016e 7B68     		ldr	r3, [r7, #4]
 265 0170 93F83D30 		ldrb	r3, [r3, #61]
 266 0174 DBB2     		uxtb	r3, r3
 267 0176 122B     		cmp	r3, #18
 268 0178 04D1     		bne	.L15
 250:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   {
 251:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     /* Change ADC state */
 252:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     hadc->State = HAL_ADC_STATE_BUSY_INJ_REG;  
 269              		.loc 1 252 0
 270 017a 7B68     		ldr	r3, [r7, #4]
 271 017c 3222     		movs	r2, #50
 272 017e 83F83D20 		strb	r2, [r3, #61]
 273 0182 03E0     		b	.L16
 274              	.L15:
 253:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   }
 254:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   else
 255:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   {
 256:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     /* Change ADC state */
 257:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     hadc->State = HAL_ADC_STATE_BUSY_INJ;
 275              		.loc 1 257 0
 276 0184 7B68     		ldr	r3, [r7, #4]
 277 0186 2222     		movs	r2, #34
 278 0188 83F83D20 		strb	r2, [r3, #61]
 279              	.L16:
 258:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   }
 259:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   
 260:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   /* Set ADC error code to none */
 261:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   hadc->ErrorCode = HAL_ADC_ERROR_NONE;
 280              		.loc 1 261 0
 281 018c 7B68     		ldr	r3, [r7, #4]
 282 018e 0022     		movs	r2, #0
 283 0190 1A64     		str	r2, [r3, #64]
 262:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   
 263:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   /* Check if ADC peripheral is disabled in order to enable it and wait during 
 264:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****      Tstab time the ADC's stabilization */
 265:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 284              		.loc 1 265 0
 285 0192 7B68     		ldr	r3, [r7, #4]
 286 0194 1B68     		ldr	r3, [r3]
 287 0196 9B68     		ldr	r3, [r3, #8]
 288 0198 03F00103 		and	r3, r3, #1
 289 019c 002B     		cmp	r3, #0
 290 019e 10D1     		bne	.L17
 266:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   {  
 267:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     /* Enable the Peripheral */
 268:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     __HAL_ADC_ENABLE(hadc);
 291              		.loc 1 268 0
 292 01a0 7B68     		ldr	r3, [r7, #4]
 293 01a2 1B68     		ldr	r3, [r3]
 294 01a4 7A68     		ldr	r2, [r7, #4]
 295 01a6 1268     		ldr	r2, [r2]
 296 01a8 9268     		ldr	r2, [r2, #8]
 297 01aa 42F00102 		orr	r2, r2, #1
 298 01ae 9A60     		str	r2, [r3, #8]
 269:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     
 270:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     /* Delay inserted to wait during Tstab time the ADC's stabilazation */
 271:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     for(; i <= 540; i++)
 299              		.loc 1 271 0
 300 01b0 03E0     		b	.L18
 301              	.L19:
 302              	.LBB10:
 303              	.LBB11:
 304              		.loc 2 271 0 discriminator 2
 305              	@ 271 "D:\workspace\console800480\system/core_cmInstr.h" 1
 306 01b2 00BF     		nop
 307              	@ 0 "" 2
 308              		.thumb
 309              	.LBE11:
 310              	.LBE10:
 311              		.loc 1 271 0 discriminator 2
 312 01b4 7B69     		ldr	r3, [r7, #20]
 313 01b6 0133     		adds	r3, r3, #1
 314 01b8 7B61     		str	r3, [r7, #20]
 315              	.L18:
 316              		.loc 1 271 0 is_stmt 0 discriminator 1
 317 01ba 7B69     		ldr	r3, [r7, #20]
 318 01bc B3F5077F 		cmp	r3, #540
 319 01c0 F7D9     		bls	.L19
 320              	.L17:
 272:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     {
 273:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****       __NOP();
 274:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     }
 275:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   }
 276:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   
 277:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   /* Enable the ADC end of conversion interrupt for injected group */
 278:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 321              		.loc 1 278 0 is_stmt 1
 322 01c2 7B68     		ldr	r3, [r7, #4]
 323 01c4 1B68     		ldr	r3, [r3]
 324 01c6 7A68     		ldr	r2, [r7, #4]
 325 01c8 1268     		ldr	r2, [r2]
 326 01ca 5268     		ldr	r2, [r2, #4]
 327 01cc 42F08002 		orr	r2, r2, #128
 328 01d0 5A60     		str	r2, [r3, #4]
 279:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   
 280:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   /* Enable the ADC overrun interrupt */
 281:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 329              		.loc 1 281 0
 330 01d2 7B68     		ldr	r3, [r7, #4]
 331 01d4 1B68     		ldr	r3, [r3]
 332 01d6 7A68     		ldr	r2, [r7, #4]
 333 01d8 1268     		ldr	r2, [r2]
 334 01da 5268     		ldr	r2, [r2, #4]
 335 01dc 42F08062 		orr	r2, r2, #67108864
 336 01e0 5A60     		str	r2, [r3, #4]
 282:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   
 283:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   /* Check if Multimode enabled */
 284:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 337              		.loc 1 284 0
 338 01e2 4FF40C53 		mov	r3, #8960
 339 01e6 C4F20103 		movt	r3, 16385
 340 01ea 5B68     		ldr	r3, [r3, #4]
 341 01ec 03F01F03 		and	r3, r3, #31
 342 01f0 002B     		cmp	r3, #0
 343 01f2 24D1     		bne	.L20
 285:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   {
 286:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 344              		.loc 1 286 0
 345 01f4 7B68     		ldr	r3, [r7, #4]
 346 01f6 1B68     		ldr	r3, [r3]
 347 01f8 9B68     		ldr	r3, [r3, #8]
 348 01fa 03F44013 		and	r3, r3, #3145728
 349 01fe 002B     		cmp	r3, #0
 350 0200 14BF     		ite	ne
 351 0202 0023     		movne	r3, #0
 352 0204 0123     		moveq	r3, #1
 353 0206 DBB2     		uxtb	r3, r3
 354 0208 3B61     		str	r3, [r7, #16]
 287:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 355              		.loc 1 287 0
 356 020a 7B68     		ldr	r3, [r7, #4]
 357 020c 1B68     		ldr	r3, [r3]
 358 020e 5B68     		ldr	r3, [r3, #4]
 359 0210 03F48063 		and	r3, r3, #1024
 360 0214 002B     		cmp	r3, #0
 361 0216 14BF     		ite	ne
 362 0218 0023     		movne	r3, #0
 363 021a 0123     		moveq	r3, #1
 364 021c DBB2     		uxtb	r3, r3
 365 021e FB60     		str	r3, [r7, #12]
 288:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     if(tmp1 && tmp2)
 366              		.loc 1 288 0
 367 0220 3B69     		ldr	r3, [r7, #16]
 368 0222 002B     		cmp	r3, #0
 369 0224 37D0     		beq	.L22
 370              		.loc 1 288 0 is_stmt 0 discriminator 1
 371 0226 FB68     		ldr	r3, [r7, #12]
 372 0228 002B     		cmp	r3, #0
 373 022a 34D0     		beq	.L22
 289:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     {
 290:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****       /* Enable the selected ADC software conversion for injected group */
 291:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****       hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 374              		.loc 1 291 0 is_stmt 1
 375 022c 7B68     		ldr	r3, [r7, #4]
 376 022e 1B68     		ldr	r3, [r3]
 377 0230 7A68     		ldr	r2, [r7, #4]
 378 0232 1268     		ldr	r2, [r2]
 379 0234 9268     		ldr	r2, [r2, #8]
 380 0236 42F48002 		orr	r2, r2, #4194304
 381 023a 9A60     		str	r2, [r3, #8]
 382 023c 2BE0     		b	.L22
 383              	.L20:
 292:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     }
 293:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   }
 294:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   else
 295:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   {
 296:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 384              		.loc 1 296 0
 385 023e 7B68     		ldr	r3, [r7, #4]
 386 0240 1B68     		ldr	r3, [r3]
 387 0242 9B68     		ldr	r3, [r3, #8]
 388 0244 03F44013 		and	r3, r3, #3145728
 389 0248 002B     		cmp	r3, #0
 390 024a 14BF     		ite	ne
 391 024c 0023     		movne	r3, #0
 392 024e 0123     		moveq	r3, #1
 393 0250 DBB2     		uxtb	r3, r3
 394 0252 3B61     		str	r3, [r7, #16]
 297:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 395              		.loc 1 297 0
 396 0254 7B68     		ldr	r3, [r7, #4]
 397 0256 1B68     		ldr	r3, [r3]
 398 0258 5B68     		ldr	r3, [r3, #4]
 399 025a 03F48063 		and	r3, r3, #1024
 400 025e 002B     		cmp	r3, #0
 401 0260 14BF     		ite	ne
 402 0262 0023     		movne	r3, #0
 403 0264 0123     		moveq	r3, #1
 404 0266 DBB2     		uxtb	r3, r3
 405 0268 FB60     		str	r3, [r7, #12]
 298:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     if((hadc->Instance == ADC1) && tmp1 && tmp2)  
 406              		.loc 1 298 0
 407 026a 7B68     		ldr	r3, [r7, #4]
 408 026c 1A68     		ldr	r2, [r3]
 409 026e 4FF40053 		mov	r3, #8192
 410 0272 C4F20103 		movt	r3, 16385
 411 0276 9A42     		cmp	r2, r3
 412 0278 0DD1     		bne	.L22
 413              		.loc 1 298 0 is_stmt 0 discriminator 1
 414 027a 3B69     		ldr	r3, [r7, #16]
 415 027c 002B     		cmp	r3, #0
 416 027e 0AD0     		beq	.L22
 417 0280 FB68     		ldr	r3, [r7, #12]
 418 0282 002B     		cmp	r3, #0
 419 0284 07D0     		beq	.L22
 299:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     {
 300:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****       /* Enable the selected ADC software conversion for injected group */
 301:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****       hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 420              		.loc 1 301 0 is_stmt 1
 421 0286 7B68     		ldr	r3, [r7, #4]
 422 0288 1B68     		ldr	r3, [r3]
 423 028a 7A68     		ldr	r2, [r7, #4]
 424 028c 1268     		ldr	r2, [r2]
 425 028e 9268     		ldr	r2, [r2, #8]
 426 0290 42F48002 		orr	r2, r2, #4194304
 427 0294 9A60     		str	r2, [r3, #8]
 428              	.L22:
 302:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     }
 303:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   }
 304:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   
 305:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   /* Process unlocked */
 306:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 429              		.loc 1 306 0
 430 0296 7B68     		ldr	r3, [r7, #4]
 431 0298 0022     		movs	r2, #0
 432 029a 83F83C20 		strb	r2, [r3, #60]
 307:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   
 308:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   /* Return function status */
 309:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   return HAL_OK;
 433              		.loc 1 309 0
 434 029e 0023     		movs	r3, #0
 435              	.L14:
 310:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** }
 436              		.loc 1 310 0
 437 02a0 1846     		mov	r0, r3
 438 02a2 1C37     		adds	r7, r7, #28
 439 02a4 BD46     		mov	sp, r7
 440              		@ sp needed
 441 02a6 5DF8047B 		ldr	r7, [sp], #4
 442 02aa 7047     		bx	lr
 443              		.cfi_endproc
 444              	.LFE56:
 446              		.align	2
 447              		.global	HAL_ADCEx_InjectedStop
 448              		.thumb
 449              		.thumb_func
 451              	HAL_ADCEx_InjectedStop:
 452              	.LFB57:
 311:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** 
 312:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** /**
 313:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   * @brief  Disables ADC and stop conversion of injected channels.
 314:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   *
 315:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   * @note   Caution: This function will stop also regular channels.  
 316:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   *
 317:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
 318:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   *         the configuration information for the specified ADC.
 319:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   * @retval HAL status.
 320:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   */
 321:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_InjectedStop(ADC_HandleTypeDef* hadc)
 322:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** {
 453              		.loc 1 322 0
 454              		.cfi_startproc
 455              		@ args = 0, pretend = 0, frame = 8
 456              		@ frame_needed = 1, uses_anonymous_args = 0
 457              		@ link register save eliminated.
 458 02ac 80B4     		push	{r7}
 459              		.cfi_def_cfa_offset 4
 460              		.cfi_offset 7, -4
 461 02ae 83B0     		sub	sp, sp, #12
 462              		.cfi_def_cfa_offset 16
 463 02b0 00AF     		add	r7, sp, #0
 464              		.cfi_def_cfa_register 7
 465 02b2 7860     		str	r0, [r7, #4]
 323:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   /* Disable the Peripheral */
 324:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   __HAL_ADC_DISABLE(hadc);
 466              		.loc 1 324 0
 467 02b4 7B68     		ldr	r3, [r7, #4]
 468 02b6 1B68     		ldr	r3, [r3]
 469 02b8 7A68     		ldr	r2, [r7, #4]
 470 02ba 1268     		ldr	r2, [r2]
 471 02bc 9268     		ldr	r2, [r2, #8]
 472 02be 22F00102 		bic	r2, r2, #1
 473 02c2 9A60     		str	r2, [r3, #8]
 325:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   
 326:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   /* Change ADC state */
 327:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   hadc->State = HAL_ADC_STATE_READY;
 474              		.loc 1 327 0
 475 02c4 7B68     		ldr	r3, [r7, #4]
 476 02c6 0122     		movs	r2, #1
 477 02c8 83F83D20 		strb	r2, [r3, #61]
 328:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   
 329:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   /* Return function status */
 330:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   return HAL_OK;
 478              		.loc 1 330 0
 479 02cc 0023     		movs	r3, #0
 331:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** }
 480              		.loc 1 331 0
 481 02ce 1846     		mov	r0, r3
 482 02d0 0C37     		adds	r7, r7, #12
 483 02d2 BD46     		mov	sp, r7
 484              		@ sp needed
 485 02d4 5DF8047B 		ldr	r7, [sp], #4
 486 02d8 7047     		bx	lr
 487              		.cfi_endproc
 488              	.LFE57:
 490 02da 00BF     		.align	2
 491              		.global	HAL_ADCEx_InjectedPollForConversion
 492              		.thumb
 493              		.thumb_func
 495              	HAL_ADCEx_InjectedPollForConversion:
 496              	.LFB58:
 332:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** 
 333:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** /**
 334:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   * @brief  Poll for injected conversion complete
 335:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
 336:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   *         the configuration information for the specified ADC.
 337:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   * @param  Timeout: Timeout value in millisecond.  
 338:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   * @retval HAL status
 339:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   */
 340:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_InjectedPollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
 341:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** {
 497              		.loc 1 341 0
 498              		.cfi_startproc
 499              		@ args = 0, pretend = 0, frame = 16
 500              		@ frame_needed = 1, uses_anonymous_args = 0
 501 02dc 80B5     		push	{r7, lr}
 502              		.cfi_def_cfa_offset 8
 503              		.cfi_offset 7, -8
 504              		.cfi_offset 14, -4
 505 02de 84B0     		sub	sp, sp, #16
 506              		.cfi_def_cfa_offset 24
 507 02e0 00AF     		add	r7, sp, #0
 508              		.cfi_def_cfa_register 7
 509 02e2 7860     		str	r0, [r7, #4]
 510 02e4 3960     		str	r1, [r7]
 342:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   uint32_t timeout;
 343:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****  
 344:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   /* Get timeout */
 345:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   timeout = HAL_GetTick() + Timeout;  
 511              		.loc 1 345 0
 512 02e6 FFF7FEFF 		bl	HAL_GetTick
 513 02ea 0246     		mov	r2, r0
 514 02ec 3B68     		ldr	r3, [r7]
 515 02ee 1344     		add	r3, r3, r2
 516 02f0 FB60     		str	r3, [r7, #12]
 346:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** 
 347:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   /* Check End of conversion flag */
 348:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC)))
 517              		.loc 1 348 0
 518 02f2 13E0     		b	.L26
 519              	.L28:
 349:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   {
 350:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     /* Check for the Timeout */
 351:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     if(Timeout != HAL_MAX_DELAY)
 520              		.loc 1 351 0
 521 02f4 3B68     		ldr	r3, [r7]
 522 02f6 B3F1FF3F 		cmp	r3, #-1
 523 02fa 0FD0     		beq	.L26
 352:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     {
 353:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****       if(HAL_GetTick() >= timeout)
 524              		.loc 1 353 0
 525 02fc FFF7FEFF 		bl	HAL_GetTick
 526 0300 0246     		mov	r2, r0
 527 0302 FB68     		ldr	r3, [r7, #12]
 528 0304 9A42     		cmp	r2, r3
 529 0306 09D3     		bcc	.L26
 354:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****       {
 355:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****         hadc->State= HAL_ADC_STATE_TIMEOUT;
 530              		.loc 1 355 0
 531 0308 7B68     		ldr	r3, [r7, #4]
 532 030a 0322     		movs	r2, #3
 533 030c 83F83D20 		strb	r2, [r3, #61]
 356:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****         /* Process unlocked */
 357:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****         __HAL_UNLOCK(hadc);
 534              		.loc 1 357 0
 535 0310 7B68     		ldr	r3, [r7, #4]
 536 0312 0022     		movs	r2, #0
 537 0314 83F83C20 		strb	r2, [r3, #60]
 358:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****         return HAL_TIMEOUT;
 538              		.loc 1 358 0
 539 0318 0323     		movs	r3, #3
 540 031a 16E0     		b	.L27
 541              	.L26:
 348:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   {
 542              		.loc 1 348 0 discriminator 1
 543 031c 7B68     		ldr	r3, [r7, #4]
 544 031e 1B68     		ldr	r3, [r3]
 545 0320 1B68     		ldr	r3, [r3]
 546 0322 03F00403 		and	r3, r3, #4
 547 0326 002B     		cmp	r3, #0
 548 0328 E4D0     		beq	.L28
 359:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****       }
 360:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     }
 361:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   }
 362:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   
 363:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   /* Check if a regular conversion is ready */
 364:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   if(hadc->State == HAL_ADC_STATE_EOC_REG)
 549              		.loc 1 364 0
 550 032a 7B68     		ldr	r3, [r7, #4]
 551 032c 93F83D30 		ldrb	r3, [r3, #61]
 552 0330 DBB2     		uxtb	r3, r3
 553 0332 152B     		cmp	r3, #21
 554 0334 04D1     		bne	.L29
 365:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   {
 366:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     /* Change ADC state */
 367:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     hadc->State = HAL_ADC_STATE_EOC_INJ_REG;  
 555              		.loc 1 367 0
 556 0336 7B68     		ldr	r3, [r7, #4]
 557 0338 3522     		movs	r2, #53
 558 033a 83F83D20 		strb	r2, [r3, #61]
 559 033e 03E0     		b	.L30
 560              	.L29:
 368:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   }
 369:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   else
 370:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   {
 371:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     /* Change ADC state */
 372:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     hadc->State = HAL_ADC_STATE_EOC_INJ;
 561              		.loc 1 372 0
 562 0340 7B68     		ldr	r3, [r7, #4]
 563 0342 2522     		movs	r2, #37
 564 0344 83F83D20 		strb	r2, [r3, #61]
 565              	.L30:
 373:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   }
 374:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   
 375:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   /* Return ADC state */
 376:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   return HAL_OK;
 566              		.loc 1 376 0
 567 0348 0023     		movs	r3, #0
 568              	.L27:
 377:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** }      
 569              		.loc 1 377 0
 570 034a 1846     		mov	r0, r3
 571 034c 1037     		adds	r7, r7, #16
 572 034e BD46     		mov	sp, r7
 573              		@ sp needed
 574 0350 80BD     		pop	{r7, pc}
 575              		.cfi_endproc
 576              	.LFE58:
 578 0352 00BF     		.align	2
 579              		.global	HAL_ADCEx_InjectedStop_IT
 580              		.thumb
 581              		.thumb_func
 583              	HAL_ADCEx_InjectedStop_IT:
 584              	.LFB59:
 378:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   
 379:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** /**
 380:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   * @brief  Disables the interrupt and stop ADC conversion of injected channels.
 381:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   * 
 382:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   * @note   Caution: This function will stop also regular channels.  
 383:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   *
 384:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
 385:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   *         the configuration information for the specified ADC.
 386:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   * @retval HAL status.
 387:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   */
 388:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_InjectedStop_IT(ADC_HandleTypeDef* hadc)
 389:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** {
 585              		.loc 1 389 0
 586              		.cfi_startproc
 587              		@ args = 0, pretend = 0, frame = 8
 588              		@ frame_needed = 1, uses_anonymous_args = 0
 589              		@ link register save eliminated.
 590 0354 80B4     		push	{r7}
 591              		.cfi_def_cfa_offset 4
 592              		.cfi_offset 7, -4
 593 0356 83B0     		sub	sp, sp, #12
 594              		.cfi_def_cfa_offset 16
 595 0358 00AF     		add	r7, sp, #0
 596              		.cfi_def_cfa_register 7
 597 035a 7860     		str	r0, [r7, #4]
 390:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   /* Disable the ADC end of conversion interrupt for regular group */
 391:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 598              		.loc 1 391 0
 599 035c 7B68     		ldr	r3, [r7, #4]
 600 035e 1B68     		ldr	r3, [r3]
 601 0360 7A68     		ldr	r2, [r7, #4]
 602 0362 1268     		ldr	r2, [r2]
 603 0364 5268     		ldr	r2, [r2, #4]
 604 0366 22F02002 		bic	r2, r2, #32
 605 036a 5A60     		str	r2, [r3, #4]
 392:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   
 393:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   /* Disable the ADC end of conversion interrupt for injected group */
 394:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   __HAL_ADC_DISABLE_IT(hadc, ADC_CR1_JEOCIE);
 606              		.loc 1 394 0
 607 036c 7B68     		ldr	r3, [r7, #4]
 608 036e 1B68     		ldr	r3, [r3]
 609 0370 7A68     		ldr	r2, [r7, #4]
 610 0372 1268     		ldr	r2, [r2]
 611 0374 5268     		ldr	r2, [r2, #4]
 612 0376 22F08002 		bic	r2, r2, #128
 613 037a 5A60     		str	r2, [r3, #4]
 395:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   
 396:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   /* Enable the Periphral */
 397:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   __HAL_ADC_DISABLE(hadc);
 614              		.loc 1 397 0
 615 037c 7B68     		ldr	r3, [r7, #4]
 616 037e 1B68     		ldr	r3, [r3]
 617 0380 7A68     		ldr	r2, [r7, #4]
 618 0382 1268     		ldr	r2, [r2]
 619 0384 9268     		ldr	r2, [r2, #8]
 620 0386 22F00102 		bic	r2, r2, #1
 621 038a 9A60     		str	r2, [r3, #8]
 398:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   
 399:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   /* Change ADC state */
 400:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   hadc->State = HAL_ADC_STATE_READY;
 622              		.loc 1 400 0
 623 038c 7B68     		ldr	r3, [r7, #4]
 624 038e 0122     		movs	r2, #1
 625 0390 83F83D20 		strb	r2, [r3, #61]
 401:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   
 402:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   /* Return function status */
 403:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   return HAL_OK;
 626              		.loc 1 403 0
 627 0394 0023     		movs	r3, #0
 404:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** }
 628              		.loc 1 404 0
 629 0396 1846     		mov	r0, r3
 630 0398 0C37     		adds	r7, r7, #12
 631 039a BD46     		mov	sp, r7
 632              		@ sp needed
 633 039c 5DF8047B 		ldr	r7, [sp], #4
 634 03a0 7047     		bx	lr
 635              		.cfi_endproc
 636              	.LFE59:
 638 03a2 00BF     		.align	2
 639              		.global	HAL_ADCEx_InjectedGetValue
 640              		.thumb
 641              		.thumb_func
 643              	HAL_ADCEx_InjectedGetValue:
 644              	.LFB60:
 405:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** 
 406:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** /**
 407:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   * @brief  Gets the converted value from data register of injected channel.
 408:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
 409:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   *         the configuration information for the specified ADC.
 410:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   * @param  InjectedRank: the ADC injected rank.
 411:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   *          This parameter can be one of the following values:
 412:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   *            @arg ADC_InjectedChannel_1: Injected Channel1 selected
 413:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   *            @arg ADC_InjectedChannel_2: Injected Channel2 selected
 414:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   *            @arg ADC_InjectedChannel_3: Injected Channel3 selected
 415:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   *            @arg ADC_InjectedChannel_4: Injected Channel4 selected
 416:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   * @retval None
 417:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   */
 418:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
 419:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** {
 645              		.loc 1 419 0
 646              		.cfi_startproc
 647              		@ args = 0, pretend = 0, frame = 16
 648              		@ frame_needed = 1, uses_anonymous_args = 0
 649              		@ link register save eliminated.
 650 03a4 80B4     		push	{r7}
 651              		.cfi_def_cfa_offset 4
 652              		.cfi_offset 7, -4
 653 03a6 85B0     		sub	sp, sp, #20
 654              		.cfi_def_cfa_offset 24
 655 03a8 00AF     		add	r7, sp, #0
 656              		.cfi_def_cfa_register 7
 657 03aa 7860     		str	r0, [r7, #4]
 658 03ac 3960     		str	r1, [r7]
 420:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   __IO uint32_t tmp = 0;
 659              		.loc 1 420 0
 660 03ae 0023     		movs	r3, #0
 661 03b0 FB60     		str	r3, [r7, #12]
 421:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   
 422:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   /* Check the parameters */
 423:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
 424:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   
 425:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****    /* Clear the ADCx's flag for injected end of conversion */
 426:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****    __HAL_ADC_CLEAR_FLAG(hadc,ADC_FLAG_JEOC);
 662              		.loc 1 426 0
 663 03b2 7B68     		ldr	r3, [r7, #4]
 664 03b4 1B68     		ldr	r3, [r3]
 665 03b6 7A68     		ldr	r2, [r7, #4]
 666 03b8 1268     		ldr	r2, [r2]
 667 03ba 1268     		ldr	r2, [r2]
 668 03bc 22F00402 		bic	r2, r2, #4
 669 03c0 1A60     		str	r2, [r3]
 427:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   
 428:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   /* Return the selected ADC converted value */ 
 429:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   switch(InjectedRank)
 670              		.loc 1 429 0
 671 03c2 3B68     		ldr	r3, [r7]
 672 03c4 013B     		subs	r3, r3, #1
 673 03c6 032B     		cmp	r3, #3
 674 03c8 1ED8     		bhi	.L42
 675 03ca 01A2     		adr	r2, .L36
 676 03cc 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 677              		.p2align 2
 678              	.L36:
 679 03d0 FF030000 		.word	.L35+1
 680 03d4 F5030000 		.word	.L37+1
 681 03d8 EB030000 		.word	.L38+1
 682 03dc E1030000 		.word	.L39+1
 683              	.L39:
 430:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   {  
 431:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     case ADC_INJECTED_RANK_4:
 432:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     {
 433:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****       tmp =  hadc->Instance->JDR4;
 684              		.loc 1 433 0
 685 03e0 7B68     		ldr	r3, [r7, #4]
 686 03e2 1B68     		ldr	r3, [r3]
 687 03e4 9B6C     		ldr	r3, [r3, #72]
 688 03e6 FB60     		str	r3, [r7, #12]
 434:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     }  
 435:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     break;
 689              		.loc 1 435 0
 690 03e8 0FE0     		b	.L40
 691              	.L38:
 436:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     case ADC_INJECTED_RANK_3: 
 437:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     {  
 438:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****       tmp =  hadc->Instance->JDR3;
 692              		.loc 1 438 0
 693 03ea 7B68     		ldr	r3, [r7, #4]
 694 03ec 1B68     		ldr	r3, [r3]
 695 03ee 5B6C     		ldr	r3, [r3, #68]
 696 03f0 FB60     		str	r3, [r7, #12]
 439:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     }  
 440:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     break;
 697              		.loc 1 440 0
 698 03f2 0AE0     		b	.L40
 699              	.L37:
 441:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     case ADC_INJECTED_RANK_2: 
 442:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     {  
 443:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****       tmp =  hadc->Instance->JDR2;
 700              		.loc 1 443 0
 701 03f4 7B68     		ldr	r3, [r7, #4]
 702 03f6 1B68     		ldr	r3, [r3]
 703 03f8 1B6C     		ldr	r3, [r3, #64]
 704 03fa FB60     		str	r3, [r7, #12]
 444:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     }
 445:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     break;
 705              		.loc 1 445 0
 706 03fc 05E0     		b	.L40
 707              	.L35:
 446:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     case ADC_INJECTED_RANK_1:
 447:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     {
 448:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****       tmp =  hadc->Instance->JDR1;
 708              		.loc 1 448 0
 709 03fe 7B68     		ldr	r3, [r7, #4]
 710 0400 1B68     		ldr	r3, [r3]
 711 0402 DB6B     		ldr	r3, [r3, #60]
 712 0404 FB60     		str	r3, [r7, #12]
 449:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     }
 450:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     break;
 713              		.loc 1 450 0
 714 0406 00E0     		b	.L40
 715              	.L42:
 451:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     default:
 452:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     break;  
 716              		.loc 1 452 0
 717 0408 00BF     		nop
 718              	.L40:
 453:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   }
 454:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   return tmp;
 719              		.loc 1 454 0
 720 040a FB68     		ldr	r3, [r7, #12]
 455:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** }
 721              		.loc 1 455 0
 722 040c 1846     		mov	r0, r3
 723 040e 1437     		adds	r7, r7, #20
 724 0410 BD46     		mov	sp, r7
 725              		@ sp needed
 726 0412 5DF8047B 		ldr	r7, [sp], #4
 727 0416 7047     		bx	lr
 728              		.cfi_endproc
 729              	.LFE60:
 731              		.align	2
 732              		.global	HAL_ADCEx_MultiModeStart_DMA
 733              		.thumb
 734              		.thumb_func
 736              	HAL_ADCEx_MultiModeStart_DMA:
 737              	.LFB61:
 456:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** 
 457:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** /**
 458:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   * @brief  Enables ADC DMA request after last transfer (Multi-ADC mode) and enables ADC peripheral
 459:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   * 
 460:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   * @note   Caution: This function must be used only with the ADC master.  
 461:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   *
 462:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
 463:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   *         the configuration information for the specified ADC.
 464:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   * @param  pData:   Pointer to buffer in which transferred from ADC peripheral to memory will be s
 465:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   * @param  Length:  The length of data to be transferred from ADC peripheral to memory.  
 466:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   * @retval None
 467:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   */
 468:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t L
 469:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** {
 738              		.loc 1 469 0
 739              		.cfi_startproc
 740              		@ args = 0, pretend = 0, frame = 24
 741              		@ frame_needed = 1, uses_anonymous_args = 0
 742 0418 80B5     		push	{r7, lr}
 743              		.cfi_def_cfa_offset 8
 744              		.cfi_offset 7, -8
 745              		.cfi_offset 14, -4
 746 041a 86B0     		sub	sp, sp, #24
 747              		.cfi_def_cfa_offset 32
 748 041c 00AF     		add	r7, sp, #0
 749              		.cfi_def_cfa_register 7
 750 041e F860     		str	r0, [r7, #12]
 751 0420 B960     		str	r1, [r7, #8]
 752 0422 7A60     		str	r2, [r7, #4]
 470:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   uint16_t counter = 0;
 753              		.loc 1 470 0
 754 0424 0023     		movs	r3, #0
 755 0426 FB82     		strh	r3, [r7, #22]	@ movhi
 471:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   
 472:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   /* Check the parameters */
 473:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 474:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 475:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 476:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   
 477:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   /* Process locked */
 478:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 756              		.loc 1 478 0
 757 0428 FB68     		ldr	r3, [r7, #12]
 758 042a 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 759 042e 012B     		cmp	r3, #1
 760 0430 01D1     		bne	.L44
 761              		.loc 1 478 0 is_stmt 0 discriminator 1
 762 0432 0223     		movs	r3, #2
 763 0434 76E0     		b	.L45
 764              	.L44:
 765              		.loc 1 478 0 discriminator 2
 766 0436 FB68     		ldr	r3, [r7, #12]
 767 0438 0122     		movs	r2, #1
 768 043a 83F83C20 		strb	r2, [r3, #60]
 479:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   
 480:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   /* Enable ADC overrun interrupt */
 481:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 769              		.loc 1 481 0 is_stmt 1 discriminator 2
 770 043e FB68     		ldr	r3, [r7, #12]
 771 0440 1B68     		ldr	r3, [r3]
 772 0442 FA68     		ldr	r2, [r7, #12]
 773 0444 1268     		ldr	r2, [r2]
 774 0446 5268     		ldr	r2, [r2, #4]
 775 0448 42F08062 		orr	r2, r2, #67108864
 776 044c 5A60     		str	r2, [r3, #4]
 482:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   
 483:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   if (hadc->Init.DMAContinuousRequests != DISABLE)
 777              		.loc 1 483 0 discriminator 2
 778 044e FB68     		ldr	r3, [r7, #12]
 779 0450 DB69     		ldr	r3, [r3, #28]
 780 0452 002B     		cmp	r3, #0
 781 0454 0CD0     		beq	.L46
 484:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   {
 485:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     /* Enable the selected ADC DMA request after last transfer */
 486:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     ADC->CCR |= ADC_CCR_DDS;
 782              		.loc 1 486 0
 783 0456 4FF40C53 		mov	r3, #8960
 784 045a C4F20103 		movt	r3, 16385
 785 045e 4FF40C52 		mov	r2, #8960
 786 0462 C4F20102 		movt	r2, 16385
 787 0466 5268     		ldr	r2, [r2, #4]
 788 0468 42F40052 		orr	r2, r2, #8192
 789 046c 5A60     		str	r2, [r3, #4]
 790 046e 0BE0     		b	.L47
 791              	.L46:
 487:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   }
 488:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   else
 489:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   {
 490:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     /* Disable the selected ADC EOC rising on each regular channel conversion */
 491:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     ADC->CCR &= ~ADC_CCR_DDS;
 792              		.loc 1 491 0
 793 0470 4FF40C53 		mov	r3, #8960
 794 0474 C4F20103 		movt	r3, 16385
 795 0478 4FF40C52 		mov	r2, #8960
 796 047c C4F20102 		movt	r2, 16385
 797 0480 5268     		ldr	r2, [r2, #4]
 798 0482 22F40052 		bic	r2, r2, #8192
 799 0486 5A60     		str	r2, [r3, #4]
 800              	.L47:
 492:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   }
 493:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   
 494:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   /* Set the DMA transfer complete callback */
 495:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   hadc->DMA_Handle->XferCpltCallback = ADC_MultiModeDMAConvCplt;
 801              		.loc 1 495 0
 802 0488 FB68     		ldr	r3, [r7, #12]
 803 048a 9A6B     		ldr	r2, [r3, #56]
 804 048c 40F20003 		movw	r3, #:lower16:ADC_MultiModeDMAConvCplt
 805 0490 C0F20003 		movt	r3, #:upper16:ADC_MultiModeDMAConvCplt
 806 0494 D363     		str	r3, [r2, #60]
 496:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   
 497:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   /* Set the DMA half transfer complete callback */
 498:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   hadc->DMA_Handle->XferHalfCpltCallback = ADC_MultiModeDMAHalfConvCplt;
 807              		.loc 1 498 0
 808 0496 FB68     		ldr	r3, [r7, #12]
 809 0498 9A6B     		ldr	r2, [r3, #56]
 810 049a 40F20003 		movw	r3, #:lower16:ADC_MultiModeDMAHalfConvCplt
 811 049e C0F20003 		movt	r3, #:upper16:ADC_MultiModeDMAHalfConvCplt
 812 04a2 1364     		str	r3, [r2, #64]
 499:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****      
 500:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   /* Set the DMA error callback */
 501:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   hadc->DMA_Handle->XferErrorCallback = ADC_MultiModeDMAError ;
 813              		.loc 1 501 0
 814 04a4 FB68     		ldr	r3, [r7, #12]
 815 04a6 9A6B     		ldr	r2, [r3, #56]
 816 04a8 40F20003 		movw	r3, #:lower16:ADC_MultiModeDMAError
 817 04ac C0F20003 		movt	r3, #:upper16:ADC_MultiModeDMAError
 818 04b0 9364     		str	r3, [r2, #72]
 502:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   
 503:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   /* Enable the DMA Stream */
 504:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&ADC->CDR, (uint32_t)pData, Length);
 819              		.loc 1 504 0
 820 04b2 FB68     		ldr	r3, [r7, #12]
 821 04b4 9A6B     		ldr	r2, [r3, #56]
 822 04b6 BB68     		ldr	r3, [r7, #8]
 823 04b8 1046     		mov	r0, r2
 824 04ba 42F20831 		movw	r1, #8968
 825 04be C4F20101 		movt	r1, 16385
 826 04c2 1A46     		mov	r2, r3
 827 04c4 7B68     		ldr	r3, [r7, #4]
 828 04c6 FFF7FEFF 		bl	HAL_DMA_Start_IT
 505:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   
 506:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   /* Change ADC state */
 507:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   hadc->State = HAL_ADC_STATE_BUSY_REG;
 829              		.loc 1 507 0
 830 04ca FB68     		ldr	r3, [r7, #12]
 831 04cc 1222     		movs	r2, #18
 832 04ce 83F83D20 		strb	r2, [r3, #61]
 508:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   
 509:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   /* Check if ADC peripheral is disabled in order to enable it and wait during 
 510:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****      Tstab time the ADC's stabilization */
 511:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 833              		.loc 1 511 0
 834 04d2 FB68     		ldr	r3, [r7, #12]
 835 04d4 1B68     		ldr	r3, [r3]
 836 04d6 9B68     		ldr	r3, [r3, #8]
 837 04d8 03F00103 		and	r3, r3, #1
 838 04dc 002B     		cmp	r3, #0
 839 04de 10D1     		bne	.L48
 512:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   {  
 513:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     /* Enable the Peripheral */
 514:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     __HAL_ADC_ENABLE(hadc);
 840              		.loc 1 514 0
 841 04e0 FB68     		ldr	r3, [r7, #12]
 842 04e2 1B68     		ldr	r3, [r3]
 843 04e4 FA68     		ldr	r2, [r7, #12]
 844 04e6 1268     		ldr	r2, [r2]
 845 04e8 9268     		ldr	r2, [r2, #8]
 846 04ea 42F00102 		orr	r2, r2, #1
 847 04ee 9A60     		str	r2, [r3, #8]
 515:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     
 516:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     /* Delay inserted to wait during Tstab time the ADC's stabilazation */
 517:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     for(; counter <= 540; counter++)
 848              		.loc 1 517 0
 849 04f0 03E0     		b	.L49
 850              	.L50:
 851              	.LBB12:
 852              	.LBB13:
 853              		.loc 2 271 0 discriminator 2
 854              	@ 271 "D:\workspace\console800480\system/core_cmInstr.h" 1
 855 04f2 00BF     		nop
 856              	@ 0 "" 2
 857              		.thumb
 858              	.LBE13:
 859              	.LBE12:
 860              		.loc 1 517 0 discriminator 2
 861 04f4 FB8A     		ldrh	r3, [r7, #22]
 862 04f6 0133     		adds	r3, r3, #1
 863 04f8 FB82     		strh	r3, [r7, #22]	@ movhi
 864              	.L49:
 865              		.loc 1 517 0 is_stmt 0 discriminator 1
 866 04fa FB8A     		ldrh	r3, [r7, #22]
 867 04fc B3F5077F 		cmp	r3, #540
 868 0500 F7D9     		bls	.L50
 869              	.L48:
 518:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     {
 519:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****       __NOP();
 520:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     }
 521:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   }
 522:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   
 523:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   /* if no external trigger present enable software conversion of regular channels */
 524:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   if (hadc->Init.ExternalTrigConvEdge == ADC_EXTERNALTRIGCONVEDGE_NONE)
 870              		.loc 1 524 0 is_stmt 1
 871 0502 FB68     		ldr	r3, [r7, #12]
 872 0504 DB6A     		ldr	r3, [r3, #44]
 873 0506 002B     		cmp	r3, #0
 874 0508 07D1     		bne	.L51
 525:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   {
 526:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     /* Enable the selected ADC software conversion for regular group */
 527:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 875              		.loc 1 527 0
 876 050a FB68     		ldr	r3, [r7, #12]
 877 050c 1B68     		ldr	r3, [r3]
 878 050e FA68     		ldr	r2, [r7, #12]
 879 0510 1268     		ldr	r2, [r2]
 880 0512 9268     		ldr	r2, [r2, #8]
 881 0514 42F08042 		orr	r2, r2, #1073741824
 882 0518 9A60     		str	r2, [r3, #8]
 883              	.L51:
 528:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   }
 529:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   
 530:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   /* Process unlocked */
 531:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 884              		.loc 1 531 0
 885 051a FB68     		ldr	r3, [r7, #12]
 886 051c 0022     		movs	r2, #0
 887 051e 83F83C20 		strb	r2, [r3, #60]
 532:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   
 533:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   /* Return function status */
 534:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   return HAL_OK;
 888              		.loc 1 534 0
 889 0522 0023     		movs	r3, #0
 890              	.L45:
 535:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** }
 891              		.loc 1 535 0
 892 0524 1846     		mov	r0, r3
 893 0526 1837     		adds	r7, r7, #24
 894 0528 BD46     		mov	sp, r7
 895              		@ sp needed
 896 052a 80BD     		pop	{r7, pc}
 897              		.cfi_endproc
 898              	.LFE61:
 900              		.align	2
 901              		.global	HAL_ADCEx_MultiModeStop_DMA
 902              		.thumb
 903              		.thumb_func
 905              	HAL_ADCEx_MultiModeStop_DMA:
 906              	.LFB62:
 536:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** 
 537:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** /**
 538:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   * @brief  Disables ADC DMA (multi-ADC mode) and disables ADC peripheral    
 539:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
 540:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   *         the configuration information for the specified ADC.
 541:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   * @retval None
 542:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   */
 543:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_MultiModeStop_DMA(ADC_HandleTypeDef* hadc)
 544:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** {
 907              		.loc 1 544 0
 908              		.cfi_startproc
 909              		@ args = 0, pretend = 0, frame = 8
 910              		@ frame_needed = 1, uses_anonymous_args = 0
 911 052c 80B5     		push	{r7, lr}
 912              		.cfi_def_cfa_offset 8
 913              		.cfi_offset 7, -8
 914              		.cfi_offset 14, -4
 915 052e 82B0     		sub	sp, sp, #8
 916              		.cfi_def_cfa_offset 16
 917 0530 00AF     		add	r7, sp, #0
 918              		.cfi_def_cfa_register 7
 919 0532 7860     		str	r0, [r7, #4]
 545:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   /* Process locked */
 546:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 920              		.loc 1 546 0
 921 0534 7B68     		ldr	r3, [r7, #4]
 922 0536 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 923 053a 012B     		cmp	r3, #1
 924 053c 01D1     		bne	.L53
 925              		.loc 1 546 0 is_stmt 0 discriminator 1
 926 053e 0223     		movs	r3, #2
 927 0540 2DE0     		b	.L54
 928              	.L53:
 929              		.loc 1 546 0 discriminator 2
 930 0542 7B68     		ldr	r3, [r7, #4]
 931 0544 0122     		movs	r2, #1
 932 0546 83F83C20 		strb	r2, [r3, #60]
 547:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   
 548:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   /* Enable the Peripheral */
 549:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   __HAL_ADC_DISABLE(hadc);
 933              		.loc 1 549 0 is_stmt 1 discriminator 2
 934 054a 7B68     		ldr	r3, [r7, #4]
 935 054c 1B68     		ldr	r3, [r3]
 936 054e 7A68     		ldr	r2, [r7, #4]
 937 0550 1268     		ldr	r2, [r2]
 938 0552 9268     		ldr	r2, [r2, #8]
 939 0554 22F00102 		bic	r2, r2, #1
 940 0558 9A60     		str	r2, [r3, #8]
 550:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   
 551:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   /* Disable ADC overrun interrupt */
 552:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 941              		.loc 1 552 0 discriminator 2
 942 055a 7B68     		ldr	r3, [r7, #4]
 943 055c 1B68     		ldr	r3, [r3]
 944 055e 7A68     		ldr	r2, [r7, #4]
 945 0560 1268     		ldr	r2, [r2]
 946 0562 5268     		ldr	r2, [r2, #4]
 947 0564 22F08062 		bic	r2, r2, #67108864
 948 0568 5A60     		str	r2, [r3, #4]
 553:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   
 554:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   /* Disable the selected ADC DMA request after last transfer */
 555:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   ADC->CCR &= ~ADC_CCR_DDS;
 949              		.loc 1 555 0 discriminator 2
 950 056a 4FF40C53 		mov	r3, #8960
 951 056e C4F20103 		movt	r3, 16385
 952 0572 4FF40C52 		mov	r2, #8960
 953 0576 C4F20102 		movt	r2, 16385
 954 057a 5268     		ldr	r2, [r2, #4]
 955 057c 22F40052 		bic	r2, r2, #8192
 956 0580 5A60     		str	r2, [r3, #4]
 556:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   
 557:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   /* Disable the ADC DMA Stream */
 558:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   HAL_DMA_Abort(hadc->DMA_Handle);
 957              		.loc 1 558 0 discriminator 2
 958 0582 7B68     		ldr	r3, [r7, #4]
 959 0584 9B6B     		ldr	r3, [r3, #56]
 960 0586 1846     		mov	r0, r3
 961 0588 FFF7FEFF 		bl	HAL_DMA_Abort
 559:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   
 560:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   /* Change ADC state */
 561:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   hadc->State = HAL_ADC_STATE_READY;
 962              		.loc 1 561 0 discriminator 2
 963 058c 7B68     		ldr	r3, [r7, #4]
 964 058e 0122     		movs	r2, #1
 965 0590 83F83D20 		strb	r2, [r3, #61]
 562:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   
 563:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   /* Process unlocked */
 564:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 966              		.loc 1 564 0 discriminator 2
 967 0594 7B68     		ldr	r3, [r7, #4]
 968 0596 0022     		movs	r2, #0
 969 0598 83F83C20 		strb	r2, [r3, #60]
 565:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     
 566:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   /* Return function status */
 567:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   return HAL_OK;
 970              		.loc 1 567 0 discriminator 2
 971 059c 0023     		movs	r3, #0
 972              	.L54:
 568:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** }
 973              		.loc 1 568 0
 974 059e 1846     		mov	r0, r3
 975 05a0 0837     		adds	r7, r7, #8
 976 05a2 BD46     		mov	sp, r7
 977              		@ sp needed
 978 05a4 80BD     		pop	{r7, pc}
 979              		.cfi_endproc
 980              	.LFE62:
 982 05a6 00BF     		.align	2
 983              		.global	HAL_ADCEx_MultiModeGetValue
 984              		.thumb
 985              		.thumb_func
 987              	HAL_ADCEx_MultiModeGetValue:
 988              	.LFB63:
 569:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** 
 570:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** /**
 571:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   * @brief  Returns the last ADC1, ADC2 and ADC3 regular conversions results 
 572:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   *         data in the selected multi mode.
 573:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
 574:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   *         the configuration information for the specified ADC.
 575:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   * @retval The converted data value.
 576:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   */
 577:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** uint32_t HAL_ADCEx_MultiModeGetValue(ADC_HandleTypeDef* hadc)
 578:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** {
 989              		.loc 1 578 0
 990              		.cfi_startproc
 991              		@ args = 0, pretend = 0, frame = 8
 992              		@ frame_needed = 1, uses_anonymous_args = 0
 993              		@ link register save eliminated.
 994 05a8 80B4     		push	{r7}
 995              		.cfi_def_cfa_offset 4
 996              		.cfi_offset 7, -4
 997 05aa 83B0     		sub	sp, sp, #12
 998              		.cfi_def_cfa_offset 16
 999 05ac 00AF     		add	r7, sp, #0
 1000              		.cfi_def_cfa_register 7
 1001 05ae 7860     		str	r0, [r7, #4]
 579:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   /* Return the multi mode conversion value */
 580:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   return ADC->CDR;
 1002              		.loc 1 580 0
 1003 05b0 4FF40C53 		mov	r3, #8960
 1004 05b4 C4F20103 		movt	r3, 16385
 1005 05b8 9B68     		ldr	r3, [r3, #8]
 581:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** }
 1006              		.loc 1 581 0
 1007 05ba 1846     		mov	r0, r3
 1008 05bc 0C37     		adds	r7, r7, #12
 1009 05be BD46     		mov	sp, r7
 1010              		@ sp needed
 1011 05c0 5DF8047B 		ldr	r7, [sp], #4
 1012 05c4 7047     		bx	lr
 1013              		.cfi_endproc
 1014              	.LFE63:
 1016 05c6 00BF     		.align	2
 1017              		.weak	HAL_ADCEx_InjectedConvCpltCallback
 1018              		.thumb
 1019              		.thumb_func
 1021              	HAL_ADCEx_InjectedConvCpltCallback:
 1022              	.LFB64:
 582:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** 
 583:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** /**
 584:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   * @brief  Injected conversion complete callback in non blocking mode 
 585:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
 586:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   *         the configuration information for the specified ADC.
 587:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   * @retval None
 588:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   */
 589:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** __weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
 590:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** {
 1023              		.loc 1 590 0
 1024              		.cfi_startproc
 1025              		@ args = 0, pretend = 0, frame = 8
 1026              		@ frame_needed = 1, uses_anonymous_args = 0
 1027              		@ link register save eliminated.
 1028 05c8 80B4     		push	{r7}
 1029              		.cfi_def_cfa_offset 4
 1030              		.cfi_offset 7, -4
 1031 05ca 83B0     		sub	sp, sp, #12
 1032              		.cfi_def_cfa_offset 16
 1033 05cc 00AF     		add	r7, sp, #0
 1034              		.cfi_def_cfa_register 7
 1035 05ce 7860     		str	r0, [r7, #4]
 591:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 592:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****             the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
 593:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****    */
 594:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** }
 1036              		.loc 1 594 0
 1037 05d0 0C37     		adds	r7, r7, #12
 1038 05d2 BD46     		mov	sp, r7
 1039              		@ sp needed
 1040 05d4 5DF8047B 		ldr	r7, [sp], #4
 1041 05d8 7047     		bx	lr
 1042              		.cfi_endproc
 1043              	.LFE64:
 1045 05da 00BF     		.align	2
 1046              		.global	HAL_ADCEx_InjectedConfigChannel
 1047              		.thumb
 1048              		.thumb_func
 1050              	HAL_ADCEx_InjectedConfigChannel:
 1051              	.LFB65:
 595:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** 
 596:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** /**
 597:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   * @brief  Configures for the selected ADC injected channel its corresponding
 598:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   *         rank in the sequencer and its sample time.
 599:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
 600:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   *         the configuration information for the specified ADC.
 601:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   * @param  sConfigInjected: ADC configuration structure for injected channel. 
 602:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   * @retval None
 603:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   */
 604:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef
 605:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** {
 1052              		.loc 1 605 0
 1053              		.cfi_startproc
 1054              		@ args = 0, pretend = 0, frame = 8
 1055              		@ frame_needed = 1, uses_anonymous_args = 0
 1056              		@ link register save eliminated.
 1057 05dc 90B4     		push	{r4, r7}
 1058              		.cfi_def_cfa_offset 8
 1059              		.cfi_offset 4, -8
 1060              		.cfi_offset 7, -4
 1061 05de 82B0     		sub	sp, sp, #8
 1062              		.cfi_def_cfa_offset 16
 1063 05e0 00AF     		add	r7, sp, #0
 1064              		.cfi_def_cfa_register 7
 1065 05e2 7860     		str	r0, [r7, #4]
 1066 05e4 3960     		str	r1, [r7]
 606:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   
 607:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** #ifdef USE_FULL_ASSERT  
 608:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   uint32_t tmp = 0;
 609:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** #endif /* USE_FULL_ASSERT  */
 610:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   
 611:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   /* Check the parameters */
 612:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   assert_param(IS_ADC_CHANNEL(sConfigInjected->InjectedChannel));
 613:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   assert_param(IS_ADC_INJECTED_RANK(sConfigInjected->InjectedRank));
 614:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   assert_param(IS_ADC_SAMPLE_TIME(sConfigInjected->InjectedSamplingTime));
 615:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   assert_param(IS_ADC_EXT_INJEC_TRIG(sConfigInjected->ExternalTrigInjecConv));
 616:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
 617:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   assert_param(IS_ADC_INJECTED_LENGTH(sConfigInjected->InjectedNbrOfConversion));
 618:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->AutoInjectedConv));
 619:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjectedDiscontinuousConvMode));
 620:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** 
 621:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** #ifdef USE_FULL_ASSERT
 622:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   tmp = __HAL_ADC_GET_RESOLUTION(hadc);
 623:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   assert_param(IS_ADC_RANGE(tmp, sConfigInjected->InjectedOffset));
 624:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** #endif /* USE_FULL_ASSERT  */
 625:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** 
 626:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   /* Process locked */
 627:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 1067              		.loc 1 627 0
 1068 05e6 7B68     		ldr	r3, [r7, #4]
 1069 05e8 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 1070 05ec 012B     		cmp	r3, #1
 1071 05ee 01D1     		bne	.L59
 1072              		.loc 1 627 0 is_stmt 0 discriminator 1
 1073 05f0 0223     		movs	r3, #2
 1074 05f2 6CE1     		b	.L60
 1075              	.L59:
 1076              		.loc 1 627 0 discriminator 2
 1077 05f4 7B68     		ldr	r3, [r7, #4]
 1078 05f6 0122     		movs	r2, #1
 1079 05f8 83F83C20 		strb	r2, [r3, #60]
 628:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   
 629:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
 630:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 1080              		.loc 1 630 0 is_stmt 1 discriminator 2
 1081 05fc 3B68     		ldr	r3, [r7]
 1082 05fe 1B68     		ldr	r3, [r3]
 1083 0600 092B     		cmp	r3, #9
 1084 0602 22D9     		bls	.L61
 631:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   {
 632:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     /* Clear the old sample time */
 633:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     hadc->Instance->SMPR1 &= ~__HAL_ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 1085              		.loc 1 633 0
 1086 0604 7B68     		ldr	r3, [r7, #4]
 1087 0606 1968     		ldr	r1, [r3]
 1088 0608 7B68     		ldr	r3, [r7, #4]
 1089 060a 1B68     		ldr	r3, [r3]
 1090 060c D868     		ldr	r0, [r3, #12]
 1091 060e 3B68     		ldr	r3, [r7]
 1092 0610 1A68     		ldr	r2, [r3]
 1093 0612 1346     		mov	r3, r2
 1094 0614 5B00     		lsls	r3, r3, #1
 1095 0616 1344     		add	r3, r3, r2
 1096 0618 1E3B     		subs	r3, r3, #30
 1097 061a 0722     		movs	r2, #7
 1098 061c 02FA03F3 		lsl	r3, r2, r3
 1099 0620 DB43     		mvns	r3, r3
 1100 0622 0340     		ands	r3, r3, r0
 1101 0624 CB60     		str	r3, [r1, #12]
 634:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     
 635:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     /* Set the new sample time */
 636:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     hadc->Instance->SMPR1 |= __HAL_ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected
 1102              		.loc 1 636 0
 1103 0626 7B68     		ldr	r3, [r7, #4]
 1104 0628 1968     		ldr	r1, [r3]
 1105 062a 7B68     		ldr	r3, [r7, #4]
 1106 062c 1B68     		ldr	r3, [r3]
 1107 062e D868     		ldr	r0, [r3, #12]
 1108 0630 3B68     		ldr	r3, [r7]
 1109 0632 9C68     		ldr	r4, [r3, #8]
 1110 0634 3B68     		ldr	r3, [r7]
 1111 0636 1A68     		ldr	r2, [r3]
 1112 0638 1346     		mov	r3, r2
 1113 063a 5B00     		lsls	r3, r3, #1
 1114 063c 1344     		add	r3, r3, r2
 1115 063e 1E3B     		subs	r3, r3, #30
 1116 0640 04FA03F3 		lsl	r3, r4, r3
 1117 0644 0343     		orrs	r3, r3, r0
 1118 0646 CB60     		str	r3, [r1, #12]
 1119 0648 1FE0     		b	.L62
 1120              	.L61:
 637:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   }
 638:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   else /* ADC_Channel include in ADC_Channel_[0..9] */
 639:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   {
 640:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     /* Clear the old sample time */
 641:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     hadc->Instance->SMPR2 &= ~__HAL_ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 1121              		.loc 1 641 0
 1122 064a 7B68     		ldr	r3, [r7, #4]
 1123 064c 1968     		ldr	r1, [r3]
 1124 064e 7B68     		ldr	r3, [r7, #4]
 1125 0650 1B68     		ldr	r3, [r3]
 1126 0652 1869     		ldr	r0, [r3, #16]
 1127 0654 3B68     		ldr	r3, [r7]
 1128 0656 1A68     		ldr	r2, [r3]
 1129 0658 1346     		mov	r3, r2
 1130 065a 5B00     		lsls	r3, r3, #1
 1131 065c 1344     		add	r3, r3, r2
 1132 065e 0722     		movs	r2, #7
 1133 0660 02FA03F3 		lsl	r3, r2, r3
 1134 0664 DB43     		mvns	r3, r3
 1135 0666 0340     		ands	r3, r3, r0
 1136 0668 0B61     		str	r3, [r1, #16]
 642:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     
 643:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     /* Set the new sample time */
 644:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     hadc->Instance->SMPR2 |= __HAL_ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected
 1137              		.loc 1 644 0
 1138 066a 7B68     		ldr	r3, [r7, #4]
 1139 066c 1968     		ldr	r1, [r3]
 1140 066e 7B68     		ldr	r3, [r7, #4]
 1141 0670 1B68     		ldr	r3, [r3]
 1142 0672 1869     		ldr	r0, [r3, #16]
 1143 0674 3B68     		ldr	r3, [r7]
 1144 0676 9C68     		ldr	r4, [r3, #8]
 1145 0678 3B68     		ldr	r3, [r7]
 1146 067a 1A68     		ldr	r2, [r3]
 1147 067c 1346     		mov	r3, r2
 1148 067e 5B00     		lsls	r3, r3, #1
 1149 0680 1344     		add	r3, r3, r2
 1150 0682 04FA03F3 		lsl	r3, r4, r3
 1151 0686 0343     		orrs	r3, r3, r0
 1152 0688 0B61     		str	r3, [r1, #16]
 1153              	.L62:
 645:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   }
 646:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   
 647:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   /*---------------------------- ADCx JSQR Configuration -----------------*/
 648:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 1154              		.loc 1 648 0
 1155 068a 7B68     		ldr	r3, [r7, #4]
 1156 068c 1B68     		ldr	r3, [r3]
 1157 068e 7A68     		ldr	r2, [r7, #4]
 1158 0690 1268     		ldr	r2, [r2]
 1159 0692 926B     		ldr	r2, [r2, #56]
 1160 0694 22F44012 		bic	r2, r2, #3145728
 1161 0698 9A63     		str	r2, [r3, #56]
 649:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   hadc->Instance->JSQR |=  __HAL_ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 1162              		.loc 1 649 0
 1163 069a 7B68     		ldr	r3, [r7, #4]
 1164 069c 1B68     		ldr	r3, [r3]
 1165 069e 7A68     		ldr	r2, [r7, #4]
 1166 06a0 1268     		ldr	r2, [r2]
 1167 06a2 916B     		ldr	r1, [r2, #56]
 1168 06a4 3A68     		ldr	r2, [r7]
 1169 06a6 1269     		ldr	r2, [r2, #16]
 1170 06a8 013A     		subs	r2, r2, #1
 1171 06aa 1205     		lsls	r2, r2, #20
 1172 06ac 0A43     		orrs	r2, r2, r1
 1173 06ae 9A63     		str	r2, [r3, #56]
 650:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   
 651:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   /* Rank configuration */
 652:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   
 653:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   /* Clear the old SQx bits for the selected rank */
 654:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   hadc->Instance->JSQR &= ~__HAL_ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjec
 1174              		.loc 1 654 0
 1175 06b0 7B68     		ldr	r3, [r7, #4]
 1176 06b2 1968     		ldr	r1, [r3]
 1177 06b4 7B68     		ldr	r3, [r7, #4]
 1178 06b6 1B68     		ldr	r3, [r3]
 1179 06b8 986B     		ldr	r0, [r3, #56]
 1180 06ba 3B68     		ldr	r3, [r7]
 1181 06bc 5B68     		ldr	r3, [r3, #4]
 1182 06be DAB2     		uxtb	r2, r3
 1183 06c0 3B68     		ldr	r3, [r7]
 1184 06c2 1B69     		ldr	r3, [r3, #16]
 1185 06c4 DBB2     		uxtb	r3, r3
 1186 06c6 D31A     		subs	r3, r2, r3
 1187 06c8 DBB2     		uxtb	r3, r3
 1188 06ca 0333     		adds	r3, r3, #3
 1189 06cc DBB2     		uxtb	r3, r3
 1190 06ce 1A46     		mov	r2, r3
 1191 06d0 1346     		mov	r3, r2
 1192 06d2 9B00     		lsls	r3, r3, #2
 1193 06d4 1344     		add	r3, r3, r2
 1194 06d6 1F22     		movs	r2, #31
 1195 06d8 02FA03F3 		lsl	r3, r2, r3
 1196 06dc DB43     		mvns	r3, r3
 1197 06de 0340     		ands	r3, r3, r0
 1198 06e0 8B63     		str	r3, [r1, #56]
 655:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****    
 656:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   /* Set the SQx bits for the selected rank */
 657:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   hadc->Instance->JSQR |= __HAL_ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->Injecte
 1199              		.loc 1 657 0
 1200 06e2 7B68     		ldr	r3, [r7, #4]
 1201 06e4 1968     		ldr	r1, [r3]
 1202 06e6 7B68     		ldr	r3, [r7, #4]
 1203 06e8 1B68     		ldr	r3, [r3]
 1204 06ea 986B     		ldr	r0, [r3, #56]
 1205 06ec 3B68     		ldr	r3, [r7]
 1206 06ee 1C68     		ldr	r4, [r3]
 1207 06f0 3B68     		ldr	r3, [r7]
 1208 06f2 5B68     		ldr	r3, [r3, #4]
 1209 06f4 DAB2     		uxtb	r2, r3
 1210 06f6 3B68     		ldr	r3, [r7]
 1211 06f8 1B69     		ldr	r3, [r3, #16]
 1212 06fa DBB2     		uxtb	r3, r3
 1213 06fc D31A     		subs	r3, r2, r3
 1214 06fe DBB2     		uxtb	r3, r3
 1215 0700 0333     		adds	r3, r3, #3
 1216 0702 DBB2     		uxtb	r3, r3
 1217 0704 1A46     		mov	r2, r3
 1218 0706 1346     		mov	r3, r2
 1219 0708 9B00     		lsls	r3, r3, #2
 1220 070a 1344     		add	r3, r3, r2
 1221 070c 04FA03F3 		lsl	r3, r4, r3
 1222 0710 0343     		orrs	r3, r3, r0
 1223 0712 8B63     		str	r3, [r1, #56]
 658:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** 
 659:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   /* Select external trigger to start conversion */
 660:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 1224              		.loc 1 660 0
 1225 0714 7B68     		ldr	r3, [r7, #4]
 1226 0716 1B68     		ldr	r3, [r3]
 1227 0718 7A68     		ldr	r2, [r7, #4]
 1228 071a 1268     		ldr	r2, [r2]
 1229 071c 9268     		ldr	r2, [r2, #8]
 1230 071e 22F47022 		bic	r2, r2, #983040
 1231 0722 9A60     		str	r2, [r3, #8]
 661:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 1232              		.loc 1 661 0
 1233 0724 7B68     		ldr	r3, [r7, #4]
 1234 0726 1B68     		ldr	r3, [r3]
 1235 0728 7A68     		ldr	r2, [r7, #4]
 1236 072a 1268     		ldr	r2, [r2]
 1237 072c 9168     		ldr	r1, [r2, #8]
 1238 072e 3A68     		ldr	r2, [r7]
 1239 0730 126A     		ldr	r2, [r2, #32]
 1240 0732 0A43     		orrs	r2, r2, r1
 1241 0734 9A60     		str	r2, [r3, #8]
 662:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   
 663:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   /* Select external trigger polarity */
 664:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 1242              		.loc 1 664 0
 1243 0736 7B68     		ldr	r3, [r7, #4]
 1244 0738 1B68     		ldr	r3, [r3]
 1245 073a 7A68     		ldr	r2, [r7, #4]
 1246 073c 1268     		ldr	r2, [r2]
 1247 073e 9268     		ldr	r2, [r2, #8]
 1248 0740 22F44012 		bic	r2, r2, #3145728
 1249 0744 9A60     		str	r2, [r3, #8]
 665:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 1250              		.loc 1 665 0
 1251 0746 7B68     		ldr	r3, [r7, #4]
 1252 0748 1B68     		ldr	r3, [r3]
 1253 074a 7A68     		ldr	r2, [r7, #4]
 1254 074c 1268     		ldr	r2, [r2]
 1255 074e 9168     		ldr	r1, [r2, #8]
 1256 0750 3A68     		ldr	r2, [r7]
 1257 0752 D269     		ldr	r2, [r2, #28]
 1258 0754 0A43     		orrs	r2, r2, r1
 1259 0756 9A60     		str	r2, [r3, #8]
 666:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   
 667:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   if (sConfigInjected->AutoInjectedConv != DISABLE)
 1260              		.loc 1 667 0
 1261 0758 3B68     		ldr	r3, [r7]
 1262 075a 5B69     		ldr	r3, [r3, #20]
 1263 075c 002B     		cmp	r3, #0
 1264 075e 08D0     		beq	.L63
 668:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   {
 669:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     /* Enable the selected ADC automatic injected group conversion */
 670:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 1265              		.loc 1 670 0
 1266 0760 7B68     		ldr	r3, [r7, #4]
 1267 0762 1B68     		ldr	r3, [r3]
 1268 0764 7A68     		ldr	r2, [r7, #4]
 1269 0766 1268     		ldr	r2, [r2]
 1270 0768 5268     		ldr	r2, [r2, #4]
 1271 076a 42F48062 		orr	r2, r2, #1024
 1272 076e 5A60     		str	r2, [r3, #4]
 1273 0770 07E0     		b	.L64
 1274              	.L63:
 671:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   }
 672:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   else
 673:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   {
 674:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     /* Disable the selected ADC automatic injected group conversion */
 675:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 1275              		.loc 1 675 0
 1276 0772 7B68     		ldr	r3, [r7, #4]
 1277 0774 1B68     		ldr	r3, [r3]
 1278 0776 7A68     		ldr	r2, [r7, #4]
 1279 0778 1268     		ldr	r2, [r2]
 1280 077a 5268     		ldr	r2, [r2, #4]
 1281 077c 22F48062 		bic	r2, r2, #1024
 1282 0780 5A60     		str	r2, [r3, #4]
 1283              	.L64:
 676:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   }
 677:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   
 678:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 1284              		.loc 1 678 0
 1285 0782 3B68     		ldr	r3, [r7]
 1286 0784 9B69     		ldr	r3, [r3, #24]
 1287 0786 002B     		cmp	r3, #0
 1288 0788 08D0     		beq	.L65
 679:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   {
 680:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     /* Enable the selected ADC injected discontinuous mode */
 681:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 1289              		.loc 1 681 0
 1290 078a 7B68     		ldr	r3, [r7, #4]
 1291 078c 1B68     		ldr	r3, [r3]
 1292 078e 7A68     		ldr	r2, [r7, #4]
 1293 0790 1268     		ldr	r2, [r2]
 1294 0792 5268     		ldr	r2, [r2, #4]
 1295 0794 42F48052 		orr	r2, r2, #4096
 1296 0798 5A60     		str	r2, [r3, #4]
 1297 079a 07E0     		b	.L66
 1298              	.L65:
 682:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   }
 683:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   else
 684:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   {
 685:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     /* Disable the selected ADC injected discontinuous mode */
 686:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 1299              		.loc 1 686 0
 1300 079c 7B68     		ldr	r3, [r7, #4]
 1301 079e 1B68     		ldr	r3, [r3]
 1302 07a0 7A68     		ldr	r2, [r7, #4]
 1303 07a2 1268     		ldr	r2, [r2]
 1304 07a4 5268     		ldr	r2, [r2, #4]
 1305 07a6 22F48052 		bic	r2, r2, #4096
 1306 07aa 5A60     		str	r2, [r3, #4]
 1307              	.L66:
 687:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   }
 688:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   
 689:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   switch(sConfigInjected->InjectedRank)
 1308              		.loc 1 689 0
 1309 07ac 3B68     		ldr	r3, [r7]
 1310 07ae 5B68     		ldr	r3, [r3, #4]
 1311 07b0 022B     		cmp	r3, #2
 1312 07b2 17D0     		beq	.L68
 1313 07b4 032B     		cmp	r3, #3
 1314 07b6 29D0     		beq	.L69
 1315 07b8 012B     		cmp	r3, #1
 1316 07ba 3BD1     		bne	.L75
 690:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   {
 691:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     case 1:
 692:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****       /* Set injected channel 1 offset */
 693:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****       hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 1317              		.loc 1 693 0
 1318 07bc 7B68     		ldr	r3, [r7, #4]
 1319 07be 1A68     		ldr	r2, [r3]
 1320 07c0 7B68     		ldr	r3, [r7, #4]
 1321 07c2 1B68     		ldr	r3, [r3]
 1322 07c4 5B69     		ldr	r3, [r3, #20]
 1323 07c6 23F47F63 		bic	r3, r3, #4080
 1324 07ca 23F00F03 		bic	r3, r3, #15
 1325 07ce 5361     		str	r3, [r2, #20]
 694:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****       hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 1326              		.loc 1 694 0
 1327 07d0 7B68     		ldr	r3, [r7, #4]
 1328 07d2 1B68     		ldr	r3, [r3]
 1329 07d4 7A68     		ldr	r2, [r7, #4]
 1330 07d6 1268     		ldr	r2, [r2]
 1331 07d8 5169     		ldr	r1, [r2, #20]
 1332 07da 3A68     		ldr	r2, [r7]
 1333 07dc D268     		ldr	r2, [r2, #12]
 1334 07de 0A43     		orrs	r2, r2, r1
 1335 07e0 5A61     		str	r2, [r3, #20]
 695:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****       break;
 1336              		.loc 1 695 0
 1337 07e2 3BE0     		b	.L71
 1338              	.L68:
 696:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     case 2:
 697:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****       /* Set injected channel 2 offset */
 698:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****       hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 1339              		.loc 1 698 0
 1340 07e4 7B68     		ldr	r3, [r7, #4]
 1341 07e6 1A68     		ldr	r2, [r3]
 1342 07e8 7B68     		ldr	r3, [r7, #4]
 1343 07ea 1B68     		ldr	r3, [r3]
 1344 07ec 9B69     		ldr	r3, [r3, #24]
 1345 07ee 23F47F63 		bic	r3, r3, #4080
 1346 07f2 23F00F03 		bic	r3, r3, #15
 1347 07f6 9361     		str	r3, [r2, #24]
 699:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****       hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 1348              		.loc 1 699 0
 1349 07f8 7B68     		ldr	r3, [r7, #4]
 1350 07fa 1B68     		ldr	r3, [r3]
 1351 07fc 7A68     		ldr	r2, [r7, #4]
 1352 07fe 1268     		ldr	r2, [r2]
 1353 0800 9169     		ldr	r1, [r2, #24]
 1354 0802 3A68     		ldr	r2, [r7]
 1355 0804 D268     		ldr	r2, [r2, #12]
 1356 0806 0A43     		orrs	r2, r2, r1
 1357 0808 9A61     		str	r2, [r3, #24]
 700:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****       break;
 1358              		.loc 1 700 0
 1359 080a 27E0     		b	.L71
 1360              	.L69:
 701:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     case 3:
 702:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****       /* Set injected channel 3 offset */
 703:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****       hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 1361              		.loc 1 703 0
 1362 080c 7B68     		ldr	r3, [r7, #4]
 1363 080e 1A68     		ldr	r2, [r3]
 1364 0810 7B68     		ldr	r3, [r7, #4]
 1365 0812 1B68     		ldr	r3, [r3]
 1366 0814 DB69     		ldr	r3, [r3, #28]
 1367 0816 23F47F63 		bic	r3, r3, #4080
 1368 081a 23F00F03 		bic	r3, r3, #15
 1369 081e D361     		str	r3, [r2, #28]
 704:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****       hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 1370              		.loc 1 704 0
 1371 0820 7B68     		ldr	r3, [r7, #4]
 1372 0822 1B68     		ldr	r3, [r3]
 1373 0824 7A68     		ldr	r2, [r7, #4]
 1374 0826 1268     		ldr	r2, [r2]
 1375 0828 D169     		ldr	r1, [r2, #28]
 1376 082a 3A68     		ldr	r2, [r7]
 1377 082c D268     		ldr	r2, [r2, #12]
 1378 082e 0A43     		orrs	r2, r2, r1
 1379 0830 DA61     		str	r2, [r3, #28]
 705:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****       break;
 1380              		.loc 1 705 0
 1381 0832 13E0     		b	.L71
 1382              	.L75:
 706:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     default:
 707:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****       /* Set injected channel 4 offset */
 708:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****       hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 1383              		.loc 1 708 0
 1384 0834 7B68     		ldr	r3, [r7, #4]
 1385 0836 1A68     		ldr	r2, [r3]
 1386 0838 7B68     		ldr	r3, [r7, #4]
 1387 083a 1B68     		ldr	r3, [r3]
 1388 083c 1B6A     		ldr	r3, [r3, #32]
 1389 083e 23F47F63 		bic	r3, r3, #4080
 1390 0842 23F00F03 		bic	r3, r3, #15
 1391 0846 1362     		str	r3, [r2, #32]
 709:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****       hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 1392              		.loc 1 709 0
 1393 0848 7B68     		ldr	r3, [r7, #4]
 1394 084a 1B68     		ldr	r3, [r3]
 1395 084c 7A68     		ldr	r2, [r7, #4]
 1396 084e 1268     		ldr	r2, [r2]
 1397 0850 116A     		ldr	r1, [r2, #32]
 1398 0852 3A68     		ldr	r2, [r7]
 1399 0854 D268     		ldr	r2, [r2, #12]
 1400 0856 0A43     		orrs	r2, r2, r1
 1401 0858 1A62     		str	r2, [r3, #32]
 710:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****       break;
 1402              		.loc 1 710 0
 1403 085a 00BF     		nop
 1404              	.L71:
 711:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   }
 712:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   
 713:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   /* if ADC1 Channel_18 is selected enable VBAT Channel */
 714:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 1405              		.loc 1 714 0
 1406 085c 7B68     		ldr	r3, [r7, #4]
 1407 085e 1A68     		ldr	r2, [r3]
 1408 0860 4FF40053 		mov	r3, #8192
 1409 0864 C4F20103 		movt	r3, 16385
 1410 0868 9A42     		cmp	r2, r3
 1411 086a 0FD1     		bne	.L72
 1412              		.loc 1 714 0 is_stmt 0 discriminator 1
 1413 086c 3B68     		ldr	r3, [r7]
 1414 086e 1B68     		ldr	r3, [r3]
 1415 0870 122B     		cmp	r3, #18
 1416 0872 0BD1     		bne	.L72
 715:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   {
 716:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     /* Enable the VBAT channel*/
 717:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     ADC->CCR |= ADC_CCR_VBATE;
 1417              		.loc 1 717 0 is_stmt 1
 1418 0874 4FF40C53 		mov	r3, #8960
 1419 0878 C4F20103 		movt	r3, 16385
 1420 087c 4FF40C52 		mov	r2, #8960
 1421 0880 C4F20102 		movt	r2, 16385
 1422 0884 5268     		ldr	r2, [r2, #4]
 1423 0886 42F48002 		orr	r2, r2, #4194304
 1424 088a 5A60     		str	r2, [r3, #4]
 1425              	.L72:
 718:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   }
 719:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   
 720:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VRE
 721:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || 
 1426              		.loc 1 721 0
 1427 088c 7B68     		ldr	r3, [r7, #4]
 1428 088e 1A68     		ldr	r2, [r3]
 1429 0890 4FF40053 		mov	r3, #8192
 1430 0894 C4F20103 		movt	r3, 16385
 1431 0898 9A42     		cmp	r2, r3
 1432 089a 13D1     		bne	.L73
 1433              		.loc 1 721 0 is_stmt 0 discriminator 1
 1434 089c 3B68     		ldr	r3, [r7]
 1435 089e 1B68     		ldr	r3, [r3]
 1436 08a0 102B     		cmp	r3, #16
 1437 08a2 03D0     		beq	.L74
 1438 08a4 3B68     		ldr	r3, [r7]
 1439 08a6 1B68     		ldr	r3, [r3]
 1440 08a8 112B     		cmp	r3, #17
 1441 08aa 0BD1     		bne	.L73
 1442              	.L74:
 722:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   {
 723:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     /* Enable the TSVREFE channel*/
 724:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     ADC->CCR |= ADC_CCR_TSVREFE;
 1443              		.loc 1 724 0 is_stmt 1
 1444 08ac 4FF40C53 		mov	r3, #8960
 1445 08b0 C4F20103 		movt	r3, 16385
 1446 08b4 4FF40C52 		mov	r2, #8960
 1447 08b8 C4F20102 		movt	r2, 16385
 1448 08bc 5268     		ldr	r2, [r2, #4]
 1449 08be 42F40002 		orr	r2, r2, #8388608
 1450 08c2 5A60     		str	r2, [r3, #4]
 1451              	.L73:
 725:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   }
 726:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   
 727:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   /* Process unlocked */
 728:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 1452              		.loc 1 728 0
 1453 08c4 7B68     		ldr	r3, [r7, #4]
 1454 08c6 0022     		movs	r2, #0
 1455 08c8 83F83C20 		strb	r2, [r3, #60]
 729:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   
 730:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   /* Return function status */
 731:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   return HAL_OK;
 1456              		.loc 1 731 0
 1457 08cc 0023     		movs	r3, #0
 1458              	.L60:
 732:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** }
 1459              		.loc 1 732 0
 1460 08ce 1846     		mov	r0, r3
 1461 08d0 0837     		adds	r7, r7, #8
 1462 08d2 BD46     		mov	sp, r7
 1463              		@ sp needed
 1464 08d4 90BC     		pop	{r4, r7}
 1465 08d6 7047     		bx	lr
 1466              		.cfi_endproc
 1467              	.LFE65:
 1469              		.align	2
 1470              		.global	HAL_ADCEx_MultiModeConfigChannel
 1471              		.thumb
 1472              		.thumb_func
 1474              	HAL_ADCEx_MultiModeConfigChannel:
 1475              	.LFB66:
 733:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** 
 734:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** /**
 735:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   * @brief  Configures the ADC multi-mode 
 736:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   * @param  hadc      : pointer to a ADC_HandleTypeDef structure that contains
 737:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   *                     the configuration information for the specified ADC.  
 738:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   * @param  multimode : pointer to an ADC_MultiModeTypeDef structure that contains 
 739:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   *                     the configuration information for  multimode.
 740:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   * @retval HAL status
 741:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   */
 742:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* m
 743:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** {
 1476              		.loc 1 743 0
 1477              		.cfi_startproc
 1478              		@ args = 0, pretend = 0, frame = 8
 1479              		@ frame_needed = 1, uses_anonymous_args = 0
 1480              		@ link register save eliminated.
 1481 08d8 80B4     		push	{r7}
 1482              		.cfi_def_cfa_offset 4
 1483              		.cfi_offset 7, -4
 1484 08da 83B0     		sub	sp, sp, #12
 1485              		.cfi_def_cfa_offset 16
 1486 08dc 00AF     		add	r7, sp, #0
 1487              		.cfi_def_cfa_register 7
 1488 08de 7860     		str	r0, [r7, #4]
 1489 08e0 3960     		str	r1, [r7]
 744:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   /* Check the parameters */
 745:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   assert_param(IS_ADC_MODE(multimode->Mode));
 746:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
 747:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
 748:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   
 749:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   /* Process locked */
 750:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 1490              		.loc 1 750 0
 1491 08e2 7B68     		ldr	r3, [r7, #4]
 1492 08e4 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 1493 08e8 012B     		cmp	r3, #1
 1494 08ea 01D1     		bne	.L77
 1495              		.loc 1 750 0 is_stmt 0 discriminator 1
 1496 08ec 0223     		movs	r3, #2
 1497 08ee 53E0     		b	.L78
 1498              	.L77:
 1499              		.loc 1 750 0 discriminator 2
 1500 08f0 7B68     		ldr	r3, [r7, #4]
 1501 08f2 0122     		movs	r2, #1
 1502 08f4 83F83C20 		strb	r2, [r3, #60]
 751:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   
 752:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   /* Set ADC mode */
 753:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   ADC->CCR &= ~(ADC_CCR_MULTI);
 1503              		.loc 1 753 0 is_stmt 1 discriminator 2
 1504 08f8 4FF40C53 		mov	r3, #8960
 1505 08fc C4F20103 		movt	r3, 16385
 1506 0900 4FF40C52 		mov	r2, #8960
 1507 0904 C4F20102 		movt	r2, 16385
 1508 0908 5268     		ldr	r2, [r2, #4]
 1509 090a 22F01F02 		bic	r2, r2, #31
 1510 090e 5A60     		str	r2, [r3, #4]
 754:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   ADC->CCR |= multimode->Mode;
 1511              		.loc 1 754 0 discriminator 2
 1512 0910 4FF40C53 		mov	r3, #8960
 1513 0914 C4F20103 		movt	r3, 16385
 1514 0918 4FF40C52 		mov	r2, #8960
 1515 091c C4F20102 		movt	r2, 16385
 1516 0920 5168     		ldr	r1, [r2, #4]
 1517 0922 3A68     		ldr	r2, [r7]
 1518 0924 1268     		ldr	r2, [r2]
 1519 0926 0A43     		orrs	r2, r2, r1
 1520 0928 5A60     		str	r2, [r3, #4]
 755:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   
 756:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   /* Set the ADC DMA access mode */
 757:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   ADC->CCR &= ~(ADC_CCR_DMA);
 1521              		.loc 1 757 0 discriminator 2
 1522 092a 4FF40C53 		mov	r3, #8960
 1523 092e C4F20103 		movt	r3, 16385
 1524 0932 4FF40C52 		mov	r2, #8960
 1525 0936 C4F20102 		movt	r2, 16385
 1526 093a 5268     		ldr	r2, [r2, #4]
 1527 093c 22F44042 		bic	r2, r2, #49152
 1528 0940 5A60     		str	r2, [r3, #4]
 758:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   ADC->CCR |= multimode->DMAAccessMode;
 1529              		.loc 1 758 0 discriminator 2
 1530 0942 4FF40C53 		mov	r3, #8960
 1531 0946 C4F20103 		movt	r3, 16385
 1532 094a 4FF40C52 		mov	r2, #8960
 1533 094e C4F20102 		movt	r2, 16385
 1534 0952 5168     		ldr	r1, [r2, #4]
 1535 0954 3A68     		ldr	r2, [r7]
 1536 0956 5268     		ldr	r2, [r2, #4]
 1537 0958 0A43     		orrs	r2, r2, r1
 1538 095a 5A60     		str	r2, [r3, #4]
 759:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   
 760:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   /* Set delay between two sampling phases */
 761:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   ADC->CCR &= ~(ADC_CCR_DELAY);
 1539              		.loc 1 761 0 discriminator 2
 1540 095c 4FF40C53 		mov	r3, #8960
 1541 0960 C4F20103 		movt	r3, 16385
 1542 0964 4FF40C52 		mov	r2, #8960
 1543 0968 C4F20102 		movt	r2, 16385
 1544 096c 5268     		ldr	r2, [r2, #4]
 1545 096e 22F47062 		bic	r2, r2, #3840
 1546 0972 5A60     		str	r2, [r3, #4]
 762:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   ADC->CCR |= multimode->TwoSamplingDelay;
 1547              		.loc 1 762 0 discriminator 2
 1548 0974 4FF40C53 		mov	r3, #8960
 1549 0978 C4F20103 		movt	r3, 16385
 1550 097c 4FF40C52 		mov	r2, #8960
 1551 0980 C4F20102 		movt	r2, 16385
 1552 0984 5168     		ldr	r1, [r2, #4]
 1553 0986 3A68     		ldr	r2, [r7]
 1554 0988 9268     		ldr	r2, [r2, #8]
 1555 098a 0A43     		orrs	r2, r2, r1
 1556 098c 5A60     		str	r2, [r3, #4]
 763:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   
 764:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   /* Process unlocked */
 765:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 1557              		.loc 1 765 0 discriminator 2
 1558 098e 7B68     		ldr	r3, [r7, #4]
 1559 0990 0022     		movs	r2, #0
 1560 0992 83F83C20 		strb	r2, [r3, #60]
 766:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   
 767:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   /* Return function status */
 768:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   return HAL_OK;
 1561              		.loc 1 768 0 discriminator 2
 1562 0996 0023     		movs	r3, #0
 1563              	.L78:
 769:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** }
 1564              		.loc 1 769 0
 1565 0998 1846     		mov	r0, r3
 1566 099a 0C37     		adds	r7, r7, #12
 1567 099c BD46     		mov	sp, r7
 1568              		@ sp needed
 1569 099e 5DF8047B 		ldr	r7, [sp], #4
 1570 09a2 7047     		bx	lr
 1571              		.cfi_endproc
 1572              	.LFE66:
 1574              		.align	2
 1575              		.thumb
 1576              		.thumb_func
 1578              	ADC_MultiModeDMAConvCplt:
 1579              	.LFB67:
 770:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** 
 771:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** /**
 772:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   * @}
 773:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   */
 774:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** 
 775:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   /**
 776:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   * @brief  DMA transfer complete callback. 
 777:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   * @param  hdma: pointer to DMA handle.
 778:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   * @retval None
 779:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   */
 780:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** static void ADC_MultiModeDMAConvCplt(DMA_HandleTypeDef *hdma)   
 781:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** {
 1580              		.loc 1 781 0
 1581              		.cfi_startproc
 1582              		@ args = 0, pretend = 0, frame = 16
 1583              		@ frame_needed = 1, uses_anonymous_args = 0
 1584 09a4 80B5     		push	{r7, lr}
 1585              		.cfi_def_cfa_offset 8
 1586              		.cfi_offset 7, -8
 1587              		.cfi_offset 14, -4
 1588 09a6 84B0     		sub	sp, sp, #16
 1589              		.cfi_def_cfa_offset 24
 1590 09a8 00AF     		add	r7, sp, #0
 1591              		.cfi_def_cfa_register 7
 1592 09aa 7860     		str	r0, [r7, #4]
 782:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 1593              		.loc 1 782 0
 1594 09ac 7B68     		ldr	r3, [r7, #4]
 1595 09ae 9B6B     		ldr	r3, [r3, #56]
 1596 09b0 FB60     		str	r3, [r7, #12]
 783:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     
 784:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   /* Check if an injected conversion is ready */
 785:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   if(hadc->State == HAL_ADC_STATE_EOC_INJ)
 1597              		.loc 1 785 0
 1598 09b2 FB68     		ldr	r3, [r7, #12]
 1599 09b4 93F83D30 		ldrb	r3, [r3, #61]
 1600 09b8 DBB2     		uxtb	r3, r3
 1601 09ba 252B     		cmp	r3, #37
 1602 09bc 04D1     		bne	.L80
 786:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   {
 787:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     /* Change ADC state */
 788:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     hadc->State = HAL_ADC_STATE_EOC_INJ_REG;  
 1603              		.loc 1 788 0
 1604 09be FB68     		ldr	r3, [r7, #12]
 1605 09c0 3522     		movs	r2, #53
 1606 09c2 83F83D20 		strb	r2, [r3, #61]
 1607 09c6 03E0     		b	.L81
 1608              	.L80:
 789:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   }
 790:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   else
 791:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   {
 792:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     /* Change ADC state */
 793:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     hadc->State = HAL_ADC_STATE_EOC_REG;
 1609              		.loc 1 793 0
 1610 09c8 FB68     		ldr	r3, [r7, #12]
 1611 09ca 1522     		movs	r2, #21
 1612 09cc 83F83D20 		strb	r2, [r3, #61]
 1613              	.L81:
 794:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   }
 795:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     
 796:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     HAL_ADC_ConvCpltCallback(hadc); 
 1614              		.loc 1 796 0
 1615 09d0 F868     		ldr	r0, [r7, #12]
 1616 09d2 FFF7FEFF 		bl	HAL_ADC_ConvCpltCallback
 797:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** }
 1617              		.loc 1 797 0
 1618 09d6 1037     		adds	r7, r7, #16
 1619 09d8 BD46     		mov	sp, r7
 1620              		@ sp needed
 1621 09da 80BD     		pop	{r7, pc}
 1622              		.cfi_endproc
 1623              	.LFE67:
 1625              		.align	2
 1626              		.thumb
 1627              		.thumb_func
 1629              	ADC_MultiModeDMAHalfConvCplt:
 1630              	.LFB68:
 798:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** 
 799:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** /**
 800:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   * @brief  DMA half transfer complete callback. 
 801:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   * @param  hdma: pointer to DMA handle.
 802:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   * @retval None
 803:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   */
 804:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** static void ADC_MultiModeDMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
 805:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** {
 1631              		.loc 1 805 0
 1632              		.cfi_startproc
 1633              		@ args = 0, pretend = 0, frame = 16
 1634              		@ frame_needed = 1, uses_anonymous_args = 0
 1635 09dc 80B5     		push	{r7, lr}
 1636              		.cfi_def_cfa_offset 8
 1637              		.cfi_offset 7, -8
 1638              		.cfi_offset 14, -4
 1639 09de 84B0     		sub	sp, sp, #16
 1640              		.cfi_def_cfa_offset 24
 1641 09e0 00AF     		add	r7, sp, #0
 1642              		.cfi_def_cfa_register 7
 1643 09e2 7860     		str	r0, [r7, #4]
 806:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 1644              		.loc 1 806 0
 1645 09e4 7B68     		ldr	r3, [r7, #4]
 1646 09e6 9B6B     		ldr	r3, [r3, #56]
 1647 09e8 FB60     		str	r3, [r7, #12]
 807:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     /* Conversion complete callback */
 808:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     HAL_ADC_ConvHalfCpltCallback(hadc); 
 1648              		.loc 1 808 0
 1649 09ea F868     		ldr	r0, [r7, #12]
 1650 09ec FFF7FEFF 		bl	HAL_ADC_ConvHalfCpltCallback
 809:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** }
 1651              		.loc 1 809 0
 1652 09f0 1037     		adds	r7, r7, #16
 1653 09f2 BD46     		mov	sp, r7
 1654              		@ sp needed
 1655 09f4 80BD     		pop	{r7, pc}
 1656              		.cfi_endproc
 1657              	.LFE68:
 1659 09f6 00BF     		.align	2
 1660              		.thumb
 1661              		.thumb_func
 1663              	ADC_MultiModeDMAError:
 1664              	.LFB69:
 810:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** 
 811:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** /**
 812:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   * @brief  DMA error callback 
 813:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   * @param  hdma: pointer to DMA handle.
 814:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   * @retval None
 815:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****   */
 816:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** static void ADC_MultiModeDMAError(DMA_HandleTypeDef *hdma)   
 817:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** {
 1665              		.loc 1 817 0
 1666              		.cfi_startproc
 1667              		@ args = 0, pretend = 0, frame = 16
 1668              		@ frame_needed = 1, uses_anonymous_args = 0
 1669 09f8 80B5     		push	{r7, lr}
 1670              		.cfi_def_cfa_offset 8
 1671              		.cfi_offset 7, -8
 1672              		.cfi_offset 14, -4
 1673 09fa 84B0     		sub	sp, sp, #16
 1674              		.cfi_def_cfa_offset 24
 1675 09fc 00AF     		add	r7, sp, #0
 1676              		.cfi_def_cfa_register 7
 1677 09fe 7860     		str	r0, [r7, #4]
 818:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 1678              		.loc 1 818 0
 1679 0a00 7B68     		ldr	r3, [r7, #4]
 1680 0a02 9B6B     		ldr	r3, [r3, #56]
 1681 0a04 FB60     		str	r3, [r7, #12]
 819:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     hadc->State= HAL_ADC_STATE_ERROR;
 1682              		.loc 1 819 0
 1683 0a06 FB68     		ldr	r3, [r7, #12]
 1684 0a08 0422     		movs	r2, #4
 1685 0a0a 83F83D20 		strb	r2, [r3, #61]
 820:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     /* Set ADC error code to DMA error */
 821:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 1686              		.loc 1 821 0
 1687 0a0e FB68     		ldr	r3, [r7, #12]
 1688 0a10 1B6C     		ldr	r3, [r3, #64]
 1689 0a12 43F00202 		orr	r2, r3, #2
 1690 0a16 FB68     		ldr	r3, [r7, #12]
 1691 0a18 1A64     		str	r2, [r3, #64]
 822:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c ****     HAL_ADC_ErrorCallback(hadc); 
 1692              		.loc 1 822 0
 1693 0a1a F868     		ldr	r0, [r7, #12]
 1694 0a1c FFF7FEFF 		bl	HAL_ADC_ErrorCallback
 823:../STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc_ex.c **** }
 1695              		.loc 1 823 0
 1696 0a20 1037     		adds	r7, r7, #16
 1697 0a22 BD46     		mov	sp, r7
 1698              		@ sp needed
 1699 0a24 80BD     		pop	{r7, pc}
 1700              		.cfi_endproc
 1701              	.LFE69:
 1703              	.Letext0:
 1704              		.file 3 "c:\\program files (x86)\\codesourcery\\arm-none-eabi\\include\\stdint.h"
 1705              		.file 4 "D:\\workspace\\console800480\\system/stm32f217xx.h"
 1706              		.file 5 "D:\\workspace\\console800480\\system/stm32f2xx.h"
 1707              		.file 6 "D:\\workspace\\console800480\\STM32F2xx_HAL_Driver\\Inc/stm32f2xx_hal_def.h"
 1708              		.file 7 "D:\\workspace\\console800480\\STM32F2xx_HAL_Driver\\Inc/stm32f2xx_hal_dma.h"
 1709              		.file 8 "D:\\workspace\\console800480\\STM32F2xx_HAL_Driver\\Inc/stm32f2xx_hal_adc.h"
 1710              		.file 9 "D:\\workspace\\console800480\\STM32F2xx_HAL_Driver\\Inc/stm32f2xx_hal_adc_ex.h"
 1711              		.file 10 "D:\\workspace\\console800480\\system/core_cm3.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f2xx_hal_adc_ex.c
C:\Users\sagok\AppData\Local\Temp\ccC7ntxP.s:18     .text:00000000 $t
C:\Users\sagok\AppData\Local\Temp\ccC7ntxP.s:23     .text:00000000 HAL_ADCEx_InjectedStart
C:\Users\sagok\AppData\Local\Temp\ccC7ntxP.s:228    .text:00000144 HAL_ADCEx_InjectedStart_IT
C:\Users\sagok\AppData\Local\Temp\ccC7ntxP.s:451    .text:000002ac HAL_ADCEx_InjectedStop
C:\Users\sagok\AppData\Local\Temp\ccC7ntxP.s:495    .text:000002dc HAL_ADCEx_InjectedPollForConversion
C:\Users\sagok\AppData\Local\Temp\ccC7ntxP.s:583    .text:00000354 HAL_ADCEx_InjectedStop_IT
C:\Users\sagok\AppData\Local\Temp\ccC7ntxP.s:643    .text:000003a4 HAL_ADCEx_InjectedGetValue
C:\Users\sagok\AppData\Local\Temp\ccC7ntxP.s:679    .text:000003d0 $d
C:\Users\sagok\AppData\Local\Temp\ccC7ntxP.s:685    .text:000003e0 $t
C:\Users\sagok\AppData\Local\Temp\ccC7ntxP.s:736    .text:00000418 HAL_ADCEx_MultiModeStart_DMA
C:\Users\sagok\AppData\Local\Temp\ccC7ntxP.s:1578   .text:000009a4 ADC_MultiModeDMAConvCplt
C:\Users\sagok\AppData\Local\Temp\ccC7ntxP.s:1629   .text:000009dc ADC_MultiModeDMAHalfConvCplt
C:\Users\sagok\AppData\Local\Temp\ccC7ntxP.s:1663   .text:000009f8 ADC_MultiModeDMAError
C:\Users\sagok\AppData\Local\Temp\ccC7ntxP.s:905    .text:0000052c HAL_ADCEx_MultiModeStop_DMA
C:\Users\sagok\AppData\Local\Temp\ccC7ntxP.s:987    .text:000005a8 HAL_ADCEx_MultiModeGetValue
C:\Users\sagok\AppData\Local\Temp\ccC7ntxP.s:1021   .text:000005c8 HAL_ADCEx_InjectedConvCpltCallback
C:\Users\sagok\AppData\Local\Temp\ccC7ntxP.s:1050   .text:000005dc HAL_ADCEx_InjectedConfigChannel
C:\Users\sagok\AppData\Local\Temp\ccC7ntxP.s:1474   .text:000008d8 HAL_ADCEx_MultiModeConfigChannel
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.7f551ac7fcad8b79b9df4bfdaa536673
                           .group:00000000 wm4.stm32f2xx_hal_conf.h.40.007126baefb9f966c36646edbf8040d2
                           .group:00000000 wm4.stm32f2xx.h.57.5ec1581efc43612c411d33a8686e9ec7
                           .group:00000000 wm4.stm32f217xx.h.52.9c940d76d00294b78837dc334c172fdd
                           .group:00000000 wm4.core_cm3.h.32.49180ccb4d36cabd2d7016d2a51d91ae
                           .group:00000000 wm4.newlib.h.8.384a112feabb3bef7b573ae48cde2e3b
                           .group:00000000 wm4.features.h.22.6a4ca7cd053637cc1d0db6c16f39b2d7
                           .group:00000000 wm4.config.h.183.aa62afef667fb61d15fa64c48beb2f14
                           .group:00000000 wm4._ansi.h.23.5644b60c990a4800b02a6e654e88f93a
                           .group:00000000 wm4.stdint.h.20.54ad762faa59e3c05491630641c8d8bf
                           .group:00000000 wm4.core_cmInstr.h.25.f50f886f2edf670cf199b35fd96f5c91
                           .group:00000000 wm4.core_cm3.h.130.63ab2348a6eed0fdb318040d970b676c
                           .group:00000000 wm4.stm32f217xx.h.978.a5c681952b2f704a0e7f2ba21d08adf5
                           .group:00000000 wm4.stm32f2xx.h.142.bc2155a1f7498bab16371e38413a9e41
                           .group:00000000 wm4.stm32f2xx_hal_def.h.74.8ad2dc8aa82c4fd02e5aeaae592641ba
                           .group:00000000 wm4.stm32f2xx_hal_rcc.h.142.ec0f91cc6576a6acebd17e6dd85829ae
                           .group:00000000 wm4.stm32f2xx_hal_rcc_ex.h.40.0829033e864455c6bdd0db01f8ba5a50
                           .group:00000000 wm4.stm32f2xx_hal_gpio.h.40.ba64e0bb94d9a68835f80159f39a86f1
                           .group:00000000 wm4.stm32f2xx_hal_gpio_ex.h.40.24e547fd402281923f446b510381083f
                           .group:00000000 wm4.stm32f2xx_hal_dma.h.40.5d9732ace2a21a4526ce8f0c52428fff
                           .group:00000000 wm4.stm32f2xx_hal_cortex.h.40.e10263d2ec5d4fa79b4180ce1a38aff1
                           .group:00000000 wm4.stm32f2xx_hal_adc.h.40.89ac8b78113cac4cf63847587daabac9
                           .group:00000000 wm4.stm32f2xx_hal_adc_ex.h.40.7de68ed256ef25526ee31cc017f2c291
                           .group:00000000 wm4.stm32f2xx_hal_flash.h.40.c3171719ce015e9cff20c795e44e886d
                           .group:00000000 wm4.stm32f2xx_hal_flash_ex.h.40.7389508bd24a0aeb077bde0c9fb651eb
                           .group:00000000 wm4.stm32f2xx_ll_fsmc.h.40.c1c32f2e1862f4dd342bd9b80fb895bb
                           .group:00000000 wm4.stm32f2xx_hal_pwr.h.40.812df32e5c31b609a128e9db0eb4cbd0
                           .group:00000000 wm4.stm32f2xx_hal_rtc.h.40.850fda5fe2cce8797446913dee18382f
                           .group:00000000 wm4.stm32f2xx_hal_rtc_ex.h.40.f3e0c408e3bf4e8a0352d7ec9a18a822
                           .group:00000000 wm4.stm32f2xx_ll_sdmmc.h.40.3719ab487c4b77401c572f459adf6eb7
                           .group:00000000 wm4.stm32f2xx_hal_sd.h.58.760215394dcc316161a6482c0af9b866
                           .group:00000000 wm4.stm32f2xx_hal_spi.h.40.7984243dbaba8b21c6392998a47e6987
                           .group:00000000 wm4.stm32f2xx_hal_tim.h.40.d79172f25d0e9a15dc346aba8515bdd6
                           .group:00000000 wm4.stm32f2xx_hal_tim_ex.h.40.361f280a7a3f60b4b238bb99ca728d83
                           .group:00000000 wm4.stm32f2xx_hal_uart.h.40.d74def561ae6f78f40f477c8426ecbef
                           .group:00000000 wm4.stm32f2xx_ll_usb.h.40.9b0206a05bc6ce3bec1648b51f22cb81
                           .group:00000000 wm4.stm32f2xx_hal_pcd.h.99.11faba414c39e357b2f23364912d0605
                           .group:00000000 wm4.stm32f2xx_hal_hcd.h.40.44ee5e972983ae0139ddbacdc75c44ef
                           .group:00000000 wm4.stm32f2xx_hal.h.64.ed79ee83e52b151b3c365392b398f866

UNDEFINED SYMBOLS
HAL_GetTick
HAL_DMA_Start_IT
HAL_DMA_Abort
HAL_ADC_ConvCpltCallback
HAL_ADC_ConvHalfCpltCallback
HAL_ADC_ErrorCallback
