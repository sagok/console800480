   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"ff.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.bss
  19              		.align	2
  20              	FatFs:
  21 0000 00000000 		.space	12
  21      00000000 
  21      00000000 
  22              		.align	1
  23              	Fsid:
  24 000c 0000     		.space	2
  25              	CurrVol:
  26 000e 00       		.space	1
  27 000f 00       		.align	2
  28              	Files:
  29 0010 00000000 		.space	24
  29      00000000 
  29      00000000 
  29      00000000 
  29      00000000 
  30              		.section	.rodata
  31              		.align	2
  34              	ExCvt:
  35 0000 80       		.byte	-128
  36 0001 81       		.byte	-127
  37 0002 82       		.byte	-126
  38 0003 83       		.byte	-125
  39 0004 84       		.byte	-124
  40 0005 85       		.byte	-123
  41 0006 86       		.byte	-122
  42 0007 87       		.byte	-121
  43 0008 88       		.byte	-120
  44 0009 89       		.byte	-119
  45 000a 8A       		.byte	-118
  46 000b 8B       		.byte	-117
  47 000c 8C       		.byte	-116
  48 000d 8D       		.byte	-115
  49 000e 8E       		.byte	-114
  50 000f 8F       		.byte	-113
  51 0010 90       		.byte	-112
  52 0011 91       		.byte	-111
  53 0012 92       		.byte	-110
  54 0013 93       		.byte	-109
  55 0014 94       		.byte	-108
  56 0015 95       		.byte	-107
  57 0016 96       		.byte	-106
  58 0017 97       		.byte	-105
  59 0018 98       		.byte	-104
  60 0019 99       		.byte	-103
  61 001a AD       		.byte	-83
  62 001b 9B       		.byte	-101
  63 001c 8C       		.byte	-116
  64 001d 9D       		.byte	-99
  65 001e AE       		.byte	-82
  66 001f 9F       		.byte	-97
  67 0020 A0       		.byte	-96
  68 0021 21       		.byte	33
  69 0022 A2       		.byte	-94
  70 0023 A3       		.byte	-93
  71 0024 A4       		.byte	-92
  72 0025 A5       		.byte	-91
  73 0026 A6       		.byte	-90
  74 0027 A7       		.byte	-89
  75 0028 A8       		.byte	-88
  76 0029 A9       		.byte	-87
  77 002a AA       		.byte	-86
  78 002b AB       		.byte	-85
  79 002c AC       		.byte	-84
  80 002d AD       		.byte	-83
  81 002e AE       		.byte	-82
  82 002f AF       		.byte	-81
  83 0030 B0       		.byte	-80
  84 0031 B1       		.byte	-79
  85 0032 B2       		.byte	-78
  86 0033 B3       		.byte	-77
  87 0034 B4       		.byte	-76
  88 0035 B5       		.byte	-75
  89 0036 B6       		.byte	-74
  90 0037 B7       		.byte	-73
  91 0038 B8       		.byte	-72
  92 0039 B9       		.byte	-71
  93 003a BA       		.byte	-70
  94 003b BB       		.byte	-69
  95 003c BC       		.byte	-68
  96 003d BD       		.byte	-67
  97 003e BE       		.byte	-66
  98 003f BF       		.byte	-65
  99 0040 C0       		.byte	-64
 100 0041 C1       		.byte	-63
 101 0042 C2       		.byte	-62
 102 0043 C3       		.byte	-61
 103 0044 C4       		.byte	-60
 104 0045 C5       		.byte	-59
 105 0046 C6       		.byte	-58
 106 0047 C7       		.byte	-57
 107 0048 C8       		.byte	-56
 108 0049 C9       		.byte	-55
 109 004a CA       		.byte	-54
 110 004b CB       		.byte	-53
 111 004c CC       		.byte	-52
 112 004d CD       		.byte	-51
 113 004e CE       		.byte	-50
 114 004f CF       		.byte	-49
 115 0050 D0       		.byte	-48
 116 0051 D1       		.byte	-47
 117 0052 D2       		.byte	-46
 118 0053 D3       		.byte	-45
 119 0054 D4       		.byte	-44
 120 0055 D5       		.byte	-43
 121 0056 D6       		.byte	-42
 122 0057 D7       		.byte	-41
 123 0058 D8       		.byte	-40
 124 0059 D9       		.byte	-39
 125 005a DA       		.byte	-38
 126 005b DB       		.byte	-37
 127 005c DC       		.byte	-36
 128 005d DD       		.byte	-35
 129 005e DE       		.byte	-34
 130 005f DF       		.byte	-33
 131 0060 C0       		.byte	-64
 132 0061 C1       		.byte	-63
 133 0062 C2       		.byte	-62
 134 0063 C3       		.byte	-61
 135 0064 C4       		.byte	-60
 136 0065 C5       		.byte	-59
 137 0066 C6       		.byte	-58
 138 0067 C7       		.byte	-57
 139 0068 C8       		.byte	-56
 140 0069 C9       		.byte	-55
 141 006a CA       		.byte	-54
 142 006b CB       		.byte	-53
 143 006c CC       		.byte	-52
 144 006d CD       		.byte	-51
 145 006e CE       		.byte	-50
 146 006f CF       		.byte	-49
 147 0070 D0       		.byte	-48
 148 0071 D1       		.byte	-47
 149 0072 D2       		.byte	-46
 150 0073 D3       		.byte	-45
 151 0074 D4       		.byte	-44
 152 0075 D5       		.byte	-43
 153 0076 D6       		.byte	-42
 154 0077 F7       		.byte	-9
 155 0078 D8       		.byte	-40
 156 0079 D9       		.byte	-39
 157 007a DA       		.byte	-38
 158 007b DB       		.byte	-37
 159 007c DC       		.byte	-36
 160 007d DD       		.byte	-35
 161 007e DE       		.byte	-34
 162 007f 9F       		.byte	-97
 163              		.text
 164              		.align	2
 165              		.thumb
 166              		.thumb_func
 168              	mem_cpy:
 169              	.LFB55:
 170              		.file 1 "../tasks/SDMMC/ff.c"
   1:../tasks/SDMMC/ff.c **** /*----------------------------------------------------------------------------/
   2:../tasks/SDMMC/ff.c **** /  FatFs - FAT file system module  R0.10                 (C)ChaN, 2013
   3:../tasks/SDMMC/ff.c **** /-----------------------------------------------------------------------------/
   4:../tasks/SDMMC/ff.c **** / FatFs module is a generic FAT file system module for small embedded systems.
   5:../tasks/SDMMC/ff.c **** / This is a free software that opened for education, research and commercial
   6:../tasks/SDMMC/ff.c **** / developments under license policy of following terms.
   7:../tasks/SDMMC/ff.c **** /
   8:../tasks/SDMMC/ff.c **** /  Copyright (C) 2013, ChaN, all right reserved.
   9:../tasks/SDMMC/ff.c **** /
  10:../tasks/SDMMC/ff.c **** / * The FatFs module is a free software and there is NO WARRANTY.
  11:../tasks/SDMMC/ff.c **** / * No restriction on use. You can use, modify and redistribute it for
  12:../tasks/SDMMC/ff.c **** /   personal, non-profit or commercial products UNDER YOUR RESPONSIBILITY.
  13:../tasks/SDMMC/ff.c **** / * Redistributions of source code must retain the above copyright notice.
  14:../tasks/SDMMC/ff.c **** /
  15:../tasks/SDMMC/ff.c **** /-----------------------------------------------------------------------------/
  16:../tasks/SDMMC/ff.c **** / Feb 26,'06 R0.00  Prototype.
  17:../tasks/SDMMC/ff.c **** /
  18:../tasks/SDMMC/ff.c **** / Apr 29,'06 R0.01  First stable version.
  19:../tasks/SDMMC/ff.c **** /
  20:../tasks/SDMMC/ff.c **** / Jun 01,'06 R0.02  Added FAT12 support.
  21:../tasks/SDMMC/ff.c **** /                   Removed unbuffered mode.
  22:../tasks/SDMMC/ff.c **** /                   Fixed a problem on small (<32M) partition.
  23:../tasks/SDMMC/ff.c **** / Jun 10,'06 R0.02a Added a configuration option (_FS_MINIMUM).
  24:../tasks/SDMMC/ff.c **** /
  25:../tasks/SDMMC/ff.c **** / Sep 22,'06 R0.03  Added f_rename().
  26:../tasks/SDMMC/ff.c **** /                   Changed option _FS_MINIMUM to _FS_MINIMIZE.
  27:../tasks/SDMMC/ff.c **** / Dec 11,'06 R0.03a Improved cluster scan algorithm to write files fast.
  28:../tasks/SDMMC/ff.c **** /                   Fixed f_mkdir() creates incorrect directory on FAT32.
  29:../tasks/SDMMC/ff.c **** /
  30:../tasks/SDMMC/ff.c **** / Feb 04,'07 R0.04  Supported multiple drive system.
  31:../tasks/SDMMC/ff.c **** /                   Changed some interfaces for multiple drive system.
  32:../tasks/SDMMC/ff.c **** /                   Changed f_mountdrv() to f_mount().
  33:../tasks/SDMMC/ff.c **** /                   Added f_mkfs().
  34:../tasks/SDMMC/ff.c **** / Apr 01,'07 R0.04a Supported multiple partitions on a physical drive.
  35:../tasks/SDMMC/ff.c **** /                   Added a capability of extending file size to f_lseek().
  36:../tasks/SDMMC/ff.c **** /                   Added minimization level 3.
  37:../tasks/SDMMC/ff.c **** /                   Fixed an endian sensitive code in f_mkfs().
  38:../tasks/SDMMC/ff.c **** / May 05,'07 R0.04b Added a configuration option _USE_NTFLAG.
  39:../tasks/SDMMC/ff.c **** /                   Added FSINFO support.
  40:../tasks/SDMMC/ff.c **** /                   Fixed DBCS name can result FR_INVALID_NAME.
  41:../tasks/SDMMC/ff.c **** /                   Fixed short seek (<= csize) collapses the file object.
  42:../tasks/SDMMC/ff.c **** /
  43:../tasks/SDMMC/ff.c **** / Aug 25,'07 R0.05  Changed arguments of f_read(), f_write() and f_mkfs().
  44:../tasks/SDMMC/ff.c **** /                   Fixed f_mkfs() on FAT32 creates incorrect FSINFO.
  45:../tasks/SDMMC/ff.c **** /                   Fixed f_mkdir() on FAT32 creates incorrect directory.
  46:../tasks/SDMMC/ff.c **** / Feb 03,'08 R0.05a Added f_truncate() and f_utime().
  47:../tasks/SDMMC/ff.c **** /                   Fixed off by one error at FAT sub-type determination.
  48:../tasks/SDMMC/ff.c **** /                   Fixed btr in f_read() can be mistruncated.
  49:../tasks/SDMMC/ff.c **** /                   Fixed cached sector is not flushed when create and close without write.
  50:../tasks/SDMMC/ff.c **** /
  51:../tasks/SDMMC/ff.c **** / Apr 01,'08 R0.06  Added fputc(), fputs(), fprintf() and fgets().
  52:../tasks/SDMMC/ff.c **** /                   Improved performance of f_lseek() on moving to the same or following cluster.
  53:../tasks/SDMMC/ff.c **** /
  54:../tasks/SDMMC/ff.c **** / Apr 01,'09 R0.07  Merged Tiny-FatFs as a configuration option. (_FS_TINY)
  55:../tasks/SDMMC/ff.c **** /                   Added long file name feature.
  56:../tasks/SDMMC/ff.c **** /                   Added multiple code page feature.
  57:../tasks/SDMMC/ff.c **** /                   Added re-entrancy for multitask operation.
  58:../tasks/SDMMC/ff.c **** /                   Added auto cluster size selection to f_mkfs().
  59:../tasks/SDMMC/ff.c **** /                   Added rewind option to f_readdir().
  60:../tasks/SDMMC/ff.c **** /                   Changed result code of critical errors.
  61:../tasks/SDMMC/ff.c **** /                   Renamed string functions to avoid name collision.
  62:../tasks/SDMMC/ff.c **** / Apr 14,'09 R0.07a Separated out OS dependent code on reentrant cfg.
  63:../tasks/SDMMC/ff.c **** /                   Added multiple sector size feature.
  64:../tasks/SDMMC/ff.c **** / Jun 21,'09 R0.07c Fixed f_unlink() can return FR_OK on error.
  65:../tasks/SDMMC/ff.c **** /                   Fixed wrong cache control in f_lseek().
  66:../tasks/SDMMC/ff.c **** /                   Added relative path feature.
  67:../tasks/SDMMC/ff.c **** /                   Added f_chdir() and f_chdrive().
  68:../tasks/SDMMC/ff.c **** /                   Added proper case conversion to extended character.
  69:../tasks/SDMMC/ff.c **** / Nov 03,'09 R0.07e Separated out configuration options from ff.h to ffconf.h.
  70:../tasks/SDMMC/ff.c **** /                   Fixed f_unlink() fails to remove a sub-directory on _FS_RPATH.
  71:../tasks/SDMMC/ff.c **** /                   Fixed name matching error on the 13 character boundary.
  72:../tasks/SDMMC/ff.c **** /                   Added a configuration option, _LFN_UNICODE.
  73:../tasks/SDMMC/ff.c **** /                   Changed f_readdir() to return the SFN with always upper case on non-LFN cfg.
  74:../tasks/SDMMC/ff.c **** /
  75:../tasks/SDMMC/ff.c **** / May 15,'10 R0.08  Added a memory configuration option. (_USE_LFN = 3)
  76:../tasks/SDMMC/ff.c **** /                   Added file lock feature. (_FS_SHARE)
  77:../tasks/SDMMC/ff.c **** /                   Added fast seek feature. (_USE_FASTSEEK)
  78:../tasks/SDMMC/ff.c **** /                   Changed some types on the API, XCHAR->TCHAR.
  79:../tasks/SDMMC/ff.c **** /                   Changed .fname in the FILINFO structure on Unicode cfg.
  80:../tasks/SDMMC/ff.c **** /                   String functions support UTF-8 encoding files on Unicode cfg.
  81:../tasks/SDMMC/ff.c **** / Aug 16,'10 R0.08a Added f_getcwd().
  82:../tasks/SDMMC/ff.c **** /                   Added sector erase feature. (_USE_ERASE)
  83:../tasks/SDMMC/ff.c **** /                   Moved file lock semaphore table from fs object to the bss.
  84:../tasks/SDMMC/ff.c **** /                   Fixed a wrong directory entry is created on non-LFN cfg when the given name con
  85:../tasks/SDMMC/ff.c **** /                   Fixed f_mkfs() creates wrong FAT32 volume.
  86:../tasks/SDMMC/ff.c **** / Jan 15,'11 R0.08b Fast seek feature is also applied to f_read() and f_write().
  87:../tasks/SDMMC/ff.c **** /                   f_lseek() reports required table size on creating CLMP.
  88:../tasks/SDMMC/ff.c **** /                   Extended format syntax of f_printf().
  89:../tasks/SDMMC/ff.c **** /                   Ignores duplicated directory separators in given path name.
  90:../tasks/SDMMC/ff.c **** /
  91:../tasks/SDMMC/ff.c **** / Sep 06,'11 R0.09  f_mkfs() supports multiple partition to complete the multiple partition feature
  92:../tasks/SDMMC/ff.c **** /                   Added f_fdisk().
  93:../tasks/SDMMC/ff.c **** / Aug 27,'12 R0.09a Changed f_open() and f_opendir() reject null object pointer to avoid crash.
  94:../tasks/SDMMC/ff.c **** /                   Changed option name _FS_SHARE to _FS_LOCK.
  95:../tasks/SDMMC/ff.c **** /                   Fixed assertion failure due to OS/2 EA on FAT12/16 volume.
  96:../tasks/SDMMC/ff.c **** / Jan 24,'13 R0.09b Added f_setlabel() and f_getlabel().
  97:../tasks/SDMMC/ff.c **** /
  98:../tasks/SDMMC/ff.c **** / Oct 02,'13 R0.10  Added selection of character encoding on the file. (_STRF_ENCODE)
  99:../tasks/SDMMC/ff.c **** /                   Added f_closedir().
 100:../tasks/SDMMC/ff.c **** /                   Added forced full FAT scan for f_getfree(). (_FS_NOFSINFO)
 101:../tasks/SDMMC/ff.c **** /                   Added forced mount feature with changes of f_mount().
 102:../tasks/SDMMC/ff.c **** /                   Improved behavior of volume auto detection.
 103:../tasks/SDMMC/ff.c **** /                   Improved write throughput of f_puts() and f_printf().
 104:../tasks/SDMMC/ff.c **** /                   Changed argument of f_chdrive(), f_mkfs(), disk_read() and disk_write().
 105:../tasks/SDMMC/ff.c **** /                   Fixed f_write() can be truncated when the file size is close to 4GB.
 106:../tasks/SDMMC/ff.c **** /                   Fixed f_open(), f_mkdir() and f_setlabel() can return incorrect error code.
 107:../tasks/SDMMC/ff.c **** /---------------------------------------------------------------------------*/
 108:../tasks/SDMMC/ff.c **** 
 109:../tasks/SDMMC/ff.c **** #include "ff.h"			/* Declarations of FatFs API */
 110:../tasks/SDMMC/ff.c **** #include "diskio.h"		/* Declarations of disk I/O functions */
 111:../tasks/SDMMC/ff.c **** 
 112:../tasks/SDMMC/ff.c **** #include "LEDs.h"
 113:../tasks/SDMMC/ff.c **** 
 114:../tasks/SDMMC/ff.c **** 
 115:../tasks/SDMMC/ff.c **** /*--------------------------------------------------------------------------
 116:../tasks/SDMMC/ff.c **** 
 117:../tasks/SDMMC/ff.c ****    Module Private Definitions
 118:../tasks/SDMMC/ff.c **** 
 119:../tasks/SDMMC/ff.c **** ---------------------------------------------------------------------------*/
 120:../tasks/SDMMC/ff.c **** 
 121:../tasks/SDMMC/ff.c **** #if _FATFS != 80960	/* Revision ID */
 122:../tasks/SDMMC/ff.c **** #error Wrong include file (ff.h).
 123:../tasks/SDMMC/ff.c **** #endif
 124:../tasks/SDMMC/ff.c **** 
 125:../tasks/SDMMC/ff.c **** 
 126:../tasks/SDMMC/ff.c **** /* Definitions on sector size */
 127:../tasks/SDMMC/ff.c **** #if _MAX_SS != 512 && _MAX_SS != 1024 && _MAX_SS != 2048 && _MAX_SS != 4096
 128:../tasks/SDMMC/ff.c **** #error Wrong sector size.
 129:../tasks/SDMMC/ff.c **** #endif
 130:../tasks/SDMMC/ff.c **** #if _MAX_SS != 512
 131:../tasks/SDMMC/ff.c **** #define	SS(fs)	((fs)->ssize)	/* Variable sector size */
 132:../tasks/SDMMC/ff.c **** #else
 133:../tasks/SDMMC/ff.c **** #define	SS(fs)	512U			/* Fixed sector size */
 134:../tasks/SDMMC/ff.c **** #endif
 135:../tasks/SDMMC/ff.c **** 
 136:../tasks/SDMMC/ff.c **** 
 137:../tasks/SDMMC/ff.c **** /* Reentrancy related */
 138:../tasks/SDMMC/ff.c **** #if _FS_REENTRANT
 139:../tasks/SDMMC/ff.c **** #if _USE_LFN == 1
 140:../tasks/SDMMC/ff.c **** #error Static LFN work area cannot be used at thread-safe configuration.
 141:../tasks/SDMMC/ff.c **** #endif
 142:../tasks/SDMMC/ff.c **** #define	ENTER_FF(fs)		{ if (!lock_fs(fs)) return FR_TIMEOUT; }
 143:../tasks/SDMMC/ff.c **** #define	LEAVE_FF(fs, res)	{ unlock_fs(fs, res); return res; }
 144:../tasks/SDMMC/ff.c **** #else
 145:../tasks/SDMMC/ff.c **** #define	ENTER_FF(fs)
 146:../tasks/SDMMC/ff.c **** #define LEAVE_FF(fs, res)	return res
 147:../tasks/SDMMC/ff.c **** #endif
 148:../tasks/SDMMC/ff.c **** 
 149:../tasks/SDMMC/ff.c **** #define	ABORT(fs, res)		{ fp->err = (BYTE)(res); LEAVE_FF(fs, res); }
 150:../tasks/SDMMC/ff.c **** 
 151:../tasks/SDMMC/ff.c **** 
 152:../tasks/SDMMC/ff.c **** /* File access control feature */
 153:../tasks/SDMMC/ff.c **** #if _FS_LOCK
 154:../tasks/SDMMC/ff.c **** #if _FS_READONLY
 155:../tasks/SDMMC/ff.c **** #error _FS_LOCK must be 0 at read-only cfg.
 156:../tasks/SDMMC/ff.c **** #endif
 157:../tasks/SDMMC/ff.c **** typedef struct {
 158:../tasks/SDMMC/ff.c **** 	FATFS *fs;				/* Object ID 1, volume (NULL:blank entry) */
 159:../tasks/SDMMC/ff.c **** 	DWORD clu;				/* Object ID 2, directory */
 160:../tasks/SDMMC/ff.c **** 	WORD idx;				/* Object ID 3, directory index */
 161:../tasks/SDMMC/ff.c **** 	WORD ctr;				/* Object open counter, 0:none, 0x01..0xFF:read mode open count, 0x100:write mode */
 162:../tasks/SDMMC/ff.c **** } FILESEM;
 163:../tasks/SDMMC/ff.c **** #endif
 164:../tasks/SDMMC/ff.c **** 
 165:../tasks/SDMMC/ff.c **** 
 166:../tasks/SDMMC/ff.c **** 
 167:../tasks/SDMMC/ff.c **** /* DBCS code ranges and SBCS extend character conversion table */
 168:../tasks/SDMMC/ff.c **** 
 169:../tasks/SDMMC/ff.c **** #if _CODE_PAGE == 932	/* Japanese Shift-JIS */
 170:../tasks/SDMMC/ff.c **** #define _DF1S	0x81	/* DBC 1st byte range 1 start */
 171:../tasks/SDMMC/ff.c **** #define _DF1E	0x9F	/* DBC 1st byte range 1 end */
 172:../tasks/SDMMC/ff.c **** #define _DF2S	0xE0	/* DBC 1st byte range 2 start */
 173:../tasks/SDMMC/ff.c **** #define _DF2E	0xFC	/* DBC 1st byte range 2 end */
 174:../tasks/SDMMC/ff.c **** #define _DS1S	0x40	/* DBC 2nd byte range 1 start */
 175:../tasks/SDMMC/ff.c **** #define _DS1E	0x7E	/* DBC 2nd byte range 1 end */
 176:../tasks/SDMMC/ff.c **** #define _DS2S	0x80	/* DBC 2nd byte range 2 start */
 177:../tasks/SDMMC/ff.c **** #define _DS2E	0xFC	/* DBC 2nd byte range 2 end */
 178:../tasks/SDMMC/ff.c **** 
 179:../tasks/SDMMC/ff.c **** #elif _CODE_PAGE == 936	/* Simplified Chinese GBK */
 180:../tasks/SDMMC/ff.c **** #define _DF1S	0x81
 181:../tasks/SDMMC/ff.c **** #define _DF1E	0xFE
 182:../tasks/SDMMC/ff.c **** #define _DS1S	0x40
 183:../tasks/SDMMC/ff.c **** #define _DS1E	0x7E
 184:../tasks/SDMMC/ff.c **** #define _DS2S	0x80
 185:../tasks/SDMMC/ff.c **** #define _DS2E	0xFE
 186:../tasks/SDMMC/ff.c **** 
 187:../tasks/SDMMC/ff.c **** #elif _CODE_PAGE == 949	/* Korean */
 188:../tasks/SDMMC/ff.c **** #define _DF1S	0x81
 189:../tasks/SDMMC/ff.c **** #define _DF1E	0xFE
 190:../tasks/SDMMC/ff.c **** #define _DS1S	0x41
 191:../tasks/SDMMC/ff.c **** #define _DS1E	0x5A
 192:../tasks/SDMMC/ff.c **** #define _DS2S	0x61
 193:../tasks/SDMMC/ff.c **** #define _DS2E	0x7A
 194:../tasks/SDMMC/ff.c **** #define _DS3S	0x81
 195:../tasks/SDMMC/ff.c **** #define _DS3E	0xFE
 196:../tasks/SDMMC/ff.c **** 
 197:../tasks/SDMMC/ff.c **** #elif _CODE_PAGE == 950	/* Traditional Chinese Big5 */
 198:../tasks/SDMMC/ff.c **** #define _DF1S	0x81
 199:../tasks/SDMMC/ff.c **** #define _DF1E	0xFE
 200:../tasks/SDMMC/ff.c **** #define _DS1S	0x40
 201:../tasks/SDMMC/ff.c **** #define _DS1E	0x7E
 202:../tasks/SDMMC/ff.c **** #define _DS2S	0xA1
 203:../tasks/SDMMC/ff.c **** #define _DS2E	0xFE
 204:../tasks/SDMMC/ff.c **** 
 205:../tasks/SDMMC/ff.c **** #elif _CODE_PAGE == 437	/* U.S. (OEM) */
 206:../tasks/SDMMC/ff.c **** #define _DF1S	0
 207:../tasks/SDMMC/ff.c **** #define _EXCVT {0x80,0x9A,0x90,0x41,0x8E,0x41,0x8F,0x80,0x45,0x45,0x45,0x49,0x49,0x49,0x8E,0x8F,0x9
 208:../tasks/SDMMC/ff.c **** 				0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,
 209:../tasks/SDMMC/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 210:../tasks/SDMMC/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 211:../tasks/SDMMC/ff.c **** 
 212:../tasks/SDMMC/ff.c **** #elif _CODE_PAGE == 720	/* Arabic (OEM) */
 213:../tasks/SDMMC/ff.c **** #define _DF1S	0
 214:../tasks/SDMMC/ff.c **** #define _EXCVT {0x80,0x81,0x45,0x41,0x84,0x41,0x86,0x43,0x45,0x45,0x45,0x49,0x49,0x8D,0x8E,0x8F,0x9
 215:../tasks/SDMMC/ff.c **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 216:../tasks/SDMMC/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 217:../tasks/SDMMC/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 218:../tasks/SDMMC/ff.c **** 
 219:../tasks/SDMMC/ff.c **** #elif _CODE_PAGE == 737	/* Greek (OEM) */
 220:../tasks/SDMMC/ff.c **** #define _DF1S	0
 221:../tasks/SDMMC/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 222:../tasks/SDMMC/ff.c **** 				0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0xAA,0x92,0x93,0x94,0x95,0x96,0xB0,0xB1,0xB2,
 223:../tasks/SDMMC/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 224:../tasks/SDMMC/ff.c **** 				0x97,0xEA,0xEB,0xEC,0xE4,0xED,0xEE,0xE7,0xE8,0xF1,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 225:../tasks/SDMMC/ff.c **** 
 226:../tasks/SDMMC/ff.c **** #elif _CODE_PAGE == 775	/* Baltic (OEM) */
 227:../tasks/SDMMC/ff.c **** #define _DF1S	0
 228:../tasks/SDMMC/ff.c **** #define _EXCVT {0x80,0x9A,0x91,0xA0,0x8E,0x95,0x8F,0x80,0xAD,0xED,0x8A,0x8A,0xA1,0x8D,0x8E,0x8F,0x9
 229:../tasks/SDMMC/ff.c **** 				0xA0,0xA1,0xE0,0xA3,0xA3,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 230:../tasks/SDMMC/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xB5,0xB6,0xB7,
 231:../tasks/SDMMC/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE3,0xE8,0xE8,0xEA,0xEA,0xEE,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 232:../tasks/SDMMC/ff.c **** 
 233:../tasks/SDMMC/ff.c **** #elif _CODE_PAGE == 850	/* Multilingual Latin 1 (OEM) */
 234:../tasks/SDMMC/ff.c **** #define _DF1S	0
 235:../tasks/SDMMC/ff.c **** #define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xB7,0x8F,0x80,0xD2,0xD3,0xD4,0xD8,0xD7,0xDE,0x8E,0x8F,0x9
 236:../tasks/SDMMC/ff.c **** 				0xB5,0xD6,0xE0,0xE9,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,
 237:../tasks/SDMMC/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 238:../tasks/SDMMC/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE7,0xE7,0xE9,0xEA,0xEB,0xED,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 239:../tasks/SDMMC/ff.c **** 
 240:../tasks/SDMMC/ff.c **** #elif _CODE_PAGE == 852	/* Latin 2 (OEM) */
 241:../tasks/SDMMC/ff.c **** #define _DF1S	0
 242:../tasks/SDMMC/ff.c **** #define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xDE,0x8F,0x80,0x9D,0xD3,0x8A,0x8A,0xD7,0x8D,0x8E,0x8F,0x9
 243:../tasks/SDMMC/ff.c **** 				0xB5,0xD6,0xE0,0xE9,0xA4,0xA4,0xA6,0xA6,0xA8,0xA8,0xAA,0x8D,0xAC,0xB8,0xAE,0xAF,0xB0,0xB1,0xB2,
 244:../tasks/SDMMC/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC6,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD1,0xD1,0xD2,
 245:../tasks/SDMMC/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE3,0xD5,0xE6,0xE6,0xE8,0xE9,0xE8,0xEB,0xED,0xED,0xDD,0xEF,0xF0,0xF1,0xF2,
 246:../tasks/SDMMC/ff.c **** 
 247:../tasks/SDMMC/ff.c **** #elif _CODE_PAGE == 855	/* Cyrillic (OEM) */
 248:../tasks/SDMMC/ff.c **** #define _DF1S	0
 249:../tasks/SDMMC/ff.c **** #define _EXCVT {0x81,0x81,0x83,0x83,0x85,0x85,0x87,0x87,0x89,0x89,0x8B,0x8B,0x8D,0x8D,0x8F,0x8F,0x9
 250:../tasks/SDMMC/ff.c **** 				0xA1,0xA1,0xA3,0xA3,0xA5,0xA5,0xA7,0xA7,0xA9,0xA9,0xAB,0xAB,0xAD,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 251:../tasks/SDMMC/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD1,0xD1,0xD3,
 252:../tasks/SDMMC/ff.c **** 				0xE0,0xE2,0xE2,0xE4,0xE4,0xE6,0xE6,0xE8,0xE8,0xEA,0xEA,0xEC,0xEC,0xEE,0xEE,0xEF,0xF0,0xF2,0xF2,
 253:../tasks/SDMMC/ff.c **** 
 254:../tasks/SDMMC/ff.c **** #elif _CODE_PAGE == 857	/* Turkish (OEM) */
 255:../tasks/SDMMC/ff.c **** #define _DF1S	0
 256:../tasks/SDMMC/ff.c **** #define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xB7,0x8F,0x80,0xD2,0xD3,0xD4,0xD8,0xD7,0x98,0x8E,0x8F,0x9
 257:../tasks/SDMMC/ff.c **** 				0xB5,0xD6,0xE0,0xE9,0xA5,0xA5,0xA6,0xA6,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,
 258:../tasks/SDMMC/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 259:../tasks/SDMMC/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xDE,0x59,0xEE,0xEF,0xF0,0xF1,0xF2,
 260:../tasks/SDMMC/ff.c **** 
 261:../tasks/SDMMC/ff.c **** #elif _CODE_PAGE == 858	/* Multilingual Latin 1 + Euro (OEM) */
 262:../tasks/SDMMC/ff.c **** #define _DF1S	0
 263:../tasks/SDMMC/ff.c **** #define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xB7,0x8F,0x80,0xD2,0xD3,0xD4,0xD8,0xD7,0xDE,0x8E,0x8F,0x9
 264:../tasks/SDMMC/ff.c **** 				0xB5,0xD6,0xE0,0xE9,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,
 265:../tasks/SDMMC/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD1,0xD1,0xD2,
 266:../tasks/SDMMC/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE7,0xE7,0xE9,0xEA,0xEB,0xED,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 267:../tasks/SDMMC/ff.c **** 
 268:../tasks/SDMMC/ff.c **** #elif _CODE_PAGE == 862	/* Hebrew (OEM) */
 269:../tasks/SDMMC/ff.c **** #define _DF1S	0
 270:../tasks/SDMMC/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 271:../tasks/SDMMC/ff.c **** 				0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,
 272:../tasks/SDMMC/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 273:../tasks/SDMMC/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 274:../tasks/SDMMC/ff.c **** 
 275:../tasks/SDMMC/ff.c **** #elif _CODE_PAGE == 866	/* Russian (OEM) */
 276:../tasks/SDMMC/ff.c **** #define _DF1S	0
 277:../tasks/SDMMC/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 278:../tasks/SDMMC/ff.c **** 				0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0xB0,0xB1,0xB2,
 279:../tasks/SDMMC/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 280:../tasks/SDMMC/ff.c **** 				0x90,0x91,0x92,0x93,0x9d,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F,0xF0,0xF0,0xF2,
 281:../tasks/SDMMC/ff.c **** 
 282:../tasks/SDMMC/ff.c **** #elif _CODE_PAGE == 874	/* Thai (OEM, Windows) */
 283:../tasks/SDMMC/ff.c **** #define _DF1S	0
 284:../tasks/SDMMC/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 285:../tasks/SDMMC/ff.c **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 286:../tasks/SDMMC/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 287:../tasks/SDMMC/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 288:../tasks/SDMMC/ff.c **** 
 289:../tasks/SDMMC/ff.c **** #elif _CODE_PAGE == 1250 /* Central Europe (Windows) */
 290:../tasks/SDMMC/ff.c **** #define _DF1S	0
 291:../tasks/SDMMC/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 292:../tasks/SDMMC/ff.c **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 293:../tasks/SDMMC/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 294:../tasks/SDMMC/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 295:../tasks/SDMMC/ff.c **** 
 296:../tasks/SDMMC/ff.c **** #elif _CODE_PAGE == 1251 /* Cyrillic (Windows) */
 297:../tasks/SDMMC/ff.c **** #define _DF1S	0
 298:../tasks/SDMMC/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x82,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x8
 299:../tasks/SDMMC/ff.c **** 				0xA0,0xA2,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 300:../tasks/SDMMC/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 301:../tasks/SDMMC/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 302:../tasks/SDMMC/ff.c **** 
 303:../tasks/SDMMC/ff.c **** #elif _CODE_PAGE == 1252 /* Latin 1 (Windows) */
 304:../tasks/SDMMC/ff.c **** #define _DF1S	0
 305:../tasks/SDMMC/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 306:../tasks/SDMMC/ff.c **** 				0xA0,0x21,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 307:../tasks/SDMMC/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 308:../tasks/SDMMC/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 309:../tasks/SDMMC/ff.c **** 
 310:../tasks/SDMMC/ff.c **** #elif _CODE_PAGE == 1253 /* Greek (Windows) */
 311:../tasks/SDMMC/ff.c **** #define _DF1S	0
 312:../tasks/SDMMC/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 313:../tasks/SDMMC/ff.c **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 314:../tasks/SDMMC/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 315:../tasks/SDMMC/ff.c **** 				0xE0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xF2,
 316:../tasks/SDMMC/ff.c **** 
 317:../tasks/SDMMC/ff.c **** #elif _CODE_PAGE == 1254 /* Turkish (Windows) */
 318:../tasks/SDMMC/ff.c **** #define _DF1S	0
 319:../tasks/SDMMC/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 320:../tasks/SDMMC/ff.c **** 				0xA0,0x21,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 321:../tasks/SDMMC/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 322:../tasks/SDMMC/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 323:../tasks/SDMMC/ff.c **** 
 324:../tasks/SDMMC/ff.c **** #elif _CODE_PAGE == 1255 /* Hebrew (Windows) */
 325:../tasks/SDMMC/ff.c **** #define _DF1S	0
 326:../tasks/SDMMC/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 327:../tasks/SDMMC/ff.c **** 				0xA0,0x21,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 328:../tasks/SDMMC/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 329:../tasks/SDMMC/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 330:../tasks/SDMMC/ff.c **** 
 331:../tasks/SDMMC/ff.c **** #elif _CODE_PAGE == 1256 /* Arabic (Windows) */
 332:../tasks/SDMMC/ff.c **** #define _DF1S	0
 333:../tasks/SDMMC/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 334:../tasks/SDMMC/ff.c **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 335:../tasks/SDMMC/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 336:../tasks/SDMMC/ff.c **** 				0x41,0xE1,0x41,0xE3,0xE4,0xE5,0xE6,0x43,0x45,0x45,0x45,0x45,0xEC,0xED,0x49,0x49,0xF0,0xF1,0xF2,
 337:../tasks/SDMMC/ff.c **** 
 338:../tasks/SDMMC/ff.c **** #elif _CODE_PAGE == 1257 /* Baltic (Windows) */
 339:../tasks/SDMMC/ff.c **** #define _DF1S	0
 340:../tasks/SDMMC/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 341:../tasks/SDMMC/ff.c **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 342:../tasks/SDMMC/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 343:../tasks/SDMMC/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 344:../tasks/SDMMC/ff.c **** 
 345:../tasks/SDMMC/ff.c **** #elif _CODE_PAGE == 1258 /* Vietnam (OEM, Windows) */
 346:../tasks/SDMMC/ff.c **** #define _DF1S	0
 347:../tasks/SDMMC/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 348:../tasks/SDMMC/ff.c **** 				0xA0,0x21,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 349:../tasks/SDMMC/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 350:../tasks/SDMMC/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xEC,0xCD,0xCE,0xCF,0xD0,0xD1,0xF2,
 351:../tasks/SDMMC/ff.c **** 
 352:../tasks/SDMMC/ff.c **** #elif _CODE_PAGE == 1	/* ASCII (for only non-LFN cfg) */
 353:../tasks/SDMMC/ff.c **** #if _USE_LFN
 354:../tasks/SDMMC/ff.c **** #error Cannot use LFN feature without valid code page.
 355:../tasks/SDMMC/ff.c **** #endif
 356:../tasks/SDMMC/ff.c **** #define _DF1S	0
 357:../tasks/SDMMC/ff.c **** 
 358:../tasks/SDMMC/ff.c **** #else
 359:../tasks/SDMMC/ff.c **** #error Unknown code page
 360:../tasks/SDMMC/ff.c **** 
 361:../tasks/SDMMC/ff.c **** #endif
 362:../tasks/SDMMC/ff.c **** 
 363:../tasks/SDMMC/ff.c **** 
 364:../tasks/SDMMC/ff.c **** /* Character code support macros */
 365:../tasks/SDMMC/ff.c **** #define IsUpper(c)	(((c)>='A')&&((c)<='Z'))
 366:../tasks/SDMMC/ff.c **** #define IsLower(c)	(((c)>='a')&&((c)<='z'))
 367:../tasks/SDMMC/ff.c **** #define IsDigit(c)	(((c)>='0')&&((c)<='9'))
 368:../tasks/SDMMC/ff.c **** 
 369:../tasks/SDMMC/ff.c **** #if _DF1S		/* Code page is DBCS */
 370:../tasks/SDMMC/ff.c **** 
 371:../tasks/SDMMC/ff.c **** #ifdef _DF2S	/* Two 1st byte areas */
 372:../tasks/SDMMC/ff.c **** #define IsDBCS1(c)	(((BYTE)(c) >= _DF1S && (BYTE)(c) <= _DF1E) || ((BYTE)(c) >= _DF2S && (BYTE)(c) 
 373:../tasks/SDMMC/ff.c **** #else			/* One 1st byte area */
 374:../tasks/SDMMC/ff.c **** #define IsDBCS1(c)	((BYTE)(c) >= _DF1S && (BYTE)(c) <= _DF1E)
 375:../tasks/SDMMC/ff.c **** #endif
 376:../tasks/SDMMC/ff.c **** 
 377:../tasks/SDMMC/ff.c **** #ifdef _DS3S	/* Three 2nd byte areas */
 378:../tasks/SDMMC/ff.c **** #define IsDBCS2(c)	(((BYTE)(c) >= _DS1S && (BYTE)(c) <= _DS1E) || ((BYTE)(c) >= _DS2S && (BYTE)(c) 
 379:../tasks/SDMMC/ff.c **** #else			/* Two 2nd byte areas */
 380:../tasks/SDMMC/ff.c **** #define IsDBCS2(c)	(((BYTE)(c) >= _DS1S && (BYTE)(c) <= _DS1E) || ((BYTE)(c) >= _DS2S && (BYTE)(c) 
 381:../tasks/SDMMC/ff.c **** #endif
 382:../tasks/SDMMC/ff.c **** 
 383:../tasks/SDMMC/ff.c **** #else			/* Code page is SBCS */
 384:../tasks/SDMMC/ff.c **** 
 385:../tasks/SDMMC/ff.c **** #define IsDBCS1(c)	0
 386:../tasks/SDMMC/ff.c **** #define IsDBCS2(c)	0
 387:../tasks/SDMMC/ff.c **** 
 388:../tasks/SDMMC/ff.c **** #endif /* _DF1S */
 389:../tasks/SDMMC/ff.c **** 
 390:../tasks/SDMMC/ff.c **** 
 391:../tasks/SDMMC/ff.c **** /* Name status flags */
 392:../tasks/SDMMC/ff.c **** #define NS			11		/* Index of name status byte in fn[] */
 393:../tasks/SDMMC/ff.c **** #define NS_LOSS		0x01	/* Out of 8.3 format */
 394:../tasks/SDMMC/ff.c **** #define NS_LFN		0x02	/* Force to create LFN entry */
 395:../tasks/SDMMC/ff.c **** #define NS_LAST		0x04	/* Last segment */
 396:../tasks/SDMMC/ff.c **** #define NS_BODY		0x08	/* Lower case flag (body) */
 397:../tasks/SDMMC/ff.c **** #define NS_EXT		0x10	/* Lower case flag (ext) */
 398:../tasks/SDMMC/ff.c **** #define NS_DOT		0x20	/* Dot entry */
 399:../tasks/SDMMC/ff.c **** 
 400:../tasks/SDMMC/ff.c **** 
 401:../tasks/SDMMC/ff.c **** /* FAT sub-type boundaries */
 402:../tasks/SDMMC/ff.c **** #define MIN_FAT16	4086U	/* Minimum number of clusters for FAT16 */
 403:../tasks/SDMMC/ff.c **** #define	MIN_FAT32	65526U	/* Minimum number of clusters for FAT32 */
 404:../tasks/SDMMC/ff.c **** 
 405:../tasks/SDMMC/ff.c **** 
 406:../tasks/SDMMC/ff.c **** /* FatFs refers the members in the FAT structures as byte array instead of
 407:../tasks/SDMMC/ff.c **** / structure member because the structure is not binary compatible between
 408:../tasks/SDMMC/ff.c **** / different platforms */
 409:../tasks/SDMMC/ff.c **** 
 410:../tasks/SDMMC/ff.c **** #define BS_jmpBoot			0	/* Jump instruction (3) */
 411:../tasks/SDMMC/ff.c **** #define BS_OEMName			3	/* OEM name (8) */
 412:../tasks/SDMMC/ff.c **** #define BPB_BytsPerSec		11	/* Sector size [byte] (2) */
 413:../tasks/SDMMC/ff.c **** #define BPB_SecPerClus		13	/* Cluster size [sector] (1) */
 414:../tasks/SDMMC/ff.c **** #define BPB_RsvdSecCnt		14	/* Size of reserved area [sector] (2) */
 415:../tasks/SDMMC/ff.c **** #define BPB_NumFATs			16	/* Number of FAT copies (1) */
 416:../tasks/SDMMC/ff.c **** #define BPB_RootEntCnt		17	/* Number of root directory entries for FAT12/16 (2) */
 417:../tasks/SDMMC/ff.c **** #define BPB_TotSec16		19	/* Volume size [sector] (2) */
 418:../tasks/SDMMC/ff.c **** #define BPB_Media			21	/* Media descriptor (1) */
 419:../tasks/SDMMC/ff.c **** #define BPB_FATSz16			22	/* FAT size [sector] (2) */
 420:../tasks/SDMMC/ff.c **** #define BPB_SecPerTrk		24	/* Track size [sector] (2) */
 421:../tasks/SDMMC/ff.c **** #define BPB_NumHeads		26	/* Number of heads (2) */
 422:../tasks/SDMMC/ff.c **** #define BPB_HiddSec			28	/* Number of special hidden sectors (4) */
 423:../tasks/SDMMC/ff.c **** #define BPB_TotSec32		32	/* Volume size [sector] (4) */
 424:../tasks/SDMMC/ff.c **** #define BS_DrvNum			36	/* Physical drive number (2) */
 425:../tasks/SDMMC/ff.c **** #define BS_BootSig			38	/* Extended boot signature (1) */
 426:../tasks/SDMMC/ff.c **** #define BS_VolID			39	/* Volume serial number (4) */
 427:../tasks/SDMMC/ff.c **** #define BS_VolLab			43	/* Volume label (8) */
 428:../tasks/SDMMC/ff.c **** #define BS_FilSysType		54	/* File system type (1) */
 429:../tasks/SDMMC/ff.c **** #define BPB_FATSz32			36	/* FAT size [sector] (4) */
 430:../tasks/SDMMC/ff.c **** #define BPB_ExtFlags		40	/* Extended flags (2) */
 431:../tasks/SDMMC/ff.c **** #define BPB_FSVer			42	/* File system version (2) */
 432:../tasks/SDMMC/ff.c **** #define BPB_RootClus		44	/* Root directory first cluster (4) */
 433:../tasks/SDMMC/ff.c **** #define BPB_FSInfo			48	/* Offset of FSINFO sector (2) */
 434:../tasks/SDMMC/ff.c **** #define BPB_BkBootSec		50	/* Offset of backup boot sector (2) */
 435:../tasks/SDMMC/ff.c **** #define BS_DrvNum32			64	/* Physical drive number (2) */
 436:../tasks/SDMMC/ff.c **** #define BS_BootSig32		66	/* Extended boot signature (1) */
 437:../tasks/SDMMC/ff.c **** #define BS_VolID32			67	/* Volume serial number (4) */
 438:../tasks/SDMMC/ff.c **** #define BS_VolLab32			71	/* Volume label (8) */
 439:../tasks/SDMMC/ff.c **** #define BS_FilSysType32		82	/* File system type (1) */
 440:../tasks/SDMMC/ff.c **** #define	FSI_LeadSig			0	/* FSI: Leading signature (4) */
 441:../tasks/SDMMC/ff.c **** #define	FSI_StrucSig		484	/* FSI: Structure signature (4) */
 442:../tasks/SDMMC/ff.c **** #define	FSI_Free_Count		488	/* FSI: Number of free clusters (4) */
 443:../tasks/SDMMC/ff.c **** #define	FSI_Nxt_Free		492	/* FSI: Last allocated cluster (4) */
 444:../tasks/SDMMC/ff.c **** #define MBR_Table			446	/* MBR: Partition table offset (2) */
 445:../tasks/SDMMC/ff.c **** #define	SZ_PTE				16	/* MBR: Size of a partition table entry */
 446:../tasks/SDMMC/ff.c **** #define BS_55AA				510	/* Boot sector signature (2) */
 447:../tasks/SDMMC/ff.c **** 
 448:../tasks/SDMMC/ff.c **** #define	DIR_Name			0	/* Short file name (11) */
 449:../tasks/SDMMC/ff.c **** #define	DIR_Attr			11	/* Attribute (1) */
 450:../tasks/SDMMC/ff.c **** #define	DIR_NTres			12	/* NT flag (1) */
 451:../tasks/SDMMC/ff.c **** #define DIR_CrtTimeTenth	13	/* Created time sub-second (1) */
 452:../tasks/SDMMC/ff.c **** #define	DIR_CrtTime			14	/* Created time (2) */
 453:../tasks/SDMMC/ff.c **** #define	DIR_CrtDate			16	/* Created date (2) */
 454:../tasks/SDMMC/ff.c **** #define DIR_LstAccDate		18	/* Last accessed date (2) */
 455:../tasks/SDMMC/ff.c **** #define	DIR_FstClusHI		20	/* Higher 16-bit of first cluster (2) */
 456:../tasks/SDMMC/ff.c **** #define	DIR_WrtTime			22	/* Modified time (2) */
 457:../tasks/SDMMC/ff.c **** #define	DIR_WrtDate			24	/* Modified date (2) */
 458:../tasks/SDMMC/ff.c **** #define	DIR_FstClusLO		26	/* Lower 16-bit of first cluster (2) */
 459:../tasks/SDMMC/ff.c **** #define	DIR_FileSize		28	/* File size (4) */
 460:../tasks/SDMMC/ff.c **** #define	LDIR_Ord			0	/* LFN entry order and LLE flag (1) */
 461:../tasks/SDMMC/ff.c **** #define	LDIR_Attr			11	/* LFN attribute (1) */
 462:../tasks/SDMMC/ff.c **** #define	LDIR_Type			12	/* LFN type (1) */
 463:../tasks/SDMMC/ff.c **** #define	LDIR_Chksum			13	/* Sum of corresponding SFN entry */
 464:../tasks/SDMMC/ff.c **** #define	LDIR_FstClusLO		26	/* Filled by zero (0) */
 465:../tasks/SDMMC/ff.c **** #define	SZ_DIR				32		/* Size of a directory entry */
 466:../tasks/SDMMC/ff.c **** #define	LLE					0x40	/* Last long entry flag in LDIR_Ord */
 467:../tasks/SDMMC/ff.c **** #define	DDE					0xE5	/* Deleted directory entry mark in DIR_Name[0] */
 468:../tasks/SDMMC/ff.c **** #define	NDDE				0x05	/* Replacement of the character collides with DDE */
 469:../tasks/SDMMC/ff.c **** 
 470:../tasks/SDMMC/ff.c **** 
 471:../tasks/SDMMC/ff.c **** /*------------------------------------------------------------*/
 472:../tasks/SDMMC/ff.c **** /* Module private work area                                   */
 473:../tasks/SDMMC/ff.c **** /*------------------------------------------------------------*/
 474:../tasks/SDMMC/ff.c **** /* Note that uninitialized variables with static duration are
 475:../tasks/SDMMC/ff.c **** /  zeroed/nulled at start-up. If not, the compiler or start-up
 476:../tasks/SDMMC/ff.c **** /  routine is out of ANSI-C standard.
 477:../tasks/SDMMC/ff.c **** */
 478:../tasks/SDMMC/ff.c **** 
 479:../tasks/SDMMC/ff.c **** #if _VOLUMES
 480:../tasks/SDMMC/ff.c **** static
 481:../tasks/SDMMC/ff.c **** FATFS *FatFs[_VOLUMES];	/* Pointer to the file system objects (logical drives) */
 482:../tasks/SDMMC/ff.c **** #else
 483:../tasks/SDMMC/ff.c **** #error Number of volumes must not be 0.
 484:../tasks/SDMMC/ff.c **** #endif
 485:../tasks/SDMMC/ff.c **** 
 486:../tasks/SDMMC/ff.c **** static
 487:../tasks/SDMMC/ff.c **** WORD Fsid;				/* File system mount ID */
 488:../tasks/SDMMC/ff.c **** 
 489:../tasks/SDMMC/ff.c **** #if _FS_RPATH && _VOLUMES >= 2
 490:../tasks/SDMMC/ff.c **** static
 491:../tasks/SDMMC/ff.c **** BYTE CurrVol;			/* Current drive */
 492:../tasks/SDMMC/ff.c **** #endif
 493:../tasks/SDMMC/ff.c **** 
 494:../tasks/SDMMC/ff.c **** #if _FS_LOCK
 495:../tasks/SDMMC/ff.c **** static
 496:../tasks/SDMMC/ff.c **** FILESEM	Files[_FS_LOCK];	/* Open object lock semaphores */
 497:../tasks/SDMMC/ff.c **** #endif
 498:../tasks/SDMMC/ff.c **** 
 499:../tasks/SDMMC/ff.c **** #if _USE_LFN == 0			/* No LFN feature */
 500:../tasks/SDMMC/ff.c **** #define	DEF_NAMEBUF			BYTE sfn[12]
 501:../tasks/SDMMC/ff.c **** #define INIT_BUF(dobj)		(dobj).fn = sfn
 502:../tasks/SDMMC/ff.c **** #define	FREE_BUF()
 503:../tasks/SDMMC/ff.c **** 
 504:../tasks/SDMMC/ff.c **** #elif _USE_LFN == 1			/* LFN feature with static working buffer */
 505:../tasks/SDMMC/ff.c **** static
 506:../tasks/SDMMC/ff.c **** WCHAR LfnBuf[_MAX_LFN+1];
 507:../tasks/SDMMC/ff.c **** #define	DEF_NAMEBUF			BYTE sfn[12]
 508:../tasks/SDMMC/ff.c **** #define INIT_BUF(dobj)		{ (dobj).fn = sfn; (dobj).lfn = LfnBuf; }
 509:../tasks/SDMMC/ff.c **** #define	FREE_BUF()
 510:../tasks/SDMMC/ff.c **** 
 511:../tasks/SDMMC/ff.c **** #elif _USE_LFN == 2 		/* LFN feature with dynamic working buffer on the stack */
 512:../tasks/SDMMC/ff.c **** #define	DEF_NAMEBUF			BYTE sfn[12]; WCHAR lbuf[_MAX_LFN+1]
 513:../tasks/SDMMC/ff.c **** #define INIT_BUF(dobj)		{ (dobj).fn = sfn; (dobj).lfn = lbuf; }
 514:../tasks/SDMMC/ff.c **** #define	FREE_BUF()
 515:../tasks/SDMMC/ff.c **** 
 516:../tasks/SDMMC/ff.c **** #elif _USE_LFN == 3 		/* LFN feature with dynamic working buffer on the heap */
 517:../tasks/SDMMC/ff.c **** #define	DEF_NAMEBUF			BYTE sfn[12]; WCHAR *lfn
 518:../tasks/SDMMC/ff.c **** #define INIT_BUF(dobj)		{ lfn = ff_memalloc((_MAX_LFN + 1) * 2); \
 519:../tasks/SDMMC/ff.c **** 							  if (!lfn) LEAVE_FF((dobj).fs, FR_NOT_ENOUGH_CORE); \
 520:../tasks/SDMMC/ff.c **** 							  (dobj).lfn = lfn;	(dobj).fn = sfn; }
 521:../tasks/SDMMC/ff.c **** #define	FREE_BUF()			ff_memfree(lfn)
 522:../tasks/SDMMC/ff.c **** 
 523:../tasks/SDMMC/ff.c **** #else
 524:../tasks/SDMMC/ff.c **** #error Wrong LFN configuration.
 525:../tasks/SDMMC/ff.c **** #endif
 526:../tasks/SDMMC/ff.c **** 
 527:../tasks/SDMMC/ff.c **** 
 528:../tasks/SDMMC/ff.c **** #ifdef _EXCVT
 529:../tasks/SDMMC/ff.c **** static
 530:../tasks/SDMMC/ff.c **** const BYTE ExCvt[] = _EXCVT;	/* Upper conversion table for extended characters */
 531:../tasks/SDMMC/ff.c **** #endif
 532:../tasks/SDMMC/ff.c **** 
 533:../tasks/SDMMC/ff.c **** 
 534:../tasks/SDMMC/ff.c **** 
 535:../tasks/SDMMC/ff.c **** 
 536:../tasks/SDMMC/ff.c **** 
 537:../tasks/SDMMC/ff.c **** 
 538:../tasks/SDMMC/ff.c **** /*--------------------------------------------------------------------------
 539:../tasks/SDMMC/ff.c **** 
 540:../tasks/SDMMC/ff.c ****    Module Private Functions
 541:../tasks/SDMMC/ff.c **** 
 542:../tasks/SDMMC/ff.c **** ---------------------------------------------------------------------------*/
 543:../tasks/SDMMC/ff.c **** DWORD clust2sect (FATFS* fs, DWORD clst);
 544:../tasks/SDMMC/ff.c **** DWORD get_fat (FATFS* fs,	DWORD clst);
 545:../tasks/SDMMC/ff.c **** 
 546:../tasks/SDMMC/ff.c **** #if !_FS_READONLY
 547:../tasks/SDMMC/ff.c **** FRESULT put_fat (FATFS* fs,	DWORD clst,	DWORD val);
 548:../tasks/SDMMC/ff.c **** #endif /* !_FS_READONLY */
 549:../tasks/SDMMC/ff.c **** 
 550:../tasks/SDMMC/ff.c **** #if _USE_LFN
 551:../tasks/SDMMC/ff.c **** void gen_numname (BYTE* dst, const BYTE* src, const WCHAR* lfn, WORD seq);
 552:../tasks/SDMMC/ff.c **** #endif /* !_USE_LFN */
 553:../tasks/SDMMC/ff.c **** 
 554:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
 555:../tasks/SDMMC/ff.c **** /* String functions                                                      */
 556:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
 557:../tasks/SDMMC/ff.c **** 
 558:../tasks/SDMMC/ff.c **** /* Copy memory to memory */
 559:../tasks/SDMMC/ff.c **** static
 560:../tasks/SDMMC/ff.c **** void mem_cpy (void* dst, const void* src, UINT cnt) {
 171              		.loc 1 560 0
 172              		.cfi_startproc
 173              		@ args = 0, pretend = 0, frame = 24
 174              		@ frame_needed = 1, uses_anonymous_args = 0
 175              		@ link register save eliminated.
 176 0000 80B4     		push	{r7}
 177              		.cfi_def_cfa_offset 4
 178              		.cfi_offset 7, -4
 179 0002 87B0     		sub	sp, sp, #28
 180              		.cfi_def_cfa_offset 32
 181 0004 00AF     		add	r7, sp, #0
 182              		.cfi_def_cfa_register 7
 183 0006 F860     		str	r0, [r7, #12]
 184 0008 B960     		str	r1, [r7, #8]
 185 000a 7A60     		str	r2, [r7, #4]
 561:../tasks/SDMMC/ff.c **** 	BYTE *d = (BYTE*)dst;
 186              		.loc 1 561 0
 187 000c FB68     		ldr	r3, [r7, #12]
 188 000e 7B61     		str	r3, [r7, #20]
 562:../tasks/SDMMC/ff.c **** 	const BYTE *s = (const BYTE*)src;
 189              		.loc 1 562 0
 190 0010 BB68     		ldr	r3, [r7, #8]
 191 0012 3B61     		str	r3, [r7, #16]
 563:../tasks/SDMMC/ff.c **** 
 564:../tasks/SDMMC/ff.c **** #if _WORD_ACCESS == 1
 565:../tasks/SDMMC/ff.c **** 	while (cnt >= sizeof (int)) {
 566:../tasks/SDMMC/ff.c **** 		*(int*)d = *(int*)s;
 567:../tasks/SDMMC/ff.c **** 		d += sizeof (int); s += sizeof (int);
 568:../tasks/SDMMC/ff.c **** 		cnt -= sizeof (int);
 569:../tasks/SDMMC/ff.c **** 	}
 570:../tasks/SDMMC/ff.c **** #endif
 571:../tasks/SDMMC/ff.c **** 	while (cnt--)
 192              		.loc 1 571 0
 193 0014 07E0     		b	.L2
 194              	.L3:
 572:../tasks/SDMMC/ff.c **** 		*d++ = *s++;
 195              		.loc 1 572 0
 196 0016 7B69     		ldr	r3, [r7, #20]
 197 0018 5A1C     		adds	r2, r3, #1
 198 001a 7A61     		str	r2, [r7, #20]
 199 001c 3A69     		ldr	r2, [r7, #16]
 200 001e 511C     		adds	r1, r2, #1
 201 0020 3961     		str	r1, [r7, #16]
 202 0022 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 203 0024 1A70     		strb	r2, [r3]
 204              	.L2:
 571:../tasks/SDMMC/ff.c **** 		*d++ = *s++;
 205              		.loc 1 571 0 discriminator 1
 206 0026 7B68     		ldr	r3, [r7, #4]
 207 0028 5A1E     		subs	r2, r3, #1
 208 002a 7A60     		str	r2, [r7, #4]
 209 002c 002B     		cmp	r3, #0
 210 002e F2D1     		bne	.L3
 573:../tasks/SDMMC/ff.c **** }
 211              		.loc 1 573 0
 212 0030 1C37     		adds	r7, r7, #28
 213 0032 BD46     		mov	sp, r7
 214              		@ sp needed
 215 0034 5DF8047B 		ldr	r7, [sp], #4
 216 0038 7047     		bx	lr
 217              		.cfi_endproc
 218              	.LFE55:
 220 003a 00BF     		.align	2
 221              		.thumb
 222              		.thumb_func
 224              	mem_set:
 225              	.LFB56:
 574:../tasks/SDMMC/ff.c **** 
 575:../tasks/SDMMC/ff.c **** /* Fill memory */
 576:../tasks/SDMMC/ff.c **** static
 577:../tasks/SDMMC/ff.c **** void mem_set (void* dst, int val, UINT cnt) {
 226              		.loc 1 577 0
 227              		.cfi_startproc
 228              		@ args = 0, pretend = 0, frame = 24
 229              		@ frame_needed = 1, uses_anonymous_args = 0
 230              		@ link register save eliminated.
 231 003c 80B4     		push	{r7}
 232              		.cfi_def_cfa_offset 4
 233              		.cfi_offset 7, -4
 234 003e 87B0     		sub	sp, sp, #28
 235              		.cfi_def_cfa_offset 32
 236 0040 00AF     		add	r7, sp, #0
 237              		.cfi_def_cfa_register 7
 238 0042 F860     		str	r0, [r7, #12]
 239 0044 B960     		str	r1, [r7, #8]
 240 0046 7A60     		str	r2, [r7, #4]
 578:../tasks/SDMMC/ff.c **** 	BYTE *d = (BYTE*)dst;
 241              		.loc 1 578 0
 242 0048 FB68     		ldr	r3, [r7, #12]
 243 004a 7B61     		str	r3, [r7, #20]
 579:../tasks/SDMMC/ff.c **** 
 580:../tasks/SDMMC/ff.c **** 	while (cnt--)
 244              		.loc 1 580 0
 245 004c 05E0     		b	.L5
 246              	.L6:
 581:../tasks/SDMMC/ff.c **** 		*d++ = (BYTE)val;
 247              		.loc 1 581 0
 248 004e 7B69     		ldr	r3, [r7, #20]
 249 0050 5A1C     		adds	r2, r3, #1
 250 0052 7A61     		str	r2, [r7, #20]
 251 0054 BA68     		ldr	r2, [r7, #8]
 252 0056 D2B2     		uxtb	r2, r2
 253 0058 1A70     		strb	r2, [r3]
 254              	.L5:
 580:../tasks/SDMMC/ff.c **** 		*d++ = (BYTE)val;
 255              		.loc 1 580 0 discriminator 1
 256 005a 7B68     		ldr	r3, [r7, #4]
 257 005c 5A1E     		subs	r2, r3, #1
 258 005e 7A60     		str	r2, [r7, #4]
 259 0060 002B     		cmp	r3, #0
 260 0062 F4D1     		bne	.L6
 582:../tasks/SDMMC/ff.c **** }
 261              		.loc 1 582 0
 262 0064 1C37     		adds	r7, r7, #28
 263 0066 BD46     		mov	sp, r7
 264              		@ sp needed
 265 0068 5DF8047B 		ldr	r7, [sp], #4
 266 006c 7047     		bx	lr
 267              		.cfi_endproc
 268              	.LFE56:
 270 006e 00BF     		.align	2
 271              		.thumb
 272              		.thumb_func
 274              	mem_cmp:
 275              	.LFB57:
 583:../tasks/SDMMC/ff.c **** 
 584:../tasks/SDMMC/ff.c **** /* Compare memory to memory */
 585:../tasks/SDMMC/ff.c **** static
 586:../tasks/SDMMC/ff.c **** int mem_cmp (const void* dst, const void* src, UINT cnt) {
 276              		.loc 1 586 0
 277              		.cfi_startproc
 278              		@ args = 0, pretend = 0, frame = 32
 279              		@ frame_needed = 1, uses_anonymous_args = 0
 280              		@ link register save eliminated.
 281 0070 80B4     		push	{r7}
 282              		.cfi_def_cfa_offset 4
 283              		.cfi_offset 7, -4
 284 0072 89B0     		sub	sp, sp, #36
 285              		.cfi_def_cfa_offset 40
 286 0074 00AF     		add	r7, sp, #0
 287              		.cfi_def_cfa_register 7
 288 0076 F860     		str	r0, [r7, #12]
 289 0078 B960     		str	r1, [r7, #8]
 290 007a 7A60     		str	r2, [r7, #4]
 587:../tasks/SDMMC/ff.c **** 	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 291              		.loc 1 587 0
 292 007c FB68     		ldr	r3, [r7, #12]
 293 007e FB61     		str	r3, [r7, #28]
 294 0080 BB68     		ldr	r3, [r7, #8]
 295 0082 BB61     		str	r3, [r7, #24]
 588:../tasks/SDMMC/ff.c **** 	int r = 0;
 296              		.loc 1 588 0
 297 0084 0023     		movs	r3, #0
 298 0086 7B61     		str	r3, [r7, #20]
 589:../tasks/SDMMC/ff.c **** 
 590:../tasks/SDMMC/ff.c **** 	while (cnt-- && (r = *d++ - *s++) == 0) ;
 299              		.loc 1 590 0
 300 0088 00BF     		nop
 301              	.L9:
 302              		.loc 1 590 0 is_stmt 0 discriminator 1
 303 008a 7B68     		ldr	r3, [r7, #4]
 304 008c 5A1E     		subs	r2, r3, #1
 305 008e 7A60     		str	r2, [r7, #4]
 306 0090 002B     		cmp	r3, #0
 307 0092 0DD0     		beq	.L8
 308              		.loc 1 590 0 discriminator 2
 309 0094 FB69     		ldr	r3, [r7, #28]
 310 0096 5A1C     		adds	r2, r3, #1
 311 0098 FA61     		str	r2, [r7, #28]
 312 009a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 313 009c 1A46     		mov	r2, r3
 314 009e BB69     		ldr	r3, [r7, #24]
 315 00a0 591C     		adds	r1, r3, #1
 316 00a2 B961     		str	r1, [r7, #24]
 317 00a4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 318 00a6 D31A     		subs	r3, r2, r3
 319 00a8 7B61     		str	r3, [r7, #20]
 320 00aa 7B69     		ldr	r3, [r7, #20]
 321 00ac 002B     		cmp	r3, #0
 322 00ae ECD0     		beq	.L9
 323              	.L8:
 591:../tasks/SDMMC/ff.c **** 	return r;
 324              		.loc 1 591 0 is_stmt 1
 325 00b0 7B69     		ldr	r3, [r7, #20]
 592:../tasks/SDMMC/ff.c **** }
 326              		.loc 1 592 0
 327 00b2 1846     		mov	r0, r3
 328 00b4 2437     		adds	r7, r7, #36
 329 00b6 BD46     		mov	sp, r7
 330              		@ sp needed
 331 00b8 5DF8047B 		ldr	r7, [sp], #4
 332 00bc 7047     		bx	lr
 333              		.cfi_endproc
 334              	.LFE57:
 336 00be 00BF     		.align	2
 337              		.thumb
 338              		.thumb_func
 340              	chk_chr:
 341              	.LFB58:
 593:../tasks/SDMMC/ff.c **** 
 594:../tasks/SDMMC/ff.c **** /* Check if chr is contained in the string */
 595:../tasks/SDMMC/ff.c **** static
 596:../tasks/SDMMC/ff.c **** int chk_chr (const char* str, int chr) {
 342              		.loc 1 596 0
 343              		.cfi_startproc
 344              		@ args = 0, pretend = 0, frame = 8
 345              		@ frame_needed = 1, uses_anonymous_args = 0
 346              		@ link register save eliminated.
 347 00c0 80B4     		push	{r7}
 348              		.cfi_def_cfa_offset 4
 349              		.cfi_offset 7, -4
 350 00c2 83B0     		sub	sp, sp, #12
 351              		.cfi_def_cfa_offset 16
 352 00c4 00AF     		add	r7, sp, #0
 353              		.cfi_def_cfa_register 7
 354 00c6 7860     		str	r0, [r7, #4]
 355 00c8 3960     		str	r1, [r7]
 597:../tasks/SDMMC/ff.c **** 	while (*str && *str != chr) str++;
 356              		.loc 1 597 0
 357 00ca 02E0     		b	.L12
 358              	.L14:
 359              		.loc 1 597 0 is_stmt 0 discriminator 1
 360 00cc 7B68     		ldr	r3, [r7, #4]
 361 00ce 0133     		adds	r3, r3, #1
 362 00d0 7B60     		str	r3, [r7, #4]
 363              	.L12:
 364 00d2 7B68     		ldr	r3, [r7, #4]
 365 00d4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 366 00d6 002B     		cmp	r3, #0
 367 00d8 05D0     		beq	.L13
 368              		.loc 1 597 0 discriminator 2
 369 00da 7B68     		ldr	r3, [r7, #4]
 370 00dc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 371 00de 1A46     		mov	r2, r3
 372 00e0 3B68     		ldr	r3, [r7]
 373 00e2 9A42     		cmp	r2, r3
 374 00e4 F2D1     		bne	.L14
 375              	.L13:
 598:../tasks/SDMMC/ff.c **** 	return *str;
 376              		.loc 1 598 0 is_stmt 1
 377 00e6 7B68     		ldr	r3, [r7, #4]
 378 00e8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 599:../tasks/SDMMC/ff.c **** }
 379              		.loc 1 599 0
 380 00ea 1846     		mov	r0, r3
 381 00ec 0C37     		adds	r7, r7, #12
 382 00ee BD46     		mov	sp, r7
 383              		@ sp needed
 384 00f0 5DF8047B 		ldr	r7, [sp], #4
 385 00f4 7047     		bx	lr
 386              		.cfi_endproc
 387              	.LFE58:
 389 00f6 00BF     		.align	2
 390              		.thumb
 391              		.thumb_func
 393              	chk_lock:
 394              	.LFB59:
 600:../tasks/SDMMC/ff.c **** 
 601:../tasks/SDMMC/ff.c **** 
 602:../tasks/SDMMC/ff.c **** 
 603:../tasks/SDMMC/ff.c **** 
 604:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
 605:../tasks/SDMMC/ff.c **** /* Request/Release grant to access the volume                            */
 606:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
 607:../tasks/SDMMC/ff.c **** #if _FS_REENTRANT
 608:../tasks/SDMMC/ff.c **** static
 609:../tasks/SDMMC/ff.c **** int lock_fs (
 610:../tasks/SDMMC/ff.c **** 	FATFS* fs		/* File system object */
 611:../tasks/SDMMC/ff.c **** )
 612:../tasks/SDMMC/ff.c **** {
 613:../tasks/SDMMC/ff.c **** 	return ff_req_grant(fs->sobj);
 614:../tasks/SDMMC/ff.c **** }
 615:../tasks/SDMMC/ff.c **** 
 616:../tasks/SDMMC/ff.c **** 
 617:../tasks/SDMMC/ff.c **** static
 618:../tasks/SDMMC/ff.c **** void unlock_fs (
 619:../tasks/SDMMC/ff.c **** 	FATFS* fs,		/* File system object */
 620:../tasks/SDMMC/ff.c **** 	FRESULT res		/* Result code to be returned */
 621:../tasks/SDMMC/ff.c **** )
 622:../tasks/SDMMC/ff.c **** {
 623:../tasks/SDMMC/ff.c **** 	if (fs &&
 624:../tasks/SDMMC/ff.c **** 		res != FR_NOT_ENABLED &&
 625:../tasks/SDMMC/ff.c **** 		res != FR_INVALID_DRIVE &&
 626:../tasks/SDMMC/ff.c **** 		res != FR_INVALID_OBJECT &&
 627:../tasks/SDMMC/ff.c **** 		res != FR_TIMEOUT) {
 628:../tasks/SDMMC/ff.c **** 		ff_rel_grant(fs->sobj);
 629:../tasks/SDMMC/ff.c **** 	}
 630:../tasks/SDMMC/ff.c **** }
 631:../tasks/SDMMC/ff.c **** #endif
 632:../tasks/SDMMC/ff.c **** 
 633:../tasks/SDMMC/ff.c **** 
 634:../tasks/SDMMC/ff.c **** 
 635:../tasks/SDMMC/ff.c **** 
 636:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
 637:../tasks/SDMMC/ff.c **** /* File lock control functions                                           */
 638:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
 639:../tasks/SDMMC/ff.c **** #if _FS_LOCK
 640:../tasks/SDMMC/ff.c **** 
 641:../tasks/SDMMC/ff.c **** static
 642:../tasks/SDMMC/ff.c **** FRESULT chk_lock (	/* Check if the file can be accessed */
 643:../tasks/SDMMC/ff.c **** 	DIR* dp,		/* Directory object pointing the file to be checked */
 644:../tasks/SDMMC/ff.c **** 	int acc			/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
 645:../tasks/SDMMC/ff.c **** )
 646:../tasks/SDMMC/ff.c **** {
 395              		.loc 1 646 0
 396              		.cfi_startproc
 397              		@ args = 0, pretend = 0, frame = 16
 398              		@ frame_needed = 1, uses_anonymous_args = 0
 399              		@ link register save eliminated.
 400 00f8 80B4     		push	{r7}
 401              		.cfi_def_cfa_offset 4
 402              		.cfi_offset 7, -4
 403 00fa 85B0     		sub	sp, sp, #20
 404              		.cfi_def_cfa_offset 24
 405 00fc 00AF     		add	r7, sp, #0
 406              		.cfi_def_cfa_register 7
 407 00fe 7860     		str	r0, [r7, #4]
 408 0100 3960     		str	r1, [r7]
 647:../tasks/SDMMC/ff.c **** 	UINT i, be;
 648:../tasks/SDMMC/ff.c **** 
 649:../tasks/SDMMC/ff.c **** 	/* Search file semaphore table */
 650:../tasks/SDMMC/ff.c **** 	for (i = be = 0; i < _FS_LOCK; i++) {
 409              		.loc 1 650 0
 410 0102 0023     		movs	r3, #0
 411 0104 BB60     		str	r3, [r7, #8]
 412 0106 BB68     		ldr	r3, [r7, #8]
 413 0108 FB60     		str	r3, [r7, #12]
 414 010a 44E0     		b	.L17
 415              	.L21:
 651:../tasks/SDMMC/ff.c **** 		if (Files[i].fs) {	/* Existing entry */
 416              		.loc 1 651 0
 417 010c 40F20002 		movw	r2, #:lower16:Files
 418 0110 C0F20002 		movt	r2, #:upper16:Files
 419 0114 F968     		ldr	r1, [r7, #12]
 420 0116 0B46     		mov	r3, r1
 421 0118 5B00     		lsls	r3, r3, #1
 422 011a 0B44     		add	r3, r3, r1
 423 011c 9B00     		lsls	r3, r3, #2
 424 011e 1344     		add	r3, r3, r2
 425 0120 1B68     		ldr	r3, [r3]
 426 0122 002B     		cmp	r3, #0
 427 0124 32D0     		beq	.L18
 652:../tasks/SDMMC/ff.c **** 			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 428              		.loc 1 652 0
 429 0126 40F20002 		movw	r2, #:lower16:Files
 430 012a C0F20002 		movt	r2, #:upper16:Files
 431 012e F968     		ldr	r1, [r7, #12]
 432 0130 0B46     		mov	r3, r1
 433 0132 5B00     		lsls	r3, r3, #1
 434 0134 0B44     		add	r3, r3, r1
 435 0136 9B00     		lsls	r3, r3, #2
 436 0138 1344     		add	r3, r3, r2
 437 013a 1A68     		ldr	r2, [r3]
 438 013c 7B68     		ldr	r3, [r7, #4]
 439 013e D3F80032 		ldr	r3, [r3, #512]
 440 0142 9A42     		cmp	r2, r3
 441 0144 24D1     		bne	.L19
 653:../tasks/SDMMC/ff.c **** 				Files[i].clu == dp->sclust &&
 442              		.loc 1 653 0 discriminator 1
 443 0146 40F20002 		movw	r2, #:lower16:Files
 444 014a C0F20002 		movt	r2, #:upper16:Files
 445 014e F968     		ldr	r1, [r7, #12]
 446 0150 0B46     		mov	r3, r1
 447 0152 5B00     		lsls	r3, r3, #1
 448 0154 0B44     		add	r3, r3, r1
 449 0156 9B00     		lsls	r3, r3, #2
 450 0158 1344     		add	r3, r3, r2
 451 015a 0433     		adds	r3, r3, #4
 452 015c 1A68     		ldr	r2, [r3]
 453 015e 7B68     		ldr	r3, [r7, #4]
 454 0160 D3F80832 		ldr	r3, [r3, #520]
 652:../tasks/SDMMC/ff.c **** 			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 455              		.loc 1 652 0 discriminator 1
 456 0164 9A42     		cmp	r2, r3
 457 0166 13D1     		bne	.L19
 654:../tasks/SDMMC/ff.c **** 				Files[i].idx == dp->index) break;
 458              		.loc 1 654 0
 459 0168 40F20002 		movw	r2, #:lower16:Files
 460 016c C0F20002 		movt	r2, #:upper16:Files
 461 0170 F968     		ldr	r1, [r7, #12]
 462 0172 0B46     		mov	r3, r1
 463 0174 5B00     		lsls	r3, r3, #1
 464 0176 0B44     		add	r3, r3, r1
 465 0178 9B00     		lsls	r3, r3, #2
 466 017a 1344     		add	r3, r3, r2
 467 017c 0833     		adds	r3, r3, #8
 468 017e 1A88     		ldrh	r2, [r3]
 469 0180 7B68     		ldr	r3, [r7, #4]
 470 0182 B3F80632 		ldrh	r3, [r3, #518]
 653:../tasks/SDMMC/ff.c **** 				Files[i].clu == dp->sclust &&
 471              		.loc 1 653 0
 472 0186 9A42     		cmp	r2, r3
 473 0188 02D1     		bne	.L19
 474              		.loc 1 654 0
 475 018a 07E0     		b	.L20
 476              	.L18:
 655:../tasks/SDMMC/ff.c **** 		} else {			/* Blank entry */
 656:../tasks/SDMMC/ff.c **** 			be = 1;
 477              		.loc 1 656 0
 478 018c 0123     		movs	r3, #1
 479 018e BB60     		str	r3, [r7, #8]
 480              	.L19:
 650:../tasks/SDMMC/ff.c **** 		if (Files[i].fs) {	/* Existing entry */
 481              		.loc 1 650 0
 482 0190 FB68     		ldr	r3, [r7, #12]
 483 0192 0133     		adds	r3, r3, #1
 484 0194 FB60     		str	r3, [r7, #12]
 485              	.L17:
 650:../tasks/SDMMC/ff.c **** 		if (Files[i].fs) {	/* Existing entry */
 486              		.loc 1 650 0 is_stmt 0 discriminator 1
 487 0196 FB68     		ldr	r3, [r7, #12]
 488 0198 012B     		cmp	r3, #1
 489 019a B7D9     		bls	.L21
 490              	.L20:
 657:../tasks/SDMMC/ff.c **** 		}
 658:../tasks/SDMMC/ff.c **** 	}
 659:../tasks/SDMMC/ff.c **** 	if (i == _FS_LOCK)	/* The object is not opened */
 491              		.loc 1 659 0 is_stmt 1
 492 019c FB68     		ldr	r3, [r7, #12]
 493 019e 022B     		cmp	r3, #2
 494 01a0 09D1     		bne	.L22
 660:../tasks/SDMMC/ff.c **** 		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new objec
 495              		.loc 1 660 0
 496 01a2 BB68     		ldr	r3, [r7, #8]
 497 01a4 002B     		cmp	r3, #0
 498 01a6 02D1     		bne	.L23
 499              		.loc 1 660 0 is_stmt 0 discriminator 2
 500 01a8 3B68     		ldr	r3, [r7]
 501 01aa 022B     		cmp	r3, #2
 502 01ac 01D1     		bne	.L24
 503              	.L23:
 504              		.loc 1 660 0 discriminator 1
 505 01ae 0023     		movs	r3, #0
 506 01b0 16E0     		b	.L26
 507              	.L24:
 508 01b2 1223     		movs	r3, #18
 509 01b4 14E0     		b	.L26
 510              	.L22:
 661:../tasks/SDMMC/ff.c **** 
 662:../tasks/SDMMC/ff.c **** 	/* The object has been opened. Reject any open against writing file and all write mode open */
 663:../tasks/SDMMC/ff.c **** 	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 511              		.loc 1 663 0 is_stmt 1
 512 01b6 3B68     		ldr	r3, [r7]
 513 01b8 002B     		cmp	r3, #0
 514 01ba 0ED1     		bne	.L27
 515              		.loc 1 663 0 is_stmt 0 discriminator 2
 516 01bc 40F20002 		movw	r2, #:lower16:Files
 517 01c0 C0F20002 		movt	r2, #:upper16:Files
 518 01c4 F968     		ldr	r1, [r7, #12]
 519 01c6 0B46     		mov	r3, r1
 520 01c8 5B00     		lsls	r3, r3, #1
 521 01ca 0B44     		add	r3, r3, r1
 522 01cc 9B00     		lsls	r3, r3, #2
 523 01ce 1344     		add	r3, r3, r2
 524 01d0 0833     		adds	r3, r3, #8
 525 01d2 5B88     		ldrh	r3, [r3, #2]
 526 01d4 B3F5807F 		cmp	r3, #256
 527 01d8 01D1     		bne	.L28
 528              	.L27:
 529              		.loc 1 663 0 discriminator 1
 530 01da 1023     		movs	r3, #16
 531 01dc 00E0     		b	.L26
 532              	.L28:
 533 01de 0023     		movs	r3, #0
 534              	.L26:
 664:../tasks/SDMMC/ff.c **** }
 535              		.loc 1 664 0 is_stmt 1
 536 01e0 1846     		mov	r0, r3
 537 01e2 1437     		adds	r7, r7, #20
 538 01e4 BD46     		mov	sp, r7
 539              		@ sp needed
 540 01e6 5DF8047B 		ldr	r7, [sp], #4
 541 01ea 7047     		bx	lr
 542              		.cfi_endproc
 543              	.LFE59:
 545              		.align	2
 546              		.thumb
 547              		.thumb_func
 549              	enq_lock:
 550              	.LFB60:
 665:../tasks/SDMMC/ff.c **** 
 666:../tasks/SDMMC/ff.c **** 
 667:../tasks/SDMMC/ff.c **** static
 668:../tasks/SDMMC/ff.c **** int enq_lock (void)	/* Check if an entry is available for a new object */
 669:../tasks/SDMMC/ff.c **** {
 551              		.loc 1 669 0
 552              		.cfi_startproc
 553              		@ args = 0, pretend = 0, frame = 8
 554              		@ frame_needed = 1, uses_anonymous_args = 0
 555              		@ link register save eliminated.
 556 01ec 80B4     		push	{r7}
 557              		.cfi_def_cfa_offset 4
 558              		.cfi_offset 7, -4
 559 01ee 83B0     		sub	sp, sp, #12
 560              		.cfi_def_cfa_offset 16
 561 01f0 00AF     		add	r7, sp, #0
 562              		.cfi_def_cfa_register 7
 670:../tasks/SDMMC/ff.c **** 	UINT i;
 671:../tasks/SDMMC/ff.c **** 
 672:../tasks/SDMMC/ff.c **** 	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 563              		.loc 1 672 0
 564 01f2 0023     		movs	r3, #0
 565 01f4 7B60     		str	r3, [r7, #4]
 566 01f6 02E0     		b	.L31
 567              	.L33:
 568              		.loc 1 672 0 is_stmt 0 discriminator 1
 569 01f8 7B68     		ldr	r3, [r7, #4]
 570 01fa 0133     		adds	r3, r3, #1
 571 01fc 7B60     		str	r3, [r7, #4]
 572              	.L31:
 573 01fe 7B68     		ldr	r3, [r7, #4]
 574 0200 012B     		cmp	r3, #1
 575 0202 0CD8     		bhi	.L32
 576              		.loc 1 672 0 discriminator 2
 577 0204 40F20002 		movw	r2, #:lower16:Files
 578 0208 C0F20002 		movt	r2, #:upper16:Files
 579 020c 7968     		ldr	r1, [r7, #4]
 580 020e 0B46     		mov	r3, r1
 581 0210 5B00     		lsls	r3, r3, #1
 582 0212 0B44     		add	r3, r3, r1
 583 0214 9B00     		lsls	r3, r3, #2
 584 0216 1344     		add	r3, r3, r2
 585 0218 1B68     		ldr	r3, [r3]
 586 021a 002B     		cmp	r3, #0
 587 021c ECD1     		bne	.L33
 588              	.L32:
 673:../tasks/SDMMC/ff.c **** 	return (i == _FS_LOCK) ? 0 : 1;
 589              		.loc 1 673 0 is_stmt 1
 590 021e 7B68     		ldr	r3, [r7, #4]
 591 0220 022B     		cmp	r3, #2
 592 0222 0CBF     		ite	eq
 593 0224 0023     		moveq	r3, #0
 594 0226 0123     		movne	r3, #1
 595 0228 DBB2     		uxtb	r3, r3
 674:../tasks/SDMMC/ff.c **** }
 596              		.loc 1 674 0
 597 022a 1846     		mov	r0, r3
 598 022c 0C37     		adds	r7, r7, #12
 599 022e BD46     		mov	sp, r7
 600              		@ sp needed
 601 0230 5DF8047B 		ldr	r7, [sp], #4
 602 0234 7047     		bx	lr
 603              		.cfi_endproc
 604              	.LFE60:
 606 0236 00BF     		.align	2
 607              		.thumb
 608              		.thumb_func
 610              	inc_lock:
 611              	.LFB61:
 675:../tasks/SDMMC/ff.c **** 
 676:../tasks/SDMMC/ff.c **** 
 677:../tasks/SDMMC/ff.c **** static
 678:../tasks/SDMMC/ff.c **** UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
 679:../tasks/SDMMC/ff.c **** 	DIR* dp,	/* Directory object pointing the file to register or increment */
 680:../tasks/SDMMC/ff.c **** 	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
 681:../tasks/SDMMC/ff.c **** )
 682:../tasks/SDMMC/ff.c **** {
 612              		.loc 1 682 0
 613              		.cfi_startproc
 614              		@ args = 0, pretend = 0, frame = 16
 615              		@ frame_needed = 1, uses_anonymous_args = 0
 616              		@ link register save eliminated.
 617 0238 80B4     		push	{r7}
 618              		.cfi_def_cfa_offset 4
 619              		.cfi_offset 7, -4
 620 023a 85B0     		sub	sp, sp, #20
 621              		.cfi_def_cfa_offset 24
 622 023c 00AF     		add	r7, sp, #0
 623              		.cfi_def_cfa_register 7
 624 023e 7860     		str	r0, [r7, #4]
 625 0240 3960     		str	r1, [r7]
 683:../tasks/SDMMC/ff.c **** 	UINT i;
 684:../tasks/SDMMC/ff.c **** 
 685:../tasks/SDMMC/ff.c **** 
 686:../tasks/SDMMC/ff.c **** 	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 626              		.loc 1 686 0
 627 0242 0023     		movs	r3, #0
 628 0244 FB60     		str	r3, [r7, #12]
 629 0246 35E0     		b	.L36
 630              	.L39:
 687:../tasks/SDMMC/ff.c **** 		if (Files[i].fs == dp->fs &&
 631              		.loc 1 687 0
 632 0248 40F20002 		movw	r2, #:lower16:Files
 633 024c C0F20002 		movt	r2, #:upper16:Files
 634 0250 F968     		ldr	r1, [r7, #12]
 635 0252 0B46     		mov	r3, r1
 636 0254 5B00     		lsls	r3, r3, #1
 637 0256 0B44     		add	r3, r3, r1
 638 0258 9B00     		lsls	r3, r3, #2
 639 025a 1344     		add	r3, r3, r2
 640 025c 1A68     		ldr	r2, [r3]
 641 025e 7B68     		ldr	r3, [r7, #4]
 642 0260 D3F80032 		ldr	r3, [r3, #512]
 643 0264 9A42     		cmp	r2, r3
 644 0266 22D1     		bne	.L37
 688:../tasks/SDMMC/ff.c **** 			Files[i].clu == dp->sclust &&
 645              		.loc 1 688 0 discriminator 1
 646 0268 40F20002 		movw	r2, #:lower16:Files
 647 026c C0F20002 		movt	r2, #:upper16:Files
 648 0270 F968     		ldr	r1, [r7, #12]
 649 0272 0B46     		mov	r3, r1
 650 0274 5B00     		lsls	r3, r3, #1
 651 0276 0B44     		add	r3, r3, r1
 652 0278 9B00     		lsls	r3, r3, #2
 653 027a 1344     		add	r3, r3, r2
 654 027c 0433     		adds	r3, r3, #4
 655 027e 1A68     		ldr	r2, [r3]
 656 0280 7B68     		ldr	r3, [r7, #4]
 657 0282 D3F80832 		ldr	r3, [r3, #520]
 687:../tasks/SDMMC/ff.c **** 		if (Files[i].fs == dp->fs &&
 658              		.loc 1 687 0 discriminator 1
 659 0286 9A42     		cmp	r2, r3
 660 0288 11D1     		bne	.L37
 689:../tasks/SDMMC/ff.c **** 			Files[i].idx == dp->index) break;
 661              		.loc 1 689 0
 662 028a 40F20002 		movw	r2, #:lower16:Files
 663 028e C0F20002 		movt	r2, #:upper16:Files
 664 0292 F968     		ldr	r1, [r7, #12]
 665 0294 0B46     		mov	r3, r1
 666 0296 5B00     		lsls	r3, r3, #1
 667 0298 0B44     		add	r3, r3, r1
 668 029a 9B00     		lsls	r3, r3, #2
 669 029c 1344     		add	r3, r3, r2
 670 029e 0833     		adds	r3, r3, #8
 671 02a0 1A88     		ldrh	r2, [r3]
 672 02a2 7B68     		ldr	r3, [r7, #4]
 673 02a4 B3F80632 		ldrh	r3, [r3, #518]
 688:../tasks/SDMMC/ff.c **** 			Files[i].clu == dp->sclust &&
 674              		.loc 1 688 0
 675 02a8 9A42     		cmp	r2, r3
 676 02aa 00D1     		bne	.L37
 677              		.loc 1 689 0
 678 02ac 05E0     		b	.L38
 679              	.L37:
 686:../tasks/SDMMC/ff.c **** 		if (Files[i].fs == dp->fs &&
 680              		.loc 1 686 0
 681 02ae FB68     		ldr	r3, [r7, #12]
 682 02b0 0133     		adds	r3, r3, #1
 683 02b2 FB60     		str	r3, [r7, #12]
 684              	.L36:
 686:../tasks/SDMMC/ff.c **** 		if (Files[i].fs == dp->fs &&
 685              		.loc 1 686 0 is_stmt 0 discriminator 1
 686 02b4 FB68     		ldr	r3, [r7, #12]
 687 02b6 012B     		cmp	r3, #1
 688 02b8 C6D9     		bls	.L39
 689              	.L38:
 690:../tasks/SDMMC/ff.c **** 	}
 691:../tasks/SDMMC/ff.c **** 
 692:../tasks/SDMMC/ff.c **** 	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 690              		.loc 1 692 0 is_stmt 1
 691 02ba FB68     		ldr	r3, [r7, #12]
 692 02bc 022B     		cmp	r3, #2
 693 02be 54D1     		bne	.L40
 693:../tasks/SDMMC/ff.c **** 		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 694              		.loc 1 693 0
 695 02c0 0023     		movs	r3, #0
 696 02c2 FB60     		str	r3, [r7, #12]
 697 02c4 02E0     		b	.L41
 698              	.L43:
 699              		.loc 1 693 0 is_stmt 0 discriminator 1
 700 02c6 FB68     		ldr	r3, [r7, #12]
 701 02c8 0133     		adds	r3, r3, #1
 702 02ca FB60     		str	r3, [r7, #12]
 703              	.L41:
 704 02cc FB68     		ldr	r3, [r7, #12]
 705 02ce 012B     		cmp	r3, #1
 706 02d0 0CD8     		bhi	.L42
 707              		.loc 1 693 0 discriminator 2
 708 02d2 40F20002 		movw	r2, #:lower16:Files
 709 02d6 C0F20002 		movt	r2, #:upper16:Files
 710 02da F968     		ldr	r1, [r7, #12]
 711 02dc 0B46     		mov	r3, r1
 712 02de 5B00     		lsls	r3, r3, #1
 713 02e0 0B44     		add	r3, r3, r1
 714 02e2 9B00     		lsls	r3, r3, #2
 715 02e4 1344     		add	r3, r3, r2
 716 02e6 1B68     		ldr	r3, [r3]
 717 02e8 002B     		cmp	r3, #0
 718 02ea ECD1     		bne	.L43
 719              	.L42:
 694:../tasks/SDMMC/ff.c **** 		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 720              		.loc 1 694 0 is_stmt 1
 721 02ec FB68     		ldr	r3, [r7, #12]
 722 02ee 022B     		cmp	r3, #2
 723 02f0 01D1     		bne	.L44
 724              		.loc 1 694 0 is_stmt 0 discriminator 1
 725 02f2 0023     		movs	r3, #0
 726 02f4 6FE0     		b	.L45
 727              	.L44:
 695:../tasks/SDMMC/ff.c **** 		Files[i].fs = dp->fs;
 728              		.loc 1 695 0 is_stmt 1
 729 02f6 7B68     		ldr	r3, [r7, #4]
 730 02f8 D3F80002 		ldr	r0, [r3, #512]
 731 02fc 40F20002 		movw	r2, #:lower16:Files
 732 0300 C0F20002 		movt	r2, #:upper16:Files
 733 0304 F968     		ldr	r1, [r7, #12]
 734 0306 0B46     		mov	r3, r1
 735 0308 5B00     		lsls	r3, r3, #1
 736 030a 0B44     		add	r3, r3, r1
 737 030c 9B00     		lsls	r3, r3, #2
 738 030e 1344     		add	r3, r3, r2
 739 0310 1860     		str	r0, [r3]
 696:../tasks/SDMMC/ff.c **** 		Files[i].clu = dp->sclust;
 740              		.loc 1 696 0
 741 0312 7B68     		ldr	r3, [r7, #4]
 742 0314 D3F80802 		ldr	r0, [r3, #520]
 743 0318 40F20002 		movw	r2, #:lower16:Files
 744 031c C0F20002 		movt	r2, #:upper16:Files
 745 0320 F968     		ldr	r1, [r7, #12]
 746 0322 0B46     		mov	r3, r1
 747 0324 5B00     		lsls	r3, r3, #1
 748 0326 0B44     		add	r3, r3, r1
 749 0328 9B00     		lsls	r3, r3, #2
 750 032a 1344     		add	r3, r3, r2
 751 032c 0433     		adds	r3, r3, #4
 752 032e 1860     		str	r0, [r3]
 697:../tasks/SDMMC/ff.c **** 		Files[i].idx = dp->index;
 753              		.loc 1 697 0
 754 0330 7B68     		ldr	r3, [r7, #4]
 755 0332 B3F80602 		ldrh	r0, [r3, #518]
 756 0336 40F20002 		movw	r2, #:lower16:Files
 757 033a C0F20002 		movt	r2, #:upper16:Files
 758 033e F968     		ldr	r1, [r7, #12]
 759 0340 0B46     		mov	r3, r1
 760 0342 5B00     		lsls	r3, r3, #1
 761 0344 0B44     		add	r3, r3, r1
 762 0346 9B00     		lsls	r3, r3, #2
 763 0348 1344     		add	r3, r3, r2
 764 034a 0833     		adds	r3, r3, #8
 765 034c 0246     		mov	r2, r0	@ movhi
 766 034e 1A80     		strh	r2, [r3]	@ movhi
 698:../tasks/SDMMC/ff.c **** 		Files[i].ctr = 0;
 767              		.loc 1 698 0
 768 0350 40F20002 		movw	r2, #:lower16:Files
 769 0354 C0F20002 		movt	r2, #:upper16:Files
 770 0358 F968     		ldr	r1, [r7, #12]
 771 035a 0B46     		mov	r3, r1
 772 035c 5B00     		lsls	r3, r3, #1
 773 035e 0B44     		add	r3, r3, r1
 774 0360 9B00     		lsls	r3, r3, #2
 775 0362 1344     		add	r3, r3, r2
 776 0364 0833     		adds	r3, r3, #8
 777 0366 0022     		movs	r2, #0
 778 0368 5A80     		strh	r2, [r3, #2]	@ movhi
 779              	.L40:
 699:../tasks/SDMMC/ff.c **** 	}
 700:../tasks/SDMMC/ff.c **** 
 701:../tasks/SDMMC/ff.c **** 	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 780              		.loc 1 701 0
 781 036a 3B68     		ldr	r3, [r7]
 782 036c 002B     		cmp	r3, #0
 783 036e 0FD0     		beq	.L46
 784              		.loc 1 701 0 is_stmt 0 discriminator 1
 785 0370 40F20002 		movw	r2, #:lower16:Files
 786 0374 C0F20002 		movt	r2, #:upper16:Files
 787 0378 F968     		ldr	r1, [r7, #12]
 788 037a 0B46     		mov	r3, r1
 789 037c 5B00     		lsls	r3, r3, #1
 790 037e 0B44     		add	r3, r3, r1
 791 0380 9B00     		lsls	r3, r3, #2
 792 0382 1344     		add	r3, r3, r2
 793 0384 0833     		adds	r3, r3, #8
 794 0386 5B88     		ldrh	r3, [r3, #2]
 795 0388 002B     		cmp	r3, #0
 796 038a 01D0     		beq	.L46
 797 038c 0023     		movs	r3, #0
 798 038e 22E0     		b	.L45
 799              	.L46:
 702:../tasks/SDMMC/ff.c **** 
 703:../tasks/SDMMC/ff.c **** 	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800              		.loc 1 703 0 is_stmt 1
 801 0390 3B68     		ldr	r3, [r7]
 802 0392 002B     		cmp	r3, #0
 803 0394 0ED1     		bne	.L47
 804              		.loc 1 703 0 is_stmt 0 discriminator 1
 805 0396 40F20002 		movw	r2, #:lower16:Files
 806 039a C0F20002 		movt	r2, #:upper16:Files
 807 039e F968     		ldr	r1, [r7, #12]
 808 03a0 0B46     		mov	r3, r1
 809 03a2 5B00     		lsls	r3, r3, #1
 810 03a4 0B44     		add	r3, r3, r1
 811 03a6 9B00     		lsls	r3, r3, #2
 812 03a8 1344     		add	r3, r3, r2
 813 03aa 0833     		adds	r3, r3, #8
 814 03ac 5B88     		ldrh	r3, [r3, #2]
 815 03ae 0133     		adds	r3, r3, #1
 816 03b0 99B2     		uxth	r1, r3
 817 03b2 01E0     		b	.L48
 818              	.L47:
 819              		.loc 1 703 0 discriminator 2
 820 03b4 4FF48071 		mov	r1, #256
 821              	.L48:
 822              		.loc 1 703 0 discriminator 3
 823 03b8 40F20002 		movw	r2, #:lower16:Files
 824 03bc C0F20002 		movt	r2, #:upper16:Files
 825 03c0 F868     		ldr	r0, [r7, #12]
 826 03c2 0346     		mov	r3, r0
 827 03c4 5B00     		lsls	r3, r3, #1
 828 03c6 0344     		add	r3, r3, r0
 829 03c8 9B00     		lsls	r3, r3, #2
 830 03ca 1344     		add	r3, r3, r2
 831 03cc 0833     		adds	r3, r3, #8
 832 03ce 0A46     		mov	r2, r1	@ movhi
 833 03d0 5A80     		strh	r2, [r3, #2]	@ movhi
 704:../tasks/SDMMC/ff.c **** 
 705:../tasks/SDMMC/ff.c **** 	return i + 1;
 834              		.loc 1 705 0 is_stmt 1 discriminator 3
 835 03d2 FB68     		ldr	r3, [r7, #12]
 836 03d4 0133     		adds	r3, r3, #1
 837              	.L45:
 706:../tasks/SDMMC/ff.c **** }
 838              		.loc 1 706 0
 839 03d6 1846     		mov	r0, r3
 840 03d8 1437     		adds	r7, r7, #20
 841 03da BD46     		mov	sp, r7
 842              		@ sp needed
 843 03dc 5DF8047B 		ldr	r7, [sp], #4
 844 03e0 7047     		bx	lr
 845              		.cfi_endproc
 846              	.LFE61:
 848 03e2 00BF     		.align	2
 849              		.thumb
 850              		.thumb_func
 852              	dec_lock:
 853              	.LFB62:
 707:../tasks/SDMMC/ff.c **** 
 708:../tasks/SDMMC/ff.c **** 
 709:../tasks/SDMMC/ff.c **** static
 710:../tasks/SDMMC/ff.c **** FRESULT dec_lock (	/* Decrement object open counter */
 711:../tasks/SDMMC/ff.c **** 	UINT i			/* Semaphore index (1..) */
 712:../tasks/SDMMC/ff.c **** )
 713:../tasks/SDMMC/ff.c **** {
 854              		.loc 1 713 0
 855              		.cfi_startproc
 856              		@ args = 0, pretend = 0, frame = 16
 857              		@ frame_needed = 1, uses_anonymous_args = 0
 858              		@ link register save eliminated.
 859 03e4 80B4     		push	{r7}
 860              		.cfi_def_cfa_offset 4
 861              		.cfi_offset 7, -4
 862 03e6 85B0     		sub	sp, sp, #20
 863              		.cfi_def_cfa_offset 24
 864 03e8 00AF     		add	r7, sp, #0
 865              		.cfi_def_cfa_register 7
 866 03ea 7860     		str	r0, [r7, #4]
 714:../tasks/SDMMC/ff.c **** 	WORD n;
 715:../tasks/SDMMC/ff.c **** 	FRESULT res;
 716:../tasks/SDMMC/ff.c **** 
 717:../tasks/SDMMC/ff.c **** 
 718:../tasks/SDMMC/ff.c **** 	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 867              		.loc 1 718 0
 868 03ec 7B68     		ldr	r3, [r7, #4]
 869 03ee 013B     		subs	r3, r3, #1
 870 03f0 7B60     		str	r3, [r7, #4]
 871 03f2 7B68     		ldr	r3, [r7, #4]
 872 03f4 012B     		cmp	r3, #1
 873 03f6 37D8     		bhi	.L50
 719:../tasks/SDMMC/ff.c **** 		n = Files[i].ctr;
 874              		.loc 1 719 0
 875 03f8 40F20002 		movw	r2, #:lower16:Files
 876 03fc C0F20002 		movt	r2, #:upper16:Files
 877 0400 7968     		ldr	r1, [r7, #4]
 878 0402 0B46     		mov	r3, r1
 879 0404 5B00     		lsls	r3, r3, #1
 880 0406 0B44     		add	r3, r3, r1
 881 0408 9B00     		lsls	r3, r3, #2
 882 040a 1344     		add	r3, r3, r2
 883 040c 0833     		adds	r3, r3, #8
 884 040e 5B88     		ldrh	r3, [r3, #2]	@ movhi
 885 0410 FB81     		strh	r3, [r7, #14]	@ movhi
 720:../tasks/SDMMC/ff.c **** 		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 886              		.loc 1 720 0
 887 0412 FB89     		ldrh	r3, [r7, #14]
 888 0414 B3F5807F 		cmp	r3, #256
 889 0418 01D1     		bne	.L51
 890              		.loc 1 720 0 is_stmt 0 discriminator 1
 891 041a 0023     		movs	r3, #0
 892 041c FB81     		strh	r3, [r7, #14]	@ movhi
 893              	.L51:
 721:../tasks/SDMMC/ff.c **** 		if (n) n--;					/* Decrement read mode open count */
 894              		.loc 1 721 0 is_stmt 1
 895 041e FB89     		ldrh	r3, [r7, #14]
 896 0420 002B     		cmp	r3, #0
 897 0422 02D0     		beq	.L52
 898              		.loc 1 721 0 is_stmt 0 discriminator 1
 899 0424 FB89     		ldrh	r3, [r7, #14]
 900 0426 013B     		subs	r3, r3, #1
 901 0428 FB81     		strh	r3, [r7, #14]	@ movhi
 902              	.L52:
 722:../tasks/SDMMC/ff.c **** 		Files[i].ctr = n;
 903              		.loc 1 722 0 is_stmt 1
 904 042a 40F20002 		movw	r2, #:lower16:Files
 905 042e C0F20002 		movt	r2, #:upper16:Files
 906 0432 7968     		ldr	r1, [r7, #4]
 907 0434 0B46     		mov	r3, r1
 908 0436 5B00     		lsls	r3, r3, #1
 909 0438 0B44     		add	r3, r3, r1
 910 043a 9B00     		lsls	r3, r3, #2
 911 043c 1344     		add	r3, r3, r2
 912 043e 0833     		adds	r3, r3, #8
 913 0440 FA89     		ldrh	r2, [r7, #14]	@ movhi
 914 0442 5A80     		strh	r2, [r3, #2]	@ movhi
 723:../tasks/SDMMC/ff.c **** 		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 915              		.loc 1 723 0
 916 0444 FB89     		ldrh	r3, [r7, #14]
 917 0446 002B     		cmp	r3, #0
 918 0448 0BD1     		bne	.L53
 919              		.loc 1 723 0 is_stmt 0 discriminator 1
 920 044a 40F20002 		movw	r2, #:lower16:Files
 921 044e C0F20002 		movt	r2, #:upper16:Files
 922 0452 7968     		ldr	r1, [r7, #4]
 923 0454 0B46     		mov	r3, r1
 924 0456 5B00     		lsls	r3, r3, #1
 925 0458 0B44     		add	r3, r3, r1
 926 045a 9B00     		lsls	r3, r3, #2
 927 045c 1344     		add	r3, r3, r2
 928 045e 0022     		movs	r2, #0
 929 0460 1A60     		str	r2, [r3]
 930              	.L53:
 724:../tasks/SDMMC/ff.c **** 		res = FR_OK;
 931              		.loc 1 724 0 is_stmt 1
 932 0462 0023     		movs	r3, #0
 933 0464 7B73     		strb	r3, [r7, #13]
 934 0466 01E0     		b	.L54
 935              	.L50:
 725:../tasks/SDMMC/ff.c **** 	} else {
 726:../tasks/SDMMC/ff.c **** 		res = FR_INT_ERR;			/* Invalid index nunber */
 936              		.loc 1 726 0
 937 0468 0223     		movs	r3, #2
 938 046a 7B73     		strb	r3, [r7, #13]
 939              	.L54:
 727:../tasks/SDMMC/ff.c **** 	}
 728:../tasks/SDMMC/ff.c **** 	return res;
 940              		.loc 1 728 0
 941 046c 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 729:../tasks/SDMMC/ff.c **** }
 942              		.loc 1 729 0
 943 046e 1846     		mov	r0, r3
 944 0470 1437     		adds	r7, r7, #20
 945 0472 BD46     		mov	sp, r7
 946              		@ sp needed
 947 0474 5DF8047B 		ldr	r7, [sp], #4
 948 0478 7047     		bx	lr
 949              		.cfi_endproc
 950              	.LFE62:
 952 047a 00BF     		.align	2
 953              		.thumb
 954              		.thumb_func
 956              	clear_lock:
 957              	.LFB63:
 730:../tasks/SDMMC/ff.c **** 
 731:../tasks/SDMMC/ff.c **** 
 732:../tasks/SDMMC/ff.c **** static
 733:../tasks/SDMMC/ff.c **** void clear_lock (	/* Clear lock entries of the volume */
 734:../tasks/SDMMC/ff.c **** 	FATFS *fs
 735:../tasks/SDMMC/ff.c **** )
 736:../tasks/SDMMC/ff.c **** {
 958              		.loc 1 736 0
 959              		.cfi_startproc
 960              		@ args = 0, pretend = 0, frame = 16
 961              		@ frame_needed = 1, uses_anonymous_args = 0
 962              		@ link register save eliminated.
 963 047c 80B4     		push	{r7}
 964              		.cfi_def_cfa_offset 4
 965              		.cfi_offset 7, -4
 966 047e 85B0     		sub	sp, sp, #20
 967              		.cfi_def_cfa_offset 24
 968 0480 00AF     		add	r7, sp, #0
 969              		.cfi_def_cfa_register 7
 970 0482 7860     		str	r0, [r7, #4]
 737:../tasks/SDMMC/ff.c **** 	UINT i;
 738:../tasks/SDMMC/ff.c **** 
 739:../tasks/SDMMC/ff.c **** 	for (i = 0; i < _FS_LOCK; i++) {
 971              		.loc 1 739 0
 972 0484 0023     		movs	r3, #0
 973 0486 FB60     		str	r3, [r7, #12]
 974 0488 1CE0     		b	.L57
 975              	.L59:
 740:../tasks/SDMMC/ff.c **** 		if (Files[i].fs == fs) Files[i].fs = 0;
 976              		.loc 1 740 0
 977 048a 40F20002 		movw	r2, #:lower16:Files
 978 048e C0F20002 		movt	r2, #:upper16:Files
 979 0492 F968     		ldr	r1, [r7, #12]
 980 0494 0B46     		mov	r3, r1
 981 0496 5B00     		lsls	r3, r3, #1
 982 0498 0B44     		add	r3, r3, r1
 983 049a 9B00     		lsls	r3, r3, #2
 984 049c 1344     		add	r3, r3, r2
 985 049e 1A68     		ldr	r2, [r3]
 986 04a0 7B68     		ldr	r3, [r7, #4]
 987 04a2 9A42     		cmp	r2, r3
 988 04a4 0BD1     		bne	.L58
 989              		.loc 1 740 0 is_stmt 0 discriminator 1
 990 04a6 40F20002 		movw	r2, #:lower16:Files
 991 04aa C0F20002 		movt	r2, #:upper16:Files
 992 04ae F968     		ldr	r1, [r7, #12]
 993 04b0 0B46     		mov	r3, r1
 994 04b2 5B00     		lsls	r3, r3, #1
 995 04b4 0B44     		add	r3, r3, r1
 996 04b6 9B00     		lsls	r3, r3, #2
 997 04b8 1344     		add	r3, r3, r2
 998 04ba 0022     		movs	r2, #0
 999 04bc 1A60     		str	r2, [r3]
 1000              	.L58:
 739:../tasks/SDMMC/ff.c **** 		if (Files[i].fs == fs) Files[i].fs = 0;
 1001              		.loc 1 739 0 is_stmt 1
 1002 04be FB68     		ldr	r3, [r7, #12]
 1003 04c0 0133     		adds	r3, r3, #1
 1004 04c2 FB60     		str	r3, [r7, #12]
 1005              	.L57:
 739:../tasks/SDMMC/ff.c **** 		if (Files[i].fs == fs) Files[i].fs = 0;
 1006              		.loc 1 739 0 is_stmt 0 discriminator 1
 1007 04c4 FB68     		ldr	r3, [r7, #12]
 1008 04c6 012B     		cmp	r3, #1
 1009 04c8 DFD9     		bls	.L59
 741:../tasks/SDMMC/ff.c **** 	}
 742:../tasks/SDMMC/ff.c **** }
 1010              		.loc 1 742 0 is_stmt 1
 1011 04ca 1437     		adds	r7, r7, #20
 1012 04cc BD46     		mov	sp, r7
 1013              		@ sp needed
 1014 04ce 5DF8047B 		ldr	r7, [sp], #4
 1015 04d2 7047     		bx	lr
 1016              		.cfi_endproc
 1017              	.LFE63:
 1019              		.align	2
 1020              		.thumb
 1021              		.thumb_func
 1023              	sync_window:
 1024              	.LFB64:
 743:../tasks/SDMMC/ff.c **** #endif
 744:../tasks/SDMMC/ff.c **** 
 745:../tasks/SDMMC/ff.c **** 
 746:../tasks/SDMMC/ff.c **** 
 747:../tasks/SDMMC/ff.c **** 
 748:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
 749:../tasks/SDMMC/ff.c **** /* Move/Flush disk access window in the file system object               */
 750:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
 751:../tasks/SDMMC/ff.c **** #if !_FS_READONLY
 752:../tasks/SDMMC/ff.c **** static
 753:../tasks/SDMMC/ff.c **** FRESULT sync_window (
 754:../tasks/SDMMC/ff.c **** 	FATFS* fs		/* File system object */
 755:../tasks/SDMMC/ff.c **** )
 756:../tasks/SDMMC/ff.c **** {
 1025              		.loc 1 756 0
 1026              		.cfi_startproc
 1027              		@ args = 0, pretend = 0, frame = 16
 1028              		@ frame_needed = 1, uses_anonymous_args = 0
 1029 04d4 80B5     		push	{r7, lr}
 1030              		.cfi_def_cfa_offset 8
 1031              		.cfi_offset 7, -8
 1032              		.cfi_offset 14, -4
 1033 04d6 84B0     		sub	sp, sp, #16
 1034              		.cfi_def_cfa_offset 24
 1035 04d8 00AF     		add	r7, sp, #0
 1036              		.cfi_def_cfa_register 7
 1037 04da 7860     		str	r0, [r7, #4]
 757:../tasks/SDMMC/ff.c **** 	DWORD wsect;
 758:../tasks/SDMMC/ff.c **** 	UINT nf;
 759:../tasks/SDMMC/ff.c **** 
 760:../tasks/SDMMC/ff.c **** 	if (fs->wflag) {	/* Write back the sector if it is dirty */
 1038              		.loc 1 760 0
 1039 04dc 7B68     		ldr	r3, [r7, #4]
 1040 04de 93F80432 		ldrb	r3, [r3, #516]	@ zero_extendqisi2
 1041 04e2 002B     		cmp	r3, #0
 1042 04e4 3BD0     		beq	.L61
 761:../tasks/SDMMC/ff.c **** 		wsect = fs->winsect;	/* Current sector number */
 1043              		.loc 1 761 0
 1044 04e6 7B68     		ldr	r3, [r7, #4]
 1045 04e8 D3F83032 		ldr	r3, [r3, #560]
 1046 04ec FB60     		str	r3, [r7, #12]
 762:../tasks/SDMMC/ff.c **** //		TST_High(TST1);
 763:../tasks/SDMMC/ff.c **** 		if (disk_write(fs->drv, fs->win.d8, wsect, 1)){
 1047              		.loc 1 763 0
 1048 04ee 7B68     		ldr	r3, [r7, #4]
 1049 04f0 93F80122 		ldrb	r2, [r3, #513]	@ zero_extendqisi2
 1050 04f4 7B68     		ldr	r3, [r7, #4]
 1051 04f6 1046     		mov	r0, r2
 1052 04f8 1946     		mov	r1, r3
 1053 04fa FA68     		ldr	r2, [r7, #12]
 1054 04fc 0123     		movs	r3, #1
 1055 04fe FFF7FEFF 		bl	disk_write
 1056 0502 0346     		mov	r3, r0
 1057 0504 002B     		cmp	r3, #0
 1058 0506 01D0     		beq	.L62
 764:../tasks/SDMMC/ff.c **** //			TST_High(TST3);
 765:../tasks/SDMMC/ff.c **** 			return FR_DISK_ERR;
 1059              		.loc 1 765 0
 1060 0508 0123     		movs	r3, #1
 1061 050a 29E0     		b	.L63
 1062              	.L62:
 766:../tasks/SDMMC/ff.c **** 		}
 767:../tasks/SDMMC/ff.c **** 		fs->wflag = 0;
 1063              		.loc 1 767 0
 1064 050c 7B68     		ldr	r3, [r7, #4]
 1065 050e 0022     		movs	r2, #0
 1066 0510 83F80422 		strb	r2, [r3, #516]
 768:../tasks/SDMMC/ff.c **** 		if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 1067              		.loc 1 768 0
 1068 0514 7B68     		ldr	r3, [r7, #4]
 1069 0516 D3F82432 		ldr	r3, [r3, #548]
 1070 051a FA68     		ldr	r2, [r7, #12]
 1071 051c D21A     		subs	r2, r2, r3
 1072 051e 7B68     		ldr	r3, [r7, #4]
 1073 0520 D3F81C32 		ldr	r3, [r3, #540]
 1074 0524 9A42     		cmp	r2, r3
 1075 0526 1AD2     		bcs	.L61
 769:../tasks/SDMMC/ff.c **** 			for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 1076              		.loc 1 769 0
 1077 0528 7B68     		ldr	r3, [r7, #4]
 1078 052a 93F80332 		ldrb	r3, [r3, #515]	@ zero_extendqisi2
 1079 052e BB60     		str	r3, [r7, #8]
 1080 0530 12E0     		b	.L64
 1081              	.L65:
 770:../tasks/SDMMC/ff.c **** 				wsect += fs->fsize;
 1082              		.loc 1 770 0 discriminator 2
 1083 0532 7B68     		ldr	r3, [r7, #4]
 1084 0534 D3F81C32 		ldr	r3, [r3, #540]
 1085 0538 FA68     		ldr	r2, [r7, #12]
 1086 053a 1344     		add	r3, r3, r2
 1087 053c FB60     		str	r3, [r7, #12]
 771:../tasks/SDMMC/ff.c **** 				disk_write(fs->drv, fs->win.d8, wsect, 1);
 1088              		.loc 1 771 0 discriminator 2
 1089 053e 7B68     		ldr	r3, [r7, #4]
 1090 0540 93F80122 		ldrb	r2, [r3, #513]	@ zero_extendqisi2
 1091 0544 7B68     		ldr	r3, [r7, #4]
 1092 0546 1046     		mov	r0, r2
 1093 0548 1946     		mov	r1, r3
 1094 054a FA68     		ldr	r2, [r7, #12]
 1095 054c 0123     		movs	r3, #1
 1096 054e FFF7FEFF 		bl	disk_write
 769:../tasks/SDMMC/ff.c **** 			for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 1097              		.loc 1 769 0 discriminator 2
 1098 0552 BB68     		ldr	r3, [r7, #8]
 1099 0554 013B     		subs	r3, r3, #1
 1100 0556 BB60     		str	r3, [r7, #8]
 1101              	.L64:
 769:../tasks/SDMMC/ff.c **** 			for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 1102              		.loc 1 769 0 is_stmt 0 discriminator 1
 1103 0558 BB68     		ldr	r3, [r7, #8]
 1104 055a 012B     		cmp	r3, #1
 1105 055c E9D8     		bhi	.L65
 1106              	.L61:
 772:../tasks/SDMMC/ff.c **** 			}
 773:../tasks/SDMMC/ff.c **** 		}
 774:../tasks/SDMMC/ff.c **** 	}
 775:../tasks/SDMMC/ff.c **** 	return FR_OK;
 1107              		.loc 1 775 0 is_stmt 1
 1108 055e 0023     		movs	r3, #0
 1109              	.L63:
 776:../tasks/SDMMC/ff.c **** }
 1110              		.loc 1 776 0
 1111 0560 1846     		mov	r0, r3
 1112 0562 1037     		adds	r7, r7, #16
 1113 0564 BD46     		mov	sp, r7
 1114              		@ sp needed
 1115 0566 80BD     		pop	{r7, pc}
 1116              		.cfi_endproc
 1117              	.LFE64:
 1119              		.align	2
 1120              		.thumb
 1121              		.thumb_func
 1123              	move_window:
 1124              	.LFB65:
 777:../tasks/SDMMC/ff.c **** #endif
 778:../tasks/SDMMC/ff.c **** 
 779:../tasks/SDMMC/ff.c **** 
 780:../tasks/SDMMC/ff.c **** static
 781:../tasks/SDMMC/ff.c **** FRESULT move_window (
 782:../tasks/SDMMC/ff.c **** 	FATFS* fs,		/* File system object */
 783:../tasks/SDMMC/ff.c **** 	DWORD sector	/* Sector number to make appearance in the fs->win.d8[] */
 784:../tasks/SDMMC/ff.c **** )
 785:../tasks/SDMMC/ff.c **** {
 1125              		.loc 1 785 0
 1126              		.cfi_startproc
 1127              		@ args = 0, pretend = 0, frame = 8
 1128              		@ frame_needed = 1, uses_anonymous_args = 0
 1129 0568 80B5     		push	{r7, lr}
 1130              		.cfi_def_cfa_offset 8
 1131              		.cfi_offset 7, -8
 1132              		.cfi_offset 14, -4
 1133 056a 82B0     		sub	sp, sp, #8
 1134              		.cfi_def_cfa_offset 16
 1135 056c 00AF     		add	r7, sp, #0
 1136              		.cfi_def_cfa_register 7
 1137 056e 7860     		str	r0, [r7, #4]
 1138 0570 3960     		str	r1, [r7]
 786:../tasks/SDMMC/ff.c **** 	if (sector != fs->winsect) {	/* Changed current window */
 1139              		.loc 1 786 0
 1140 0572 7B68     		ldr	r3, [r7, #4]
 1141 0574 D3F83022 		ldr	r2, [r3, #560]
 1142 0578 3B68     		ldr	r3, [r7]
 1143 057a 9A42     		cmp	r2, r3
 1144 057c 1AD0     		beq	.L67
 787:../tasks/SDMMC/ff.c **** #if !_FS_READONLY
 788:../tasks/SDMMC/ff.c **** 		if (sync_window(fs) != FR_OK)
 1145              		.loc 1 788 0
 1146 057e 7868     		ldr	r0, [r7, #4]
 1147 0580 FFF7A8FF 		bl	sync_window
 1148 0584 0346     		mov	r3, r0
 1149 0586 002B     		cmp	r3, #0
 1150 0588 01D0     		beq	.L68
 789:../tasks/SDMMC/ff.c **** 			{	//TST_High(TST1);
 790:../tasks/SDMMC/ff.c **** 				return FR_DISK_ERR;
 1151              		.loc 1 790 0
 1152 058a 0123     		movs	r3, #1
 1153 058c 13E0     		b	.L69
 1154              	.L68:
 791:../tasks/SDMMC/ff.c **** 			}
 792:../tasks/SDMMC/ff.c **** #endif
 793:../tasks/SDMMC/ff.c **** 		if (disk_read(fs->drv, fs->win.d8, sector, 1))
 1155              		.loc 1 793 0
 1156 058e 7B68     		ldr	r3, [r7, #4]
 1157 0590 93F80122 		ldrb	r2, [r3, #513]	@ zero_extendqisi2
 1158 0594 7B68     		ldr	r3, [r7, #4]
 1159 0596 1046     		mov	r0, r2
 1160 0598 1946     		mov	r1, r3
 1161 059a 3A68     		ldr	r2, [r7]
 1162 059c 0123     		movs	r3, #1
 1163 059e FFF7FEFF 		bl	disk_read
 1164 05a2 0346     		mov	r3, r0
 1165 05a4 002B     		cmp	r3, #0
 1166 05a6 01D0     		beq	.L70
 794:../tasks/SDMMC/ff.c **** 		{	//TST_High(TST3);
 795:../tasks/SDMMC/ff.c **** 			return FR_DISK_ERR;
 1167              		.loc 1 795 0
 1168 05a8 0123     		movs	r3, #1
 1169 05aa 04E0     		b	.L69
 1170              	.L70:
 796:../tasks/SDMMC/ff.c **** 		}		fs->winsect = sector;
 1171              		.loc 1 796 0
 1172 05ac 7B68     		ldr	r3, [r7, #4]
 1173 05ae 3A68     		ldr	r2, [r7]
 1174 05b0 C3F83022 		str	r2, [r3, #560]
 1175              	.L67:
 797:../tasks/SDMMC/ff.c **** 	}
 798:../tasks/SDMMC/ff.c **** //	TST_High(TST3);
 799:../tasks/SDMMC/ff.c **** 	return FR_OK;
 1176              		.loc 1 799 0
 1177 05b4 0023     		movs	r3, #0
 1178              	.L69:
 800:../tasks/SDMMC/ff.c **** }
 1179              		.loc 1 800 0
 1180 05b6 1846     		mov	r0, r3
 1181 05b8 0837     		adds	r7, r7, #8
 1182 05ba BD46     		mov	sp, r7
 1183              		@ sp needed
 1184 05bc 80BD     		pop	{r7, pc}
 1185              		.cfi_endproc
 1186              	.LFE65:
 1188 05be 00BF     		.align	2
 1189              		.thumb
 1190              		.thumb_func
 1192              	sync_fs:
 1193              	.LFB66:
 801:../tasks/SDMMC/ff.c **** 
 802:../tasks/SDMMC/ff.c **** 
 803:../tasks/SDMMC/ff.c **** 
 804:../tasks/SDMMC/ff.c **** 
 805:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
 806:../tasks/SDMMC/ff.c **** /* Synchronize file system and strage device                             */
 807:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
 808:../tasks/SDMMC/ff.c **** #if !_FS_READONLY
 809:../tasks/SDMMC/ff.c **** static
 810:../tasks/SDMMC/ff.c **** FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
 811:../tasks/SDMMC/ff.c **** 	FATFS* fs		/* File system object */
 812:../tasks/SDMMC/ff.c **** )
 813:../tasks/SDMMC/ff.c **** {
 1194              		.loc 1 813 0
 1195              		.cfi_startproc
 1196              		@ args = 0, pretend = 0, frame = 16
 1197              		@ frame_needed = 1, uses_anonymous_args = 0
 1198 05c0 80B5     		push	{r7, lr}
 1199              		.cfi_def_cfa_offset 8
 1200              		.cfi_offset 7, -8
 1201              		.cfi_offset 14, -4
 1202 05c2 84B0     		sub	sp, sp, #16
 1203              		.cfi_def_cfa_offset 24
 1204 05c4 00AF     		add	r7, sp, #0
 1205              		.cfi_def_cfa_register 7
 1206 05c6 7860     		str	r0, [r7, #4]
 814:../tasks/SDMMC/ff.c **** 	FRESULT res;
 815:../tasks/SDMMC/ff.c **** 
 816:../tasks/SDMMC/ff.c **** 
 817:../tasks/SDMMC/ff.c **** 	res = sync_window(fs);
 1207              		.loc 1 817 0
 1208 05c8 7868     		ldr	r0, [r7, #4]
 1209 05ca FFF783FF 		bl	sync_window
 1210 05ce 0346     		mov	r3, r0
 1211 05d0 FB73     		strb	r3, [r7, #15]
 818:../tasks/SDMMC/ff.c **** 	if (res == FR_OK) {
 1212              		.loc 1 818 0
 1213 05d2 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1214 05d4 002B     		cmp	r3, #0
 1215 05d6 40F09E80 		bne	.L72
 819:../tasks/SDMMC/ff.c **** 		/* Update FSINFO sector if needed */
 820:../tasks/SDMMC/ff.c **** 		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 1216              		.loc 1 820 0
 1217 05da 7B68     		ldr	r3, [r7, #4]
 1218 05dc 93F80032 		ldrb	r3, [r3, #512]	@ zero_extendqisi2
 1219 05e0 032B     		cmp	r3, #3
 1220 05e2 40F08B80 		bne	.L73
 1221              		.loc 1 820 0 is_stmt 0 discriminator 1
 1222 05e6 7B68     		ldr	r3, [r7, #4]
 1223 05e8 93F80532 		ldrb	r3, [r3, #517]	@ zero_extendqisi2
 1224 05ec 012B     		cmp	r3, #1
 1225 05ee 40F08580 		bne	.L73
 821:../tasks/SDMMC/ff.c **** 			/* Create FSINFO structure */
 822:../tasks/SDMMC/ff.c **** 			mem_set(fs->win.d8, 0, SS(fs));
 1226              		.loc 1 822 0 is_stmt 1
 1227 05f2 7B68     		ldr	r3, [r7, #4]
 1228 05f4 1846     		mov	r0, r3
 1229 05f6 0021     		movs	r1, #0
 1230 05f8 4FF40072 		mov	r2, #512
 1231 05fc FFF71EFD 		bl	mem_set
 823:../tasks/SDMMC/ff.c **** 			ST_WORD(fs->win.d8+BS_55AA, 0xAA55);
 1232              		.loc 1 823 0
 1233 0600 7B68     		ldr	r3, [r7, #4]
 1234 0602 5522     		movs	r2, #85
 1235 0604 83F8FE21 		strb	r2, [r3, #510]
 1236 0608 7B68     		ldr	r3, [r7, #4]
 1237 060a AA22     		movs	r2, #170
 1238 060c 83F8FF21 		strb	r2, [r3, #511]
 824:../tasks/SDMMC/ff.c **** 			ST_DWORD(fs->win.d8+FSI_LeadSig, 0x41615252);
 1239              		.loc 1 824 0
 1240 0610 7B68     		ldr	r3, [r7, #4]
 1241 0612 5222     		movs	r2, #82
 1242 0614 1A70     		strb	r2, [r3]
 1243 0616 7B68     		ldr	r3, [r7, #4]
 1244 0618 5222     		movs	r2, #82
 1245 061a 5A70     		strb	r2, [r3, #1]
 1246 061c 7B68     		ldr	r3, [r7, #4]
 1247 061e 6122     		movs	r2, #97
 1248 0620 9A70     		strb	r2, [r3, #2]
 1249 0622 7B68     		ldr	r3, [r7, #4]
 1250 0624 4122     		movs	r2, #65
 1251 0626 DA70     		strb	r2, [r3, #3]
 825:../tasks/SDMMC/ff.c **** 			ST_DWORD(fs->win.d8+FSI_StrucSig, 0x61417272);
 1252              		.loc 1 825 0
 1253 0628 7B68     		ldr	r3, [r7, #4]
 1254 062a 7222     		movs	r2, #114
 1255 062c 83F8E421 		strb	r2, [r3, #484]
 1256 0630 7B68     		ldr	r3, [r7, #4]
 1257 0632 7222     		movs	r2, #114
 1258 0634 83F8E521 		strb	r2, [r3, #485]
 1259 0638 7B68     		ldr	r3, [r7, #4]
 1260 063a 4122     		movs	r2, #65
 1261 063c 83F8E621 		strb	r2, [r3, #486]
 1262 0640 7B68     		ldr	r3, [r7, #4]
 1263 0642 6122     		movs	r2, #97
 1264 0644 83F8E721 		strb	r2, [r3, #487]
 826:../tasks/SDMMC/ff.c **** 			ST_DWORD(fs->win.d8+FSI_Free_Count, fs->free_clust);
 1265              		.loc 1 826 0
 1266 0648 7B68     		ldr	r3, [r7, #4]
 1267 064a D3F81032 		ldr	r3, [r3, #528]
 1268 064e DAB2     		uxtb	r2, r3
 1269 0650 7B68     		ldr	r3, [r7, #4]
 1270 0652 83F8E821 		strb	r2, [r3, #488]
 1271 0656 7B68     		ldr	r3, [r7, #4]
 1272 0658 D3F81032 		ldr	r3, [r3, #528]
 1273 065c 9BB2     		uxth	r3, r3
 1274 065e 1B0A     		lsrs	r3, r3, #8
 1275 0660 9BB2     		uxth	r3, r3
 1276 0662 DAB2     		uxtb	r2, r3
 1277 0664 7B68     		ldr	r3, [r7, #4]
 1278 0666 83F8E921 		strb	r2, [r3, #489]
 1279 066a 7B68     		ldr	r3, [r7, #4]
 1280 066c D3F81032 		ldr	r3, [r3, #528]
 1281 0670 1B0C     		lsrs	r3, r3, #16
 1282 0672 DAB2     		uxtb	r2, r3
 1283 0674 7B68     		ldr	r3, [r7, #4]
 1284 0676 83F8EA21 		strb	r2, [r3, #490]
 1285 067a 7B68     		ldr	r3, [r7, #4]
 1286 067c D3F81032 		ldr	r3, [r3, #528]
 1287 0680 1B0E     		lsrs	r3, r3, #24
 1288 0682 DAB2     		uxtb	r2, r3
 1289 0684 7B68     		ldr	r3, [r7, #4]
 1290 0686 83F8EB21 		strb	r2, [r3, #491]
 827:../tasks/SDMMC/ff.c **** 			ST_DWORD(fs->win.d8+FSI_Nxt_Free, fs->last_clust);
 1291              		.loc 1 827 0
 1292 068a 7B68     		ldr	r3, [r7, #4]
 1293 068c D3F80C32 		ldr	r3, [r3, #524]
 1294 0690 DAB2     		uxtb	r2, r3
 1295 0692 7B68     		ldr	r3, [r7, #4]
 1296 0694 83F8EC21 		strb	r2, [r3, #492]
 1297 0698 7B68     		ldr	r3, [r7, #4]
 1298 069a D3F80C32 		ldr	r3, [r3, #524]
 1299 069e 9BB2     		uxth	r3, r3
 1300 06a0 1B0A     		lsrs	r3, r3, #8
 1301 06a2 9BB2     		uxth	r3, r3
 1302 06a4 DAB2     		uxtb	r2, r3
 1303 06a6 7B68     		ldr	r3, [r7, #4]
 1304 06a8 83F8ED21 		strb	r2, [r3, #493]
 1305 06ac 7B68     		ldr	r3, [r7, #4]
 1306 06ae D3F80C32 		ldr	r3, [r3, #524]
 1307 06b2 1B0C     		lsrs	r3, r3, #16
 1308 06b4 DAB2     		uxtb	r2, r3
 1309 06b6 7B68     		ldr	r3, [r7, #4]
 1310 06b8 83F8EE21 		strb	r2, [r3, #494]
 1311 06bc 7B68     		ldr	r3, [r7, #4]
 1312 06be D3F80C32 		ldr	r3, [r3, #524]
 1313 06c2 1B0E     		lsrs	r3, r3, #24
 1314 06c4 DAB2     		uxtb	r2, r3
 1315 06c6 7B68     		ldr	r3, [r7, #4]
 1316 06c8 83F8EF21 		strb	r2, [r3, #495]
 828:../tasks/SDMMC/ff.c **** 			/* Write it into the FSINFO sector */
 829:../tasks/SDMMC/ff.c **** 			fs->winsect = fs->volbase + 1;
 1317              		.loc 1 829 0
 1318 06cc 7B68     		ldr	r3, [r7, #4]
 1319 06ce D3F82032 		ldr	r3, [r3, #544]
 1320 06d2 5A1C     		adds	r2, r3, #1
 1321 06d4 7B68     		ldr	r3, [r7, #4]
 1322 06d6 C3F83022 		str	r2, [r3, #560]
 830:../tasks/SDMMC/ff.c **** 			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 1323              		.loc 1 830 0
 1324 06da 7B68     		ldr	r3, [r7, #4]
 1325 06dc 93F80112 		ldrb	r1, [r3, #513]	@ zero_extendqisi2
 1326 06e0 7A68     		ldr	r2, [r7, #4]
 1327 06e2 7B68     		ldr	r3, [r7, #4]
 1328 06e4 D3F83032 		ldr	r3, [r3, #560]
 1329 06e8 0846     		mov	r0, r1
 1330 06ea 1146     		mov	r1, r2
 1331 06ec 1A46     		mov	r2, r3
 1332 06ee 0123     		movs	r3, #1
 1333 06f0 FFF7FEFF 		bl	disk_write
 831:../tasks/SDMMC/ff.c **** 			fs->fsi_flag = 0;
 1334              		.loc 1 831 0
 1335 06f4 7B68     		ldr	r3, [r7, #4]
 1336 06f6 0022     		movs	r2, #0
 1337 06f8 83F80522 		strb	r2, [r3, #517]
 1338              	.L73:
 832:../tasks/SDMMC/ff.c **** 		}
 833:../tasks/SDMMC/ff.c **** 		/* Make sure that no pending write process in the physical drive */
 834:../tasks/SDMMC/ff.c **** 		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 1339              		.loc 1 834 0
 1340 06fc 7B68     		ldr	r3, [r7, #4]
 1341 06fe 93F80132 		ldrb	r3, [r3, #513]	@ zero_extendqisi2
 1342 0702 1846     		mov	r0, r3
 1343 0704 0021     		movs	r1, #0
 1344 0706 0022     		movs	r2, #0
 1345 0708 FFF7FEFF 		bl	disk_ioctl
 1346 070c 0346     		mov	r3, r0
 1347 070e 002B     		cmp	r3, #0
 1348 0710 01D0     		beq	.L72
 835:../tasks/SDMMC/ff.c **** 			res = FR_DISK_ERR;
 1349              		.loc 1 835 0
 1350 0712 0123     		movs	r3, #1
 1351 0714 FB73     		strb	r3, [r7, #15]
 1352              	.L72:
 836:../tasks/SDMMC/ff.c **** 	}
 837:../tasks/SDMMC/ff.c **** 
 838:../tasks/SDMMC/ff.c **** 	return res;
 1353              		.loc 1 838 0
 1354 0716 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 839:../tasks/SDMMC/ff.c **** }
 1355              		.loc 1 839 0
 1356 0718 1846     		mov	r0, r3
 1357 071a 1037     		adds	r7, r7, #16
 1358 071c BD46     		mov	sp, r7
 1359              		@ sp needed
 1360 071e 80BD     		pop	{r7, pc}
 1361              		.cfi_endproc
 1362              	.LFE66:
 1364              		.align	2
 1365              		.global	clust2sect
 1366              		.thumb
 1367              		.thumb_func
 1369              	clust2sect:
 1370              	.LFB67:
 840:../tasks/SDMMC/ff.c **** #endif
 841:../tasks/SDMMC/ff.c **** 
 842:../tasks/SDMMC/ff.c **** 
 843:../tasks/SDMMC/ff.c **** 
 844:../tasks/SDMMC/ff.c **** 
 845:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
 846:../tasks/SDMMC/ff.c **** /* Get sector# from cluster#                                             */
 847:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
 848:../tasks/SDMMC/ff.c **** 
 849:../tasks/SDMMC/ff.c **** 
 850:../tasks/SDMMC/ff.c **** DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
 851:../tasks/SDMMC/ff.c **** 	FATFS* fs,		/* File system object */
 852:../tasks/SDMMC/ff.c **** 	DWORD clst		/* Cluster# to be converted */
 853:../tasks/SDMMC/ff.c **** )
 854:../tasks/SDMMC/ff.c **** {
 1371              		.loc 1 854 0
 1372              		.cfi_startproc
 1373              		@ args = 0, pretend = 0, frame = 8
 1374              		@ frame_needed = 1, uses_anonymous_args = 0
 1375              		@ link register save eliminated.
 1376 0720 80B4     		push	{r7}
 1377              		.cfi_def_cfa_offset 4
 1378              		.cfi_offset 7, -4
 1379 0722 83B0     		sub	sp, sp, #12
 1380              		.cfi_def_cfa_offset 16
 1381 0724 00AF     		add	r7, sp, #0
 1382              		.cfi_def_cfa_register 7
 1383 0726 7860     		str	r0, [r7, #4]
 1384 0728 3960     		str	r1, [r7]
 855:../tasks/SDMMC/ff.c **** 	clst -= 2;
 1385              		.loc 1 855 0
 1386 072a 3B68     		ldr	r3, [r7]
 1387 072c 023B     		subs	r3, r3, #2
 1388 072e 3B60     		str	r3, [r7]
 856:../tasks/SDMMC/ff.c **** 	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 1389              		.loc 1 856 0
 1390 0730 7B68     		ldr	r3, [r7, #4]
 1391 0732 D3F81832 		ldr	r3, [r3, #536]
 1392 0736 9A1E     		subs	r2, r3, #2
 1393 0738 3B68     		ldr	r3, [r7]
 1394 073a 9A42     		cmp	r2, r3
 1395 073c 01D8     		bhi	.L76
 1396              		.loc 1 856 0 is_stmt 0 discriminator 1
 1397 073e 0023     		movs	r3, #0
 1398 0740 09E0     		b	.L77
 1399              	.L76:
 857:../tasks/SDMMC/ff.c **** 	return clst * fs->csize + fs->database;
 1400              		.loc 1 857 0 is_stmt 1
 1401 0742 7B68     		ldr	r3, [r7, #4]
 1402 0744 93F80232 		ldrb	r3, [r3, #514]	@ zero_extendqisi2
 1403 0748 3A68     		ldr	r2, [r7]
 1404 074a 02FB03F2 		mul	r2, r2, r3
 1405 074e 7B68     		ldr	r3, [r7, #4]
 1406 0750 D3F82C32 		ldr	r3, [r3, #556]
 1407 0754 1344     		add	r3, r3, r2
 1408              	.L77:
 858:../tasks/SDMMC/ff.c **** }
 1409              		.loc 1 858 0
 1410 0756 1846     		mov	r0, r3
 1411 0758 0C37     		adds	r7, r7, #12
 1412 075a BD46     		mov	sp, r7
 1413              		@ sp needed
 1414 075c 5DF8047B 		ldr	r7, [sp], #4
 1415 0760 7047     		bx	lr
 1416              		.cfi_endproc
 1417              	.LFE67:
 1419 0762 00BF     		.align	2
 1420              		.global	get_fat
 1421              		.thumb
 1422              		.thumb_func
 1424              	get_fat:
 1425              	.LFB68:
 859:../tasks/SDMMC/ff.c **** 
 860:../tasks/SDMMC/ff.c **** 
 861:../tasks/SDMMC/ff.c **** 
 862:../tasks/SDMMC/ff.c **** 
 863:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
 864:../tasks/SDMMC/ff.c **** /* FAT access - Read value of a FAT entry                                */
 865:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
 866:../tasks/SDMMC/ff.c **** 
 867:../tasks/SDMMC/ff.c **** 
 868:../tasks/SDMMC/ff.c **** DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
 869:../tasks/SDMMC/ff.c **** 	FATFS* fs,	/* File system object */
 870:../tasks/SDMMC/ff.c **** 	DWORD clst	/* Cluster# to get the link information */
 871:../tasks/SDMMC/ff.c **** )
 872:../tasks/SDMMC/ff.c **** {
 1426              		.loc 1 872 0
 1427              		.cfi_startproc
 1428              		@ args = 0, pretend = 0, frame = 24
 1429              		@ frame_needed = 1, uses_anonymous_args = 0
 1430 0764 80B5     		push	{r7, lr}
 1431              		.cfi_def_cfa_offset 8
 1432              		.cfi_offset 7, -8
 1433              		.cfi_offset 14, -4
 1434 0766 86B0     		sub	sp, sp, #24
 1435              		.cfi_def_cfa_offset 32
 1436 0768 00AF     		add	r7, sp, #0
 1437              		.cfi_def_cfa_register 7
 1438 076a 7860     		str	r0, [r7, #4]
 1439 076c 3960     		str	r1, [r7]
 873:../tasks/SDMMC/ff.c **** 	UINT wc, bc;
 874:../tasks/SDMMC/ff.c **** 	BYTE *p;
 875:../tasks/SDMMC/ff.c **** 
 876:../tasks/SDMMC/ff.c **** 
 877:../tasks/SDMMC/ff.c **** 	if (clst < 2 || clst >= fs->n_fatent)	/* Check range */
 1440              		.loc 1 877 0
 1441 076e 3B68     		ldr	r3, [r7]
 1442 0770 012B     		cmp	r3, #1
 1443 0772 05D9     		bls	.L79
 1444              		.loc 1 877 0 is_stmt 0 discriminator 1
 1445 0774 7B68     		ldr	r3, [r7, #4]
 1446 0776 D3F81822 		ldr	r2, [r3, #536]
 1447 077a 3B68     		ldr	r3, [r7]
 1448 077c 9A42     		cmp	r2, r3
 1449 077e 01D8     		bhi	.L80
 1450              	.L79:
 878:../tasks/SDMMC/ff.c **** 		return 1;
 1451              		.loc 1 878 0 is_stmt 1
 1452 0780 0123     		movs	r3, #1
 1453 0782 95E0     		b	.L81
 1454              	.L80:
 879:../tasks/SDMMC/ff.c **** 
 880:../tasks/SDMMC/ff.c **** 	switch (fs->fs_type) {
 1455              		.loc 1 880 0
 1456 0784 7B68     		ldr	r3, [r7, #4]
 1457 0786 93F80032 		ldrb	r3, [r3, #512]	@ zero_extendqisi2
 1458 078a 022B     		cmp	r3, #2
 1459 078c 45D0     		beq	.L83
 1460 078e 032B     		cmp	r3, #3
 1461 0790 63D0     		beq	.L84
 1462 0792 012B     		cmp	r3, #1
 1463 0794 40F08A80 		bne	.L82
 881:../tasks/SDMMC/ff.c **** 	case FS_FAT12 :
 882:../tasks/SDMMC/ff.c **** 		bc = (UINT)clst; bc += bc / 2;
 1464              		.loc 1 882 0
 1465 0798 3B68     		ldr	r3, [r7]
 1466 079a 7B61     		str	r3, [r7, #20]
 1467 079c 7B69     		ldr	r3, [r7, #20]
 1468 079e 5B08     		lsrs	r3, r3, #1
 1469 07a0 7A69     		ldr	r2, [r7, #20]
 1470 07a2 1344     		add	r3, r3, r2
 1471 07a4 7B61     		str	r3, [r7, #20]
 883:../tasks/SDMMC/ff.c **** 		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 1472              		.loc 1 883 0
 1473 07a6 7B68     		ldr	r3, [r7, #4]
 1474 07a8 D3F82422 		ldr	r2, [r3, #548]
 1475 07ac 7B69     		ldr	r3, [r7, #20]
 1476 07ae 5B0A     		lsrs	r3, r3, #9
 1477 07b0 1344     		add	r3, r3, r2
 1478 07b2 7868     		ldr	r0, [r7, #4]
 1479 07b4 1946     		mov	r1, r3
 1480 07b6 FFF7D7FE 		bl	move_window
 1481 07ba 0346     		mov	r3, r0
 1482 07bc 002B     		cmp	r3, #0
 1483 07be 00D0     		beq	.L86
 1484              		.loc 1 883 0 is_stmt 0 discriminator 1
 1485 07c0 74E0     		b	.L82
 1486              	.L86:
 884:../tasks/SDMMC/ff.c **** 		wc = fs->win.d8[bc % SS(fs)]; bc++;
 1487              		.loc 1 884 0 is_stmt 1
 1488 07c2 7B69     		ldr	r3, [r7, #20]
 1489 07c4 C3F30803 		ubfx	r3, r3, #0, #9
 1490 07c8 7A68     		ldr	r2, [r7, #4]
 1491 07ca D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1492 07cc 3B61     		str	r3, [r7, #16]
 1493 07ce 7B69     		ldr	r3, [r7, #20]
 1494 07d0 0133     		adds	r3, r3, #1
 1495 07d2 7B61     		str	r3, [r7, #20]
 885:../tasks/SDMMC/ff.c **** 		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 1496              		.loc 1 885 0
 1497 07d4 7B68     		ldr	r3, [r7, #4]
 1498 07d6 D3F82422 		ldr	r2, [r3, #548]
 1499 07da 7B69     		ldr	r3, [r7, #20]
 1500 07dc 5B0A     		lsrs	r3, r3, #9
 1501 07de 1344     		add	r3, r3, r2
 1502 07e0 7868     		ldr	r0, [r7, #4]
 1503 07e2 1946     		mov	r1, r3
 1504 07e4 FFF7C0FE 		bl	move_window
 1505 07e8 0346     		mov	r3, r0
 1506 07ea 002B     		cmp	r3, #0
 1507 07ec 00D0     		beq	.L87
 1508              		.loc 1 885 0 is_stmt 0 discriminator 1
 1509 07ee 5DE0     		b	.L82
 1510              	.L87:
 886:../tasks/SDMMC/ff.c **** 		wc |= fs->win.d8[bc % SS(fs)] << 8;
 1511              		.loc 1 886 0 is_stmt 1
 1512 07f0 7B69     		ldr	r3, [r7, #20]
 1513 07f2 C3F30803 		ubfx	r3, r3, #0, #9
 1514 07f6 7A68     		ldr	r2, [r7, #4]
 1515 07f8 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1516 07fa 1B02     		lsls	r3, r3, #8
 1517 07fc 3A69     		ldr	r2, [r7, #16]
 1518 07fe 1343     		orrs	r3, r3, r2
 1519 0800 3B61     		str	r3, [r7, #16]
 887:../tasks/SDMMC/ff.c **** 		return clst & 1 ? wc >> 4 : (wc & 0xFFF);
 1520              		.loc 1 887 0
 1521 0802 3B68     		ldr	r3, [r7]
 1522 0804 03F00103 		and	r3, r3, #1
 1523 0808 002B     		cmp	r3, #0
 1524 080a 02D0     		beq	.L88
 1525              		.loc 1 887 0 is_stmt 0 discriminator 1
 1526 080c 3B69     		ldr	r3, [r7, #16]
 1527 080e 1B09     		lsrs	r3, r3, #4
 1528 0810 02E0     		b	.L89
 1529              	.L88:
 1530              		.loc 1 887 0 discriminator 2
 1531 0812 3B69     		ldr	r3, [r7, #16]
 1532 0814 C3F30B03 		ubfx	r3, r3, #0, #12
 1533              	.L89:
 1534              		.loc 1 887 0 discriminator 3
 1535 0818 4AE0     		b	.L81
 1536              	.L83:
 888:../tasks/SDMMC/ff.c **** 
 889:../tasks/SDMMC/ff.c **** 	case FS_FAT16 :
 890:../tasks/SDMMC/ff.c **** 		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
 1537              		.loc 1 890 0 is_stmt 1
 1538 081a 7B68     		ldr	r3, [r7, #4]
 1539 081c D3F82422 		ldr	r2, [r3, #548]
 1540 0820 3B68     		ldr	r3, [r7]
 1541 0822 1B0A     		lsrs	r3, r3, #8
 1542 0824 1344     		add	r3, r3, r2
 1543 0826 7868     		ldr	r0, [r7, #4]
 1544 0828 1946     		mov	r1, r3
 1545 082a FFF79DFE 		bl	move_window
 1546 082e 0346     		mov	r3, r0
 1547 0830 002B     		cmp	r3, #0
 1548 0832 00D0     		beq	.L90
 1549              		.loc 1 890 0 is_stmt 0 discriminator 1
 1550 0834 3AE0     		b	.L82
 1551              	.L90:
 891:../tasks/SDMMC/ff.c **** 		p = &fs->win.d8[clst * 2 % SS(fs)];
 1552              		.loc 1 891 0 is_stmt 1
 1553 0836 3B68     		ldr	r3, [r7]
 1554 0838 5B00     		lsls	r3, r3, #1
 1555 083a 03F4FF73 		and	r3, r3, #510
 1556 083e 7A68     		ldr	r2, [r7, #4]
 1557 0840 1344     		add	r3, r3, r2
 1558 0842 FB60     		str	r3, [r7, #12]
 892:../tasks/SDMMC/ff.c **** 		return LD_WORD(p);
 1559              		.loc 1 892 0
 1560 0844 FB68     		ldr	r3, [r7, #12]
 1561 0846 0133     		adds	r3, r3, #1
 1562 0848 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1563 084a 1B02     		lsls	r3, r3, #8
 1564 084c 9AB2     		uxth	r2, r3
 1565 084e FB68     		ldr	r3, [r7, #12]
 1566 0850 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1567 0852 1343     		orrs	r3, r3, r2
 1568 0854 9BB2     		uxth	r3, r3
 1569 0856 9BB2     		uxth	r3, r3
 1570 0858 2AE0     		b	.L81
 1571              	.L84:
 893:../tasks/SDMMC/ff.c **** 
 894:../tasks/SDMMC/ff.c **** 	case FS_FAT32 :
 895:../tasks/SDMMC/ff.c **** 		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
 1572              		.loc 1 895 0
 1573 085a 7B68     		ldr	r3, [r7, #4]
 1574 085c D3F82422 		ldr	r2, [r3, #548]
 1575 0860 3B68     		ldr	r3, [r7]
 1576 0862 DB09     		lsrs	r3, r3, #7
 1577 0864 1344     		add	r3, r3, r2
 1578 0866 7868     		ldr	r0, [r7, #4]
 1579 0868 1946     		mov	r1, r3
 1580 086a FFF77DFE 		bl	move_window
 1581 086e 0346     		mov	r3, r0
 1582 0870 002B     		cmp	r3, #0
 1583 0872 00D0     		beq	.L91
 1584              		.loc 1 895 0 is_stmt 0 discriminator 1
 1585 0874 1AE0     		b	.L82
 1586              	.L91:
 896:../tasks/SDMMC/ff.c **** 		p = &fs->win.d8[clst * 4 % SS(fs)];
 1587              		.loc 1 896 0 is_stmt 1
 1588 0876 3B68     		ldr	r3, [r7]
 1589 0878 9B00     		lsls	r3, r3, #2
 1590 087a 03F4FE73 		and	r3, r3, #508
 1591 087e 7A68     		ldr	r2, [r7, #4]
 1592 0880 1344     		add	r3, r3, r2
 1593 0882 FB60     		str	r3, [r7, #12]
 897:../tasks/SDMMC/ff.c **** 		return LD_DWORD(p) & 0x0FFFFFFF;
 1594              		.loc 1 897 0
 1595 0884 FB68     		ldr	r3, [r7, #12]
 1596 0886 0333     		adds	r3, r3, #3
 1597 0888 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1598 088a 1A06     		lsls	r2, r3, #24
 1599 088c FB68     		ldr	r3, [r7, #12]
 1600 088e 0233     		adds	r3, r3, #2
 1601 0890 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1602 0892 1B04     		lsls	r3, r3, #16
 1603 0894 1A43     		orrs	r2, r2, r3
 1604 0896 FB68     		ldr	r3, [r7, #12]
 1605 0898 0133     		adds	r3, r3, #1
 1606 089a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1607 089c 1B02     		lsls	r3, r3, #8
 1608 089e 1A43     		orrs	r2, r2, r3
 1609 08a0 FB68     		ldr	r3, [r7, #12]
 1610 08a2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1611 08a4 1343     		orrs	r3, r3, r2
 1612 08a6 23F07043 		bic	r3, r3, #-268435456
 1613 08aa 01E0     		b	.L81
 1614              	.L82:
 898:../tasks/SDMMC/ff.c **** 	}
 899:../tasks/SDMMC/ff.c **** 
 900:../tasks/SDMMC/ff.c **** 	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
 1615              		.loc 1 900 0
 1616 08ac 4FF0FF33 		mov	r3, #-1
 1617              	.L81:
 901:../tasks/SDMMC/ff.c **** }
 1618              		.loc 1 901 0
 1619 08b0 1846     		mov	r0, r3
 1620 08b2 1837     		adds	r7, r7, #24
 1621 08b4 BD46     		mov	sp, r7
 1622              		@ sp needed
 1623 08b6 80BD     		pop	{r7, pc}
 1624              		.cfi_endproc
 1625              	.LFE68:
 1627              		.align	2
 1628              		.global	put_fat
 1629              		.thumb
 1630              		.thumb_func
 1632              	put_fat:
 1633              	.LFB69:
 902:../tasks/SDMMC/ff.c **** 
 903:../tasks/SDMMC/ff.c **** 
 904:../tasks/SDMMC/ff.c **** 
 905:../tasks/SDMMC/ff.c **** 
 906:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
 907:../tasks/SDMMC/ff.c **** /* FAT access - Change value of a FAT entry                              */
 908:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
 909:../tasks/SDMMC/ff.c **** #if !_FS_READONLY
 910:../tasks/SDMMC/ff.c **** 
 911:../tasks/SDMMC/ff.c **** FRESULT put_fat (
 912:../tasks/SDMMC/ff.c **** 	FATFS* fs,	/* File system object */
 913:../tasks/SDMMC/ff.c **** 	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
 914:../tasks/SDMMC/ff.c **** 	DWORD val	/* New value to mark the cluster */
 915:../tasks/SDMMC/ff.c **** )
 916:../tasks/SDMMC/ff.c **** {
 1634              		.loc 1 916 0
 1635              		.cfi_startproc
 1636              		@ args = 0, pretend = 0, frame = 32
 1637              		@ frame_needed = 1, uses_anonymous_args = 0
 1638 08b8 80B5     		push	{r7, lr}
 1639              		.cfi_def_cfa_offset 8
 1640              		.cfi_offset 7, -8
 1641              		.cfi_offset 14, -4
 1642 08ba 88B0     		sub	sp, sp, #32
 1643              		.cfi_def_cfa_offset 40
 1644 08bc 00AF     		add	r7, sp, #0
 1645              		.cfi_def_cfa_register 7
 1646 08be F860     		str	r0, [r7, #12]
 1647 08c0 B960     		str	r1, [r7, #8]
 1648 08c2 7A60     		str	r2, [r7, #4]
 917:../tasks/SDMMC/ff.c **** 	UINT bc;
 918:../tasks/SDMMC/ff.c **** 	BYTE *p;
 919:../tasks/SDMMC/ff.c **** 	FRESULT res;
 920:../tasks/SDMMC/ff.c **** 
 921:../tasks/SDMMC/ff.c **** 
 922:../tasks/SDMMC/ff.c **** 	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 1649              		.loc 1 922 0
 1650 08c4 BB68     		ldr	r3, [r7, #8]
 1651 08c6 012B     		cmp	r3, #1
 1652 08c8 05D9     		bls	.L93
 1653              		.loc 1 922 0 is_stmt 0 discriminator 1
 1654 08ca FB68     		ldr	r3, [r7, #12]
 1655 08cc D3F81822 		ldr	r2, [r3, #536]
 1656 08d0 BB68     		ldr	r3, [r7, #8]
 1657 08d2 9A42     		cmp	r2, r3
 1658 08d4 02D8     		bhi	.L94
 1659              	.L93:
 923:../tasks/SDMMC/ff.c **** 		res = FR_INT_ERR;
 1660              		.loc 1 923 0 is_stmt 1
 1661 08d6 0223     		movs	r3, #2
 1662 08d8 FB77     		strb	r3, [r7, #31]
 1663 08da E7E0     		b	.L95
 1664              	.L94:
 924:../tasks/SDMMC/ff.c **** 
 925:../tasks/SDMMC/ff.c **** 	} else {
 926:../tasks/SDMMC/ff.c **** 		switch (fs->fs_type) {
 1665              		.loc 1 926 0
 1666 08dc FB68     		ldr	r3, [r7, #12]
 1667 08de 93F80032 		ldrb	r3, [r3, #512]	@ zero_extendqisi2
 1668 08e2 022B     		cmp	r3, #2
 1669 08e4 71D0     		beq	.L97
 1670 08e6 032B     		cmp	r3, #3
 1671 08e8 00F09380 		beq	.L98
 1672 08ec 012B     		cmp	r3, #1
 1673 08ee 40F0D680 		bne	.L110
 927:../tasks/SDMMC/ff.c **** 		case FS_FAT12 :
 928:../tasks/SDMMC/ff.c **** 			bc = (UINT)clst; bc += bc / 2;
 1674              		.loc 1 928 0
 1675 08f2 BB68     		ldr	r3, [r7, #8]
 1676 08f4 BB61     		str	r3, [r7, #24]
 1677 08f6 BB69     		ldr	r3, [r7, #24]
 1678 08f8 5B08     		lsrs	r3, r3, #1
 1679 08fa BA69     		ldr	r2, [r7, #24]
 1680 08fc 1344     		add	r3, r3, r2
 1681 08fe BB61     		str	r3, [r7, #24]
 929:../tasks/SDMMC/ff.c **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 1682              		.loc 1 929 0
 1683 0900 FB68     		ldr	r3, [r7, #12]
 1684 0902 D3F82422 		ldr	r2, [r3, #548]
 1685 0906 BB69     		ldr	r3, [r7, #24]
 1686 0908 5B0A     		lsrs	r3, r3, #9
 1687 090a 1344     		add	r3, r3, r2
 1688 090c F868     		ldr	r0, [r7, #12]
 1689 090e 1946     		mov	r1, r3
 1690 0910 FFF72AFE 		bl	move_window
 1691 0914 0346     		mov	r3, r0
 1692 0916 FB77     		strb	r3, [r7, #31]
 930:../tasks/SDMMC/ff.c **** 			if (res != FR_OK) break;
 1693              		.loc 1 930 0
 1694 0918 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 1695 091a 002B     		cmp	r3, #0
 1696 091c 00D0     		beq	.L100
 1697              		.loc 1 930 0 is_stmt 0 discriminator 1
 1698 091e C1E0     		b	.L101
 1699              	.L100:
 931:../tasks/SDMMC/ff.c **** 			p = &fs->win.d8[bc % SS(fs)];
 1700              		.loc 1 931 0 is_stmt 1
 1701 0920 BB69     		ldr	r3, [r7, #24]
 1702 0922 C3F30803 		ubfx	r3, r3, #0, #9
 1703 0926 FA68     		ldr	r2, [r7, #12]
 1704 0928 1344     		add	r3, r3, r2
 1705 092a 7B61     		str	r3, [r7, #20]
 932:../tasks/SDMMC/ff.c **** 			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 1706              		.loc 1 932 0
 1707 092c BB68     		ldr	r3, [r7, #8]
 1708 092e 03F00103 		and	r3, r3, #1
 1709 0932 002B     		cmp	r3, #0
 1710 0934 0DD0     		beq	.L102
 1711              		.loc 1 932 0 is_stmt 0 discriminator 1
 1712 0936 7B69     		ldr	r3, [r7, #20]
 1713 0938 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1714 093a DBB2     		uxtb	r3, r3
 1715 093c 03F00F03 		and	r3, r3, #15
 1716 0940 DAB2     		uxtb	r2, r3
 1717 0942 7B68     		ldr	r3, [r7, #4]
 1718 0944 DBB2     		uxtb	r3, r3
 1719 0946 1B01     		lsls	r3, r3, #4
 1720 0948 DBB2     		uxtb	r3, r3
 1721 094a 1343     		orrs	r3, r3, r2
 1722 094c DBB2     		uxtb	r3, r3
 1723 094e DBB2     		uxtb	r3, r3
 1724 0950 01E0     		b	.L103
 1725              	.L102:
 1726              		.loc 1 932 0 discriminator 2
 1727 0952 7B68     		ldr	r3, [r7, #4]
 1728 0954 DBB2     		uxtb	r3, r3
 1729              	.L103:
 1730              		.loc 1 932 0 discriminator 3
 1731 0956 7A69     		ldr	r2, [r7, #20]
 1732 0958 1370     		strb	r3, [r2]
 933:../tasks/SDMMC/ff.c **** 			bc++;
 1733              		.loc 1 933 0 is_stmt 1 discriminator 3
 1734 095a BB69     		ldr	r3, [r7, #24]
 1735 095c 0133     		adds	r3, r3, #1
 1736 095e BB61     		str	r3, [r7, #24]
 934:../tasks/SDMMC/ff.c **** 			fs->wflag = 1;
 1737              		.loc 1 934 0 discriminator 3
 1738 0960 FB68     		ldr	r3, [r7, #12]
 1739 0962 0122     		movs	r2, #1
 1740 0964 83F80422 		strb	r2, [r3, #516]
 935:../tasks/SDMMC/ff.c **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 1741              		.loc 1 935 0 discriminator 3
 1742 0968 FB68     		ldr	r3, [r7, #12]
 1743 096a D3F82422 		ldr	r2, [r3, #548]
 1744 096e BB69     		ldr	r3, [r7, #24]
 1745 0970 5B0A     		lsrs	r3, r3, #9
 1746 0972 1344     		add	r3, r3, r2
 1747 0974 F868     		ldr	r0, [r7, #12]
 1748 0976 1946     		mov	r1, r3
 1749 0978 FFF7F6FD 		bl	move_window
 1750 097c 0346     		mov	r3, r0
 1751 097e FB77     		strb	r3, [r7, #31]
 936:../tasks/SDMMC/ff.c **** 			if (res != FR_OK) break;
 1752              		.loc 1 936 0 discriminator 3
 1753 0980 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 1754 0982 002B     		cmp	r3, #0
 1755 0984 00D0     		beq	.L104
 1756              		.loc 1 936 0 is_stmt 0 discriminator 1
 1757 0986 8DE0     		b	.L101
 1758              	.L104:
 937:../tasks/SDMMC/ff.c **** 			p = &fs->win.d8[bc % SS(fs)];
 1759              		.loc 1 937 0 is_stmt 1
 1760 0988 BB69     		ldr	r3, [r7, #24]
 1761 098a C3F30803 		ubfx	r3, r3, #0, #9
 1762 098e FA68     		ldr	r2, [r7, #12]
 1763 0990 1344     		add	r3, r3, r2
 1764 0992 7B61     		str	r3, [r7, #20]
 938:../tasks/SDMMC/ff.c **** 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 1765              		.loc 1 938 0
 1766 0994 BB68     		ldr	r3, [r7, #8]
 1767 0996 03F00103 		and	r3, r3, #1
 1768 099a 002B     		cmp	r3, #0
 1769 099c 03D0     		beq	.L105
 1770              		.loc 1 938 0 is_stmt 0 discriminator 1
 1771 099e 7B68     		ldr	r3, [r7, #4]
 1772 09a0 1B09     		lsrs	r3, r3, #4
 1773 09a2 DBB2     		uxtb	r3, r3
 1774 09a4 0EE0     		b	.L106
 1775              	.L105:
 1776              		.loc 1 938 0 discriminator 2
 1777 09a6 7B69     		ldr	r3, [r7, #20]
 1778 09a8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1779 09aa DBB2     		uxtb	r3, r3
 1780 09ac 23F00F03 		bic	r3, r3, #15
 1781 09b0 DAB2     		uxtb	r2, r3
 1782 09b2 7B68     		ldr	r3, [r7, #4]
 1783 09b4 1B0A     		lsrs	r3, r3, #8
 1784 09b6 DBB2     		uxtb	r3, r3
 1785 09b8 03F00F03 		and	r3, r3, #15
 1786 09bc DBB2     		uxtb	r3, r3
 1787 09be 1343     		orrs	r3, r3, r2
 1788 09c0 DBB2     		uxtb	r3, r3
 1789 09c2 DBB2     		uxtb	r3, r3
 1790              	.L106:
 1791              		.loc 1 938 0 discriminator 3
 1792 09c4 7A69     		ldr	r2, [r7, #20]
 1793 09c6 1370     		strb	r3, [r2]
 939:../tasks/SDMMC/ff.c **** 			break;
 1794              		.loc 1 939 0 is_stmt 1 discriminator 3
 1795 09c8 6CE0     		b	.L101
 1796              	.L97:
 940:../tasks/SDMMC/ff.c **** 
 941:../tasks/SDMMC/ff.c **** 		case FS_FAT16 :
 942:../tasks/SDMMC/ff.c **** 			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 1797              		.loc 1 942 0
 1798 09ca FB68     		ldr	r3, [r7, #12]
 1799 09cc D3F82422 		ldr	r2, [r3, #548]
 1800 09d0 BB68     		ldr	r3, [r7, #8]
 1801 09d2 1B0A     		lsrs	r3, r3, #8
 1802 09d4 1344     		add	r3, r3, r2
 1803 09d6 F868     		ldr	r0, [r7, #12]
 1804 09d8 1946     		mov	r1, r3
 1805 09da FFF7C5FD 		bl	move_window
 1806 09de 0346     		mov	r3, r0
 1807 09e0 FB77     		strb	r3, [r7, #31]
 943:../tasks/SDMMC/ff.c **** 			if (res != FR_OK) break;
 1808              		.loc 1 943 0
 1809 09e2 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 1810 09e4 002B     		cmp	r3, #0
 1811 09e6 00D0     		beq	.L107
 1812              		.loc 1 943 0 is_stmt 0 discriminator 1
 1813 09e8 5CE0     		b	.L101
 1814              	.L107:
 944:../tasks/SDMMC/ff.c **** 			p = &fs->win.d8[clst * 2 % SS(fs)];
 1815              		.loc 1 944 0 is_stmt 1
 1816 09ea BB68     		ldr	r3, [r7, #8]
 1817 09ec 5B00     		lsls	r3, r3, #1
 1818 09ee 03F4FF73 		and	r3, r3, #510
 1819 09f2 FA68     		ldr	r2, [r7, #12]
 1820 09f4 1344     		add	r3, r3, r2
 1821 09f6 7B61     		str	r3, [r7, #20]
 945:../tasks/SDMMC/ff.c **** 			ST_WORD(p, (WORD)val);
 1822              		.loc 1 945 0
 1823 09f8 7B68     		ldr	r3, [r7, #4]
 1824 09fa DAB2     		uxtb	r2, r3
 1825 09fc 7B69     		ldr	r3, [r7, #20]
 1826 09fe 1A70     		strb	r2, [r3]
 1827 0a00 7B69     		ldr	r3, [r7, #20]
 1828 0a02 0133     		adds	r3, r3, #1
 1829 0a04 7A68     		ldr	r2, [r7, #4]
 1830 0a06 92B2     		uxth	r2, r2
 1831 0a08 120A     		lsrs	r2, r2, #8
 1832 0a0a 92B2     		uxth	r2, r2
 1833 0a0c D2B2     		uxtb	r2, r2
 1834 0a0e 1A70     		strb	r2, [r3]
 946:../tasks/SDMMC/ff.c **** 			break;
 1835              		.loc 1 946 0
 1836 0a10 48E0     		b	.L101
 1837              	.L98:
 947:../tasks/SDMMC/ff.c **** 
 948:../tasks/SDMMC/ff.c **** 		case FS_FAT32 :
 949:../tasks/SDMMC/ff.c **** 			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 1838              		.loc 1 949 0
 1839 0a12 FB68     		ldr	r3, [r7, #12]
 1840 0a14 D3F82422 		ldr	r2, [r3, #548]
 1841 0a18 BB68     		ldr	r3, [r7, #8]
 1842 0a1a DB09     		lsrs	r3, r3, #7
 1843 0a1c 1344     		add	r3, r3, r2
 1844 0a1e F868     		ldr	r0, [r7, #12]
 1845 0a20 1946     		mov	r1, r3
 1846 0a22 FFF7A1FD 		bl	move_window
 1847 0a26 0346     		mov	r3, r0
 1848 0a28 FB77     		strb	r3, [r7, #31]
 950:../tasks/SDMMC/ff.c **** 			if (res != FR_OK) break;
 1849              		.loc 1 950 0
 1850 0a2a FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 1851 0a2c 002B     		cmp	r3, #0
 1852 0a2e 00D0     		beq	.L108
 1853              		.loc 1 950 0 is_stmt 0 discriminator 1
 1854 0a30 38E0     		b	.L101
 1855              	.L108:
 951:../tasks/SDMMC/ff.c **** 			p = &fs->win.d8[clst * 4 % SS(fs)];
 1856              		.loc 1 951 0 is_stmt 1
 1857 0a32 BB68     		ldr	r3, [r7, #8]
 1858 0a34 9B00     		lsls	r3, r3, #2
 1859 0a36 03F4FE73 		and	r3, r3, #508
 1860 0a3a FA68     		ldr	r2, [r7, #12]
 1861 0a3c 1344     		add	r3, r3, r2
 1862 0a3e 7B61     		str	r3, [r7, #20]
 952:../tasks/SDMMC/ff.c **** 			val |= LD_DWORD(p) & 0xF0000000;
 1863              		.loc 1 952 0
 1864 0a40 7B69     		ldr	r3, [r7, #20]
 1865 0a42 0333     		adds	r3, r3, #3
 1866 0a44 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1867 0a46 1A06     		lsls	r2, r3, #24
 1868 0a48 7B69     		ldr	r3, [r7, #20]
 1869 0a4a 0233     		adds	r3, r3, #2
 1870 0a4c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1871 0a4e 1B04     		lsls	r3, r3, #16
 1872 0a50 1A43     		orrs	r2, r2, r3
 1873 0a52 7B69     		ldr	r3, [r7, #20]
 1874 0a54 0133     		adds	r3, r3, #1
 1875 0a56 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1876 0a58 1B02     		lsls	r3, r3, #8
 1877 0a5a 1A43     		orrs	r2, r2, r3
 1878 0a5c 7B69     		ldr	r3, [r7, #20]
 1879 0a5e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1880 0a60 1343     		orrs	r3, r3, r2
 1881 0a62 03F07043 		and	r3, r3, #-268435456
 1882 0a66 7A68     		ldr	r2, [r7, #4]
 1883 0a68 1343     		orrs	r3, r3, r2
 1884 0a6a 7B60     		str	r3, [r7, #4]
 953:../tasks/SDMMC/ff.c **** 			ST_DWORD(p, val);
 1885              		.loc 1 953 0
 1886 0a6c 7B68     		ldr	r3, [r7, #4]
 1887 0a6e DAB2     		uxtb	r2, r3
 1888 0a70 7B69     		ldr	r3, [r7, #20]
 1889 0a72 1A70     		strb	r2, [r3]
 1890 0a74 7B69     		ldr	r3, [r7, #20]
 1891 0a76 0133     		adds	r3, r3, #1
 1892 0a78 7A68     		ldr	r2, [r7, #4]
 1893 0a7a 92B2     		uxth	r2, r2
 1894 0a7c 120A     		lsrs	r2, r2, #8
 1895 0a7e 92B2     		uxth	r2, r2
 1896 0a80 D2B2     		uxtb	r2, r2
 1897 0a82 1A70     		strb	r2, [r3]
 1898 0a84 7B69     		ldr	r3, [r7, #20]
 1899 0a86 0233     		adds	r3, r3, #2
 1900 0a88 7A68     		ldr	r2, [r7, #4]
 1901 0a8a 120C     		lsrs	r2, r2, #16
 1902 0a8c D2B2     		uxtb	r2, r2
 1903 0a8e 1A70     		strb	r2, [r3]
 1904 0a90 7B69     		ldr	r3, [r7, #20]
 1905 0a92 0333     		adds	r3, r3, #3
 1906 0a94 7A68     		ldr	r2, [r7, #4]
 1907 0a96 120E     		lsrs	r2, r2, #24
 1908 0a98 D2B2     		uxtb	r2, r2
 1909 0a9a 1A70     		strb	r2, [r3]
 954:../tasks/SDMMC/ff.c **** 			break;
 1910              		.loc 1 954 0
 1911 0a9c 02E0     		b	.L101
 1912              	.L110:
 955:../tasks/SDMMC/ff.c **** 
 956:../tasks/SDMMC/ff.c **** 		default :
 957:../tasks/SDMMC/ff.c **** 			res = FR_INT_ERR;
 1913              		.loc 1 957 0
 1914 0a9e 0223     		movs	r3, #2
 1915 0aa0 FB77     		strb	r3, [r7, #31]
 958:../tasks/SDMMC/ff.c **** 			break;
 1916              		.loc 1 958 0
 1917 0aa2 00BF     		nop
 1918              	.L101:
 959:../tasks/SDMMC/ff.c **** 		}
 960:../tasks/SDMMC/ff.c **** 		fs->wflag = 1;
 1919              		.loc 1 960 0
 1920 0aa4 FB68     		ldr	r3, [r7, #12]
 1921 0aa6 0122     		movs	r2, #1
 1922 0aa8 83F80422 		strb	r2, [r3, #516]
 1923              	.L95:
 961:../tasks/SDMMC/ff.c **** 	}
 962:../tasks/SDMMC/ff.c **** 
 963:../tasks/SDMMC/ff.c **** 	return res;
 1924              		.loc 1 963 0
 1925 0aac FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 964:../tasks/SDMMC/ff.c **** }
 1926              		.loc 1 964 0
 1927 0aae 1846     		mov	r0, r3
 1928 0ab0 2037     		adds	r7, r7, #32
 1929 0ab2 BD46     		mov	sp, r7
 1930              		@ sp needed
 1931 0ab4 80BD     		pop	{r7, pc}
 1932              		.cfi_endproc
 1933              	.LFE69:
 1935 0ab6 00BF     		.align	2
 1936              		.thumb
 1937              		.thumb_func
 1939              	remove_chain:
 1940              	.LFB70:
 965:../tasks/SDMMC/ff.c **** #endif /* !_FS_READONLY */
 966:../tasks/SDMMC/ff.c **** 
 967:../tasks/SDMMC/ff.c **** 
 968:../tasks/SDMMC/ff.c **** 
 969:../tasks/SDMMC/ff.c **** 
 970:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
 971:../tasks/SDMMC/ff.c **** /* FAT handling - Remove a cluster chain                                 */
 972:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
 973:../tasks/SDMMC/ff.c **** #if !_FS_READONLY
 974:../tasks/SDMMC/ff.c **** static
 975:../tasks/SDMMC/ff.c **** FRESULT remove_chain (
 976:../tasks/SDMMC/ff.c **** 	FATFS* fs,			/* File system object */
 977:../tasks/SDMMC/ff.c **** 	DWORD clst			/* Cluster# to remove a chain from */
 978:../tasks/SDMMC/ff.c **** )
 979:../tasks/SDMMC/ff.c **** {
 1941              		.loc 1 979 0
 1942              		.cfi_startproc
 1943              		@ args = 0, pretend = 0, frame = 16
 1944              		@ frame_needed = 1, uses_anonymous_args = 0
 1945 0ab8 80B5     		push	{r7, lr}
 1946              		.cfi_def_cfa_offset 8
 1947              		.cfi_offset 7, -8
 1948              		.cfi_offset 14, -4
 1949 0aba 84B0     		sub	sp, sp, #16
 1950              		.cfi_def_cfa_offset 24
 1951 0abc 00AF     		add	r7, sp, #0
 1952              		.cfi_def_cfa_register 7
 1953 0abe 7860     		str	r0, [r7, #4]
 1954 0ac0 3960     		str	r1, [r7]
 980:../tasks/SDMMC/ff.c **** 	FRESULT res;
 981:../tasks/SDMMC/ff.c **** 	DWORD nxt;
 982:../tasks/SDMMC/ff.c **** #if _USE_ERASE
 983:../tasks/SDMMC/ff.c **** 	DWORD scl = clst, ecl = clst, rt[2];
 984:../tasks/SDMMC/ff.c **** #endif
 985:../tasks/SDMMC/ff.c **** 
 986:../tasks/SDMMC/ff.c **** 	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 1955              		.loc 1 986 0
 1956 0ac2 3B68     		ldr	r3, [r7]
 1957 0ac4 012B     		cmp	r3, #1
 1958 0ac6 05D9     		bls	.L112
 1959              		.loc 1 986 0 is_stmt 0 discriminator 1
 1960 0ac8 7B68     		ldr	r3, [r7, #4]
 1961 0aca D3F81822 		ldr	r2, [r3, #536]
 1962 0ace 3B68     		ldr	r3, [r7]
 1963 0ad0 9A42     		cmp	r2, r3
 1964 0ad2 02D8     		bhi	.L113
 1965              	.L112:
 987:../tasks/SDMMC/ff.c **** 		res = FR_INT_ERR;
 1966              		.loc 1 987 0 is_stmt 1
 1967 0ad4 0223     		movs	r3, #2
 1968 0ad6 FB73     		strb	r3, [r7, #15]
 1969 0ad8 41E0     		b	.L114
 1970              	.L113:
 988:../tasks/SDMMC/ff.c **** 
 989:../tasks/SDMMC/ff.c **** 	} else {
 990:../tasks/SDMMC/ff.c **** 		res = FR_OK;
 1971              		.loc 1 990 0
 1972 0ada 0023     		movs	r3, #0
 1973 0adc FB73     		strb	r3, [r7, #15]
 991:../tasks/SDMMC/ff.c **** 		while (clst < fs->n_fatent) {			/* Not a last link? */
 1974              		.loc 1 991 0
 1975 0ade 38E0     		b	.L115
 1976              	.L121:
 992:../tasks/SDMMC/ff.c **** 			nxt = get_fat(fs, clst);			/* Get cluster status */
 1977              		.loc 1 992 0
 1978 0ae0 7868     		ldr	r0, [r7, #4]
 1979 0ae2 3968     		ldr	r1, [r7]
 1980 0ae4 FFF7FEFF 		bl	get_fat
 1981 0ae8 B860     		str	r0, [r7, #8]
 993:../tasks/SDMMC/ff.c **** 			if (nxt == 0) break;				/* Empty cluster? */
 1982              		.loc 1 993 0
 1983 0aea BB68     		ldr	r3, [r7, #8]
 1984 0aec 002B     		cmp	r3, #0
 1985 0aee 00D1     		bne	.L116
 1986              		.loc 1 993 0 is_stmt 0 discriminator 1
 1987 0af0 35E0     		b	.L114
 1988              	.L116:
 994:../tasks/SDMMC/ff.c **** 			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 1989              		.loc 1 994 0 is_stmt 1
 1990 0af2 BB68     		ldr	r3, [r7, #8]
 1991 0af4 012B     		cmp	r3, #1
 1992 0af6 02D1     		bne	.L117
 1993              		.loc 1 994 0 is_stmt 0 discriminator 1
 1994 0af8 0223     		movs	r3, #2
 1995 0afa FB73     		strb	r3, [r7, #15]
 1996 0afc 2FE0     		b	.L114
 1997              	.L117:
 995:../tasks/SDMMC/ff.c **** 			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 1998              		.loc 1 995 0 is_stmt 1
 1999 0afe BB68     		ldr	r3, [r7, #8]
 2000 0b00 B3F1FF3F 		cmp	r3, #-1
 2001 0b04 02D1     		bne	.L118
 2002              		.loc 1 995 0 is_stmt 0 discriminator 1
 2003 0b06 0123     		movs	r3, #1
 2004 0b08 FB73     		strb	r3, [r7, #15]
 2005 0b0a 28E0     		b	.L114
 2006              	.L118:
 996:../tasks/SDMMC/ff.c **** 			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 2007              		.loc 1 996 0 is_stmt 1
 2008 0b0c 7868     		ldr	r0, [r7, #4]
 2009 0b0e 3968     		ldr	r1, [r7]
 2010 0b10 0022     		movs	r2, #0
 2011 0b12 FFF7FEFF 		bl	put_fat
 2012 0b16 0346     		mov	r3, r0
 2013 0b18 FB73     		strb	r3, [r7, #15]
 997:../tasks/SDMMC/ff.c **** 			if (res != FR_OK) break;
 2014              		.loc 1 997 0
 2015 0b1a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2016 0b1c 002B     		cmp	r3, #0
 2017 0b1e 00D0     		beq	.L119
 2018              		.loc 1 997 0 is_stmt 0 discriminator 1
 2019 0b20 1DE0     		b	.L114
 2020              	.L119:
 998:../tasks/SDMMC/ff.c **** 			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 2021              		.loc 1 998 0 is_stmt 1
 2022 0b22 7B68     		ldr	r3, [r7, #4]
 2023 0b24 D3F81032 		ldr	r3, [r3, #528]
 2024 0b28 B3F1FF3F 		cmp	r3, #-1
 2025 0b2c 0FD0     		beq	.L120
 999:../tasks/SDMMC/ff.c **** 				fs->free_clust++;
 2026              		.loc 1 999 0
 2027 0b2e 7B68     		ldr	r3, [r7, #4]
 2028 0b30 D3F81032 		ldr	r3, [r3, #528]
 2029 0b34 5A1C     		adds	r2, r3, #1
 2030 0b36 7B68     		ldr	r3, [r7, #4]
 2031 0b38 C3F81022 		str	r2, [r3, #528]
1000:../tasks/SDMMC/ff.c **** 				fs->fsi_flag |= 1;
 2032              		.loc 1 1000 0
 2033 0b3c 7B68     		ldr	r3, [r7, #4]
 2034 0b3e 93F80532 		ldrb	r3, [r3, #517]	@ zero_extendqisi2
 2035 0b42 43F00103 		orr	r3, r3, #1
 2036 0b46 DAB2     		uxtb	r2, r3
 2037 0b48 7B68     		ldr	r3, [r7, #4]
 2038 0b4a 83F80522 		strb	r2, [r3, #517]
 2039              	.L120:
1001:../tasks/SDMMC/ff.c **** 			}
1002:../tasks/SDMMC/ff.c **** #if _USE_ERASE
1003:../tasks/SDMMC/ff.c **** 			if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
1004:../tasks/SDMMC/ff.c **** 				ecl = nxt;
1005:../tasks/SDMMC/ff.c **** 			} else {				/* End of contiguous clusters */ 
1006:../tasks/SDMMC/ff.c **** 				rt[0] = clust2sect(fs, scl);					/* Start sector */
1007:../tasks/SDMMC/ff.c **** 				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
1008:../tasks/SDMMC/ff.c **** 				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, rt);		/* Erase the block */
1009:../tasks/SDMMC/ff.c **** 				scl = ecl = nxt;
1010:../tasks/SDMMC/ff.c **** 			}
1011:../tasks/SDMMC/ff.c **** #endif
1012:../tasks/SDMMC/ff.c **** 			clst = nxt;	/* Next cluster */
 2040              		.loc 1 1012 0
 2041 0b4e BB68     		ldr	r3, [r7, #8]
 2042 0b50 3B60     		str	r3, [r7]
 2043              	.L115:
 991:../tasks/SDMMC/ff.c **** 			nxt = get_fat(fs, clst);			/* Get cluster status */
 2044              		.loc 1 991 0 discriminator 1
 2045 0b52 7B68     		ldr	r3, [r7, #4]
 2046 0b54 D3F81822 		ldr	r2, [r3, #536]
 2047 0b58 3B68     		ldr	r3, [r7]
 2048 0b5a 9A42     		cmp	r2, r3
 2049 0b5c C0D8     		bhi	.L121
 2050              	.L114:
1013:../tasks/SDMMC/ff.c **** 		}
1014:../tasks/SDMMC/ff.c **** 	}
1015:../tasks/SDMMC/ff.c **** 
1016:../tasks/SDMMC/ff.c **** 	return res;
 2051              		.loc 1 1016 0
 2052 0b5e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1017:../tasks/SDMMC/ff.c **** }
 2053              		.loc 1 1017 0
 2054 0b60 1846     		mov	r0, r3
 2055 0b62 1037     		adds	r7, r7, #16
 2056 0b64 BD46     		mov	sp, r7
 2057              		@ sp needed
 2058 0b66 80BD     		pop	{r7, pc}
 2059              		.cfi_endproc
 2060              	.LFE70:
 2062              		.align	2
 2063              		.thumb
 2064              		.thumb_func
 2066              	create_chain:
 2067              	.LFB71:
1018:../tasks/SDMMC/ff.c **** #endif
1019:../tasks/SDMMC/ff.c **** 
1020:../tasks/SDMMC/ff.c **** 
1021:../tasks/SDMMC/ff.c **** 
1022:../tasks/SDMMC/ff.c **** 
1023:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
1024:../tasks/SDMMC/ff.c **** /* FAT handling - Stretch or Create a cluster chain                      */
1025:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
1026:../tasks/SDMMC/ff.c **** #if !_FS_READONLY
1027:../tasks/SDMMC/ff.c **** static
1028:../tasks/SDMMC/ff.c **** DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster
1029:../tasks/SDMMC/ff.c **** 	FATFS* fs,			/* File system object */
1030:../tasks/SDMMC/ff.c **** 	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
1031:../tasks/SDMMC/ff.c **** )
1032:../tasks/SDMMC/ff.c **** {
 2068              		.loc 1 1032 0
 2069              		.cfi_startproc
 2070              		@ args = 0, pretend = 0, frame = 24
 2071              		@ frame_needed = 1, uses_anonymous_args = 0
 2072 0b68 80B5     		push	{r7, lr}
 2073              		.cfi_def_cfa_offset 8
 2074              		.cfi_offset 7, -8
 2075              		.cfi_offset 14, -4
 2076 0b6a 86B0     		sub	sp, sp, #24
 2077              		.cfi_def_cfa_offset 32
 2078 0b6c 00AF     		add	r7, sp, #0
 2079              		.cfi_def_cfa_register 7
 2080 0b6e 7860     		str	r0, [r7, #4]
 2081 0b70 3960     		str	r1, [r7]
1033:../tasks/SDMMC/ff.c **** 	DWORD cs, ncl, scl;
1034:../tasks/SDMMC/ff.c **** 	FRESULT res;
1035:../tasks/SDMMC/ff.c **** 
1036:../tasks/SDMMC/ff.c **** 
1037:../tasks/SDMMC/ff.c **** 	if (clst == 0) {		/* Create a new chain */
 2082              		.loc 1 1037 0
 2083 0b72 3B68     		ldr	r3, [r7]
 2084 0b74 002B     		cmp	r3, #0
 2085 0b76 0FD1     		bne	.L124
1038:../tasks/SDMMC/ff.c **** 		scl = fs->last_clust;			/* Get suggested start point */
 2086              		.loc 1 1038 0
 2087 0b78 7B68     		ldr	r3, [r7, #4]
 2088 0b7a D3F80C32 		ldr	r3, [r3, #524]
 2089 0b7e 3B61     		str	r3, [r7, #16]
1039:../tasks/SDMMC/ff.c **** 		if (!scl || scl >= fs->n_fatent) scl = 1;
 2090              		.loc 1 1039 0
 2091 0b80 3B69     		ldr	r3, [r7, #16]
 2092 0b82 002B     		cmp	r3, #0
 2093 0b84 05D0     		beq	.L125
 2094              		.loc 1 1039 0 is_stmt 0 discriminator 2
 2095 0b86 7B68     		ldr	r3, [r7, #4]
 2096 0b88 D3F81822 		ldr	r2, [r3, #536]
 2097 0b8c 3B69     		ldr	r3, [r7, #16]
 2098 0b8e 9A42     		cmp	r2, r3
 2099 0b90 16D8     		bhi	.L127
 2100              	.L125:
 2101              		.loc 1 1039 0 discriminator 1
 2102 0b92 0123     		movs	r3, #1
 2103 0b94 3B61     		str	r3, [r7, #16]
 2104 0b96 13E0     		b	.L127
 2105              	.L124:
1040:../tasks/SDMMC/ff.c **** 	}
1041:../tasks/SDMMC/ff.c **** 	else {					/* Stretch the current chain */
1042:../tasks/SDMMC/ff.c **** 		cs = get_fat(fs, clst);			/* Check the cluster status */
 2106              		.loc 1 1042 0 is_stmt 1
 2107 0b98 7868     		ldr	r0, [r7, #4]
 2108 0b9a 3968     		ldr	r1, [r7]
 2109 0b9c FFF7FEFF 		bl	get_fat
 2110 0ba0 B860     		str	r0, [r7, #8]
1043:../tasks/SDMMC/ff.c **** 		if (cs < 2) return 1;			/* It is an invalid cluster */
 2111              		.loc 1 1043 0
 2112 0ba2 BB68     		ldr	r3, [r7, #8]
 2113 0ba4 012B     		cmp	r3, #1
 2114 0ba6 01D8     		bhi	.L128
 2115              		.loc 1 1043 0 is_stmt 0 discriminator 1
 2116 0ba8 0123     		movs	r3, #1
 2117 0baa 72E0     		b	.L129
 2118              	.L128:
1044:../tasks/SDMMC/ff.c **** 		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 2119              		.loc 1 1044 0 is_stmt 1
 2120 0bac 7B68     		ldr	r3, [r7, #4]
 2121 0bae D3F81822 		ldr	r2, [r3, #536]
 2122 0bb2 BB68     		ldr	r3, [r7, #8]
 2123 0bb4 9A42     		cmp	r2, r3
 2124 0bb6 01D9     		bls	.L130
 2125              		.loc 1 1044 0 is_stmt 0 discriminator 1
 2126 0bb8 BB68     		ldr	r3, [r7, #8]
 2127 0bba 6AE0     		b	.L129
 2128              	.L130:
1045:../tasks/SDMMC/ff.c **** 		scl = clst;
 2129              		.loc 1 1045 0 is_stmt 1
 2130 0bbc 3B68     		ldr	r3, [r7]
 2131 0bbe 3B61     		str	r3, [r7, #16]
 2132              	.L127:
1046:../tasks/SDMMC/ff.c **** 	}
1047:../tasks/SDMMC/ff.c **** 
1048:../tasks/SDMMC/ff.c **** 	ncl = scl;				/* Start cluster */
 2133              		.loc 1 1048 0
 2134 0bc0 3B69     		ldr	r3, [r7, #16]
 2135 0bc2 7B61     		str	r3, [r7, #20]
 2136              	.L137:
1049:../tasks/SDMMC/ff.c **** 	for (;;) {
1050:../tasks/SDMMC/ff.c **** 		ncl++;							/* Next cluster */
 2137              		.loc 1 1050 0
 2138 0bc4 7B69     		ldr	r3, [r7, #20]
 2139 0bc6 0133     		adds	r3, r3, #1
 2140 0bc8 7B61     		str	r3, [r7, #20]
1051:../tasks/SDMMC/ff.c **** 		if (ncl >= fs->n_fatent) {		/* Wrap around */
 2141              		.loc 1 1051 0
 2142 0bca 7B68     		ldr	r3, [r7, #4]
 2143 0bcc D3F81822 		ldr	r2, [r3, #536]
 2144 0bd0 7B69     		ldr	r3, [r7, #20]
 2145 0bd2 9A42     		cmp	r2, r3
 2146 0bd4 07D8     		bhi	.L131
1052:../tasks/SDMMC/ff.c **** 			ncl = 2;
 2147              		.loc 1 1052 0
 2148 0bd6 0223     		movs	r3, #2
 2149 0bd8 7B61     		str	r3, [r7, #20]
1053:../tasks/SDMMC/ff.c **** 			if (ncl > scl) return 0;	/* No free cluster */
 2150              		.loc 1 1053 0
 2151 0bda 7A69     		ldr	r2, [r7, #20]
 2152 0bdc 3B69     		ldr	r3, [r7, #16]
 2153 0bde 9A42     		cmp	r2, r3
 2154 0be0 01D9     		bls	.L131
 2155              		.loc 1 1053 0 is_stmt 0 discriminator 1
 2156 0be2 0023     		movs	r3, #0
 2157 0be4 55E0     		b	.L129
 2158              	.L131:
1054:../tasks/SDMMC/ff.c **** 		}
1055:../tasks/SDMMC/ff.c **** 		cs = get_fat(fs, ncl);			/* Get the cluster status */
 2159              		.loc 1 1055 0 is_stmt 1
 2160 0be6 7868     		ldr	r0, [r7, #4]
 2161 0be8 7969     		ldr	r1, [r7, #20]
 2162 0bea FFF7FEFF 		bl	get_fat
 2163 0bee B860     		str	r0, [r7, #8]
1056:../tasks/SDMMC/ff.c **** 		if (cs == 0) break;				/* Found a free cluster */
 2164              		.loc 1 1056 0
 2165 0bf0 BB68     		ldr	r3, [r7, #8]
 2166 0bf2 002B     		cmp	r3, #0
 2167 0bf4 0CD1     		bne	.L132
 2168              		.loc 1 1056 0 is_stmt 0 discriminator 1
 2169 0bf6 00BF     		nop
1057:../tasks/SDMMC/ff.c **** 		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
1058:../tasks/SDMMC/ff.c **** 			return cs;
1059:../tasks/SDMMC/ff.c **** 		if (ncl == scl) return 0;		/* No free cluster */
1060:../tasks/SDMMC/ff.c **** 	}
1061:../tasks/SDMMC/ff.c **** 
1062:../tasks/SDMMC/ff.c **** 	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 2170              		.loc 1 1062 0 is_stmt 1 discriminator 1
 2171 0bf8 7868     		ldr	r0, [r7, #4]
 2172 0bfa 7969     		ldr	r1, [r7, #20]
 2173 0bfc 6FF07042 		mvn	r2, #-268435456
 2174 0c00 FFF7FEFF 		bl	put_fat
 2175 0c04 0346     		mov	r3, r0
 2176 0c06 FB73     		strb	r3, [r7, #15]
1063:../tasks/SDMMC/ff.c **** 	if (res == FR_OK && clst != 0) {
 2177              		.loc 1 1063 0 discriminator 1
 2178 0c08 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2179 0c0a 002B     		cmp	r3, #0
 2180 0c0c 1AD1     		bne	.L138
 2181 0c0e 0FE0     		b	.L144
 2182              	.L132:
1057:../tasks/SDMMC/ff.c **** 		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 2183              		.loc 1 1057 0
 2184 0c10 BB68     		ldr	r3, [r7, #8]
 2185 0c12 B3F1FF3F 		cmp	r3, #-1
 2186 0c16 02D0     		beq	.L134
1057:../tasks/SDMMC/ff.c **** 		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 2187              		.loc 1 1057 0 is_stmt 0 discriminator 1
 2188 0c18 BB68     		ldr	r3, [r7, #8]
 2189 0c1a 012B     		cmp	r3, #1
 2190 0c1c 01D1     		bne	.L135
 2191              	.L134:
1058:../tasks/SDMMC/ff.c **** 		if (ncl == scl) return 0;		/* No free cluster */
 2192              		.loc 1 1058 0 is_stmt 1
 2193 0c1e BB68     		ldr	r3, [r7, #8]
 2194 0c20 37E0     		b	.L129
 2195              	.L135:
1059:../tasks/SDMMC/ff.c **** 	}
 2196              		.loc 1 1059 0
 2197 0c22 7A69     		ldr	r2, [r7, #20]
 2198 0c24 3B69     		ldr	r3, [r7, #16]
 2199 0c26 9A42     		cmp	r2, r3
 2200 0c28 01D1     		bne	.L136
1059:../tasks/SDMMC/ff.c **** 	}
 2201              		.loc 1 1059 0 is_stmt 0 discriminator 1
 2202 0c2a 0023     		movs	r3, #0
 2203 0c2c 31E0     		b	.L129
 2204              	.L136:
1060:../tasks/SDMMC/ff.c **** 
 2205              		.loc 1 1060 0 is_stmt 1
 2206 0c2e C9E7     		b	.L137
 2207              	.L144:
 2208              		.loc 1 1063 0 discriminator 1
 2209 0c30 3B68     		ldr	r3, [r7]
 2210 0c32 002B     		cmp	r3, #0
 2211 0c34 06D0     		beq	.L138
1064:../tasks/SDMMC/ff.c **** 		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 2212              		.loc 1 1064 0
 2213 0c36 7868     		ldr	r0, [r7, #4]
 2214 0c38 3968     		ldr	r1, [r7]
 2215 0c3a 7A69     		ldr	r2, [r7, #20]
 2216 0c3c FFF7FEFF 		bl	put_fat
 2217 0c40 0346     		mov	r3, r0
 2218 0c42 FB73     		strb	r3, [r7, #15]
 2219              	.L138:
1065:../tasks/SDMMC/ff.c **** 	}
1066:../tasks/SDMMC/ff.c **** 	if (res == FR_OK) {
 2220              		.loc 1 1066 0
 2221 0c44 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2222 0c46 002B     		cmp	r3, #0
 2223 0c48 1AD1     		bne	.L139
1067:../tasks/SDMMC/ff.c **** 		fs->last_clust = ncl;			/* Update FSINFO */
 2224              		.loc 1 1067 0
 2225 0c4a 7B68     		ldr	r3, [r7, #4]
 2226 0c4c 7A69     		ldr	r2, [r7, #20]
 2227 0c4e C3F80C22 		str	r2, [r3, #524]
1068:../tasks/SDMMC/ff.c **** 		if (fs->free_clust != 0xFFFFFFFF) {
 2228              		.loc 1 1068 0
 2229 0c52 7B68     		ldr	r3, [r7, #4]
 2230 0c54 D3F81032 		ldr	r3, [r3, #528]
 2231 0c58 B3F1FF3F 		cmp	r3, #-1
 2232 0c5c 18D0     		beq	.L141
1069:../tasks/SDMMC/ff.c **** 			fs->free_clust--;
 2233              		.loc 1 1069 0
 2234 0c5e 7B68     		ldr	r3, [r7, #4]
 2235 0c60 D3F81032 		ldr	r3, [r3, #528]
 2236 0c64 5A1E     		subs	r2, r3, #1
 2237 0c66 7B68     		ldr	r3, [r7, #4]
 2238 0c68 C3F81022 		str	r2, [r3, #528]
1070:../tasks/SDMMC/ff.c **** 			fs->fsi_flag |= 1;
 2239              		.loc 1 1070 0
 2240 0c6c 7B68     		ldr	r3, [r7, #4]
 2241 0c6e 93F80532 		ldrb	r3, [r3, #517]	@ zero_extendqisi2
 2242 0c72 43F00103 		orr	r3, r3, #1
 2243 0c76 DAB2     		uxtb	r2, r3
 2244 0c78 7B68     		ldr	r3, [r7, #4]
 2245 0c7a 83F80522 		strb	r2, [r3, #517]
 2246 0c7e 07E0     		b	.L141
 2247              	.L139:
1071:../tasks/SDMMC/ff.c **** 		}
1072:../tasks/SDMMC/ff.c **** 	} else {
1073:../tasks/SDMMC/ff.c **** 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 2248              		.loc 1 1073 0
 2249 0c80 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2250 0c82 012B     		cmp	r3, #1
 2251 0c84 02D1     		bne	.L142
 2252              		.loc 1 1073 0 is_stmt 0 discriminator 1
 2253 0c86 4FF0FF33 		mov	r3, #-1
 2254 0c8a 00E0     		b	.L143
 2255              	.L142:
 2256              		.loc 1 1073 0 discriminator 2
 2257 0c8c 0123     		movs	r3, #1
 2258              	.L143:
 2259              		.loc 1 1073 0 discriminator 3
 2260 0c8e 7B61     		str	r3, [r7, #20]
 2261              	.L141:
1074:../tasks/SDMMC/ff.c **** 	}
1075:../tasks/SDMMC/ff.c **** 
1076:../tasks/SDMMC/ff.c **** 	return ncl;		/* Return new cluster number or error code */
 2262              		.loc 1 1076 0 is_stmt 1
 2263 0c90 7B69     		ldr	r3, [r7, #20]
 2264              	.L129:
1077:../tasks/SDMMC/ff.c **** }
 2265              		.loc 1 1077 0
 2266 0c92 1846     		mov	r0, r3
 2267 0c94 1837     		adds	r7, r7, #24
 2268 0c96 BD46     		mov	sp, r7
 2269              		@ sp needed
 2270 0c98 80BD     		pop	{r7, pc}
 2271              		.cfi_endproc
 2272              	.LFE71:
 2274 0c9a 00BF     		.align	2
 2275              		.thumb
 2276              		.thumb_func
 2278              	clmt_clust:
 2279              	.LFB72:
1078:../tasks/SDMMC/ff.c **** #endif /* !_FS_READONLY */
1079:../tasks/SDMMC/ff.c **** 
1080:../tasks/SDMMC/ff.c **** 
1081:../tasks/SDMMC/ff.c **** 
1082:../tasks/SDMMC/ff.c **** 
1083:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
1084:../tasks/SDMMC/ff.c **** /* FAT handling - Convert offset into cluster with link map table        */
1085:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
1086:../tasks/SDMMC/ff.c **** 
1087:../tasks/SDMMC/ff.c **** #if _USE_FASTSEEK
1088:../tasks/SDMMC/ff.c **** static
1089:../tasks/SDMMC/ff.c **** DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
1090:../tasks/SDMMC/ff.c **** 	FIL* fp,		/* Pointer to the file object */
1091:../tasks/SDMMC/ff.c **** 	DWORD ofs		/* File offset to be converted to cluster# */
1092:../tasks/SDMMC/ff.c **** )
1093:../tasks/SDMMC/ff.c **** {
 2280              		.loc 1 1093 0
 2281              		.cfi_startproc
 2282              		@ args = 0, pretend = 0, frame = 24
 2283              		@ frame_needed = 1, uses_anonymous_args = 0
 2284              		@ link register save eliminated.
 2285 0c9c 80B4     		push	{r7}
 2286              		.cfi_def_cfa_offset 4
 2287              		.cfi_offset 7, -4
 2288 0c9e 87B0     		sub	sp, sp, #28
 2289              		.cfi_def_cfa_offset 32
 2290 0ca0 00AF     		add	r7, sp, #0
 2291              		.cfi_def_cfa_register 7
 2292 0ca2 7860     		str	r0, [r7, #4]
 2293 0ca4 3960     		str	r1, [r7]
1094:../tasks/SDMMC/ff.c **** 	DWORD cl, ncl, *tbl;
1095:../tasks/SDMMC/ff.c **** 
1096:../tasks/SDMMC/ff.c **** 
1097:../tasks/SDMMC/ff.c **** 	tbl = fp->cltbl + 1;	/* Top of CLMT */
 2294              		.loc 1 1097 0
 2295 0ca6 7B68     		ldr	r3, [r7, #4]
 2296 0ca8 D3F82432 		ldr	r3, [r3, #548]
 2297 0cac 0433     		adds	r3, r3, #4
 2298 0cae 3B61     		str	r3, [r7, #16]
1098:../tasks/SDMMC/ff.c **** 	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 2299              		.loc 1 1098 0
 2300 0cb0 3B68     		ldr	r3, [r7]
 2301 0cb2 5A0A     		lsrs	r2, r3, #9
 2302 0cb4 7B68     		ldr	r3, [r7, #4]
 2303 0cb6 D3F80032 		ldr	r3, [r3, #512]
 2304 0cba 93F80232 		ldrb	r3, [r3, #514]	@ zero_extendqisi2
 2305 0cbe B2FBF3F3 		udiv	r3, r2, r3
 2306 0cc2 7B61     		str	r3, [r7, #20]
 2307              	.L150:
1099:../tasks/SDMMC/ff.c **** 	for (;;) {
1100:../tasks/SDMMC/ff.c **** 		ncl = *tbl++;			/* Number of cluters in the fragment */
 2308              		.loc 1 1100 0
 2309 0cc4 3B69     		ldr	r3, [r7, #16]
 2310 0cc6 1A1D     		adds	r2, r3, #4
 2311 0cc8 3A61     		str	r2, [r7, #16]
 2312 0cca 1B68     		ldr	r3, [r3]
 2313 0ccc FB60     		str	r3, [r7, #12]
1101:../tasks/SDMMC/ff.c **** 		if (!ncl) return 0;		/* End of table? (error) */
 2314              		.loc 1 1101 0
 2315 0cce FB68     		ldr	r3, [r7, #12]
 2316 0cd0 002B     		cmp	r3, #0
 2317 0cd2 01D1     		bne	.L146
 2318              		.loc 1 1101 0 is_stmt 0 discriminator 1
 2319 0cd4 0023     		movs	r3, #0
 2320 0cd6 11E0     		b	.L147
 2321              	.L146:
1102:../tasks/SDMMC/ff.c **** 		if (cl < ncl) break;	/* In this fragment? */
 2322              		.loc 1 1102 0 is_stmt 1
 2323 0cd8 7A69     		ldr	r2, [r7, #20]
 2324 0cda FB68     		ldr	r3, [r7, #12]
 2325 0cdc 9A42     		cmp	r2, r3
 2326 0cde 05D2     		bcs	.L148
 2327              		.loc 1 1102 0 is_stmt 0 discriminator 1
 2328 0ce0 00BF     		nop
1103:../tasks/SDMMC/ff.c **** 		cl -= ncl; tbl++;		/* Next fragment */
1104:../tasks/SDMMC/ff.c **** 	}
1105:../tasks/SDMMC/ff.c **** 	return cl + *tbl;	/* Return the cluster number */
 2329              		.loc 1 1105 0 is_stmt 1 discriminator 1
 2330 0ce2 3B69     		ldr	r3, [r7, #16]
 2331 0ce4 1A68     		ldr	r2, [r3]
 2332 0ce6 7B69     		ldr	r3, [r7, #20]
 2333 0ce8 1344     		add	r3, r3, r2
 2334 0cea 07E0     		b	.L147
 2335              	.L148:
1103:../tasks/SDMMC/ff.c **** 		cl -= ncl; tbl++;		/* Next fragment */
 2336              		.loc 1 1103 0
 2337 0cec 7A69     		ldr	r2, [r7, #20]
 2338 0cee FB68     		ldr	r3, [r7, #12]
 2339 0cf0 D31A     		subs	r3, r2, r3
 2340 0cf2 7B61     		str	r3, [r7, #20]
 2341 0cf4 3B69     		ldr	r3, [r7, #16]
 2342 0cf6 0433     		adds	r3, r3, #4
 2343 0cf8 3B61     		str	r3, [r7, #16]
1104:../tasks/SDMMC/ff.c **** 	return cl + *tbl;	/* Return the cluster number */
 2344              		.loc 1 1104 0
 2345 0cfa E3E7     		b	.L150
 2346              	.L147:
1106:../tasks/SDMMC/ff.c **** }
 2347              		.loc 1 1106 0
 2348 0cfc 1846     		mov	r0, r3
 2349 0cfe 1C37     		adds	r7, r7, #28
 2350 0d00 BD46     		mov	sp, r7
 2351              		@ sp needed
 2352 0d02 5DF8047B 		ldr	r7, [sp], #4
 2353 0d06 7047     		bx	lr
 2354              		.cfi_endproc
 2355              	.LFE72:
 2357              		.align	2
 2358              		.thumb
 2359              		.thumb_func
 2361              	dir_sdi:
 2362              	.LFB73:
1107:../tasks/SDMMC/ff.c **** #endif	/* _USE_FASTSEEK */
1108:../tasks/SDMMC/ff.c **** 
1109:../tasks/SDMMC/ff.c **** 
1110:../tasks/SDMMC/ff.c **** 
1111:../tasks/SDMMC/ff.c **** 
1112:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
1113:../tasks/SDMMC/ff.c **** /* Directory handling - Set directory index                              */
1114:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
1115:../tasks/SDMMC/ff.c **** 
1116:../tasks/SDMMC/ff.c **** static
1117:../tasks/SDMMC/ff.c **** FRESULT dir_sdi (
1118:../tasks/SDMMC/ff.c **** 	DIR* dp,		/* Pointer to directory object */
1119:../tasks/SDMMC/ff.c **** 	WORD idx		/* Index of directory table */
1120:../tasks/SDMMC/ff.c **** )
1121:../tasks/SDMMC/ff.c **** {
 2363              		.loc 1 1121 0
 2364              		.cfi_startproc
 2365              		@ args = 0, pretend = 0, frame = 16
 2366              		@ frame_needed = 1, uses_anonymous_args = 0
 2367 0d08 80B5     		push	{r7, lr}
 2368              		.cfi_def_cfa_offset 8
 2369              		.cfi_offset 7, -8
 2370              		.cfi_offset 14, -4
 2371 0d0a 84B0     		sub	sp, sp, #16
 2372              		.cfi_def_cfa_offset 24
 2373 0d0c 00AF     		add	r7, sp, #0
 2374              		.cfi_def_cfa_register 7
 2375 0d0e 7860     		str	r0, [r7, #4]
 2376 0d10 0B46     		mov	r3, r1
 2377 0d12 7B80     		strh	r3, [r7, #2]	@ movhi
1122:../tasks/SDMMC/ff.c **** 	DWORD clst;
1123:../tasks/SDMMC/ff.c **** 	WORD ic;
1124:../tasks/SDMMC/ff.c **** 
1125:../tasks/SDMMC/ff.c **** 
1126:../tasks/SDMMC/ff.c **** 	dp->index = idx;
 2378              		.loc 1 1126 0
 2379 0d14 7B68     		ldr	r3, [r7, #4]
 2380 0d16 7A88     		ldrh	r2, [r7, #2]	@ movhi
 2381 0d18 A3F80622 		strh	r2, [r3, #518]	@ movhi
1127:../tasks/SDMMC/ff.c **** 	clst = dp->sclust;
 2382              		.loc 1 1127 0
 2383 0d1c 7B68     		ldr	r3, [r7, #4]
 2384 0d1e D3F80832 		ldr	r3, [r3, #520]
 2385 0d22 FB60     		str	r3, [r7, #12]
1128:../tasks/SDMMC/ff.c **** 	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 2386              		.loc 1 1128 0
 2387 0d24 FB68     		ldr	r3, [r7, #12]
 2388 0d26 012B     		cmp	r3, #1
 2389 0d28 07D0     		beq	.L152
 2390              		.loc 1 1128 0 is_stmt 0 discriminator 1
 2391 0d2a 7B68     		ldr	r3, [r7, #4]
 2392 0d2c D3F80032 		ldr	r3, [r3, #512]
 2393 0d30 D3F81822 		ldr	r2, [r3, #536]
 2394 0d34 FB68     		ldr	r3, [r7, #12]
 2395 0d36 9A42     		cmp	r2, r3
 2396 0d38 01D8     		bhi	.L153
 2397              	.L152:
1129:../tasks/SDMMC/ff.c **** 		return FR_INT_ERR;
 2398              		.loc 1 1129 0 is_stmt 1
 2399 0d3a 0223     		movs	r3, #2
 2400 0d3c 77E0     		b	.L154
 2401              	.L153:
1130:../tasks/SDMMC/ff.c **** 	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 2402              		.loc 1 1130 0
 2403 0d3e FB68     		ldr	r3, [r7, #12]
 2404 0d40 002B     		cmp	r3, #0
 2405 0d42 0CD1     		bne	.L155
 2406              		.loc 1 1130 0 is_stmt 0 discriminator 1
 2407 0d44 7B68     		ldr	r3, [r7, #4]
 2408 0d46 D3F80032 		ldr	r3, [r3, #512]
 2409 0d4a 93F80032 		ldrb	r3, [r3, #512]	@ zero_extendqisi2
 2410 0d4e 032B     		cmp	r3, #3
 2411 0d50 05D1     		bne	.L155
1131:../tasks/SDMMC/ff.c **** 		clst = dp->fs->dirbase;
 2412              		.loc 1 1131 0 is_stmt 1
 2413 0d52 7B68     		ldr	r3, [r7, #4]
 2414 0d54 D3F80032 		ldr	r3, [r3, #512]
 2415 0d58 D3F82832 		ldr	r3, [r3, #552]
 2416 0d5c FB60     		str	r3, [r7, #12]
 2417              	.L155:
1132:../tasks/SDMMC/ff.c **** 
1133:../tasks/SDMMC/ff.c **** 	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 2418              		.loc 1 1133 0
 2419 0d5e FB68     		ldr	r3, [r7, #12]
 2420 0d60 002B     		cmp	r3, #0
 2421 0d62 1AD1     		bne	.L156
1134:../tasks/SDMMC/ff.c **** 		dp->clust = clst;
 2422              		.loc 1 1134 0
 2423 0d64 7B68     		ldr	r3, [r7, #4]
 2424 0d66 FA68     		ldr	r2, [r7, #12]
 2425 0d68 C3F80C22 		str	r2, [r3, #524]
1135:../tasks/SDMMC/ff.c **** 		if (idx >= dp->fs->n_rootdir)		/* Index is out of range */
 2426              		.loc 1 1135 0
 2427 0d6c 7B68     		ldr	r3, [r7, #4]
 2428 0d6e D3F80032 		ldr	r3, [r3, #512]
 2429 0d72 B3F80832 		ldrh	r3, [r3, #520]
 2430 0d76 7A88     		ldrh	r2, [r7, #2]
 2431 0d78 9A42     		cmp	r2, r3
 2432 0d7a 01D3     		bcc	.L157
1136:../tasks/SDMMC/ff.c **** 			return FR_INT_ERR;
 2433              		.loc 1 1136 0
 2434 0d7c 0223     		movs	r3, #2
 2435 0d7e 56E0     		b	.L154
 2436              	.L157:
1137:../tasks/SDMMC/ff.c **** 		dp->sect = dp->fs->dirbase + idx / (SS(dp->fs) / SZ_DIR);	/* Sector# */
 2437              		.loc 1 1137 0
 2438 0d80 7B68     		ldr	r3, [r7, #4]
 2439 0d82 D3F80032 		ldr	r3, [r3, #512]
 2440 0d86 D3F82822 		ldr	r2, [r3, #552]
 2441 0d8a 7B88     		ldrh	r3, [r7, #2]
 2442 0d8c 1B09     		lsrs	r3, r3, #4
 2443 0d8e 9BB2     		uxth	r3, r3
 2444 0d90 1A44     		add	r2, r2, r3
 2445 0d92 7B68     		ldr	r3, [r7, #4]
 2446 0d94 C3F81022 		str	r2, [r3, #528]
 2447 0d98 3DE0     		b	.L158
 2448              	.L156:
1138:../tasks/SDMMC/ff.c **** 	}
1139:../tasks/SDMMC/ff.c **** 	else {				/* Dynamic table (sub-dirs or root-directory in FAT32) */
1140:../tasks/SDMMC/ff.c **** 		ic = SS(dp->fs) / SZ_DIR * dp->fs->csize;	/* Entries per cluster */
 2449              		.loc 1 1140 0
 2450 0d9a 7B68     		ldr	r3, [r7, #4]
 2451 0d9c D3F80032 		ldr	r3, [r3, #512]
 2452 0da0 93F80232 		ldrb	r3, [r3, #514]	@ zero_extendqisi2
 2453 0da4 1B01     		lsls	r3, r3, #4
 2454 0da6 7B81     		strh	r3, [r7, #10]	@ movhi
1141:../tasks/SDMMC/ff.c **** 		while (idx >= ic) {	/* Follow cluster chain */
 2455              		.loc 1 1141 0
 2456 0da8 1EE0     		b	.L159
 2457              	.L163:
1142:../tasks/SDMMC/ff.c **** 			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 2458              		.loc 1 1142 0
 2459 0daa 7B68     		ldr	r3, [r7, #4]
 2460 0dac D3F80032 		ldr	r3, [r3, #512]
 2461 0db0 1846     		mov	r0, r3
 2462 0db2 F968     		ldr	r1, [r7, #12]
 2463 0db4 FFF7FEFF 		bl	get_fat
 2464 0db8 F860     		str	r0, [r7, #12]
1143:../tasks/SDMMC/ff.c **** 			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 2465              		.loc 1 1143 0
 2466 0dba FB68     		ldr	r3, [r7, #12]
 2467 0dbc B3F1FF3F 		cmp	r3, #-1
 2468 0dc0 01D1     		bne	.L160
 2469              		.loc 1 1143 0 is_stmt 0 discriminator 1
 2470 0dc2 0123     		movs	r3, #1
 2471 0dc4 33E0     		b	.L154
 2472              	.L160:
1144:../tasks/SDMMC/ff.c **** 			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or int error */
 2473              		.loc 1 1144 0 is_stmt 1
 2474 0dc6 FB68     		ldr	r3, [r7, #12]
 2475 0dc8 012B     		cmp	r3, #1
 2476 0dca 07D9     		bls	.L161
 2477              		.loc 1 1144 0 is_stmt 0 discriminator 1
 2478 0dcc 7B68     		ldr	r3, [r7, #4]
 2479 0dce D3F80032 		ldr	r3, [r3, #512]
 2480 0dd2 D3F81822 		ldr	r2, [r3, #536]
 2481 0dd6 FB68     		ldr	r3, [r7, #12]
 2482 0dd8 9A42     		cmp	r2, r3
 2483 0dda 01D8     		bhi	.L162
 2484              	.L161:
1145:../tasks/SDMMC/ff.c **** 				return FR_INT_ERR;
 2485              		.loc 1 1145 0 is_stmt 1
 2486 0ddc 0223     		movs	r3, #2
 2487 0dde 26E0     		b	.L154
 2488              	.L162:
1146:../tasks/SDMMC/ff.c **** 			idx -= ic;
 2489              		.loc 1 1146 0
 2490 0de0 7A88     		ldrh	r2, [r7, #2]	@ movhi
 2491 0de2 7B89     		ldrh	r3, [r7, #10]	@ movhi
 2492 0de4 D31A     		subs	r3, r2, r3
 2493 0de6 7B80     		strh	r3, [r7, #2]	@ movhi
 2494              	.L159:
1141:../tasks/SDMMC/ff.c **** 			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 2495              		.loc 1 1141 0 discriminator 1
 2496 0de8 7A88     		ldrh	r2, [r7, #2]
 2497 0dea 7B89     		ldrh	r3, [r7, #10]
 2498 0dec 9A42     		cmp	r2, r3
 2499 0dee DCD2     		bcs	.L163
1147:../tasks/SDMMC/ff.c **** 		}
1148:../tasks/SDMMC/ff.c **** 		dp->clust = clst;
 2500              		.loc 1 1148 0
 2501 0df0 7B68     		ldr	r3, [r7, #4]
 2502 0df2 FA68     		ldr	r2, [r7, #12]
 2503 0df4 C3F80C22 		str	r2, [r3, #524]
1149:../tasks/SDMMC/ff.c **** 		dp->sect = clust2sect(dp->fs, clst) + idx / (SS(dp->fs) / SZ_DIR);	/* Sector# */
 2504              		.loc 1 1149 0
 2505 0df8 7B68     		ldr	r3, [r7, #4]
 2506 0dfa D3F80032 		ldr	r3, [r3, #512]
 2507 0dfe 1846     		mov	r0, r3
 2508 0e00 F968     		ldr	r1, [r7, #12]
 2509 0e02 FFF7FEFF 		bl	clust2sect
 2510 0e06 0246     		mov	r2, r0
 2511 0e08 7B88     		ldrh	r3, [r7, #2]
 2512 0e0a 1B09     		lsrs	r3, r3, #4
 2513 0e0c 9BB2     		uxth	r3, r3
 2514 0e0e 1A44     		add	r2, r2, r3
 2515 0e10 7B68     		ldr	r3, [r7, #4]
 2516 0e12 C3F81022 		str	r2, [r3, #528]
 2517              	.L158:
1150:../tasks/SDMMC/ff.c **** 	}
1151:../tasks/SDMMC/ff.c **** 
1152:../tasks/SDMMC/ff.c **** 	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sect
 2518              		.loc 1 1152 0
 2519 0e16 7B68     		ldr	r3, [r7, #4]
 2520 0e18 D3F80022 		ldr	r2, [r3, #512]
 2521 0e1c 7B88     		ldrh	r3, [r7, #2]
 2522 0e1e 03F00F03 		and	r3, r3, #15
 2523 0e22 5B01     		lsls	r3, r3, #5
 2524 0e24 1A44     		add	r2, r2, r3
 2525 0e26 7B68     		ldr	r3, [r7, #4]
 2526 0e28 C3F81422 		str	r2, [r3, #532]
1153:../tasks/SDMMC/ff.c **** 
1154:../tasks/SDMMC/ff.c **** 	return FR_OK;	/* Seek succeeded */
 2527              		.loc 1 1154 0
 2528 0e2c 0023     		movs	r3, #0
 2529              	.L154:
1155:../tasks/SDMMC/ff.c **** }
 2530              		.loc 1 1155 0
 2531 0e2e 1846     		mov	r0, r3
 2532 0e30 1037     		adds	r7, r7, #16
 2533 0e32 BD46     		mov	sp, r7
 2534              		@ sp needed
 2535 0e34 80BD     		pop	{r7, pc}
 2536              		.cfi_endproc
 2537              	.LFE73:
 2539 0e36 00BF     		.align	2
 2540              		.thumb
 2541              		.thumb_func
 2543              	dir_next:
 2544              	.LFB74:
1156:../tasks/SDMMC/ff.c **** 
1157:../tasks/SDMMC/ff.c **** 
1158:../tasks/SDMMC/ff.c **** 
1159:../tasks/SDMMC/ff.c **** 
1160:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
1161:../tasks/SDMMC/ff.c **** /* Directory handling - Move directory table index next                  */
1162:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
1163:../tasks/SDMMC/ff.c **** 
1164:../tasks/SDMMC/ff.c **** static
1165:../tasks/SDMMC/ff.c **** FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
1166:../tasks/SDMMC/ff.c **** 	DIR* dp,		/* Pointer to the directory object */
1167:../tasks/SDMMC/ff.c **** 	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
1168:../tasks/SDMMC/ff.c **** )
1169:../tasks/SDMMC/ff.c **** {
 2545              		.loc 1 1169 0
 2546              		.cfi_startproc
 2547              		@ args = 0, pretend = 0, frame = 16
 2548              		@ frame_needed = 1, uses_anonymous_args = 0
 2549 0e38 90B5     		push	{r4, r7, lr}
 2550              		.cfi_def_cfa_offset 12
 2551              		.cfi_offset 4, -12
 2552              		.cfi_offset 7, -8
 2553              		.cfi_offset 14, -4
 2554 0e3a 85B0     		sub	sp, sp, #20
 2555              		.cfi_def_cfa_offset 32
 2556 0e3c 00AF     		add	r7, sp, #0
 2557              		.cfi_def_cfa_register 7
 2558 0e3e 7860     		str	r0, [r7, #4]
 2559 0e40 3960     		str	r1, [r7]
1170:../tasks/SDMMC/ff.c **** 	DWORD clst;
1171:../tasks/SDMMC/ff.c **** 	WORD i;
1172:../tasks/SDMMC/ff.c **** 
1173:../tasks/SDMMC/ff.c **** 
1174:../tasks/SDMMC/ff.c **** 	i = dp->index + 1;
 2560              		.loc 1 1174 0
 2561 0e42 7B68     		ldr	r3, [r7, #4]
 2562 0e44 B3F80632 		ldrh	r3, [r3, #518]
 2563 0e48 0133     		adds	r3, r3, #1
 2564 0e4a 3B81     		strh	r3, [r7, #8]	@ movhi
1175:../tasks/SDMMC/ff.c **** 	if (!i || !dp->sect)	/* Report EOT when index has reached 65535 */
 2565              		.loc 1 1175 0
 2566 0e4c 3B89     		ldrh	r3, [r7, #8]
 2567 0e4e 002B     		cmp	r3, #0
 2568 0e50 04D0     		beq	.L165
 2569              		.loc 1 1175 0 is_stmt 0 discriminator 1
 2570 0e52 7B68     		ldr	r3, [r7, #4]
 2571 0e54 D3F81032 		ldr	r3, [r3, #528]
 2572 0e58 002B     		cmp	r3, #0
 2573 0e5a 01D1     		bne	.L166
 2574              	.L165:
1176:../tasks/SDMMC/ff.c **** 		return FR_NO_FILE;
 2575              		.loc 1 1176 0 is_stmt 1
 2576 0e5c 0423     		movs	r3, #4
 2577 0e5e DCE0     		b	.L167
 2578              	.L166:
1177:../tasks/SDMMC/ff.c **** 
1178:../tasks/SDMMC/ff.c **** 	if (!(i % (SS(dp->fs) / SZ_DIR))) {	/* Sector changed? */
 2579              		.loc 1 1178 0
 2580 0e60 3B89     		ldrh	r3, [r7, #8]	@ movhi
 2581 0e62 03F00F03 		and	r3, r3, #15
 2582 0e66 9BB2     		uxth	r3, r3
 2583 0e68 002B     		cmp	r3, #0
 2584 0e6a 40F0C680 		bne	.L168
1179:../tasks/SDMMC/ff.c **** 		dp->sect++;					/* Next sector */
 2585              		.loc 1 1179 0
 2586 0e6e 7B68     		ldr	r3, [r7, #4]
 2587 0e70 D3F81032 		ldr	r3, [r3, #528]
 2588 0e74 5A1C     		adds	r2, r3, #1
 2589 0e76 7B68     		ldr	r3, [r7, #4]
 2590 0e78 C3F81022 		str	r2, [r3, #528]
1180:../tasks/SDMMC/ff.c **** 
1181:../tasks/SDMMC/ff.c **** 		if (!dp->clust) {		/* Static table */
 2591              		.loc 1 1181 0
 2592 0e7c 7B68     		ldr	r3, [r7, #4]
 2593 0e7e D3F80C32 		ldr	r3, [r3, #524]
 2594 0e82 002B     		cmp	r3, #0
 2595 0e84 0AD1     		bne	.L169
1182:../tasks/SDMMC/ff.c **** 			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 2596              		.loc 1 1182 0
 2597 0e86 7B68     		ldr	r3, [r7, #4]
 2598 0e88 D3F80032 		ldr	r3, [r3, #512]
 2599 0e8c B3F80832 		ldrh	r3, [r3, #520]
 2600 0e90 3A89     		ldrh	r2, [r7, #8]
 2601 0e92 9A42     		cmp	r2, r3
 2602 0e94 C0F0B180 		bcc	.L168
1183:../tasks/SDMMC/ff.c **** 				return FR_NO_FILE;
 2603              		.loc 1 1183 0
 2604 0e98 0423     		movs	r3, #4
 2605 0e9a BEE0     		b	.L167
 2606              	.L169:
1184:../tasks/SDMMC/ff.c **** 		}
1185:../tasks/SDMMC/ff.c **** 		else {					/* Dynamic table */
1186:../tasks/SDMMC/ff.c **** 			if (((i / (SS(dp->fs) / SZ_DIR)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 2607              		.loc 1 1186 0
 2608 0e9c 3B89     		ldrh	r3, [r7, #8]
 2609 0e9e 1B09     		lsrs	r3, r3, #4
 2610 0ea0 9BB2     		uxth	r3, r3
 2611 0ea2 1A46     		mov	r2, r3
 2612 0ea4 7B68     		ldr	r3, [r7, #4]
 2613 0ea6 D3F80032 		ldr	r3, [r3, #512]
 2614 0eaa 93F80232 		ldrb	r3, [r3, #514]	@ zero_extendqisi2
 2615 0eae 013B     		subs	r3, r3, #1
 2616 0eb0 1340     		ands	r3, r3, r2
 2617 0eb2 002B     		cmp	r3, #0
 2618 0eb4 40F0A180 		bne	.L168
1187:../tasks/SDMMC/ff.c **** 				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 2619              		.loc 1 1187 0
 2620 0eb8 7B68     		ldr	r3, [r7, #4]
 2621 0eba D3F80022 		ldr	r2, [r3, #512]
 2622 0ebe 7B68     		ldr	r3, [r7, #4]
 2623 0ec0 D3F80C32 		ldr	r3, [r3, #524]
 2624 0ec4 1046     		mov	r0, r2
 2625 0ec6 1946     		mov	r1, r3
 2626 0ec8 FFF7FEFF 		bl	get_fat
 2627 0ecc F860     		str	r0, [r7, #12]
1188:../tasks/SDMMC/ff.c **** 				if (clst <= 1) return FR_INT_ERR;
 2628              		.loc 1 1188 0
 2629 0ece FB68     		ldr	r3, [r7, #12]
 2630 0ed0 012B     		cmp	r3, #1
 2631 0ed2 01D8     		bhi	.L170
 2632              		.loc 1 1188 0 is_stmt 0 discriminator 1
 2633 0ed4 0223     		movs	r3, #2
 2634 0ed6 A0E0     		b	.L167
 2635              	.L170:
1189:../tasks/SDMMC/ff.c **** 				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 2636              		.loc 1 1189 0 is_stmt 1
 2637 0ed8 FB68     		ldr	r3, [r7, #12]
 2638 0eda B3F1FF3F 		cmp	r3, #-1
 2639 0ede 01D1     		bne	.L171
 2640              		.loc 1 1189 0 is_stmt 0 discriminator 1
 2641 0ee0 0123     		movs	r3, #1
 2642 0ee2 9AE0     		b	.L167
 2643              	.L171:
1190:../tasks/SDMMC/ff.c **** 				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 2644              		.loc 1 1190 0 is_stmt 1
 2645 0ee4 7B68     		ldr	r3, [r7, #4]
 2646 0ee6 D3F80032 		ldr	r3, [r3, #512]
 2647 0eea D3F81822 		ldr	r2, [r3, #536]
 2648 0eee FB68     		ldr	r3, [r7, #12]
 2649 0ef0 9A42     		cmp	r2, r3
 2650 0ef2 73D8     		bhi	.L172
 2651              	.LBB2:
1191:../tasks/SDMMC/ff.c **** #if !_FS_READONLY
1192:../tasks/SDMMC/ff.c **** 					BYTE c;
1193:../tasks/SDMMC/ff.c **** 					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 2652              		.loc 1 1193 0
 2653 0ef4 3B68     		ldr	r3, [r7]
 2654 0ef6 002B     		cmp	r3, #0
 2655 0ef8 01D1     		bne	.L173
 2656              		.loc 1 1193 0 is_stmt 0 discriminator 1
 2657 0efa 0423     		movs	r3, #4
 2658 0efc 8DE0     		b	.L167
 2659              	.L173:
1194:../tasks/SDMMC/ff.c **** 					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 2660              		.loc 1 1194 0 is_stmt 1
 2661 0efe 7B68     		ldr	r3, [r7, #4]
 2662 0f00 D3F80022 		ldr	r2, [r3, #512]
 2663 0f04 7B68     		ldr	r3, [r7, #4]
 2664 0f06 D3F80C32 		ldr	r3, [r3, #524]
 2665 0f0a 1046     		mov	r0, r2
 2666 0f0c 1946     		mov	r1, r3
 2667 0f0e FFF72BFE 		bl	create_chain
 2668 0f12 F860     		str	r0, [r7, #12]
1195:../tasks/SDMMC/ff.c **** 					if (clst == 0) return FR_DENIED;			/* No free cluster */
 2669              		.loc 1 1195 0
 2670 0f14 FB68     		ldr	r3, [r7, #12]
 2671 0f16 002B     		cmp	r3, #0
 2672 0f18 01D1     		bne	.L174
 2673              		.loc 1 1195 0 is_stmt 0 discriminator 1
 2674 0f1a 0723     		movs	r3, #7
 2675 0f1c 7DE0     		b	.L167
 2676              	.L174:
1196:../tasks/SDMMC/ff.c **** 					if (clst == 1) return FR_INT_ERR;
 2677              		.loc 1 1196 0 is_stmt 1
 2678 0f1e FB68     		ldr	r3, [r7, #12]
 2679 0f20 012B     		cmp	r3, #1
 2680 0f22 01D1     		bne	.L175
 2681              		.loc 1 1196 0 is_stmt 0 discriminator 1
 2682 0f24 0223     		movs	r3, #2
 2683 0f26 78E0     		b	.L167
 2684              	.L175:
1197:../tasks/SDMMC/ff.c **** 					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 2685              		.loc 1 1197 0 is_stmt 1
 2686 0f28 FB68     		ldr	r3, [r7, #12]
 2687 0f2a B3F1FF3F 		cmp	r3, #-1
 2688 0f2e 01D1     		bne	.L176
 2689              		.loc 1 1197 0 is_stmt 0 discriminator 1
 2690 0f30 0123     		movs	r3, #1
 2691 0f32 72E0     		b	.L167
 2692              	.L176:
1198:../tasks/SDMMC/ff.c **** 					/* Clean-up stretched table */
1199:../tasks/SDMMC/ff.c **** 					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 2693              		.loc 1 1199 0 is_stmt 1
 2694 0f34 7B68     		ldr	r3, [r7, #4]
 2695 0f36 D3F80032 		ldr	r3, [r3, #512]
 2696 0f3a 1846     		mov	r0, r3
 2697 0f3c FFF7CAFA 		bl	sync_window
 2698 0f40 0346     		mov	r3, r0
 2699 0f42 002B     		cmp	r3, #0
 2700 0f44 01D0     		beq	.L177
 2701              		.loc 1 1199 0 is_stmt 0 discriminator 1
 2702 0f46 0123     		movs	r3, #1
 2703 0f48 67E0     		b	.L167
 2704              	.L177:
1200:../tasks/SDMMC/ff.c **** 					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 2705              		.loc 1 1200 0 is_stmt 1
 2706 0f4a 7B68     		ldr	r3, [r7, #4]
 2707 0f4c D3F80032 		ldr	r3, [r3, #512]
 2708 0f50 1846     		mov	r0, r3
 2709 0f52 0021     		movs	r1, #0
 2710 0f54 4FF40072 		mov	r2, #512
 2711 0f58 FFF770F8 		bl	mem_set
1201:../tasks/SDMMC/ff.c **** 					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 2712              		.loc 1 1201 0
 2713 0f5c 7B68     		ldr	r3, [r7, #4]
 2714 0f5e D3F80042 		ldr	r4, [r3, #512]
 2715 0f62 7B68     		ldr	r3, [r7, #4]
 2716 0f64 D3F80032 		ldr	r3, [r3, #512]
 2717 0f68 1846     		mov	r0, r3
 2718 0f6a F968     		ldr	r1, [r7, #12]
 2719 0f6c FFF7FEFF 		bl	clust2sect
 2720 0f70 0346     		mov	r3, r0
 2721 0f72 C4F83032 		str	r3, [r4, #560]
1202:../tasks/SDMMC/ff.c **** 					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 2722              		.loc 1 1202 0
 2723 0f76 0023     		movs	r3, #0
 2724 0f78 FB72     		strb	r3, [r7, #11]
 2725 0f7a 1BE0     		b	.L178
 2726              	.L180:
1203:../tasks/SDMMC/ff.c **** 						dp->fs->wflag = 1;
 2727              		.loc 1 1203 0
 2728 0f7c 7B68     		ldr	r3, [r7, #4]
 2729 0f7e D3F80032 		ldr	r3, [r3, #512]
 2730 0f82 0122     		movs	r2, #1
 2731 0f84 83F80422 		strb	r2, [r3, #516]
1204:../tasks/SDMMC/ff.c **** 						if (sync_window(dp->fs)) return FR_DISK_ERR;
 2732              		.loc 1 1204 0
 2733 0f88 7B68     		ldr	r3, [r7, #4]
 2734 0f8a D3F80032 		ldr	r3, [r3, #512]
 2735 0f8e 1846     		mov	r0, r3
 2736 0f90 FFF7A0FA 		bl	sync_window
 2737 0f94 0346     		mov	r3, r0
 2738 0f96 002B     		cmp	r3, #0
 2739 0f98 01D0     		beq	.L179
 2740              		.loc 1 1204 0 is_stmt 0 discriminator 1
 2741 0f9a 0123     		movs	r3, #1
 2742 0f9c 3DE0     		b	.L167
 2743              	.L179:
1205:../tasks/SDMMC/ff.c **** 						dp->fs->winsect++;
 2744              		.loc 1 1205 0 is_stmt 1
 2745 0f9e 7B68     		ldr	r3, [r7, #4]
 2746 0fa0 D3F80032 		ldr	r3, [r3, #512]
 2747 0fa4 D3F83022 		ldr	r2, [r3, #560]
 2748 0fa8 0132     		adds	r2, r2, #1
 2749 0faa C3F83022 		str	r2, [r3, #560]
1202:../tasks/SDMMC/ff.c **** 						dp->fs->wflag = 1;
 2750              		.loc 1 1202 0
 2751 0fae FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 2752 0fb0 0133     		adds	r3, r3, #1
 2753 0fb2 FB72     		strb	r3, [r7, #11]
 2754              	.L178:
1202:../tasks/SDMMC/ff.c **** 						dp->fs->wflag = 1;
 2755              		.loc 1 1202 0 is_stmt 0 discriminator 1
 2756 0fb4 7B68     		ldr	r3, [r7, #4]
 2757 0fb6 D3F80032 		ldr	r3, [r3, #512]
 2758 0fba 93F80232 		ldrb	r3, [r3, #514]	@ zero_extendqisi2
 2759 0fbe FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 2760 0fc0 9A42     		cmp	r2, r3
 2761 0fc2 DBD3     		bcc	.L180
1206:../tasks/SDMMC/ff.c **** 					}
1207:../tasks/SDMMC/ff.c **** 					dp->fs->winsect -= c;						/* Rewind window offset */
 2762              		.loc 1 1207 0 is_stmt 1
 2763 0fc4 7B68     		ldr	r3, [r7, #4]
 2764 0fc6 D3F80032 		ldr	r3, [r3, #512]
 2765 0fca 7A68     		ldr	r2, [r7, #4]
 2766 0fcc D2F80022 		ldr	r2, [r2, #512]
 2767 0fd0 D2F83012 		ldr	r1, [r2, #560]
 2768 0fd4 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 2769 0fd6 8A1A     		subs	r2, r1, r2
 2770 0fd8 C3F83022 		str	r2, [r3, #560]
 2771              	.L172:
 2772              	.LBE2:
1208:../tasks/SDMMC/ff.c **** #else
1209:../tasks/SDMMC/ff.c **** 					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
1210:../tasks/SDMMC/ff.c **** 					return FR_NO_FILE;							/* Report EOT */
1211:../tasks/SDMMC/ff.c **** #endif
1212:../tasks/SDMMC/ff.c **** 				}
1213:../tasks/SDMMC/ff.c **** 				dp->clust = clst;				/* Initialize data for new cluster */
 2773              		.loc 1 1213 0
 2774 0fdc 7B68     		ldr	r3, [r7, #4]
 2775 0fde FA68     		ldr	r2, [r7, #12]
 2776 0fe0 C3F80C22 		str	r2, [r3, #524]
1214:../tasks/SDMMC/ff.c **** 				dp->sect = clust2sect(dp->fs, clst);
 2777              		.loc 1 1214 0
 2778 0fe4 7B68     		ldr	r3, [r7, #4]
 2779 0fe6 D3F80032 		ldr	r3, [r3, #512]
 2780 0fea 1846     		mov	r0, r3
 2781 0fec F968     		ldr	r1, [r7, #12]
 2782 0fee FFF7FEFF 		bl	clust2sect
 2783 0ff2 0246     		mov	r2, r0
 2784 0ff4 7B68     		ldr	r3, [r7, #4]
 2785 0ff6 C3F81022 		str	r2, [r3, #528]
 2786              	.L168:
1215:../tasks/SDMMC/ff.c **** 			}
1216:../tasks/SDMMC/ff.c **** 		}
1217:../tasks/SDMMC/ff.c **** 	}
1218:../tasks/SDMMC/ff.c **** 
1219:../tasks/SDMMC/ff.c **** 	dp->index = i;	/* Current index */
 2787              		.loc 1 1219 0
 2788 0ffa 7B68     		ldr	r3, [r7, #4]
 2789 0ffc 3A89     		ldrh	r2, [r7, #8]	@ movhi
 2790 0ffe A3F80622 		strh	r2, [r3, #518]	@ movhi
1220:../tasks/SDMMC/ff.c **** 	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIR)) * SZ_DIR;	/* Current entry in the window */
 2791              		.loc 1 1220 0
 2792 1002 7B68     		ldr	r3, [r7, #4]
 2793 1004 D3F80022 		ldr	r2, [r3, #512]
 2794 1008 3B89     		ldrh	r3, [r7, #8]
 2795 100a 03F00F03 		and	r3, r3, #15
 2796 100e 5B01     		lsls	r3, r3, #5
 2797 1010 1A44     		add	r2, r2, r3
 2798 1012 7B68     		ldr	r3, [r7, #4]
 2799 1014 C3F81422 		str	r2, [r3, #532]
1221:../tasks/SDMMC/ff.c **** 
1222:../tasks/SDMMC/ff.c **** 	return FR_OK;
 2800              		.loc 1 1222 0
 2801 1018 0023     		movs	r3, #0
 2802              	.L167:
1223:../tasks/SDMMC/ff.c **** }
 2803              		.loc 1 1223 0
 2804 101a 1846     		mov	r0, r3
 2805 101c 1437     		adds	r7, r7, #20
 2806 101e BD46     		mov	sp, r7
 2807              		@ sp needed
 2808 1020 90BD     		pop	{r4, r7, pc}
 2809              		.cfi_endproc
 2810              	.LFE74:
 2812 1022 00BF     		.align	2
 2813              		.thumb
 2814              		.thumb_func
 2816              	dir_alloc:
 2817              	.LFB75:
1224:../tasks/SDMMC/ff.c **** 
1225:../tasks/SDMMC/ff.c **** 
1226:../tasks/SDMMC/ff.c **** 
1227:../tasks/SDMMC/ff.c **** 
1228:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
1229:../tasks/SDMMC/ff.c **** /* Directory handling - Reserve directory entry                          */
1230:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
1231:../tasks/SDMMC/ff.c **** 
1232:../tasks/SDMMC/ff.c **** #if !_FS_READONLY
1233:../tasks/SDMMC/ff.c **** static
1234:../tasks/SDMMC/ff.c **** FRESULT dir_alloc (
1235:../tasks/SDMMC/ff.c **** 	DIR* dp,	/* Pointer to the directory object */
1236:../tasks/SDMMC/ff.c **** 	UINT nent	/* Number of contiguous entries to allocate (1-21) */
1237:../tasks/SDMMC/ff.c **** )
1238:../tasks/SDMMC/ff.c **** {
 2818              		.loc 1 1238 0
 2819              		.cfi_startproc
 2820              		@ args = 0, pretend = 0, frame = 16
 2821              		@ frame_needed = 1, uses_anonymous_args = 0
 2822 1024 80B5     		push	{r7, lr}
 2823              		.cfi_def_cfa_offset 8
 2824              		.cfi_offset 7, -8
 2825              		.cfi_offset 14, -4
 2826 1026 84B0     		sub	sp, sp, #16
 2827              		.cfi_def_cfa_offset 24
 2828 1028 00AF     		add	r7, sp, #0
 2829              		.cfi_def_cfa_register 7
 2830 102a 7860     		str	r0, [r7, #4]
 2831 102c 3960     		str	r1, [r7]
1239:../tasks/SDMMC/ff.c **** 	FRESULT res;
1240:../tasks/SDMMC/ff.c **** 	UINT n;
1241:../tasks/SDMMC/ff.c **** 
1242:../tasks/SDMMC/ff.c **** 
1243:../tasks/SDMMC/ff.c **** 	res = dir_sdi(dp, 0);
 2832              		.loc 1 1243 0
 2833 102e 7868     		ldr	r0, [r7, #4]
 2834 1030 0021     		movs	r1, #0
 2835 1032 FFF769FE 		bl	dir_sdi
 2836 1036 0346     		mov	r3, r0
 2837 1038 FB73     		strb	r3, [r7, #15]
1244:../tasks/SDMMC/ff.c **** 	if (res == FR_OK) {
 2838              		.loc 1 1244 0
 2839 103a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2840 103c 002B     		cmp	r3, #0
 2841 103e 31D1     		bne	.L182
1245:../tasks/SDMMC/ff.c **** 		n = 0;
 2842              		.loc 1 1245 0
 2843 1040 0023     		movs	r3, #0
 2844 1042 BB60     		str	r3, [r7, #8]
 2845              	.L188:
1246:../tasks/SDMMC/ff.c **** 		do {
1247:../tasks/SDMMC/ff.c **** 			res = move_window(dp->fs, dp->sect);
 2846              		.loc 1 1247 0
 2847 1044 7B68     		ldr	r3, [r7, #4]
 2848 1046 D3F80022 		ldr	r2, [r3, #512]
 2849 104a 7B68     		ldr	r3, [r7, #4]
 2850 104c D3F81032 		ldr	r3, [r3, #528]
 2851 1050 1046     		mov	r0, r2
 2852 1052 1946     		mov	r1, r3
 2853 1054 FFF788FA 		bl	move_window
 2854 1058 0346     		mov	r3, r0
 2855 105a FB73     		strb	r3, [r7, #15]
1248:../tasks/SDMMC/ff.c **** 			if (res != FR_OK) break;
 2856              		.loc 1 1248 0
 2857 105c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2858 105e 002B     		cmp	r3, #0
 2859 1060 00D0     		beq	.L183
 2860              		.loc 1 1248 0 is_stmt 0 discriminator 1
 2861 1062 1FE0     		b	.L182
 2862              	.L183:
1249:../tasks/SDMMC/ff.c **** 			if (dp->dir[0] == DDE || dp->dir[0] == 0) {	/* Is it a blank entry? */
 2863              		.loc 1 1249 0 is_stmt 1
 2864 1064 7B68     		ldr	r3, [r7, #4]
 2865 1066 D3F81432 		ldr	r3, [r3, #532]
 2866 106a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2867 106c E52B     		cmp	r3, #229
 2868 106e 05D0     		beq	.L184
 2869              		.loc 1 1249 0 is_stmt 0 discriminator 1
 2870 1070 7B68     		ldr	r3, [r7, #4]
 2871 1072 D3F81432 		ldr	r3, [r3, #532]
 2872 1076 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2873 1078 002B     		cmp	r3, #0
 2874 107a 08D1     		bne	.L185
 2875              	.L184:
1250:../tasks/SDMMC/ff.c **** 				if (++n == nent) break;	/* A block of contiguous entries is found */
 2876              		.loc 1 1250 0 is_stmt 1
 2877 107c BB68     		ldr	r3, [r7, #8]
 2878 107e 0133     		adds	r3, r3, #1
 2879 1080 BB60     		str	r3, [r7, #8]
 2880 1082 BA68     		ldr	r2, [r7, #8]
 2881 1084 3B68     		ldr	r3, [r7]
 2882 1086 9A42     		cmp	r2, r3
 2883 1088 00D1     		bne	.L186
 2884              		.loc 1 1250 0 is_stmt 0 discriminator 1
 2885 108a 0BE0     		b	.L182
 2886              	.L186:
 2887              		.loc 1 1250 0 discriminator 2
 2888 108c 01E0     		b	.L187
 2889              	.L185:
1251:../tasks/SDMMC/ff.c **** 			} else {
1252:../tasks/SDMMC/ff.c **** 				n = 0;					/* Not a blank entry. Restart to search */
 2890              		.loc 1 1252 0 is_stmt 1
 2891 108e 0023     		movs	r3, #0
 2892 1090 BB60     		str	r3, [r7, #8]
 2893              	.L187:
1253:../tasks/SDMMC/ff.c **** 			}
1254:../tasks/SDMMC/ff.c **** 			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 2894              		.loc 1 1254 0
 2895 1092 7868     		ldr	r0, [r7, #4]
 2896 1094 0121     		movs	r1, #1
 2897 1096 FFF7CFFE 		bl	dir_next
 2898 109a 0346     		mov	r3, r0
 2899 109c FB73     		strb	r3, [r7, #15]
1255:../tasks/SDMMC/ff.c **** 		} while (res == FR_OK);
 2900              		.loc 1 1255 0
 2901 109e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2902 10a0 002B     		cmp	r3, #0
 2903 10a2 CFD0     		beq	.L188
 2904              	.L182:
1256:../tasks/SDMMC/ff.c **** 	}
1257:../tasks/SDMMC/ff.c **** 	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 2905              		.loc 1 1257 0
 2906 10a4 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2907 10a6 042B     		cmp	r3, #4
 2908 10a8 01D1     		bne	.L189
 2909              		.loc 1 1257 0 is_stmt 0 discriminator 1
 2910 10aa 0723     		movs	r3, #7
 2911 10ac FB73     		strb	r3, [r7, #15]
 2912              	.L189:
1258:../tasks/SDMMC/ff.c **** 	return res;
 2913              		.loc 1 1258 0 is_stmt 1
 2914 10ae FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1259:../tasks/SDMMC/ff.c **** }
 2915              		.loc 1 1259 0
 2916 10b0 1846     		mov	r0, r3
 2917 10b2 1037     		adds	r7, r7, #16
 2918 10b4 BD46     		mov	sp, r7
 2919              		@ sp needed
 2920 10b6 80BD     		pop	{r7, pc}
 2921              		.cfi_endproc
 2922              	.LFE75:
 2924              		.align	2
 2925              		.thumb
 2926              		.thumb_func
 2928              	ld_clust:
 2929              	.LFB76:
1260:../tasks/SDMMC/ff.c **** #endif
1261:../tasks/SDMMC/ff.c **** 
1262:../tasks/SDMMC/ff.c **** 
1263:../tasks/SDMMC/ff.c **** 
1264:../tasks/SDMMC/ff.c **** 
1265:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
1266:../tasks/SDMMC/ff.c **** /* Directory handling - Load/Store start cluster number                  */
1267:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
1268:../tasks/SDMMC/ff.c **** 
1269:../tasks/SDMMC/ff.c **** static
1270:../tasks/SDMMC/ff.c **** DWORD ld_clust (
1271:../tasks/SDMMC/ff.c **** 	FATFS* fs,	/* Pointer to the fs object */
1272:../tasks/SDMMC/ff.c **** 	BYTE* dir	/* Pointer to the directory entry */
1273:../tasks/SDMMC/ff.c **** )
1274:../tasks/SDMMC/ff.c **** {
 2930              		.loc 1 1274 0
 2931              		.cfi_startproc
 2932              		@ args = 0, pretend = 0, frame = 16
 2933              		@ frame_needed = 1, uses_anonymous_args = 0
 2934              		@ link register save eliminated.
 2935 10b8 80B4     		push	{r7}
 2936              		.cfi_def_cfa_offset 4
 2937              		.cfi_offset 7, -4
 2938 10ba 85B0     		sub	sp, sp, #20
 2939              		.cfi_def_cfa_offset 24
 2940 10bc 00AF     		add	r7, sp, #0
 2941              		.cfi_def_cfa_register 7
 2942 10be 7860     		str	r0, [r7, #4]
 2943 10c0 3960     		str	r1, [r7]
1275:../tasks/SDMMC/ff.c **** 	DWORD cl;
1276:../tasks/SDMMC/ff.c **** 
1277:../tasks/SDMMC/ff.c **** 	cl = LD_WORD(dir+DIR_FstClusLO);
 2944              		.loc 1 1277 0
 2945 10c2 3B68     		ldr	r3, [r7]
 2946 10c4 1B33     		adds	r3, r3, #27
 2947 10c6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2948 10c8 1B02     		lsls	r3, r3, #8
 2949 10ca 9AB2     		uxth	r2, r3
 2950 10cc 3B68     		ldr	r3, [r7]
 2951 10ce 1A33     		adds	r3, r3, #26
 2952 10d0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2953 10d2 1343     		orrs	r3, r3, r2
 2954 10d4 9BB2     		uxth	r3, r3
 2955 10d6 9BB2     		uxth	r3, r3
 2956 10d8 FB60     		str	r3, [r7, #12]
1278:../tasks/SDMMC/ff.c **** 	if (fs->fs_type == FS_FAT32)
 2957              		.loc 1 1278 0
 2958 10da 7B68     		ldr	r3, [r7, #4]
 2959 10dc 93F80032 		ldrb	r3, [r3, #512]	@ zero_extendqisi2
 2960 10e0 032B     		cmp	r3, #3
 2961 10e2 0ED1     		bne	.L192
1279:../tasks/SDMMC/ff.c **** 		cl |= (DWORD)LD_WORD(dir+DIR_FstClusHI) << 16;
 2962              		.loc 1 1279 0
 2963 10e4 3B68     		ldr	r3, [r7]
 2964 10e6 1533     		adds	r3, r3, #21
 2965 10e8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2966 10ea 1B02     		lsls	r3, r3, #8
 2967 10ec 9AB2     		uxth	r2, r3
 2968 10ee 3B68     		ldr	r3, [r7]
 2969 10f0 1433     		adds	r3, r3, #20
 2970 10f2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2971 10f4 1343     		orrs	r3, r3, r2
 2972 10f6 9BB2     		uxth	r3, r3
 2973 10f8 9BB2     		uxth	r3, r3
 2974 10fa 1B04     		lsls	r3, r3, #16
 2975 10fc FA68     		ldr	r2, [r7, #12]
 2976 10fe 1343     		orrs	r3, r3, r2
 2977 1100 FB60     		str	r3, [r7, #12]
 2978              	.L192:
1280:../tasks/SDMMC/ff.c **** 
1281:../tasks/SDMMC/ff.c **** 	return cl;
 2979              		.loc 1 1281 0
 2980 1102 FB68     		ldr	r3, [r7, #12]
1282:../tasks/SDMMC/ff.c **** }
 2981              		.loc 1 1282 0
 2982 1104 1846     		mov	r0, r3
 2983 1106 1437     		adds	r7, r7, #20
 2984 1108 BD46     		mov	sp, r7
 2985              		@ sp needed
 2986 110a 5DF8047B 		ldr	r7, [sp], #4
 2987 110e 7047     		bx	lr
 2988              		.cfi_endproc
 2989              	.LFE76:
 2991              		.align	2
 2992              		.thumb
 2993              		.thumb_func
 2995              	st_clust:
 2996              	.LFB77:
1283:../tasks/SDMMC/ff.c **** 
1284:../tasks/SDMMC/ff.c **** 
1285:../tasks/SDMMC/ff.c **** #if !_FS_READONLY
1286:../tasks/SDMMC/ff.c **** static
1287:../tasks/SDMMC/ff.c **** void st_clust (
1288:../tasks/SDMMC/ff.c **** 	BYTE* dir,	/* Pointer to the directory entry */
1289:../tasks/SDMMC/ff.c **** 	DWORD cl	/* Value to be set */
1290:../tasks/SDMMC/ff.c **** )
1291:../tasks/SDMMC/ff.c **** {
 2997              		.loc 1 1291 0
 2998              		.cfi_startproc
 2999              		@ args = 0, pretend = 0, frame = 8
 3000              		@ frame_needed = 1, uses_anonymous_args = 0
 3001              		@ link register save eliminated.
 3002 1110 80B4     		push	{r7}
 3003              		.cfi_def_cfa_offset 4
 3004              		.cfi_offset 7, -4
 3005 1112 83B0     		sub	sp, sp, #12
 3006              		.cfi_def_cfa_offset 16
 3007 1114 00AF     		add	r7, sp, #0
 3008              		.cfi_def_cfa_register 7
 3009 1116 7860     		str	r0, [r7, #4]
 3010 1118 3960     		str	r1, [r7]
1292:../tasks/SDMMC/ff.c **** 	ST_WORD(dir+DIR_FstClusLO, cl);
 3011              		.loc 1 1292 0
 3012 111a 7B68     		ldr	r3, [r7, #4]
 3013 111c 1A33     		adds	r3, r3, #26
 3014 111e 3A68     		ldr	r2, [r7]
 3015 1120 D2B2     		uxtb	r2, r2
 3016 1122 1A70     		strb	r2, [r3]
 3017 1124 7B68     		ldr	r3, [r7, #4]
 3018 1126 1B33     		adds	r3, r3, #27
 3019 1128 3A68     		ldr	r2, [r7]
 3020 112a 92B2     		uxth	r2, r2
 3021 112c 120A     		lsrs	r2, r2, #8
 3022 112e 92B2     		uxth	r2, r2
 3023 1130 D2B2     		uxtb	r2, r2
 3024 1132 1A70     		strb	r2, [r3]
1293:../tasks/SDMMC/ff.c **** 	ST_WORD(dir+DIR_FstClusHI, cl >> 16);
 3025              		.loc 1 1293 0
 3026 1134 7B68     		ldr	r3, [r7, #4]
 3027 1136 1433     		adds	r3, r3, #20
 3028 1138 3A68     		ldr	r2, [r7]
 3029 113a 120C     		lsrs	r2, r2, #16
 3030 113c D2B2     		uxtb	r2, r2
 3031 113e 1A70     		strb	r2, [r3]
 3032 1140 7B68     		ldr	r3, [r7, #4]
 3033 1142 1533     		adds	r3, r3, #21
 3034 1144 3A68     		ldr	r2, [r7]
 3035 1146 120C     		lsrs	r2, r2, #16
 3036 1148 92B2     		uxth	r2, r2
 3037 114a 120A     		lsrs	r2, r2, #8
 3038 114c 92B2     		uxth	r2, r2
 3039 114e D2B2     		uxtb	r2, r2
 3040 1150 1A70     		strb	r2, [r3]
1294:../tasks/SDMMC/ff.c **** }
 3041              		.loc 1 1294 0
 3042 1152 0C37     		adds	r7, r7, #12
 3043 1154 BD46     		mov	sp, r7
 3044              		@ sp needed
 3045 1156 5DF8047B 		ldr	r7, [sp], #4
 3046 115a 7047     		bx	lr
 3047              		.cfi_endproc
 3048              	.LFE77:
 3050              		.align	2
 3051              		.thumb
 3052              		.thumb_func
 3054              	dir_find:
 3055              	.LFB78:
1295:../tasks/SDMMC/ff.c **** #endif
1296:../tasks/SDMMC/ff.c **** 
1297:../tasks/SDMMC/ff.c **** 
1298:../tasks/SDMMC/ff.c **** 
1299:../tasks/SDMMC/ff.c **** 
1300:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
1301:../tasks/SDMMC/ff.c **** /* LFN handling - Test/Pick/Fit an LFN segment from/to directory entry   */
1302:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
1303:../tasks/SDMMC/ff.c **** #if _USE_LFN
1304:../tasks/SDMMC/ff.c **** static
1305:../tasks/SDMMC/ff.c **** const BYTE LfnOfs[] = {1,3,5,7,9,14,16,18,20,22,24,28,30};	/* Offset of LFN characters in the direc
1306:../tasks/SDMMC/ff.c **** 
1307:../tasks/SDMMC/ff.c **** 
1308:../tasks/SDMMC/ff.c **** static
1309:../tasks/SDMMC/ff.c **** int cmp_lfn (			/* 1:Matched, 0:Not matched */
1310:../tasks/SDMMC/ff.c **** 	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
1311:../tasks/SDMMC/ff.c **** 	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
1312:../tasks/SDMMC/ff.c **** )
1313:../tasks/SDMMC/ff.c **** {
1314:../tasks/SDMMC/ff.c **** 	UINT i, s;
1315:../tasks/SDMMC/ff.c **** 	WCHAR wc, uc;
1316:../tasks/SDMMC/ff.c **** 
1317:../tasks/SDMMC/ff.c **** 
1318:../tasks/SDMMC/ff.c **** 	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
1319:../tasks/SDMMC/ff.c **** 	s = 0; wc = 1;
1320:../tasks/SDMMC/ff.c **** 	do {
1321:../tasks/SDMMC/ff.c **** 		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
1322:../tasks/SDMMC/ff.c **** 		if (wc) {	/* Last character has not been processed */
1323:../tasks/SDMMC/ff.c **** 			wc = ff_wtoupper(uc);		/* Convert it to upper case */
1324:../tasks/SDMMC/ff.c **** 			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
1325:../tasks/SDMMC/ff.c **** 				return 0;				/* Not matched */
1326:../tasks/SDMMC/ff.c **** 		} else {
1327:../tasks/SDMMC/ff.c **** 			if (uc != 0xFFFF) return 0;	/* Check filler */
1328:../tasks/SDMMC/ff.c **** 		}
1329:../tasks/SDMMC/ff.c **** 	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
1330:../tasks/SDMMC/ff.c **** 
1331:../tasks/SDMMC/ff.c **** 	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
1332:../tasks/SDMMC/ff.c **** 		return 0;
1333:../tasks/SDMMC/ff.c **** 
1334:../tasks/SDMMC/ff.c **** 	return 1;						/* The part of LFN matched */
1335:../tasks/SDMMC/ff.c **** }
1336:../tasks/SDMMC/ff.c **** 
1337:../tasks/SDMMC/ff.c **** 
1338:../tasks/SDMMC/ff.c **** 
1339:../tasks/SDMMC/ff.c **** static
1340:../tasks/SDMMC/ff.c **** int pick_lfn (			/* 1:Succeeded, 0:Buffer overflow */
1341:../tasks/SDMMC/ff.c **** 	WCHAR* lfnbuf,		/* Pointer to the Unicode-LFN buffer */
1342:../tasks/SDMMC/ff.c **** 	BYTE* dir			/* Pointer to the directory entry */
1343:../tasks/SDMMC/ff.c **** )
1344:../tasks/SDMMC/ff.c **** {
1345:../tasks/SDMMC/ff.c **** 	UINT i, s;
1346:../tasks/SDMMC/ff.c **** 	WCHAR wc, uc;
1347:../tasks/SDMMC/ff.c **** 
1348:../tasks/SDMMC/ff.c **** 
1349:../tasks/SDMMC/ff.c **** 	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
1350:../tasks/SDMMC/ff.c **** 
1351:../tasks/SDMMC/ff.c **** 	s = 0; wc = 1;
1352:../tasks/SDMMC/ff.c **** 	do {
1353:../tasks/SDMMC/ff.c **** 		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
1354:../tasks/SDMMC/ff.c **** 		if (wc) {	/* Last character has not been processed */
1355:../tasks/SDMMC/ff.c **** 			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
1356:../tasks/SDMMC/ff.c **** 			lfnbuf[i++] = wc = uc;			/* Store it */
1357:../tasks/SDMMC/ff.c **** 		} else {
1358:../tasks/SDMMC/ff.c **** 			if (uc != 0xFFFF) return 0;		/* Check filler */
1359:../tasks/SDMMC/ff.c **** 		}
1360:../tasks/SDMMC/ff.c **** 	} while (++s < 13);						/* Read all character in the entry */
1361:../tasks/SDMMC/ff.c **** 
1362:../tasks/SDMMC/ff.c **** 	if (dir[LDIR_Ord] & LLE) {				/* Put terminator if it is the last LFN part */
1363:../tasks/SDMMC/ff.c **** 		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
1364:../tasks/SDMMC/ff.c **** 		lfnbuf[i] = 0;
1365:../tasks/SDMMC/ff.c **** 	}
1366:../tasks/SDMMC/ff.c **** 
1367:../tasks/SDMMC/ff.c **** 	return 1;
1368:../tasks/SDMMC/ff.c **** }
1369:../tasks/SDMMC/ff.c **** 
1370:../tasks/SDMMC/ff.c **** 
1371:../tasks/SDMMC/ff.c **** #if !_FS_READONLY
1372:../tasks/SDMMC/ff.c **** static
1373:../tasks/SDMMC/ff.c **** void fit_lfn (
1374:../tasks/SDMMC/ff.c **** 	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
1375:../tasks/SDMMC/ff.c **** 	BYTE* dir,				/* Pointer to the directory entry */
1376:../tasks/SDMMC/ff.c **** 	BYTE ord,				/* LFN order (1-20) */
1377:../tasks/SDMMC/ff.c **** 	BYTE sum				/* SFN sum */
1378:../tasks/SDMMC/ff.c **** )
1379:../tasks/SDMMC/ff.c **** {
1380:../tasks/SDMMC/ff.c **** 	UINT i, s;
1381:../tasks/SDMMC/ff.c **** 	WCHAR wc;
1382:../tasks/SDMMC/ff.c **** 
1383:../tasks/SDMMC/ff.c **** 
1384:../tasks/SDMMC/ff.c **** 	dir[LDIR_Chksum] = sum;			/* Set check sum */
1385:../tasks/SDMMC/ff.c **** 	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
1386:../tasks/SDMMC/ff.c **** 	dir[LDIR_Type] = 0;
1387:../tasks/SDMMC/ff.c **** 	ST_WORD(dir+LDIR_FstClusLO, 0);
1388:../tasks/SDMMC/ff.c **** 
1389:../tasks/SDMMC/ff.c **** 	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
1390:../tasks/SDMMC/ff.c **** 	s = wc = 0;
1391:../tasks/SDMMC/ff.c **** 	do {
1392:../tasks/SDMMC/ff.c **** 		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
1393:../tasks/SDMMC/ff.c **** 		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
1394:../tasks/SDMMC/ff.c **** 		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
1395:../tasks/SDMMC/ff.c **** 	} while (++s < 13);
1396:../tasks/SDMMC/ff.c **** 	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
1397:../tasks/SDMMC/ff.c **** 	dir[LDIR_Ord] = ord;			/* Set the LFN order */
1398:../tasks/SDMMC/ff.c **** }
1399:../tasks/SDMMC/ff.c **** 
1400:../tasks/SDMMC/ff.c **** #endif
1401:../tasks/SDMMC/ff.c **** #endif
1402:../tasks/SDMMC/ff.c **** 
1403:../tasks/SDMMC/ff.c **** 
1404:../tasks/SDMMC/ff.c **** 
1405:../tasks/SDMMC/ff.c **** 
1406:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
1407:../tasks/SDMMC/ff.c **** /* Create numbered name                                                  */
1408:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
1409:../tasks/SDMMC/ff.c **** #if _USE_LFN
1410:../tasks/SDMMC/ff.c **** void gen_numname (
1411:../tasks/SDMMC/ff.c **** 	BYTE* dst,			/* Pointer to generated SFN */
1412:../tasks/SDMMC/ff.c **** 	const BYTE* src,	/* Pointer to source SFN to be modified */
1413:../tasks/SDMMC/ff.c **** 	const WCHAR* lfn,	/* Pointer to LFN */
1414:../tasks/SDMMC/ff.c **** 	WORD seq			/* Sequence number */
1415:../tasks/SDMMC/ff.c **** )
1416:../tasks/SDMMC/ff.c **** {
1417:../tasks/SDMMC/ff.c **** 	BYTE ns[8], c;
1418:../tasks/SDMMC/ff.c **** 	UINT i, j;
1419:../tasks/SDMMC/ff.c **** 
1420:../tasks/SDMMC/ff.c **** 
1421:../tasks/SDMMC/ff.c **** 	mem_cpy(dst, src, 11);
1422:../tasks/SDMMC/ff.c **** 
1423:../tasks/SDMMC/ff.c **** 	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
1424:../tasks/SDMMC/ff.c **** 		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
1425:../tasks/SDMMC/ff.c **** 	}
1426:../tasks/SDMMC/ff.c **** 
1427:../tasks/SDMMC/ff.c **** 	/* itoa (hexdecimal) */
1428:../tasks/SDMMC/ff.c **** 	i = 7;
1429:../tasks/SDMMC/ff.c **** 	do {
1430:../tasks/SDMMC/ff.c **** 		c = (seq % 16) + '0';
1431:../tasks/SDMMC/ff.c **** 		if (c > '9') c += 7;
1432:../tasks/SDMMC/ff.c **** 		ns[i--] = c;
1433:../tasks/SDMMC/ff.c **** 		seq /= 16;
1434:../tasks/SDMMC/ff.c **** 	} while (seq);
1435:../tasks/SDMMC/ff.c **** 	ns[i] = '~';
1436:../tasks/SDMMC/ff.c **** 
1437:../tasks/SDMMC/ff.c **** 	/* Append the number */
1438:../tasks/SDMMC/ff.c **** 	for (j = 0; j < i && dst[j] != ' '; j++) {
1439:../tasks/SDMMC/ff.c **** 		if (IsDBCS1(dst[j])) {
1440:../tasks/SDMMC/ff.c **** 			if (j == i - 1) break;
1441:../tasks/SDMMC/ff.c **** 			j++;
1442:../tasks/SDMMC/ff.c **** 		}
1443:../tasks/SDMMC/ff.c **** 	}
1444:../tasks/SDMMC/ff.c **** 	do {
1445:../tasks/SDMMC/ff.c **** 		dst[j++] = (i < 8) ? ns[i++] : ' ';
1446:../tasks/SDMMC/ff.c **** 	} while (j < 8);
1447:../tasks/SDMMC/ff.c **** }
1448:../tasks/SDMMC/ff.c **** #endif
1449:../tasks/SDMMC/ff.c **** 
1450:../tasks/SDMMC/ff.c **** 
1451:../tasks/SDMMC/ff.c **** 
1452:../tasks/SDMMC/ff.c **** 
1453:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
1454:../tasks/SDMMC/ff.c **** /* Calculate sum of an SFN                                               */
1455:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
1456:../tasks/SDMMC/ff.c **** #if _USE_LFN
1457:../tasks/SDMMC/ff.c **** static
1458:../tasks/SDMMC/ff.c **** BYTE sum_sfn (
1459:../tasks/SDMMC/ff.c **** 	const BYTE* dir		/* Pointer to the SFN entry */
1460:../tasks/SDMMC/ff.c **** )
1461:../tasks/SDMMC/ff.c **** {
1462:../tasks/SDMMC/ff.c **** 	BYTE sum = 0;
1463:../tasks/SDMMC/ff.c **** 	UINT n = 11;
1464:../tasks/SDMMC/ff.c **** 
1465:../tasks/SDMMC/ff.c **** 	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
1466:../tasks/SDMMC/ff.c **** 	return sum;
1467:../tasks/SDMMC/ff.c **** }
1468:../tasks/SDMMC/ff.c **** #endif
1469:../tasks/SDMMC/ff.c **** 
1470:../tasks/SDMMC/ff.c **** 
1471:../tasks/SDMMC/ff.c **** 
1472:../tasks/SDMMC/ff.c **** 
1473:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
1474:../tasks/SDMMC/ff.c **** /* Directory handling - Find an object in the directory                  */
1475:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
1476:../tasks/SDMMC/ff.c **** 
1477:../tasks/SDMMC/ff.c **** static
1478:../tasks/SDMMC/ff.c **** FRESULT dir_find (
1479:../tasks/SDMMC/ff.c **** 	DIR* dp			/* Pointer to the directory object linked to the file name */
1480:../tasks/SDMMC/ff.c **** )
1481:../tasks/SDMMC/ff.c **** {
 3056              		.loc 1 1481 0
 3057              		.cfi_startproc
 3058              		@ args = 0, pretend = 0, frame = 24
 3059              		@ frame_needed = 1, uses_anonymous_args = 0
 3060 115c 80B5     		push	{r7, lr}
 3061              		.cfi_def_cfa_offset 8
 3062              		.cfi_offset 7, -8
 3063              		.cfi_offset 14, -4
 3064 115e 86B0     		sub	sp, sp, #24
 3065              		.cfi_def_cfa_offset 32
 3066 1160 00AF     		add	r7, sp, #0
 3067              		.cfi_def_cfa_register 7
 3068 1162 7860     		str	r0, [r7, #4]
1482:../tasks/SDMMC/ff.c **** 	FRESULT res;
1483:../tasks/SDMMC/ff.c **** 	BYTE c, *dir;
1484:../tasks/SDMMC/ff.c **** #if _USE_LFN
1485:../tasks/SDMMC/ff.c **** 	BYTE a, ord, sum;
1486:../tasks/SDMMC/ff.c **** #endif
1487:../tasks/SDMMC/ff.c **** 
1488:../tasks/SDMMC/ff.c **** 	res = dir_sdi(dp, 0);			/* Rewind directory object */
 3069              		.loc 1 1488 0
 3070 1164 7868     		ldr	r0, [r7, #4]
 3071 1166 0021     		movs	r1, #0
 3072 1168 FFF7CEFD 		bl	dir_sdi
 3073 116c 0346     		mov	r3, r0
 3074 116e FB75     		strb	r3, [r7, #23]
1489:../tasks/SDMMC/ff.c **** 	if (res != FR_OK) return res;
 3075              		.loc 1 1489 0
 3076 1170 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 3077 1172 002B     		cmp	r3, #0
 3078 1174 01D0     		beq	.L196
 3079              		.loc 1 1489 0 is_stmt 0 discriminator 1
 3080 1176 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 3081 1178 39E0     		b	.L197
 3082              	.L196:
1490:../tasks/SDMMC/ff.c **** 
1491:../tasks/SDMMC/ff.c **** #if _USE_LFN
1492:../tasks/SDMMC/ff.c **** 	ord = sum = 0xFF;
1493:../tasks/SDMMC/ff.c **** #endif
1494:../tasks/SDMMC/ff.c **** 	do {
1495:../tasks/SDMMC/ff.c **** 		res = move_window(dp->fs, dp->sect);
 3083              		.loc 1 1495 0 is_stmt 1
 3084 117a 7B68     		ldr	r3, [r7, #4]
 3085 117c D3F80022 		ldr	r2, [r3, #512]
 3086 1180 7B68     		ldr	r3, [r7, #4]
 3087 1182 D3F81032 		ldr	r3, [r3, #528]
 3088 1186 1046     		mov	r0, r2
 3089 1188 1946     		mov	r1, r3
 3090 118a FFF7EDF9 		bl	move_window
 3091 118e 0346     		mov	r3, r0
 3092 1190 FB75     		strb	r3, [r7, #23]
1496:../tasks/SDMMC/ff.c **** 		if (res != FR_OK) break;
 3093              		.loc 1 1496 0
 3094 1192 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 3095 1194 002B     		cmp	r3, #0
 3096 1196 00D0     		beq	.L198
 3097              		.loc 1 1496 0 is_stmt 0 discriminator 1
 3098 1198 28E0     		b	.L199
 3099              	.L198:
1497:../tasks/SDMMC/ff.c **** 		dir = dp->dir;					/* Ptr to the directory entry of current index */
 3100              		.loc 1 1497 0 is_stmt 1
 3101 119a 7B68     		ldr	r3, [r7, #4]
 3102 119c D3F81432 		ldr	r3, [r3, #532]
 3103 11a0 3B61     		str	r3, [r7, #16]
1498:../tasks/SDMMC/ff.c **** 		c = dir[DIR_Name];
 3104              		.loc 1 1498 0
 3105 11a2 3B69     		ldr	r3, [r7, #16]
 3106 11a4 1B78     		ldrb	r3, [r3]
 3107 11a6 FB73     		strb	r3, [r7, #15]
1499:../tasks/SDMMC/ff.c **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 3108              		.loc 1 1499 0
 3109 11a8 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 3110 11aa 002B     		cmp	r3, #0
 3111 11ac 02D1     		bne	.L200
 3112              		.loc 1 1499 0 is_stmt 0 discriminator 1
 3113 11ae 0423     		movs	r3, #4
 3114 11b0 FB75     		strb	r3, [r7, #23]
 3115 11b2 1BE0     		b	.L199
 3116              	.L200:
1500:../tasks/SDMMC/ff.c **** #if _USE_LFN	/* LFN configuration */
1501:../tasks/SDMMC/ff.c **** 		a = dir[DIR_Attr] & AM_MASK;
1502:../tasks/SDMMC/ff.c **** 		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
1503:../tasks/SDMMC/ff.c **** 			ord = 0xFF;
1504:../tasks/SDMMC/ff.c **** 		} else {
1505:../tasks/SDMMC/ff.c **** 			if (a == AM_LFN) {			/* An LFN entry is found */
1506:../tasks/SDMMC/ff.c **** 				if (dp->lfn) {
1507:../tasks/SDMMC/ff.c **** 					if (c & LLE) {		/* Is it start of LFN sequence? */
1508:../tasks/SDMMC/ff.c **** 						sum = dir[LDIR_Chksum];
1509:../tasks/SDMMC/ff.c **** 						c &= ~LLE; ord = c;	/* LFN start order */
1510:../tasks/SDMMC/ff.c **** 						dp->lfn_idx = dp->index;
1511:../tasks/SDMMC/ff.c **** 					}
1512:../tasks/SDMMC/ff.c **** 					/* Check validity of the LFN entry and compare it with given name */
1513:../tasks/SDMMC/ff.c **** 					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
1514:../tasks/SDMMC/ff.c **** 				}
1515:../tasks/SDMMC/ff.c **** 			} else {					/* An SFN entry is found */
1516:../tasks/SDMMC/ff.c **** 				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
1517:../tasks/SDMMC/ff.c **** 				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
1518:../tasks/SDMMC/ff.c **** 				if (!(dp->fn[NS] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
1519:../tasks/SDMMC/ff.c **** 			}
1520:../tasks/SDMMC/ff.c **** 		}
1521:../tasks/SDMMC/ff.c **** #else		/* Non LFN configuration */
1522:../tasks/SDMMC/ff.c **** 		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 3117              		.loc 1 1522 0 is_stmt 1
 3118 11b4 3B69     		ldr	r3, [r7, #16]
 3119 11b6 0B33     		adds	r3, r3, #11
 3120 11b8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3121 11ba 03F00803 		and	r3, r3, #8
 3122 11be 002B     		cmp	r3, #0
 3123 11c0 0BD1     		bne	.L201
 3124              		.loc 1 1522 0 is_stmt 0 discriminator 1
 3125 11c2 7B68     		ldr	r3, [r7, #4]
 3126 11c4 D3F81832 		ldr	r3, [r3, #536]
 3127 11c8 3869     		ldr	r0, [r7, #16]
 3128 11ca 1946     		mov	r1, r3
 3129 11cc 0B22     		movs	r2, #11
 3130 11ce FEF74FFF 		bl	mem_cmp
 3131 11d2 0346     		mov	r3, r0
 3132 11d4 002B     		cmp	r3, #0
 3133 11d6 00D1     		bne	.L201
1523:../tasks/SDMMC/ff.c **** 			break;
 3134              		.loc 1 1523 0 is_stmt 1
 3135 11d8 08E0     		b	.L199
 3136              	.L201:
1524:../tasks/SDMMC/ff.c **** #endif
1525:../tasks/SDMMC/ff.c **** 		res = dir_next(dp, 0);		/* Next entry */
 3137              		.loc 1 1525 0
 3138 11da 7868     		ldr	r0, [r7, #4]
 3139 11dc 0021     		movs	r1, #0
 3140 11de FFF72BFE 		bl	dir_next
 3141 11e2 0346     		mov	r3, r0
 3142 11e4 FB75     		strb	r3, [r7, #23]
1526:../tasks/SDMMC/ff.c **** 	} while (res == FR_OK);
 3143              		.loc 1 1526 0
 3144 11e6 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 3145 11e8 002B     		cmp	r3, #0
 3146 11ea C6D0     		beq	.L196
 3147              	.L199:
1527:../tasks/SDMMC/ff.c **** 
1528:../tasks/SDMMC/ff.c **** 	return res;
 3148              		.loc 1 1528 0
 3149 11ec FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 3150              	.L197:
1529:../tasks/SDMMC/ff.c **** }
 3151              		.loc 1 1529 0
 3152 11ee 1846     		mov	r0, r3
 3153 11f0 1837     		adds	r7, r7, #24
 3154 11f2 BD46     		mov	sp, r7
 3155              		@ sp needed
 3156 11f4 80BD     		pop	{r7, pc}
 3157              		.cfi_endproc
 3158              	.LFE78:
 3160 11f6 00BF     		.align	2
 3161              		.thumb
 3162              		.thumb_func
 3164              	dir_read:
 3165              	.LFB79:
1530:../tasks/SDMMC/ff.c **** 
1531:../tasks/SDMMC/ff.c **** 
1532:../tasks/SDMMC/ff.c **** 
1533:../tasks/SDMMC/ff.c **** 
1534:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
1535:../tasks/SDMMC/ff.c **** /* Read an object from the directory                                     */
1536:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
1537:../tasks/SDMMC/ff.c **** #if _FS_MINIMIZE <= 1 || _USE_LABEL || _FS_RPATH >= 2
1538:../tasks/SDMMC/ff.c **** static
1539:../tasks/SDMMC/ff.c **** FRESULT dir_read (
1540:../tasks/SDMMC/ff.c **** 	DIR* dp,		/* Pointer to the directory object */
1541:../tasks/SDMMC/ff.c **** 	int vol			/* Filtered by 0:file/directory or 1:volume label */
1542:../tasks/SDMMC/ff.c **** )
1543:../tasks/SDMMC/ff.c **** {
 3166              		.loc 1 1543 0
 3167              		.cfi_startproc
 3168              		@ args = 0, pretend = 0, frame = 24
 3169              		@ frame_needed = 1, uses_anonymous_args = 0
 3170 11f8 80B5     		push	{r7, lr}
 3171              		.cfi_def_cfa_offset 8
 3172              		.cfi_offset 7, -8
 3173              		.cfi_offset 14, -4
 3174 11fa 86B0     		sub	sp, sp, #24
 3175              		.cfi_def_cfa_offset 32
 3176 11fc 00AF     		add	r7, sp, #0
 3177              		.cfi_def_cfa_register 7
 3178 11fe 7860     		str	r0, [r7, #4]
 3179 1200 3960     		str	r1, [r7]
1544:../tasks/SDMMC/ff.c **** 	FRESULT res;
1545:../tasks/SDMMC/ff.c **** 	BYTE a, c, *dir;
1546:../tasks/SDMMC/ff.c **** #if _USE_LFN
1547:../tasks/SDMMC/ff.c **** 	BYTE ord = 0xFF, sum = 0xFF;
1548:../tasks/SDMMC/ff.c **** #endif
1549:../tasks/SDMMC/ff.c **** 
1550:../tasks/SDMMC/ff.c **** 	res = FR_NO_FILE;
 3180              		.loc 1 1550 0
 3181 1202 0423     		movs	r3, #4
 3182 1204 FB75     		strb	r3, [r7, #23]
1551:../tasks/SDMMC/ff.c **** 	while (dp->sect) {
 3183              		.loc 1 1551 0
 3184 1206 3DE0     		b	.L203
 3185              	.L208:
1552:../tasks/SDMMC/ff.c **** 		res = move_window(dp->fs, dp->sect);
 3186              		.loc 1 1552 0
 3187 1208 7B68     		ldr	r3, [r7, #4]
 3188 120a D3F80022 		ldr	r2, [r3, #512]
 3189 120e 7B68     		ldr	r3, [r7, #4]
 3190 1210 D3F81032 		ldr	r3, [r3, #528]
 3191 1214 1046     		mov	r0, r2
 3192 1216 1946     		mov	r1, r3
 3193 1218 FFF7A6F9 		bl	move_window
 3194 121c 0346     		mov	r3, r0
 3195 121e FB75     		strb	r3, [r7, #23]
1553:../tasks/SDMMC/ff.c **** 		if (res != FR_OK) break;
 3196              		.loc 1 1553 0
 3197 1220 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 3198 1222 002B     		cmp	r3, #0
 3199 1224 00D0     		beq	.L204
 3200              		.loc 1 1553 0 is_stmt 0 discriminator 1
 3201 1226 32E0     		b	.L205
 3202              	.L204:
1554:../tasks/SDMMC/ff.c **** 		dir = dp->dir;					/* Ptr to the directory entry of current index */
 3203              		.loc 1 1554 0 is_stmt 1
 3204 1228 7B68     		ldr	r3, [r7, #4]
 3205 122a D3F81432 		ldr	r3, [r3, #532]
 3206 122e 3B61     		str	r3, [r7, #16]
1555:../tasks/SDMMC/ff.c **** 		c = dir[DIR_Name];
 3207              		.loc 1 1555 0
 3208 1230 3B69     		ldr	r3, [r7, #16]
 3209 1232 1B78     		ldrb	r3, [r3]
 3210 1234 FB73     		strb	r3, [r7, #15]
1556:../tasks/SDMMC/ff.c **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 3211              		.loc 1 1556 0
 3212 1236 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 3213 1238 002B     		cmp	r3, #0
 3214 123a 02D1     		bne	.L206
 3215              		.loc 1 1556 0 is_stmt 0 discriminator 1
 3216 123c 0423     		movs	r3, #4
 3217 123e FB75     		strb	r3, [r7, #23]
 3218 1240 25E0     		b	.L205
 3219              	.L206:
1557:../tasks/SDMMC/ff.c **** 		a = dir[DIR_Attr] & AM_MASK;
 3220              		.loc 1 1557 0 is_stmt 1
 3221 1242 3B69     		ldr	r3, [r7, #16]
 3222 1244 0B33     		adds	r3, r3, #11
 3223 1246 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3224 1248 03F03F03 		and	r3, r3, #63
 3225 124c BB73     		strb	r3, [r7, #14]
1558:../tasks/SDMMC/ff.c **** #if _USE_LFN	/* LFN configuration */
1559:../tasks/SDMMC/ff.c **** 		if (c == DDE || (!_FS_RPATH && c == '.') || (int)(a == AM_VOL) != vol) {	/* An entry without vali
1560:../tasks/SDMMC/ff.c **** 			ord = 0xFF;
1561:../tasks/SDMMC/ff.c **** 		} else {
1562:../tasks/SDMMC/ff.c **** 			if (a == AM_LFN) {			/* An LFN entry is found */
1563:../tasks/SDMMC/ff.c **** 				if (c & LLE) {			/* Is it start of LFN sequence? */
1564:../tasks/SDMMC/ff.c **** 					sum = dir[LDIR_Chksum];
1565:../tasks/SDMMC/ff.c **** 					c &= ~LLE; ord = c;
1566:../tasks/SDMMC/ff.c **** 					dp->lfn_idx = dp->index;
1567:../tasks/SDMMC/ff.c **** 				}
1568:../tasks/SDMMC/ff.c **** 				/* Check LFN validity and capture it */
1569:../tasks/SDMMC/ff.c **** 				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
1570:../tasks/SDMMC/ff.c **** 			} else {					/* An SFN entry is found */
1571:../tasks/SDMMC/ff.c **** 				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
1572:../tasks/SDMMC/ff.c **** 					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
1573:../tasks/SDMMC/ff.c **** 				break;
1574:../tasks/SDMMC/ff.c **** 			}
1575:../tasks/SDMMC/ff.c **** 		}
1576:../tasks/SDMMC/ff.c **** #else		/* Non LFN configuration */
1577:../tasks/SDMMC/ff.c **** 		if (c != DDE && (_FS_RPATH || c != '.') && a != AM_LFN && (int)(a == AM_VOL) == vol)	/* Is it a v
 3226              		.loc 1 1577 0
 3227 124e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 3228 1250 E52B     		cmp	r3, #229
 3229 1252 0DD0     		beq	.L207
 3230              		.loc 1 1577 0 is_stmt 0 discriminator 1
 3231 1254 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 3232 1256 0F2B     		cmp	r3, #15
 3233 1258 0AD0     		beq	.L207
 3234 125a BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 3235 125c 082B     		cmp	r3, #8
 3236 125e 14BF     		ite	ne
 3237 1260 0023     		movne	r3, #0
 3238 1262 0123     		moveq	r3, #1
 3239 1264 DBB2     		uxtb	r3, r3
 3240 1266 1A46     		mov	r2, r3
 3241 1268 3B68     		ldr	r3, [r7]
 3242 126a 9A42     		cmp	r2, r3
 3243 126c 00D1     		bne	.L207
1578:../tasks/SDMMC/ff.c **** 			break;
 3244              		.loc 1 1578 0 is_stmt 1
 3245 126e 0EE0     		b	.L205
 3246              	.L207:
1579:../tasks/SDMMC/ff.c **** #endif
1580:../tasks/SDMMC/ff.c **** 		res = dir_next(dp, 0);				/* Next entry */
 3247              		.loc 1 1580 0
 3248 1270 7868     		ldr	r0, [r7, #4]
 3249 1272 0021     		movs	r1, #0
 3250 1274 FFF7E0FD 		bl	dir_next
 3251 1278 0346     		mov	r3, r0
 3252 127a FB75     		strb	r3, [r7, #23]
1581:../tasks/SDMMC/ff.c **** 		if (res != FR_OK) break;
 3253              		.loc 1 1581 0
 3254 127c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 3255 127e 002B     		cmp	r3, #0
 3256 1280 00D0     		beq	.L203
 3257              		.loc 1 1581 0 is_stmt 0 discriminator 1
 3258 1282 04E0     		b	.L205
 3259              	.L203:
1551:../tasks/SDMMC/ff.c **** 		res = move_window(dp->fs, dp->sect);
 3260              		.loc 1 1551 0 is_stmt 1 discriminator 1
 3261 1284 7B68     		ldr	r3, [r7, #4]
 3262 1286 D3F81032 		ldr	r3, [r3, #528]
 3263 128a 002B     		cmp	r3, #0
 3264 128c BCD1     		bne	.L208
 3265              	.L205:
1582:../tasks/SDMMC/ff.c **** 	}
1583:../tasks/SDMMC/ff.c **** 
1584:../tasks/SDMMC/ff.c **** 	if (res != FR_OK) dp->sect = 0;
 3266              		.loc 1 1584 0
 3267 128e FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 3268 1290 002B     		cmp	r3, #0
 3269 1292 03D0     		beq	.L209
 3270              		.loc 1 1584 0 is_stmt 0 discriminator 1
 3271 1294 7B68     		ldr	r3, [r7, #4]
 3272 1296 0022     		movs	r2, #0
 3273 1298 C3F81022 		str	r2, [r3, #528]
 3274              	.L209:
1585:../tasks/SDMMC/ff.c **** 
1586:../tasks/SDMMC/ff.c **** 	return res;
 3275              		.loc 1 1586 0 is_stmt 1
 3276 129c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1587:../tasks/SDMMC/ff.c **** }
 3277              		.loc 1 1587 0
 3278 129e 1846     		mov	r0, r3
 3279 12a0 1837     		adds	r7, r7, #24
 3280 12a2 BD46     		mov	sp, r7
 3281              		@ sp needed
 3282 12a4 80BD     		pop	{r7, pc}
 3283              		.cfi_endproc
 3284              	.LFE79:
 3286 12a6 00BF     		.align	2
 3287              		.thumb
 3288              		.thumb_func
 3290              	dir_register:
 3291              	.LFB80:
1588:../tasks/SDMMC/ff.c **** #endif	/* _FS_MINIMIZE <= 1 || _USE_LABEL || _FS_RPATH >= 2 */
1589:../tasks/SDMMC/ff.c **** 
1590:../tasks/SDMMC/ff.c **** 
1591:../tasks/SDMMC/ff.c **** 
1592:../tasks/SDMMC/ff.c **** 
1593:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
1594:../tasks/SDMMC/ff.c **** /* Register an object to the directory                                   */
1595:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
1596:../tasks/SDMMC/ff.c **** #if !_FS_READONLY
1597:../tasks/SDMMC/ff.c **** static
1598:../tasks/SDMMC/ff.c **** FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_D
1599:../tasks/SDMMC/ff.c **** 	DIR* dp				/* Target directory with object name to be created */
1600:../tasks/SDMMC/ff.c **** )
1601:../tasks/SDMMC/ff.c **** {
 3292              		.loc 1 1601 0
 3293              		.cfi_startproc
 3294              		@ args = 0, pretend = 0, frame = 16
 3295              		@ frame_needed = 1, uses_anonymous_args = 0
 3296 12a8 80B5     		push	{r7, lr}
 3297              		.cfi_def_cfa_offset 8
 3298              		.cfi_offset 7, -8
 3299              		.cfi_offset 14, -4
 3300 12aa 84B0     		sub	sp, sp, #16
 3301              		.cfi_def_cfa_offset 24
 3302 12ac 00AF     		add	r7, sp, #0
 3303              		.cfi_def_cfa_register 7
 3304 12ae 7860     		str	r0, [r7, #4]
1602:../tasks/SDMMC/ff.c **** 	FRESULT res;
1603:../tasks/SDMMC/ff.c **** #if _USE_LFN	/* LFN configuration */
1604:../tasks/SDMMC/ff.c **** 	WORD n, ne;
1605:../tasks/SDMMC/ff.c **** 	BYTE sn[12], *fn, sum;
1606:../tasks/SDMMC/ff.c **** 	WCHAR *lfn;
1607:../tasks/SDMMC/ff.c **** 
1608:../tasks/SDMMC/ff.c **** 
1609:../tasks/SDMMC/ff.c **** 	fn = dp->fn; lfn = dp->lfn;
1610:../tasks/SDMMC/ff.c **** 	mem_cpy(sn, fn, 12);
1611:../tasks/SDMMC/ff.c **** 
1612:../tasks/SDMMC/ff.c **** 	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
1613:../tasks/SDMMC/ff.c **** 		return FR_INVALID_NAME;
1614:../tasks/SDMMC/ff.c **** 
1615:../tasks/SDMMC/ff.c **** 	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
1616:../tasks/SDMMC/ff.c **** 		fn[NS] = 0; dp->lfn = 0;			/* Find only SFN */
1617:../tasks/SDMMC/ff.c **** 		for (n = 1; n < 100; n++) {
1618:../tasks/SDMMC/ff.c **** 			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
1619:../tasks/SDMMC/ff.c **** 			res = dir_find(dp);				/* Check if the name collides with existing SFN */
1620:../tasks/SDMMC/ff.c **** 			if (res != FR_OK) break;
1621:../tasks/SDMMC/ff.c **** 		}
1622:../tasks/SDMMC/ff.c **** 		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
1623:../tasks/SDMMC/ff.c **** 		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
1624:../tasks/SDMMC/ff.c **** 		fn[NS] = sn[NS]; dp->lfn = lfn;
1625:../tasks/SDMMC/ff.c **** 	}
1626:../tasks/SDMMC/ff.c **** 
1627:../tasks/SDMMC/ff.c **** 	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
1628:../tasks/SDMMC/ff.c **** 		for (n = 0; lfn[n]; n++) ;
1629:../tasks/SDMMC/ff.c **** 		ne = (n + 25) / 13;
1630:../tasks/SDMMC/ff.c **** 	} else {						/* Otherwise allocate an entry for an SFN  */
1631:../tasks/SDMMC/ff.c **** 		ne = 1;
1632:../tasks/SDMMC/ff.c **** 	}
1633:../tasks/SDMMC/ff.c **** 	res = dir_alloc(dp, ne);		/* Allocate entries */
1634:../tasks/SDMMC/ff.c **** 
1635:../tasks/SDMMC/ff.c **** 	if (res == FR_OK && --ne) {		/* Set LFN entry if needed */
1636:../tasks/SDMMC/ff.c **** 		res = dir_sdi(dp, (WORD)(dp->index - ne));
1637:../tasks/SDMMC/ff.c **** 		if (res == FR_OK) {
1638:../tasks/SDMMC/ff.c **** 			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
1639:../tasks/SDMMC/ff.c **** 			do {					/* Store LFN entries in bottom first */
1640:../tasks/SDMMC/ff.c **** 				res = move_window(dp->fs, dp->sect);
1641:../tasks/SDMMC/ff.c **** 				if (res != FR_OK) break;
1642:../tasks/SDMMC/ff.c **** 				fit_lfn(dp->lfn, dp->dir, (BYTE)ne, sum);
1643:../tasks/SDMMC/ff.c **** 				dp->fs->wflag = 1;
1644:../tasks/SDMMC/ff.c **** 				res = dir_next(dp, 0);	/* Next entry */
1645:../tasks/SDMMC/ff.c **** 			} while (res == FR_OK && --ne);
1646:../tasks/SDMMC/ff.c **** 		}
1647:../tasks/SDMMC/ff.c **** 	}
1648:../tasks/SDMMC/ff.c **** #else	/* Non LFN configuration */
1649:../tasks/SDMMC/ff.c **** 	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 3305              		.loc 1 1649 0
 3306 12b0 7868     		ldr	r0, [r7, #4]
 3307 12b2 0121     		movs	r1, #1
 3308 12b4 FFF7B6FE 		bl	dir_alloc
 3309 12b8 0346     		mov	r3, r0
 3310 12ba FB73     		strb	r3, [r7, #15]
1650:../tasks/SDMMC/ff.c **** #endif
1651:../tasks/SDMMC/ff.c **** 
1652:../tasks/SDMMC/ff.c **** 	if (res == FR_OK) {				/* Set SFN entry */
 3311              		.loc 1 1652 0
 3312 12bc FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 3313 12be 002B     		cmp	r3, #0
 3314 12c0 27D1     		bne	.L212
1653:../tasks/SDMMC/ff.c **** 		res = move_window(dp->fs, dp->sect);
 3315              		.loc 1 1653 0
 3316 12c2 7B68     		ldr	r3, [r7, #4]
 3317 12c4 D3F80022 		ldr	r2, [r3, #512]
 3318 12c8 7B68     		ldr	r3, [r7, #4]
 3319 12ca D3F81032 		ldr	r3, [r3, #528]
 3320 12ce 1046     		mov	r0, r2
 3321 12d0 1946     		mov	r1, r3
 3322 12d2 FFF749F9 		bl	move_window
 3323 12d6 0346     		mov	r3, r0
 3324 12d8 FB73     		strb	r3, [r7, #15]
1654:../tasks/SDMMC/ff.c **** 		if (res == FR_OK) {
 3325              		.loc 1 1654 0
 3326 12da FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 3327 12dc 002B     		cmp	r3, #0
 3328 12de 18D1     		bne	.L212
1655:../tasks/SDMMC/ff.c **** 			mem_set(dp->dir, 0, SZ_DIR);	/* Clean the entry */
 3329              		.loc 1 1655 0
 3330 12e0 7B68     		ldr	r3, [r7, #4]
 3331 12e2 D3F81432 		ldr	r3, [r3, #532]
 3332 12e6 1846     		mov	r0, r3
 3333 12e8 0021     		movs	r1, #0
 3334 12ea 2022     		movs	r2, #32
 3335 12ec FEF7A6FE 		bl	mem_set
1656:../tasks/SDMMC/ff.c **** 			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 3336              		.loc 1 1656 0
 3337 12f0 7B68     		ldr	r3, [r7, #4]
 3338 12f2 D3F81422 		ldr	r2, [r3, #532]
 3339 12f6 7B68     		ldr	r3, [r7, #4]
 3340 12f8 D3F81832 		ldr	r3, [r3, #536]
 3341 12fc 1046     		mov	r0, r2
 3342 12fe 1946     		mov	r1, r3
 3343 1300 0B22     		movs	r2, #11
 3344 1302 FEF77DFE 		bl	mem_cpy
1657:../tasks/SDMMC/ff.c **** #if _USE_LFN
1658:../tasks/SDMMC/ff.c **** 			dp->dir[DIR_NTres] = dp->fn[NS] & (NS_BODY | NS_EXT);	/* Put NT flag */
1659:../tasks/SDMMC/ff.c **** #endif
1660:../tasks/SDMMC/ff.c **** 			dp->fs->wflag = 1;
 3345              		.loc 1 1660 0
 3346 1306 7B68     		ldr	r3, [r7, #4]
 3347 1308 D3F80032 		ldr	r3, [r3, #512]
 3348 130c 0122     		movs	r2, #1
 3349 130e 83F80422 		strb	r2, [r3, #516]
 3350              	.L212:
1661:../tasks/SDMMC/ff.c **** 		}
1662:../tasks/SDMMC/ff.c **** 	}
1663:../tasks/SDMMC/ff.c **** 
1664:../tasks/SDMMC/ff.c **** 	return res;
 3351              		.loc 1 1664 0
 3352 1312 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1665:../tasks/SDMMC/ff.c **** }
 3353              		.loc 1 1665 0
 3354 1314 1846     		mov	r0, r3
 3355 1316 1037     		adds	r7, r7, #16
 3356 1318 BD46     		mov	sp, r7
 3357              		@ sp needed
 3358 131a 80BD     		pop	{r7, pc}
 3359              		.cfi_endproc
 3360              	.LFE80:
 3362              		.align	2
 3363              		.thumb
 3364              		.thumb_func
 3366              	dir_remove:
 3367              	.LFB81:
1666:../tasks/SDMMC/ff.c **** #endif /* !_FS_READONLY */
1667:../tasks/SDMMC/ff.c **** 
1668:../tasks/SDMMC/ff.c **** 
1669:../tasks/SDMMC/ff.c **** 
1670:../tasks/SDMMC/ff.c **** 
1671:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
1672:../tasks/SDMMC/ff.c **** /* Remove an object from the directory                                   */
1673:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
1674:../tasks/SDMMC/ff.c **** #if !_FS_READONLY && !_FS_MINIMIZE
1675:../tasks/SDMMC/ff.c **** static
1676:../tasks/SDMMC/ff.c **** FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
1677:../tasks/SDMMC/ff.c **** 	DIR* dp				/* Directory object pointing the entry to be removed */
1678:../tasks/SDMMC/ff.c **** )
1679:../tasks/SDMMC/ff.c **** {
 3368              		.loc 1 1679 0
 3369              		.cfi_startproc
 3370              		@ args = 0, pretend = 0, frame = 16
 3371              		@ frame_needed = 1, uses_anonymous_args = 0
 3372 131c 80B5     		push	{r7, lr}
 3373              		.cfi_def_cfa_offset 8
 3374              		.cfi_offset 7, -8
 3375              		.cfi_offset 14, -4
 3376 131e 84B0     		sub	sp, sp, #16
 3377              		.cfi_def_cfa_offset 24
 3378 1320 00AF     		add	r7, sp, #0
 3379              		.cfi_def_cfa_register 7
 3380 1322 7860     		str	r0, [r7, #4]
1680:../tasks/SDMMC/ff.c **** 	FRESULT res;
1681:../tasks/SDMMC/ff.c **** #if _USE_LFN	/* LFN configuration */
1682:../tasks/SDMMC/ff.c **** 	WORD i;
1683:../tasks/SDMMC/ff.c **** 
1684:../tasks/SDMMC/ff.c **** 	i = dp->index;	/* SFN index */
1685:../tasks/SDMMC/ff.c **** 	res = dir_sdi(dp, (WORD)((dp->lfn_idx == 0xFFFF) ? i : dp->lfn_idx));	/* Goto the SFN or top of th
1686:../tasks/SDMMC/ff.c **** 	if (res == FR_OK) {
1687:../tasks/SDMMC/ff.c **** 		do {
1688:../tasks/SDMMC/ff.c **** 			res = move_window(dp->fs, dp->sect);
1689:../tasks/SDMMC/ff.c **** 			if (res != FR_OK) break;
1690:../tasks/SDMMC/ff.c **** 			*dp->dir = DDE;			/* Mark the entry "deleted" */
1691:../tasks/SDMMC/ff.c **** 			dp->fs->wflag = 1;
1692:../tasks/SDMMC/ff.c **** 			if (dp->index >= i) break;	/* When reached SFN, all entries of the object has been deleted. */
1693:../tasks/SDMMC/ff.c **** 			res = dir_next(dp, 0);		/* Next entry */
1694:../tasks/SDMMC/ff.c **** 		} while (res == FR_OK);
1695:../tasks/SDMMC/ff.c **** 		if (res == FR_NO_FILE) res = FR_INT_ERR;
1696:../tasks/SDMMC/ff.c **** 	}
1697:../tasks/SDMMC/ff.c **** 
1698:../tasks/SDMMC/ff.c **** #else			/* Non LFN configuration */
1699:../tasks/SDMMC/ff.c **** 	res = dir_sdi(dp, dp->index);
 3381              		.loc 1 1699 0
 3382 1324 7B68     		ldr	r3, [r7, #4]
 3383 1326 B3F80632 		ldrh	r3, [r3, #518]
 3384 132a 7868     		ldr	r0, [r7, #4]
 3385 132c 1946     		mov	r1, r3
 3386 132e FFF7EBFC 		bl	dir_sdi
 3387 1332 0346     		mov	r3, r0
 3388 1334 FB73     		strb	r3, [r7, #15]
1700:../tasks/SDMMC/ff.c **** 	if (res == FR_OK) {
 3389              		.loc 1 1700 0
 3390 1336 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 3391 1338 002B     		cmp	r3, #0
 3392 133a 19D1     		bne	.L215
1701:../tasks/SDMMC/ff.c **** 		res = move_window(dp->fs, dp->sect);
 3393              		.loc 1 1701 0
 3394 133c 7B68     		ldr	r3, [r7, #4]
 3395 133e D3F80022 		ldr	r2, [r3, #512]
 3396 1342 7B68     		ldr	r3, [r7, #4]
 3397 1344 D3F81032 		ldr	r3, [r3, #528]
 3398 1348 1046     		mov	r0, r2
 3399 134a 1946     		mov	r1, r3
 3400 134c FFF70CF9 		bl	move_window
 3401 1350 0346     		mov	r3, r0
 3402 1352 FB73     		strb	r3, [r7, #15]
1702:../tasks/SDMMC/ff.c **** 		if (res == FR_OK) {
 3403              		.loc 1 1702 0
 3404 1354 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 3405 1356 002B     		cmp	r3, #0
 3406 1358 0AD1     		bne	.L215
1703:../tasks/SDMMC/ff.c **** 			*dp->dir = DDE;			/* Mark the entry "deleted" */
 3407              		.loc 1 1703 0
 3408 135a 7B68     		ldr	r3, [r7, #4]
 3409 135c D3F81432 		ldr	r3, [r3, #532]
 3410 1360 E522     		movs	r2, #229
 3411 1362 1A70     		strb	r2, [r3]
1704:../tasks/SDMMC/ff.c **** 			dp->fs->wflag = 1;
 3412              		.loc 1 1704 0
 3413 1364 7B68     		ldr	r3, [r7, #4]
 3414 1366 D3F80032 		ldr	r3, [r3, #512]
 3415 136a 0122     		movs	r2, #1
 3416 136c 83F80422 		strb	r2, [r3, #516]
 3417              	.L215:
1705:../tasks/SDMMC/ff.c **** 		}
1706:../tasks/SDMMC/ff.c **** 	}
1707:../tasks/SDMMC/ff.c **** #endif
1708:../tasks/SDMMC/ff.c **** 
1709:../tasks/SDMMC/ff.c **** 	return res;
 3418              		.loc 1 1709 0
 3419 1370 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1710:../tasks/SDMMC/ff.c **** }
 3420              		.loc 1 1710 0
 3421 1372 1846     		mov	r0, r3
 3422 1374 1037     		adds	r7, r7, #16
 3423 1376 BD46     		mov	sp, r7
 3424              		@ sp needed
 3425 1378 80BD     		pop	{r7, pc}
 3426              		.cfi_endproc
 3427              	.LFE81:
 3429              		.section	.rodata
 3430              		.align	2
 3431              	.LC0:
 3432 0080 222A2B2C 		.ascii	"\"*+,:;<=>?[]|\177\000"
 3432      3A3B3C3D 
 3432      3E3F5B5D 
 3432      7C7F00
 3433              		.text
 3434 137a 00BF     		.align	2
 3435              		.thumb
 3436              		.thumb_func
 3438              	create_name:
 3439              	.LFB82:
1711:../tasks/SDMMC/ff.c **** #endif /* !_FS_READONLY */
1712:../tasks/SDMMC/ff.c **** 
1713:../tasks/SDMMC/ff.c **** 
1714:../tasks/SDMMC/ff.c **** 
1715:../tasks/SDMMC/ff.c **** 
1716:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
1717:../tasks/SDMMC/ff.c **** /* Pick a segment and create the object name in directory form           */
1718:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
1719:../tasks/SDMMC/ff.c **** 
1720:../tasks/SDMMC/ff.c **** static
1721:../tasks/SDMMC/ff.c **** FRESULT create_name (
1722:../tasks/SDMMC/ff.c **** 	DIR* dp,			/* Pointer to the directory object */
1723:../tasks/SDMMC/ff.c **** 	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
1724:../tasks/SDMMC/ff.c **** )
1725:../tasks/SDMMC/ff.c **** {
 3440              		.loc 1 1725 0
 3441              		.cfi_startproc
 3442              		@ args = 0, pretend = 0, frame = 32
 3443              		@ frame_needed = 1, uses_anonymous_args = 0
 3444 137c 80B5     		push	{r7, lr}
 3445              		.cfi_def_cfa_offset 8
 3446              		.cfi_offset 7, -8
 3447              		.cfi_offset 14, -4
 3448 137e 88B0     		sub	sp, sp, #32
 3449              		.cfi_def_cfa_offset 40
 3450 1380 00AF     		add	r7, sp, #0
 3451              		.cfi_def_cfa_register 7
 3452 1382 7860     		str	r0, [r7, #4]
 3453 1384 3960     		str	r1, [r7]
1726:../tasks/SDMMC/ff.c **** #if _USE_LFN	/* LFN configuration */
1727:../tasks/SDMMC/ff.c **** 	BYTE b, cf;
1728:../tasks/SDMMC/ff.c **** 	WCHAR w, *lfn;
1729:../tasks/SDMMC/ff.c **** 	UINT i, ni, si, di;
1730:../tasks/SDMMC/ff.c **** 	const TCHAR *p;
1731:../tasks/SDMMC/ff.c **** 
1732:../tasks/SDMMC/ff.c **** 	/* Create LFN in Unicode */
1733:../tasks/SDMMC/ff.c **** 	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
1734:../tasks/SDMMC/ff.c **** 	lfn = dp->lfn;
1735:../tasks/SDMMC/ff.c **** 	si = di = 0;
1736:../tasks/SDMMC/ff.c **** 	for (;;) {
1737:../tasks/SDMMC/ff.c **** 		w = p[si++];					/* Get a character */
1738:../tasks/SDMMC/ff.c **** 		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
1739:../tasks/SDMMC/ff.c **** 		if (di >= _MAX_LFN)				/* Reject too long name */
1740:../tasks/SDMMC/ff.c **** 			return FR_INVALID_NAME;
1741:../tasks/SDMMC/ff.c **** #if !_LFN_UNICODE
1742:../tasks/SDMMC/ff.c **** 		w &= 0xFF;
1743:../tasks/SDMMC/ff.c **** 		if (IsDBCS1(w)) {    /* Check if it is a DBC 1st byte (always false on SBCS cfg) */
1744:../tasks/SDMMC/ff.c ****               
1745:../tasks/SDMMC/ff.c **** #if _DF1S
1746:../tasks/SDMMC/ff.c **** 			b = (BYTE)p[si++];			/* Get 2nd byte */
1747:../tasks/SDMMC/ff.c **** 			if (!IsDBCS2(b))
1748:../tasks/SDMMC/ff.c **** 				return FR_INVALID_NAME;	/* Reject invalid sequence */
1749:../tasks/SDMMC/ff.c **** 			w = (w << 8) + b;			/* Create a DBC */
1750:../tasks/SDMMC/ff.c **** #endif                        
1751:../tasks/SDMMC/ff.c **** 		}
1752:../tasks/SDMMC/ff.c **** 		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
1753:../tasks/SDMMC/ff.c **** 		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
1754:../tasks/SDMMC/ff.c **** #endif
1755:../tasks/SDMMC/ff.c **** 		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
1756:../tasks/SDMMC/ff.c **** 			return FR_INVALID_NAME;
1757:../tasks/SDMMC/ff.c **** 		lfn[di++] = w;					/* Store the Unicode character */
1758:../tasks/SDMMC/ff.c **** 	}
1759:../tasks/SDMMC/ff.c **** 	*path = &p[si];						/* Return pointer to the next segment */
1760:../tasks/SDMMC/ff.c **** 	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
1761:../tasks/SDMMC/ff.c **** #if _FS_RPATH
1762:../tasks/SDMMC/ff.c **** 	if ((di == 1 && lfn[di-1] == '.') || /* Is this a dot entry? */
1763:../tasks/SDMMC/ff.c **** 		(di == 2 && lfn[di-1] == '.' && lfn[di-2] == '.')) {
1764:../tasks/SDMMC/ff.c **** 		lfn[di] = 0;
1765:../tasks/SDMMC/ff.c **** 		for (i = 0; i < 11; i++)
1766:../tasks/SDMMC/ff.c **** 			dp->fn[i] = (i < di) ? '.' : ' ';
1767:../tasks/SDMMC/ff.c **** 		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
1768:../tasks/SDMMC/ff.c **** 		return FR_OK;
1769:../tasks/SDMMC/ff.c **** 	}
1770:../tasks/SDMMC/ff.c **** #endif
1771:../tasks/SDMMC/ff.c **** 	while (di) {						/* Strip trailing spaces and dots */
1772:../tasks/SDMMC/ff.c **** 		w = lfn[di-1];
1773:../tasks/SDMMC/ff.c **** 		if (w != ' ' && w != '.') break;
1774:../tasks/SDMMC/ff.c **** 		di--;
1775:../tasks/SDMMC/ff.c **** 	}
1776:../tasks/SDMMC/ff.c **** 	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
1777:../tasks/SDMMC/ff.c **** 
1778:../tasks/SDMMC/ff.c **** 	lfn[di] = 0;						/* LFN is created */
1779:../tasks/SDMMC/ff.c **** 
1780:../tasks/SDMMC/ff.c **** 	/* Create SFN in directory form */
1781:../tasks/SDMMC/ff.c **** 	mem_set(dp->fn, ' ', 11);
1782:../tasks/SDMMC/ff.c **** 	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
1783:../tasks/SDMMC/ff.c **** 	if (si) cf |= NS_LOSS | NS_LFN;
1784:../tasks/SDMMC/ff.c **** 	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
1785:../tasks/SDMMC/ff.c **** 
1786:../tasks/SDMMC/ff.c **** 	b = i = 0; ni = 8;
1787:../tasks/SDMMC/ff.c **** 	for (;;) {
1788:../tasks/SDMMC/ff.c **** 		w = lfn[si++];					/* Get an LFN character */
1789:../tasks/SDMMC/ff.c **** 		if (!w) break;					/* Break on end of the LFN */
1790:../tasks/SDMMC/ff.c **** 		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
1791:../tasks/SDMMC/ff.c **** 			cf |= NS_LOSS | NS_LFN; continue;
1792:../tasks/SDMMC/ff.c **** 		}
1793:../tasks/SDMMC/ff.c **** 
1794:../tasks/SDMMC/ff.c **** 		if (i >= ni || si == di) {		/* Extension or end of SFN */
1795:../tasks/SDMMC/ff.c **** 			if (ni == 11) {				/* Long extension */
1796:../tasks/SDMMC/ff.c **** 				cf |= NS_LOSS | NS_LFN; break;
1797:../tasks/SDMMC/ff.c **** 			}
1798:../tasks/SDMMC/ff.c **** 			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
1799:../tasks/SDMMC/ff.c **** 			if (si > di) break;			/* No extension */
1800:../tasks/SDMMC/ff.c **** 			si = di; i = 8; ni = 11;	/* Enter extension section */
1801:../tasks/SDMMC/ff.c **** 			b <<= 2; continue;
1802:../tasks/SDMMC/ff.c **** 		}
1803:../tasks/SDMMC/ff.c **** 
1804:../tasks/SDMMC/ff.c **** 		if (w >= 0x80) {				/* Non ASCII character */
1805:../tasks/SDMMC/ff.c **** #ifdef _EXCVT
1806:../tasks/SDMMC/ff.c **** 			w = ff_convert(w, 0);		/* Unicode -> OEM code */
1807:../tasks/SDMMC/ff.c **** 			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
1808:../tasks/SDMMC/ff.c **** #else
1809:../tasks/SDMMC/ff.c **** 			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
1810:../tasks/SDMMC/ff.c **** #endif
1811:../tasks/SDMMC/ff.c **** 			cf |= NS_LFN;				/* Force create LFN entry */
1812:../tasks/SDMMC/ff.c **** 		}
1813:../tasks/SDMMC/ff.c **** 
1814:../tasks/SDMMC/ff.c **** 		if (_DF1S && w >= 0x100) {		/* Double byte character (always false on SBCS cfg) */
1815:../tasks/SDMMC/ff.c **** 			if (i >= ni - 1) {
1816:../tasks/SDMMC/ff.c **** 				cf |= NS_LOSS | NS_LFN; i = ni; continue;
1817:../tasks/SDMMC/ff.c **** 			}
1818:../tasks/SDMMC/ff.c **** 			dp->fn[i++] = (BYTE)(w >> 8);
1819:../tasks/SDMMC/ff.c **** 		} else {						/* Single byte character */
1820:../tasks/SDMMC/ff.c **** 			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
1821:../tasks/SDMMC/ff.c **** 				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
1822:../tasks/SDMMC/ff.c **** 			} else {
1823:../tasks/SDMMC/ff.c **** 				if (IsUpper(w)) {		/* ASCII large capital */
1824:../tasks/SDMMC/ff.c **** 					b |= 2;
1825:../tasks/SDMMC/ff.c **** 				} else {
1826:../tasks/SDMMC/ff.c **** 					if (IsLower(w)) {	/* ASCII small capital */
1827:../tasks/SDMMC/ff.c **** 						b |= 1; w -= 0x20;
1828:../tasks/SDMMC/ff.c **** 					}
1829:../tasks/SDMMC/ff.c **** 				}
1830:../tasks/SDMMC/ff.c **** 			}
1831:../tasks/SDMMC/ff.c **** 		}
1832:../tasks/SDMMC/ff.c **** 		dp->fn[i++] = (BYTE)w;
1833:../tasks/SDMMC/ff.c **** 	}
1834:../tasks/SDMMC/ff.c **** 
1835:../tasks/SDMMC/ff.c **** 	if (dp->fn[0] == DDE) dp->fn[0] = NDDE;	/* If the first character collides with deleted mark, repl
1836:../tasks/SDMMC/ff.c **** 
1837:../tasks/SDMMC/ff.c **** 	if (ni == 8) b <<= 2;
1838:../tasks/SDMMC/ff.c **** 	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capital
1839:../tasks/SDMMC/ff.c **** 		cf |= NS_LFN;
1840:../tasks/SDMMC/ff.c **** 	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are c
1841:../tasks/SDMMC/ff.c **** 		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
1842:../tasks/SDMMC/ff.c **** 		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
1843:../tasks/SDMMC/ff.c **** 	}
1844:../tasks/SDMMC/ff.c **** 
1845:../tasks/SDMMC/ff.c **** 	dp->fn[NS] = cf;	/* SFN is created */
1846:../tasks/SDMMC/ff.c **** 
1847:../tasks/SDMMC/ff.c **** 	return FR_OK;
1848:../tasks/SDMMC/ff.c **** 
1849:../tasks/SDMMC/ff.c **** 
1850:../tasks/SDMMC/ff.c **** #else	/* Non-LFN configuration */
1851:../tasks/SDMMC/ff.c **** 	BYTE b, c, d, *sfn;
1852:../tasks/SDMMC/ff.c **** 	UINT ni, si, i;
1853:../tasks/SDMMC/ff.c **** 	const char *p;
1854:../tasks/SDMMC/ff.c **** 
1855:../tasks/SDMMC/ff.c **** 	/* Create file name in directory form */
1856:../tasks/SDMMC/ff.c **** 	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 3454              		.loc 1 1856 0
 3455 1386 3B68     		ldr	r3, [r7]
 3456 1388 1B68     		ldr	r3, [r3]
 3457 138a FB60     		str	r3, [r7, #12]
 3458 138c 02E0     		b	.L218
 3459              	.L219:
 3460              		.loc 1 1856 0 is_stmt 0 discriminator 2
 3461 138e FB68     		ldr	r3, [r7, #12]
 3462 1390 0133     		adds	r3, r3, #1
 3463 1392 FB60     		str	r3, [r7, #12]
 3464              	.L218:
 3465              		.loc 1 1856 0 discriminator 1
 3466 1394 FB68     		ldr	r3, [r7, #12]
 3467 1396 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3468 1398 2F2B     		cmp	r3, #47
 3469 139a F8D0     		beq	.L219
 3470              		.loc 1 1856 0 discriminator 3
 3471 139c FB68     		ldr	r3, [r7, #12]
 3472 139e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3473 13a0 5C2B     		cmp	r3, #92
 3474 13a2 F4D0     		beq	.L219
1857:../tasks/SDMMC/ff.c **** 	sfn = dp->fn;
 3475              		.loc 1 1857 0 is_stmt 1
 3476 13a4 7B68     		ldr	r3, [r7, #4]
 3477 13a6 D3F81832 		ldr	r3, [r3, #536]
 3478 13aa BB60     		str	r3, [r7, #8]
1858:../tasks/SDMMC/ff.c **** 	mem_set(sfn, ' ', 11);
 3479              		.loc 1 1858 0
 3480 13ac B868     		ldr	r0, [r7, #8]
 3481 13ae 2021     		movs	r1, #32
 3482 13b0 0B22     		movs	r2, #11
 3483 13b2 FEF743FE 		bl	mem_set
1859:../tasks/SDMMC/ff.c **** 	si = i = b = 0; ni = 8;
 3484              		.loc 1 1859 0
 3485 13b6 0023     		movs	r3, #0
 3486 13b8 FB77     		strb	r3, [r7, #31]
 3487 13ba 0023     		movs	r3, #0
 3488 13bc 3B61     		str	r3, [r7, #16]
 3489 13be 3B69     		ldr	r3, [r7, #16]
 3490 13c0 7B61     		str	r3, [r7, #20]
 3491 13c2 0823     		movs	r3, #8
 3492 13c4 BB61     		str	r3, [r7, #24]
1860:../tasks/SDMMC/ff.c **** #if _FS_RPATH
1861:../tasks/SDMMC/ff.c **** 	if (p[si] == '.') { /* Is this a dot entry? */
 3493              		.loc 1 1861 0
 3494 13c6 FA68     		ldr	r2, [r7, #12]
 3495 13c8 7B69     		ldr	r3, [r7, #20]
 3496 13ca 1344     		add	r3, r3, r2
 3497 13cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3498 13ce 2E2B     		cmp	r3, #46
 3499 13d0 30D1     		bne	.L220
 3500              	.L222:
1862:../tasks/SDMMC/ff.c **** 		for (;;) {
1863:../tasks/SDMMC/ff.c **** 			c = (BYTE)p[si++];
 3501              		.loc 1 1863 0
 3502 13d2 7B69     		ldr	r3, [r7, #20]
 3503 13d4 5A1C     		adds	r2, r3, #1
 3504 13d6 7A61     		str	r2, [r7, #20]
 3505 13d8 FA68     		ldr	r2, [r7, #12]
 3506 13da 1344     		add	r3, r3, r2
 3507 13dc 1B78     		ldrb	r3, [r3]
 3508 13de BB77     		strb	r3, [r7, #30]
1864:../tasks/SDMMC/ff.c **** 			if (c != '.' || si >= 3) break;
 3509              		.loc 1 1864 0
 3510 13e0 BB7F     		ldrb	r3, [r7, #30]	@ zero_extendqisi2
 3511 13e2 2E2B     		cmp	r3, #46
 3512 13e4 0AD1     		bne	.L221
 3513              		.loc 1 1864 0 is_stmt 0 discriminator 1
 3514 13e6 7B69     		ldr	r3, [r7, #20]
 3515 13e8 022B     		cmp	r3, #2
 3516 13ea 07D8     		bhi	.L221
1865:../tasks/SDMMC/ff.c **** 			sfn[i++] = c;
 3517              		.loc 1 1865 0 is_stmt 1
 3518 13ec 3B69     		ldr	r3, [r7, #16]
 3519 13ee 5A1C     		adds	r2, r3, #1
 3520 13f0 3A61     		str	r2, [r7, #16]
 3521 13f2 BA68     		ldr	r2, [r7, #8]
 3522 13f4 1344     		add	r3, r3, r2
 3523 13f6 BA7F     		ldrb	r2, [r7, #30]
 3524 13f8 1A70     		strb	r2, [r3]
1866:../tasks/SDMMC/ff.c **** 		}
 3525              		.loc 1 1866 0
 3526 13fa EAE7     		b	.L222
 3527              	.L221:
1867:../tasks/SDMMC/ff.c **** 		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 3528              		.loc 1 1867 0
 3529 13fc BB7F     		ldrb	r3, [r7, #30]	@ zero_extendqisi2
 3530 13fe 2F2B     		cmp	r3, #47
 3531 1400 07D0     		beq	.L223
 3532              		.loc 1 1867 0 is_stmt 0 discriminator 1
 3533 1402 BB7F     		ldrb	r3, [r7, #30]	@ zero_extendqisi2
 3534 1404 5C2B     		cmp	r3, #92
 3535 1406 04D0     		beq	.L223
 3536 1408 BB7F     		ldrb	r3, [r7, #30]	@ zero_extendqisi2
 3537 140a 202B     		cmp	r3, #32
 3538 140c 01D9     		bls	.L223
 3539 140e 0623     		movs	r3, #6
 3540 1410 ABE0     		b	.L224
 3541              	.L223:
1868:../tasks/SDMMC/ff.c **** 		*path = &p[si];									/* Return pointer to the next segment */
 3542              		.loc 1 1868 0 is_stmt 1
 3543 1412 FA68     		ldr	r2, [r7, #12]
 3544 1414 7B69     		ldr	r3, [r7, #20]
 3545 1416 1A44     		add	r2, r2, r3
 3546 1418 3B68     		ldr	r3, [r7]
 3547 141a 1A60     		str	r2, [r3]
1869:../tasks/SDMMC/ff.c **** 		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
 3548              		.loc 1 1869 0
 3549 141c BB68     		ldr	r3, [r7, #8]
 3550 141e 03F10B02 		add	r2, r3, #11
 3551 1422 BB7F     		ldrb	r3, [r7, #30]	@ zero_extendqisi2
 3552 1424 202B     		cmp	r3, #32
 3553 1426 01D8     		bhi	.L225
 3554              		.loc 1 1869 0 is_stmt 0 discriminator 1
 3555 1428 2423     		movs	r3, #36
 3556 142a 00E0     		b	.L226
 3557              	.L225:
 3558              		.loc 1 1869 0 discriminator 2
 3559 142c 2023     		movs	r3, #32
 3560              	.L226:
 3561              		.loc 1 1869 0 discriminator 3
 3562 142e 1370     		strb	r3, [r2]
1870:../tasks/SDMMC/ff.c **** 		return FR_OK;
 3563              		.loc 1 1870 0 is_stmt 1 discriminator 3
 3564 1430 0023     		movs	r3, #0
 3565 1432 9AE0     		b	.L224
 3566              	.L220:
1871:../tasks/SDMMC/ff.c **** 	}
1872:../tasks/SDMMC/ff.c **** #endif
1873:../tasks/SDMMC/ff.c **** 	for (;;) {
1874:../tasks/SDMMC/ff.c **** 		c = (BYTE)p[si++];
 3567              		.loc 1 1874 0
 3568 1434 7B69     		ldr	r3, [r7, #20]
 3569 1436 5A1C     		adds	r2, r3, #1
 3570 1438 7A61     		str	r2, [r7, #20]
 3571 143a FA68     		ldr	r2, [r7, #12]
 3572 143c 1344     		add	r3, r3, r2
 3573 143e 1B78     		ldrb	r3, [r3]
 3574 1440 BB77     		strb	r3, [r7, #30]
1875:../tasks/SDMMC/ff.c **** 		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 3575              		.loc 1 1875 0
 3576 1442 BB7F     		ldrb	r3, [r7, #30]	@ zero_extendqisi2
 3577 1444 202B     		cmp	r3, #32
 3578 1446 5BD9     		bls	.L227
 3579              		.loc 1 1875 0 is_stmt 0 discriminator 1
 3580 1448 BB7F     		ldrb	r3, [r7, #30]	@ zero_extendqisi2
 3581 144a 2F2B     		cmp	r3, #47
 3582 144c 58D0     		beq	.L227
 3583 144e BB7F     		ldrb	r3, [r7, #30]	@ zero_extendqisi2
 3584 1450 5C2B     		cmp	r3, #92
 3585 1452 55D0     		beq	.L227
1876:../tasks/SDMMC/ff.c **** 		if (c == '.' || i >= ni) {
 3586              		.loc 1 1876 0 is_stmt 1
 3587 1454 BB7F     		ldrb	r3, [r7, #30]	@ zero_extendqisi2
 3588 1456 2E2B     		cmp	r3, #46
 3589 1458 03D0     		beq	.L228
 3590              		.loc 1 1876 0 is_stmt 0 discriminator 1
 3591 145a 3A69     		ldr	r2, [r7, #16]
 3592 145c BB69     		ldr	r3, [r7, #24]
 3593 145e 9A42     		cmp	r2, r3
 3594 1460 10D3     		bcc	.L229
 3595              	.L228:
1877:../tasks/SDMMC/ff.c **** 			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 3596              		.loc 1 1877 0 is_stmt 1
 3597 1462 BB69     		ldr	r3, [r7, #24]
 3598 1464 082B     		cmp	r3, #8
 3599 1466 02D1     		bne	.L230
 3600              		.loc 1 1877 0 is_stmt 0 discriminator 2
 3601 1468 BB7F     		ldrb	r3, [r7, #30]	@ zero_extendqisi2
 3602 146a 2E2B     		cmp	r3, #46
 3603 146c 01D0     		beq	.L231
 3604              	.L230:
 3605              		.loc 1 1877 0 discriminator 1
 3606 146e 0623     		movs	r3, #6
 3607 1470 7BE0     		b	.L224
 3608              	.L231:
1878:../tasks/SDMMC/ff.c **** 			i = 8; ni = 11;
 3609              		.loc 1 1878 0 is_stmt 1
 3610 1472 0823     		movs	r3, #8
 3611 1474 3B61     		str	r3, [r7, #16]
 3612 1476 0B23     		movs	r3, #11
 3613 1478 BB61     		str	r3, [r7, #24]
1879:../tasks/SDMMC/ff.c **** 			b <<= 2; continue;
 3614              		.loc 1 1879 0
 3615 147a FB7F     		ldrb	r3, [r7, #31]
 3616 147c 9B00     		lsls	r3, r3, #2
 3617 147e FB77     		strb	r3, [r7, #31]
 3618 1480 00BF     		nop
1880:../tasks/SDMMC/ff.c **** 		}
1881:../tasks/SDMMC/ff.c **** 		if (c >= 0x80) {				/* Extended character? */
1882:../tasks/SDMMC/ff.c **** 			b |= 3;						/* Eliminate NT flag */
1883:../tasks/SDMMC/ff.c **** #ifdef _EXCVT
1884:../tasks/SDMMC/ff.c **** 			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
1885:../tasks/SDMMC/ff.c **** #else
1886:../tasks/SDMMC/ff.c **** #if !_DF1S
1887:../tasks/SDMMC/ff.c **** 			return FR_INVALID_NAME;		/* Reject extended characters (ASCII cfg) */
1888:../tasks/SDMMC/ff.c **** #endif
1889:../tasks/SDMMC/ff.c **** #endif
1890:../tasks/SDMMC/ff.c **** 		}
1891:../tasks/SDMMC/ff.c **** 		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
1892:../tasks/SDMMC/ff.c **** 			d = (BYTE)p[si++];			/* Get 2nd byte */
1893:../tasks/SDMMC/ff.c **** 			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
1894:../tasks/SDMMC/ff.c **** 				return FR_INVALID_NAME;
1895:../tasks/SDMMC/ff.c **** 			sfn[i++] = c;
1896:../tasks/SDMMC/ff.c **** 			sfn[i++] = d;
1897:../tasks/SDMMC/ff.c **** 		} else {						/* Single byte code */
1898:../tasks/SDMMC/ff.c **** 			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
1899:../tasks/SDMMC/ff.c **** 				return FR_INVALID_NAME;
1900:../tasks/SDMMC/ff.c **** 			if (IsUpper(c)) {			/* ASCII large capital? */
1901:../tasks/SDMMC/ff.c **** 				b |= 2;
1902:../tasks/SDMMC/ff.c **** 			} else {
1903:../tasks/SDMMC/ff.c **** 				if (IsLower(c)) {		/* ASCII small capital? */
1904:../tasks/SDMMC/ff.c **** 					b |= 1; c -= 0x20;
1905:../tasks/SDMMC/ff.c **** 				}
1906:../tasks/SDMMC/ff.c **** 			}
1907:../tasks/SDMMC/ff.c **** 			sfn[i++] = c;
1908:../tasks/SDMMC/ff.c **** 		}
1909:../tasks/SDMMC/ff.c **** 	}
 3619              		.loc 1 1909 0
 3620 1482 D7E7     		b	.L220
 3621              	.L229:
1881:../tasks/SDMMC/ff.c **** 			b |= 3;						/* Eliminate NT flag */
 3622              		.loc 1 1881 0
 3623 1484 BB7F     		ldrb	r3, [r7, #30]	@ zero_extendqisi2
 3624 1486 5BB2     		sxtb	r3, r3
 3625 1488 002B     		cmp	r3, #0
 3626 148a 0CDA     		bge	.L244
1882:../tasks/SDMMC/ff.c **** #ifdef _EXCVT
 3627              		.loc 1 1882 0
 3628 148c FB7F     		ldrb	r3, [r7, #31]
 3629 148e 43F00303 		orr	r3, r3, #3
 3630 1492 FB77     		strb	r3, [r7, #31]
1884:../tasks/SDMMC/ff.c **** #else
 3631              		.loc 1 1884 0
 3632 1494 BB7F     		ldrb	r3, [r7, #30]	@ zero_extendqisi2
 3633 1496 A3F18002 		sub	r2, r3, #128
 3634 149a 40F20003 		movw	r3, #:lower16:ExCvt
 3635 149e C0F20003 		movt	r3, #:upper16:ExCvt
 3636 14a2 9B5C     		ldrb	r3, [r3, r2]
 3637 14a4 BB77     		strb	r3, [r7, #30]
 3638              	.L244:
1898:../tasks/SDMMC/ff.c **** 				return FR_INVALID_NAME;
 3639              		.loc 1 1898 0
 3640 14a6 BB7F     		ldrb	r3, [r7, #30]	@ zero_extendqisi2
 3641 14a8 40F20000 		movw	r0, #:lower16:.LC0
 3642 14ac C0F20000 		movt	r0, #:upper16:.LC0
 3643 14b0 1946     		mov	r1, r3
 3644 14b2 FEF705FE 		bl	chk_chr
 3645 14b6 0346     		mov	r3, r0
 3646 14b8 002B     		cmp	r3, #0
 3647 14ba 01D0     		beq	.L234
1899:../tasks/SDMMC/ff.c **** 			if (IsUpper(c)) {			/* ASCII large capital? */
 3648              		.loc 1 1899 0
 3649 14bc 0623     		movs	r3, #6
 3650 14be 54E0     		b	.L224
 3651              	.L234:
1900:../tasks/SDMMC/ff.c **** 				b |= 2;
 3652              		.loc 1 1900 0
 3653 14c0 BB7F     		ldrb	r3, [r7, #30]	@ zero_extendqisi2
 3654 14c2 402B     		cmp	r3, #64
 3655 14c4 07D9     		bls	.L235
1900:../tasks/SDMMC/ff.c **** 				b |= 2;
 3656              		.loc 1 1900 0 is_stmt 0 discriminator 1
 3657 14c6 BB7F     		ldrb	r3, [r7, #30]	@ zero_extendqisi2
 3658 14c8 5A2B     		cmp	r3, #90
 3659 14ca 04D8     		bhi	.L235
1901:../tasks/SDMMC/ff.c **** 			} else {
 3660              		.loc 1 1901 0 is_stmt 1
 3661 14cc FB7F     		ldrb	r3, [r7, #31]
 3662 14ce 43F00203 		orr	r3, r3, #2
 3663 14d2 FB77     		strb	r3, [r7, #31]
 3664 14d4 0CE0     		b	.L236
 3665              	.L235:
1903:../tasks/SDMMC/ff.c **** 					b |= 1; c -= 0x20;
 3666              		.loc 1 1903 0
 3667 14d6 BB7F     		ldrb	r3, [r7, #30]	@ zero_extendqisi2
 3668 14d8 602B     		cmp	r3, #96
 3669 14da 09D9     		bls	.L236
1903:../tasks/SDMMC/ff.c **** 					b |= 1; c -= 0x20;
 3670              		.loc 1 1903 0 is_stmt 0 discriminator 1
 3671 14dc BB7F     		ldrb	r3, [r7, #30]	@ zero_extendqisi2
 3672 14de 7A2B     		cmp	r3, #122
 3673 14e0 06D8     		bhi	.L236
1904:../tasks/SDMMC/ff.c **** 				}
 3674              		.loc 1 1904 0 is_stmt 1
 3675 14e2 FB7F     		ldrb	r3, [r7, #31]
 3676 14e4 43F00103 		orr	r3, r3, #1
 3677 14e8 FB77     		strb	r3, [r7, #31]
 3678 14ea BB7F     		ldrb	r3, [r7, #30]
 3679 14ec 203B     		subs	r3, r3, #32
 3680 14ee BB77     		strb	r3, [r7, #30]
 3681              	.L236:
1907:../tasks/SDMMC/ff.c **** 		}
 3682              		.loc 1 1907 0
 3683 14f0 3B69     		ldr	r3, [r7, #16]
 3684 14f2 5A1C     		adds	r2, r3, #1
 3685 14f4 3A61     		str	r2, [r7, #16]
 3686 14f6 BA68     		ldr	r2, [r7, #8]
 3687 14f8 1344     		add	r3, r3, r2
 3688 14fa BA7F     		ldrb	r2, [r7, #30]
 3689 14fc 1A70     		strb	r2, [r3]
 3690              		.loc 1 1909 0
 3691 14fe 99E7     		b	.L220
 3692              	.L227:
1910:../tasks/SDMMC/ff.c **** 	*path = &p[si];						/* Return pointer to the next segment */
 3693              		.loc 1 1910 0
 3694 1500 FA68     		ldr	r2, [r7, #12]
 3695 1502 7B69     		ldr	r3, [r7, #20]
 3696 1504 1A44     		add	r2, r2, r3
 3697 1506 3B68     		ldr	r3, [r7]
 3698 1508 1A60     		str	r2, [r3]
1911:../tasks/SDMMC/ff.c **** 	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 3699              		.loc 1 1911 0
 3700 150a BB7F     		ldrb	r3, [r7, #30]	@ zero_extendqisi2
 3701 150c 202B     		cmp	r3, #32
 3702 150e 01D8     		bhi	.L237
 3703              		.loc 1 1911 0 is_stmt 0 discriminator 1
 3704 1510 0423     		movs	r3, #4
 3705 1512 00E0     		b	.L238
 3706              	.L237:
 3707              		.loc 1 1911 0 discriminator 2
 3708 1514 0023     		movs	r3, #0
 3709              	.L238:
 3710              		.loc 1 1911 0 discriminator 3
 3711 1516 BB77     		strb	r3, [r7, #30]
1912:../tasks/SDMMC/ff.c **** 
1913:../tasks/SDMMC/ff.c **** 	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 3712              		.loc 1 1913 0 is_stmt 1 discriminator 3
 3713 1518 3B69     		ldr	r3, [r7, #16]
 3714 151a 002B     		cmp	r3, #0
 3715 151c 01D1     		bne	.L239
 3716              		.loc 1 1913 0 is_stmt 0 discriminator 1
 3717 151e 0623     		movs	r3, #6
 3718 1520 23E0     		b	.L224
 3719              	.L239:
1914:../tasks/SDMMC/ff.c **** 	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first character collides with DDE, replace it with 0x05 
 3720              		.loc 1 1914 0 is_stmt 1
 3721 1522 BB68     		ldr	r3, [r7, #8]
 3722 1524 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3723 1526 E52B     		cmp	r3, #229
 3724 1528 02D1     		bne	.L240
 3725              		.loc 1 1914 0 is_stmt 0 discriminator 1
 3726 152a BB68     		ldr	r3, [r7, #8]
 3727 152c 0522     		movs	r2, #5
 3728 152e 1A70     		strb	r2, [r3]
 3729              	.L240:
1915:../tasks/SDMMC/ff.c **** 
1916:../tasks/SDMMC/ff.c **** 	if (ni == 8) b <<= 2;
 3730              		.loc 1 1916 0 is_stmt 1
 3731 1530 BB69     		ldr	r3, [r7, #24]
 3732 1532 082B     		cmp	r3, #8
 3733 1534 02D1     		bne	.L241
 3734              		.loc 1 1916 0 is_stmt 0 discriminator 1
 3735 1536 FB7F     		ldrb	r3, [r7, #31]
 3736 1538 9B00     		lsls	r3, r3, #2
 3737 153a FB77     		strb	r3, [r7, #31]
 3738              	.L241:
1917:../tasks/SDMMC/ff.c **** 	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 3739              		.loc 1 1917 0 is_stmt 1
 3740 153c FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 3741 153e 03F00303 		and	r3, r3, #3
 3742 1542 012B     		cmp	r3, #1
 3743 1544 03D1     		bne	.L242
 3744              		.loc 1 1917 0 is_stmt 0 discriminator 1
 3745 1546 BB7F     		ldrb	r3, [r7, #30]
 3746 1548 43F01003 		orr	r3, r3, #16
 3747 154c BB77     		strb	r3, [r7, #30]
 3748              	.L242:
1918:../tasks/SDMMC/ff.c **** 	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 3749              		.loc 1 1918 0 is_stmt 1
 3750 154e FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 3751 1550 03F00C03 		and	r3, r3, #12
 3752 1554 042B     		cmp	r3, #4
 3753 1556 03D1     		bne	.L243
 3754              		.loc 1 1918 0 is_stmt 0 discriminator 1
 3755 1558 BB7F     		ldrb	r3, [r7, #30]
 3756 155a 43F00803 		orr	r3, r3, #8
 3757 155e BB77     		strb	r3, [r7, #30]
 3758              	.L243:
1919:../tasks/SDMMC/ff.c **** 
1920:../tasks/SDMMC/ff.c **** 	sfn[NS] = c;		/* Store NT flag, File name is created */
 3759              		.loc 1 1920 0 is_stmt 1
 3760 1560 BB68     		ldr	r3, [r7, #8]
 3761 1562 0B33     		adds	r3, r3, #11
 3762 1564 BA7F     		ldrb	r2, [r7, #30]
 3763 1566 1A70     		strb	r2, [r3]
1921:../tasks/SDMMC/ff.c **** 
1922:../tasks/SDMMC/ff.c **** 	return FR_OK;
 3764              		.loc 1 1922 0
 3765 1568 0023     		movs	r3, #0
 3766              	.L224:
1923:../tasks/SDMMC/ff.c **** #endif
1924:../tasks/SDMMC/ff.c **** }
 3767              		.loc 1 1924 0
 3768 156a 1846     		mov	r0, r3
 3769 156c 2037     		adds	r7, r7, #32
 3770 156e BD46     		mov	sp, r7
 3771              		@ sp needed
 3772 1570 80BD     		pop	{r7, pc}
 3773              		.cfi_endproc
 3774              	.LFE82:
 3776 1572 00BF     		.align	2
 3777              		.thumb
 3778              		.thumb_func
 3780              	get_fileinfo:
 3781              	.LFB83:
1925:../tasks/SDMMC/ff.c **** 
1926:../tasks/SDMMC/ff.c **** 
1927:../tasks/SDMMC/ff.c **** 
1928:../tasks/SDMMC/ff.c **** 
1929:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
1930:../tasks/SDMMC/ff.c **** /* Get file information from directory entry                             */
1931:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
1932:../tasks/SDMMC/ff.c **** #if _FS_MINIMIZE <= 1 || _FS_RPATH >= 2
1933:../tasks/SDMMC/ff.c **** static
1934:../tasks/SDMMC/ff.c **** void get_fileinfo (		/* No return code */
1935:../tasks/SDMMC/ff.c **** 	DIR* dp,			/* Pointer to the directory object */
1936:../tasks/SDMMC/ff.c **** 	FILINFO* fno	 	/* Pointer to the file information to be filled */
1937:../tasks/SDMMC/ff.c **** )
1938:../tasks/SDMMC/ff.c **** {
 3782              		.loc 1 1938 0
 3783              		.cfi_startproc
 3784              		@ args = 0, pretend = 0, frame = 24
 3785              		@ frame_needed = 1, uses_anonymous_args = 0
 3786              		@ link register save eliminated.
 3787 1574 80B4     		push	{r7}
 3788              		.cfi_def_cfa_offset 4
 3789              		.cfi_offset 7, -4
 3790 1576 87B0     		sub	sp, sp, #28
 3791              		.cfi_def_cfa_offset 32
 3792 1578 00AF     		add	r7, sp, #0
 3793              		.cfi_def_cfa_register 7
 3794 157a 7860     		str	r0, [r7, #4]
 3795 157c 3960     		str	r1, [r7]
1939:../tasks/SDMMC/ff.c **** 	UINT i;
1940:../tasks/SDMMC/ff.c **** 	TCHAR *p, c;
1941:../tasks/SDMMC/ff.c **** 
1942:../tasks/SDMMC/ff.c **** 
1943:../tasks/SDMMC/ff.c **** 	p = fno->fname;
 3796              		.loc 1 1943 0
 3797 157e 3B68     		ldr	r3, [r7]
 3798 1580 0933     		adds	r3, r3, #9
 3799 1582 3B61     		str	r3, [r7, #16]
1944:../tasks/SDMMC/ff.c **** 	if (dp->sect) {		/* Get SFN */
 3800              		.loc 1 1944 0
 3801 1584 7B68     		ldr	r3, [r7, #4]
 3802 1586 D3F81032 		ldr	r3, [r3, #528]
 3803 158a 002B     		cmp	r3, #0
 3804 158c 58D0     		beq	.L246
 3805              	.LBB3:
1945:../tasks/SDMMC/ff.c **** 		BYTE *dir = dp->dir;
 3806              		.loc 1 1945 0
 3807 158e 7B68     		ldr	r3, [r7, #4]
 3808 1590 D3F81432 		ldr	r3, [r3, #532]
 3809 1594 BB60     		str	r3, [r7, #8]
1946:../tasks/SDMMC/ff.c **** 
1947:../tasks/SDMMC/ff.c **** 		i = 0;
 3810              		.loc 1 1947 0
 3811 1596 0023     		movs	r3, #0
 3812 1598 7B61     		str	r3, [r7, #20]
1948:../tasks/SDMMC/ff.c **** 		while (i < 11) {		/* Copy name body and extension */
 3813              		.loc 1 1948 0
 3814 159a 1CE0     		b	.L247
 3815              	.L251:
1949:../tasks/SDMMC/ff.c **** 			c = (TCHAR)dir[i++];
 3816              		.loc 1 1949 0
 3817 159c 7B69     		ldr	r3, [r7, #20]
 3818 159e 5A1C     		adds	r2, r3, #1
 3819 15a0 7A61     		str	r2, [r7, #20]
 3820 15a2 BA68     		ldr	r2, [r7, #8]
 3821 15a4 1344     		add	r3, r3, r2
 3822 15a6 1B78     		ldrb	r3, [r3]
 3823 15a8 FB73     		strb	r3, [r7, #15]
1950:../tasks/SDMMC/ff.c **** 			if (c == ' ') continue;			/* Skip padding spaces */
 3824              		.loc 1 1950 0
 3825 15aa FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 3826 15ac 202B     		cmp	r3, #32
 3827 15ae 00D1     		bne	.L248
 3828              		.loc 1 1950 0 is_stmt 0 discriminator 1
 3829 15b0 11E0     		b	.L247
 3830              	.L248:
1951:../tasks/SDMMC/ff.c **** 			if (c == NDDE) c = (TCHAR)DDE;	/* Restore replaced DDE character */
 3831              		.loc 1 1951 0 is_stmt 1
 3832 15b2 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 3833 15b4 052B     		cmp	r3, #5
 3834 15b6 01D1     		bne	.L249
 3835              		.loc 1 1951 0 is_stmt 0 discriminator 1
 3836 15b8 E523     		movs	r3, #229
 3837 15ba FB73     		strb	r3, [r7, #15]
 3838              	.L249:
1952:../tasks/SDMMC/ff.c **** 			if (i == 9) *p++ = '.';			/* Insert a . if extension is exist */
 3839              		.loc 1 1952 0 is_stmt 1
 3840 15bc 7B69     		ldr	r3, [r7, #20]
 3841 15be 092B     		cmp	r3, #9
 3842 15c0 04D1     		bne	.L250
 3843              		.loc 1 1952 0 is_stmt 0 discriminator 1
 3844 15c2 3B69     		ldr	r3, [r7, #16]
 3845 15c4 5A1C     		adds	r2, r3, #1
 3846 15c6 3A61     		str	r2, [r7, #16]
 3847 15c8 2E22     		movs	r2, #46
 3848 15ca 1A70     		strb	r2, [r3]
 3849              	.L250:
1953:../tasks/SDMMC/ff.c **** #if _USE_LFN
1954:../tasks/SDMMC/ff.c **** 			if (IsUpper(c) && (dir[DIR_NTres] & (i >= 9 ? NS_EXT : NS_BODY)))
1955:../tasks/SDMMC/ff.c **** 				c += 0x20;			/* To lower */
1956:../tasks/SDMMC/ff.c **** #if _LFN_UNICODE
1957:../tasks/SDMMC/ff.c **** 			if (IsDBCS1(c) && i != 8 && i != 11 && IsDBCS2(dir[i]))
1958:../tasks/SDMMC/ff.c **** 				c = c << 8 | dir[i++];
1959:../tasks/SDMMC/ff.c **** 			c = ff_convert(c, 1);	/* OEM -> Unicode */
1960:../tasks/SDMMC/ff.c **** 			if (!c) c = '?';
1961:../tasks/SDMMC/ff.c **** #endif
1962:../tasks/SDMMC/ff.c **** #endif
1963:../tasks/SDMMC/ff.c **** 			*p++ = c;
 3850              		.loc 1 1963 0 is_stmt 1
 3851 15cc 3B69     		ldr	r3, [r7, #16]
 3852 15ce 5A1C     		adds	r2, r3, #1
 3853 15d0 3A61     		str	r2, [r7, #16]
 3854 15d2 FA7B     		ldrb	r2, [r7, #15]
 3855 15d4 1A70     		strb	r2, [r3]
 3856              	.L247:
1948:../tasks/SDMMC/ff.c **** 			c = (TCHAR)dir[i++];
 3857              		.loc 1 1948 0 discriminator 1
 3858 15d6 7B69     		ldr	r3, [r7, #20]
 3859 15d8 0A2B     		cmp	r3, #10
 3860 15da DFD9     		bls	.L251
1964:../tasks/SDMMC/ff.c **** 		}
1965:../tasks/SDMMC/ff.c **** 		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 3861              		.loc 1 1965 0
 3862 15dc BB68     		ldr	r3, [r7, #8]
 3863 15de DA7A     		ldrb	r2, [r3, #11]	@ zero_extendqisi2
 3864 15e0 3B68     		ldr	r3, [r7]
 3865 15e2 1A72     		strb	r2, [r3, #8]
1966:../tasks/SDMMC/ff.c **** 		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
 3866              		.loc 1 1966 0
 3867 15e4 BB68     		ldr	r3, [r7, #8]
 3868 15e6 1F33     		adds	r3, r3, #31
 3869 15e8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3870 15ea 1A06     		lsls	r2, r3, #24
 3871 15ec BB68     		ldr	r3, [r7, #8]
 3872 15ee 1E33     		adds	r3, r3, #30
 3873 15f0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3874 15f2 1B04     		lsls	r3, r3, #16
 3875 15f4 1A43     		orrs	r2, r2, r3
 3876 15f6 BB68     		ldr	r3, [r7, #8]
 3877 15f8 1D33     		adds	r3, r3, #29
 3878 15fa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3879 15fc 1B02     		lsls	r3, r3, #8
 3880 15fe 1A43     		orrs	r2, r2, r3
 3881 1600 BB68     		ldr	r3, [r7, #8]
 3882 1602 1C33     		adds	r3, r3, #28
 3883 1604 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3884 1606 1A43     		orrs	r2, r2, r3
 3885 1608 3B68     		ldr	r3, [r7]
 3886 160a 1A60     		str	r2, [r3]
1967:../tasks/SDMMC/ff.c **** 		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
 3887              		.loc 1 1967 0
 3888 160c BB68     		ldr	r3, [r7, #8]
 3889 160e 1933     		adds	r3, r3, #25
 3890 1610 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3891 1612 1B02     		lsls	r3, r3, #8
 3892 1614 9AB2     		uxth	r2, r3
 3893 1616 BB68     		ldr	r3, [r7, #8]
 3894 1618 1833     		adds	r3, r3, #24
 3895 161a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3896 161c 1343     		orrs	r3, r3, r2
 3897 161e 9BB2     		uxth	r3, r3
 3898 1620 9AB2     		uxth	r2, r3
 3899 1622 3B68     		ldr	r3, [r7]
 3900 1624 9A80     		strh	r2, [r3, #4]	@ movhi
1968:../tasks/SDMMC/ff.c **** 		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
 3901              		.loc 1 1968 0
 3902 1626 BB68     		ldr	r3, [r7, #8]
 3903 1628 1733     		adds	r3, r3, #23
 3904 162a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3905 162c 1B02     		lsls	r3, r3, #8
 3906 162e 9AB2     		uxth	r2, r3
 3907 1630 BB68     		ldr	r3, [r7, #8]
 3908 1632 1633     		adds	r3, r3, #22
 3909 1634 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3910 1636 1343     		orrs	r3, r3, r2
 3911 1638 9BB2     		uxth	r3, r3
 3912 163a 9AB2     		uxth	r2, r3
 3913 163c 3B68     		ldr	r3, [r7]
 3914 163e DA80     		strh	r2, [r3, #6]	@ movhi
 3915              	.L246:
 3916              	.LBE3:
1969:../tasks/SDMMC/ff.c **** 	}
1970:../tasks/SDMMC/ff.c **** 	*p = 0;		/* Terminate SFN string by a \0 */
 3917              		.loc 1 1970 0
 3918 1640 3B69     		ldr	r3, [r7, #16]
 3919 1642 0022     		movs	r2, #0
 3920 1644 1A70     		strb	r2, [r3]
1971:../tasks/SDMMC/ff.c **** 
1972:../tasks/SDMMC/ff.c **** #if _USE_LFN
1973:../tasks/SDMMC/ff.c **** 	if (fno->lfname) {
1974:../tasks/SDMMC/ff.c **** 		WCHAR w, *lfn;
1975:../tasks/SDMMC/ff.c **** 
1976:../tasks/SDMMC/ff.c **** 		i = 0; p = fno->lfname;
1977:../tasks/SDMMC/ff.c **** 		if (dp->sect && fno->lfsize && dp->lfn_idx != 0xFFFF) {	/* Get LFN if available */
1978:../tasks/SDMMC/ff.c **** 			lfn = dp->lfn;
1979:../tasks/SDMMC/ff.c **** 			while ((w = *lfn++) != 0) {		/* Get an LFN character */
1980:../tasks/SDMMC/ff.c **** #if !_LFN_UNICODE
1981:../tasks/SDMMC/ff.c **** 				w = ff_convert(w, 0);		/* Unicode -> OEM */
1982:../tasks/SDMMC/ff.c **** 				if (!w) { i = 0; break; }	/* No LFN if it could not be converted */
1983:../tasks/SDMMC/ff.c **** 				if (_DF1S && w >= 0x100)	/* Put 1st byte if it is a DBC (always false on SBCS cfg) */
1984:../tasks/SDMMC/ff.c **** 					p[i++] = (TCHAR)(w >> 8);
1985:../tasks/SDMMC/ff.c **** #endif
1986:../tasks/SDMMC/ff.c **** 				if (i >= fno->lfsize - 1) { i = 0; break; }	/* No LFN if buffer overflow */
1987:../tasks/SDMMC/ff.c **** 				p[i++] = (TCHAR)w;
1988:../tasks/SDMMC/ff.c **** 			}
1989:../tasks/SDMMC/ff.c **** 		}
1990:../tasks/SDMMC/ff.c **** 		p[i] = 0;	/* Terminate LFN string by a \0 */
1991:../tasks/SDMMC/ff.c **** 	}
1992:../tasks/SDMMC/ff.c **** #endif
1993:../tasks/SDMMC/ff.c **** }
 3921              		.loc 1 1993 0
 3922 1646 1C37     		adds	r7, r7, #28
 3923 1648 BD46     		mov	sp, r7
 3924              		@ sp needed
 3925 164a 5DF8047B 		ldr	r7, [sp], #4
 3926 164e 7047     		bx	lr
 3927              		.cfi_endproc
 3928              	.LFE83:
 3930              		.align	2
 3931              		.thumb
 3932              		.thumb_func
 3934              	get_ldnumber:
 3935              	.LFB84:
1994:../tasks/SDMMC/ff.c **** #endif /* _FS_MINIMIZE <= 1 || _FS_RPATH >= 2*/
1995:../tasks/SDMMC/ff.c **** 
1996:../tasks/SDMMC/ff.c **** 
1997:../tasks/SDMMC/ff.c **** 
1998:../tasks/SDMMC/ff.c **** 
1999:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
2000:../tasks/SDMMC/ff.c **** /* Get logical drive number from path name                               */
2001:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
2002:../tasks/SDMMC/ff.c **** 
2003:../tasks/SDMMC/ff.c **** static
2004:../tasks/SDMMC/ff.c **** int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
2005:../tasks/SDMMC/ff.c **** 	const TCHAR** path	/* Pointer to pointer to the path name */
2006:../tasks/SDMMC/ff.c **** )
2007:../tasks/SDMMC/ff.c **** {
 3936              		.loc 1 2007 0
 3937              		.cfi_startproc
 3938              		@ args = 0, pretend = 0, frame = 16
 3939              		@ frame_needed = 1, uses_anonymous_args = 0
 3940              		@ link register save eliminated.
 3941 1650 80B4     		push	{r7}
 3942              		.cfi_def_cfa_offset 4
 3943              		.cfi_offset 7, -4
 3944 1652 85B0     		sub	sp, sp, #20
 3945              		.cfi_def_cfa_offset 24
 3946 1654 00AF     		add	r7, sp, #0
 3947              		.cfi_def_cfa_register 7
 3948 1656 7860     		str	r0, [r7, #4]
2008:../tasks/SDMMC/ff.c **** 	int vol = -1;
 3949              		.loc 1 2008 0
 3950 1658 4FF0FF33 		mov	r3, #-1
 3951 165c FB60     		str	r3, [r7, #12]
2009:../tasks/SDMMC/ff.c **** 
2010:../tasks/SDMMC/ff.c **** 
2011:../tasks/SDMMC/ff.c **** 	if (*path) {
 3952              		.loc 1 2011 0
 3953 165e 7B68     		ldr	r3, [r7, #4]
 3954 1660 1B68     		ldr	r3, [r3]
 3955 1662 002B     		cmp	r3, #0
 3956 1664 20D0     		beq	.L253
2012:../tasks/SDMMC/ff.c **** 		vol = (*path)[0] - '0';
 3957              		.loc 1 2012 0
 3958 1666 7B68     		ldr	r3, [r7, #4]
 3959 1668 1B68     		ldr	r3, [r3]
 3960 166a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3961 166c 303B     		subs	r3, r3, #48
 3962 166e FB60     		str	r3, [r7, #12]
2013:../tasks/SDMMC/ff.c **** 		if ((UINT)vol < 9 && (*path)[1] == ':') {	/* There is a drive number */
 3963              		.loc 1 2013 0
 3964 1670 FB68     		ldr	r3, [r7, #12]
 3965 1672 082B     		cmp	r3, #8
 3966 1674 12D8     		bhi	.L254
 3967              		.loc 1 2013 0 is_stmt 0 discriminator 1
 3968 1676 7B68     		ldr	r3, [r7, #4]
 3969 1678 1B68     		ldr	r3, [r3]
 3970 167a 0133     		adds	r3, r3, #1
 3971 167c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3972 167e 3A2B     		cmp	r3, #58
 3973 1680 0CD1     		bne	.L254
2014:../tasks/SDMMC/ff.c **** 			*path += 2;		/* Get value and strip it */
 3974              		.loc 1 2014 0 is_stmt 1
 3975 1682 7B68     		ldr	r3, [r7, #4]
 3976 1684 1B68     		ldr	r3, [r3]
 3977 1686 9A1C     		adds	r2, r3, #2
 3978 1688 7B68     		ldr	r3, [r7, #4]
 3979 168a 1A60     		str	r2, [r3]
2015:../tasks/SDMMC/ff.c **** 			if (vol >= _VOLUMES) vol = -1;	/* Check if the drive number is valid */
 3980              		.loc 1 2015 0
 3981 168c FB68     		ldr	r3, [r7, #12]
 3982 168e 022B     		cmp	r3, #2
 3983 1690 03DD     		ble	.L255
 3984              		.loc 1 2015 0 is_stmt 0 discriminator 1
 3985 1692 4FF0FF33 		mov	r3, #-1
 3986 1696 FB60     		str	r3, [r7, #12]
 3987 1698 06E0     		b	.L253
 3988              	.L255:
 3989              		.loc 1 2015 0 discriminator 2
 3990 169a 05E0     		b	.L253
 3991              	.L254:
2016:../tasks/SDMMC/ff.c **** 		} else {			/* No drive number use default drive */
2017:../tasks/SDMMC/ff.c **** #if _FS_RPATH && _VOLUMES >= 2
2018:../tasks/SDMMC/ff.c **** 			vol = CurrVol;	/* Current drive */
 3992              		.loc 1 2018 0 is_stmt 1
 3993 169c 40F20003 		movw	r3, #:lower16:CurrVol
 3994 16a0 C0F20003 		movt	r3, #:upper16:CurrVol
 3995 16a4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3996 16a6 FB60     		str	r3, [r7, #12]
 3997              	.L253:
2019:../tasks/SDMMC/ff.c **** #else
2020:../tasks/SDMMC/ff.c **** 			vol = 0;		/* Drive 0 */
2021:../tasks/SDMMC/ff.c **** #endif
2022:../tasks/SDMMC/ff.c **** 		}
2023:../tasks/SDMMC/ff.c **** 	}
2024:../tasks/SDMMC/ff.c **** 
2025:../tasks/SDMMC/ff.c **** 	return vol;
 3998              		.loc 1 2025 0
 3999 16a8 FB68     		ldr	r3, [r7, #12]
2026:../tasks/SDMMC/ff.c **** }
 4000              		.loc 1 2026 0
 4001 16aa 1846     		mov	r0, r3
 4002 16ac 1437     		adds	r7, r7, #20
 4003 16ae BD46     		mov	sp, r7
 4004              		@ sp needed
 4005 16b0 5DF8047B 		ldr	r7, [sp], #4
 4006 16b4 7047     		bx	lr
 4007              		.cfi_endproc
 4008              	.LFE84:
 4010 16b6 00BF     		.align	2
 4011              		.thumb
 4012              		.thumb_func
 4014              	follow_path:
 4015              	.LFB85:
2027:../tasks/SDMMC/ff.c **** 
2028:../tasks/SDMMC/ff.c **** 
2029:../tasks/SDMMC/ff.c **** 
2030:../tasks/SDMMC/ff.c **** 
2031:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
2032:../tasks/SDMMC/ff.c **** /* Follow a file path                                                    */
2033:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
2034:../tasks/SDMMC/ff.c **** 
2035:../tasks/SDMMC/ff.c **** static
2036:../tasks/SDMMC/ff.c **** FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
2037:../tasks/SDMMC/ff.c **** 	DIR* dp,			/* Directory object to return last directory and found object */
2038:../tasks/SDMMC/ff.c **** 	const TCHAR* path	/* Full-path string to find a file or directory */
2039:../tasks/SDMMC/ff.c **** )
2040:../tasks/SDMMC/ff.c **** {
 4016              		.loc 1 2040 0
 4017              		.cfi_startproc
 4018              		@ args = 0, pretend = 0, frame = 16
 4019              		@ frame_needed = 1, uses_anonymous_args = 0
 4020 16b8 80B5     		push	{r7, lr}
 4021              		.cfi_def_cfa_offset 8
 4022              		.cfi_offset 7, -8
 4023              		.cfi_offset 14, -4
 4024 16ba 84B0     		sub	sp, sp, #16
 4025              		.cfi_def_cfa_offset 24
 4026 16bc 00AF     		add	r7, sp, #0
 4027              		.cfi_def_cfa_register 7
 4028 16be 7860     		str	r0, [r7, #4]
 4029 16c0 3960     		str	r1, [r7]
2041:../tasks/SDMMC/ff.c **** 	FRESULT res;
2042:../tasks/SDMMC/ff.c **** 	BYTE *dir, ns;
2043:../tasks/SDMMC/ff.c **** 
2044:../tasks/SDMMC/ff.c **** 
2045:../tasks/SDMMC/ff.c **** #if _FS_RPATH
2046:../tasks/SDMMC/ff.c **** 	if (*path == '/' || *path == '\\') {	/* There is a heading separator */
 4030              		.loc 1 2046 0
 4031 16c2 3B68     		ldr	r3, [r7]
 4032 16c4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4033 16c6 2F2B     		cmp	r3, #47
 4034 16c8 03D0     		beq	.L258
 4035              		.loc 1 2046 0 is_stmt 0 discriminator 1
 4036 16ca 3B68     		ldr	r3, [r7]
 4037 16cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4038 16ce 5C2B     		cmp	r3, #92
 4039 16d0 07D1     		bne	.L259
 4040              	.L258:
2047:../tasks/SDMMC/ff.c **** 		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
 4041              		.loc 1 2047 0 is_stmt 1
 4042 16d2 3B68     		ldr	r3, [r7]
 4043 16d4 0133     		adds	r3, r3, #1
 4044 16d6 3B60     		str	r3, [r7]
 4045 16d8 7B68     		ldr	r3, [r7, #4]
 4046 16da 0022     		movs	r2, #0
 4047 16dc C3F80822 		str	r2, [r3, #520]
 4048 16e0 07E0     		b	.L260
 4049              	.L259:
2048:../tasks/SDMMC/ff.c **** 	} else {								/* No heading separator */
2049:../tasks/SDMMC/ff.c **** 		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
 4050              		.loc 1 2049 0
 4051 16e2 7B68     		ldr	r3, [r7, #4]
 4052 16e4 D3F80032 		ldr	r3, [r3, #512]
 4053 16e8 D3F81422 		ldr	r2, [r3, #532]
 4054 16ec 7B68     		ldr	r3, [r7, #4]
 4055 16ee C3F80822 		str	r2, [r3, #520]
 4056              	.L260:
2050:../tasks/SDMMC/ff.c **** 	}
2051:../tasks/SDMMC/ff.c **** #else
2052:../tasks/SDMMC/ff.c **** 	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
2053:../tasks/SDMMC/ff.c **** 		path++;
2054:../tasks/SDMMC/ff.c **** 	dp->sclust = 0;							/* Always start from the root directory */
2055:../tasks/SDMMC/ff.c **** #endif
2056:../tasks/SDMMC/ff.c **** 
2057:../tasks/SDMMC/ff.c **** 	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 4057              		.loc 1 2057 0
 4058 16f2 3B68     		ldr	r3, [r7]
 4059 16f4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4060 16f6 1F2B     		cmp	r3, #31
 4061 16f8 0AD8     		bhi	.L261
2058:../tasks/SDMMC/ff.c **** 		res = dir_sdi(dp, 0);
 4062              		.loc 1 2058 0
 4063 16fa 7868     		ldr	r0, [r7, #4]
 4064 16fc 0021     		movs	r1, #0
 4065 16fe FFF703FB 		bl	dir_sdi
 4066 1702 0346     		mov	r3, r0
 4067 1704 FB73     		strb	r3, [r7, #15]
2059:../tasks/SDMMC/ff.c **** 		dp->dir = 0;
 4068              		.loc 1 2059 0
 4069 1706 7B68     		ldr	r3, [r7, #4]
 4070 1708 0022     		movs	r2, #0
 4071 170a C3F81422 		str	r2, [r3, #532]
 4072 170e 5AE0     		b	.L262
 4073              	.L261:
2060:../tasks/SDMMC/ff.c **** 	} else {								/* Follow path */
2061:../tasks/SDMMC/ff.c **** 		for (;;) {
2062:../tasks/SDMMC/ff.c **** 			res = create_name(dp, &path);	/* Get a segment name of the path */
 4074              		.loc 1 2062 0
 4075 1710 3B46     		mov	r3, r7
 4076 1712 7868     		ldr	r0, [r7, #4]
 4077 1714 1946     		mov	r1, r3
 4078 1716 FFF731FE 		bl	create_name
 4079 171a 0346     		mov	r3, r0
 4080 171c FB73     		strb	r3, [r7, #15]
2063:../tasks/SDMMC/ff.c **** 			if (res != FR_OK) break;
 4081              		.loc 1 2063 0
 4082 171e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 4083 1720 002B     		cmp	r3, #0
 4084 1722 00D0     		beq	.L263
 4085              		.loc 1 2063 0 is_stmt 0 discriminator 1
 4086 1724 4FE0     		b	.L262
 4087              	.L263:
2064:../tasks/SDMMC/ff.c **** 			res = dir_find(dp);				/* Find an object with the sagment name */
 4088              		.loc 1 2064 0 is_stmt 1
 4089 1726 7868     		ldr	r0, [r7, #4]
 4090 1728 FFF718FD 		bl	dir_find
 4091 172c 0346     		mov	r3, r0
 4092 172e FB73     		strb	r3, [r7, #15]
2065:../tasks/SDMMC/ff.c **** 			ns = dp->fn[NS];
 4093              		.loc 1 2065 0
 4094 1730 7B68     		ldr	r3, [r7, #4]
 4095 1732 D3F81832 		ldr	r3, [r3, #536]
 4096 1736 DB7A     		ldrb	r3, [r3, #11]
 4097 1738 BB73     		strb	r3, [r7, #14]
2066:../tasks/SDMMC/ff.c **** 			if (res != FR_OK) {				/* Failed to find the object */
 4098              		.loc 1 2066 0
 4099 173a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 4100 173c 002B     		cmp	r3, #0
 4101 173e 22D0     		beq	.L264
2067:../tasks/SDMMC/ff.c **** 				if (res == FR_NO_FILE) {	/* Object is not found */
 4102              		.loc 1 2067 0
 4103 1740 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 4104 1742 042B     		cmp	r3, #4
 4105 1744 1ED1     		bne	.L265
2068:../tasks/SDMMC/ff.c **** 					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
 4106              		.loc 1 2068 0
 4107 1746 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 4108 1748 03F02003 		and	r3, r3, #32
 4109 174c 002B     		cmp	r3, #0
 4110 174e 11D0     		beq	.L266
2069:../tasks/SDMMC/ff.c **** 						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
 4111              		.loc 1 2069 0
 4112 1750 7B68     		ldr	r3, [r7, #4]
 4113 1752 0022     		movs	r2, #0
 4114 1754 C3F80822 		str	r2, [r3, #520]
 4115 1758 7B68     		ldr	r3, [r7, #4]
 4116 175a 0022     		movs	r2, #0
 4117 175c C3F81422 		str	r2, [r3, #532]
2070:../tasks/SDMMC/ff.c **** 						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 4118              		.loc 1 2070 0
 4119 1760 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 4120 1762 03F00403 		and	r3, r3, #4
 4121 1766 002B     		cmp	r3, #0
 4122 1768 01D1     		bne	.L267
 4123              		.loc 1 2070 0 is_stmt 0 discriminator 1
 4124 176a 00BF     		nop
2071:../tasks/SDMMC/ff.c **** 						res = FR_OK;					/* Ended at the root directroy. Function completed. */
2072:../tasks/SDMMC/ff.c **** 					} else {							/* Could not find the object */
2073:../tasks/SDMMC/ff.c **** 						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
2074:../tasks/SDMMC/ff.c **** 					}
2075:../tasks/SDMMC/ff.c **** 				}
2076:../tasks/SDMMC/ff.c **** 				break;
2077:../tasks/SDMMC/ff.c **** 			}
2078:../tasks/SDMMC/ff.c **** 			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
2079:../tasks/SDMMC/ff.c **** 			dir = dp->dir;						/* Follow the sub-directory */
2080:../tasks/SDMMC/ff.c **** 			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
2081:../tasks/SDMMC/ff.c **** 				res = FR_NO_PATH; break;
2082:../tasks/SDMMC/ff.c **** 			}
2083:../tasks/SDMMC/ff.c **** 			dp->sclust = ld_clust(dp->fs, dir);
2084:../tasks/SDMMC/ff.c **** 		}
 4125              		.loc 1 2084 0 is_stmt 1 discriminator 1
 4126 176c D0E7     		b	.L261
 4127              	.L267:
2071:../tasks/SDMMC/ff.c **** 						res = FR_OK;					/* Ended at the root directroy. Function completed. */
 4128              		.loc 1 2071 0
 4129 176e 0023     		movs	r3, #0
 4130 1770 FB73     		strb	r3, [r7, #15]
 4131 1772 07E0     		b	.L265
 4132              	.L266:
2073:../tasks/SDMMC/ff.c **** 					}
 4133              		.loc 1 2073 0
 4134 1774 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 4135 1776 03F00403 		and	r3, r3, #4
 4136 177a 002B     		cmp	r3, #0
 4137 177c 02D1     		bne	.L265
2073:../tasks/SDMMC/ff.c **** 					}
 4138              		.loc 1 2073 0 is_stmt 0 discriminator 1
 4139 177e 0523     		movs	r3, #5
 4140 1780 FB73     		strb	r3, [r7, #15]
2076:../tasks/SDMMC/ff.c **** 			}
 4141              		.loc 1 2076 0 is_stmt 1 discriminator 1
 4142 1782 20E0     		b	.L262
 4143              	.L265:
2076:../tasks/SDMMC/ff.c **** 			}
 4144              		.loc 1 2076 0 is_stmt 0
 4145 1784 1FE0     		b	.L262
 4146              	.L264:
2078:../tasks/SDMMC/ff.c **** 			dir = dp->dir;						/* Follow the sub-directory */
 4147              		.loc 1 2078 0 is_stmt 1
 4148 1786 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 4149 1788 03F00403 		and	r3, r3, #4
 4150 178c 002B     		cmp	r3, #0
 4151 178e 00D0     		beq	.L269
2078:../tasks/SDMMC/ff.c **** 			dir = dp->dir;						/* Follow the sub-directory */
 4152              		.loc 1 2078 0 is_stmt 0 discriminator 1
 4153 1790 19E0     		b	.L262
 4154              	.L269:
2079:../tasks/SDMMC/ff.c **** 			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 4155              		.loc 1 2079 0 is_stmt 1
 4156 1792 7B68     		ldr	r3, [r7, #4]
 4157 1794 D3F81432 		ldr	r3, [r3, #532]
 4158 1798 BB60     		str	r3, [r7, #8]
2080:../tasks/SDMMC/ff.c **** 				res = FR_NO_PATH; break;
 4159              		.loc 1 2080 0
 4160 179a BB68     		ldr	r3, [r7, #8]
 4161 179c 0B33     		adds	r3, r3, #11
 4162 179e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4163 17a0 03F01003 		and	r3, r3, #16
 4164 17a4 002B     		cmp	r3, #0
 4165 17a6 02D1     		bne	.L270
2081:../tasks/SDMMC/ff.c **** 			}
 4166              		.loc 1 2081 0
 4167 17a8 0523     		movs	r3, #5
 4168 17aa FB73     		strb	r3, [r7, #15]
 4169 17ac 0BE0     		b	.L262
 4170              	.L270:
2083:../tasks/SDMMC/ff.c **** 		}
 4171              		.loc 1 2083 0
 4172 17ae 7B68     		ldr	r3, [r7, #4]
 4173 17b0 D3F80032 		ldr	r3, [r3, #512]
 4174 17b4 1846     		mov	r0, r3
 4175 17b6 B968     		ldr	r1, [r7, #8]
 4176 17b8 FFF77EFC 		bl	ld_clust
 4177 17bc 0246     		mov	r2, r0
 4178 17be 7B68     		ldr	r3, [r7, #4]
 4179 17c0 C3F80822 		str	r2, [r3, #520]
 4180              		.loc 1 2084 0
 4181 17c4 A4E7     		b	.L261
 4182              	.L262:
2085:../tasks/SDMMC/ff.c **** 	}
2086:../tasks/SDMMC/ff.c **** 
2087:../tasks/SDMMC/ff.c **** 	return res;
 4183              		.loc 1 2087 0
 4184 17c6 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
2088:../tasks/SDMMC/ff.c **** }
 4185              		.loc 1 2088 0
 4186 17c8 1846     		mov	r0, r3
 4187 17ca 1037     		adds	r7, r7, #16
 4188 17cc BD46     		mov	sp, r7
 4189              		@ sp needed
 4190 17ce 80BD     		pop	{r7, pc}
 4191              		.cfi_endproc
 4192              	.LFE85:
 4194              		.align	2
 4195              		.thumb
 4196              		.thumb_func
 4198              	check_fs:
 4199              	.LFB86:
2089:../tasks/SDMMC/ff.c **** 
2090:../tasks/SDMMC/ff.c **** 
2091:../tasks/SDMMC/ff.c **** 
2092:../tasks/SDMMC/ff.c **** 
2093:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
2094:../tasks/SDMMC/ff.c **** /* Load a sector and check if it is an FAT boot sector                   */
2095:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
2096:../tasks/SDMMC/ff.c **** 
2097:../tasks/SDMMC/ff.c **** static
2098:../tasks/SDMMC/ff.c **** BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk 
2099:../tasks/SDMMC/ff.c **** 	FATFS* fs,	/* File system object */
2100:../tasks/SDMMC/ff.c **** 	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
2101:../tasks/SDMMC/ff.c **** )
2102:../tasks/SDMMC/ff.c **** {
 4200              		.loc 1 2102 0
 4201              		.cfi_startproc
 4202              		@ args = 0, pretend = 0, frame = 8
 4203              		@ frame_needed = 1, uses_anonymous_args = 0
 4204 17d0 80B5     		push	{r7, lr}
 4205              		.cfi_def_cfa_offset 8
 4206              		.cfi_offset 7, -8
 4207              		.cfi_offset 14, -4
 4208 17d2 82B0     		sub	sp, sp, #8
 4209              		.cfi_def_cfa_offset 16
 4210 17d4 00AF     		add	r7, sp, #0
 4211              		.cfi_def_cfa_register 7
 4212 17d6 7860     		str	r0, [r7, #4]
 4213 17d8 3960     		str	r1, [r7]
2103:../tasks/SDMMC/ff.c **** 	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 4214              		.loc 1 2103 0
 4215 17da 7B68     		ldr	r3, [r7, #4]
 4216 17dc 0022     		movs	r2, #0
 4217 17de 83F80422 		strb	r2, [r3, #516]
 4218 17e2 7B68     		ldr	r3, [r7, #4]
 4219 17e4 4FF0FF32 		mov	r2, #-1
 4220 17e8 C3F83022 		str	r2, [r3, #560]
2104:../tasks/SDMMC/ff.c **** 	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 4221              		.loc 1 2104 0
 4222 17ec 7868     		ldr	r0, [r7, #4]
 4223 17ee 3968     		ldr	r1, [r7]
 4224 17f0 FEF7BAFE 		bl	move_window
 4225 17f4 0346     		mov	r3, r0
 4226 17f6 002B     		cmp	r3, #0
 4227 17f8 01D0     		beq	.L273
2105:../tasks/SDMMC/ff.c **** 		return 3;
 4228              		.loc 1 2105 0
 4229 17fa 0323     		movs	r3, #3
 4230 17fc 4BE0     		b	.L274
 4231              	.L273:
2106:../tasks/SDMMC/ff.c **** 
2107:../tasks/SDMMC/ff.c **** 	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offs
 4232              		.loc 1 2107 0
 4233 17fe 7B68     		ldr	r3, [r7, #4]
 4234 1800 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 4235 1804 1B02     		lsls	r3, r3, #8
 4236 1806 9AB2     		uxth	r2, r3
 4237 1808 7B68     		ldr	r3, [r7, #4]
 4238 180a 93F8FE31 		ldrb	r3, [r3, #510]	@ zero_extendqisi2
 4239 180e 1343     		orrs	r3, r3, r2
 4240 1810 9BB2     		uxth	r3, r3
 4241 1812 1AB2     		sxth	r2, r3
 4242 1814 4AF65523 		movw	r3, #43605
 4243 1818 CFF6FF73 		movt	r3, 65535
 4244 181c 9A42     		cmp	r2, r3
 4245 181e 01D0     		beq	.L275
2108:../tasks/SDMMC/ff.c **** 		return 2;
 4246              		.loc 1 2108 0
 4247 1820 0223     		movs	r3, #2
 4248 1822 38E0     		b	.L274
 4249              	.L275:
2109:../tasks/SDMMC/ff.c **** 
2110:../tasks/SDMMC/ff.c **** 	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 4250              		.loc 1 2110 0
 4251 1824 7B68     		ldr	r3, [r7, #4]
 4252 1826 93F83930 		ldrb	r3, [r3, #57]	@ zero_extendqisi2
 4253 182a 1A06     		lsls	r2, r3, #24
 4254 182c 7B68     		ldr	r3, [r7, #4]
 4255 182e 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 4256 1832 1B04     		lsls	r3, r3, #16
 4257 1834 1A43     		orrs	r2, r2, r3
 4258 1836 7B68     		ldr	r3, [r7, #4]
 4259 1838 93F83730 		ldrb	r3, [r3, #55]	@ zero_extendqisi2
 4260 183c 1B02     		lsls	r3, r3, #8
 4261 183e 1A43     		orrs	r2, r2, r3
 4262 1840 7B68     		ldr	r3, [r7, #4]
 4263 1842 93F83630 		ldrb	r3, [r3, #54]	@ zero_extendqisi2
 4264 1846 1343     		orrs	r3, r3, r2
 4265 1848 23F07F42 		bic	r2, r3, #-16777216
 4266 184c 44F24613 		movw	r3, #16710
 4267 1850 C0F25403 		movt	r3, 84
 4268 1854 9A42     		cmp	r2, r3
 4269 1856 01D1     		bne	.L276
2111:../tasks/SDMMC/ff.c **** 		return 0;
 4270              		.loc 1 2111 0
 4271 1858 0023     		movs	r3, #0
 4272 185a 1CE0     		b	.L274
 4273              	.L276:
2112:../tasks/SDMMC/ff.c **** 	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 4274              		.loc 1 2112 0
 4275 185c 7B68     		ldr	r3, [r7, #4]
 4276 185e 93F85530 		ldrb	r3, [r3, #85]	@ zero_extendqisi2
 4277 1862 1A06     		lsls	r2, r3, #24
 4278 1864 7B68     		ldr	r3, [r7, #4]
 4279 1866 93F85430 		ldrb	r3, [r3, #84]	@ zero_extendqisi2
 4280 186a 1B04     		lsls	r3, r3, #16
 4281 186c 1A43     		orrs	r2, r2, r3
 4282 186e 7B68     		ldr	r3, [r7, #4]
 4283 1870 93F85330 		ldrb	r3, [r3, #83]	@ zero_extendqisi2
 4284 1874 1B02     		lsls	r3, r3, #8
 4285 1876 1A43     		orrs	r2, r2, r3
 4286 1878 7B68     		ldr	r3, [r7, #4]
 4287 187a 93F85230 		ldrb	r3, [r3, #82]	@ zero_extendqisi2
 4288 187e 1343     		orrs	r3, r3, r2
 4289 1880 23F07F42 		bic	r2, r3, #-16777216
 4290 1884 44F24613 		movw	r3, #16710
 4291 1888 C0F25403 		movt	r3, 84
 4292 188c 9A42     		cmp	r2, r3
 4293 188e 01D1     		bne	.L277
2113:../tasks/SDMMC/ff.c **** 		return 0;
 4294              		.loc 1 2113 0
 4295 1890 0023     		movs	r3, #0
 4296 1892 00E0     		b	.L274
 4297              	.L277:
2114:../tasks/SDMMC/ff.c **** 
2115:../tasks/SDMMC/ff.c **** 	return 1;
 4298              		.loc 1 2115 0
 4299 1894 0123     		movs	r3, #1
 4300              	.L274:
2116:../tasks/SDMMC/ff.c **** }
 4301              		.loc 1 2116 0
 4302 1896 1846     		mov	r0, r3
 4303 1898 0837     		adds	r7, r7, #8
 4304 189a BD46     		mov	sp, r7
 4305              		@ sp needed
 4306 189c 80BD     		pop	{r7, pc}
 4307              		.cfi_endproc
 4308              	.LFE86:
 4310 189e 00BF     		.align	2
 4311              		.thumb
 4312              		.thumb_func
 4314              	find_volume:
 4315              	.LFB87:
2117:../tasks/SDMMC/ff.c **** 
2118:../tasks/SDMMC/ff.c **** 
2119:../tasks/SDMMC/ff.c **** 
2120:../tasks/SDMMC/ff.c **** 
2121:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
2122:../tasks/SDMMC/ff.c **** /* Find logical drive and check if the volume is mounted                 */
2123:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
2124:../tasks/SDMMC/ff.c **** 
2125:../tasks/SDMMC/ff.c **** static
2126:../tasks/SDMMC/ff.c **** FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
2127:../tasks/SDMMC/ff.c **** 	FATFS** rfs,		/* Pointer to pointer to the found file system object */
2128:../tasks/SDMMC/ff.c **** 	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
2129:../tasks/SDMMC/ff.c **** 	BYTE wmode			/* !=0: Check write protection for write access */
2130:../tasks/SDMMC/ff.c **** )
2131:../tasks/SDMMC/ff.c **** {
 4316              		.loc 1 2131 0
 4317              		.cfi_startproc
 4318              		@ args = 0, pretend = 0, frame = 88
 4319              		@ frame_needed = 1, uses_anonymous_args = 0
 4320 18a0 80B5     		push	{r7, lr}
 4321              		.cfi_def_cfa_offset 8
 4322              		.cfi_offset 7, -8
 4323              		.cfi_offset 14, -4
 4324 18a2 96B0     		sub	sp, sp, #88
 4325              		.cfi_def_cfa_offset 96
 4326 18a4 00AF     		add	r7, sp, #0
 4327              		.cfi_def_cfa_register 7
 4328 18a6 F860     		str	r0, [r7, #12]
 4329 18a8 B960     		str	r1, [r7, #8]
 4330 18aa 1346     		mov	r3, r2
 4331 18ac FB71     		strb	r3, [r7, #7]
2132:../tasks/SDMMC/ff.c **** 	BYTE fmt;
2133:../tasks/SDMMC/ff.c **** 	int vol;
2134:../tasks/SDMMC/ff.c **** 	DSTATUS stat;
2135:../tasks/SDMMC/ff.c **** 	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
2136:../tasks/SDMMC/ff.c **** 	WORD nrsv;
2137:../tasks/SDMMC/ff.c **** 	FATFS *fs;
2138:../tasks/SDMMC/ff.c **** 
2139:../tasks/SDMMC/ff.c **** 
2140:../tasks/SDMMC/ff.c **** 
2141:../tasks/SDMMC/ff.c **** 	/* Get logical drive number from the path name */
2142:../tasks/SDMMC/ff.c **** 	*rfs = 0;
 4332              		.loc 1 2142 0
 4333 18ae FB68     		ldr	r3, [r7, #12]
 4334 18b0 0022     		movs	r2, #0
 4335 18b2 1A60     		str	r2, [r3]
2143:../tasks/SDMMC/ff.c **** 	vol = get_ldnumber(path);
 4336              		.loc 1 2143 0
 4337 18b4 B868     		ldr	r0, [r7, #8]
 4338 18b6 FFF7CBFE 		bl	get_ldnumber
 4339 18ba F863     		str	r0, [r7, #60]
2144:../tasks/SDMMC/ff.c **** 
2145:../tasks/SDMMC/ff.c **** 	if (vol < 0) return FR_INVALID_DRIVE;
 4340              		.loc 1 2145 0
 4341 18bc FB6B     		ldr	r3, [r7, #60]
 4342 18be 002B     		cmp	r3, #0
 4343 18c0 01DA     		bge	.L279
 4344              		.loc 1 2145 0 is_stmt 0 discriminator 1
 4345 18c2 0B23     		movs	r3, #11
 4346 18c4 BDE2     		b	.L280
 4347              	.L279:
2146:../tasks/SDMMC/ff.c **** 	/* Check if the file system object is valid or not */
2147:../tasks/SDMMC/ff.c **** 	fs = FatFs[vol];					/* Get pointer to the file system object */
 4348              		.loc 1 2147 0 is_stmt 1
 4349 18c6 40F20003 		movw	r3, #:lower16:FatFs
 4350 18ca C0F20003 		movt	r3, #:upper16:FatFs
 4351 18ce FA6B     		ldr	r2, [r7, #60]
 4352 18d0 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4353 18d4 BB63     		str	r3, [r7, #56]
2148:../tasks/SDMMC/ff.c **** 	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 4354              		.loc 1 2148 0
 4355 18d6 BB6B     		ldr	r3, [r7, #56]
 4356 18d8 002B     		cmp	r3, #0
 4357 18da 01D1     		bne	.L281
 4358              		.loc 1 2148 0 is_stmt 0 discriminator 1
 4359 18dc 0C23     		movs	r3, #12
 4360 18de B0E2     		b	.L280
 4361              	.L281:
2149:../tasks/SDMMC/ff.c **** 
2150:../tasks/SDMMC/ff.c **** 	ENTER_FF(fs);						/* Lock the volume */
2151:../tasks/SDMMC/ff.c **** 	*rfs = fs;							/* Return pointer to the file system object */
 4362              		.loc 1 2151 0 is_stmt 1
 4363 18e0 FB68     		ldr	r3, [r7, #12]
 4364 18e2 BA6B     		ldr	r2, [r7, #56]
 4365 18e4 1A60     		str	r2, [r3]
2152:../tasks/SDMMC/ff.c **** 
2153:../tasks/SDMMC/ff.c **** 	if (fs->fs_type) {					/* If the volume has been mounted */
 4366              		.loc 1 2153 0
 4367 18e6 BB6B     		ldr	r3, [r7, #56]
 4368 18e8 93F80032 		ldrb	r3, [r3, #512]	@ zero_extendqisi2
 4369 18ec 002B     		cmp	r3, #0
 4370 18ee 1BD0     		beq	.L282
2154:../tasks/SDMMC/ff.c **** 		stat = disk_status(fs->drv);
 4371              		.loc 1 2154 0
 4372 18f0 BB6B     		ldr	r3, [r7, #56]
 4373 18f2 93F80132 		ldrb	r3, [r3, #513]	@ zero_extendqisi2
 4374 18f6 1846     		mov	r0, r3
 4375 18f8 FFF7FEFF 		bl	disk_status
 4376 18fc 0346     		mov	r3, r0
 4377 18fe 87F83730 		strb	r3, [r7, #55]
2155:../tasks/SDMMC/ff.c **** 		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 4378              		.loc 1 2155 0
 4379 1902 97F83730 		ldrb	r3, [r7, #55]	@ zero_extendqisi2
 4380 1906 03F00103 		and	r3, r3, #1
 4381 190a 002B     		cmp	r3, #0
 4382 190c 0CD1     		bne	.L282
2156:../tasks/SDMMC/ff.c **** 			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 4383              		.loc 1 2156 0
 4384 190e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4385 1910 002B     		cmp	r3, #0
 4386 1912 07D0     		beq	.L283
 4387              		.loc 1 2156 0 is_stmt 0 discriminator 1
 4388 1914 97F83730 		ldrb	r3, [r7, #55]	@ zero_extendqisi2
 4389 1918 03F00403 		and	r3, r3, #4
 4390 191c 002B     		cmp	r3, #0
 4391 191e 01D0     		beq	.L283
2157:../tasks/SDMMC/ff.c **** 				return FR_WRITE_PROTECTED;
 4392              		.loc 1 2157 0 is_stmt 1
 4393 1920 0A23     		movs	r3, #10
 4394 1922 8EE2     		b	.L280
 4395              	.L283:
2158:../tasks/SDMMC/ff.c **** 			return FR_OK;				/* The file system object is valid */
 4396              		.loc 1 2158 0
 4397 1924 0023     		movs	r3, #0
 4398 1926 8CE2     		b	.L280
 4399              	.L282:
2159:../tasks/SDMMC/ff.c **** 		}
2160:../tasks/SDMMC/ff.c **** 	}
2161:../tasks/SDMMC/ff.c **** 
2162:../tasks/SDMMC/ff.c **** 
2163:../tasks/SDMMC/ff.c **** 	/* The file system object is not valid. */
2164:../tasks/SDMMC/ff.c **** 	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */
2165:../tasks/SDMMC/ff.c **** 
2166:../tasks/SDMMC/ff.c **** 	fs->fs_type = 0;					/* Clear the file system object */
 4400              		.loc 1 2166 0
 4401 1928 BB6B     		ldr	r3, [r7, #56]
 4402 192a 0022     		movs	r2, #0
 4403 192c 83F80022 		strb	r2, [r3, #512]
2167:../tasks/SDMMC/ff.c **** 	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 4404              		.loc 1 2167 0
 4405 1930 FB6B     		ldr	r3, [r7, #60]
 4406 1932 DAB2     		uxtb	r2, r3
 4407 1934 BB6B     		ldr	r3, [r7, #56]
 4408 1936 83F80122 		strb	r2, [r3, #513]
2168:../tasks/SDMMC/ff.c **** 	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 4409              		.loc 1 2168 0
 4410 193a BB6B     		ldr	r3, [r7, #56]
 4411 193c 93F80132 		ldrb	r3, [r3, #513]	@ zero_extendqisi2
 4412 1940 1846     		mov	r0, r3
 4413 1942 FFF7FEFF 		bl	disk_initialize
 4414 1946 0346     		mov	r3, r0
 4415 1948 87F83730 		strb	r3, [r7, #55]
2169:../tasks/SDMMC/ff.c **** 
2170:../tasks/SDMMC/ff.c **** 	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 4416              		.loc 1 2170 0
 4417 194c 97F83730 		ldrb	r3, [r7, #55]	@ zero_extendqisi2
 4418 1950 03F00103 		and	r3, r3, #1
 4419 1954 002B     		cmp	r3, #0
 4420 1956 01D0     		beq	.L284
2171:../tasks/SDMMC/ff.c **** 		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 4421              		.loc 1 2171 0
 4422 1958 0323     		movs	r3, #3
 4423 195a 72E2     		b	.L280
 4424              	.L284:
2172:../tasks/SDMMC/ff.c **** 	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 4425              		.loc 1 2172 0
 4426 195c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4427 195e 002B     		cmp	r3, #0
 4428 1960 07D0     		beq	.L285
 4429              		.loc 1 2172 0 is_stmt 0 discriminator 1
 4430 1962 97F83730 		ldrb	r3, [r7, #55]	@ zero_extendqisi2
 4431 1966 03F00403 		and	r3, r3, #4
 4432 196a 002B     		cmp	r3, #0
 4433 196c 01D0     		beq	.L285
2173:../tasks/SDMMC/ff.c **** 		return FR_WRITE_PROTECTED;
 4434              		.loc 1 2173 0 is_stmt 1
 4435 196e 0A23     		movs	r3, #10
 4436 1970 67E2     		b	.L280
 4437              	.L285:
2174:../tasks/SDMMC/ff.c **** #if _MAX_SS != 512						/* Get sector size (variable sector size cfg only) */
2175:../tasks/SDMMC/ff.c **** 	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
2176:../tasks/SDMMC/ff.c **** 		return FR_DISK_ERR;
2177:../tasks/SDMMC/ff.c **** #endif
2178:../tasks/SDMMC/ff.c **** 	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
2179:../tasks/SDMMC/ff.c **** 	bsect = 0;
 4438              		.loc 1 2179 0
 4439 1972 0023     		movs	r3, #0
 4440 1974 3B65     		str	r3, [r7, #80]
2180:../tasks/SDMMC/ff.c **** 	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 4441              		.loc 1 2180 0
 4442 1976 B86B     		ldr	r0, [r7, #56]
 4443 1978 396D     		ldr	r1, [r7, #80]
 4444 197a FFF729FF 		bl	check_fs
 4445 197e 0346     		mov	r3, r0
 4446 1980 87F85730 		strb	r3, [r7, #87]
2181:../tasks/SDMMC/ff.c **** 	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 4447              		.loc 1 2181 0
 4448 1984 97F85730 		ldrb	r3, [r7, #87]	@ zero_extendqisi2
 4449 1988 012B     		cmp	r3, #1
 4450 198a 55D1     		bne	.L286
 4451              	.LBB4:
2182:../tasks/SDMMC/ff.c **** 		UINT i;
2183:../tasks/SDMMC/ff.c **** 		DWORD br[4];
2184:../tasks/SDMMC/ff.c **** 
2185:../tasks/SDMMC/ff.c **** 		for (i = 0; i < 4; i++) {			/* Get partition offset */
 4452              		.loc 1 2185 0
 4453 198c 0023     		movs	r3, #0
 4454 198e 3B64     		str	r3, [r7, #64]
 4455 1990 29E0     		b	.L287
 4456              	.L290:
 4457              	.LBB5:
2186:../tasks/SDMMC/ff.c **** 			BYTE *pt = fs->win.d8+MBR_Table + i * SZ_PTE;
 4458              		.loc 1 2186 0
 4459 1992 3B6C     		ldr	r3, [r7, #64]
 4460 1994 1B01     		lsls	r3, r3, #4
 4461 1996 03F5DF73 		add	r3, r3, #446
 4462 199a BA6B     		ldr	r2, [r7, #56]
 4463 199c 1344     		add	r3, r3, r2
 4464 199e 3B63     		str	r3, [r7, #48]
2187:../tasks/SDMMC/ff.c **** 			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 4465              		.loc 1 2187 0
 4466 19a0 3B6B     		ldr	r3, [r7, #48]
 4467 19a2 0433     		adds	r3, r3, #4
 4468 19a4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4469 19a6 002B     		cmp	r3, #0
 4470 19a8 12D0     		beq	.L288
 4471              		.loc 1 2187 0 is_stmt 0 discriminator 1
 4472 19aa 3B6B     		ldr	r3, [r7, #48]
 4473 19ac 0B33     		adds	r3, r3, #11
 4474 19ae 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4475 19b0 1A06     		lsls	r2, r3, #24
 4476 19b2 3B6B     		ldr	r3, [r7, #48]
 4477 19b4 0A33     		adds	r3, r3, #10
 4478 19b6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4479 19b8 1B04     		lsls	r3, r3, #16
 4480 19ba 1A43     		orrs	r2, r2, r3
 4481 19bc 3B6B     		ldr	r3, [r7, #48]
 4482 19be 0933     		adds	r3, r3, #9
 4483 19c0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4484 19c2 1B02     		lsls	r3, r3, #8
 4485 19c4 1A43     		orrs	r2, r2, r3
 4486 19c6 3B6B     		ldr	r3, [r7, #48]
 4487 19c8 0833     		adds	r3, r3, #8
 4488 19ca 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4489 19cc 1A43     		orrs	r2, r2, r3
 4490 19ce 00E0     		b	.L289
 4491              	.L288:
 4492              		.loc 1 2187 0 discriminator 2
 4493 19d0 0022     		movs	r2, #0
 4494              	.L289:
 4495              		.loc 1 2187 0 discriminator 3
 4496 19d2 3B6C     		ldr	r3, [r7, #64]
 4497 19d4 9B00     		lsls	r3, r3, #2
 4498 19d6 07F15801 		add	r1, r7, #88
 4499 19da 0B44     		add	r3, r3, r1
 4500 19dc 43F8442C 		str	r2, [r3, #-68]
 4501              	.LBE5:
2185:../tasks/SDMMC/ff.c **** 			BYTE *pt = fs->win.d8+MBR_Table + i * SZ_PTE;
 4502              		.loc 1 2185 0 is_stmt 1 discriminator 3
 4503 19e0 3B6C     		ldr	r3, [r7, #64]
 4504 19e2 0133     		adds	r3, r3, #1
 4505 19e4 3B64     		str	r3, [r7, #64]
 4506              	.L287:
2185:../tasks/SDMMC/ff.c **** 			BYTE *pt = fs->win.d8+MBR_Table + i * SZ_PTE;
 4507              		.loc 1 2185 0 is_stmt 0 discriminator 1
 4508 19e6 3B6C     		ldr	r3, [r7, #64]
 4509 19e8 032B     		cmp	r3, #3
 4510 19ea D2D9     		bls	.L290
2188:../tasks/SDMMC/ff.c **** 		}
2189:../tasks/SDMMC/ff.c **** 		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 4511              		.loc 1 2189 0 is_stmt 1
 4512 19ec 0023     		movs	r3, #0
 4513 19ee 3B64     		str	r3, [r7, #64]
2190:../tasks/SDMMC/ff.c **** 		if (i) i--;
 4514              		.loc 1 2190 0
 4515 19f0 3B6C     		ldr	r3, [r7, #64]
 4516 19f2 002B     		cmp	r3, #0
 4517 19f4 02D0     		beq	.L291
 4518              		.loc 1 2190 0 is_stmt 0 discriminator 1
 4519 19f6 3B6C     		ldr	r3, [r7, #64]
 4520 19f8 013B     		subs	r3, r3, #1
 4521 19fa 3B64     		str	r3, [r7, #64]
 4522              	.L291:
2191:../tasks/SDMMC/ff.c **** 		do {								/* Find an FAT volume */
2192:../tasks/SDMMC/ff.c **** 			bsect = br[i];
 4523              		.loc 1 2192 0 is_stmt 1
 4524 19fc 3B6C     		ldr	r3, [r7, #64]
 4525 19fe 9B00     		lsls	r3, r3, #2
 4526 1a00 07F15802 		add	r2, r7, #88
 4527 1a04 1344     		add	r3, r3, r2
 4528 1a06 53F8443C 		ldr	r3, [r3, #-68]
 4529 1a0a 3B65     		str	r3, [r7, #80]
2193:../tasks/SDMMC/ff.c **** 			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 4530              		.loc 1 2193 0
 4531 1a0c 3B6D     		ldr	r3, [r7, #80]
 4532 1a0e 002B     		cmp	r3, #0
 4533 1a10 05D0     		beq	.L292
 4534              		.loc 1 2193 0 is_stmt 0 discriminator 1
 4535 1a12 B86B     		ldr	r0, [r7, #56]
 4536 1a14 396D     		ldr	r1, [r7, #80]
 4537 1a16 FFF7DBFE 		bl	check_fs
 4538 1a1a 0346     		mov	r3, r0
 4539 1a1c 00E0     		b	.L293
 4540              	.L292:
 4541              		.loc 1 2193 0 discriminator 2
 4542 1a1e 0223     		movs	r3, #2
 4543              	.L293:
 4544              		.loc 1 2193 0 discriminator 3
 4545 1a20 87F85730 		strb	r3, [r7, #87]
2194:../tasks/SDMMC/ff.c **** 		} while (!LD2PT(vol) && fmt && ++i < 4);
 4546              		.loc 1 2194 0 is_stmt 1 discriminator 3
 4547 1a24 97F85730 		ldrb	r3, [r7, #87]	@ zero_extendqisi2
 4548 1a28 002B     		cmp	r3, #0
 4549 1a2a 05D0     		beq	.L286
 4550              		.loc 1 2194 0 is_stmt 0 discriminator 1
 4551 1a2c 3B6C     		ldr	r3, [r7, #64]
 4552 1a2e 0133     		adds	r3, r3, #1
 4553 1a30 3B64     		str	r3, [r7, #64]
 4554 1a32 3B6C     		ldr	r3, [r7, #64]
 4555 1a34 032B     		cmp	r3, #3
 4556 1a36 E1D9     		bls	.L291
 4557              	.L286:
 4558              	.LBE4:
2195:../tasks/SDMMC/ff.c **** 	}
2196:../tasks/SDMMC/ff.c **** 	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 4559              		.loc 1 2196 0 is_stmt 1
 4560 1a38 97F85730 		ldrb	r3, [r7, #87]	@ zero_extendqisi2
 4561 1a3c 032B     		cmp	r3, #3
 4562 1a3e 01D1     		bne	.L295
 4563              		.loc 1 2196 0 is_stmt 0 discriminator 1
 4564 1a40 0123     		movs	r3, #1
 4565 1a42 FEE1     		b	.L280
 4566              	.L295:
2197:../tasks/SDMMC/ff.c **** 	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 4567              		.loc 1 2197 0 is_stmt 1
 4568 1a44 97F85730 		ldrb	r3, [r7, #87]	@ zero_extendqisi2
 4569 1a48 002B     		cmp	r3, #0
 4570 1a4a 01D0     		beq	.L296
 4571              		.loc 1 2197 0 is_stmt 0 discriminator 1
 4572 1a4c 0D23     		movs	r3, #13
 4573 1a4e F8E1     		b	.L280
 4574              	.L296:
2198:../tasks/SDMMC/ff.c **** 
2199:../tasks/SDMMC/ff.c **** 	/* An FAT volume is found. Following code initializes the file system object */
2200:../tasks/SDMMC/ff.c **** 
2201:../tasks/SDMMC/ff.c **** 	if (LD_WORD(fs->win.d8+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physica
 4575              		.loc 1 2201 0 is_stmt 1
 4576 1a50 BB6B     		ldr	r3, [r7, #56]
 4577 1a52 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 4578 1a54 1B02     		lsls	r3, r3, #8
 4579 1a56 9AB2     		uxth	r2, r3
 4580 1a58 BB6B     		ldr	r3, [r7, #56]
 4581 1a5a DB7A     		ldrb	r3, [r3, #11]	@ zero_extendqisi2
 4582 1a5c 1343     		orrs	r3, r3, r2
 4583 1a5e 9BB2     		uxth	r3, r3
 4584 1a60 1BB2     		sxth	r3, r3
 4585 1a62 B3F5007F 		cmp	r3, #512
 4586 1a66 01D0     		beq	.L297
2202:../tasks/SDMMC/ff.c **** 		return FR_NO_FILESYSTEM;
 4587              		.loc 1 2202 0
 4588 1a68 0D23     		movs	r3, #13
 4589 1a6a EAE1     		b	.L280
 4590              	.L297:
2203:../tasks/SDMMC/ff.c **** 
2204:../tasks/SDMMC/ff.c **** 	fasize = LD_WORD(fs->win.d8+BPB_FATSz16);				/* Number of sectors per FAT */
 4591              		.loc 1 2204 0
 4592 1a6c BB6B     		ldr	r3, [r7, #56]
 4593 1a6e DB7D     		ldrb	r3, [r3, #23]	@ zero_extendqisi2
 4594 1a70 1B02     		lsls	r3, r3, #8
 4595 1a72 9AB2     		uxth	r2, r3
 4596 1a74 BB6B     		ldr	r3, [r7, #56]
 4597 1a76 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
 4598 1a78 1343     		orrs	r3, r3, r2
 4599 1a7a 9BB2     		uxth	r3, r3
 4600 1a7c 9BB2     		uxth	r3, r3
 4601 1a7e FB64     		str	r3, [r7, #76]
2205:../tasks/SDMMC/ff.c **** 	if (!fasize) fasize = LD_DWORD(fs->win.d8+BPB_FATSz32);
 4602              		.loc 1 2205 0
 4603 1a80 FB6C     		ldr	r3, [r7, #76]
 4604 1a82 002B     		cmp	r3, #0
 4605 1a84 12D1     		bne	.L298
 4606              		.loc 1 2205 0 is_stmt 0 discriminator 1
 4607 1a86 BB6B     		ldr	r3, [r7, #56]
 4608 1a88 93F82730 		ldrb	r3, [r3, #39]	@ zero_extendqisi2
 4609 1a8c 1A06     		lsls	r2, r3, #24
 4610 1a8e BB6B     		ldr	r3, [r7, #56]
 4611 1a90 93F82630 		ldrb	r3, [r3, #38]	@ zero_extendqisi2
 4612 1a94 1B04     		lsls	r3, r3, #16
 4613 1a96 1A43     		orrs	r2, r2, r3
 4614 1a98 BB6B     		ldr	r3, [r7, #56]
 4615 1a9a 93F82530 		ldrb	r3, [r3, #37]	@ zero_extendqisi2
 4616 1a9e 1B02     		lsls	r3, r3, #8
 4617 1aa0 1A43     		orrs	r2, r2, r3
 4618 1aa2 BB6B     		ldr	r3, [r7, #56]
 4619 1aa4 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 4620 1aa8 1343     		orrs	r3, r3, r2
 4621 1aaa FB64     		str	r3, [r7, #76]
 4622              	.L298:
2206:../tasks/SDMMC/ff.c **** 	fs->fsize = fasize;
 4623              		.loc 1 2206 0 is_stmt 1
 4624 1aac BB6B     		ldr	r3, [r7, #56]
 4625 1aae FA6C     		ldr	r2, [r7, #76]
 4626 1ab0 C3F81C22 		str	r2, [r3, #540]
2207:../tasks/SDMMC/ff.c **** 
2208:../tasks/SDMMC/ff.c **** 	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 4627              		.loc 1 2208 0
 4628 1ab4 BB6B     		ldr	r3, [r7, #56]
 4629 1ab6 1A7C     		ldrb	r2, [r3, #16]	@ zero_extendqisi2
 4630 1ab8 BB6B     		ldr	r3, [r7, #56]
 4631 1aba 83F80322 		strb	r2, [r3, #515]
2209:../tasks/SDMMC/ff.c **** 	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 4632              		.loc 1 2209 0
 4633 1abe BB6B     		ldr	r3, [r7, #56]
 4634 1ac0 93F80332 		ldrb	r3, [r3, #515]	@ zero_extendqisi2
 4635 1ac4 012B     		cmp	r3, #1
 4636 1ac6 06D0     		beq	.L299
 4637              		.loc 1 2209 0 is_stmt 0 discriminator 1
 4638 1ac8 BB6B     		ldr	r3, [r7, #56]
 4639 1aca 93F80332 		ldrb	r3, [r3, #515]	@ zero_extendqisi2
 4640 1ace 022B     		cmp	r3, #2
 4641 1ad0 01D0     		beq	.L299
2210:../tasks/SDMMC/ff.c **** 		return FR_NO_FILESYSTEM;
 4642              		.loc 1 2210 0 is_stmt 1
 4643 1ad2 0D23     		movs	r3, #13
 4644 1ad4 B5E1     		b	.L280
 4645              	.L299:
2211:../tasks/SDMMC/ff.c **** 	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 4646              		.loc 1 2211 0
 4647 1ad6 BB6B     		ldr	r3, [r7, #56]
 4648 1ad8 93F80332 		ldrb	r3, [r3, #515]	@ zero_extendqisi2
 4649 1adc 1A46     		mov	r2, r3
 4650 1ade FB6C     		ldr	r3, [r7, #76]
 4651 1ae0 02FB03F3 		mul	r3, r2, r3
 4652 1ae4 FB64     		str	r3, [r7, #76]
2212:../tasks/SDMMC/ff.c **** 
2213:../tasks/SDMMC/ff.c **** 	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 4653              		.loc 1 2213 0
 4654 1ae6 BB6B     		ldr	r3, [r7, #56]
 4655 1ae8 5A7B     		ldrb	r2, [r3, #13]	@ zero_extendqisi2
 4656 1aea BB6B     		ldr	r3, [r7, #56]
 4657 1aec 83F80222 		strb	r2, [r3, #514]
2214:../tasks/SDMMC/ff.c **** 	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 4658              		.loc 1 2214 0
 4659 1af0 BB6B     		ldr	r3, [r7, #56]
 4660 1af2 93F80232 		ldrb	r3, [r3, #514]	@ zero_extendqisi2
 4661 1af6 002B     		cmp	r3, #0
 4662 1af8 0AD0     		beq	.L300
 4663              		.loc 1 2214 0 is_stmt 0 discriminator 1
 4664 1afa BB6B     		ldr	r3, [r7, #56]
 4665 1afc 93F80232 		ldrb	r3, [r3, #514]	@ zero_extendqisi2
 4666 1b00 1A46     		mov	r2, r3
 4667 1b02 BB6B     		ldr	r3, [r7, #56]
 4668 1b04 93F80232 		ldrb	r3, [r3, #514]	@ zero_extendqisi2
 4669 1b08 013B     		subs	r3, r3, #1
 4670 1b0a 1340     		ands	r3, r3, r2
 4671 1b0c 002B     		cmp	r3, #0
 4672 1b0e 01D0     		beq	.L301
 4673              	.L300:
2215:../tasks/SDMMC/ff.c **** 		return FR_NO_FILESYSTEM;
 4674              		.loc 1 2215 0 is_stmt 1
 4675 1b10 0D23     		movs	r3, #13
 4676 1b12 96E1     		b	.L280
 4677              	.L301:
2216:../tasks/SDMMC/ff.c **** 
2217:../tasks/SDMMC/ff.c **** 	fs->n_rootdir = LD_WORD(fs->win.d8+BPB_RootEntCnt);	/* Number of root directory entries */
 4678              		.loc 1 2217 0
 4679 1b14 BB6B     		ldr	r3, [r7, #56]
 4680 1b16 9B7C     		ldrb	r3, [r3, #18]	@ zero_extendqisi2
 4681 1b18 1B02     		lsls	r3, r3, #8
 4682 1b1a 9AB2     		uxth	r2, r3
 4683 1b1c BB6B     		ldr	r3, [r7, #56]
 4684 1b1e 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 4685 1b20 1343     		orrs	r3, r3, r2
 4686 1b22 9BB2     		uxth	r3, r3
 4687 1b24 9AB2     		uxth	r2, r3
 4688 1b26 BB6B     		ldr	r3, [r7, #56]
 4689 1b28 A3F80822 		strh	r2, [r3, #520]	@ movhi
2218:../tasks/SDMMC/ff.c **** 	if (fs->n_rootdir % (SS(fs) / SZ_DIR))				/* (Must be sector aligned) */
 4690              		.loc 1 2218 0
 4691 1b2c BB6B     		ldr	r3, [r7, #56]
 4692 1b2e B3F80832 		ldrh	r3, [r3, #520]
 4693 1b32 03F00F03 		and	r3, r3, #15
 4694 1b36 9BB2     		uxth	r3, r3
 4695 1b38 002B     		cmp	r3, #0
 4696 1b3a 01D0     		beq	.L302
2219:../tasks/SDMMC/ff.c **** 		return FR_NO_FILESYSTEM;
 4697              		.loc 1 2219 0
 4698 1b3c 0D23     		movs	r3, #13
 4699 1b3e 80E1     		b	.L280
 4700              	.L302:
2220:../tasks/SDMMC/ff.c **** 
2221:../tasks/SDMMC/ff.c **** 	tsect = LD_WORD(fs->win.d8+BPB_TotSec16);				/* Number of sectors on the volume */
 4701              		.loc 1 2221 0
 4702 1b40 BB6B     		ldr	r3, [r7, #56]
 4703 1b42 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 4704 1b44 1B02     		lsls	r3, r3, #8
 4705 1b46 9AB2     		uxth	r2, r3
 4706 1b48 BB6B     		ldr	r3, [r7, #56]
 4707 1b4a DB7C     		ldrb	r3, [r3, #19]	@ zero_extendqisi2
 4708 1b4c 1343     		orrs	r3, r3, r2
 4709 1b4e 9BB2     		uxth	r3, r3
 4710 1b50 9BB2     		uxth	r3, r3
 4711 1b52 BB64     		str	r3, [r7, #72]
2222:../tasks/SDMMC/ff.c **** 	if (!tsect) tsect = LD_DWORD(fs->win.d8+BPB_TotSec32);
 4712              		.loc 1 2222 0
 4713 1b54 BB6C     		ldr	r3, [r7, #72]
 4714 1b56 002B     		cmp	r3, #0
 4715 1b58 12D1     		bne	.L303
 4716              		.loc 1 2222 0 is_stmt 0 discriminator 1
 4717 1b5a BB6B     		ldr	r3, [r7, #56]
 4718 1b5c 93F82330 		ldrb	r3, [r3, #35]	@ zero_extendqisi2
 4719 1b60 1A06     		lsls	r2, r3, #24
 4720 1b62 BB6B     		ldr	r3, [r7, #56]
 4721 1b64 93F82230 		ldrb	r3, [r3, #34]	@ zero_extendqisi2
 4722 1b68 1B04     		lsls	r3, r3, #16
 4723 1b6a 1A43     		orrs	r2, r2, r3
 4724 1b6c BB6B     		ldr	r3, [r7, #56]
 4725 1b6e 93F82130 		ldrb	r3, [r3, #33]	@ zero_extendqisi2
 4726 1b72 1B02     		lsls	r3, r3, #8
 4727 1b74 1A43     		orrs	r2, r2, r3
 4728 1b76 BB6B     		ldr	r3, [r7, #56]
 4729 1b78 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 4730 1b7c 1343     		orrs	r3, r3, r2
 4731 1b7e BB64     		str	r3, [r7, #72]
 4732              	.L303:
2223:../tasks/SDMMC/ff.c **** 
2224:../tasks/SDMMC/ff.c **** 	nrsv = LD_WORD(fs->win.d8+BPB_RsvdSecCnt);				/* Number of reserved sectors */
 4733              		.loc 1 2224 0 is_stmt 1
 4734 1b80 BB6B     		ldr	r3, [r7, #56]
 4735 1b82 DB7B     		ldrb	r3, [r3, #15]	@ zero_extendqisi2
 4736 1b84 1B02     		lsls	r3, r3, #8
 4737 1b86 9AB2     		uxth	r2, r3
 4738 1b88 BB6B     		ldr	r3, [r7, #56]
 4739 1b8a 9B7B     		ldrb	r3, [r3, #14]	@ zero_extendqisi2
 4740 1b8c 1343     		orrs	r3, r3, r2
 4741 1b8e 9BB2     		uxth	r3, r3
 4742 1b90 FB85     		strh	r3, [r7, #46]	@ movhi
2225:../tasks/SDMMC/ff.c **** 	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 4743              		.loc 1 2225 0
 4744 1b92 FB8D     		ldrh	r3, [r7, #46]
 4745 1b94 002B     		cmp	r3, #0
 4746 1b96 01D1     		bne	.L304
 4747              		.loc 1 2225 0 is_stmt 0 discriminator 1
 4748 1b98 0D23     		movs	r3, #13
 4749 1b9a 52E1     		b	.L280
 4750              	.L304:
2226:../tasks/SDMMC/ff.c **** 
2227:../tasks/SDMMC/ff.c **** 	/* Determine the FAT sub type */
2228:../tasks/SDMMC/ff.c **** 	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
 4751              		.loc 1 2228 0 is_stmt 1
 4752 1b9c FA8D     		ldrh	r2, [r7, #46]
 4753 1b9e FB6C     		ldr	r3, [r7, #76]
 4754 1ba0 1A44     		add	r2, r2, r3
 4755 1ba2 BB6B     		ldr	r3, [r7, #56]
 4756 1ba4 B3F80832 		ldrh	r3, [r3, #520]
 4757 1ba8 1B09     		lsrs	r3, r3, #4
 4758 1baa 9BB2     		uxth	r3, r3
 4759 1bac 1344     		add	r3, r3, r2
 4760 1bae BB62     		str	r3, [r7, #40]
2229:../tasks/SDMMC/ff.c **** 	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 4761              		.loc 1 2229 0
 4762 1bb0 BA6C     		ldr	r2, [r7, #72]
 4763 1bb2 BB6A     		ldr	r3, [r7, #40]
 4764 1bb4 9A42     		cmp	r2, r3
 4765 1bb6 01D2     		bcs	.L305
 4766              		.loc 1 2229 0 is_stmt 0 discriminator 1
 4767 1bb8 0D23     		movs	r3, #13
 4768 1bba 42E1     		b	.L280
 4769              	.L305:
2230:../tasks/SDMMC/ff.c **** 	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 4770              		.loc 1 2230 0 is_stmt 1
 4771 1bbc BA6C     		ldr	r2, [r7, #72]
 4772 1bbe BB6A     		ldr	r3, [r7, #40]
 4773 1bc0 D21A     		subs	r2, r2, r3
 4774 1bc2 BB6B     		ldr	r3, [r7, #56]
 4775 1bc4 93F80232 		ldrb	r3, [r3, #514]	@ zero_extendqisi2
 4776 1bc8 B2FBF3F3 		udiv	r3, r2, r3
 4777 1bcc 7B62     		str	r3, [r7, #36]
2231:../tasks/SDMMC/ff.c **** 	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 4778              		.loc 1 2231 0
 4779 1bce 7B6A     		ldr	r3, [r7, #36]
 4780 1bd0 002B     		cmp	r3, #0
 4781 1bd2 01D1     		bne	.L306
 4782              		.loc 1 2231 0 is_stmt 0 discriminator 1
 4783 1bd4 0D23     		movs	r3, #13
 4784 1bd6 34E1     		b	.L280
 4785              	.L306:
2232:../tasks/SDMMC/ff.c **** 	fmt = FS_FAT12;
 4786              		.loc 1 2232 0 is_stmt 1
 4787 1bd8 0123     		movs	r3, #1
 4788 1bda 87F85730 		strb	r3, [r7, #87]
2233:../tasks/SDMMC/ff.c **** 	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 4789              		.loc 1 2233 0
 4790 1bde 7A6A     		ldr	r2, [r7, #36]
 4791 1be0 40F6F573 		movw	r3, #4085
 4792 1be4 9A42     		cmp	r2, r3
 4793 1be6 02D9     		bls	.L307
 4794              		.loc 1 2233 0 is_stmt 0 discriminator 1
 4795 1be8 0223     		movs	r3, #2
 4796 1bea 87F85730 		strb	r3, [r7, #87]
 4797              	.L307:
2234:../tasks/SDMMC/ff.c **** 	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 4798              		.loc 1 2234 0 is_stmt 1
 4799 1bee 7A6A     		ldr	r2, [r7, #36]
 4800 1bf0 4FF6F573 		movw	r3, #65525
 4801 1bf4 9A42     		cmp	r2, r3
 4802 1bf6 02D9     		bls	.L308
 4803              		.loc 1 2234 0 is_stmt 0 discriminator 1
 4804 1bf8 0323     		movs	r3, #3
 4805 1bfa 87F85730 		strb	r3, [r7, #87]
 4806              	.L308:
2235:../tasks/SDMMC/ff.c **** 
2236:../tasks/SDMMC/ff.c **** 	/* Boundaries and Limits */
2237:../tasks/SDMMC/ff.c **** 	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 4807              		.loc 1 2237 0 is_stmt 1
 4808 1bfe 7B6A     		ldr	r3, [r7, #36]
 4809 1c00 9A1C     		adds	r2, r3, #2
 4810 1c02 BB6B     		ldr	r3, [r7, #56]
 4811 1c04 C3F81822 		str	r2, [r3, #536]
2238:../tasks/SDMMC/ff.c **** 	fs->volbase = bsect;								/* Volume start sector */
 4812              		.loc 1 2238 0
 4813 1c08 BB6B     		ldr	r3, [r7, #56]
 4814 1c0a 3A6D     		ldr	r2, [r7, #80]
 4815 1c0c C3F82022 		str	r2, [r3, #544]
2239:../tasks/SDMMC/ff.c **** 	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 4816              		.loc 1 2239 0
 4817 1c10 FA8D     		ldrh	r2, [r7, #46]
 4818 1c12 3B6D     		ldr	r3, [r7, #80]
 4819 1c14 1A44     		add	r2, r2, r3
 4820 1c16 BB6B     		ldr	r3, [r7, #56]
 4821 1c18 C3F82422 		str	r2, [r3, #548]
2240:../tasks/SDMMC/ff.c **** 	fs->database = bsect + sysect;						/* Data start sector */
 4822              		.loc 1 2240 0
 4823 1c1c 3A6D     		ldr	r2, [r7, #80]
 4824 1c1e BB6A     		ldr	r3, [r7, #40]
 4825 1c20 1A44     		add	r2, r2, r3
 4826 1c22 BB6B     		ldr	r3, [r7, #56]
 4827 1c24 C3F82C22 		str	r2, [r3, #556]
2241:../tasks/SDMMC/ff.c **** 	if (fmt == FS_FAT32) {
 4828              		.loc 1 2241 0
 4829 1c28 97F85730 		ldrb	r3, [r7, #87]	@ zero_extendqisi2
 4830 1c2c 032B     		cmp	r3, #3
 4831 1c2e 21D1     		bne	.L309
2242:../tasks/SDMMC/ff.c **** 		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 4832              		.loc 1 2242 0
 4833 1c30 BB6B     		ldr	r3, [r7, #56]
 4834 1c32 B3F80832 		ldrh	r3, [r3, #520]
 4835 1c36 002B     		cmp	r3, #0
 4836 1c38 01D0     		beq	.L310
 4837              		.loc 1 2242 0 is_stmt 0 discriminator 1
 4838 1c3a 0D23     		movs	r3, #13
 4839 1c3c 01E1     		b	.L280
 4840              	.L310:
2243:../tasks/SDMMC/ff.c **** 		fs->dirbase = LD_DWORD(fs->win.d8+BPB_RootClus);	/* Root directory start cluster */
 4841              		.loc 1 2243 0 is_stmt 1
 4842 1c3e BB6B     		ldr	r3, [r7, #56]
 4843 1c40 93F82F30 		ldrb	r3, [r3, #47]	@ zero_extendqisi2
 4844 1c44 1A06     		lsls	r2, r3, #24
 4845 1c46 BB6B     		ldr	r3, [r7, #56]
 4846 1c48 93F82E30 		ldrb	r3, [r3, #46]	@ zero_extendqisi2
 4847 1c4c 1B04     		lsls	r3, r3, #16
 4848 1c4e 1A43     		orrs	r2, r2, r3
 4849 1c50 BB6B     		ldr	r3, [r7, #56]
 4850 1c52 93F82D30 		ldrb	r3, [r3, #45]	@ zero_extendqisi2
 4851 1c56 1B02     		lsls	r3, r3, #8
 4852 1c58 1A43     		orrs	r2, r2, r3
 4853 1c5a BB6B     		ldr	r3, [r7, #56]
 4854 1c5c 93F82C30 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 4855 1c60 1A43     		orrs	r2, r2, r3
 4856 1c62 BB6B     		ldr	r3, [r7, #56]
 4857 1c64 C3F82822 		str	r2, [r3, #552]
2244:../tasks/SDMMC/ff.c **** 		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
 4858              		.loc 1 2244 0
 4859 1c68 BB6B     		ldr	r3, [r7, #56]
 4860 1c6a D3F81832 		ldr	r3, [r3, #536]
 4861 1c6e 9B00     		lsls	r3, r3, #2
 4862 1c70 7B64     		str	r3, [r7, #68]
 4863 1c72 25E0     		b	.L311
 4864              	.L309:
2245:../tasks/SDMMC/ff.c **** 	} else {
2246:../tasks/SDMMC/ff.c **** 		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 4865              		.loc 1 2246 0
 4866 1c74 BB6B     		ldr	r3, [r7, #56]
 4867 1c76 B3F80832 		ldrh	r3, [r3, #520]
 4868 1c7a 002B     		cmp	r3, #0
 4869 1c7c 01D1     		bne	.L312
 4870              		.loc 1 2246 0 is_stmt 0 discriminator 1
 4871 1c7e 0D23     		movs	r3, #13
 4872 1c80 DFE0     		b	.L280
 4873              	.L312:
2247:../tasks/SDMMC/ff.c **** 		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 4874              		.loc 1 2247 0 is_stmt 1
 4875 1c82 BB6B     		ldr	r3, [r7, #56]
 4876 1c84 D3F82422 		ldr	r2, [r3, #548]
 4877 1c88 FB6C     		ldr	r3, [r7, #76]
 4878 1c8a 1A44     		add	r2, r2, r3
 4879 1c8c BB6B     		ldr	r3, [r7, #56]
 4880 1c8e C3F82822 		str	r2, [r3, #552]
2248:../tasks/SDMMC/ff.c **** 		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
2249:../tasks/SDMMC/ff.c **** 			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 4881              		.loc 1 2249 0
 4882 1c92 97F85730 		ldrb	r3, [r7, #87]	@ zero_extendqisi2
 4883 1c96 022B     		cmp	r3, #2
 4884 1c98 04D1     		bne	.L313
 4885              		.loc 1 2249 0 is_stmt 0 discriminator 1
 4886 1c9a BB6B     		ldr	r3, [r7, #56]
 4887 1c9c D3F81832 		ldr	r3, [r3, #536]
 4888 1ca0 5B00     		lsls	r3, r3, #1
 4889 1ca2 0CE0     		b	.L314
 4890              	.L313:
 4891              		.loc 1 2249 0 discriminator 2
 4892 1ca4 BB6B     		ldr	r3, [r7, #56]
 4893 1ca6 D3F81822 		ldr	r2, [r3, #536]
 4894 1caa 1346     		mov	r3, r2
 4895 1cac 5B00     		lsls	r3, r3, #1
 4896 1cae 1344     		add	r3, r3, r2
 4897 1cb0 5A08     		lsrs	r2, r3, #1
 4898 1cb2 BB6B     		ldr	r3, [r7, #56]
 4899 1cb4 D3F81832 		ldr	r3, [r3, #536]
 4900 1cb8 03F00103 		and	r3, r3, #1
 4901 1cbc 1344     		add	r3, r3, r2
 4902              	.L314:
2248:../tasks/SDMMC/ff.c **** 		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
 4903              		.loc 1 2248 0 is_stmt 1
 4904 1cbe 7B64     		str	r3, [r7, #68]
 4905              	.L311:
2250:../tasks/SDMMC/ff.c **** 	}
2251:../tasks/SDMMC/ff.c **** 	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
 4906              		.loc 1 2251 0
 4907 1cc0 BB6B     		ldr	r3, [r7, #56]
 4908 1cc2 D3F81C22 		ldr	r2, [r3, #540]
 4909 1cc6 7B6C     		ldr	r3, [r7, #68]
 4910 1cc8 03F2FF13 		addw	r3, r3, #511
 4911 1ccc 5B0A     		lsrs	r3, r3, #9
 4912 1cce 9A42     		cmp	r2, r3
 4913 1cd0 01D2     		bcs	.L315
2252:../tasks/SDMMC/ff.c **** 		return FR_NO_FILESYSTEM;
 4914              		.loc 1 2252 0
 4915 1cd2 0D23     		movs	r3, #13
 4916 1cd4 B5E0     		b	.L280
 4917              	.L315:
2253:../tasks/SDMMC/ff.c **** 
2254:../tasks/SDMMC/ff.c **** #if !_FS_READONLY
2255:../tasks/SDMMC/ff.c **** 	/* Initialize cluster allocation information */
2256:../tasks/SDMMC/ff.c **** 	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 4918              		.loc 1 2256 0
 4919 1cd6 BB6B     		ldr	r3, [r7, #56]
 4920 1cd8 4FF0FF32 		mov	r2, #-1
 4921 1cdc C3F81022 		str	r2, [r3, #528]
 4922 1ce0 BB6B     		ldr	r3, [r7, #56]
 4923 1ce2 D3F81022 		ldr	r2, [r3, #528]
 4924 1ce6 BB6B     		ldr	r3, [r7, #56]
 4925 1ce8 C3F80C22 		str	r2, [r3, #524]
2257:../tasks/SDMMC/ff.c **** 
2258:../tasks/SDMMC/ff.c **** 	/* Get fsinfo if available */
2259:../tasks/SDMMC/ff.c **** 	fs->fsi_flag = 0x80;
 4926              		.loc 1 2259 0
 4927 1cec BB6B     		ldr	r3, [r7, #56]
 4928 1cee 8022     		movs	r2, #128
 4929 1cf0 83F80522 		strb	r2, [r3, #517]
2260:../tasks/SDMMC/ff.c **** 	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 4930              		.loc 1 2260 0
 4931 1cf4 97F85730 		ldrb	r3, [r7, #87]	@ zero_extendqisi2
 4932 1cf8 032B     		cmp	r3, #3
 4933 1cfa 40F08180 		bne	.L316
2261:../tasks/SDMMC/ff.c **** 		&& LD_WORD(fs->win.d8+BPB_FSInfo) == 1
 4934              		.loc 1 2261 0
 4935 1cfe BB6B     		ldr	r3, [r7, #56]
 4936 1d00 93F83130 		ldrb	r3, [r3, #49]	@ zero_extendqisi2
 4937 1d04 1B02     		lsls	r3, r3, #8
 4938 1d06 9AB2     		uxth	r2, r3
 4939 1d08 BB6B     		ldr	r3, [r7, #56]
 4940 1d0a 93F83030 		ldrb	r3, [r3, #48]	@ zero_extendqisi2
 4941 1d0e 1343     		orrs	r3, r3, r2
 4942 1d10 9BB2     		uxth	r3, r3
 4943 1d12 1BB2     		sxth	r3, r3
 4944 1d14 012B     		cmp	r3, #1
 4945 1d16 73D1     		bne	.L316
2262:../tasks/SDMMC/ff.c **** 		&& move_window(fs, bsect + 1) == FR_OK)
 4946              		.loc 1 2262 0
 4947 1d18 3B6D     		ldr	r3, [r7, #80]
 4948 1d1a 0133     		adds	r3, r3, #1
 4949 1d1c B86B     		ldr	r0, [r7, #56]
 4950 1d1e 1946     		mov	r1, r3
 4951 1d20 FEF722FC 		bl	move_window
 4952 1d24 0346     		mov	r3, r0
 4953 1d26 002B     		cmp	r3, #0
 4954 1d28 6AD1     		bne	.L316
2263:../tasks/SDMMC/ff.c **** 	{
2264:../tasks/SDMMC/ff.c **** 		fs->fsi_flag = 0;
 4955              		.loc 1 2264 0
 4956 1d2a BB6B     		ldr	r3, [r7, #56]
 4957 1d2c 0022     		movs	r2, #0
 4958 1d2e 83F80522 		strb	r2, [r3, #517]
2265:../tasks/SDMMC/ff.c **** 		if (LD_WORD(fs->win.d8+BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 4959              		.loc 1 2265 0
 4960 1d32 BB6B     		ldr	r3, [r7, #56]
 4961 1d34 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 4962 1d38 1B02     		lsls	r3, r3, #8
 4963 1d3a 9AB2     		uxth	r2, r3
 4964 1d3c BB6B     		ldr	r3, [r7, #56]
 4965 1d3e 93F8FE31 		ldrb	r3, [r3, #510]	@ zero_extendqisi2
 4966 1d42 1343     		orrs	r3, r3, r2
 4967 1d44 9BB2     		uxth	r3, r3
 4968 1d46 1AB2     		sxth	r2, r3
 4969 1d48 4AF65523 		movw	r3, #43605
 4970 1d4c CFF6FF73 		movt	r3, 65535
 4971 1d50 9A42     		cmp	r2, r3
 4972 1d52 55D1     		bne	.L316
2266:../tasks/SDMMC/ff.c **** 			&& LD_DWORD(fs->win.d8+FSI_LeadSig) == 0x41615252
 4973              		.loc 1 2266 0
 4974 1d54 BB6B     		ldr	r3, [r7, #56]
 4975 1d56 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 4976 1d58 1A06     		lsls	r2, r3, #24
 4977 1d5a BB6B     		ldr	r3, [r7, #56]
 4978 1d5c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 4979 1d5e 1B04     		lsls	r3, r3, #16
 4980 1d60 1A43     		orrs	r2, r2, r3
 4981 1d62 BB6B     		ldr	r3, [r7, #56]
 4982 1d64 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 4983 1d66 1B02     		lsls	r3, r3, #8
 4984 1d68 1A43     		orrs	r2, r2, r3
 4985 1d6a BB6B     		ldr	r3, [r7, #56]
 4986 1d6c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4987 1d6e 1A43     		orrs	r2, r2, r3
 4988 1d70 45F25223 		movw	r3, #21074
 4989 1d74 C4F26113 		movt	r3, 16737
 4990 1d78 9A42     		cmp	r2, r3
 4991 1d7a 41D1     		bne	.L316
2267:../tasks/SDMMC/ff.c **** 			&& LD_DWORD(fs->win.d8+FSI_StrucSig) == 0x61417272)
 4992              		.loc 1 2267 0
 4993 1d7c BB6B     		ldr	r3, [r7, #56]
 4994 1d7e 93F8E731 		ldrb	r3, [r3, #487]	@ zero_extendqisi2
 4995 1d82 1A06     		lsls	r2, r3, #24
 4996 1d84 BB6B     		ldr	r3, [r7, #56]
 4997 1d86 93F8E631 		ldrb	r3, [r3, #486]	@ zero_extendqisi2
 4998 1d8a 1B04     		lsls	r3, r3, #16
 4999 1d8c 1A43     		orrs	r2, r2, r3
 5000 1d8e BB6B     		ldr	r3, [r7, #56]
 5001 1d90 93F8E531 		ldrb	r3, [r3, #485]	@ zero_extendqisi2
 5002 1d94 1B02     		lsls	r3, r3, #8
 5003 1d96 1A43     		orrs	r2, r2, r3
 5004 1d98 BB6B     		ldr	r3, [r7, #56]
 5005 1d9a 93F8E431 		ldrb	r3, [r3, #484]	@ zero_extendqisi2
 5006 1d9e 1A43     		orrs	r2, r2, r3
 5007 1da0 47F27223 		movw	r3, #29298
 5008 1da4 C6F24113 		movt	r3, 24897
 5009 1da8 9A42     		cmp	r2, r3
 5010 1daa 29D1     		bne	.L316
2268:../tasks/SDMMC/ff.c **** 		{
2269:../tasks/SDMMC/ff.c **** #if !_FS_NOFSINFO
2270:../tasks/SDMMC/ff.c **** 			fs->free_clust = LD_DWORD(fs->win.d8+FSI_Free_Count);
 5011              		.loc 1 2270 0
 5012 1dac BB6B     		ldr	r3, [r7, #56]
 5013 1dae 93F8EB31 		ldrb	r3, [r3, #491]	@ zero_extendqisi2
 5014 1db2 1A06     		lsls	r2, r3, #24
 5015 1db4 BB6B     		ldr	r3, [r7, #56]
 5016 1db6 93F8EA31 		ldrb	r3, [r3, #490]	@ zero_extendqisi2
 5017 1dba 1B04     		lsls	r3, r3, #16
 5018 1dbc 1A43     		orrs	r2, r2, r3
 5019 1dbe BB6B     		ldr	r3, [r7, #56]
 5020 1dc0 93F8E931 		ldrb	r3, [r3, #489]	@ zero_extendqisi2
 5021 1dc4 1B02     		lsls	r3, r3, #8
 5022 1dc6 1A43     		orrs	r2, r2, r3
 5023 1dc8 BB6B     		ldr	r3, [r7, #56]
 5024 1dca 93F8E831 		ldrb	r3, [r3, #488]	@ zero_extendqisi2
 5025 1dce 1A43     		orrs	r2, r2, r3
 5026 1dd0 BB6B     		ldr	r3, [r7, #56]
 5027 1dd2 C3F81022 		str	r2, [r3, #528]
2271:../tasks/SDMMC/ff.c **** #endif
2272:../tasks/SDMMC/ff.c **** 			fs->last_clust = LD_DWORD(fs->win.d8+FSI_Nxt_Free);
 5028              		.loc 1 2272 0
 5029 1dd6 BB6B     		ldr	r3, [r7, #56]
 5030 1dd8 93F8EF31 		ldrb	r3, [r3, #495]	@ zero_extendqisi2
 5031 1ddc 1A06     		lsls	r2, r3, #24
 5032 1dde BB6B     		ldr	r3, [r7, #56]
 5033 1de0 93F8EE31 		ldrb	r3, [r3, #494]	@ zero_extendqisi2
 5034 1de4 1B04     		lsls	r3, r3, #16
 5035 1de6 1A43     		orrs	r2, r2, r3
 5036 1de8 BB6B     		ldr	r3, [r7, #56]
 5037 1dea 93F8ED31 		ldrb	r3, [r3, #493]	@ zero_extendqisi2
 5038 1dee 1B02     		lsls	r3, r3, #8
 5039 1df0 1A43     		orrs	r2, r2, r3
 5040 1df2 BB6B     		ldr	r3, [r7, #56]
 5041 1df4 93F8EC31 		ldrb	r3, [r3, #492]	@ zero_extendqisi2
 5042 1df8 1A43     		orrs	r2, r2, r3
 5043 1dfa BB6B     		ldr	r3, [r7, #56]
 5044 1dfc C3F80C22 		str	r2, [r3, #524]
 5045              	.L316:
2273:../tasks/SDMMC/ff.c **** 		}
2274:../tasks/SDMMC/ff.c **** 	}
2275:../tasks/SDMMC/ff.c **** #endif
2276:../tasks/SDMMC/ff.c **** 	fs->fs_type = fmt;	/* FAT sub-type */
 5046              		.loc 1 2276 0
 5047 1e00 BB6B     		ldr	r3, [r7, #56]
 5048 1e02 97F85720 		ldrb	r2, [r7, #87]
 5049 1e06 83F80022 		strb	r2, [r3, #512]
2277:../tasks/SDMMC/ff.c **** 	fs->id = ++Fsid;	/* File system mount ID */
 5050              		.loc 1 2277 0
 5051 1e0a 40F20003 		movw	r3, #:lower16:Fsid
 5052 1e0e C0F20003 		movt	r3, #:upper16:Fsid
 5053 1e12 1B88     		ldrh	r3, [r3]
 5054 1e14 0133     		adds	r3, r3, #1
 5055 1e16 9AB2     		uxth	r2, r3
 5056 1e18 40F20003 		movw	r3, #:lower16:Fsid
 5057 1e1c C0F20003 		movt	r3, #:upper16:Fsid
 5058 1e20 1A80     		strh	r2, [r3]	@ movhi
 5059 1e22 40F20003 		movw	r3, #:lower16:Fsid
 5060 1e26 C0F20003 		movt	r3, #:upper16:Fsid
 5061 1e2a 1A88     		ldrh	r2, [r3]
 5062 1e2c BB6B     		ldr	r3, [r7, #56]
 5063 1e2e A3F80622 		strh	r2, [r3, #518]	@ movhi
2278:../tasks/SDMMC/ff.c **** #if _FS_RPATH
2279:../tasks/SDMMC/ff.c **** 	fs->cdir = 0;		/* Current directory (root dir) */
 5064              		.loc 1 2279 0
 5065 1e32 BB6B     		ldr	r3, [r7, #56]
 5066 1e34 0022     		movs	r2, #0
 5067 1e36 C3F81422 		str	r2, [r3, #532]
2280:../tasks/SDMMC/ff.c **** #endif
2281:../tasks/SDMMC/ff.c **** #if _FS_LOCK			/* Clear file lock semaphores */
2282:../tasks/SDMMC/ff.c **** 	clear_lock(fs);
 5068              		.loc 1 2282 0
 5069 1e3a B86B     		ldr	r0, [r7, #56]
 5070 1e3c FEF71EFB 		bl	clear_lock
2283:../tasks/SDMMC/ff.c **** #endif
2284:../tasks/SDMMC/ff.c **** 
2285:../tasks/SDMMC/ff.c **** 	return FR_OK;
 5071              		.loc 1 2285 0
 5072 1e40 0023     		movs	r3, #0
 5073              	.L280:
2286:../tasks/SDMMC/ff.c **** }
 5074              		.loc 1 2286 0
 5075 1e42 1846     		mov	r0, r3
 5076 1e44 5837     		adds	r7, r7, #88
 5077 1e46 BD46     		mov	sp, r7
 5078              		@ sp needed
 5079 1e48 80BD     		pop	{r7, pc}
 5080              		.cfi_endproc
 5081              	.LFE87:
 5083 1e4a 00BF     		.align	2
 5084              		.thumb
 5085              		.thumb_func
 5087              	validate:
 5088              	.LFB88:
2287:../tasks/SDMMC/ff.c **** 
2288:../tasks/SDMMC/ff.c **** 
2289:../tasks/SDMMC/ff.c **** 
2290:../tasks/SDMMC/ff.c **** 
2291:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
2292:../tasks/SDMMC/ff.c **** /* Check if the file/directory object is valid or not                    */
2293:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
2294:../tasks/SDMMC/ff.c **** 
2295:../tasks/SDMMC/ff.c **** static
2296:../tasks/SDMMC/ff.c **** FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
2297:../tasks/SDMMC/ff.c **** 	void* obj		/* Pointer to the object FIL/DIR to check validity */
2298:../tasks/SDMMC/ff.c **** )
2299:../tasks/SDMMC/ff.c **** {
 5089              		.loc 1 2299 0
 5090              		.cfi_startproc
 5091              		@ args = 0, pretend = 0, frame = 16
 5092              		@ frame_needed = 1, uses_anonymous_args = 0
 5093 1e4c 80B5     		push	{r7, lr}
 5094              		.cfi_def_cfa_offset 8
 5095              		.cfi_offset 7, -8
 5096              		.cfi_offset 14, -4
 5097 1e4e 84B0     		sub	sp, sp, #16
 5098              		.cfi_def_cfa_offset 24
 5099 1e50 00AF     		add	r7, sp, #0
 5100              		.cfi_def_cfa_register 7
 5101 1e52 7860     		str	r0, [r7, #4]
2300:../tasks/SDMMC/ff.c **** 	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 5102              		.loc 1 2300 0
 5103 1e54 7B68     		ldr	r3, [r7, #4]
 5104 1e56 FB60     		str	r3, [r7, #12]
2301:../tasks/SDMMC/ff.c **** 
2302:../tasks/SDMMC/ff.c **** 
2303:../tasks/SDMMC/ff.c **** 	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id)
 5105              		.loc 1 2303 0
 5106 1e58 FB68     		ldr	r3, [r7, #12]
 5107 1e5a 002B     		cmp	r3, #0
 5108 1e5c 15D0     		beq	.L318
 5109              		.loc 1 2303 0 is_stmt 0 discriminator 1
 5110 1e5e FB68     		ldr	r3, [r7, #12]
 5111 1e60 D3F80032 		ldr	r3, [r3, #512]
 5112 1e64 002B     		cmp	r3, #0
 5113 1e66 10D0     		beq	.L318
 5114 1e68 FB68     		ldr	r3, [r7, #12]
 5115 1e6a D3F80032 		ldr	r3, [r3, #512]
 5116 1e6e 93F80032 		ldrb	r3, [r3, #512]	@ zero_extendqisi2
 5117 1e72 002B     		cmp	r3, #0
 5118 1e74 09D0     		beq	.L318
 5119 1e76 FB68     		ldr	r3, [r7, #12]
 5120 1e78 D3F80032 		ldr	r3, [r3, #512]
 5121 1e7c B3F80622 		ldrh	r2, [r3, #518]
 5122 1e80 FB68     		ldr	r3, [r7, #12]
 5123 1e82 B3F80432 		ldrh	r3, [r3, #516]
 5124 1e86 9A42     		cmp	r2, r3
 5125 1e88 01D0     		beq	.L319
 5126              	.L318:
2304:../tasks/SDMMC/ff.c **** 		return FR_INVALID_OBJECT;
 5127              		.loc 1 2304 0 is_stmt 1
 5128 1e8a 0923     		movs	r3, #9
 5129 1e8c 0FE0     		b	.L320
 5130              	.L319:
2305:../tasks/SDMMC/ff.c **** 
2306:../tasks/SDMMC/ff.c **** 	ENTER_FF(fil->fs);		/* Lock file system */
2307:../tasks/SDMMC/ff.c **** 
2308:../tasks/SDMMC/ff.c **** 	if (disk_status(fil->fs->drv) & STA_NOINIT)
 5131              		.loc 1 2308 0
 5132 1e8e FB68     		ldr	r3, [r7, #12]
 5133 1e90 D3F80032 		ldr	r3, [r3, #512]
 5134 1e94 93F80132 		ldrb	r3, [r3, #513]	@ zero_extendqisi2
 5135 1e98 1846     		mov	r0, r3
 5136 1e9a FFF7FEFF 		bl	disk_status
 5137 1e9e 0346     		mov	r3, r0
 5138 1ea0 03F00103 		and	r3, r3, #1
 5139 1ea4 002B     		cmp	r3, #0
 5140 1ea6 01D0     		beq	.L321
2309:../tasks/SDMMC/ff.c **** 		return FR_NOT_READY;
 5141              		.loc 1 2309 0
 5142 1ea8 0323     		movs	r3, #3
 5143 1eaa 00E0     		b	.L320
 5144              	.L321:
2310:../tasks/SDMMC/ff.c **** 
2311:../tasks/SDMMC/ff.c **** 	return FR_OK;
 5145              		.loc 1 2311 0
 5146 1eac 0023     		movs	r3, #0
 5147              	.L320:
2312:../tasks/SDMMC/ff.c **** }
 5148              		.loc 1 2312 0
 5149 1eae 1846     		mov	r0, r3
 5150 1eb0 1037     		adds	r7, r7, #16
 5151 1eb2 BD46     		mov	sp, r7
 5152              		@ sp needed
 5153 1eb4 80BD     		pop	{r7, pc}
 5154              		.cfi_endproc
 5155              	.LFE88:
 5157 1eb6 00BF     		.align	2
 5158              		.global	f_mount
 5159              		.thumb
 5160              		.thumb_func
 5162              	f_mount:
 5163              	.LFB89:
2313:../tasks/SDMMC/ff.c **** 
2314:../tasks/SDMMC/ff.c **** 
2315:../tasks/SDMMC/ff.c **** 
2316:../tasks/SDMMC/ff.c **** 
2317:../tasks/SDMMC/ff.c **** /*--------------------------------------------------------------------------
2318:../tasks/SDMMC/ff.c **** 
2319:../tasks/SDMMC/ff.c ****    Public Functions
2320:../tasks/SDMMC/ff.c **** 
2321:../tasks/SDMMC/ff.c **** --------------------------------------------------------------------------*/
2322:../tasks/SDMMC/ff.c **** 
2323:../tasks/SDMMC/ff.c **** 
2324:../tasks/SDMMC/ff.c **** 
2325:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
2326:../tasks/SDMMC/ff.c **** /* Mount/Unmount a Logical Drive                                         */
2327:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
2328:../tasks/SDMMC/ff.c **** 
2329:../tasks/SDMMC/ff.c **** FRESULT f_mount (
2330:../tasks/SDMMC/ff.c **** 	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
2331:../tasks/SDMMC/ff.c **** 	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
2332:../tasks/SDMMC/ff.c **** 	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
2333:../tasks/SDMMC/ff.c **** )
2334:../tasks/SDMMC/ff.c **** {
 5164              		.loc 1 2334 0
 5165              		.cfi_startproc
 5166              		@ args = 0, pretend = 0, frame = 32
 5167              		@ frame_needed = 1, uses_anonymous_args = 0
 5168 1eb8 80B5     		push	{r7, lr}
 5169              		.cfi_def_cfa_offset 8
 5170              		.cfi_offset 7, -8
 5171              		.cfi_offset 14, -4
 5172 1eba 88B0     		sub	sp, sp, #32
 5173              		.cfi_def_cfa_offset 40
 5174 1ebc 00AF     		add	r7, sp, #0
 5175              		.cfi_def_cfa_register 7
 5176 1ebe F860     		str	r0, [r7, #12]
 5177 1ec0 B960     		str	r1, [r7, #8]
 5178 1ec2 1346     		mov	r3, r2
 5179 1ec4 FB71     		strb	r3, [r7, #7]
2335:../tasks/SDMMC/ff.c **** 	FATFS *cfs;
2336:../tasks/SDMMC/ff.c **** 	int vol;
2337:../tasks/SDMMC/ff.c **** 	FRESULT res;
2338:../tasks/SDMMC/ff.c ****   const TCHAR *rp = path;
 5180              		.loc 1 2338 0
 5181 1ec6 BB68     		ldr	r3, [r7, #8]
 5182 1ec8 3B61     		str	r3, [r7, #16]
2339:../tasks/SDMMC/ff.c **** 
2340:../tasks/SDMMC/ff.c **** 	vol = get_ldnumber(&rp);
 5183              		.loc 1 2340 0
 5184 1eca 07F11003 		add	r3, r7, #16
 5185 1ece 1846     		mov	r0, r3
 5186 1ed0 FFF7BEFB 		bl	get_ldnumber
 5187 1ed4 F861     		str	r0, [r7, #28]
2341:../tasks/SDMMC/ff.c **** 	if (vol < 0) return FR_INVALID_DRIVE;
 5188              		.loc 1 2341 0
 5189 1ed6 FB69     		ldr	r3, [r7, #28]
 5190 1ed8 002B     		cmp	r3, #0
 5191 1eda 01DA     		bge	.L323
 5192              		.loc 1 2341 0 is_stmt 0 discriminator 1
 5193 1edc 0B23     		movs	r3, #11
 5194 1ede 34E0     		b	.L329
 5195              	.L323:
2342:../tasks/SDMMC/ff.c **** 	cfs = FatFs[vol];					/* Pointer to fs object */
 5196              		.loc 1 2342 0 is_stmt 1
 5197 1ee0 40F20003 		movw	r3, #:lower16:FatFs
 5198 1ee4 C0F20003 		movt	r3, #:upper16:FatFs
 5199 1ee8 FA69     		ldr	r2, [r7, #28]
 5200 1eea 53F82230 		ldr	r3, [r3, r2, lsl #2]
 5201 1eee BB61     		str	r3, [r7, #24]
2343:../tasks/SDMMC/ff.c **** 
2344:../tasks/SDMMC/ff.c **** 	if (cfs) {
 5202              		.loc 1 2344 0
 5203 1ef0 BB69     		ldr	r3, [r7, #24]
 5204 1ef2 002B     		cmp	r3, #0
 5205 1ef4 06D0     		beq	.L325
2345:../tasks/SDMMC/ff.c **** #if _FS_LOCK
2346:../tasks/SDMMC/ff.c **** 		clear_lock(cfs);
 5206              		.loc 1 2346 0
 5207 1ef6 B869     		ldr	r0, [r7, #24]
 5208 1ef8 FEF7C0FA 		bl	clear_lock
2347:../tasks/SDMMC/ff.c **** #endif
2348:../tasks/SDMMC/ff.c **** #if _FS_REENTRANT						/* Discard sync object of the current volume */
2349:../tasks/SDMMC/ff.c **** 		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
2350:../tasks/SDMMC/ff.c **** #endif
2351:../tasks/SDMMC/ff.c **** 		cfs->fs_type = 0;				/* Clear old fs object */
 5209              		.loc 1 2351 0
 5210 1efc BB69     		ldr	r3, [r7, #24]
 5211 1efe 0022     		movs	r2, #0
 5212 1f00 83F80022 		strb	r2, [r3, #512]
 5213              	.L325:
2352:../tasks/SDMMC/ff.c **** 	}
2353:../tasks/SDMMC/ff.c **** 
2354:../tasks/SDMMC/ff.c **** 	if (fs) {
 5214              		.loc 1 2354 0
 5215 1f04 FB68     		ldr	r3, [r7, #12]
 5216 1f06 002B     		cmp	r3, #0
 5217 1f08 03D0     		beq	.L326
2355:../tasks/SDMMC/ff.c **** 		fs->fs_type = 0;				/* Clear new fs object */
 5218              		.loc 1 2355 0
 5219 1f0a FB68     		ldr	r3, [r7, #12]
 5220 1f0c 0022     		movs	r2, #0
 5221 1f0e 83F80022 		strb	r2, [r3, #512]
 5222              	.L326:
2356:../tasks/SDMMC/ff.c **** #if _FS_REENTRANT						/* Create sync object for the new volume */
2357:../tasks/SDMMC/ff.c **** 		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
2358:../tasks/SDMMC/ff.c **** #endif
2359:../tasks/SDMMC/ff.c **** 	}
2360:../tasks/SDMMC/ff.c **** 	FatFs[vol] = fs;					/* Register new fs object */
 5223              		.loc 1 2360 0
 5224 1f12 F968     		ldr	r1, [r7, #12]
 5225 1f14 40F20003 		movw	r3, #:lower16:FatFs
 5226 1f18 C0F20003 		movt	r3, #:upper16:FatFs
 5227 1f1c FA69     		ldr	r2, [r7, #28]
 5228 1f1e 43F82210 		str	r1, [r3, r2, lsl #2]
2361:../tasks/SDMMC/ff.c **** 
2362:../tasks/SDMMC/ff.c **** 	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 5229              		.loc 1 2362 0
 5230 1f22 FB68     		ldr	r3, [r7, #12]
 5231 1f24 002B     		cmp	r3, #0
 5232 1f26 02D0     		beq	.L327
 5233              		.loc 1 2362 0 is_stmt 0 discriminator 2
 5234 1f28 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5235 1f2a 012B     		cmp	r3, #1
 5236 1f2c 01D0     		beq	.L328
 5237              	.L327:
 5238              		.loc 1 2362 0 discriminator 1
 5239 1f2e 0023     		movs	r3, #0
 5240 1f30 0BE0     		b	.L329
 5241              	.L328:
2363:../tasks/SDMMC/ff.c **** 
2364:../tasks/SDMMC/ff.c **** 	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 5242              		.loc 1 2364 0 is_stmt 1
 5243 1f32 07F10C02 		add	r2, r7, #12
 5244 1f36 07F10803 		add	r3, r7, #8
 5245 1f3a 1046     		mov	r0, r2
 5246 1f3c 1946     		mov	r1, r3
 5247 1f3e 0022     		movs	r2, #0
 5248 1f40 FFF7AEFC 		bl	find_volume
 5249 1f44 0346     		mov	r3, r0
 5250 1f46 FB75     		strb	r3, [r7, #23]
2365:../tasks/SDMMC/ff.c **** 
2366:../tasks/SDMMC/ff.c **** 	LEAVE_FF(fs, res);
 5251              		.loc 1 2366 0
 5252 1f48 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 5253              	.L329:
2367:../tasks/SDMMC/ff.c **** }
 5254              		.loc 1 2367 0
 5255 1f4a 1846     		mov	r0, r3
 5256 1f4c 2037     		adds	r7, r7, #32
 5257 1f4e BD46     		mov	sp, r7
 5258              		@ sp needed
 5259 1f50 80BD     		pop	{r7, pc}
 5260              		.cfi_endproc
 5261              	.LFE89:
 5263 1f52 00BF     		.align	2
 5264              		.global	f_open
 5265              		.thumb
 5266              		.thumb_func
 5268              	f_open:
 5269              	.LFB90:
2368:../tasks/SDMMC/ff.c **** 
2369:../tasks/SDMMC/ff.c **** 
2370:../tasks/SDMMC/ff.c **** 
2371:../tasks/SDMMC/ff.c **** 
2372:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
2373:../tasks/SDMMC/ff.c **** /* Open or Create a File                                                 */
2374:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
2375:../tasks/SDMMC/ff.c **** 
2376:../tasks/SDMMC/ff.c **** FRESULT f_open (
2377:../tasks/SDMMC/ff.c **** 	FIL* fp,			/* Pointer to the blank file object */
2378:../tasks/SDMMC/ff.c **** 	const TCHAR* path,	/* Pointer to the file name */
2379:../tasks/SDMMC/ff.c **** 	BYTE mode			/* Access mode and file open mode flags */
2380:../tasks/SDMMC/ff.c **** )
2381:../tasks/SDMMC/ff.c **** {
 5270              		.loc 1 2381 0
 5271              		.cfi_startproc
 5272              		@ args = 0, pretend = 0, frame = 592
 5273              		@ frame_needed = 1, uses_anonymous_args = 0
 5274 1f54 80B5     		push	{r7, lr}
 5275              		.cfi_def_cfa_offset 8
 5276              		.cfi_offset 7, -8
 5277              		.cfi_offset 14, -4
 5278 1f56 ADF5147D 		sub	sp, sp, #592
 5279              		.cfi_def_cfa_offset 600
 5280 1f5a 00AF     		add	r7, sp, #0
 5281              		.cfi_def_cfa_register 7
 5282 1f5c 07F10C03 		add	r3, r7, #12
 5283 1f60 1860     		str	r0, [r3]
 5284 1f62 07F10803 		add	r3, r7, #8
 5285 1f66 1960     		str	r1, [r3]
 5286 1f68 FB1D     		adds	r3, r7, #7
 5287 1f6a 1A70     		strb	r2, [r3]
2382:../tasks/SDMMC/ff.c **** 	FRESULT res;
2383:../tasks/SDMMC/ff.c **** 	DIR dj;
2384:../tasks/SDMMC/ff.c **** 	BYTE *dir;
2385:../tasks/SDMMC/ff.c **** 	DEF_NAMEBUF;
2386:../tasks/SDMMC/ff.c **** 
2387:../tasks/SDMMC/ff.c **** 
2388:../tasks/SDMMC/ff.c **** 	if (!fp) return FR_INVALID_OBJECT;
 5288              		.loc 1 2388 0
 5289 1f6c 07F10C03 		add	r3, r7, #12
 5290 1f70 1B68     		ldr	r3, [r3]
 5291 1f72 002B     		cmp	r3, #0
 5292 1f74 01D1     		bne	.L331
 5293              		.loc 1 2388 0 is_stmt 0 discriminator 1
 5294 1f76 0923     		movs	r3, #9
 5295 1f78 F3E1     		b	.L348
 5296              	.L331:
2389:../tasks/SDMMC/ff.c **** 	fp->fs = 0;			/* Clear file object */
 5297              		.loc 1 2389 0 is_stmt 1
 5298 1f7a 07F10C03 		add	r3, r7, #12
 5299 1f7e 1B68     		ldr	r3, [r3]
 5300 1f80 0022     		movs	r2, #0
 5301 1f82 C3F80022 		str	r2, [r3, #512]
2390:../tasks/SDMMC/ff.c **** 
2391:../tasks/SDMMC/ff.c **** 	/* Get logical drive number */
2392:../tasks/SDMMC/ff.c **** #if !_FS_READONLY
2393:../tasks/SDMMC/ff.c **** 	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 5302              		.loc 1 2393 0
 5303 1f86 FB1D     		adds	r3, r7, #7
 5304 1f88 FA1D     		adds	r2, r7, #7
 5305 1f8a 1278     		ldrb	r2, [r2]
 5306 1f8c 02F01F02 		and	r2, r2, #31
 5307 1f90 1A70     		strb	r2, [r3]
2394:../tasks/SDMMC/ff.c **** 	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 5308              		.loc 1 2394 0
 5309 1f92 FB1D     		adds	r3, r7, #7
 5310 1f94 1B78     		ldrb	r3, [r3]
 5311 1f96 23F00103 		bic	r3, r3, #1
 5312 1f9a DBB2     		uxtb	r3, r3
 5313 1f9c 07F12002 		add	r2, r7, #32
 5314 1fa0 02F50071 		add	r1, r2, #512
 5315 1fa4 07F10802 		add	r2, r7, #8
 5316 1fa8 0846     		mov	r0, r1
 5317 1faa 1146     		mov	r1, r2
 5318 1fac 1A46     		mov	r2, r3
 5319 1fae FFF777FC 		bl	find_volume
 5320 1fb2 0346     		mov	r3, r0
 5321 1fb4 87F84F32 		strb	r3, [r7, #591]
2395:../tasks/SDMMC/ff.c **** 
2396:../tasks/SDMMC/ff.c **** #else
2397:../tasks/SDMMC/ff.c **** 	mode &= FA_READ;
2398:../tasks/SDMMC/ff.c **** 	res = find_volume(&dj.fs, &path, 0);
2399:../tasks/SDMMC/ff.c **** #endif
2400:../tasks/SDMMC/ff.c **** 	if (res == FR_OK) {
 5322              		.loc 1 2400 0
 5323 1fb8 97F84F32 		ldrb	r3, [r7, #591]	@ zero_extendqisi2
 5324 1fbc 002B     		cmp	r3, #0
 5325 1fbe 40F0CE81 		bne	.L333
2401:../tasks/SDMMC/ff.c **** 		INIT_BUF(dj);
 5326              		.loc 1 2401 0
 5327 1fc2 07F12003 		add	r3, r7, #32
 5328 1fc6 07F11402 		add	r2, r7, #20
 5329 1fca C3F81822 		str	r2, [r3, #536]
2402:../tasks/SDMMC/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
 5330              		.loc 1 2402 0
 5331 1fce 07F10803 		add	r3, r7, #8
 5332 1fd2 1B68     		ldr	r3, [r3]
 5333 1fd4 07F12002 		add	r2, r7, #32
 5334 1fd8 1046     		mov	r0, r2
 5335 1fda 1946     		mov	r1, r3
 5336 1fdc FFF76CFB 		bl	follow_path
 5337 1fe0 0346     		mov	r3, r0
 5338 1fe2 87F84F32 		strb	r3, [r7, #591]
2403:../tasks/SDMMC/ff.c **** 		dir = dj.dir;
 5339              		.loc 1 2403 0
 5340 1fe6 07F12003 		add	r3, r7, #32
 5341 1fea D3F81432 		ldr	r3, [r3, #532]
 5342 1fee C7F84832 		str	r3, [r7, #584]
2404:../tasks/SDMMC/ff.c **** #if !_FS_READONLY	/* R/W configuration */
2405:../tasks/SDMMC/ff.c **** 		if (res == FR_OK) {
 5343              		.loc 1 2405 0
 5344 1ff2 97F84F32 		ldrb	r3, [r7, #591]	@ zero_extendqisi2
 5345 1ff6 002B     		cmp	r3, #0
 5346 1ff8 19D1     		bne	.L334
2406:../tasks/SDMMC/ff.c **** 			if (!dir)	/* Default directory itself */
 5347              		.loc 1 2406 0
 5348 1ffa D7F84832 		ldr	r3, [r7, #584]
 5349 1ffe 002B     		cmp	r3, #0
 5350 2000 03D1     		bne	.L335
2407:../tasks/SDMMC/ff.c **** 				res = FR_INVALID_NAME;
 5351              		.loc 1 2407 0
 5352 2002 0623     		movs	r3, #6
 5353 2004 87F84F32 		strb	r3, [r7, #591]
 5354 2008 11E0     		b	.L334
 5355              	.L335:
2408:../tasks/SDMMC/ff.c **** #if _FS_LOCK
2409:../tasks/SDMMC/ff.c **** 			else
2410:../tasks/SDMMC/ff.c **** 				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 5356              		.loc 1 2410 0
 5357 200a FB1D     		adds	r3, r7, #7
 5358 200c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5359 200e 23F00103 		bic	r3, r3, #1
 5360 2012 002B     		cmp	r3, #0
 5361 2014 0CBF     		ite	eq
 5362 2016 0023     		moveq	r3, #0
 5363 2018 0123     		movne	r3, #1
 5364 201a DBB2     		uxtb	r3, r3
 5365 201c 07F12002 		add	r2, r7, #32
 5366 2020 1046     		mov	r0, r2
 5367 2022 1946     		mov	r1, r3
 5368 2024 FEF768F8 		bl	chk_lock
 5369 2028 0346     		mov	r3, r0
 5370 202a 87F84F32 		strb	r3, [r7, #591]
 5371              	.L334:
2411:../tasks/SDMMC/ff.c **** #endif
2412:../tasks/SDMMC/ff.c **** 		}
2413:../tasks/SDMMC/ff.c **** 		/* Create or Open a file */
2414:../tasks/SDMMC/ff.c **** 		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 5372              		.loc 1 2414 0
 5373 202e FB1D     		adds	r3, r7, #7
 5374 2030 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5375 2032 03F01C03 		and	r3, r3, #28
 5376 2036 002B     		cmp	r3, #0
 5377 2038 00F0CD80 		beq	.L336
 5378              	.LBB6:
2415:../tasks/SDMMC/ff.c **** 			DWORD dw, cl;
2416:../tasks/SDMMC/ff.c **** 
2417:../tasks/SDMMC/ff.c **** 			if (res != FR_OK) {					/* No file, create new */
 5379              		.loc 1 2417 0
 5380 203c 97F84F32 		ldrb	r3, [r7, #591]	@ zero_extendqisi2
 5381 2040 002B     		cmp	r3, #0
 5382 2042 1FD0     		beq	.L337
2418:../tasks/SDMMC/ff.c **** 				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 5383              		.loc 1 2418 0
 5384 2044 97F84F32 		ldrb	r3, [r7, #591]	@ zero_extendqisi2
 5385 2048 042B     		cmp	r3, #4
 5386 204a 0ED1     		bne	.L338
2419:../tasks/SDMMC/ff.c **** #if _FS_LOCK
2420:../tasks/SDMMC/ff.c **** 					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 5387              		.loc 1 2420 0
 5388 204c FEF7CEF8 		bl	enq_lock
 5389 2050 0346     		mov	r3, r0
 5390 2052 002B     		cmp	r3, #0
 5391 2054 06D0     		beq	.L339
 5392              		.loc 1 2420 0 is_stmt 0 discriminator 1
 5393 2056 07F12003 		add	r3, r7, #32
 5394 205a 1846     		mov	r0, r3
 5395 205c FFF724F9 		bl	dir_register
 5396 2060 0346     		mov	r3, r0
 5397 2062 00E0     		b	.L340
 5398              	.L339:
 5399              		.loc 1 2420 0 discriminator 2
 5400 2064 1223     		movs	r3, #18
 5401              	.L340:
 5402              		.loc 1 2420 0 discriminator 3
 5403 2066 87F84F32 		strb	r3, [r7, #591]
 5404              	.L338:
2421:../tasks/SDMMC/ff.c **** #else
2422:../tasks/SDMMC/ff.c **** 					res = dir_register(&dj);
2423:../tasks/SDMMC/ff.c **** #endif
2424:../tasks/SDMMC/ff.c **** 				mode |= FA_CREATE_ALWAYS;		/* File is created */
 5405              		.loc 1 2424 0 is_stmt 1
 5406 206a FB1D     		adds	r3, r7, #7
 5407 206c FA1D     		adds	r2, r7, #7
 5408 206e 1278     		ldrb	r2, [r2]
 5409 2070 42F00802 		orr	r2, r2, #8
 5410 2074 1A70     		strb	r2, [r3]
2425:../tasks/SDMMC/ff.c **** 				dir = dj.dir;					/* New entry */
 5411              		.loc 1 2425 0
 5412 2076 07F12003 		add	r3, r7, #32
 5413 207a D3F81432 		ldr	r3, [r3, #532]
 5414 207e C7F84832 		str	r3, [r7, #584]
 5415 2082 14E0     		b	.L341
 5416              	.L337:
2426:../tasks/SDMMC/ff.c **** 			}
2427:../tasks/SDMMC/ff.c **** 			else {								/* Any object is already existing */
2428:../tasks/SDMMC/ff.c **** 				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 5417              		.loc 1 2428 0
 5418 2084 D7F84832 		ldr	r3, [r7, #584]
 5419 2088 0B33     		adds	r3, r3, #11
 5420 208a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5421 208c 03F01103 		and	r3, r3, #17
 5422 2090 002B     		cmp	r3, #0
 5423 2092 03D0     		beq	.L342
2429:../tasks/SDMMC/ff.c **** 					res = FR_DENIED;
 5424              		.loc 1 2429 0
 5425 2094 0723     		movs	r3, #7
 5426 2096 87F84F32 		strb	r3, [r7, #591]
 5427 209a 08E0     		b	.L341
 5428              	.L342:
2430:../tasks/SDMMC/ff.c **** 				} else {
2431:../tasks/SDMMC/ff.c **** 					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 5429              		.loc 1 2431 0
 5430 209c FB1D     		adds	r3, r7, #7
 5431 209e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5432 20a0 03F00403 		and	r3, r3, #4
 5433 20a4 002B     		cmp	r3, #0
 5434 20a6 02D0     		beq	.L341
2432:../tasks/SDMMC/ff.c **** 						res = FR_EXIST;
 5435              		.loc 1 2432 0
 5436 20a8 0823     		movs	r3, #8
 5437 20aa 87F84F32 		strb	r3, [r7, #591]
 5438              	.L341:
2433:../tasks/SDMMC/ff.c **** 				}
2434:../tasks/SDMMC/ff.c **** 			}
2435:../tasks/SDMMC/ff.c **** 			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 5439              		.loc 1 2435 0
 5440 20ae 97F84F32 		ldrb	r3, [r7, #591]	@ zero_extendqisi2
 5441 20b2 002B     		cmp	r3, #0
 5442 20b4 40F08E80 		bne	.L343
 5443              		.loc 1 2435 0 is_stmt 0 discriminator 1
 5444 20b8 FB1D     		adds	r3, r7, #7
 5445 20ba 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5446 20bc 03F00803 		and	r3, r3, #8
 5447 20c0 002B     		cmp	r3, #0
 5448 20c2 00F08780 		beq	.L343
2436:../tasks/SDMMC/ff.c **** 				dw = get_fattime();				/* Created time */
 5449              		.loc 1 2436 0 is_stmt 1
 5450 20c6 FFF7FEFF 		bl	get_fattime
 5451 20ca C7F84402 		str	r0, [r7, #580]
2437:../tasks/SDMMC/ff.c **** 				ST_DWORD(dir+DIR_CrtTime, dw);
 5452              		.loc 1 2437 0
 5453 20ce D7F84832 		ldr	r3, [r7, #584]
 5454 20d2 0E33     		adds	r3, r3, #14
 5455 20d4 D7F84422 		ldr	r2, [r7, #580]
 5456 20d8 D2B2     		uxtb	r2, r2
 5457 20da 1A70     		strb	r2, [r3]
 5458 20dc D7F84832 		ldr	r3, [r7, #584]
 5459 20e0 0F33     		adds	r3, r3, #15
 5460 20e2 D7F84422 		ldr	r2, [r7, #580]
 5461 20e6 92B2     		uxth	r2, r2
 5462 20e8 120A     		lsrs	r2, r2, #8
 5463 20ea 92B2     		uxth	r2, r2
 5464 20ec D2B2     		uxtb	r2, r2
 5465 20ee 1A70     		strb	r2, [r3]
 5466 20f0 D7F84832 		ldr	r3, [r7, #584]
 5467 20f4 1033     		adds	r3, r3, #16
 5468 20f6 D7F84422 		ldr	r2, [r7, #580]
 5469 20fa 120C     		lsrs	r2, r2, #16
 5470 20fc D2B2     		uxtb	r2, r2
 5471 20fe 1A70     		strb	r2, [r3]
 5472 2100 D7F84832 		ldr	r3, [r7, #584]
 5473 2104 1133     		adds	r3, r3, #17
 5474 2106 D7F84422 		ldr	r2, [r7, #580]
 5475 210a 120E     		lsrs	r2, r2, #24
 5476 210c D2B2     		uxtb	r2, r2
 5477 210e 1A70     		strb	r2, [r3]
2438:../tasks/SDMMC/ff.c **** 				dir[DIR_Attr] = 0;				/* Reset attribute */
 5478              		.loc 1 2438 0
 5479 2110 D7F84832 		ldr	r3, [r7, #584]
 5480 2114 0B33     		adds	r3, r3, #11
 5481 2116 0022     		movs	r2, #0
 5482 2118 1A70     		strb	r2, [r3]
2439:../tasks/SDMMC/ff.c **** 				ST_DWORD(dir+DIR_FileSize, 0);	/* size = 0 */
 5483              		.loc 1 2439 0
 5484 211a D7F84832 		ldr	r3, [r7, #584]
 5485 211e 1C33     		adds	r3, r3, #28
 5486 2120 0022     		movs	r2, #0
 5487 2122 1A70     		strb	r2, [r3]
 5488 2124 D7F84832 		ldr	r3, [r7, #584]
 5489 2128 1D33     		adds	r3, r3, #29
 5490 212a 0022     		movs	r2, #0
 5491 212c 1A70     		strb	r2, [r3]
 5492 212e D7F84832 		ldr	r3, [r7, #584]
 5493 2132 1E33     		adds	r3, r3, #30
 5494 2134 0022     		movs	r2, #0
 5495 2136 1A70     		strb	r2, [r3]
 5496 2138 D7F84832 		ldr	r3, [r7, #584]
 5497 213c 1F33     		adds	r3, r3, #31
 5498 213e 0022     		movs	r2, #0
 5499 2140 1A70     		strb	r2, [r3]
2440:../tasks/SDMMC/ff.c **** 				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 5500              		.loc 1 2440 0
 5501 2142 07F12003 		add	r3, r7, #32
 5502 2146 D3F80032 		ldr	r3, [r3, #512]
 5503 214a 1846     		mov	r0, r3
 5504 214c D7F84812 		ldr	r1, [r7, #584]
 5505 2150 FEF7B2FF 		bl	ld_clust
 5506 2154 C7F84002 		str	r0, [r7, #576]
2441:../tasks/SDMMC/ff.c **** 				st_clust(dir, 0);				/* cluster = 0 */
 5507              		.loc 1 2441 0
 5508 2158 D7F84802 		ldr	r0, [r7, #584]
 5509 215c 0021     		movs	r1, #0
 5510 215e FEF7D7FF 		bl	st_clust
2442:../tasks/SDMMC/ff.c **** 				dj.fs->wflag = 1;
 5511              		.loc 1 2442 0
 5512 2162 07F12003 		add	r3, r7, #32
 5513 2166 D3F80032 		ldr	r3, [r3, #512]
 5514 216a 0122     		movs	r2, #1
 5515 216c 83F80422 		strb	r2, [r3, #516]
2443:../tasks/SDMMC/ff.c **** 				if (cl) {						/* Remove the cluster chain if exist */
 5516              		.loc 1 2443 0
 5517 2170 D7F84032 		ldr	r3, [r7, #576]
 5518 2174 002B     		cmp	r3, #0
 5519 2176 2DD0     		beq	.L343
2444:../tasks/SDMMC/ff.c **** 					dw = dj.fs->winsect;
 5520              		.loc 1 2444 0
 5521 2178 07F12003 		add	r3, r7, #32
 5522 217c D3F80032 		ldr	r3, [r3, #512]
 5523 2180 D3F83032 		ldr	r3, [r3, #560]
 5524 2184 C7F84432 		str	r3, [r7, #580]
2445:../tasks/SDMMC/ff.c **** 					res = remove_chain(dj.fs, cl);
 5525              		.loc 1 2445 0
 5526 2188 07F12003 		add	r3, r7, #32
 5527 218c D3F80032 		ldr	r3, [r3, #512]
 5528 2190 1846     		mov	r0, r3
 5529 2192 D7F84012 		ldr	r1, [r7, #576]
 5530 2196 FEF78FFC 		bl	remove_chain
 5531 219a 0346     		mov	r3, r0
 5532 219c 87F84F32 		strb	r3, [r7, #591]
2446:../tasks/SDMMC/ff.c **** 					if (res == FR_OK) {
 5533              		.loc 1 2446 0
 5534 21a0 97F84F32 		ldrb	r3, [r7, #591]	@ zero_extendqisi2
 5535 21a4 002B     		cmp	r3, #0
 5536 21a6 15D1     		bne	.L343
2447:../tasks/SDMMC/ff.c **** 						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 5537              		.loc 1 2447 0
 5538 21a8 07F12003 		add	r3, r7, #32
 5539 21ac D3F80032 		ldr	r3, [r3, #512]
 5540 21b0 D7F84022 		ldr	r2, [r7, #576]
 5541 21b4 013A     		subs	r2, r2, #1
 5542 21b6 C3F80C22 		str	r2, [r3, #524]
2448:../tasks/SDMMC/ff.c **** 						res = move_window(dj.fs, dw);
 5543              		.loc 1 2448 0
 5544 21ba 07F12003 		add	r3, r7, #32
 5545 21be D3F80032 		ldr	r3, [r3, #512]
 5546 21c2 1846     		mov	r0, r3
 5547 21c4 D7F84412 		ldr	r1, [r7, #580]
 5548 21c8 FEF7CEF9 		bl	move_window
 5549 21cc 0346     		mov	r3, r0
 5550 21ce 87F84F32 		strb	r3, [r7, #591]
 5551              	.LBE6:
 5552 21d2 21E0     		b	.L344
 5553              	.L343:
 5554 21d4 20E0     		b	.L344
 5555              	.L336:
2449:../tasks/SDMMC/ff.c **** 					}
2450:../tasks/SDMMC/ff.c **** 				}
2451:../tasks/SDMMC/ff.c **** 			}
2452:../tasks/SDMMC/ff.c **** 		}
2453:../tasks/SDMMC/ff.c **** 		else {	/* Open an existing file */
2454:../tasks/SDMMC/ff.c **** 			if (res == FR_OK) {					/* Follow succeeded */
 5556              		.loc 1 2454 0
 5557 21d6 97F84F32 		ldrb	r3, [r7, #591]	@ zero_extendqisi2
 5558 21da 002B     		cmp	r3, #0
 5559 21dc 1CD1     		bne	.L344
2455:../tasks/SDMMC/ff.c **** 				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 5560              		.loc 1 2455 0
 5561 21de D7F84832 		ldr	r3, [r7, #584]
 5562 21e2 0B33     		adds	r3, r3, #11
 5563 21e4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5564 21e6 03F01003 		and	r3, r3, #16
 5565 21ea 002B     		cmp	r3, #0
 5566 21ec 03D0     		beq	.L345
2456:../tasks/SDMMC/ff.c **** 					res = FR_NO_FILE;
 5567              		.loc 1 2456 0
 5568 21ee 0423     		movs	r3, #4
 5569 21f0 87F84F32 		strb	r3, [r7, #591]
 5570 21f4 10E0     		b	.L344
 5571              	.L345:
2457:../tasks/SDMMC/ff.c **** 				} else {
2458:../tasks/SDMMC/ff.c **** 					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 5572              		.loc 1 2458 0
 5573 21f6 FB1D     		adds	r3, r7, #7
 5574 21f8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5575 21fa 03F00203 		and	r3, r3, #2
 5576 21fe 002B     		cmp	r3, #0
 5577 2200 0AD0     		beq	.L344
 5578              		.loc 1 2458 0 is_stmt 0 discriminator 1
 5579 2202 D7F84832 		ldr	r3, [r7, #584]
 5580 2206 0B33     		adds	r3, r3, #11
 5581 2208 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5582 220a 03F00103 		and	r3, r3, #1
 5583 220e 002B     		cmp	r3, #0
 5584 2210 02D0     		beq	.L344
2459:../tasks/SDMMC/ff.c **** 						res = FR_DENIED;
 5585              		.loc 1 2459 0 is_stmt 1
 5586 2212 0723     		movs	r3, #7
 5587 2214 87F84F32 		strb	r3, [r7, #591]
 5588              	.L344:
2460:../tasks/SDMMC/ff.c **** 				}
2461:../tasks/SDMMC/ff.c **** 			}
2462:../tasks/SDMMC/ff.c **** 		}
2463:../tasks/SDMMC/ff.c **** 		if (res == FR_OK) {
 5589              		.loc 1 2463 0
 5590 2218 97F84F32 		ldrb	r3, [r7, #591]	@ zero_extendqisi2
 5591 221c 002B     		cmp	r3, #0
 5592 221e 3CD1     		bne	.L346
2464:../tasks/SDMMC/ff.c **** 			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 5593              		.loc 1 2464 0
 5594 2220 FB1D     		adds	r3, r7, #7
 5595 2222 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5596 2224 03F00803 		and	r3, r3, #8
 5597 2228 002B     		cmp	r3, #0
 5598 222a 05D0     		beq	.L347
2465:../tasks/SDMMC/ff.c **** 				mode |= FA__WRITTEN;
 5599              		.loc 1 2465 0
 5600 222c FB1D     		adds	r3, r7, #7
 5601 222e FA1D     		adds	r2, r7, #7
 5602 2230 1278     		ldrb	r2, [r2]
 5603 2232 42F02002 		orr	r2, r2, #32
 5604 2236 1A70     		strb	r2, [r3]
 5605              	.L347:
2466:../tasks/SDMMC/ff.c **** 			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 5606              		.loc 1 2466 0
 5607 2238 07F12003 		add	r3, r7, #32
 5608 223c D3F80032 		ldr	r3, [r3, #512]
 5609 2240 D3F83022 		ldr	r2, [r3, #560]
 5610 2244 07F10C03 		add	r3, r7, #12
 5611 2248 1B68     		ldr	r3, [r3]
 5612 224a C3F81C22 		str	r2, [r3, #540]
2467:../tasks/SDMMC/ff.c **** 			fp->dir_ptr = dir;
 5613              		.loc 1 2467 0
 5614 224e 07F10C03 		add	r3, r7, #12
 5615 2252 1B68     		ldr	r3, [r3]
 5616 2254 D7F84822 		ldr	r2, [r7, #584]
 5617 2258 C3F82022 		str	r2, [r3, #544]
2468:../tasks/SDMMC/ff.c **** #if _FS_LOCK
2469:../tasks/SDMMC/ff.c **** 			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 5618              		.loc 1 2469 0
 5619 225c FB1D     		adds	r3, r7, #7
 5620 225e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5621 2260 23F00103 		bic	r3, r3, #1
 5622 2264 002B     		cmp	r3, #0
 5623 2266 0CBF     		ite	eq
 5624 2268 0023     		moveq	r3, #0
 5625 226a 0123     		movne	r3, #1
 5626 226c DBB2     		uxtb	r3, r3
 5627 226e 07F12002 		add	r2, r7, #32
 5628 2272 1046     		mov	r0, r2
 5629 2274 1946     		mov	r1, r3
 5630 2276 FDF7DFFF 		bl	inc_lock
 5631 227a 0246     		mov	r2, r0
 5632 227c 07F10C03 		add	r3, r7, #12
 5633 2280 1B68     		ldr	r3, [r3]
 5634 2282 C3F82822 		str	r2, [r3, #552]
2470:../tasks/SDMMC/ff.c **** 			if (!fp->lockid) res = FR_INT_ERR;
 5635              		.loc 1 2470 0
 5636 2286 07F10C03 		add	r3, r7, #12
 5637 228a 1B68     		ldr	r3, [r3]
 5638 228c D3F82832 		ldr	r3, [r3, #552]
 5639 2290 002B     		cmp	r3, #0
 5640 2292 02D1     		bne	.L346
 5641              		.loc 1 2470 0 is_stmt 0 discriminator 1
 5642 2294 0223     		movs	r3, #2
 5643 2296 87F84F32 		strb	r3, [r7, #591]
 5644              	.L346:
2471:../tasks/SDMMC/ff.c **** #endif
2472:../tasks/SDMMC/ff.c **** 		}
2473:../tasks/SDMMC/ff.c **** 
2474:../tasks/SDMMC/ff.c **** #else				/* R/O configuration */
2475:../tasks/SDMMC/ff.c **** 		if (res == FR_OK) {					/* Follow succeeded */
2476:../tasks/SDMMC/ff.c **** 			dir = dj.dir;
2477:../tasks/SDMMC/ff.c **** 			if (!dir) {						/* Current directory itself */
2478:../tasks/SDMMC/ff.c **** 				res = FR_INVALID_NAME;
2479:../tasks/SDMMC/ff.c **** 			} else {
2480:../tasks/SDMMC/ff.c **** 				if (dir[DIR_Attr] & AM_DIR)	/* It is a directory */
2481:../tasks/SDMMC/ff.c **** 					res = FR_NO_FILE;
2482:../tasks/SDMMC/ff.c **** 			}
2483:../tasks/SDMMC/ff.c **** 		}
2484:../tasks/SDMMC/ff.c **** #endif
2485:../tasks/SDMMC/ff.c **** 		FREE_BUF();
2486:../tasks/SDMMC/ff.c **** 
2487:../tasks/SDMMC/ff.c **** 		if (res == FR_OK) {
 5645              		.loc 1 2487 0 is_stmt 1
 5646 229a 97F84F32 		ldrb	r3, [r7, #591]	@ zero_extendqisi2
 5647 229e 002B     		cmp	r3, #0
 5648 22a0 5DD1     		bne	.L333
2488:../tasks/SDMMC/ff.c **** 			fp->flag = mode;					/* File access mode */
 5649              		.loc 1 2488 0
 5650 22a2 07F10C03 		add	r3, r7, #12
 5651 22a6 1B68     		ldr	r3, [r3]
 5652 22a8 FA1D     		adds	r2, r7, #7
 5653 22aa 1278     		ldrb	r2, [r2]
 5654 22ac 83F80622 		strb	r2, [r3, #518]
2489:../tasks/SDMMC/ff.c **** 			fp->err = 0;						/* Clear error flag */
 5655              		.loc 1 2489 0
 5656 22b0 07F10C03 		add	r3, r7, #12
 5657 22b4 1B68     		ldr	r3, [r3]
 5658 22b6 0022     		movs	r2, #0
 5659 22b8 83F80722 		strb	r2, [r3, #519]
2490:../tasks/SDMMC/ff.c **** 			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 5660              		.loc 1 2490 0
 5661 22bc 07F12003 		add	r3, r7, #32
 5662 22c0 D3F80032 		ldr	r3, [r3, #512]
 5663 22c4 1846     		mov	r0, r3
 5664 22c6 D7F84812 		ldr	r1, [r7, #584]
 5665 22ca FEF7F5FE 		bl	ld_clust
 5666 22ce 0246     		mov	r2, r0
 5667 22d0 07F10C03 		add	r3, r7, #12
 5668 22d4 1B68     		ldr	r3, [r3]
 5669 22d6 C3F81022 		str	r2, [r3, #528]
2491:../tasks/SDMMC/ff.c **** 			fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
 5670              		.loc 1 2491 0
 5671 22da D7F84832 		ldr	r3, [r7, #584]
 5672 22de 1F33     		adds	r3, r3, #31
 5673 22e0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5674 22e2 1A06     		lsls	r2, r3, #24
 5675 22e4 D7F84832 		ldr	r3, [r7, #584]
 5676 22e8 1E33     		adds	r3, r3, #30
 5677 22ea 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5678 22ec 1B04     		lsls	r3, r3, #16
 5679 22ee 1A43     		orrs	r2, r2, r3
 5680 22f0 D7F84832 		ldr	r3, [r7, #584]
 5681 22f4 1D33     		adds	r3, r3, #29
 5682 22f6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5683 22f8 1B02     		lsls	r3, r3, #8
 5684 22fa 1A43     		orrs	r2, r2, r3
 5685 22fc D7F84832 		ldr	r3, [r7, #584]
 5686 2300 1C33     		adds	r3, r3, #28
 5687 2302 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5688 2304 1A43     		orrs	r2, r2, r3
 5689 2306 07F10C03 		add	r3, r7, #12
 5690 230a 1B68     		ldr	r3, [r3]
 5691 230c C3F80C22 		str	r2, [r3, #524]
2492:../tasks/SDMMC/ff.c **** 			fp->fptr = 0;						/* File pointer */
 5692              		.loc 1 2492 0
 5693 2310 07F10C03 		add	r3, r7, #12
 5694 2314 1B68     		ldr	r3, [r3]
 5695 2316 0022     		movs	r2, #0
 5696 2318 C3F80822 		str	r2, [r3, #520]
2493:../tasks/SDMMC/ff.c **** 			fp->dsect = 0;
 5697              		.loc 1 2493 0
 5698 231c 07F10C03 		add	r3, r7, #12
 5699 2320 1B68     		ldr	r3, [r3]
 5700 2322 0022     		movs	r2, #0
 5701 2324 C3F81822 		str	r2, [r3, #536]
2494:../tasks/SDMMC/ff.c **** #if _USE_FASTSEEK
2495:../tasks/SDMMC/ff.c **** 			fp->cltbl = 0;						/* Normal seek mode */
 5702              		.loc 1 2495 0
 5703 2328 07F10C03 		add	r3, r7, #12
 5704 232c 1B68     		ldr	r3, [r3]
 5705 232e 0022     		movs	r2, #0
 5706 2330 C3F82422 		str	r2, [r3, #548]
2496:../tasks/SDMMC/ff.c **** #endif
2497:../tasks/SDMMC/ff.c **** 			fp->fs = dj.fs;	 					/* Validate file object */
 5707              		.loc 1 2497 0
 5708 2334 07F12003 		add	r3, r7, #32
 5709 2338 D3F80022 		ldr	r2, [r3, #512]
 5710 233c 07F10C03 		add	r3, r7, #12
 5711 2340 1B68     		ldr	r3, [r3]
 5712 2342 C3F80022 		str	r2, [r3, #512]
2498:../tasks/SDMMC/ff.c **** 			fp->id = fp->fs->id;
 5713              		.loc 1 2498 0
 5714 2346 07F10C03 		add	r3, r7, #12
 5715 234a 1B68     		ldr	r3, [r3]
 5716 234c D3F80032 		ldr	r3, [r3, #512]
 5717 2350 B3F80622 		ldrh	r2, [r3, #518]
 5718 2354 07F10C03 		add	r3, r7, #12
 5719 2358 1B68     		ldr	r3, [r3]
 5720 235a A3F80422 		strh	r2, [r3, #516]	@ movhi
 5721              	.L333:
2499:../tasks/SDMMC/ff.c **** 		}
2500:../tasks/SDMMC/ff.c **** 	}
2501:../tasks/SDMMC/ff.c **** 
2502:../tasks/SDMMC/ff.c **** 	LEAVE_FF(dj.fs, res);
 5722              		.loc 1 2502 0
 5723 235e 97F84F32 		ldrb	r3, [r7, #591]	@ zero_extendqisi2
 5724              	.L348:
2503:../tasks/SDMMC/ff.c **** }
 5725              		.loc 1 2503 0
 5726 2362 1846     		mov	r0, r3
 5727 2364 07F51477 		add	r7, r7, #592
 5728 2368 BD46     		mov	sp, r7
 5729              		@ sp needed
 5730 236a 80BD     		pop	{r7, pc}
 5731              		.cfi_endproc
 5732              	.LFE90:
 5734              		.align	2
 5735              		.global	f_read
 5736              		.thumb
 5737              		.thumb_func
 5739              	f_read:
 5740              	.LFB91:
2504:../tasks/SDMMC/ff.c **** 
2505:../tasks/SDMMC/ff.c **** 
2506:../tasks/SDMMC/ff.c **** 
2507:../tasks/SDMMC/ff.c **** 
2508:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
2509:../tasks/SDMMC/ff.c **** /* Read File                                                             */
2510:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
2511:../tasks/SDMMC/ff.c **** 
2512:../tasks/SDMMC/ff.c **** FRESULT f_read (
2513:../tasks/SDMMC/ff.c **** 	FIL* fp, 		/* Pointer to the file object */
2514:../tasks/SDMMC/ff.c **** 	void* buff,		/* Pointer to data buffer */
2515:../tasks/SDMMC/ff.c **** 	UINT btr,		/* Number of bytes to read */
2516:../tasks/SDMMC/ff.c **** 	UINT* br		/* Pointer to number of bytes read */
2517:../tasks/SDMMC/ff.c **** )
2518:../tasks/SDMMC/ff.c **** {
 5741              		.loc 1 2518 0
 5742              		.cfi_startproc
 5743              		@ args = 0, pretend = 0, frame = 48
 5744              		@ frame_needed = 1, uses_anonymous_args = 0
 5745 236c 80B5     		push	{r7, lr}
 5746              		.cfi_def_cfa_offset 8
 5747              		.cfi_offset 7, -8
 5748              		.cfi_offset 14, -4
 5749 236e 8CB0     		sub	sp, sp, #48
 5750              		.cfi_def_cfa_offset 56
 5751 2370 00AF     		add	r7, sp, #0
 5752              		.cfi_def_cfa_register 7
 5753 2372 F860     		str	r0, [r7, #12]
 5754 2374 B960     		str	r1, [r7, #8]
 5755 2376 7A60     		str	r2, [r7, #4]
 5756 2378 3B60     		str	r3, [r7]
2519:../tasks/SDMMC/ff.c **** 	FRESULT res;
2520:../tasks/SDMMC/ff.c **** 	DWORD clst, sect, remain;
2521:../tasks/SDMMC/ff.c **** 	UINT rcnt, cc;
2522:../tasks/SDMMC/ff.c **** 	BYTE csect, *rbuff = (BYTE*)buff;
 5757              		.loc 1 2522 0
 5758 237a BB68     		ldr	r3, [r7, #8]
 5759 237c 3B62     		str	r3, [r7, #32]
2523:../tasks/SDMMC/ff.c **** 
2524:../tasks/SDMMC/ff.c **** 
2525:../tasks/SDMMC/ff.c **** 	*br = 0;	/* Clear read byte counter */
 5760              		.loc 1 2525 0
 5761 237e 3B68     		ldr	r3, [r7]
 5762 2380 0022     		movs	r2, #0
 5763 2382 1A60     		str	r2, [r3]
2526:../tasks/SDMMC/ff.c **** 
2527:../tasks/SDMMC/ff.c **** 	res = validate(fp);							/* Check validity */
 5764              		.loc 1 2527 0
 5765 2384 F868     		ldr	r0, [r7, #12]
 5766 2386 FFF761FD 		bl	validate
 5767 238a 0346     		mov	r3, r0
 5768 238c FB77     		strb	r3, [r7, #31]
2528:../tasks/SDMMC/ff.c **** 	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 5769              		.loc 1 2528 0
 5770 238e FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 5771 2390 002B     		cmp	r3, #0
 5772 2392 01D0     		beq	.L350
 5773              		.loc 1 2528 0 is_stmt 0 discriminator 1
 5774 2394 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 5775 2396 58E1     		b	.L351
 5776              	.L350:
2529:../tasks/SDMMC/ff.c **** 	if (fp->err)								/* Check error */
 5777              		.loc 1 2529 0 is_stmt 1
 5778 2398 FB68     		ldr	r3, [r7, #12]
 5779 239a 93F80732 		ldrb	r3, [r3, #519]	@ zero_extendqisi2
 5780 239e 002B     		cmp	r3, #0
 5781 23a0 03D0     		beq	.L352
2530:../tasks/SDMMC/ff.c **** 		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 5782              		.loc 1 2530 0
 5783 23a2 FB68     		ldr	r3, [r7, #12]
 5784 23a4 93F80732 		ldrb	r3, [r3, #519]	@ zero_extendqisi2
 5785 23a8 4FE1     		b	.L351
 5786              	.L352:
2531:../tasks/SDMMC/ff.c **** 	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 5787              		.loc 1 2531 0
 5788 23aa FB68     		ldr	r3, [r7, #12]
 5789 23ac 93F80632 		ldrb	r3, [r3, #518]	@ zero_extendqisi2
 5790 23b0 03F00103 		and	r3, r3, #1
 5791 23b4 002B     		cmp	r3, #0
 5792 23b6 01D1     		bne	.L353
2532:../tasks/SDMMC/ff.c **** 		LEAVE_FF(fp->fs, FR_DENIED);
 5793              		.loc 1 2532 0
 5794 23b8 0723     		movs	r3, #7
 5795 23ba 46E1     		b	.L351
 5796              	.L353:
2533:../tasks/SDMMC/ff.c **** 	remain = fp->fsize - fp->fptr;
 5797              		.loc 1 2533 0
 5798 23bc FB68     		ldr	r3, [r7, #12]
 5799 23be D3F80C22 		ldr	r2, [r3, #524]
 5800 23c2 FB68     		ldr	r3, [r7, #12]
 5801 23c4 D3F80832 		ldr	r3, [r3, #520]
 5802 23c8 D31A     		subs	r3, r2, r3
 5803 23ca BB61     		str	r3, [r7, #24]
2534:../tasks/SDMMC/ff.c **** 	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 5804              		.loc 1 2534 0
 5805 23cc 7A68     		ldr	r2, [r7, #4]
 5806 23ce BB69     		ldr	r3, [r7, #24]
 5807 23d0 9A42     		cmp	r2, r3
 5808 23d2 02D9     		bls	.L354
 5809              		.loc 1 2534 0 is_stmt 0 discriminator 1
 5810 23d4 BB69     		ldr	r3, [r7, #24]
 5811 23d6 7B60     		str	r3, [r7, #4]
2535:../tasks/SDMMC/ff.c **** 
2536:../tasks/SDMMC/ff.c **** 	for ( ;  btr;								/* Repeat until all data read */
 5812              		.loc 1 2536 0 is_stmt 1 discriminator 1
 5813 23d8 32E1     		b	.L355
 5814              	.L354:
 5815              		.loc 1 2536 0 is_stmt 0
 5816 23da 31E1     		b	.L355
 5817              	.L373:
2537:../tasks/SDMMC/ff.c **** 		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
2538:../tasks/SDMMC/ff.c **** 		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 5818              		.loc 1 2538 0 is_stmt 1
 5819 23dc FB68     		ldr	r3, [r7, #12]
 5820 23de D3F80832 		ldr	r3, [r3, #520]
 5821 23e2 C3F30803 		ubfx	r3, r3, #0, #9
 5822 23e6 002B     		cmp	r3, #0
 5823 23e8 40F0FA80 		bne	.L356
2539:../tasks/SDMMC/ff.c **** 			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 5824              		.loc 1 2539 0
 5825 23ec FB68     		ldr	r3, [r7, #12]
 5826 23ee D3F80832 		ldr	r3, [r3, #520]
 5827 23f2 5B0A     		lsrs	r3, r3, #9
 5828 23f4 DAB2     		uxtb	r2, r3
 5829 23f6 FB68     		ldr	r3, [r7, #12]
 5830 23f8 D3F80032 		ldr	r3, [r3, #512]
 5831 23fc 93F80232 		ldrb	r3, [r3, #514]	@ zero_extendqisi2
 5832 2400 013B     		subs	r3, r3, #1
 5833 2402 DBB2     		uxtb	r3, r3
 5834 2404 1340     		ands	r3, r3, r2
 5835 2406 FB75     		strb	r3, [r7, #23]
2540:../tasks/SDMMC/ff.c **** 			if (!csect) {						/* On the cluster boundary? */
 5836              		.loc 1 2540 0
 5837 2408 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 5838 240a 002B     		cmp	r3, #0
 5839 240c 39D1     		bne	.L357
2541:../tasks/SDMMC/ff.c **** 				if (fp->fptr == 0) {			/* On the top of the file? */
 5840              		.loc 1 2541 0
 5841 240e FB68     		ldr	r3, [r7, #12]
 5842 2410 D3F80832 		ldr	r3, [r3, #520]
 5843 2414 002B     		cmp	r3, #0
 5844 2416 04D1     		bne	.L358
2542:../tasks/SDMMC/ff.c **** 					clst = fp->sclust;			/* Follow from the origin */
 5845              		.loc 1 2542 0
 5846 2418 FB68     		ldr	r3, [r7, #12]
 5847 241a D3F81032 		ldr	r3, [r3, #528]
 5848 241e FB62     		str	r3, [r7, #44]
 5849 2420 18E0     		b	.L359
 5850              	.L358:
2543:../tasks/SDMMC/ff.c **** 				} else {						/* Middle or end of the file */
2544:../tasks/SDMMC/ff.c **** #if _USE_FASTSEEK
2545:../tasks/SDMMC/ff.c **** 					if (fp->cltbl)
 5851              		.loc 1 2545 0
 5852 2422 FB68     		ldr	r3, [r7, #12]
 5853 2424 D3F82432 		ldr	r3, [r3, #548]
 5854 2428 002B     		cmp	r3, #0
 5855 242a 08D0     		beq	.L360
2546:../tasks/SDMMC/ff.c **** 						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 5856              		.loc 1 2546 0
 5857 242c FB68     		ldr	r3, [r7, #12]
 5858 242e D3F80832 		ldr	r3, [r3, #520]
 5859 2432 F868     		ldr	r0, [r7, #12]
 5860 2434 1946     		mov	r1, r3
 5861 2436 FEF731FC 		bl	clmt_clust
 5862 243a F862     		str	r0, [r7, #44]
 5863 243c 0AE0     		b	.L359
 5864              	.L360:
2547:../tasks/SDMMC/ff.c **** 					else
2548:../tasks/SDMMC/ff.c **** #endif
2549:../tasks/SDMMC/ff.c **** 						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 5865              		.loc 1 2549 0
 5866 243e FB68     		ldr	r3, [r7, #12]
 5867 2440 D3F80022 		ldr	r2, [r3, #512]
 5868 2444 FB68     		ldr	r3, [r7, #12]
 5869 2446 D3F81432 		ldr	r3, [r3, #532]
 5870 244a 1046     		mov	r0, r2
 5871 244c 1946     		mov	r1, r3
 5872 244e FFF7FEFF 		bl	get_fat
 5873 2452 F862     		str	r0, [r7, #44]
 5874              	.L359:
2550:../tasks/SDMMC/ff.c **** 				}
2551:../tasks/SDMMC/ff.c **** 				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 5875              		.loc 1 2551 0
 5876 2454 FB6A     		ldr	r3, [r7, #44]
 5877 2456 012B     		cmp	r3, #1
 5878 2458 05D8     		bhi	.L361
 5879              		.loc 1 2551 0 is_stmt 0 discriminator 1
 5880 245a FB68     		ldr	r3, [r7, #12]
 5881 245c 0222     		movs	r2, #2
 5882 245e 83F80722 		strb	r2, [r3, #519]
 5883 2462 0223     		movs	r3, #2
 5884 2464 F1E0     		b	.L351
 5885              	.L361:
2552:../tasks/SDMMC/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 5886              		.loc 1 2552 0 is_stmt 1
 5887 2466 FB6A     		ldr	r3, [r7, #44]
 5888 2468 B3F1FF3F 		cmp	r3, #-1
 5889 246c 05D1     		bne	.L362
 5890              		.loc 1 2552 0 is_stmt 0 discriminator 1
 5891 246e FB68     		ldr	r3, [r7, #12]
 5892 2470 0122     		movs	r2, #1
 5893 2472 83F80722 		strb	r2, [r3, #519]
 5894 2476 0123     		movs	r3, #1
 5895 2478 E7E0     		b	.L351
 5896              	.L362:
2553:../tasks/SDMMC/ff.c **** 				fp->clust = clst;				/* Update current cluster */
 5897              		.loc 1 2553 0 is_stmt 1
 5898 247a FB68     		ldr	r3, [r7, #12]
 5899 247c FA6A     		ldr	r2, [r7, #44]
 5900 247e C3F81422 		str	r2, [r3, #532]
 5901              	.L357:
2554:../tasks/SDMMC/ff.c **** 			}
2555:../tasks/SDMMC/ff.c **** 			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 5902              		.loc 1 2555 0
 5903 2482 FB68     		ldr	r3, [r7, #12]
 5904 2484 D3F80022 		ldr	r2, [r3, #512]
 5905 2488 FB68     		ldr	r3, [r7, #12]
 5906 248a D3F81432 		ldr	r3, [r3, #532]
 5907 248e 1046     		mov	r0, r2
 5908 2490 1946     		mov	r1, r3
 5909 2492 FFF7FEFF 		bl	clust2sect
 5910 2496 3861     		str	r0, [r7, #16]
2556:../tasks/SDMMC/ff.c **** 			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 5911              		.loc 1 2556 0
 5912 2498 3B69     		ldr	r3, [r7, #16]
 5913 249a 002B     		cmp	r3, #0
 5914 249c 05D1     		bne	.L363
 5915              		.loc 1 2556 0 is_stmt 0 discriminator 1
 5916 249e FB68     		ldr	r3, [r7, #12]
 5917 24a0 0222     		movs	r2, #2
 5918 24a2 83F80722 		strb	r2, [r3, #519]
 5919 24a6 0223     		movs	r3, #2
 5920 24a8 CFE0     		b	.L351
 5921              	.L363:
2557:../tasks/SDMMC/ff.c **** 			sect += csect;
 5922              		.loc 1 2557 0 is_stmt 1
 5923 24aa FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 5924 24ac 3A69     		ldr	r2, [r7, #16]
 5925 24ae 1344     		add	r3, r3, r2
 5926 24b0 3B61     		str	r3, [r7, #16]
2558:../tasks/SDMMC/ff.c **** 			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 5927              		.loc 1 2558 0
 5928 24b2 7B68     		ldr	r3, [r7, #4]
 5929 24b4 5B0A     		lsrs	r3, r3, #9
 5930 24b6 7B62     		str	r3, [r7, #36]
2559:../tasks/SDMMC/ff.c **** 			if (cc) {							/* Read maximum contiguous sectors directly */
 5931              		.loc 1 2559 0
 5932 24b8 7B6A     		ldr	r3, [r7, #36]
 5933 24ba 002B     		cmp	r3, #0
 5934 24bc 49D0     		beq	.L364
2560:../tasks/SDMMC/ff.c **** 				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 5935              		.loc 1 2560 0
 5936 24be FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 5937 24c0 7B6A     		ldr	r3, [r7, #36]
 5938 24c2 1A44     		add	r2, r2, r3
 5939 24c4 FB68     		ldr	r3, [r7, #12]
 5940 24c6 D3F80032 		ldr	r3, [r3, #512]
 5941 24ca 93F80232 		ldrb	r3, [r3, #514]	@ zero_extendqisi2
 5942 24ce 9A42     		cmp	r2, r3
 5943 24d0 08D9     		bls	.L365
2561:../tasks/SDMMC/ff.c **** 					cc = fp->fs->csize - csect;
 5944              		.loc 1 2561 0
 5945 24d2 FB68     		ldr	r3, [r7, #12]
 5946 24d4 D3F80032 		ldr	r3, [r3, #512]
 5947 24d8 93F80232 		ldrb	r3, [r3, #514]	@ zero_extendqisi2
 5948 24dc 1A46     		mov	r2, r3
 5949 24de FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 5950 24e0 D31A     		subs	r3, r2, r3
 5951 24e2 7B62     		str	r3, [r7, #36]
 5952              	.L365:
2562:../tasks/SDMMC/ff.c **** 				if (disk_read(fp->fs->drv, rbuff, sect, cc))
 5953              		.loc 1 2562 0
 5954 24e4 FB68     		ldr	r3, [r7, #12]
 5955 24e6 D3F80032 		ldr	r3, [r3, #512]
 5956 24ea 93F80122 		ldrb	r2, [r3, #513]	@ zero_extendqisi2
 5957 24ee 7B6A     		ldr	r3, [r7, #36]
 5958 24f0 DBB2     		uxtb	r3, r3
 5959 24f2 1046     		mov	r0, r2
 5960 24f4 396A     		ldr	r1, [r7, #32]
 5961 24f6 3A69     		ldr	r2, [r7, #16]
 5962 24f8 FFF7FEFF 		bl	disk_read
 5963 24fc 0346     		mov	r3, r0
 5964 24fe 002B     		cmp	r3, #0
 5965 2500 05D0     		beq	.L366
2563:../tasks/SDMMC/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
 5966              		.loc 1 2563 0
 5967 2502 FB68     		ldr	r3, [r7, #12]
 5968 2504 0122     		movs	r2, #1
 5969 2506 83F80722 		strb	r2, [r3, #519]
 5970 250a 0123     		movs	r3, #1
 5971 250c 9DE0     		b	.L351
 5972              	.L366:
2564:../tasks/SDMMC/ff.c **** #if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it 
2565:../tasks/SDMMC/ff.c **** #if _FS_TINY
2566:../tasks/SDMMC/ff.c **** 				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
2567:../tasks/SDMMC/ff.c **** 					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
2568:../tasks/SDMMC/ff.c **** #else
2569:../tasks/SDMMC/ff.c **** 				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 5973              		.loc 1 2569 0
 5974 250e FB68     		ldr	r3, [r7, #12]
 5975 2510 93F80632 		ldrb	r3, [r3, #518]	@ zero_extendqisi2
 5976 2514 03F04003 		and	r3, r3, #64
 5977 2518 002B     		cmp	r3, #0
 5978 251a 16D0     		beq	.L367
 5979              		.loc 1 2569 0 is_stmt 0 discriminator 1
 5980 251c FB68     		ldr	r3, [r7, #12]
 5981 251e D3F81822 		ldr	r2, [r3, #536]
 5982 2522 3B69     		ldr	r3, [r7, #16]
 5983 2524 D21A     		subs	r2, r2, r3
 5984 2526 7B6A     		ldr	r3, [r7, #36]
 5985 2528 9A42     		cmp	r2, r3
 5986 252a 0ED2     		bcs	.L367
2570:../tasks/SDMMC/ff.c **** 					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 5987              		.loc 1 2570 0 is_stmt 1
 5988 252c FB68     		ldr	r3, [r7, #12]
 5989 252e D3F81822 		ldr	r2, [r3, #536]
 5990 2532 3B69     		ldr	r3, [r7, #16]
 5991 2534 D31A     		subs	r3, r2, r3
 5992 2536 5B02     		lsls	r3, r3, #9
 5993 2538 3A6A     		ldr	r2, [r7, #32]
 5994 253a 1A44     		add	r2, r2, r3
 5995 253c FB68     		ldr	r3, [r7, #12]
 5996 253e 1046     		mov	r0, r2
 5997 2540 1946     		mov	r1, r3
 5998 2542 4FF40072 		mov	r2, #512
 5999 2546 FDF75BFD 		bl	mem_cpy
 6000              	.L367:
2571:../tasks/SDMMC/ff.c **** #endif
2572:../tasks/SDMMC/ff.c **** #endif
2573:../tasks/SDMMC/ff.c **** 				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 6001              		.loc 1 2573 0
 6002 254a 7B6A     		ldr	r3, [r7, #36]
 6003 254c 5B02     		lsls	r3, r3, #9
 6004 254e BB62     		str	r3, [r7, #40]
2574:../tasks/SDMMC/ff.c **** 				continue;
 6005              		.loc 1 2574 0
 6006 2550 60E0     		b	.L368
 6007              	.L364:
2575:../tasks/SDMMC/ff.c **** 			}
2576:../tasks/SDMMC/ff.c **** #if !_FS_TINY
2577:../tasks/SDMMC/ff.c **** 			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 6008              		.loc 1 2577 0
 6009 2552 FB68     		ldr	r3, [r7, #12]
 6010 2554 D3F81822 		ldr	r2, [r3, #536]
 6011 2558 3B69     		ldr	r3, [r7, #16]
 6012 255a 9A42     		cmp	r2, r3
 6013 255c 3CD0     		beq	.L369
2578:../tasks/SDMMC/ff.c **** #if !_FS_READONLY
2579:../tasks/SDMMC/ff.c **** 				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 6014              		.loc 1 2579 0
 6015 255e FB68     		ldr	r3, [r7, #12]
 6016 2560 93F80632 		ldrb	r3, [r3, #518]	@ zero_extendqisi2
 6017 2564 03F04003 		and	r3, r3, #64
 6018 2568 002B     		cmp	r3, #0
 6019 256a 20D0     		beq	.L370
2580:../tasks/SDMMC/ff.c **** 					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1))
 6020              		.loc 1 2580 0
 6021 256c FB68     		ldr	r3, [r7, #12]
 6022 256e D3F80032 		ldr	r3, [r3, #512]
 6023 2572 93F80112 		ldrb	r1, [r3, #513]	@ zero_extendqisi2
 6024 2576 FA68     		ldr	r2, [r7, #12]
 6025 2578 FB68     		ldr	r3, [r7, #12]
 6026 257a D3F81832 		ldr	r3, [r3, #536]
 6027 257e 0846     		mov	r0, r1
 6028 2580 1146     		mov	r1, r2
 6029 2582 1A46     		mov	r2, r3
 6030 2584 0123     		movs	r3, #1
 6031 2586 FFF7FEFF 		bl	disk_write
 6032 258a 0346     		mov	r3, r0
 6033 258c 002B     		cmp	r3, #0
 6034 258e 05D0     		beq	.L371
2581:../tasks/SDMMC/ff.c **** 						ABORT(fp->fs, FR_DISK_ERR);
 6035              		.loc 1 2581 0
 6036 2590 FB68     		ldr	r3, [r7, #12]
 6037 2592 0122     		movs	r2, #1
 6038 2594 83F80722 		strb	r2, [r3, #519]
 6039 2598 0123     		movs	r3, #1
 6040 259a 56E0     		b	.L351
 6041              	.L371:
2582:../tasks/SDMMC/ff.c **** 					fp->flag &= ~FA__DIRTY;
 6042              		.loc 1 2582 0
 6043 259c FB68     		ldr	r3, [r7, #12]
 6044 259e 93F80632 		ldrb	r3, [r3, #518]	@ zero_extendqisi2
 6045 25a2 23F04003 		bic	r3, r3, #64
 6046 25a6 DAB2     		uxtb	r2, r3
 6047 25a8 FB68     		ldr	r3, [r7, #12]
 6048 25aa 83F80622 		strb	r2, [r3, #518]
 6049              	.L370:
2583:../tasks/SDMMC/ff.c **** 				}
2584:../tasks/SDMMC/ff.c **** #endif
2585:../tasks/SDMMC/ff.c **** 				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1))	/* Fill sector cache */
 6050              		.loc 1 2585 0
 6051 25ae FB68     		ldr	r3, [r7, #12]
 6052 25b0 D3F80032 		ldr	r3, [r3, #512]
 6053 25b4 93F80122 		ldrb	r2, [r3, #513]	@ zero_extendqisi2
 6054 25b8 FB68     		ldr	r3, [r7, #12]
 6055 25ba 1046     		mov	r0, r2
 6056 25bc 1946     		mov	r1, r3
 6057 25be 3A69     		ldr	r2, [r7, #16]
 6058 25c0 0123     		movs	r3, #1
 6059 25c2 FFF7FEFF 		bl	disk_read
 6060 25c6 0346     		mov	r3, r0
 6061 25c8 002B     		cmp	r3, #0
 6062 25ca 05D0     		beq	.L369
2586:../tasks/SDMMC/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
 6063              		.loc 1 2586 0
 6064 25cc FB68     		ldr	r3, [r7, #12]
 6065 25ce 0122     		movs	r2, #1
 6066 25d0 83F80722 		strb	r2, [r3, #519]
 6067 25d4 0123     		movs	r3, #1
 6068 25d6 38E0     		b	.L351
 6069              	.L369:
2587:../tasks/SDMMC/ff.c **** 			}
2588:../tasks/SDMMC/ff.c **** #endif
2589:../tasks/SDMMC/ff.c **** 			fp->dsect = sect;
 6070              		.loc 1 2589 0
 6071 25d8 FB68     		ldr	r3, [r7, #12]
 6072 25da 3A69     		ldr	r2, [r7, #16]
 6073 25dc C3F81822 		str	r2, [r3, #536]
 6074              	.L356:
2590:../tasks/SDMMC/ff.c **** 		}
2591:../tasks/SDMMC/ff.c **** 		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer 
 6075              		.loc 1 2591 0
 6076 25e0 FB68     		ldr	r3, [r7, #12]
 6077 25e2 D3F80832 		ldr	r3, [r3, #520]
 6078 25e6 C3F30803 		ubfx	r3, r3, #0, #9
 6079 25ea C3F50073 		rsb	r3, r3, #512
 6080 25ee BB62     		str	r3, [r7, #40]
2592:../tasks/SDMMC/ff.c **** 		if (rcnt > btr) rcnt = btr;
 6081              		.loc 1 2592 0
 6082 25f0 BA6A     		ldr	r2, [r7, #40]
 6083 25f2 7B68     		ldr	r3, [r7, #4]
 6084 25f4 9A42     		cmp	r2, r3
 6085 25f6 01D9     		bls	.L372
 6086              		.loc 1 2592 0 is_stmt 0 discriminator 1
 6087 25f8 7B68     		ldr	r3, [r7, #4]
 6088 25fa BB62     		str	r3, [r7, #40]
 6089              	.L372:
2593:../tasks/SDMMC/ff.c **** #if _FS_TINY
2594:../tasks/SDMMC/ff.c **** 		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
2595:../tasks/SDMMC/ff.c **** 			ABORT(fp->fs, FR_DISK_ERR);
2596:../tasks/SDMMC/ff.c **** 		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
2597:../tasks/SDMMC/ff.c **** #else
2598:../tasks/SDMMC/ff.c **** 		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 6090              		.loc 1 2598 0 is_stmt 1
 6091 25fc FB68     		ldr	r3, [r7, #12]
 6092 25fe D3F80832 		ldr	r3, [r3, #520]
 6093 2602 C3F30803 		ubfx	r3, r3, #0, #9
 6094 2606 FA68     		ldr	r2, [r7, #12]
 6095 2608 1344     		add	r3, r3, r2
 6096 260a 386A     		ldr	r0, [r7, #32]
 6097 260c 1946     		mov	r1, r3
 6098 260e BA6A     		ldr	r2, [r7, #40]
 6099 2610 FDF7F6FC 		bl	mem_cpy
 6100              	.L368:
2537:../tasks/SDMMC/ff.c **** 		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 6101              		.loc 1 2537 0
 6102 2614 3A6A     		ldr	r2, [r7, #32]
 6103 2616 BB6A     		ldr	r3, [r7, #40]
 6104 2618 1344     		add	r3, r3, r2
 6105 261a 3B62     		str	r3, [r7, #32]
 6106 261c FB68     		ldr	r3, [r7, #12]
 6107 261e D3F80822 		ldr	r2, [r3, #520]
 6108 2622 BB6A     		ldr	r3, [r7, #40]
 6109 2624 1A44     		add	r2, r2, r3
 6110 2626 FB68     		ldr	r3, [r7, #12]
 6111 2628 C3F80822 		str	r2, [r3, #520]
 6112 262c 3B68     		ldr	r3, [r7]
 6113 262e 1A68     		ldr	r2, [r3]
 6114 2630 BB6A     		ldr	r3, [r7, #40]
 6115 2632 1A44     		add	r2, r2, r3
 6116 2634 3B68     		ldr	r3, [r7]
 6117 2636 1A60     		str	r2, [r3]
 6118 2638 7A68     		ldr	r2, [r7, #4]
 6119 263a BB6A     		ldr	r3, [r7, #40]
 6120 263c D31A     		subs	r3, r2, r3
 6121 263e 7B60     		str	r3, [r7, #4]
 6122              	.L355:
2536:../tasks/SDMMC/ff.c **** 		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 6123              		.loc 1 2536 0 discriminator 1
 6124 2640 7B68     		ldr	r3, [r7, #4]
 6125 2642 002B     		cmp	r3, #0
 6126 2644 7FF4CAAE 		bne	.L373
2599:../tasks/SDMMC/ff.c **** #endif
2600:../tasks/SDMMC/ff.c **** 	}
2601:../tasks/SDMMC/ff.c **** 
2602:../tasks/SDMMC/ff.c **** 	LEAVE_FF(fp->fs, FR_OK);
 6127              		.loc 1 2602 0
 6128 2648 0023     		movs	r3, #0
 6129              	.L351:
2603:../tasks/SDMMC/ff.c **** }
 6130              		.loc 1 2603 0
 6131 264a 1846     		mov	r0, r3
 6132 264c 3037     		adds	r7, r7, #48
 6133 264e BD46     		mov	sp, r7
 6134              		@ sp needed
 6135 2650 80BD     		pop	{r7, pc}
 6136              		.cfi_endproc
 6137              	.LFE91:
 6139 2652 00BF     		.align	2
 6140              		.global	f_write
 6141              		.thumb
 6142              		.thumb_func
 6144              	f_write:
 6145              	.LFB92:
2604:../tasks/SDMMC/ff.c **** 
2605:../tasks/SDMMC/ff.c **** 
2606:../tasks/SDMMC/ff.c **** 
2607:../tasks/SDMMC/ff.c **** 
2608:../tasks/SDMMC/ff.c **** #if !_FS_READONLY
2609:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
2610:../tasks/SDMMC/ff.c **** /* Write File                                                            */
2611:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
2612:../tasks/SDMMC/ff.c **** 
2613:../tasks/SDMMC/ff.c **** FRESULT f_write (
2614:../tasks/SDMMC/ff.c **** 	FIL* fp,			/* Pointer to the file object */
2615:../tasks/SDMMC/ff.c **** 	const void *buff,	/* Pointer to the data to be written */
2616:../tasks/SDMMC/ff.c **** 	UINT btw,			/* Number of bytes to write */
2617:../tasks/SDMMC/ff.c **** 	UINT* bw			/* Pointer to number of bytes written */
2618:../tasks/SDMMC/ff.c **** )
2619:../tasks/SDMMC/ff.c **** {
 6146              		.loc 1 2619 0
 6147              		.cfi_startproc
 6148              		@ args = 0, pretend = 0, frame = 40
 6149              		@ frame_needed = 1, uses_anonymous_args = 0
 6150 2654 80B5     		push	{r7, lr}
 6151              		.cfi_def_cfa_offset 8
 6152              		.cfi_offset 7, -8
 6153              		.cfi_offset 14, -4
 6154 2656 8AB0     		sub	sp, sp, #40
 6155              		.cfi_def_cfa_offset 48
 6156 2658 00AF     		add	r7, sp, #0
 6157              		.cfi_def_cfa_register 7
 6158 265a F860     		str	r0, [r7, #12]
 6159 265c B960     		str	r1, [r7, #8]
 6160 265e 7A60     		str	r2, [r7, #4]
 6161 2660 3B60     		str	r3, [r7]
2620:../tasks/SDMMC/ff.c **** 	FRESULT res;
2621:../tasks/SDMMC/ff.c **** 	DWORD clst, sect;
2622:../tasks/SDMMC/ff.c **** 	UINT wcnt, cc;
2623:../tasks/SDMMC/ff.c **** 	const BYTE *wbuff = (const BYTE*)buff;
 6162              		.loc 1 2623 0
 6163 2662 BB68     		ldr	r3, [r7, #8]
 6164 2664 BB61     		str	r3, [r7, #24]
2624:../tasks/SDMMC/ff.c **** 	BYTE csect;
2625:../tasks/SDMMC/ff.c **** 
2626:../tasks/SDMMC/ff.c **** 
2627:../tasks/SDMMC/ff.c **** 	*bw = 0;	/* Clear write byte counter */
 6165              		.loc 1 2627 0
 6166 2666 3B68     		ldr	r3, [r7]
 6167 2668 0022     		movs	r2, #0
 6168 266a 1A60     		str	r2, [r3]
2628:../tasks/SDMMC/ff.c **** 
2629:../tasks/SDMMC/ff.c **** 	res = validate(fp);						/* Check validity */
 6169              		.loc 1 2629 0
 6170 266c F868     		ldr	r0, [r7, #12]
 6171 266e FFF7EDFB 		bl	validate
 6172 2672 0346     		mov	r3, r0
 6173 2674 FB75     		strb	r3, [r7, #23]
2630:../tasks/SDMMC/ff.c **** 	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 6174              		.loc 1 2630 0
 6175 2676 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 6176 2678 002B     		cmp	r3, #0
 6177 267a 01D0     		beq	.L375
 6178              		.loc 1 2630 0 is_stmt 0 discriminator 1
 6179 267c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 6180 267e 93E1     		b	.L376
 6181              	.L375:
2631:../tasks/SDMMC/ff.c **** 	if (fp->err)							/* Check error */
 6182              		.loc 1 2631 0 is_stmt 1
 6183 2680 FB68     		ldr	r3, [r7, #12]
 6184 2682 93F80732 		ldrb	r3, [r3, #519]	@ zero_extendqisi2
 6185 2686 002B     		cmp	r3, #0
 6186 2688 03D0     		beq	.L377
2632:../tasks/SDMMC/ff.c **** 		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 6187              		.loc 1 2632 0
 6188 268a FB68     		ldr	r3, [r7, #12]
 6189 268c 93F80732 		ldrb	r3, [r3, #519]	@ zero_extendqisi2
 6190 2690 8AE1     		b	.L376
 6191              	.L377:
2633:../tasks/SDMMC/ff.c **** 	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 6192              		.loc 1 2633 0
 6193 2692 FB68     		ldr	r3, [r7, #12]
 6194 2694 93F80632 		ldrb	r3, [r3, #518]	@ zero_extendqisi2
 6195 2698 03F00203 		and	r3, r3, #2
 6196 269c 002B     		cmp	r3, #0
 6197 269e 01D1     		bne	.L378
2634:../tasks/SDMMC/ff.c **** 		LEAVE_FF(fp->fs, FR_DENIED);
 6198              		.loc 1 2634 0
 6199 26a0 0723     		movs	r3, #7
 6200 26a2 81E1     		b	.L376
 6201              	.L378:
2635:../tasks/SDMMC/ff.c **** 	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 6202              		.loc 1 2635 0
 6203 26a4 FB68     		ldr	r3, [r7, #12]
 6204 26a6 D3F80822 		ldr	r2, [r3, #520]
 6205 26aa 7B68     		ldr	r3, [r7, #4]
 6206 26ac 1A44     		add	r2, r2, r3
 6207 26ae FB68     		ldr	r3, [r7, #12]
 6208 26b0 D3F80832 		ldr	r3, [r3, #520]
 6209 26b4 9A42     		cmp	r2, r3
 6210 26b6 02D2     		bcs	.L379
 6211              		.loc 1 2635 0 is_stmt 0 discriminator 1
 6212 26b8 0023     		movs	r3, #0
 6213 26ba 7B60     		str	r3, [r7, #4]
2636:../tasks/SDMMC/ff.c **** 
2637:../tasks/SDMMC/ff.c **** 	for ( ;  btw;							/* Repeat until all data written */
 6214              		.loc 1 2637 0 is_stmt 1 discriminator 1
 6215 26bc 58E1     		b	.L380
 6216              	.L379:
 6217              		.loc 1 2637 0 is_stmt 0
 6218 26be 57E1     		b	.L380
 6219              	.L401:
2638:../tasks/SDMMC/ff.c **** 		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
2639:../tasks/SDMMC/ff.c **** 		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 6220              		.loc 1 2639 0 is_stmt 1
 6221 26c0 FB68     		ldr	r3, [r7, #12]
 6222 26c2 D3F80832 		ldr	r3, [r3, #520]
 6223 26c6 C3F30803 		ubfx	r3, r3, #0, #9
 6224 26ca 002B     		cmp	r3, #0
 6225 26cc 40F01781 		bne	.L381
2640:../tasks/SDMMC/ff.c **** 			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 6226              		.loc 1 2640 0
 6227 26d0 FB68     		ldr	r3, [r7, #12]
 6228 26d2 D3F80832 		ldr	r3, [r3, #520]
 6229 26d6 5B0A     		lsrs	r3, r3, #9
 6230 26d8 DAB2     		uxtb	r2, r3
 6231 26da FB68     		ldr	r3, [r7, #12]
 6232 26dc D3F80032 		ldr	r3, [r3, #512]
 6233 26e0 93F80232 		ldrb	r3, [r3, #514]	@ zero_extendqisi2
 6234 26e4 013B     		subs	r3, r3, #1
 6235 26e6 DBB2     		uxtb	r3, r3
 6236 26e8 1340     		ands	r3, r3, r2
 6237 26ea BB75     		strb	r3, [r7, #22]
2641:../tasks/SDMMC/ff.c **** 			if (!csect) {					/* On the cluster boundary? */
 6238              		.loc 1 2641 0
 6239 26ec BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 6240 26ee 002B     		cmp	r3, #0
 6241 26f0 4CD1     		bne	.L382
2642:../tasks/SDMMC/ff.c **** 				if (fp->fptr == 0) {		/* On the top of the file? */
 6242              		.loc 1 2642 0
 6243 26f2 FB68     		ldr	r3, [r7, #12]
 6244 26f4 D3F80832 		ldr	r3, [r3, #520]
 6245 26f8 002B     		cmp	r3, #0
 6246 26fa 13D1     		bne	.L383
2643:../tasks/SDMMC/ff.c **** 					clst = fp->sclust;		/* Follow from the origin */
 6247              		.loc 1 2643 0
 6248 26fc FB68     		ldr	r3, [r7, #12]
 6249 26fe D3F81032 		ldr	r3, [r3, #528]
 6250 2702 7B62     		str	r3, [r7, #36]
2644:../tasks/SDMMC/ff.c **** 					if (clst == 0)			/* When no cluster is allocated, */
 6251              		.loc 1 2644 0
 6252 2704 7B6A     		ldr	r3, [r7, #36]
 6253 2706 002B     		cmp	r3, #0
 6254 2708 25D1     		bne	.L385
2645:../tasks/SDMMC/ff.c **** 						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 6255              		.loc 1 2645 0
 6256 270a FB68     		ldr	r3, [r7, #12]
 6257 270c D3F80032 		ldr	r3, [r3, #512]
 6258 2710 1846     		mov	r0, r3
 6259 2712 0021     		movs	r1, #0
 6260 2714 FEF728FA 		bl	create_chain
 6261 2718 7862     		str	r0, [r7, #36]
 6262 271a FB68     		ldr	r3, [r7, #12]
 6263 271c 7A6A     		ldr	r2, [r7, #36]
 6264 271e C3F81022 		str	r2, [r3, #528]
 6265 2722 18E0     		b	.L385
 6266              	.L383:
2646:../tasks/SDMMC/ff.c **** 				} else {					/* Middle or end of the file */
2647:../tasks/SDMMC/ff.c **** #if _USE_FASTSEEK
2648:../tasks/SDMMC/ff.c **** 					if (fp->cltbl)
 6267              		.loc 1 2648 0
 6268 2724 FB68     		ldr	r3, [r7, #12]
 6269 2726 D3F82432 		ldr	r3, [r3, #548]
 6270 272a 002B     		cmp	r3, #0
 6271 272c 08D0     		beq	.L386
2649:../tasks/SDMMC/ff.c **** 						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 6272              		.loc 1 2649 0
 6273 272e FB68     		ldr	r3, [r7, #12]
 6274 2730 D3F80832 		ldr	r3, [r3, #520]
 6275 2734 F868     		ldr	r0, [r7, #12]
 6276 2736 1946     		mov	r1, r3
 6277 2738 FEF7B0FA 		bl	clmt_clust
 6278 273c 7862     		str	r0, [r7, #36]
 6279 273e 0AE0     		b	.L385
 6280              	.L386:
2650:../tasks/SDMMC/ff.c **** 					else
2651:../tasks/SDMMC/ff.c **** #endif
2652:../tasks/SDMMC/ff.c **** 						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 6281              		.loc 1 2652 0
 6282 2740 FB68     		ldr	r3, [r7, #12]
 6283 2742 D3F80022 		ldr	r2, [r3, #512]
 6284 2746 FB68     		ldr	r3, [r7, #12]
 6285 2748 D3F81432 		ldr	r3, [r3, #532]
 6286 274c 1046     		mov	r0, r2
 6287 274e 1946     		mov	r1, r3
 6288 2750 FEF70AFA 		bl	create_chain
 6289 2754 7862     		str	r0, [r7, #36]
 6290              	.L385:
2653:../tasks/SDMMC/ff.c **** 				}
2654:../tasks/SDMMC/ff.c **** 				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 6291              		.loc 1 2654 0
 6292 2756 7B6A     		ldr	r3, [r7, #36]
 6293 2758 002B     		cmp	r3, #0
 6294 275a 00D1     		bne	.L387
 6295              		.loc 1 2654 0 is_stmt 0 discriminator 1
 6296 275c 0CE1     		b	.L388
 6297              	.L387:
2655:../tasks/SDMMC/ff.c **** 				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 6298              		.loc 1 2655 0 is_stmt 1
 6299 275e 7B6A     		ldr	r3, [r7, #36]
 6300 2760 012B     		cmp	r3, #1
 6301 2762 05D1     		bne	.L389
 6302              		.loc 1 2655 0 is_stmt 0 discriminator 1
 6303 2764 FB68     		ldr	r3, [r7, #12]
 6304 2766 0222     		movs	r2, #2
 6305 2768 83F80722 		strb	r2, [r3, #519]
 6306 276c 0223     		movs	r3, #2
 6307 276e 1BE1     		b	.L376
 6308              	.L389:
2656:../tasks/SDMMC/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 6309              		.loc 1 2656 0 is_stmt 1
 6310 2770 7B6A     		ldr	r3, [r7, #36]
 6311 2772 B3F1FF3F 		cmp	r3, #-1
 6312 2776 05D1     		bne	.L390
 6313              		.loc 1 2656 0 is_stmt 0 discriminator 1
 6314 2778 FB68     		ldr	r3, [r7, #12]
 6315 277a 0122     		movs	r2, #1
 6316 277c 83F80722 		strb	r2, [r3, #519]
 6317 2780 0123     		movs	r3, #1
 6318 2782 11E1     		b	.L376
 6319              	.L390:
2657:../tasks/SDMMC/ff.c **** 				fp->clust = clst;			/* Update current cluster */
 6320              		.loc 1 2657 0 is_stmt 1
 6321 2784 FB68     		ldr	r3, [r7, #12]
 6322 2786 7A6A     		ldr	r2, [r7, #36]
 6323 2788 C3F81422 		str	r2, [r3, #532]
 6324              	.L382:
2658:../tasks/SDMMC/ff.c **** 			}
2659:../tasks/SDMMC/ff.c **** #if _FS_TINY
2660:../tasks/SDMMC/ff.c **** 			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
2661:../tasks/SDMMC/ff.c **** 				ABORT(fp->fs, FR_DISK_ERR);
2662:../tasks/SDMMC/ff.c **** #else
2663:../tasks/SDMMC/ff.c **** 			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 6325              		.loc 1 2663 0
 6326 278c FB68     		ldr	r3, [r7, #12]
 6327 278e 93F80632 		ldrb	r3, [r3, #518]	@ zero_extendqisi2
 6328 2792 03F04003 		and	r3, r3, #64
 6329 2796 002B     		cmp	r3, #0
 6330 2798 20D0     		beq	.L391
2664:../tasks/SDMMC/ff.c **** 				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1))
 6331              		.loc 1 2664 0
 6332 279a FB68     		ldr	r3, [r7, #12]
 6333 279c D3F80032 		ldr	r3, [r3, #512]
 6334 27a0 93F80112 		ldrb	r1, [r3, #513]	@ zero_extendqisi2
 6335 27a4 FA68     		ldr	r2, [r7, #12]
 6336 27a6 FB68     		ldr	r3, [r7, #12]
 6337 27a8 D3F81832 		ldr	r3, [r3, #536]
 6338 27ac 0846     		mov	r0, r1
 6339 27ae 1146     		mov	r1, r2
 6340 27b0 1A46     		mov	r2, r3
 6341 27b2 0123     		movs	r3, #1
 6342 27b4 FFF7FEFF 		bl	disk_write
 6343 27b8 0346     		mov	r3, r0
 6344 27ba 002B     		cmp	r3, #0
 6345 27bc 05D0     		beq	.L392
2665:../tasks/SDMMC/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
 6346              		.loc 1 2665 0
 6347 27be FB68     		ldr	r3, [r7, #12]
 6348 27c0 0122     		movs	r2, #1
 6349 27c2 83F80722 		strb	r2, [r3, #519]
 6350 27c6 0123     		movs	r3, #1
 6351 27c8 EEE0     		b	.L376
 6352              	.L392:
2666:../tasks/SDMMC/ff.c **** 				fp->flag &= ~FA__DIRTY;
 6353              		.loc 1 2666 0
 6354 27ca FB68     		ldr	r3, [r7, #12]
 6355 27cc 93F80632 		ldrb	r3, [r3, #518]	@ zero_extendqisi2
 6356 27d0 23F04003 		bic	r3, r3, #64
 6357 27d4 DAB2     		uxtb	r2, r3
 6358 27d6 FB68     		ldr	r3, [r7, #12]
 6359 27d8 83F80622 		strb	r2, [r3, #518]
 6360              	.L391:
2667:../tasks/SDMMC/ff.c **** 			}
2668:../tasks/SDMMC/ff.c **** #endif
2669:../tasks/SDMMC/ff.c **** 			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 6361              		.loc 1 2669 0
 6362 27dc FB68     		ldr	r3, [r7, #12]
 6363 27de D3F80022 		ldr	r2, [r3, #512]
 6364 27e2 FB68     		ldr	r3, [r7, #12]
 6365 27e4 D3F81432 		ldr	r3, [r3, #532]
 6366 27e8 1046     		mov	r0, r2
 6367 27ea 1946     		mov	r1, r3
 6368 27ec FFF7FEFF 		bl	clust2sect
 6369 27f0 3861     		str	r0, [r7, #16]
2670:../tasks/SDMMC/ff.c **** 			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 6370              		.loc 1 2670 0
 6371 27f2 3B69     		ldr	r3, [r7, #16]
 6372 27f4 002B     		cmp	r3, #0
 6373 27f6 05D1     		bne	.L393
 6374              		.loc 1 2670 0 is_stmt 0 discriminator 1
 6375 27f8 FB68     		ldr	r3, [r7, #12]
 6376 27fa 0222     		movs	r2, #2
 6377 27fc 83F80722 		strb	r2, [r3, #519]
 6378 2800 0223     		movs	r3, #2
 6379 2802 D1E0     		b	.L376
 6380              	.L393:
2671:../tasks/SDMMC/ff.c **** 			sect += csect;
 6381              		.loc 1 2671 0 is_stmt 1
 6382 2804 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 6383 2806 3A69     		ldr	r2, [r7, #16]
 6384 2808 1344     		add	r3, r3, r2
 6385 280a 3B61     		str	r3, [r7, #16]
2672:../tasks/SDMMC/ff.c **** 			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 6386              		.loc 1 2672 0
 6387 280c 7B68     		ldr	r3, [r7, #4]
 6388 280e 5B0A     		lsrs	r3, r3, #9
 6389 2810 FB61     		str	r3, [r7, #28]
2673:../tasks/SDMMC/ff.c **** 			if (cc) {						/* Write maximum contiguous sectors directly */
 6390              		.loc 1 2673 0
 6391 2812 FB69     		ldr	r3, [r7, #28]
 6392 2814 002B     		cmp	r3, #0
 6393 2816 4BD0     		beq	.L394
2674:../tasks/SDMMC/ff.c **** 				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 6394              		.loc 1 2674 0
 6395 2818 BA7D     		ldrb	r2, [r7, #22]	@ zero_extendqisi2
 6396 281a FB69     		ldr	r3, [r7, #28]
 6397 281c 1A44     		add	r2, r2, r3
 6398 281e FB68     		ldr	r3, [r7, #12]
 6399 2820 D3F80032 		ldr	r3, [r3, #512]
 6400 2824 93F80232 		ldrb	r3, [r3, #514]	@ zero_extendqisi2
 6401 2828 9A42     		cmp	r2, r3
 6402 282a 08D9     		bls	.L395
2675:../tasks/SDMMC/ff.c **** 					cc = fp->fs->csize - csect;
 6403              		.loc 1 2675 0
 6404 282c FB68     		ldr	r3, [r7, #12]
 6405 282e D3F80032 		ldr	r3, [r3, #512]
 6406 2832 93F80232 		ldrb	r3, [r3, #514]	@ zero_extendqisi2
 6407 2836 1A46     		mov	r2, r3
 6408 2838 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 6409 283a D31A     		subs	r3, r2, r3
 6410 283c FB61     		str	r3, [r7, #28]
 6411              	.L395:
2676:../tasks/SDMMC/ff.c **** 				if (disk_write(fp->fs->drv, wbuff, sect, cc))
 6412              		.loc 1 2676 0
 6413 283e FB68     		ldr	r3, [r7, #12]
 6414 2840 D3F80032 		ldr	r3, [r3, #512]
 6415 2844 93F80122 		ldrb	r2, [r3, #513]	@ zero_extendqisi2
 6416 2848 FB69     		ldr	r3, [r7, #28]
 6417 284a DBB2     		uxtb	r3, r3
 6418 284c 1046     		mov	r0, r2
 6419 284e B969     		ldr	r1, [r7, #24]
 6420 2850 3A69     		ldr	r2, [r7, #16]
 6421 2852 FFF7FEFF 		bl	disk_write
 6422 2856 0346     		mov	r3, r0
 6423 2858 002B     		cmp	r3, #0
 6424 285a 05D0     		beq	.L396
2677:../tasks/SDMMC/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
 6425              		.loc 1 2677 0
 6426 285c FB68     		ldr	r3, [r7, #12]
 6427 285e 0122     		movs	r2, #1
 6428 2860 83F80722 		strb	r2, [r3, #519]
 6429 2864 0123     		movs	r3, #1
 6430 2866 9FE0     		b	.L376
 6431              	.L396:
2678:../tasks/SDMMC/ff.c **** #if _FS_MINIMIZE <= 2
2679:../tasks/SDMMC/ff.c **** #if _FS_TINY
2680:../tasks/SDMMC/ff.c **** 				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct 
2681:../tasks/SDMMC/ff.c **** 					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
2682:../tasks/SDMMC/ff.c **** 					fp->fs->wflag = 0;
2683:../tasks/SDMMC/ff.c **** 				}
2684:../tasks/SDMMC/ff.c **** #else
2685:../tasks/SDMMC/ff.c **** 				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write 
 6432              		.loc 1 2685 0
 6433 2868 FB68     		ldr	r3, [r7, #12]
 6434 286a D3F81822 		ldr	r2, [r3, #536]
 6435 286e 3B69     		ldr	r3, [r7, #16]
 6436 2870 D21A     		subs	r2, r2, r3
 6437 2872 FB69     		ldr	r3, [r7, #28]
 6438 2874 9A42     		cmp	r2, r3
 6439 2876 17D2     		bcs	.L397
2686:../tasks/SDMMC/ff.c **** 					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 6440              		.loc 1 2686 0
 6441 2878 FA68     		ldr	r2, [r7, #12]
 6442 287a FB68     		ldr	r3, [r7, #12]
 6443 287c D3F81812 		ldr	r1, [r3, #536]
 6444 2880 3B69     		ldr	r3, [r7, #16]
 6445 2882 CB1A     		subs	r3, r1, r3
 6446 2884 5B02     		lsls	r3, r3, #9
 6447 2886 B969     		ldr	r1, [r7, #24]
 6448 2888 0B44     		add	r3, r3, r1
 6449 288a 1046     		mov	r0, r2
 6450 288c 1946     		mov	r1, r3
 6451 288e 4FF40072 		mov	r2, #512
 6452 2892 FDF7B5FB 		bl	mem_cpy
2687:../tasks/SDMMC/ff.c **** 					fp->flag &= ~FA__DIRTY;
 6453              		.loc 1 2687 0
 6454 2896 FB68     		ldr	r3, [r7, #12]
 6455 2898 93F80632 		ldrb	r3, [r3, #518]	@ zero_extendqisi2
 6456 289c 23F04003 		bic	r3, r3, #64
 6457 28a0 DAB2     		uxtb	r2, r3
 6458 28a2 FB68     		ldr	r3, [r7, #12]
 6459 28a4 83F80622 		strb	r2, [r3, #518]
 6460              	.L397:
2688:../tasks/SDMMC/ff.c **** 				}
2689:../tasks/SDMMC/ff.c **** #endif
2690:../tasks/SDMMC/ff.c **** #endif
2691:../tasks/SDMMC/ff.c **** 				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 6461              		.loc 1 2691 0
 6462 28a8 FB69     		ldr	r3, [r7, #28]
 6463 28aa 5B02     		lsls	r3, r3, #9
 6464 28ac 3B62     		str	r3, [r7, #32]
2692:../tasks/SDMMC/ff.c **** 				continue;
 6465              		.loc 1 2692 0
 6466 28ae 49E0     		b	.L398
 6467              	.L394:
2693:../tasks/SDMMC/ff.c **** 			}
2694:../tasks/SDMMC/ff.c **** #if _FS_TINY
2695:../tasks/SDMMC/ff.c **** 			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
2696:../tasks/SDMMC/ff.c **** 				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
2697:../tasks/SDMMC/ff.c **** 				fp->fs->winsect = sect;
2698:../tasks/SDMMC/ff.c **** 			}
2699:../tasks/SDMMC/ff.c **** #else
2700:../tasks/SDMMC/ff.c **** 			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 6468              		.loc 1 2700 0
 6469 28b0 FB68     		ldr	r3, [r7, #12]
 6470 28b2 D3F81822 		ldr	r2, [r3, #536]
 6471 28b6 3B69     		ldr	r3, [r7, #16]
 6472 28b8 9A42     		cmp	r2, r3
 6473 28ba 1CD0     		beq	.L399
2701:../tasks/SDMMC/ff.c **** 				if (fp->fptr < fp->fsize &&
 6474              		.loc 1 2701 0
 6475 28bc FB68     		ldr	r3, [r7, #12]
 6476 28be D3F80822 		ldr	r2, [r3, #520]
 6477 28c2 FB68     		ldr	r3, [r7, #12]
 6478 28c4 D3F80C32 		ldr	r3, [r3, #524]
 6479 28c8 9A42     		cmp	r2, r3
 6480 28ca 14D2     		bcs	.L399
2702:../tasks/SDMMC/ff.c **** 					disk_read(fp->fs->drv, fp->buf.d8, sect, 1))
 6481              		.loc 1 2702 0 discriminator 1
 6482 28cc FB68     		ldr	r3, [r7, #12]
 6483 28ce D3F80032 		ldr	r3, [r3, #512]
 6484 28d2 93F80122 		ldrb	r2, [r3, #513]	@ zero_extendqisi2
 6485 28d6 FB68     		ldr	r3, [r7, #12]
 6486 28d8 1046     		mov	r0, r2
 6487 28da 1946     		mov	r1, r3
 6488 28dc 3A69     		ldr	r2, [r7, #16]
 6489 28de 0123     		movs	r3, #1
 6490 28e0 FFF7FEFF 		bl	disk_read
 6491 28e4 0346     		mov	r3, r0
2701:../tasks/SDMMC/ff.c **** 				if (fp->fptr < fp->fsize &&
 6492              		.loc 1 2701 0 discriminator 1
 6493 28e6 002B     		cmp	r3, #0
 6494 28e8 05D0     		beq	.L399
2703:../tasks/SDMMC/ff.c **** 						ABORT(fp->fs, FR_DISK_ERR);
 6495              		.loc 1 2703 0
 6496 28ea FB68     		ldr	r3, [r7, #12]
 6497 28ec 0122     		movs	r2, #1
 6498 28ee 83F80722 		strb	r2, [r3, #519]
 6499 28f2 0123     		movs	r3, #1
 6500 28f4 58E0     		b	.L376
 6501              	.L399:
2704:../tasks/SDMMC/ff.c **** 			}
2705:../tasks/SDMMC/ff.c **** #endif
2706:../tasks/SDMMC/ff.c **** 			fp->dsect = sect;
 6502              		.loc 1 2706 0
 6503 28f6 FB68     		ldr	r3, [r7, #12]
 6504 28f8 3A69     		ldr	r2, [r7, #16]
 6505 28fa C3F81822 		str	r2, [r3, #536]
 6506              	.L381:
2707:../tasks/SDMMC/ff.c **** 		}
2708:../tasks/SDMMC/ff.c **** 		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 6507              		.loc 1 2708 0
 6508 28fe FB68     		ldr	r3, [r7, #12]
 6509 2900 D3F80832 		ldr	r3, [r3, #520]
 6510 2904 C3F30803 		ubfx	r3, r3, #0, #9
 6511 2908 C3F50073 		rsb	r3, r3, #512
 6512 290c 3B62     		str	r3, [r7, #32]
2709:../tasks/SDMMC/ff.c **** 		if (wcnt > btw) wcnt = btw;
 6513              		.loc 1 2709 0
 6514 290e 3A6A     		ldr	r2, [r7, #32]
 6515 2910 7B68     		ldr	r3, [r7, #4]
 6516 2912 9A42     		cmp	r2, r3
 6517 2914 01D9     		bls	.L400
 6518              		.loc 1 2709 0 is_stmt 0 discriminator 1
 6519 2916 7B68     		ldr	r3, [r7, #4]
 6520 2918 3B62     		str	r3, [r7, #32]
 6521              	.L400:
2710:../tasks/SDMMC/ff.c **** #if _FS_TINY
2711:../tasks/SDMMC/ff.c **** 		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
2712:../tasks/SDMMC/ff.c **** 			ABORT(fp->fs, FR_DISK_ERR);
2713:../tasks/SDMMC/ff.c **** 		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
2714:../tasks/SDMMC/ff.c **** 		fp->fs->wflag = 1;
2715:../tasks/SDMMC/ff.c **** #else
2716:../tasks/SDMMC/ff.c **** 		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 6522              		.loc 1 2716 0 is_stmt 1
 6523 291a FB68     		ldr	r3, [r7, #12]
 6524 291c D3F80832 		ldr	r3, [r3, #520]
 6525 2920 C3F30803 		ubfx	r3, r3, #0, #9
 6526 2924 FA68     		ldr	r2, [r7, #12]
 6527 2926 1344     		add	r3, r3, r2
 6528 2928 1846     		mov	r0, r3
 6529 292a B969     		ldr	r1, [r7, #24]
 6530 292c 3A6A     		ldr	r2, [r7, #32]
 6531 292e FDF767FB 		bl	mem_cpy
2717:../tasks/SDMMC/ff.c **** 		fp->flag |= FA__DIRTY;
 6532              		.loc 1 2717 0
 6533 2932 FB68     		ldr	r3, [r7, #12]
 6534 2934 93F80632 		ldrb	r3, [r3, #518]	@ zero_extendqisi2
 6535 2938 43F04003 		orr	r3, r3, #64
 6536 293c DAB2     		uxtb	r2, r3
 6537 293e FB68     		ldr	r3, [r7, #12]
 6538 2940 83F80622 		strb	r2, [r3, #518]
 6539              	.L398:
2638:../tasks/SDMMC/ff.c **** 		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 6540              		.loc 1 2638 0
 6541 2944 BA69     		ldr	r2, [r7, #24]
 6542 2946 3B6A     		ldr	r3, [r7, #32]
 6543 2948 1344     		add	r3, r3, r2
 6544 294a BB61     		str	r3, [r7, #24]
 6545 294c FB68     		ldr	r3, [r7, #12]
 6546 294e D3F80822 		ldr	r2, [r3, #520]
 6547 2952 3B6A     		ldr	r3, [r7, #32]
 6548 2954 1A44     		add	r2, r2, r3
 6549 2956 FB68     		ldr	r3, [r7, #12]
 6550 2958 C3F80822 		str	r2, [r3, #520]
 6551 295c 3B68     		ldr	r3, [r7]
 6552 295e 1A68     		ldr	r2, [r3]
 6553 2960 3B6A     		ldr	r3, [r7, #32]
 6554 2962 1A44     		add	r2, r2, r3
 6555 2964 3B68     		ldr	r3, [r7]
 6556 2966 1A60     		str	r2, [r3]
 6557 2968 7A68     		ldr	r2, [r7, #4]
 6558 296a 3B6A     		ldr	r3, [r7, #32]
 6559 296c D31A     		subs	r3, r2, r3
 6560 296e 7B60     		str	r3, [r7, #4]
 6561              	.L380:
2637:../tasks/SDMMC/ff.c **** 		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 6562              		.loc 1 2637 0 discriminator 1
 6563 2970 7B68     		ldr	r3, [r7, #4]
 6564 2972 002B     		cmp	r3, #0
 6565 2974 7FF4A4AE 		bne	.L401
 6566              	.L388:
2718:../tasks/SDMMC/ff.c **** #endif
2719:../tasks/SDMMC/ff.c **** 	}
2720:../tasks/SDMMC/ff.c **** 
2721:../tasks/SDMMC/ff.c **** 	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 6567              		.loc 1 2721 0
 6568 2978 FB68     		ldr	r3, [r7, #12]
 6569 297a D3F80822 		ldr	r2, [r3, #520]
 6570 297e FB68     		ldr	r3, [r7, #12]
 6571 2980 D3F80C32 		ldr	r3, [r3, #524]
 6572 2984 9A42     		cmp	r2, r3
 6573 2986 05D9     		bls	.L402
 6574              		.loc 1 2721 0 is_stmt 0 discriminator 1
 6575 2988 FB68     		ldr	r3, [r7, #12]
 6576 298a D3F80822 		ldr	r2, [r3, #520]
 6577 298e FB68     		ldr	r3, [r7, #12]
 6578 2990 C3F80C22 		str	r2, [r3, #524]
 6579              	.L402:
2722:../tasks/SDMMC/ff.c **** 	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 6580              		.loc 1 2722 0 is_stmt 1
 6581 2994 FB68     		ldr	r3, [r7, #12]
 6582 2996 93F80632 		ldrb	r3, [r3, #518]	@ zero_extendqisi2
 6583 299a 43F02003 		orr	r3, r3, #32
 6584 299e DAB2     		uxtb	r2, r3
 6585 29a0 FB68     		ldr	r3, [r7, #12]
 6586 29a2 83F80622 		strb	r2, [r3, #518]
2723:../tasks/SDMMC/ff.c **** 
2724:../tasks/SDMMC/ff.c **** 	LEAVE_FF(fp->fs, FR_OK);
 6587              		.loc 1 2724 0
 6588 29a6 0023     		movs	r3, #0
 6589              	.L376:
2725:../tasks/SDMMC/ff.c **** }
 6590              		.loc 1 2725 0
 6591 29a8 1846     		mov	r0, r3
 6592 29aa 2837     		adds	r7, r7, #40
 6593 29ac BD46     		mov	sp, r7
 6594              		@ sp needed
 6595 29ae 80BD     		pop	{r7, pc}
 6596              		.cfi_endproc
 6597              	.LFE92:
 6599              		.align	2
 6600              		.global	f_sync
 6601              		.thumb
 6602              		.thumb_func
 6604              	f_sync:
 6605              	.LFB93:
2726:../tasks/SDMMC/ff.c **** 
2727:../tasks/SDMMC/ff.c **** 
2728:../tasks/SDMMC/ff.c **** 
2729:../tasks/SDMMC/ff.c **** 
2730:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
2731:../tasks/SDMMC/ff.c **** /* Synchronize the File                                                  */
2732:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
2733:../tasks/SDMMC/ff.c **** 
2734:../tasks/SDMMC/ff.c **** FRESULT f_sync (
2735:../tasks/SDMMC/ff.c **** 	FIL* fp		/* Pointer to the file object */
2736:../tasks/SDMMC/ff.c **** )
2737:../tasks/SDMMC/ff.c **** {
 6606              		.loc 1 2737 0
 6607              		.cfi_startproc
 6608              		@ args = 0, pretend = 0, frame = 24
 6609              		@ frame_needed = 1, uses_anonymous_args = 0
 6610 29b0 80B5     		push	{r7, lr}
 6611              		.cfi_def_cfa_offset 8
 6612              		.cfi_offset 7, -8
 6613              		.cfi_offset 14, -4
 6614 29b2 86B0     		sub	sp, sp, #24
 6615              		.cfi_def_cfa_offset 32
 6616 29b4 00AF     		add	r7, sp, #0
 6617              		.cfi_def_cfa_register 7
 6618 29b6 7860     		str	r0, [r7, #4]
2738:../tasks/SDMMC/ff.c **** 	FRESULT res;
2739:../tasks/SDMMC/ff.c **** 	DWORD tm;
2740:../tasks/SDMMC/ff.c **** 	BYTE *dir;
2741:../tasks/SDMMC/ff.c **** 
2742:../tasks/SDMMC/ff.c **** 
2743:../tasks/SDMMC/ff.c **** 	res = validate(fp);					/* Check validity of the object */
 6619              		.loc 1 2743 0
 6620 29b8 7868     		ldr	r0, [r7, #4]
 6621 29ba FFF747FA 		bl	validate
 6622 29be 0346     		mov	r3, r0
 6623 29c0 FB75     		strb	r3, [r7, #23]
2744:../tasks/SDMMC/ff.c **** 	if (res == FR_OK) {
 6624              		.loc 1 2744 0
 6625 29c2 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 6626 29c4 002B     		cmp	r3, #0
 6627 29c6 40F0AB80 		bne	.L404
2745:../tasks/SDMMC/ff.c **** 		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 6628              		.loc 1 2745 0
 6629 29ca 7B68     		ldr	r3, [r7, #4]
 6630 29cc 93F80632 		ldrb	r3, [r3, #518]	@ zero_extendqisi2
 6631 29d0 03F02003 		and	r3, r3, #32
 6632 29d4 002B     		cmp	r3, #0
 6633 29d6 00F0A380 		beq	.L404
2746:../tasks/SDMMC/ff.c **** 			/* Write-back dirty buffer */
2747:../tasks/SDMMC/ff.c **** #if !_FS_TINY
2748:../tasks/SDMMC/ff.c **** 			if (fp->flag & FA__DIRTY) {
 6634              		.loc 1 2748 0
 6635 29da 7B68     		ldr	r3, [r7, #4]
 6636 29dc 93F80632 		ldrb	r3, [r3, #518]	@ zero_extendqisi2
 6637 29e0 03F04003 		and	r3, r3, #64
 6638 29e4 002B     		cmp	r3, #0
 6639 29e6 1CD0     		beq	.L405
2749:../tasks/SDMMC/ff.c **** 				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1))
 6640              		.loc 1 2749 0
 6641 29e8 7B68     		ldr	r3, [r7, #4]
 6642 29ea D3F80032 		ldr	r3, [r3, #512]
 6643 29ee 93F80112 		ldrb	r1, [r3, #513]	@ zero_extendqisi2
 6644 29f2 7A68     		ldr	r2, [r7, #4]
 6645 29f4 7B68     		ldr	r3, [r7, #4]
 6646 29f6 D3F81832 		ldr	r3, [r3, #536]
 6647 29fa 0846     		mov	r0, r1
 6648 29fc 1146     		mov	r1, r2
 6649 29fe 1A46     		mov	r2, r3
 6650 2a00 0123     		movs	r3, #1
 6651 2a02 FFF7FEFF 		bl	disk_write
 6652 2a06 0346     		mov	r3, r0
 6653 2a08 002B     		cmp	r3, #0
 6654 2a0a 01D0     		beq	.L406
2750:../tasks/SDMMC/ff.c **** 					LEAVE_FF(fp->fs, FR_DISK_ERR);
 6655              		.loc 1 2750 0
 6656 2a0c 0123     		movs	r3, #1
 6657 2a0e 88E0     		b	.L407
 6658              	.L406:
2751:../tasks/SDMMC/ff.c **** 				fp->flag &= ~FA__DIRTY;
 6659              		.loc 1 2751 0
 6660 2a10 7B68     		ldr	r3, [r7, #4]
 6661 2a12 93F80632 		ldrb	r3, [r3, #518]	@ zero_extendqisi2
 6662 2a16 23F04003 		bic	r3, r3, #64
 6663 2a1a DAB2     		uxtb	r2, r3
 6664 2a1c 7B68     		ldr	r3, [r7, #4]
 6665 2a1e 83F80622 		strb	r2, [r3, #518]
 6666              	.L405:
2752:../tasks/SDMMC/ff.c **** 			}
2753:../tasks/SDMMC/ff.c **** #endif
2754:../tasks/SDMMC/ff.c **** 			/* Update the directory entry */
2755:../tasks/SDMMC/ff.c **** 			res = move_window(fp->fs, fp->dir_sect);
 6667              		.loc 1 2755 0
 6668 2a22 7B68     		ldr	r3, [r7, #4]
 6669 2a24 D3F80022 		ldr	r2, [r3, #512]
 6670 2a28 7B68     		ldr	r3, [r7, #4]
 6671 2a2a D3F81C32 		ldr	r3, [r3, #540]
 6672 2a2e 1046     		mov	r0, r2
 6673 2a30 1946     		mov	r1, r3
 6674 2a32 FDF799FD 		bl	move_window
 6675 2a36 0346     		mov	r3, r0
 6676 2a38 FB75     		strb	r3, [r7, #23]
2756:../tasks/SDMMC/ff.c **** 			if (res == FR_OK) {
 6677              		.loc 1 2756 0
 6678 2a3a FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 6679 2a3c 002B     		cmp	r3, #0
 6680 2a3e 6FD1     		bne	.L404
2757:../tasks/SDMMC/ff.c **** 				dir = fp->dir_ptr;
 6681              		.loc 1 2757 0
 6682 2a40 7B68     		ldr	r3, [r7, #4]
 6683 2a42 D3F82032 		ldr	r3, [r3, #544]
 6684 2a46 3B61     		str	r3, [r7, #16]
2758:../tasks/SDMMC/ff.c **** 				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 6685              		.loc 1 2758 0
 6686 2a48 3B69     		ldr	r3, [r7, #16]
 6687 2a4a 0B33     		adds	r3, r3, #11
 6688 2a4c 3A69     		ldr	r2, [r7, #16]
 6689 2a4e 0B32     		adds	r2, r2, #11
 6690 2a50 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 6691 2a52 42F02002 		orr	r2, r2, #32
 6692 2a56 D2B2     		uxtb	r2, r2
 6693 2a58 1A70     		strb	r2, [r3]
2759:../tasks/SDMMC/ff.c **** 				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
 6694              		.loc 1 2759 0
 6695 2a5a 3B69     		ldr	r3, [r7, #16]
 6696 2a5c 1C33     		adds	r3, r3, #28
 6697 2a5e 7A68     		ldr	r2, [r7, #4]
 6698 2a60 D2F80C22 		ldr	r2, [r2, #524]
 6699 2a64 D2B2     		uxtb	r2, r2
 6700 2a66 1A70     		strb	r2, [r3]
 6701 2a68 3B69     		ldr	r3, [r7, #16]
 6702 2a6a 1D33     		adds	r3, r3, #29
 6703 2a6c 7A68     		ldr	r2, [r7, #4]
 6704 2a6e D2F80C22 		ldr	r2, [r2, #524]
 6705 2a72 92B2     		uxth	r2, r2
 6706 2a74 120A     		lsrs	r2, r2, #8
 6707 2a76 92B2     		uxth	r2, r2
 6708 2a78 D2B2     		uxtb	r2, r2
 6709 2a7a 1A70     		strb	r2, [r3]
 6710 2a7c 3B69     		ldr	r3, [r7, #16]
 6711 2a7e 1E33     		adds	r3, r3, #30
 6712 2a80 7A68     		ldr	r2, [r7, #4]
 6713 2a82 D2F80C22 		ldr	r2, [r2, #524]
 6714 2a86 120C     		lsrs	r2, r2, #16
 6715 2a88 D2B2     		uxtb	r2, r2
 6716 2a8a 1A70     		strb	r2, [r3]
 6717 2a8c 3B69     		ldr	r3, [r7, #16]
 6718 2a8e 1F33     		adds	r3, r3, #31
 6719 2a90 7A68     		ldr	r2, [r7, #4]
 6720 2a92 D2F80C22 		ldr	r2, [r2, #524]
 6721 2a96 120E     		lsrs	r2, r2, #24
 6722 2a98 D2B2     		uxtb	r2, r2
 6723 2a9a 1A70     		strb	r2, [r3]
2760:../tasks/SDMMC/ff.c **** 				st_clust(dir, fp->sclust);					/* Update start cluster */
 6724              		.loc 1 2760 0
 6725 2a9c 7B68     		ldr	r3, [r7, #4]
 6726 2a9e D3F81032 		ldr	r3, [r3, #528]
 6727 2aa2 3869     		ldr	r0, [r7, #16]
 6728 2aa4 1946     		mov	r1, r3
 6729 2aa6 FEF733FB 		bl	st_clust
2761:../tasks/SDMMC/ff.c **** 				tm = get_fattime();							/* Update updated time */
 6730              		.loc 1 2761 0
 6731 2aaa FFF7FEFF 		bl	get_fattime
 6732 2aae F860     		str	r0, [r7, #12]
2762:../tasks/SDMMC/ff.c **** 				ST_DWORD(dir+DIR_WrtTime, tm);
 6733              		.loc 1 2762 0
 6734 2ab0 3B69     		ldr	r3, [r7, #16]
 6735 2ab2 1633     		adds	r3, r3, #22
 6736 2ab4 FA68     		ldr	r2, [r7, #12]
 6737 2ab6 D2B2     		uxtb	r2, r2
 6738 2ab8 1A70     		strb	r2, [r3]
 6739 2aba 3B69     		ldr	r3, [r7, #16]
 6740 2abc 1733     		adds	r3, r3, #23
 6741 2abe FA68     		ldr	r2, [r7, #12]
 6742 2ac0 92B2     		uxth	r2, r2
 6743 2ac2 120A     		lsrs	r2, r2, #8
 6744 2ac4 92B2     		uxth	r2, r2
 6745 2ac6 D2B2     		uxtb	r2, r2
 6746 2ac8 1A70     		strb	r2, [r3]
 6747 2aca 3B69     		ldr	r3, [r7, #16]
 6748 2acc 1833     		adds	r3, r3, #24
 6749 2ace FA68     		ldr	r2, [r7, #12]
 6750 2ad0 120C     		lsrs	r2, r2, #16
 6751 2ad2 D2B2     		uxtb	r2, r2
 6752 2ad4 1A70     		strb	r2, [r3]
 6753 2ad6 3B69     		ldr	r3, [r7, #16]
 6754 2ad8 1933     		adds	r3, r3, #25
 6755 2ada FA68     		ldr	r2, [r7, #12]
 6756 2adc 120E     		lsrs	r2, r2, #24
 6757 2ade D2B2     		uxtb	r2, r2
 6758 2ae0 1A70     		strb	r2, [r3]
2763:../tasks/SDMMC/ff.c **** 				ST_WORD(dir+DIR_LstAccDate, 0);
 6759              		.loc 1 2763 0
 6760 2ae2 3B69     		ldr	r3, [r7, #16]
 6761 2ae4 1233     		adds	r3, r3, #18
 6762 2ae6 0022     		movs	r2, #0
 6763 2ae8 1A70     		strb	r2, [r3]
 6764 2aea 3B69     		ldr	r3, [r7, #16]
 6765 2aec 1333     		adds	r3, r3, #19
 6766 2aee 0022     		movs	r2, #0
 6767 2af0 1A70     		strb	r2, [r3]
2764:../tasks/SDMMC/ff.c **** 				fp->flag &= ~FA__WRITTEN;
 6768              		.loc 1 2764 0
 6769 2af2 7B68     		ldr	r3, [r7, #4]
 6770 2af4 93F80632 		ldrb	r3, [r3, #518]	@ zero_extendqisi2
 6771 2af8 23F02003 		bic	r3, r3, #32
 6772 2afc DAB2     		uxtb	r2, r3
 6773 2afe 7B68     		ldr	r3, [r7, #4]
 6774 2b00 83F80622 		strb	r2, [r3, #518]
2765:../tasks/SDMMC/ff.c **** 				fp->fs->wflag = 1;
 6775              		.loc 1 2765 0
 6776 2b04 7B68     		ldr	r3, [r7, #4]
 6777 2b06 D3F80032 		ldr	r3, [r3, #512]
 6778 2b0a 0122     		movs	r2, #1
 6779 2b0c 83F80422 		strb	r2, [r3, #516]
2766:../tasks/SDMMC/ff.c **** 				res = sync_fs(fp->fs);
 6780              		.loc 1 2766 0
 6781 2b10 7B68     		ldr	r3, [r7, #4]
 6782 2b12 D3F80032 		ldr	r3, [r3, #512]
 6783 2b16 1846     		mov	r0, r3
 6784 2b18 FDF752FD 		bl	sync_fs
 6785 2b1c 0346     		mov	r3, r0
 6786 2b1e FB75     		strb	r3, [r7, #23]
 6787              	.L404:
2767:../tasks/SDMMC/ff.c **** 			}
2768:../tasks/SDMMC/ff.c **** 		}
2769:../tasks/SDMMC/ff.c **** 	}
2770:../tasks/SDMMC/ff.c **** 
2771:../tasks/SDMMC/ff.c **** 	LEAVE_FF(fp->fs, res);
 6788              		.loc 1 2771 0
 6789 2b20 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 6790              	.L407:
2772:../tasks/SDMMC/ff.c **** }
 6791              		.loc 1 2772 0
 6792 2b22 1846     		mov	r0, r3
 6793 2b24 1837     		adds	r7, r7, #24
 6794 2b26 BD46     		mov	sp, r7
 6795              		@ sp needed
 6796 2b28 80BD     		pop	{r7, pc}
 6797              		.cfi_endproc
 6798              	.LFE93:
 6800 2b2a 00BF     		.align	2
 6801              		.global	f_close
 6802              		.thumb
 6803              		.thumb_func
 6805              	f_close:
 6806              	.LFB94:
2773:../tasks/SDMMC/ff.c **** 
2774:../tasks/SDMMC/ff.c **** #endif /* !_FS_READONLY */
2775:../tasks/SDMMC/ff.c **** 
2776:../tasks/SDMMC/ff.c **** 
2777:../tasks/SDMMC/ff.c **** 
2778:../tasks/SDMMC/ff.c **** 
2779:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
2780:../tasks/SDMMC/ff.c **** /* Close File                                                            */
2781:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
2782:../tasks/SDMMC/ff.c **** 
2783:../tasks/SDMMC/ff.c **** FRESULT f_close (
2784:../tasks/SDMMC/ff.c ****     FIL *fp	    /* Pointer to the file object to be closed */
2785:../tasks/SDMMC/ff.c **** )
2786:../tasks/SDMMC/ff.c **** {
 6807              		.loc 1 2786 0
 6808              		.cfi_startproc
 6809              		@ args = 0, pretend = 0, frame = 16
 6810              		@ frame_needed = 1, uses_anonymous_args = 0
 6811 2b2c 80B5     		push	{r7, lr}
 6812              		.cfi_def_cfa_offset 8
 6813              		.cfi_offset 7, -8
 6814              		.cfi_offset 14, -4
 6815 2b2e 84B0     		sub	sp, sp, #16
 6816              		.cfi_def_cfa_offset 24
 6817 2b30 00AF     		add	r7, sp, #0
 6818              		.cfi_def_cfa_register 7
 6819 2b32 7860     		str	r0, [r7, #4]
2787:../tasks/SDMMC/ff.c ****     FRESULT res;
2788:../tasks/SDMMC/ff.c **** 
2789:../tasks/SDMMC/ff.c **** 
2790:../tasks/SDMMC/ff.c **** #if !_FS_READONLY
2791:../tasks/SDMMC/ff.c ****     res = f_sync(fp);                   /* Flush cached data */
 6820              		.loc 1 2791 0
 6821 2b34 7868     		ldr	r0, [r7, #4]
 6822 2b36 FFF7FEFF 		bl	f_sync
 6823 2b3a 0346     		mov	r3, r0
 6824 2b3c FB73     		strb	r3, [r7, #15]
2792:../tasks/SDMMC/ff.c ****     if (res == FR_OK)
 6825              		.loc 1 2792 0
 6826 2b3e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 6827 2b40 002B     		cmp	r3, #0
 6828 2b42 16D1     		bne	.L409
2793:../tasks/SDMMC/ff.c **** #endif
2794:../tasks/SDMMC/ff.c ****     {
2795:../tasks/SDMMC/ff.c ****         res = validate(fp);             /* Lock volume */
 6829              		.loc 1 2795 0
 6830 2b44 7868     		ldr	r0, [r7, #4]
 6831 2b46 FFF781F9 		bl	validate
 6832 2b4a 0346     		mov	r3, r0
 6833 2b4c FB73     		strb	r3, [r7, #15]
2796:../tasks/SDMMC/ff.c ****         if (res == FR_OK) {
 6834              		.loc 1 2796 0
 6835 2b4e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 6836 2b50 002B     		cmp	r3, #0
 6837 2b52 0ED1     		bne	.L409
2797:../tasks/SDMMC/ff.c **** #if _FS_REENTRANT
2798:../tasks/SDMMC/ff.c ****             FATFS *fs = fp->fs;
2799:../tasks/SDMMC/ff.c **** #endif
2800:../tasks/SDMMC/ff.c **** #if _FS_LOCK
2801:../tasks/SDMMC/ff.c ****             res = dec_lock(fp->lockid); /* Decrement file open counter */
 6838              		.loc 1 2801 0
 6839 2b54 7B68     		ldr	r3, [r7, #4]
 6840 2b56 D3F82832 		ldr	r3, [r3, #552]
 6841 2b5a 1846     		mov	r0, r3
 6842 2b5c FDF742FC 		bl	dec_lock
 6843 2b60 0346     		mov	r3, r0
 6844 2b62 FB73     		strb	r3, [r7, #15]
2802:../tasks/SDMMC/ff.c ****             if (res == FR_OK)
 6845              		.loc 1 2802 0
 6846 2b64 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 6847 2b66 002B     		cmp	r3, #0
 6848 2b68 03D1     		bne	.L409
2803:../tasks/SDMMC/ff.c **** #endif
2804:../tasks/SDMMC/ff.c ****                 fp->fs = 0;             /* Invalidate file object */
 6849              		.loc 1 2804 0
 6850 2b6a 7B68     		ldr	r3, [r7, #4]
 6851 2b6c 0022     		movs	r2, #0
 6852 2b6e C3F80022 		str	r2, [r3, #512]
 6853              	.L409:
2805:../tasks/SDMMC/ff.c **** #if _FS_REENTRANT
2806:../tasks/SDMMC/ff.c ****             unlock_fs(fs, FR_OK);       /* Unlock volume */
2807:../tasks/SDMMC/ff.c **** #endif
2808:../tasks/SDMMC/ff.c ****         }
2809:../tasks/SDMMC/ff.c ****     }
2810:../tasks/SDMMC/ff.c ****     return res;
 6854              		.loc 1 2810 0
 6855 2b72 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
2811:../tasks/SDMMC/ff.c **** }
 6856              		.loc 1 2811 0
 6857 2b74 1846     		mov	r0, r3
 6858 2b76 1037     		adds	r7, r7, #16
 6859 2b78 BD46     		mov	sp, r7
 6860              		@ sp needed
 6861 2b7a 80BD     		pop	{r7, pc}
 6862              		.cfi_endproc
 6863              	.LFE94:
 6865              		.align	2
 6866              		.global	f_chdrive
 6867              		.thumb
 6868              		.thumb_func
 6870              	f_chdrive:
 6871              	.LFB95:
2812:../tasks/SDMMC/ff.c **** 
2813:../tasks/SDMMC/ff.c **** 
2814:../tasks/SDMMC/ff.c **** 
2815:../tasks/SDMMC/ff.c **** 
2816:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
2817:../tasks/SDMMC/ff.c **** /* Change Current Directory or Current Drive, Get Current Directory      */
2818:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
2819:../tasks/SDMMC/ff.c **** 
2820:../tasks/SDMMC/ff.c **** #if _FS_RPATH >= 1
2821:../tasks/SDMMC/ff.c **** #if _VOLUMES >= 2
2822:../tasks/SDMMC/ff.c **** FRESULT f_chdrive (
2823:../tasks/SDMMC/ff.c **** 	const TCHAR* path		/* Drive number */
2824:../tasks/SDMMC/ff.c **** )
2825:../tasks/SDMMC/ff.c **** {
 6872              		.loc 1 2825 0
 6873              		.cfi_startproc
 6874              		@ args = 0, pretend = 0, frame = 16
 6875              		@ frame_needed = 1, uses_anonymous_args = 0
 6876 2b7c 80B5     		push	{r7, lr}
 6877              		.cfi_def_cfa_offset 8
 6878              		.cfi_offset 7, -8
 6879              		.cfi_offset 14, -4
 6880 2b7e 84B0     		sub	sp, sp, #16
 6881              		.cfi_def_cfa_offset 24
 6882 2b80 00AF     		add	r7, sp, #0
 6883              		.cfi_def_cfa_register 7
 6884 2b82 7860     		str	r0, [r7, #4]
2826:../tasks/SDMMC/ff.c **** 	int vol;
2827:../tasks/SDMMC/ff.c **** 
2828:../tasks/SDMMC/ff.c **** 
2829:../tasks/SDMMC/ff.c **** 	vol = get_ldnumber(&path);
 6885              		.loc 1 2829 0
 6886 2b84 3B1D     		adds	r3, r7, #4
 6887 2b86 1846     		mov	r0, r3
 6888 2b88 FEF762FD 		bl	get_ldnumber
 6889 2b8c F860     		str	r0, [r7, #12]
2830:../tasks/SDMMC/ff.c **** 	if (vol < 0) return FR_INVALID_DRIVE;
 6890              		.loc 1 2830 0
 6891 2b8e FB68     		ldr	r3, [r7, #12]
 6892 2b90 002B     		cmp	r3, #0
 6893 2b92 01DA     		bge	.L412
 6894              		.loc 1 2830 0 is_stmt 0 discriminator 1
 6895 2b94 0B23     		movs	r3, #11
 6896 2b96 07E0     		b	.L413
 6897              	.L412:
2831:../tasks/SDMMC/ff.c **** 
2832:../tasks/SDMMC/ff.c **** 	CurrVol = (BYTE)vol;
 6898              		.loc 1 2832 0 is_stmt 1
 6899 2b98 FB68     		ldr	r3, [r7, #12]
 6900 2b9a DAB2     		uxtb	r2, r3
 6901 2b9c 40F20003 		movw	r3, #:lower16:CurrVol
 6902 2ba0 C0F20003 		movt	r3, #:upper16:CurrVol
 6903 2ba4 1A70     		strb	r2, [r3]
2833:../tasks/SDMMC/ff.c **** 
2834:../tasks/SDMMC/ff.c **** 	return FR_OK;
 6904              		.loc 1 2834 0
 6905 2ba6 0023     		movs	r3, #0
 6906              	.L413:
2835:../tasks/SDMMC/ff.c **** }
 6907              		.loc 1 2835 0
 6908 2ba8 1846     		mov	r0, r3
 6909 2baa 1037     		adds	r7, r7, #16
 6910 2bac BD46     		mov	sp, r7
 6911              		@ sp needed
 6912 2bae 80BD     		pop	{r7, pc}
 6913              		.cfi_endproc
 6914              	.LFE95:
 6916              		.align	2
 6917              		.global	f_chdir
 6918              		.thumb
 6919              		.thumb_func
 6921              	f_chdir:
 6922              	.LFB96:
2836:../tasks/SDMMC/ff.c **** #endif
2837:../tasks/SDMMC/ff.c **** 
2838:../tasks/SDMMC/ff.c **** 
2839:../tasks/SDMMC/ff.c **** FRESULT f_chdir (
2840:../tasks/SDMMC/ff.c **** 	const TCHAR* path	/* Pointer to the directory path */
2841:../tasks/SDMMC/ff.c **** )
2842:../tasks/SDMMC/ff.c **** {
 6923              		.loc 1 2842 0
 6924              		.cfi_startproc
 6925              		@ args = 0, pretend = 0, frame = 568
 6926              		@ frame_needed = 1, uses_anonymous_args = 0
 6927 2bb0 90B5     		push	{r4, r7, lr}
 6928              		.cfi_def_cfa_offset 12
 6929              		.cfi_offset 4, -12
 6930              		.cfi_offset 7, -8
 6931              		.cfi_offset 14, -4
 6932 2bb2 ADF50F7D 		sub	sp, sp, #572
 6933              		.cfi_def_cfa_offset 584
 6934 2bb6 00AF     		add	r7, sp, #0
 6935              		.cfi_def_cfa_register 7
 6936 2bb8 3B1D     		adds	r3, r7, #4
 6937 2bba 1860     		str	r0, [r3]
2843:../tasks/SDMMC/ff.c **** 	FRESULT res;
2844:../tasks/SDMMC/ff.c **** 	DIR dj;
2845:../tasks/SDMMC/ff.c **** 	DEF_NAMEBUF;
2846:../tasks/SDMMC/ff.c **** 
2847:../tasks/SDMMC/ff.c **** 
2848:../tasks/SDMMC/ff.c **** 	/* Get logical drive number */
2849:../tasks/SDMMC/ff.c **** 	res = find_volume(&dj.fs, &path, 0);
 6938              		.loc 1 2849 0
 6939 2bbc 07F11403 		add	r3, r7, #20
 6940 2bc0 03F50072 		add	r2, r3, #512
 6941 2bc4 3B1D     		adds	r3, r7, #4
 6942 2bc6 1046     		mov	r0, r2
 6943 2bc8 1946     		mov	r1, r3
 6944 2bca 0022     		movs	r2, #0
 6945 2bcc FEF768FE 		bl	find_volume
 6946 2bd0 0346     		mov	r3, r0
 6947 2bd2 87F83732 		strb	r3, [r7, #567]
2850:../tasks/SDMMC/ff.c **** 	if (res == FR_OK) {
 6948              		.loc 1 2850 0
 6949 2bd6 97F83732 		ldrb	r3, [r7, #567]	@ zero_extendqisi2
 6950 2bda 002B     		cmp	r3, #0
 6951 2bdc 4DD1     		bne	.L415
2851:../tasks/SDMMC/ff.c **** 		INIT_BUF(dj);
 6952              		.loc 1 2851 0
 6953 2bde 07F11403 		add	r3, r7, #20
 6954 2be2 07F10802 		add	r2, r7, #8
 6955 2be6 C3F81822 		str	r2, [r3, #536]
2852:../tasks/SDMMC/ff.c **** 		res = follow_path(&dj, path);		/* Follow the path */
 6956              		.loc 1 2852 0
 6957 2bea 3B1D     		adds	r3, r7, #4
 6958 2bec 1B68     		ldr	r3, [r3]
 6959 2bee 07F11402 		add	r2, r7, #20
 6960 2bf2 1046     		mov	r0, r2
 6961 2bf4 1946     		mov	r1, r3
 6962 2bf6 FEF75FFD 		bl	follow_path
 6963 2bfa 0346     		mov	r3, r0
 6964 2bfc 87F83732 		strb	r3, [r7, #567]
2853:../tasks/SDMMC/ff.c **** 		FREE_BUF();
2854:../tasks/SDMMC/ff.c **** 		if (res == FR_OK) {					/* Follow completed */
 6965              		.loc 1 2854 0
 6966 2c00 97F83732 		ldrb	r3, [r7, #567]	@ zero_extendqisi2
 6967 2c04 002B     		cmp	r3, #0
 6968 2c06 31D1     		bne	.L416
2855:../tasks/SDMMC/ff.c **** 			if (!dj.dir) {
 6969              		.loc 1 2855 0
 6970 2c08 07F11403 		add	r3, r7, #20
 6971 2c0c D3F81432 		ldr	r3, [r3, #532]
 6972 2c10 002B     		cmp	r3, #0
 6973 2c12 0AD1     		bne	.L417
2856:../tasks/SDMMC/ff.c **** 				dj.fs->cdir = dj.sclust;	/* Start directory itself */
 6974              		.loc 1 2856 0
 6975 2c14 07F11403 		add	r3, r7, #20
 6976 2c18 D3F80032 		ldr	r3, [r3, #512]
 6977 2c1c 07F11402 		add	r2, r7, #20
 6978 2c20 D2F80822 		ldr	r2, [r2, #520]
 6979 2c24 C3F81422 		str	r2, [r3, #532]
 6980 2c28 20E0     		b	.L416
 6981              	.L417:
2857:../tasks/SDMMC/ff.c **** 			} else {
2858:../tasks/SDMMC/ff.c **** 				if (dj.dir[DIR_Attr] & AM_DIR)	/* Reached to the directory */
 6982              		.loc 1 2858 0
 6983 2c2a 07F11403 		add	r3, r7, #20
 6984 2c2e D3F81432 		ldr	r3, [r3, #532]
 6985 2c32 0B33     		adds	r3, r3, #11
 6986 2c34 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6987 2c36 03F01003 		and	r3, r3, #16
 6988 2c3a 002B     		cmp	r3, #0
 6989 2c3c 13D0     		beq	.L418
2859:../tasks/SDMMC/ff.c **** 					dj.fs->cdir = ld_clust(dj.fs, dj.dir);
 6990              		.loc 1 2859 0
 6991 2c3e 07F11403 		add	r3, r7, #20
 6992 2c42 D3F80042 		ldr	r4, [r3, #512]
 6993 2c46 07F11403 		add	r3, r7, #20
 6994 2c4a D3F80022 		ldr	r2, [r3, #512]
 6995 2c4e 07F11403 		add	r3, r7, #20
 6996 2c52 D3F81432 		ldr	r3, [r3, #532]
 6997 2c56 1046     		mov	r0, r2
 6998 2c58 1946     		mov	r1, r3
 6999 2c5a FEF72DFA 		bl	ld_clust
 7000 2c5e 0346     		mov	r3, r0
 7001 2c60 C4F81432 		str	r3, [r4, #532]
 7002 2c64 02E0     		b	.L416
 7003              	.L418:
2860:../tasks/SDMMC/ff.c **** 				else
2861:../tasks/SDMMC/ff.c **** 					res = FR_NO_PATH;		/* Reached but a file */
 7004              		.loc 1 2861 0
 7005 2c66 0523     		movs	r3, #5
 7006 2c68 87F83732 		strb	r3, [r7, #567]
 7007              	.L416:
2862:../tasks/SDMMC/ff.c **** 			}
2863:../tasks/SDMMC/ff.c **** 		}
2864:../tasks/SDMMC/ff.c **** 		if (res == FR_NO_FILE) res = FR_NO_PATH;
 7008              		.loc 1 2864 0
 7009 2c6c 97F83732 		ldrb	r3, [r7, #567]	@ zero_extendqisi2
 7010 2c70 042B     		cmp	r3, #4
 7011 2c72 02D1     		bne	.L415
 7012              		.loc 1 2864 0 is_stmt 0 discriminator 1
 7013 2c74 0523     		movs	r3, #5
 7014 2c76 87F83732 		strb	r3, [r7, #567]
 7015              	.L415:
2865:../tasks/SDMMC/ff.c **** 	}
2866:../tasks/SDMMC/ff.c **** 
2867:../tasks/SDMMC/ff.c **** 	LEAVE_FF(dj.fs, res);
 7016              		.loc 1 2867 0 is_stmt 1
 7017 2c7a 97F83732 		ldrb	r3, [r7, #567]	@ zero_extendqisi2
2868:../tasks/SDMMC/ff.c **** }
 7018              		.loc 1 2868 0
 7019 2c7e 1846     		mov	r0, r3
 7020 2c80 07F50F77 		add	r7, r7, #572
 7021 2c84 BD46     		mov	sp, r7
 7022              		@ sp needed
 7023 2c86 90BD     		pop	{r4, r7, pc}
 7024              		.cfi_endproc
 7025              	.LFE96:
 7027              		.align	2
 7028              		.global	f_lseek
 7029              		.thumb
 7030              		.thumb_func
 7032              	f_lseek:
 7033              	.LFB97:
2869:../tasks/SDMMC/ff.c **** 
2870:../tasks/SDMMC/ff.c **** 
2871:../tasks/SDMMC/ff.c **** #if _FS_RPATH >= 2
2872:../tasks/SDMMC/ff.c **** FRESULT f_getcwd (
2873:../tasks/SDMMC/ff.c **** 	TCHAR* buff,	/* Pointer to the directory path */
2874:../tasks/SDMMC/ff.c **** 	UINT len		/* Size of path */
2875:../tasks/SDMMC/ff.c **** )
2876:../tasks/SDMMC/ff.c **** {
2877:../tasks/SDMMC/ff.c **** 	FRESULT res;
2878:../tasks/SDMMC/ff.c **** 	DIR dj;
2879:../tasks/SDMMC/ff.c **** 	UINT i, n;
2880:../tasks/SDMMC/ff.c **** 	DWORD ccl;
2881:../tasks/SDMMC/ff.c **** 	TCHAR *tp;
2882:../tasks/SDMMC/ff.c **** 	FILINFO fno;
2883:../tasks/SDMMC/ff.c **** 	DEF_NAMEBUF;
2884:../tasks/SDMMC/ff.c **** 
2885:../tasks/SDMMC/ff.c **** 
2886:../tasks/SDMMC/ff.c **** 	*buff = 0;
2887:../tasks/SDMMC/ff.c **** 	/* Get logical drive number */
2888:../tasks/SDMMC/ff.c **** 	res = find_volume(&dj.fs, (const TCHAR**)&buff, 0);	/* Get current volume */
2889:../tasks/SDMMC/ff.c **** 	if (res == FR_OK) {
2890:../tasks/SDMMC/ff.c **** 		INIT_BUF(dj);
2891:../tasks/SDMMC/ff.c **** 		i = len;			/* Bottom of buffer (directory stack base) */
2892:../tasks/SDMMC/ff.c **** 		dj.sclust = dj.fs->cdir;			/* Start to follow upper directory from current directory */
2893:../tasks/SDMMC/ff.c **** 		while ((ccl = dj.sclust) != 0) {	/* Repeat while current directory is a sub-directory */
2894:../tasks/SDMMC/ff.c **** 			res = dir_sdi(&dj, 1);			/* Get parent directory */
2895:../tasks/SDMMC/ff.c **** 			if (res != FR_OK) break;
2896:../tasks/SDMMC/ff.c **** 			res = dir_read(&dj, 0);
2897:../tasks/SDMMC/ff.c **** 			if (res != FR_OK) break;
2898:../tasks/SDMMC/ff.c **** 			dj.sclust = ld_clust(dj.fs, dj.dir);	/* Goto parent directory */
2899:../tasks/SDMMC/ff.c **** 			res = dir_sdi(&dj, 0);
2900:../tasks/SDMMC/ff.c **** 			if (res != FR_OK) break;
2901:../tasks/SDMMC/ff.c **** 			do {							/* Find the entry links to the child directory */
2902:../tasks/SDMMC/ff.c **** 				res = dir_read(&dj, 0);
2903:../tasks/SDMMC/ff.c **** 				if (res != FR_OK) break;
2904:../tasks/SDMMC/ff.c **** 				if (ccl == ld_clust(dj.fs, dj.dir)) break;	/* Found the entry */
2905:../tasks/SDMMC/ff.c **** 				res = dir_next(&dj, 0);	
2906:../tasks/SDMMC/ff.c **** 			} while (res == FR_OK);
2907:../tasks/SDMMC/ff.c **** 			if (res == FR_NO_FILE) res = FR_INT_ERR;/* It cannot be 'not found'. */
2908:../tasks/SDMMC/ff.c **** 			if (res != FR_OK) break;
2909:../tasks/SDMMC/ff.c **** #if _USE_LFN
2910:../tasks/SDMMC/ff.c **** 			fno.lfname = buff;
2911:../tasks/SDMMC/ff.c **** 			fno.lfsize = i;
2912:../tasks/SDMMC/ff.c **** #endif
2913:../tasks/SDMMC/ff.c **** 			get_fileinfo(&dj, &fno);		/* Get the directory name and push it to the buffer */
2914:../tasks/SDMMC/ff.c **** 			tp = fno.fname;
2915:../tasks/SDMMC/ff.c **** #if _USE_LFN
2916:../tasks/SDMMC/ff.c **** 			if (*buff) tp = buff;
2917:../tasks/SDMMC/ff.c **** #endif
2918:../tasks/SDMMC/ff.c **** 			for (n = 0; tp[n]; n++) ;
2919:../tasks/SDMMC/ff.c **** 			if (i < n + 3) {
2920:../tasks/SDMMC/ff.c **** 				res = FR_NOT_ENOUGH_CORE; break;
2921:../tasks/SDMMC/ff.c **** 			}
2922:../tasks/SDMMC/ff.c **** 			while (n) buff[--i] = tp[--n];
2923:../tasks/SDMMC/ff.c **** 			buff[--i] = '/';
2924:../tasks/SDMMC/ff.c **** 		}
2925:../tasks/SDMMC/ff.c **** 		tp = buff;
2926:../tasks/SDMMC/ff.c **** 		if (res == FR_OK) {
2927:../tasks/SDMMC/ff.c **** #if _VOLUMES >= 2
2928:../tasks/SDMMC/ff.c **** 			*tp++ = '0' + CurrVol;			/* Put drive number */
2929:../tasks/SDMMC/ff.c **** 			*tp++ = ':';
2930:../tasks/SDMMC/ff.c **** #endif
2931:../tasks/SDMMC/ff.c **** 			if (i == len) {					/* Root-directory */
2932:../tasks/SDMMC/ff.c **** 				*tp++ = '/';
2933:../tasks/SDMMC/ff.c **** 			} else {						/* Sub-directroy */
2934:../tasks/SDMMC/ff.c **** 				do		/* Add stacked path str */
2935:../tasks/SDMMC/ff.c **** 					*tp++ = buff[i++];
2936:../tasks/SDMMC/ff.c **** 				while (i < len);
2937:../tasks/SDMMC/ff.c **** 			}
2938:../tasks/SDMMC/ff.c **** 		}
2939:../tasks/SDMMC/ff.c **** 		*tp = 0;
2940:../tasks/SDMMC/ff.c **** 		FREE_BUF();
2941:../tasks/SDMMC/ff.c **** 	}
2942:../tasks/SDMMC/ff.c **** 
2943:../tasks/SDMMC/ff.c **** 	LEAVE_FF(dj.fs, res);
2944:../tasks/SDMMC/ff.c **** }
2945:../tasks/SDMMC/ff.c **** #endif /* _FS_RPATH >= 2 */
2946:../tasks/SDMMC/ff.c **** #endif /* _FS_RPATH >= 1 */
2947:../tasks/SDMMC/ff.c **** 
2948:../tasks/SDMMC/ff.c **** 
2949:../tasks/SDMMC/ff.c **** 
2950:../tasks/SDMMC/ff.c **** #if _FS_MINIMIZE <= 2
2951:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
2952:../tasks/SDMMC/ff.c **** /* Seek File R/W Pointer                                                 */
2953:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
2954:../tasks/SDMMC/ff.c **** 
2955:../tasks/SDMMC/ff.c **** FRESULT f_lseek (
2956:../tasks/SDMMC/ff.c **** 	FIL* fp,		/* Pointer to the file object */
2957:../tasks/SDMMC/ff.c **** 	DWORD ofs		/* File pointer from top of file */
2958:../tasks/SDMMC/ff.c **** )
2959:../tasks/SDMMC/ff.c **** {
 7034              		.loc 1 2959 0
 7035              		.cfi_startproc
 7036              		@ args = 0, pretend = 0, frame = 64
 7037              		@ frame_needed = 1, uses_anonymous_args = 0
 7038 2c88 80B5     		push	{r7, lr}
 7039              		.cfi_def_cfa_offset 8
 7040              		.cfi_offset 7, -8
 7041              		.cfi_offset 14, -4
 7042 2c8a 90B0     		sub	sp, sp, #64
 7043              		.cfi_def_cfa_offset 72
 7044 2c8c 00AF     		add	r7, sp, #0
 7045              		.cfi_def_cfa_register 7
 7046 2c8e 7860     		str	r0, [r7, #4]
 7047 2c90 3960     		str	r1, [r7]
2960:../tasks/SDMMC/ff.c **** 	FRESULT res;
2961:../tasks/SDMMC/ff.c **** 
2962:../tasks/SDMMC/ff.c **** 
2963:../tasks/SDMMC/ff.c **** 	res = validate(fp);					/* Check validity of the object */
 7048              		.loc 1 2963 0
 7049 2c92 7868     		ldr	r0, [r7, #4]
 7050 2c94 FFF7DAF8 		bl	validate
 7051 2c98 0346     		mov	r3, r0
 7052 2c9a 87F83F30 		strb	r3, [r7, #63]
2964:../tasks/SDMMC/ff.c **** 	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 7053              		.loc 1 2964 0
 7054 2c9e 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 7055 2ca2 002B     		cmp	r3, #0
 7056 2ca4 02D0     		beq	.L421
 7057              		.loc 1 2964 0 is_stmt 0 discriminator 1
 7058 2ca6 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 7059 2caa 4FE2     		b	.L422
 7060              	.L421:
2965:../tasks/SDMMC/ff.c **** 	if (fp->err)						/* Check error */
 7061              		.loc 1 2965 0 is_stmt 1
 7062 2cac 7B68     		ldr	r3, [r7, #4]
 7063 2cae 93F80732 		ldrb	r3, [r3, #519]	@ zero_extendqisi2
 7064 2cb2 002B     		cmp	r3, #0
 7065 2cb4 03D0     		beq	.L423
2966:../tasks/SDMMC/ff.c **** 		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 7066              		.loc 1 2966 0
 7067 2cb6 7B68     		ldr	r3, [r7, #4]
 7068 2cb8 93F80732 		ldrb	r3, [r3, #519]	@ zero_extendqisi2
 7069 2cbc 46E2     		b	.L422
 7070              	.L423:
2967:../tasks/SDMMC/ff.c **** 
2968:../tasks/SDMMC/ff.c **** #if _USE_FASTSEEK
2969:../tasks/SDMMC/ff.c **** 	if (fp->cltbl) {	/* Fast seek */
 7071              		.loc 1 2969 0
 7072 2cbe 7B68     		ldr	r3, [r7, #4]
 7073 2cc0 D3F82432 		ldr	r3, [r3, #548]
 7074 2cc4 002B     		cmp	r3, #0
 7075 2cc6 00F0F580 		beq	.L424
 7076              	.LBB7:
2970:../tasks/SDMMC/ff.c **** 		DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
2971:../tasks/SDMMC/ff.c **** 
2972:../tasks/SDMMC/ff.c **** 		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 7077              		.loc 1 2972 0
 7078 2cca 3B68     		ldr	r3, [r7]
 7079 2ccc B3F1FF3F 		cmp	r3, #-1
 7080 2cd0 64D1     		bne	.L425
2973:../tasks/SDMMC/ff.c **** 			tbl = fp->cltbl;
 7081              		.loc 1 2973 0
 7082 2cd2 7B68     		ldr	r3, [r7, #4]
 7083 2cd4 D3F82432 		ldr	r3, [r3, #548]
 7084 2cd8 FB62     		str	r3, [r7, #44]
2974:../tasks/SDMMC/ff.c **** 			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 7085              		.loc 1 2974 0
 7086 2cda FB6A     		ldr	r3, [r7, #44]
 7087 2cdc 1A1D     		adds	r2, r3, #4
 7088 2cde FA62     		str	r2, [r7, #44]
 7089 2ce0 1B68     		ldr	r3, [r3]
 7090 2ce2 3B62     		str	r3, [r7, #32]
 7091 2ce4 0223     		movs	r3, #2
 7092 2ce6 3B63     		str	r3, [r7, #48]
2975:../tasks/SDMMC/ff.c **** 			cl = fp->sclust;			/* Top of the chain */
 7093              		.loc 1 2975 0
 7094 2ce8 7B68     		ldr	r3, [r7, #4]
 7095 2cea D3F81032 		ldr	r3, [r3, #528]
 7096 2cee BB63     		str	r3, [r7, #56]
2976:../tasks/SDMMC/ff.c **** 			if (cl) {
 7097              		.loc 1 2976 0
 7098 2cf0 BB6B     		ldr	r3, [r7, #56]
 7099 2cf2 002B     		cmp	r3, #0
 7100 2cf4 41D0     		beq	.L426
 7101              	.L431:
2977:../tasks/SDMMC/ff.c **** 				do {
2978:../tasks/SDMMC/ff.c **** 					/* Get a fragment */
2979:../tasks/SDMMC/ff.c **** 					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 7102              		.loc 1 2979 0
 7103 2cf6 BB6B     		ldr	r3, [r7, #56]
 7104 2cf8 FB61     		str	r3, [r7, #28]
 7105 2cfa 0023     		movs	r3, #0
 7106 2cfc 7B63     		str	r3, [r7, #52]
 7107 2cfe 3B6B     		ldr	r3, [r7, #48]
 7108 2d00 0233     		adds	r3, r3, #2
 7109 2d02 3B63     		str	r3, [r7, #48]
 7110              	.L429:
2980:../tasks/SDMMC/ff.c **** 					do {
2981:../tasks/SDMMC/ff.c **** 						pcl = cl; ncl++;
 7111              		.loc 1 2981 0
 7112 2d04 BB6B     		ldr	r3, [r7, #56]
 7113 2d06 BB61     		str	r3, [r7, #24]
 7114 2d08 7B6B     		ldr	r3, [r7, #52]
 7115 2d0a 0133     		adds	r3, r3, #1
 7116 2d0c 7B63     		str	r3, [r7, #52]
2982:../tasks/SDMMC/ff.c **** 						cl = get_fat(fp->fs, cl);
 7117              		.loc 1 2982 0
 7118 2d0e 7B68     		ldr	r3, [r7, #4]
 7119 2d10 D3F80032 		ldr	r3, [r3, #512]
 7120 2d14 1846     		mov	r0, r3
 7121 2d16 B96B     		ldr	r1, [r7, #56]
 7122 2d18 FFF7FEFF 		bl	get_fat
 7123 2d1c B863     		str	r0, [r7, #56]
2983:../tasks/SDMMC/ff.c **** 						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 7124              		.loc 1 2983 0
 7125 2d1e BB6B     		ldr	r3, [r7, #56]
 7126 2d20 012B     		cmp	r3, #1
 7127 2d22 05D8     		bhi	.L427
 7128              		.loc 1 2983 0 is_stmt 0 discriminator 1
 7129 2d24 7B68     		ldr	r3, [r7, #4]
 7130 2d26 0222     		movs	r2, #2
 7131 2d28 83F80722 		strb	r2, [r3, #519]
 7132 2d2c 0223     		movs	r3, #2
 7133 2d2e 0DE2     		b	.L422
 7134              	.L427:
2984:../tasks/SDMMC/ff.c **** 						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 7135              		.loc 1 2984 0 is_stmt 1
 7136 2d30 BB6B     		ldr	r3, [r7, #56]
 7137 2d32 B3F1FF3F 		cmp	r3, #-1
 7138 2d36 05D1     		bne	.L428
 7139              		.loc 1 2984 0 is_stmt 0 discriminator 1
 7140 2d38 7B68     		ldr	r3, [r7, #4]
 7141 2d3a 0122     		movs	r2, #1
 7142 2d3c 83F80722 		strb	r2, [r3, #519]
 7143 2d40 0123     		movs	r3, #1
 7144 2d42 03E2     		b	.L422
 7145              	.L428:
2985:../tasks/SDMMC/ff.c **** 					} while (cl == pcl + 1);
 7146              		.loc 1 2985 0 is_stmt 1
 7147 2d44 BB69     		ldr	r3, [r7, #24]
 7148 2d46 5A1C     		adds	r2, r3, #1
 7149 2d48 BB6B     		ldr	r3, [r7, #56]
 7150 2d4a 9A42     		cmp	r2, r3
 7151 2d4c DAD0     		beq	.L429
2986:../tasks/SDMMC/ff.c **** 					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 7152              		.loc 1 2986 0
 7153 2d4e 3A6B     		ldr	r2, [r7, #48]
 7154 2d50 3B6A     		ldr	r3, [r7, #32]
 7155 2d52 9A42     		cmp	r2, r3
 7156 2d54 09D8     		bhi	.L430
2987:../tasks/SDMMC/ff.c **** 						*tbl++ = ncl; *tbl++ = tcl;
 7157              		.loc 1 2987 0
 7158 2d56 FB6A     		ldr	r3, [r7, #44]
 7159 2d58 1A1D     		adds	r2, r3, #4
 7160 2d5a FA62     		str	r2, [r7, #44]
 7161 2d5c 7A6B     		ldr	r2, [r7, #52]
 7162 2d5e 1A60     		str	r2, [r3]
 7163 2d60 FB6A     		ldr	r3, [r7, #44]
 7164 2d62 1A1D     		adds	r2, r3, #4
 7165 2d64 FA62     		str	r2, [r7, #44]
 7166 2d66 FA69     		ldr	r2, [r7, #28]
 7167 2d68 1A60     		str	r2, [r3]
 7168              	.L430:
2988:../tasks/SDMMC/ff.c **** 					}
2989:../tasks/SDMMC/ff.c **** 				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 7169              		.loc 1 2989 0
 7170 2d6a 7B68     		ldr	r3, [r7, #4]
 7171 2d6c D3F80032 		ldr	r3, [r3, #512]
 7172 2d70 D3F81822 		ldr	r2, [r3, #536]
 7173 2d74 BB6B     		ldr	r3, [r7, #56]
 7174 2d76 9A42     		cmp	r2, r3
 7175 2d78 BDD8     		bhi	.L431
 7176              	.L426:
2990:../tasks/SDMMC/ff.c **** 			}
2991:../tasks/SDMMC/ff.c **** 			*fp->cltbl = ulen;	/* Number of items used */
 7177              		.loc 1 2991 0
 7178 2d7a 7B68     		ldr	r3, [r7, #4]
 7179 2d7c D3F82432 		ldr	r3, [r3, #548]
 7180 2d80 3A6B     		ldr	r2, [r7, #48]
 7181 2d82 1A60     		str	r2, [r3]
2992:../tasks/SDMMC/ff.c **** 			if (ulen <= tlen)
 7182              		.loc 1 2992 0
 7183 2d84 3A6B     		ldr	r2, [r7, #48]
 7184 2d86 3B6A     		ldr	r3, [r7, #32]
 7185 2d88 9A42     		cmp	r2, r3
 7186 2d8a 03D8     		bhi	.L432
2993:../tasks/SDMMC/ff.c **** 				*tbl = 0;		/* Terminate table */
 7187              		.loc 1 2993 0
 7188 2d8c FB6A     		ldr	r3, [r7, #44]
 7189 2d8e 0022     		movs	r2, #0
 7190 2d90 1A60     		str	r2, [r3]
 7191 2d92 8EE0     		b	.L434
 7192              	.L432:
2994:../tasks/SDMMC/ff.c **** 			else
2995:../tasks/SDMMC/ff.c **** 				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 7193              		.loc 1 2995 0
 7194 2d94 1123     		movs	r3, #17
 7195 2d96 87F83F30 		strb	r3, [r7, #63]
 7196              	.LBE7:
 7197 2d9a D5E1     		b	.L440
 7198              	.L425:
 7199              	.LBB8:
2996:../tasks/SDMMC/ff.c **** 
2997:../tasks/SDMMC/ff.c **** 		} else {						/* Fast seek */
2998:../tasks/SDMMC/ff.c **** 			if (ofs > fp->fsize)		/* Clip offset at the file size */
 7200              		.loc 1 2998 0
 7201 2d9c 7B68     		ldr	r3, [r7, #4]
 7202 2d9e D3F80C22 		ldr	r2, [r3, #524]
 7203 2da2 3B68     		ldr	r3, [r7]
 7204 2da4 9A42     		cmp	r2, r3
 7205 2da6 03D2     		bcs	.L435
2999:../tasks/SDMMC/ff.c **** 				ofs = fp->fsize;
 7206              		.loc 1 2999 0
 7207 2da8 7B68     		ldr	r3, [r7, #4]
 7208 2daa D3F80C32 		ldr	r3, [r3, #524]
 7209 2dae 3B60     		str	r3, [r7]
 7210              	.L435:
3000:../tasks/SDMMC/ff.c **** 			fp->fptr = ofs;				/* Set file pointer */
 7211              		.loc 1 3000 0
 7212 2db0 7B68     		ldr	r3, [r7, #4]
 7213 2db2 3A68     		ldr	r2, [r7]
 7214 2db4 C3F80822 		str	r2, [r3, #520]
3001:../tasks/SDMMC/ff.c **** 			if (ofs) {
 7215              		.loc 1 3001 0
 7216 2db8 3B68     		ldr	r3, [r7]
 7217 2dba 002B     		cmp	r3, #0
 7218 2dbc 79D0     		beq	.L434
3002:../tasks/SDMMC/ff.c **** 				fp->clust = clmt_clust(fp, ofs - 1);
 7219              		.loc 1 3002 0
 7220 2dbe 3B68     		ldr	r3, [r7]
 7221 2dc0 013B     		subs	r3, r3, #1
 7222 2dc2 7868     		ldr	r0, [r7, #4]
 7223 2dc4 1946     		mov	r1, r3
 7224 2dc6 FDF769FF 		bl	clmt_clust
 7225 2dca 0246     		mov	r2, r0
 7226 2dcc 7B68     		ldr	r3, [r7, #4]
 7227 2dce C3F81422 		str	r2, [r3, #532]
3003:../tasks/SDMMC/ff.c **** 				dsc = clust2sect(fp->fs, fp->clust);
 7228              		.loc 1 3003 0
 7229 2dd2 7B68     		ldr	r3, [r7, #4]
 7230 2dd4 D3F80022 		ldr	r2, [r3, #512]
 7231 2dd8 7B68     		ldr	r3, [r7, #4]
 7232 2dda D3F81432 		ldr	r3, [r3, #532]
 7233 2dde 1046     		mov	r0, r2
 7234 2de0 1946     		mov	r1, r3
 7235 2de2 FFF7FEFF 		bl	clust2sect
 7236 2de6 7861     		str	r0, [r7, #20]
3004:../tasks/SDMMC/ff.c **** 				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 7237              		.loc 1 3004 0
 7238 2de8 7B69     		ldr	r3, [r7, #20]
 7239 2dea 002B     		cmp	r3, #0
 7240 2dec 05D1     		bne	.L436
 7241              		.loc 1 3004 0 is_stmt 0 discriminator 1
 7242 2dee 7B68     		ldr	r3, [r7, #4]
 7243 2df0 0222     		movs	r2, #2
 7244 2df2 83F80722 		strb	r2, [r3, #519]
 7245 2df6 0223     		movs	r3, #2
 7246 2df8 A8E1     		b	.L422
 7247              	.L436:
3005:../tasks/SDMMC/ff.c **** 				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 7248              		.loc 1 3005 0 is_stmt 1
 7249 2dfa 3B68     		ldr	r3, [r7]
 7250 2dfc 013B     		subs	r3, r3, #1
 7251 2dfe 5A0A     		lsrs	r2, r3, #9
 7252 2e00 7B68     		ldr	r3, [r7, #4]
 7253 2e02 D3F80032 		ldr	r3, [r3, #512]
 7254 2e06 93F80232 		ldrb	r3, [r3, #514]	@ zero_extendqisi2
 7255 2e0a 013B     		subs	r3, r3, #1
 7256 2e0c 1340     		ands	r3, r3, r2
 7257 2e0e 7A69     		ldr	r2, [r7, #20]
 7258 2e10 1344     		add	r3, r3, r2
 7259 2e12 7B61     		str	r3, [r7, #20]
3006:../tasks/SDMMC/ff.c **** 				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 7260              		.loc 1 3006 0
 7261 2e14 7B68     		ldr	r3, [r7, #4]
 7262 2e16 D3F80832 		ldr	r3, [r3, #520]
 7263 2e1a C3F30803 		ubfx	r3, r3, #0, #9
 7264 2e1e 002B     		cmp	r3, #0
 7265 2e20 47D0     		beq	.L434
 7266              		.loc 1 3006 0 is_stmt 0 discriminator 1
 7267 2e22 7B68     		ldr	r3, [r7, #4]
 7268 2e24 D3F81822 		ldr	r2, [r3, #536]
 7269 2e28 7B69     		ldr	r3, [r7, #20]
 7270 2e2a 9A42     		cmp	r2, r3
 7271 2e2c 41D0     		beq	.L434
3007:../tasks/SDMMC/ff.c **** #if !_FS_TINY
3008:../tasks/SDMMC/ff.c **** #if !_FS_READONLY
3009:../tasks/SDMMC/ff.c **** 					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 7272              		.loc 1 3009 0 is_stmt 1
 7273 2e2e 7B68     		ldr	r3, [r7, #4]
 7274 2e30 93F80632 		ldrb	r3, [r3, #518]	@ zero_extendqisi2
 7275 2e34 03F04003 		and	r3, r3, #64
 7276 2e38 002B     		cmp	r3, #0
 7277 2e3a 20D0     		beq	.L437
3010:../tasks/SDMMC/ff.c **** 						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1))
 7278              		.loc 1 3010 0
 7279 2e3c 7B68     		ldr	r3, [r7, #4]
 7280 2e3e D3F80032 		ldr	r3, [r3, #512]
 7281 2e42 93F80112 		ldrb	r1, [r3, #513]	@ zero_extendqisi2
 7282 2e46 7A68     		ldr	r2, [r7, #4]
 7283 2e48 7B68     		ldr	r3, [r7, #4]
 7284 2e4a D3F81832 		ldr	r3, [r3, #536]
 7285 2e4e 0846     		mov	r0, r1
 7286 2e50 1146     		mov	r1, r2
 7287 2e52 1A46     		mov	r2, r3
 7288 2e54 0123     		movs	r3, #1
 7289 2e56 FFF7FEFF 		bl	disk_write
 7290 2e5a 0346     		mov	r3, r0
 7291 2e5c 002B     		cmp	r3, #0
 7292 2e5e 05D0     		beq	.L438
3011:../tasks/SDMMC/ff.c **** 							ABORT(fp->fs, FR_DISK_ERR);
 7293              		.loc 1 3011 0
 7294 2e60 7B68     		ldr	r3, [r7, #4]
 7295 2e62 0122     		movs	r2, #1
 7296 2e64 83F80722 		strb	r2, [r3, #519]
 7297 2e68 0123     		movs	r3, #1
 7298 2e6a 6FE1     		b	.L422
 7299              	.L438:
3012:../tasks/SDMMC/ff.c **** 						fp->flag &= ~FA__DIRTY;
 7300              		.loc 1 3012 0
 7301 2e6c 7B68     		ldr	r3, [r7, #4]
 7302 2e6e 93F80632 		ldrb	r3, [r3, #518]	@ zero_extendqisi2
 7303 2e72 23F04003 		bic	r3, r3, #64
 7304 2e76 DAB2     		uxtb	r2, r3
 7305 2e78 7B68     		ldr	r3, [r7, #4]
 7306 2e7a 83F80622 		strb	r2, [r3, #518]
 7307              	.L437:
3013:../tasks/SDMMC/ff.c **** 					}
3014:../tasks/SDMMC/ff.c **** #endif
3015:../tasks/SDMMC/ff.c **** 					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1))	/* Load current sector */
 7308              		.loc 1 3015 0
 7309 2e7e 7B68     		ldr	r3, [r7, #4]
 7310 2e80 D3F80032 		ldr	r3, [r3, #512]
 7311 2e84 93F80122 		ldrb	r2, [r3, #513]	@ zero_extendqisi2
 7312 2e88 7B68     		ldr	r3, [r7, #4]
 7313 2e8a 1046     		mov	r0, r2
 7314 2e8c 1946     		mov	r1, r3
 7315 2e8e 7A69     		ldr	r2, [r7, #20]
 7316 2e90 0123     		movs	r3, #1
 7317 2e92 FFF7FEFF 		bl	disk_read
 7318 2e96 0346     		mov	r3, r0
 7319 2e98 002B     		cmp	r3, #0
 7320 2e9a 05D0     		beq	.L439
3016:../tasks/SDMMC/ff.c **** 						ABORT(fp->fs, FR_DISK_ERR);
 7321              		.loc 1 3016 0
 7322 2e9c 7B68     		ldr	r3, [r7, #4]
 7323 2e9e 0122     		movs	r2, #1
 7324 2ea0 83F80722 		strb	r2, [r3, #519]
 7325 2ea4 0123     		movs	r3, #1
 7326 2ea6 51E1     		b	.L422
 7327              	.L439:
3017:../tasks/SDMMC/ff.c **** #endif
3018:../tasks/SDMMC/ff.c **** 					fp->dsect = dsc;
 7328              		.loc 1 3018 0
 7329 2ea8 7B68     		ldr	r3, [r7, #4]
 7330 2eaa 7A69     		ldr	r2, [r7, #20]
 7331 2eac C3F81822 		str	r2, [r3, #536]
 7332              	.LBE8:
 7333 2eb0 4AE1     		b	.L440
 7334              	.L434:
 7335 2eb2 49E1     		b	.L440
 7336              	.L424:
 7337              	.LBB9:
3019:../tasks/SDMMC/ff.c **** 				}
3020:../tasks/SDMMC/ff.c **** 			}
3021:../tasks/SDMMC/ff.c **** 		}
3022:../tasks/SDMMC/ff.c **** 	} else
3023:../tasks/SDMMC/ff.c **** #endif
3024:../tasks/SDMMC/ff.c **** 
3025:../tasks/SDMMC/ff.c **** 	/* Normal Seek */
3026:../tasks/SDMMC/ff.c **** 	{
3027:../tasks/SDMMC/ff.c **** 		DWORD clst, bcs, nsect, ifptr;
3028:../tasks/SDMMC/ff.c **** 
3029:../tasks/SDMMC/ff.c **** 		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 7338              		.loc 1 3029 0
 7339 2eb4 7B68     		ldr	r3, [r7, #4]
 7340 2eb6 D3F80C22 		ldr	r2, [r3, #524]
 7341 2eba 3B68     		ldr	r3, [r7]
 7342 2ebc 9A42     		cmp	r2, r3
 7343 2ebe 0AD2     		bcs	.L441
3030:../tasks/SDMMC/ff.c **** #if !_FS_READONLY
3031:../tasks/SDMMC/ff.c **** 			 && !(fp->flag & FA_WRITE)
 7344              		.loc 1 3031 0
 7345 2ec0 7B68     		ldr	r3, [r7, #4]
 7346 2ec2 93F80632 		ldrb	r3, [r3, #518]	@ zero_extendqisi2
 7347 2ec6 03F00203 		and	r3, r3, #2
 7348 2eca 002B     		cmp	r3, #0
 7349 2ecc 03D1     		bne	.L441
3032:../tasks/SDMMC/ff.c **** #endif
3033:../tasks/SDMMC/ff.c **** 			) ofs = fp->fsize;
 7350              		.loc 1 3033 0
 7351 2ece 7B68     		ldr	r3, [r7, #4]
 7352 2ed0 D3F80C32 		ldr	r3, [r3, #524]
 7353 2ed4 3B60     		str	r3, [r7]
 7354              	.L441:
3034:../tasks/SDMMC/ff.c **** 
3035:../tasks/SDMMC/ff.c **** 		ifptr = fp->fptr;
 7355              		.loc 1 3035 0
 7356 2ed6 7B68     		ldr	r3, [r7, #4]
 7357 2ed8 D3F80832 		ldr	r3, [r3, #520]
 7358 2edc 3B61     		str	r3, [r7, #16]
3036:../tasks/SDMMC/ff.c **** 		fp->fptr = nsect = 0;
 7359              		.loc 1 3036 0
 7360 2ede 0023     		movs	r3, #0
 7361 2ee0 7B62     		str	r3, [r7, #36]
 7362 2ee2 7B68     		ldr	r3, [r7, #4]
 7363 2ee4 7A6A     		ldr	r2, [r7, #36]
 7364 2ee6 C3F80822 		str	r2, [r3, #520]
3037:../tasks/SDMMC/ff.c **** 		if (ofs) {
 7365              		.loc 1 3037 0
 7366 2eea 3B68     		ldr	r3, [r7]
 7367 2eec 002B     		cmp	r3, #0
 7368 2eee 00F0C680 		beq	.L442
3038:../tasks/SDMMC/ff.c **** 			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 7369              		.loc 1 3038 0
 7370 2ef2 7B68     		ldr	r3, [r7, #4]
 7371 2ef4 D3F80032 		ldr	r3, [r3, #512]
 7372 2ef8 93F80232 		ldrb	r3, [r3, #514]	@ zero_extendqisi2
 7373 2efc 5B02     		lsls	r3, r3, #9
 7374 2efe FB60     		str	r3, [r7, #12]
3039:../tasks/SDMMC/ff.c **** 			if (ifptr > 0 &&
 7375              		.loc 1 3039 0
 7376 2f00 3B69     		ldr	r3, [r7, #16]
 7377 2f02 002B     		cmp	r3, #0
 7378 2f04 1ED0     		beq	.L443
3040:../tasks/SDMMC/ff.c **** 				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 7379              		.loc 1 3040 0 discriminator 1
 7380 2f06 3B68     		ldr	r3, [r7]
 7381 2f08 5A1E     		subs	r2, r3, #1
 7382 2f0a FB68     		ldr	r3, [r7, #12]
 7383 2f0c B2FBF3F2 		udiv	r2, r2, r3
 7384 2f10 3B69     		ldr	r3, [r7, #16]
 7385 2f12 591E     		subs	r1, r3, #1
 7386 2f14 FB68     		ldr	r3, [r7, #12]
 7387 2f16 B1FBF3F3 		udiv	r3, r1, r3
3039:../tasks/SDMMC/ff.c **** 			if (ifptr > 0 &&
 7388              		.loc 1 3039 0 discriminator 1
 7389 2f1a 9A42     		cmp	r2, r3
 7390 2f1c 12D3     		bcc	.L443
3041:../tasks/SDMMC/ff.c **** 				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 7391              		.loc 1 3041 0
 7392 2f1e 3B69     		ldr	r3, [r7, #16]
 7393 2f20 5A1E     		subs	r2, r3, #1
 7394 2f22 FB68     		ldr	r3, [r7, #12]
 7395 2f24 5B42     		negs	r3, r3
 7396 2f26 1A40     		ands	r2, r2, r3
 7397 2f28 7B68     		ldr	r3, [r7, #4]
 7398 2f2a C3F80822 		str	r2, [r3, #520]
3042:../tasks/SDMMC/ff.c **** 				ofs -= fp->fptr;
 7399              		.loc 1 3042 0
 7400 2f2e 7B68     		ldr	r3, [r7, #4]
 7401 2f30 D3F80832 		ldr	r3, [r3, #520]
 7402 2f34 3A68     		ldr	r2, [r7]
 7403 2f36 D31A     		subs	r3, r2, r3
 7404 2f38 3B60     		str	r3, [r7]
3043:../tasks/SDMMC/ff.c **** 				clst = fp->clust;
 7405              		.loc 1 3043 0
 7406 2f3a 7B68     		ldr	r3, [r7, #4]
 7407 2f3c D3F81432 		ldr	r3, [r3, #532]
 7408 2f40 BB62     		str	r3, [r7, #40]
 7409 2f42 29E0     		b	.L444
 7410              	.L443:
3044:../tasks/SDMMC/ff.c **** 			} else {									/* When seek to back cluster, */
3045:../tasks/SDMMC/ff.c **** 				clst = fp->sclust;						/* start from the first cluster */
 7411              		.loc 1 3045 0
 7412 2f44 7B68     		ldr	r3, [r7, #4]
 7413 2f46 D3F81032 		ldr	r3, [r3, #528]
 7414 2f4a BB62     		str	r3, [r7, #40]
3046:../tasks/SDMMC/ff.c **** #if !_FS_READONLY
3047:../tasks/SDMMC/ff.c **** 				if (clst == 0) {						/* If no cluster chain, create a new chain */
 7415              		.loc 1 3047 0
 7416 2f4c BB6A     		ldr	r3, [r7, #40]
 7417 2f4e 002B     		cmp	r3, #0
 7418 2f50 1ED1     		bne	.L445
3048:../tasks/SDMMC/ff.c **** 					clst = create_chain(fp->fs, 0);
 7419              		.loc 1 3048 0
 7420 2f52 7B68     		ldr	r3, [r7, #4]
 7421 2f54 D3F80032 		ldr	r3, [r3, #512]
 7422 2f58 1846     		mov	r0, r3
 7423 2f5a 0021     		movs	r1, #0
 7424 2f5c FDF704FE 		bl	create_chain
 7425 2f60 B862     		str	r0, [r7, #40]
3049:../tasks/SDMMC/ff.c **** 					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 7426              		.loc 1 3049 0
 7427 2f62 BB6A     		ldr	r3, [r7, #40]
 7428 2f64 012B     		cmp	r3, #1
 7429 2f66 05D1     		bne	.L446
 7430              		.loc 1 3049 0 is_stmt 0 discriminator 1
 7431 2f68 7B68     		ldr	r3, [r7, #4]
 7432 2f6a 0222     		movs	r2, #2
 7433 2f6c 83F80722 		strb	r2, [r3, #519]
 7434 2f70 0223     		movs	r3, #2
 7435 2f72 EBE0     		b	.L422
 7436              	.L446:
3050:../tasks/SDMMC/ff.c **** 					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 7437              		.loc 1 3050 0 is_stmt 1
 7438 2f74 BB6A     		ldr	r3, [r7, #40]
 7439 2f76 B3F1FF3F 		cmp	r3, #-1
 7440 2f7a 05D1     		bne	.L447
 7441              		.loc 1 3050 0 is_stmt 0 discriminator 1
 7442 2f7c 7B68     		ldr	r3, [r7, #4]
 7443 2f7e 0122     		movs	r2, #1
 7444 2f80 83F80722 		strb	r2, [r3, #519]
 7445 2f84 0123     		movs	r3, #1
 7446 2f86 E1E0     		b	.L422
 7447              	.L447:
3051:../tasks/SDMMC/ff.c **** 					fp->sclust = clst;
 7448              		.loc 1 3051 0 is_stmt 1
 7449 2f88 7B68     		ldr	r3, [r7, #4]
 7450 2f8a BA6A     		ldr	r2, [r7, #40]
 7451 2f8c C3F81022 		str	r2, [r3, #528]
 7452              	.L445:
3052:../tasks/SDMMC/ff.c **** 				}
3053:../tasks/SDMMC/ff.c **** #endif
3054:../tasks/SDMMC/ff.c **** 				fp->clust = clst;
 7453              		.loc 1 3054 0
 7454 2f90 7B68     		ldr	r3, [r7, #4]
 7455 2f92 BA6A     		ldr	r2, [r7, #40]
 7456 2f94 C3F81422 		str	r2, [r3, #532]
 7457              	.L444:
3055:../tasks/SDMMC/ff.c **** 			}
3056:../tasks/SDMMC/ff.c **** 			if (clst != 0) {
 7458              		.loc 1 3056 0
 7459 2f98 BB6A     		ldr	r3, [r7, #40]
 7460 2f9a 002B     		cmp	r3, #0
 7461 2f9c 6FD0     		beq	.L442
3057:../tasks/SDMMC/ff.c **** 				while (ofs > bcs) {						/* Cluster following loop */
 7462              		.loc 1 3057 0
 7463 2f9e 47E0     		b	.L448
 7464              	.L455:
3058:../tasks/SDMMC/ff.c **** #if !_FS_READONLY
3059:../tasks/SDMMC/ff.c **** 					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 7465              		.loc 1 3059 0
 7466 2fa0 7B68     		ldr	r3, [r7, #4]
 7467 2fa2 93F80632 		ldrb	r3, [r3, #518]	@ zero_extendqisi2
 7468 2fa6 03F00203 		and	r3, r3, #2
 7469 2faa 002B     		cmp	r3, #0
 7470 2fac 0DD0     		beq	.L449
3060:../tasks/SDMMC/ff.c **** 						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 7471              		.loc 1 3060 0
 7472 2fae 7B68     		ldr	r3, [r7, #4]
 7473 2fb0 D3F80032 		ldr	r3, [r3, #512]
 7474 2fb4 1846     		mov	r0, r3
 7475 2fb6 B96A     		ldr	r1, [r7, #40]
 7476 2fb8 FDF7D6FD 		bl	create_chain
 7477 2fbc B862     		str	r0, [r7, #40]
3061:../tasks/SDMMC/ff.c **** 						if (clst == 0) {				/* When disk gets full, clip file size */
 7478              		.loc 1 3061 0
 7479 2fbe BB6A     		ldr	r3, [r7, #40]
 7480 2fc0 002B     		cmp	r3, #0
 7481 2fc2 0AD1     		bne	.L450
3062:../tasks/SDMMC/ff.c **** 							ofs = bcs; break;
 7482              		.loc 1 3062 0
 7483 2fc4 FB68     		ldr	r3, [r7, #12]
 7484 2fc6 3B60     		str	r3, [r7]
 7485 2fc8 36E0     		b	.L451
 7486              	.L449:
3063:../tasks/SDMMC/ff.c **** 						}
3064:../tasks/SDMMC/ff.c **** 					} else
3065:../tasks/SDMMC/ff.c **** #endif
3066:../tasks/SDMMC/ff.c **** 						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 7487              		.loc 1 3066 0
 7488 2fca 7B68     		ldr	r3, [r7, #4]
 7489 2fcc D3F80032 		ldr	r3, [r3, #512]
 7490 2fd0 1846     		mov	r0, r3
 7491 2fd2 B96A     		ldr	r1, [r7, #40]
 7492 2fd4 FFF7FEFF 		bl	get_fat
 7493 2fd8 B862     		str	r0, [r7, #40]
 7494              	.L450:
3067:../tasks/SDMMC/ff.c **** 					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 7495              		.loc 1 3067 0
 7496 2fda BB6A     		ldr	r3, [r7, #40]
 7497 2fdc B3F1FF3F 		cmp	r3, #-1
 7498 2fe0 05D1     		bne	.L452
 7499              		.loc 1 3067 0 is_stmt 0 discriminator 1
 7500 2fe2 7B68     		ldr	r3, [r7, #4]
 7501 2fe4 0122     		movs	r2, #1
 7502 2fe6 83F80722 		strb	r2, [r3, #519]
 7503 2fea 0123     		movs	r3, #1
 7504 2fec AEE0     		b	.L422
 7505              	.L452:
3068:../tasks/SDMMC/ff.c **** 					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 7506              		.loc 1 3068 0 is_stmt 1
 7507 2fee BB6A     		ldr	r3, [r7, #40]
 7508 2ff0 012B     		cmp	r3, #1
 7509 2ff2 07D9     		bls	.L453
 7510              		.loc 1 3068 0 is_stmt 0 discriminator 2
 7511 2ff4 7B68     		ldr	r3, [r7, #4]
 7512 2ff6 D3F80032 		ldr	r3, [r3, #512]
 7513 2ffa D3F81822 		ldr	r2, [r3, #536]
 7514 2ffe BB6A     		ldr	r3, [r7, #40]
 7515 3000 9A42     		cmp	r2, r3
 7516 3002 05D8     		bhi	.L454
 7517              	.L453:
 7518              		.loc 1 3068 0 discriminator 1
 7519 3004 7B68     		ldr	r3, [r7, #4]
 7520 3006 0222     		movs	r2, #2
 7521 3008 83F80722 		strb	r2, [r3, #519]
 7522 300c 0223     		movs	r3, #2
 7523 300e 9DE0     		b	.L422
 7524              	.L454:
3069:../tasks/SDMMC/ff.c **** 					fp->clust = clst;
 7525              		.loc 1 3069 0 is_stmt 1
 7526 3010 7B68     		ldr	r3, [r7, #4]
 7527 3012 BA6A     		ldr	r2, [r7, #40]
 7528 3014 C3F81422 		str	r2, [r3, #532]
3070:../tasks/SDMMC/ff.c **** 					fp->fptr += bcs;
 7529              		.loc 1 3070 0
 7530 3018 7B68     		ldr	r3, [r7, #4]
 7531 301a D3F80822 		ldr	r2, [r3, #520]
 7532 301e FB68     		ldr	r3, [r7, #12]
 7533 3020 1A44     		add	r2, r2, r3
 7534 3022 7B68     		ldr	r3, [r7, #4]
 7535 3024 C3F80822 		str	r2, [r3, #520]
3071:../tasks/SDMMC/ff.c **** 					ofs -= bcs;
 7536              		.loc 1 3071 0
 7537 3028 3A68     		ldr	r2, [r7]
 7538 302a FB68     		ldr	r3, [r7, #12]
 7539 302c D31A     		subs	r3, r2, r3
 7540 302e 3B60     		str	r3, [r7]
 7541              	.L448:
3057:../tasks/SDMMC/ff.c **** #if !_FS_READONLY
 7542              		.loc 1 3057 0 discriminator 1
 7543 3030 3A68     		ldr	r2, [r7]
 7544 3032 FB68     		ldr	r3, [r7, #12]
 7545 3034 9A42     		cmp	r2, r3
 7546 3036 B3D8     		bhi	.L455
 7547              	.L451:
3072:../tasks/SDMMC/ff.c **** 				}
3073:../tasks/SDMMC/ff.c **** 				fp->fptr += ofs;
 7548              		.loc 1 3073 0
 7549 3038 7B68     		ldr	r3, [r7, #4]
 7550 303a D3F80822 		ldr	r2, [r3, #520]
 7551 303e 3B68     		ldr	r3, [r7]
 7552 3040 1A44     		add	r2, r2, r3
 7553 3042 7B68     		ldr	r3, [r7, #4]
 7554 3044 C3F80822 		str	r2, [r3, #520]
3074:../tasks/SDMMC/ff.c **** 				if (ofs % SS(fp->fs)) {
 7555              		.loc 1 3074 0
 7556 3048 3B68     		ldr	r3, [r7]
 7557 304a C3F30803 		ubfx	r3, r3, #0, #9
 7558 304e 002B     		cmp	r3, #0
 7559 3050 15D0     		beq	.L442
3075:../tasks/SDMMC/ff.c **** 					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 7560              		.loc 1 3075 0
 7561 3052 7B68     		ldr	r3, [r7, #4]
 7562 3054 D3F80032 		ldr	r3, [r3, #512]
 7563 3058 1846     		mov	r0, r3
 7564 305a B96A     		ldr	r1, [r7, #40]
 7565 305c FFF7FEFF 		bl	clust2sect
 7566 3060 7862     		str	r0, [r7, #36]
3076:../tasks/SDMMC/ff.c **** 					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 7567              		.loc 1 3076 0
 7568 3062 7B6A     		ldr	r3, [r7, #36]
 7569 3064 002B     		cmp	r3, #0
 7570 3066 05D1     		bne	.L456
 7571              		.loc 1 3076 0 is_stmt 0 discriminator 1
 7572 3068 7B68     		ldr	r3, [r7, #4]
 7573 306a 0222     		movs	r2, #2
 7574 306c 83F80722 		strb	r2, [r3, #519]
 7575 3070 0223     		movs	r3, #2
 7576 3072 6BE0     		b	.L422
 7577              	.L456:
3077:../tasks/SDMMC/ff.c **** 					nsect += ofs / SS(fp->fs);
 7578              		.loc 1 3077 0 is_stmt 1
 7579 3074 3B68     		ldr	r3, [r7]
 7580 3076 5B0A     		lsrs	r3, r3, #9
 7581 3078 7A6A     		ldr	r2, [r7, #36]
 7582 307a 1344     		add	r3, r3, r2
 7583 307c 7B62     		str	r3, [r7, #36]
 7584              	.L442:
3078:../tasks/SDMMC/ff.c **** 				}
3079:../tasks/SDMMC/ff.c **** 			}
3080:../tasks/SDMMC/ff.c **** 		}
3081:../tasks/SDMMC/ff.c **** 		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 7585              		.loc 1 3081 0
 7586 307e 7B68     		ldr	r3, [r7, #4]
 7587 3080 D3F80832 		ldr	r3, [r3, #520]
 7588 3084 C3F30803 		ubfx	r3, r3, #0, #9
 7589 3088 002B     		cmp	r3, #0
 7590 308a 46D0     		beq	.L457
 7591              		.loc 1 3081 0 is_stmt 0 discriminator 1
 7592 308c 7B68     		ldr	r3, [r7, #4]
 7593 308e D3F81822 		ldr	r2, [r3, #536]
 7594 3092 7B6A     		ldr	r3, [r7, #36]
 7595 3094 9A42     		cmp	r2, r3
 7596 3096 40D0     		beq	.L457
3082:../tasks/SDMMC/ff.c **** #if !_FS_TINY
3083:../tasks/SDMMC/ff.c **** #if !_FS_READONLY
3084:../tasks/SDMMC/ff.c **** 			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 7597              		.loc 1 3084 0 is_stmt 1
 7598 3098 7B68     		ldr	r3, [r7, #4]
 7599 309a 93F80632 		ldrb	r3, [r3, #518]	@ zero_extendqisi2
 7600 309e 03F04003 		and	r3, r3, #64
 7601 30a2 002B     		cmp	r3, #0
 7602 30a4 20D0     		beq	.L458
3085:../tasks/SDMMC/ff.c **** 				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1))
 7603              		.loc 1 3085 0
 7604 30a6 7B68     		ldr	r3, [r7, #4]
 7605 30a8 D3F80032 		ldr	r3, [r3, #512]
 7606 30ac 93F80112 		ldrb	r1, [r3, #513]	@ zero_extendqisi2
 7607 30b0 7A68     		ldr	r2, [r7, #4]
 7608 30b2 7B68     		ldr	r3, [r7, #4]
 7609 30b4 D3F81832 		ldr	r3, [r3, #536]
 7610 30b8 0846     		mov	r0, r1
 7611 30ba 1146     		mov	r1, r2
 7612 30bc 1A46     		mov	r2, r3
 7613 30be 0123     		movs	r3, #1
 7614 30c0 FFF7FEFF 		bl	disk_write
 7615 30c4 0346     		mov	r3, r0
 7616 30c6 002B     		cmp	r3, #0
 7617 30c8 05D0     		beq	.L459
3086:../tasks/SDMMC/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
 7618              		.loc 1 3086 0
 7619 30ca 7B68     		ldr	r3, [r7, #4]
 7620 30cc 0122     		movs	r2, #1
 7621 30ce 83F80722 		strb	r2, [r3, #519]
 7622 30d2 0123     		movs	r3, #1
 7623 30d4 3AE0     		b	.L422
 7624              	.L459:
3087:../tasks/SDMMC/ff.c **** 				fp->flag &= ~FA__DIRTY;
 7625              		.loc 1 3087 0
 7626 30d6 7B68     		ldr	r3, [r7, #4]
 7627 30d8 93F80632 		ldrb	r3, [r3, #518]	@ zero_extendqisi2
 7628 30dc 23F04003 		bic	r3, r3, #64
 7629 30e0 DAB2     		uxtb	r2, r3
 7630 30e2 7B68     		ldr	r3, [r7, #4]
 7631 30e4 83F80622 		strb	r2, [r3, #518]
 7632              	.L458:
3088:../tasks/SDMMC/ff.c **** 			}
3089:../tasks/SDMMC/ff.c **** #endif
3090:../tasks/SDMMC/ff.c **** 			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1))	/* Fill sector cache */
 7633              		.loc 1 3090 0
 7634 30e8 7B68     		ldr	r3, [r7, #4]
 7635 30ea D3F80032 		ldr	r3, [r3, #512]
 7636 30ee 93F80122 		ldrb	r2, [r3, #513]	@ zero_extendqisi2
 7637 30f2 7B68     		ldr	r3, [r7, #4]
 7638 30f4 1046     		mov	r0, r2
 7639 30f6 1946     		mov	r1, r3
 7640 30f8 7A6A     		ldr	r2, [r7, #36]
 7641 30fa 0123     		movs	r3, #1
 7642 30fc FFF7FEFF 		bl	disk_read
 7643 3100 0346     		mov	r3, r0
 7644 3102 002B     		cmp	r3, #0
 7645 3104 05D0     		beq	.L460
3091:../tasks/SDMMC/ff.c **** 				ABORT(fp->fs, FR_DISK_ERR);
 7646              		.loc 1 3091 0
 7647 3106 7B68     		ldr	r3, [r7, #4]
 7648 3108 0122     		movs	r2, #1
 7649 310a 83F80722 		strb	r2, [r3, #519]
 7650 310e 0123     		movs	r3, #1
 7651 3110 1CE0     		b	.L422
 7652              	.L460:
3092:../tasks/SDMMC/ff.c **** #endif
3093:../tasks/SDMMC/ff.c **** 			fp->dsect = nsect;
 7653              		.loc 1 3093 0
 7654 3112 7B68     		ldr	r3, [r7, #4]
 7655 3114 7A6A     		ldr	r2, [r7, #36]
 7656 3116 C3F81822 		str	r2, [r3, #536]
 7657              	.L457:
3094:../tasks/SDMMC/ff.c **** 		}
3095:../tasks/SDMMC/ff.c **** #if !_FS_READONLY
3096:../tasks/SDMMC/ff.c **** 		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 7658              		.loc 1 3096 0
 7659 311a 7B68     		ldr	r3, [r7, #4]
 7660 311c D3F80822 		ldr	r2, [r3, #520]
 7661 3120 7B68     		ldr	r3, [r7, #4]
 7662 3122 D3F80C32 		ldr	r3, [r3, #524]
 7663 3126 9A42     		cmp	r2, r3
 7664 3128 0ED9     		bls	.L440
3097:../tasks/SDMMC/ff.c **** 			fp->fsize = fp->fptr;
 7665              		.loc 1 3097 0
 7666 312a 7B68     		ldr	r3, [r7, #4]
 7667 312c D3F80822 		ldr	r2, [r3, #520]
 7668 3130 7B68     		ldr	r3, [r7, #4]
 7669 3132 C3F80C22 		str	r2, [r3, #524]
3098:../tasks/SDMMC/ff.c **** 			fp->flag |= FA__WRITTEN;
 7670              		.loc 1 3098 0
 7671 3136 7B68     		ldr	r3, [r7, #4]
 7672 3138 93F80632 		ldrb	r3, [r3, #518]	@ zero_extendqisi2
 7673 313c 43F02003 		orr	r3, r3, #32
 7674 3140 DAB2     		uxtb	r2, r3
 7675 3142 7B68     		ldr	r3, [r7, #4]
 7676 3144 83F80622 		strb	r2, [r3, #518]
 7677              	.L440:
 7678              	.LBE9:
3099:../tasks/SDMMC/ff.c **** 		}
3100:../tasks/SDMMC/ff.c **** #endif
3101:../tasks/SDMMC/ff.c **** 	}
3102:../tasks/SDMMC/ff.c **** 
3103:../tasks/SDMMC/ff.c **** 	LEAVE_FF(fp->fs, res);
 7679              		.loc 1 3103 0
 7680 3148 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 7681              	.L422:
3104:../tasks/SDMMC/ff.c **** }
 7682              		.loc 1 3104 0
 7683 314c 1846     		mov	r0, r3
 7684 314e 4037     		adds	r7, r7, #64
 7685 3150 BD46     		mov	sp, r7
 7686              		@ sp needed
 7687 3152 80BD     		pop	{r7, pc}
 7688              		.cfi_endproc
 7689              	.LFE97:
 7691              		.align	2
 7692              		.global	f_opendir
 7693              		.thumb
 7694              		.thumb_func
 7696              	f_opendir:
 7697              	.LFB98:
3105:../tasks/SDMMC/ff.c **** 
3106:../tasks/SDMMC/ff.c **** 
3107:../tasks/SDMMC/ff.c **** 
3108:../tasks/SDMMC/ff.c **** #if _FS_MINIMIZE <= 1
3109:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
3110:../tasks/SDMMC/ff.c **** /* Create a Directory Object                                             */
3111:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
3112:../tasks/SDMMC/ff.c **** 
3113:../tasks/SDMMC/ff.c **** FRESULT f_opendir (
3114:../tasks/SDMMC/ff.c **** 	DIR* dp,			/* Pointer to directory object to create */
3115:../tasks/SDMMC/ff.c **** 	const TCHAR* path	/* Pointer to the directory path */
3116:../tasks/SDMMC/ff.c **** )
3117:../tasks/SDMMC/ff.c **** {
 7698              		.loc 1 3117 0
 7699              		.cfi_startproc
 7700              		@ args = 0, pretend = 0, frame = 32
 7701              		@ frame_needed = 1, uses_anonymous_args = 0
 7702 3154 80B5     		push	{r7, lr}
 7703              		.cfi_def_cfa_offset 8
 7704              		.cfi_offset 7, -8
 7705              		.cfi_offset 14, -4
 7706 3156 88B0     		sub	sp, sp, #32
 7707              		.cfi_def_cfa_offset 40
 7708 3158 00AF     		add	r7, sp, #0
 7709              		.cfi_def_cfa_register 7
 7710 315a 7860     		str	r0, [r7, #4]
 7711 315c 3960     		str	r1, [r7]
3118:../tasks/SDMMC/ff.c **** 	FRESULT res;
3119:../tasks/SDMMC/ff.c **** 	FATFS* fs;
3120:../tasks/SDMMC/ff.c **** 	DEF_NAMEBUF;
3121:../tasks/SDMMC/ff.c **** 
3122:../tasks/SDMMC/ff.c **** 
3123:../tasks/SDMMC/ff.c **** 	if (!dp) return FR_INVALID_OBJECT;
 7712              		.loc 1 3123 0
 7713 315e 7B68     		ldr	r3, [r7, #4]
 7714 3160 002B     		cmp	r3, #0
 7715 3162 01D1     		bne	.L462
 7716              		.loc 1 3123 0 is_stmt 0 discriminator 1
 7717 3164 0923     		movs	r3, #9
 7718 3166 74E0     		b	.L471
 7719              	.L462:
3124:../tasks/SDMMC/ff.c **** 
3125:../tasks/SDMMC/ff.c **** 	/* Get logical drive number */
3126:../tasks/SDMMC/ff.c **** 	res = find_volume(&fs, &path, 0);
 7720              		.loc 1 3126 0 is_stmt 1
 7721 3168 07F11802 		add	r2, r7, #24
 7722 316c 3B46     		mov	r3, r7
 7723 316e 1046     		mov	r0, r2
 7724 3170 1946     		mov	r1, r3
 7725 3172 0022     		movs	r2, #0
 7726 3174 FEF794FB 		bl	find_volume
 7727 3178 0346     		mov	r3, r0
 7728 317a FB77     		strb	r3, [r7, #31]
3127:../tasks/SDMMC/ff.c **** 	if (res == FR_OK) {
 7729              		.loc 1 3127 0
 7730 317c FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 7731 317e 002B     		cmp	r3, #0
 7732 3180 5FD1     		bne	.L464
3128:../tasks/SDMMC/ff.c **** 		dp->fs = fs;
 7733              		.loc 1 3128 0
 7734 3182 BA69     		ldr	r2, [r7, #24]
 7735 3184 7B68     		ldr	r3, [r7, #4]
 7736 3186 C3F80022 		str	r2, [r3, #512]
3129:../tasks/SDMMC/ff.c **** 		INIT_BUF(*dp);
 7737              		.loc 1 3129 0
 7738 318a 7B68     		ldr	r3, [r7, #4]
 7739 318c 07F10C02 		add	r2, r7, #12
 7740 3190 C3F81822 		str	r2, [r3, #536]
3130:../tasks/SDMMC/ff.c **** 		res = follow_path(dp, path);			/* Follow the path to the directory */
 7741              		.loc 1 3130 0
 7742 3194 3B68     		ldr	r3, [r7]
 7743 3196 7868     		ldr	r0, [r7, #4]
 7744 3198 1946     		mov	r1, r3
 7745 319a FEF78DFA 		bl	follow_path
 7746 319e 0346     		mov	r3, r0
 7747 31a0 FB77     		strb	r3, [r7, #31]
3131:../tasks/SDMMC/ff.c **** 		FREE_BUF();
3132:../tasks/SDMMC/ff.c **** 		if (res == FR_OK) {						/* Follow completed */
 7748              		.loc 1 3132 0
 7749 31a2 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 7750 31a4 002B     		cmp	r3, #0
 7751 31a6 47D1     		bne	.L465
3133:../tasks/SDMMC/ff.c **** 			if (dp->dir) {						/* It is not the origin directory itself */
 7752              		.loc 1 3133 0
 7753 31a8 7B68     		ldr	r3, [r7, #4]
 7754 31aa D3F81432 		ldr	r3, [r3, #532]
 7755 31ae 002B     		cmp	r3, #0
 7756 31b0 17D0     		beq	.L466
3134:../tasks/SDMMC/ff.c **** 				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
 7757              		.loc 1 3134 0
 7758 31b2 7B68     		ldr	r3, [r7, #4]
 7759 31b4 D3F81432 		ldr	r3, [r3, #532]
 7760 31b8 0B33     		adds	r3, r3, #11
 7761 31ba 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7762 31bc 03F01003 		and	r3, r3, #16
 7763 31c0 002B     		cmp	r3, #0
 7764 31c2 0CD0     		beq	.L467
3135:../tasks/SDMMC/ff.c **** 					dp->sclust = ld_clust(fs, dp->dir);
 7765              		.loc 1 3135 0
 7766 31c4 BA69     		ldr	r2, [r7, #24]
 7767 31c6 7B68     		ldr	r3, [r7, #4]
 7768 31c8 D3F81432 		ldr	r3, [r3, #532]
 7769 31cc 1046     		mov	r0, r2
 7770 31ce 1946     		mov	r1, r3
 7771 31d0 FDF772FF 		bl	ld_clust
 7772 31d4 0246     		mov	r2, r0
 7773 31d6 7B68     		ldr	r3, [r7, #4]
 7774 31d8 C3F80822 		str	r2, [r3, #520]
 7775 31dc 01E0     		b	.L466
 7776              	.L467:
3136:../tasks/SDMMC/ff.c **** 				else							/* The object is a file */
3137:../tasks/SDMMC/ff.c **** 					res = FR_NO_PATH;
 7777              		.loc 1 3137 0
 7778 31de 0523     		movs	r3, #5
 7779 31e0 FB77     		strb	r3, [r7, #31]
 7780              	.L466:
3138:../tasks/SDMMC/ff.c **** 			}
3139:../tasks/SDMMC/ff.c **** 			if (res == FR_OK) {
 7781              		.loc 1 3139 0
 7782 31e2 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 7783 31e4 002B     		cmp	r3, #0
 7784 31e6 27D1     		bne	.L465
3140:../tasks/SDMMC/ff.c **** 				dp->id = fs->id;
 7785              		.loc 1 3140 0
 7786 31e8 BB69     		ldr	r3, [r7, #24]
 7787 31ea B3F80622 		ldrh	r2, [r3, #518]
 7788 31ee 7B68     		ldr	r3, [r7, #4]
 7789 31f0 A3F80422 		strh	r2, [r3, #516]	@ movhi
3141:../tasks/SDMMC/ff.c **** 				res = dir_sdi(dp, 0);			/* Rewind directory */
 7790              		.loc 1 3141 0
 7791 31f4 7868     		ldr	r0, [r7, #4]
 7792 31f6 0021     		movs	r1, #0
 7793 31f8 FDF786FD 		bl	dir_sdi
 7794 31fc 0346     		mov	r3, r0
 7795 31fe FB77     		strb	r3, [r7, #31]
3142:../tasks/SDMMC/ff.c **** #if _FS_LOCK
3143:../tasks/SDMMC/ff.c **** 				if (res == FR_OK) {
 7796              		.loc 1 3143 0
 7797 3200 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 7798 3202 002B     		cmp	r3, #0
 7799 3204 18D1     		bne	.L465
3144:../tasks/SDMMC/ff.c **** 					if (dp->sclust) {
 7800              		.loc 1 3144 0
 7801 3206 7B68     		ldr	r3, [r7, #4]
 7802 3208 D3F80832 		ldr	r3, [r3, #520]
 7803 320c 002B     		cmp	r3, #0
 7804 320e 0FD0     		beq	.L468
3145:../tasks/SDMMC/ff.c **** 						dp->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 7805              		.loc 1 3145 0
 7806 3210 7868     		ldr	r0, [r7, #4]
 7807 3212 0021     		movs	r1, #0
 7808 3214 FDF710F8 		bl	inc_lock
 7809 3218 0246     		mov	r2, r0
 7810 321a 7B68     		ldr	r3, [r7, #4]
 7811 321c C3F81C22 		str	r2, [r3, #540]
3146:../tasks/SDMMC/ff.c **** 						if (!dp->lockid)
 7812              		.loc 1 3146 0
 7813 3220 7B68     		ldr	r3, [r7, #4]
 7814 3222 D3F81C32 		ldr	r3, [r3, #540]
 7815 3226 002B     		cmp	r3, #0
 7816 3228 06D1     		bne	.L465
3147:../tasks/SDMMC/ff.c **** 							res = FR_TOO_MANY_OPEN_FILES;
 7817              		.loc 1 3147 0
 7818 322a 1223     		movs	r3, #18
 7819 322c FB77     		strb	r3, [r7, #31]
 7820 322e 03E0     		b	.L465
 7821              	.L468:
3148:../tasks/SDMMC/ff.c **** 					} else {
3149:../tasks/SDMMC/ff.c **** 						dp->lockid = 0;	/* Root directory need not to be locked */
 7822              		.loc 1 3149 0
 7823 3230 7B68     		ldr	r3, [r7, #4]
 7824 3232 0022     		movs	r2, #0
 7825 3234 C3F81C22 		str	r2, [r3, #540]
 7826              	.L465:
3150:../tasks/SDMMC/ff.c **** 					}
3151:../tasks/SDMMC/ff.c **** 				}
3152:../tasks/SDMMC/ff.c **** #endif
3153:../tasks/SDMMC/ff.c **** 			}
3154:../tasks/SDMMC/ff.c **** 		}
3155:../tasks/SDMMC/ff.c **** 		if (res == FR_NO_FILE) res = FR_NO_PATH;
 7827              		.loc 1 3155 0
 7828 3238 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 7829 323a 042B     		cmp	r3, #4
 7830 323c 01D1     		bne	.L464
 7831              		.loc 1 3155 0 is_stmt 0 discriminator 1
 7832 323e 0523     		movs	r3, #5
 7833 3240 FB77     		strb	r3, [r7, #31]
 7834              	.L464:
3156:../tasks/SDMMC/ff.c **** 	}
3157:../tasks/SDMMC/ff.c **** 	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */
 7835              		.loc 1 3157 0 is_stmt 1
 7836 3242 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 7837 3244 002B     		cmp	r3, #0
 7838 3246 03D0     		beq	.L470
 7839              		.loc 1 3157 0 is_stmt 0 discriminator 1
 7840 3248 7B68     		ldr	r3, [r7, #4]
 7841 324a 0022     		movs	r2, #0
 7842 324c C3F80022 		str	r2, [r3, #512]
 7843              	.L470:
3158:../tasks/SDMMC/ff.c **** 
3159:../tasks/SDMMC/ff.c **** 	LEAVE_FF(fs, res);
 7844              		.loc 1 3159 0 is_stmt 1
 7845 3250 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 7846              	.L471:
3160:../tasks/SDMMC/ff.c **** }
 7847              		.loc 1 3160 0
 7848 3252 1846     		mov	r0, r3
 7849 3254 2037     		adds	r7, r7, #32
 7850 3256 BD46     		mov	sp, r7
 7851              		@ sp needed
 7852 3258 80BD     		pop	{r7, pc}
 7853              		.cfi_endproc
 7854              	.LFE98:
 7856 325a 00BF     		.align	2
 7857              		.global	f_closedir
 7858              		.thumb
 7859              		.thumb_func
 7861              	f_closedir:
 7862              	.LFB99:
3161:../tasks/SDMMC/ff.c **** 
3162:../tasks/SDMMC/ff.c **** 
3163:../tasks/SDMMC/ff.c **** 
3164:../tasks/SDMMC/ff.c **** 
3165:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
3166:../tasks/SDMMC/ff.c **** /* Close Directory                                                       */
3167:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
3168:../tasks/SDMMC/ff.c **** 
3169:../tasks/SDMMC/ff.c **** FRESULT f_closedir (
3170:../tasks/SDMMC/ff.c ****     DIR *dp     /* Pointer to the directory object to be closed */
3171:../tasks/SDMMC/ff.c **** )
3172:../tasks/SDMMC/ff.c **** {
 7863              		.loc 1 3172 0
 7864              		.cfi_startproc
 7865              		@ args = 0, pretend = 0, frame = 16
 7866              		@ frame_needed = 1, uses_anonymous_args = 0
 7867 325c 80B5     		push	{r7, lr}
 7868              		.cfi_def_cfa_offset 8
 7869              		.cfi_offset 7, -8
 7870              		.cfi_offset 14, -4
 7871 325e 84B0     		sub	sp, sp, #16
 7872              		.cfi_def_cfa_offset 24
 7873 3260 00AF     		add	r7, sp, #0
 7874              		.cfi_def_cfa_register 7
 7875 3262 7860     		str	r0, [r7, #4]
3173:../tasks/SDMMC/ff.c ****     FRESULT res;
3174:../tasks/SDMMC/ff.c **** 
3175:../tasks/SDMMC/ff.c **** 
3176:../tasks/SDMMC/ff.c ****     res = validate(dp);
 7876              		.loc 1 3176 0
 7877 3264 7868     		ldr	r0, [r7, #4]
 7878 3266 FEF7F1FD 		bl	validate
 7879 326a 0346     		mov	r3, r0
 7880 326c FB73     		strb	r3, [r7, #15]
3177:../tasks/SDMMC/ff.c ****     if (res == FR_OK) {
 7881              		.loc 1 3177 0
 7882 326e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 7883 3270 002B     		cmp	r3, #0
 7884 3272 13D1     		bne	.L473
3178:../tasks/SDMMC/ff.c **** #if _FS_REENTRANT
3179:../tasks/SDMMC/ff.c ****         FATFS *fs = dp->fs;
3180:../tasks/SDMMC/ff.c **** #endif
3181:../tasks/SDMMC/ff.c **** #if _FS_LOCK
3182:../tasks/SDMMC/ff.c ****         if (dp->lockid)             /* Decrement sub-directory open counter */
 7885              		.loc 1 3182 0
 7886 3274 7B68     		ldr	r3, [r7, #4]
 7887 3276 D3F81C32 		ldr	r3, [r3, #540]
 7888 327a 002B     		cmp	r3, #0
 7889 327c 07D0     		beq	.L474
3183:../tasks/SDMMC/ff.c ****             res = dec_lock(dp->lockid);
 7890              		.loc 1 3183 0
 7891 327e 7B68     		ldr	r3, [r7, #4]
 7892 3280 D3F81C32 		ldr	r3, [r3, #540]
 7893 3284 1846     		mov	r0, r3
 7894 3286 FDF7ADF8 		bl	dec_lock
 7895 328a 0346     		mov	r3, r0
 7896 328c FB73     		strb	r3, [r7, #15]
 7897              	.L474:
3184:../tasks/SDMMC/ff.c ****         if (res == FR_OK)
 7898              		.loc 1 3184 0
 7899 328e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 7900 3290 002B     		cmp	r3, #0
 7901 3292 03D1     		bne	.L473
3185:../tasks/SDMMC/ff.c **** #endif
3186:../tasks/SDMMC/ff.c ****             dp->fs = 0;             /* Invalidate directory object */
 7902              		.loc 1 3186 0
 7903 3294 7B68     		ldr	r3, [r7, #4]
 7904 3296 0022     		movs	r2, #0
 7905 3298 C3F80022 		str	r2, [r3, #512]
 7906              	.L473:
3187:../tasks/SDMMC/ff.c **** #if _FS_REENTRANT
3188:../tasks/SDMMC/ff.c ****         unlock_fs(fs, FR_OK);       /* Unlock volume */
3189:../tasks/SDMMC/ff.c **** #endif
3190:../tasks/SDMMC/ff.c ****     }
3191:../tasks/SDMMC/ff.c ****     return res;
 7907              		.loc 1 3191 0
 7908 329c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
3192:../tasks/SDMMC/ff.c **** }
 7909              		.loc 1 3192 0
 7910 329e 1846     		mov	r0, r3
 7911 32a0 1037     		adds	r7, r7, #16
 7912 32a2 BD46     		mov	sp, r7
 7913              		@ sp needed
 7914 32a4 80BD     		pop	{r7, pc}
 7915              		.cfi_endproc
 7916              	.LFE99:
 7918 32a6 00BF     		.align	2
 7919              		.global	f_readdir
 7920              		.thumb
 7921              		.thumb_func
 7923              	f_readdir:
 7924              	.LFB100:
3193:../tasks/SDMMC/ff.c **** 
3194:../tasks/SDMMC/ff.c **** 
3195:../tasks/SDMMC/ff.c **** 
3196:../tasks/SDMMC/ff.c **** 
3197:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
3198:../tasks/SDMMC/ff.c **** /* Read Directory Entries in Sequence                                    */
3199:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
3200:../tasks/SDMMC/ff.c **** 
3201:../tasks/SDMMC/ff.c **** FRESULT f_readdir (
3202:../tasks/SDMMC/ff.c **** 	DIR* dp,			/* Pointer to the open directory object */
3203:../tasks/SDMMC/ff.c **** 	FILINFO* fno		/* Pointer to file information to return */
3204:../tasks/SDMMC/ff.c **** )
3205:../tasks/SDMMC/ff.c **** {
 7925              		.loc 1 3205 0
 7926              		.cfi_startproc
 7927              		@ args = 0, pretend = 0, frame = 24
 7928              		@ frame_needed = 1, uses_anonymous_args = 0
 7929 32a8 80B5     		push	{r7, lr}
 7930              		.cfi_def_cfa_offset 8
 7931              		.cfi_offset 7, -8
 7932              		.cfi_offset 14, -4
 7933 32aa 86B0     		sub	sp, sp, #24
 7934              		.cfi_def_cfa_offset 32
 7935 32ac 00AF     		add	r7, sp, #0
 7936              		.cfi_def_cfa_register 7
 7937 32ae 7860     		str	r0, [r7, #4]
 7938 32b0 3960     		str	r1, [r7]
3206:../tasks/SDMMC/ff.c **** 	FRESULT res;
3207:../tasks/SDMMC/ff.c **** 	DEF_NAMEBUF;
3208:../tasks/SDMMC/ff.c **** 
3209:../tasks/SDMMC/ff.c **** 
3210:../tasks/SDMMC/ff.c **** 	res = validate(dp);						/* Check validity of the object */
 7939              		.loc 1 3210 0
 7940 32b2 7868     		ldr	r0, [r7, #4]
 7941 32b4 FEF7CAFD 		bl	validate
 7942 32b8 0346     		mov	r3, r0
 7943 32ba FB75     		strb	r3, [r7, #23]
3211:../tasks/SDMMC/ff.c **** 	if (res == FR_OK) {
 7944              		.loc 1 3211 0
 7945 32bc FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 7946 32be 002B     		cmp	r3, #0
 7947 32c0 33D1     		bne	.L477
3212:../tasks/SDMMC/ff.c **** 		if (!fno) {
 7948              		.loc 1 3212 0
 7949 32c2 3B68     		ldr	r3, [r7]
 7950 32c4 002B     		cmp	r3, #0
 7951 32c6 06D1     		bne	.L478
3213:../tasks/SDMMC/ff.c **** 			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 7952              		.loc 1 3213 0
 7953 32c8 7868     		ldr	r0, [r7, #4]
 7954 32ca 0021     		movs	r1, #0
 7955 32cc FDF71CFD 		bl	dir_sdi
 7956 32d0 0346     		mov	r3, r0
 7957 32d2 FB75     		strb	r3, [r7, #23]
 7958 32d4 29E0     		b	.L477
 7959              	.L478:
3214:../tasks/SDMMC/ff.c **** 		} else {
3215:../tasks/SDMMC/ff.c **** 			INIT_BUF(*dp);
 7960              		.loc 1 3215 0
 7961 32d6 7B68     		ldr	r3, [r7, #4]
 7962 32d8 07F10802 		add	r2, r7, #8
 7963 32dc C3F81822 		str	r2, [r3, #536]
3216:../tasks/SDMMC/ff.c **** 			res = dir_read(dp, 0);			/* Read an item */
 7964              		.loc 1 3216 0
 7965 32e0 7868     		ldr	r0, [r7, #4]
 7966 32e2 0021     		movs	r1, #0
 7967 32e4 FDF788FF 		bl	dir_read
 7968 32e8 0346     		mov	r3, r0
 7969 32ea FB75     		strb	r3, [r7, #23]
3217:../tasks/SDMMC/ff.c **** 			if (res == FR_NO_FILE) {		/* Reached end of directory */
 7970              		.loc 1 3217 0
 7971 32ec FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 7972 32ee 042B     		cmp	r3, #4
 7973 32f0 05D1     		bne	.L479
3218:../tasks/SDMMC/ff.c **** 				dp->sect = 0;
 7974              		.loc 1 3218 0
 7975 32f2 7B68     		ldr	r3, [r7, #4]
 7976 32f4 0022     		movs	r2, #0
 7977 32f6 C3F81022 		str	r2, [r3, #528]
3219:../tasks/SDMMC/ff.c **** 				res = FR_OK;
 7978              		.loc 1 3219 0
 7979 32fa 0023     		movs	r3, #0
 7980 32fc FB75     		strb	r3, [r7, #23]
 7981              	.L479:
3220:../tasks/SDMMC/ff.c **** 			}
3221:../tasks/SDMMC/ff.c **** 			if (res == FR_OK) {				/* A valid entry is found */
 7982              		.loc 1 3221 0
 7983 32fe FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 7984 3300 002B     		cmp	r3, #0
 7985 3302 12D1     		bne	.L477
3222:../tasks/SDMMC/ff.c **** 				get_fileinfo(dp, fno);		/* Get the object information */
 7986              		.loc 1 3222 0
 7987 3304 7868     		ldr	r0, [r7, #4]
 7988 3306 3968     		ldr	r1, [r7]
 7989 3308 FEF734F9 		bl	get_fileinfo
3223:../tasks/SDMMC/ff.c **** 				res = dir_next(dp, 0);		/* Increment index for next */
 7990              		.loc 1 3223 0
 7991 330c 7868     		ldr	r0, [r7, #4]
 7992 330e 0021     		movs	r1, #0
 7993 3310 FDF792FD 		bl	dir_next
 7994 3314 0346     		mov	r3, r0
 7995 3316 FB75     		strb	r3, [r7, #23]
3224:../tasks/SDMMC/ff.c **** 				if (res == FR_NO_FILE) {
 7996              		.loc 1 3224 0
 7997 3318 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 7998 331a 042B     		cmp	r3, #4
 7999 331c 05D1     		bne	.L477
3225:../tasks/SDMMC/ff.c **** 					dp->sect = 0;
 8000              		.loc 1 3225 0
 8001 331e 7B68     		ldr	r3, [r7, #4]
 8002 3320 0022     		movs	r2, #0
 8003 3322 C3F81022 		str	r2, [r3, #528]
3226:../tasks/SDMMC/ff.c **** 					res = FR_OK;
 8004              		.loc 1 3226 0
 8005 3326 0023     		movs	r3, #0
 8006 3328 FB75     		strb	r3, [r7, #23]
 8007              	.L477:
3227:../tasks/SDMMC/ff.c **** 				}
3228:../tasks/SDMMC/ff.c **** 			}
3229:../tasks/SDMMC/ff.c **** 			FREE_BUF();
3230:../tasks/SDMMC/ff.c **** 		}
3231:../tasks/SDMMC/ff.c **** 	}
3232:../tasks/SDMMC/ff.c **** 
3233:../tasks/SDMMC/ff.c **** 	LEAVE_FF(dp->fs, res);
 8008              		.loc 1 3233 0
 8009 332a FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
3234:../tasks/SDMMC/ff.c **** }
 8010              		.loc 1 3234 0
 8011 332c 1846     		mov	r0, r3
 8012 332e 1837     		adds	r7, r7, #24
 8013 3330 BD46     		mov	sp, r7
 8014              		@ sp needed
 8015 3332 80BD     		pop	{r7, pc}
 8016              		.cfi_endproc
 8017              	.LFE100:
 8019              		.align	2
 8020              		.global	f_stat
 8021              		.thumb
 8022              		.thumb_func
 8024              	f_stat:
 8025              	.LFB101:
3235:../tasks/SDMMC/ff.c **** 
3236:../tasks/SDMMC/ff.c **** 
3237:../tasks/SDMMC/ff.c **** 
3238:../tasks/SDMMC/ff.c **** #if _FS_MINIMIZE == 0
3239:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
3240:../tasks/SDMMC/ff.c **** /* Get File Status                                                       */
3241:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
3242:../tasks/SDMMC/ff.c **** 
3243:../tasks/SDMMC/ff.c **** FRESULT f_stat (
3244:../tasks/SDMMC/ff.c **** 	const TCHAR* path,	/* Pointer to the file path */
3245:../tasks/SDMMC/ff.c **** 	FILINFO* fno		/* Pointer to file information to return */
3246:../tasks/SDMMC/ff.c **** )
3247:../tasks/SDMMC/ff.c **** {
 8026              		.loc 1 3247 0
 8027              		.cfi_startproc
 8028              		@ args = 0, pretend = 0, frame = 568
 8029              		@ frame_needed = 1, uses_anonymous_args = 0
 8030 3334 80B5     		push	{r7, lr}
 8031              		.cfi_def_cfa_offset 8
 8032              		.cfi_offset 7, -8
 8033              		.cfi_offset 14, -4
 8034 3336 ADF50E7D 		sub	sp, sp, #568
 8035              		.cfi_def_cfa_offset 576
 8036 333a 00AF     		add	r7, sp, #0
 8037              		.cfi_def_cfa_register 7
 8038 333c 3B1D     		adds	r3, r7, #4
 8039 333e 1860     		str	r0, [r3]
 8040 3340 3B46     		mov	r3, r7
 8041 3342 1960     		str	r1, [r3]
3248:../tasks/SDMMC/ff.c **** 	FRESULT res;
3249:../tasks/SDMMC/ff.c **** 	DIR dj;
3250:../tasks/SDMMC/ff.c **** 	DEF_NAMEBUF;
3251:../tasks/SDMMC/ff.c **** 
3252:../tasks/SDMMC/ff.c **** 
3253:../tasks/SDMMC/ff.c **** 	/* Get logical drive number */
3254:../tasks/SDMMC/ff.c **** 	res = find_volume(&dj.fs, &path, 0);
 8042              		.loc 1 3254 0
 8043 3344 07F11403 		add	r3, r7, #20
 8044 3348 03F50072 		add	r2, r3, #512
 8045 334c 3B1D     		adds	r3, r7, #4
 8046 334e 1046     		mov	r0, r2
 8047 3350 1946     		mov	r1, r3
 8048 3352 0022     		movs	r2, #0
 8049 3354 FEF7A4FA 		bl	find_volume
 8050 3358 0346     		mov	r3, r0
 8051 335a 87F83732 		strb	r3, [r7, #567]
3255:../tasks/SDMMC/ff.c **** 	if (res == FR_OK) {
 8052              		.loc 1 3255 0
 8053 335e 97F83732 		ldrb	r3, [r7, #567]	@ zero_extendqisi2
 8054 3362 002B     		cmp	r3, #0
 8055 3364 29D1     		bne	.L482
3256:../tasks/SDMMC/ff.c **** 		INIT_BUF(dj);
 8056              		.loc 1 3256 0
 8057 3366 07F11403 		add	r3, r7, #20
 8058 336a 07F10802 		add	r2, r7, #8
 8059 336e C3F81822 		str	r2, [r3, #536]
3257:../tasks/SDMMC/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
 8060              		.loc 1 3257 0
 8061 3372 3B1D     		adds	r3, r7, #4
 8062 3374 1B68     		ldr	r3, [r3]
 8063 3376 07F11402 		add	r2, r7, #20
 8064 337a 1046     		mov	r0, r2
 8065 337c 1946     		mov	r1, r3
 8066 337e FEF79BF9 		bl	follow_path
 8067 3382 0346     		mov	r3, r0
 8068 3384 87F83732 		strb	r3, [r7, #567]
3258:../tasks/SDMMC/ff.c **** 		if (res == FR_OK) {				/* Follow completed */
 8069              		.loc 1 3258 0
 8070 3388 97F83732 		ldrb	r3, [r7, #567]	@ zero_extendqisi2
 8071 338c 002B     		cmp	r3, #0
 8072 338e 14D1     		bne	.L482
3259:../tasks/SDMMC/ff.c **** 			if (dj.dir) {		/* Found an object */
 8073              		.loc 1 3259 0
 8074 3390 07F11403 		add	r3, r7, #20
 8075 3394 D3F81432 		ldr	r3, [r3, #532]
 8076 3398 002B     		cmp	r3, #0
 8077 339a 0BD0     		beq	.L483
3260:../tasks/SDMMC/ff.c **** 				if (fno) get_fileinfo(&dj, fno);
 8078              		.loc 1 3260 0
 8079 339c 3B46     		mov	r3, r7
 8080 339e 1B68     		ldr	r3, [r3]
 8081 33a0 002B     		cmp	r3, #0
 8082 33a2 0AD0     		beq	.L482
 8083              		.loc 1 3260 0 is_stmt 0 discriminator 1
 8084 33a4 07F11402 		add	r2, r7, #20
 8085 33a8 3B46     		mov	r3, r7
 8086 33aa 1046     		mov	r0, r2
 8087 33ac 1968     		ldr	r1, [r3]
 8088 33ae FEF7E1F8 		bl	get_fileinfo
 8089 33b2 02E0     		b	.L482
 8090              	.L483:
3261:../tasks/SDMMC/ff.c **** 			} else {			/* It is root directory */
3262:../tasks/SDMMC/ff.c **** 				res = FR_INVALID_NAME;
 8091              		.loc 1 3262 0 is_stmt 1
 8092 33b4 0623     		movs	r3, #6
 8093 33b6 87F83732 		strb	r3, [r7, #567]
 8094              	.L482:
3263:../tasks/SDMMC/ff.c **** 			}
3264:../tasks/SDMMC/ff.c **** 		}
3265:../tasks/SDMMC/ff.c **** 		FREE_BUF();
3266:../tasks/SDMMC/ff.c **** 	}
3267:../tasks/SDMMC/ff.c **** 
3268:../tasks/SDMMC/ff.c **** 	LEAVE_FF(dj.fs, res);
 8095              		.loc 1 3268 0
 8096 33ba 97F83732 		ldrb	r3, [r7, #567]	@ zero_extendqisi2
3269:../tasks/SDMMC/ff.c **** }
 8097              		.loc 1 3269 0
 8098 33be 1846     		mov	r0, r3
 8099 33c0 07F50E77 		add	r7, r7, #568
 8100 33c4 BD46     		mov	sp, r7
 8101              		@ sp needed
 8102 33c6 80BD     		pop	{r7, pc}
 8103              		.cfi_endproc
 8104              	.LFE101:
 8106              		.align	2
 8107              		.global	f_getfree
 8108              		.thumb
 8109              		.thumb_func
 8111              	f_getfree:
 8112              	.LFB102:
3270:../tasks/SDMMC/ff.c **** 
3271:../tasks/SDMMC/ff.c **** 
3272:../tasks/SDMMC/ff.c **** 
3273:../tasks/SDMMC/ff.c **** #if !_FS_READONLY
3274:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
3275:../tasks/SDMMC/ff.c **** /* Get Number of Free Clusters                                           */
3276:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
3277:../tasks/SDMMC/ff.c **** 
3278:../tasks/SDMMC/ff.c **** FRESULT f_getfree (
3279:../tasks/SDMMC/ff.c **** 	const TCHAR* path,	/* Path name of the logical drive number */
3280:../tasks/SDMMC/ff.c **** 	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
3281:../tasks/SDMMC/ff.c **** 	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
3282:../tasks/SDMMC/ff.c **** )
3283:../tasks/SDMMC/ff.c **** {
 8113              		.loc 1 3283 0
 8114              		.cfi_startproc
 8115              		@ args = 0, pretend = 0, frame = 56
 8116              		@ frame_needed = 1, uses_anonymous_args = 0
 8117 33c8 80B5     		push	{r7, lr}
 8118              		.cfi_def_cfa_offset 8
 8119              		.cfi_offset 7, -8
 8120              		.cfi_offset 14, -4
 8121 33ca 8EB0     		sub	sp, sp, #56
 8122              		.cfi_def_cfa_offset 64
 8123 33cc 00AF     		add	r7, sp, #0
 8124              		.cfi_def_cfa_register 7
 8125 33ce F860     		str	r0, [r7, #12]
 8126 33d0 B960     		str	r1, [r7, #8]
 8127 33d2 7A60     		str	r2, [r7, #4]
3284:../tasks/SDMMC/ff.c **** 	FRESULT res;
3285:../tasks/SDMMC/ff.c **** 	FATFS *fs;
3286:../tasks/SDMMC/ff.c **** 	DWORD n, clst, sect, stat;
3287:../tasks/SDMMC/ff.c **** 	UINT i;
3288:../tasks/SDMMC/ff.c **** 	BYTE fat, *p;
3289:../tasks/SDMMC/ff.c **** 
3290:../tasks/SDMMC/ff.c **** 
3291:../tasks/SDMMC/ff.c **** 	/* Get logical drive number */
3292:../tasks/SDMMC/ff.c **** 	res = find_volume(fatfs, &path, 0);
 8128              		.loc 1 3292 0
 8129 33d4 07F10C03 		add	r3, r7, #12
 8130 33d8 7868     		ldr	r0, [r7, #4]
 8131 33da 1946     		mov	r1, r3
 8132 33dc 0022     		movs	r2, #0
 8133 33de FEF75FFA 		bl	find_volume
 8134 33e2 0346     		mov	r3, r0
 8135 33e4 87F83730 		strb	r3, [r7, #55]
3293:../tasks/SDMMC/ff.c **** 	fs = *fatfs;
 8136              		.loc 1 3293 0
 8137 33e8 7B68     		ldr	r3, [r7, #4]
 8138 33ea 1B68     		ldr	r3, [r3]
 8139 33ec FB61     		str	r3, [r7, #28]
3294:../tasks/SDMMC/ff.c **** 	if (res == FR_OK) {
 8140              		.loc 1 3294 0
 8141 33ee 97F83730 		ldrb	r3, [r7, #55]	@ zero_extendqisi2
 8142 33f2 002B     		cmp	r3, #0
 8143 33f4 40F0AE80 		bne	.L487
3295:../tasks/SDMMC/ff.c **** 		/* If free_clust is valid, return it without full cluster scan */
3296:../tasks/SDMMC/ff.c **** 		if (fs->free_clust <= fs->n_fatent - 2) {
 8144              		.loc 1 3296 0
 8145 33f8 FB69     		ldr	r3, [r7, #28]
 8146 33fa D3F81022 		ldr	r2, [r3, #528]
 8147 33fe FB69     		ldr	r3, [r7, #28]
 8148 3400 D3F81832 		ldr	r3, [r3, #536]
 8149 3404 023B     		subs	r3, r3, #2
 8150 3406 9A42     		cmp	r2, r3
 8151 3408 05D8     		bhi	.L488
3297:../tasks/SDMMC/ff.c **** 			*nclst = fs->free_clust;
 8152              		.loc 1 3297 0
 8153 340a FB69     		ldr	r3, [r7, #28]
 8154 340c D3F81022 		ldr	r2, [r3, #528]
 8155 3410 BB68     		ldr	r3, [r7, #8]
 8156 3412 1A60     		str	r2, [r3]
 8157 3414 9EE0     		b	.L487
 8158              	.L488:
3298:../tasks/SDMMC/ff.c **** 		} else {
3299:../tasks/SDMMC/ff.c **** 			/* Get number of free clusters */
3300:../tasks/SDMMC/ff.c **** 			fat = fs->fs_type;
 8159              		.loc 1 3300 0
 8160 3416 FB69     		ldr	r3, [r7, #28]
 8161 3418 93F80032 		ldrb	r3, [r3, #512]
 8162 341c FB76     		strb	r3, [r7, #27]
3301:../tasks/SDMMC/ff.c **** 			n = 0;
 8163              		.loc 1 3301 0
 8164 341e 0023     		movs	r3, #0
 8165 3420 3B63     		str	r3, [r7, #48]
3302:../tasks/SDMMC/ff.c **** 			if (fat == FS_FAT12) {
 8166              		.loc 1 3302 0
 8167 3422 FB7E     		ldrb	r3, [r7, #27]	@ zero_extendqisi2
 8168 3424 012B     		cmp	r3, #1
 8169 3426 26D1     		bne	.L489
3303:../tasks/SDMMC/ff.c **** 				clst = 2;
 8170              		.loc 1 3303 0
 8171 3428 0223     		movs	r3, #2
 8172 342a FB62     		str	r3, [r7, #44]
 8173              	.L494:
3304:../tasks/SDMMC/ff.c **** 				do {
3305:../tasks/SDMMC/ff.c **** 					stat = get_fat(fs, clst);
 8174              		.loc 1 3305 0
 8175 342c F869     		ldr	r0, [r7, #28]
 8176 342e F96A     		ldr	r1, [r7, #44]
 8177 3430 FFF7FEFF 		bl	get_fat
 8178 3434 7861     		str	r0, [r7, #20]
3306:../tasks/SDMMC/ff.c **** 					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8179              		.loc 1 3306 0
 8180 3436 7B69     		ldr	r3, [r7, #20]
 8181 3438 B3F1FF3F 		cmp	r3, #-1
 8182 343c 03D1     		bne	.L490
 8183              		.loc 1 3306 0 is_stmt 0 discriminator 1
 8184 343e 0123     		movs	r3, #1
 8185 3440 87F83730 		strb	r3, [r7, #55]
 8186 3444 16E0     		b	.L491
 8187              	.L490:
3307:../tasks/SDMMC/ff.c **** 					if (stat == 1) { res = FR_INT_ERR; break; }
 8188              		.loc 1 3307 0 is_stmt 1
 8189 3446 7B69     		ldr	r3, [r7, #20]
 8190 3448 012B     		cmp	r3, #1
 8191 344a 03D1     		bne	.L492
 8192              		.loc 1 3307 0 is_stmt 0 discriminator 1
 8193 344c 0223     		movs	r3, #2
 8194 344e 87F83730 		strb	r3, [r7, #55]
 8195 3452 0FE0     		b	.L491
 8196              	.L492:
3308:../tasks/SDMMC/ff.c **** 					if (stat == 0) n++;
 8197              		.loc 1 3308 0 is_stmt 1
 8198 3454 7B69     		ldr	r3, [r7, #20]
 8199 3456 002B     		cmp	r3, #0
 8200 3458 02D1     		bne	.L493
 8201              		.loc 1 3308 0 is_stmt 0 discriminator 1
 8202 345a 3B6B     		ldr	r3, [r7, #48]
 8203 345c 0133     		adds	r3, r3, #1
 8204 345e 3B63     		str	r3, [r7, #48]
 8205              	.L493:
3309:../tasks/SDMMC/ff.c **** 				} while (++clst < fs->n_fatent);
 8206              		.loc 1 3309 0 is_stmt 1
 8207 3460 FB6A     		ldr	r3, [r7, #44]
 8208 3462 0133     		adds	r3, r3, #1
 8209 3464 FB62     		str	r3, [r7, #44]
 8210 3466 FB69     		ldr	r3, [r7, #28]
 8211 3468 D3F81832 		ldr	r3, [r3, #536]
 8212 346c FA6A     		ldr	r2, [r7, #44]
 8213 346e 9A42     		cmp	r2, r3
 8214 3470 DCD3     		bcc	.L494
 8215 3472 5FE0     		b	.L495
 8216              	.L491:
 8217 3474 5EE0     		b	.L495
 8218              	.L489:
3310:../tasks/SDMMC/ff.c **** 			} else {
3311:../tasks/SDMMC/ff.c **** 				clst = fs->n_fatent;
 8219              		.loc 1 3311 0
 8220 3476 FB69     		ldr	r3, [r7, #28]
 8221 3478 D3F81832 		ldr	r3, [r3, #536]
 8222 347c FB62     		str	r3, [r7, #44]
3312:../tasks/SDMMC/ff.c **** 				sect = fs->fatbase;
 8223              		.loc 1 3312 0
 8224 347e FB69     		ldr	r3, [r7, #28]
 8225 3480 D3F82432 		ldr	r3, [r3, #548]
 8226 3484 BB62     		str	r3, [r7, #40]
3313:../tasks/SDMMC/ff.c **** 				i = 0; p = 0;
 8227              		.loc 1 3313 0
 8228 3486 0023     		movs	r3, #0
 8229 3488 7B62     		str	r3, [r7, #36]
 8230 348a 0023     		movs	r3, #0
 8231 348c 3B62     		str	r3, [r7, #32]
 8232              	.L502:
3314:../tasks/SDMMC/ff.c **** 				do {
3315:../tasks/SDMMC/ff.c **** 					if (!i) {
 8233              		.loc 1 3315 0
 8234 348e 7B6A     		ldr	r3, [r7, #36]
 8235 3490 002B     		cmp	r3, #0
 8236 3492 13D1     		bne	.L496
3316:../tasks/SDMMC/ff.c **** 						res = move_window(fs, sect++);
 8237              		.loc 1 3316 0
 8238 3494 BB6A     		ldr	r3, [r7, #40]
 8239 3496 5A1C     		adds	r2, r3, #1
 8240 3498 BA62     		str	r2, [r7, #40]
 8241 349a F869     		ldr	r0, [r7, #28]
 8242 349c 1946     		mov	r1, r3
 8243 349e FDF763F8 		bl	move_window
 8244 34a2 0346     		mov	r3, r0
 8245 34a4 87F83730 		strb	r3, [r7, #55]
3317:../tasks/SDMMC/ff.c **** 						if (res != FR_OK) break;
 8246              		.loc 1 3317 0
 8247 34a8 97F83730 		ldrb	r3, [r7, #55]	@ zero_extendqisi2
 8248 34ac 002B     		cmp	r3, #0
 8249 34ae 00D0     		beq	.L497
 8250              		.loc 1 3317 0 is_stmt 0 discriminator 1
 8251 34b0 40E0     		b	.L495
 8252              	.L497:
3318:../tasks/SDMMC/ff.c **** 						p = fs->win.d8;
 8253              		.loc 1 3318 0 is_stmt 1
 8254 34b2 FB69     		ldr	r3, [r7, #28]
 8255 34b4 3B62     		str	r3, [r7, #32]
3319:../tasks/SDMMC/ff.c **** 						i = SS(fs);
 8256              		.loc 1 3319 0
 8257 34b6 4FF40073 		mov	r3, #512
 8258 34ba 7B62     		str	r3, [r7, #36]
 8259              	.L496:
3320:../tasks/SDMMC/ff.c **** 					}
3321:../tasks/SDMMC/ff.c **** 					if (fat == FS_FAT16) {
 8260              		.loc 1 3321 0
 8261 34bc FB7E     		ldrb	r3, [r7, #27]	@ zero_extendqisi2
 8262 34be 022B     		cmp	r3, #2
 8263 34c0 14D1     		bne	.L498
3322:../tasks/SDMMC/ff.c **** 						if (LD_WORD(p) == 0) n++;
 8264              		.loc 1 3322 0
 8265 34c2 3B6A     		ldr	r3, [r7, #32]
 8266 34c4 0133     		adds	r3, r3, #1
 8267 34c6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8268 34c8 1B02     		lsls	r3, r3, #8
 8269 34ca 9AB2     		uxth	r2, r3
 8270 34cc 3B6A     		ldr	r3, [r7, #32]
 8271 34ce 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8272 34d0 1343     		orrs	r3, r3, r2
 8273 34d2 9BB2     		uxth	r3, r3
 8274 34d4 002B     		cmp	r3, #0
 8275 34d6 02D1     		bne	.L499
 8276              		.loc 1 3322 0 is_stmt 0 discriminator 1
 8277 34d8 3B6B     		ldr	r3, [r7, #48]
 8278 34da 0133     		adds	r3, r3, #1
 8279 34dc 3B63     		str	r3, [r7, #48]
 8280              	.L499:
3323:../tasks/SDMMC/ff.c **** 						p += 2; i -= 2;
 8281              		.loc 1 3323 0 is_stmt 1
 8282 34de 3B6A     		ldr	r3, [r7, #32]
 8283 34e0 0233     		adds	r3, r3, #2
 8284 34e2 3B62     		str	r3, [r7, #32]
 8285 34e4 7B6A     		ldr	r3, [r7, #36]
 8286 34e6 023B     		subs	r3, r3, #2
 8287 34e8 7B62     		str	r3, [r7, #36]
 8288 34ea 1DE0     		b	.L500
 8289              	.L498:
3324:../tasks/SDMMC/ff.c **** 					} else {
3325:../tasks/SDMMC/ff.c **** 						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 8290              		.loc 1 3325 0
 8291 34ec 3B6A     		ldr	r3, [r7, #32]
 8292 34ee 0333     		adds	r3, r3, #3
 8293 34f0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8294 34f2 1A06     		lsls	r2, r3, #24
 8295 34f4 3B6A     		ldr	r3, [r7, #32]
 8296 34f6 0233     		adds	r3, r3, #2
 8297 34f8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8298 34fa 1B04     		lsls	r3, r3, #16
 8299 34fc 1A43     		orrs	r2, r2, r3
 8300 34fe 3B6A     		ldr	r3, [r7, #32]
 8301 3500 0133     		adds	r3, r3, #1
 8302 3502 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8303 3504 1B02     		lsls	r3, r3, #8
 8304 3506 1A43     		orrs	r2, r2, r3
 8305 3508 3B6A     		ldr	r3, [r7, #32]
 8306 350a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8307 350c 1343     		orrs	r3, r3, r2
 8308 350e 23F07043 		bic	r3, r3, #-268435456
 8309 3512 002B     		cmp	r3, #0
 8310 3514 02D1     		bne	.L501
 8311              		.loc 1 3325 0 is_stmt 0 discriminator 1
 8312 3516 3B6B     		ldr	r3, [r7, #48]
 8313 3518 0133     		adds	r3, r3, #1
 8314 351a 3B63     		str	r3, [r7, #48]
 8315              	.L501:
3326:../tasks/SDMMC/ff.c **** 						p += 4; i -= 4;
 8316              		.loc 1 3326 0 is_stmt 1
 8317 351c 3B6A     		ldr	r3, [r7, #32]
 8318 351e 0433     		adds	r3, r3, #4
 8319 3520 3B62     		str	r3, [r7, #32]
 8320 3522 7B6A     		ldr	r3, [r7, #36]
 8321 3524 043B     		subs	r3, r3, #4
 8322 3526 7B62     		str	r3, [r7, #36]
 8323              	.L500:
3327:../tasks/SDMMC/ff.c **** 					}
3328:../tasks/SDMMC/ff.c **** 				} while (--clst);
 8324              		.loc 1 3328 0
 8325 3528 FB6A     		ldr	r3, [r7, #44]
 8326 352a 013B     		subs	r3, r3, #1
 8327 352c FB62     		str	r3, [r7, #44]
 8328 352e FB6A     		ldr	r3, [r7, #44]
 8329 3530 002B     		cmp	r3, #0
 8330 3532 ACD1     		bne	.L502
 8331              	.L495:
3329:../tasks/SDMMC/ff.c **** 			}
3330:../tasks/SDMMC/ff.c **** 			fs->free_clust = n;
 8332              		.loc 1 3330 0
 8333 3534 FB69     		ldr	r3, [r7, #28]
 8334 3536 3A6B     		ldr	r2, [r7, #48]
 8335 3538 C3F81022 		str	r2, [r3, #528]
3331:../tasks/SDMMC/ff.c **** 			fs->fsi_flag |= 1;
 8336              		.loc 1 3331 0
 8337 353c FB69     		ldr	r3, [r7, #28]
 8338 353e 93F80532 		ldrb	r3, [r3, #517]	@ zero_extendqisi2
 8339 3542 43F00103 		orr	r3, r3, #1
 8340 3546 DAB2     		uxtb	r2, r3
 8341 3548 FB69     		ldr	r3, [r7, #28]
 8342 354a 83F80522 		strb	r2, [r3, #517]
3332:../tasks/SDMMC/ff.c **** 			*nclst = n;
 8343              		.loc 1 3332 0
 8344 354e BB68     		ldr	r3, [r7, #8]
 8345 3550 3A6B     		ldr	r2, [r7, #48]
 8346 3552 1A60     		str	r2, [r3]
 8347              	.L487:
3333:../tasks/SDMMC/ff.c **** 		}
3334:../tasks/SDMMC/ff.c **** 	}
3335:../tasks/SDMMC/ff.c **** 	LEAVE_FF(fs, res);
 8348              		.loc 1 3335 0
 8349 3554 97F83730 		ldrb	r3, [r7, #55]	@ zero_extendqisi2
3336:../tasks/SDMMC/ff.c **** }
 8350              		.loc 1 3336 0
 8351 3558 1846     		mov	r0, r3
 8352 355a 3837     		adds	r7, r7, #56
 8353 355c BD46     		mov	sp, r7
 8354              		@ sp needed
 8355 355e 80BD     		pop	{r7, pc}
 8356              		.cfi_endproc
 8357              	.LFE102:
 8359              		.align	2
 8360              		.global	f_truncate
 8361              		.thumb
 8362              		.thumb_func
 8364              	f_truncate:
 8365              	.LFB103:
3337:../tasks/SDMMC/ff.c **** 
3338:../tasks/SDMMC/ff.c **** 
3339:../tasks/SDMMC/ff.c **** 
3340:../tasks/SDMMC/ff.c **** 
3341:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
3342:../tasks/SDMMC/ff.c **** /* Truncate File                                                         */
3343:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
3344:../tasks/SDMMC/ff.c **** 
3345:../tasks/SDMMC/ff.c **** FRESULT f_truncate (
3346:../tasks/SDMMC/ff.c **** 	FIL* fp		/* Pointer to the file object */
3347:../tasks/SDMMC/ff.c **** )
3348:../tasks/SDMMC/ff.c **** {
 8366              		.loc 1 3348 0
 8367              		.cfi_startproc
 8368              		@ args = 0, pretend = 0, frame = 16
 8369              		@ frame_needed = 1, uses_anonymous_args = 0
 8370 3560 80B5     		push	{r7, lr}
 8371              		.cfi_def_cfa_offset 8
 8372              		.cfi_offset 7, -8
 8373              		.cfi_offset 14, -4
 8374 3562 84B0     		sub	sp, sp, #16
 8375              		.cfi_def_cfa_offset 24
 8376 3564 00AF     		add	r7, sp, #0
 8377              		.cfi_def_cfa_register 7
 8378 3566 7860     		str	r0, [r7, #4]
3349:../tasks/SDMMC/ff.c **** 	FRESULT res;
3350:../tasks/SDMMC/ff.c **** 	DWORD ncl;
3351:../tasks/SDMMC/ff.c **** 
3352:../tasks/SDMMC/ff.c **** 
3353:../tasks/SDMMC/ff.c **** 	res = validate(fp);						/* Check validity of the object */
 8379              		.loc 1 3353 0
 8380 3568 7868     		ldr	r0, [r7, #4]
 8381 356a FEF76FFC 		bl	validate
 8382 356e 0346     		mov	r3, r0
 8383 3570 FB73     		strb	r3, [r7, #15]
3354:../tasks/SDMMC/ff.c **** 	if (res == FR_OK) {
 8384              		.loc 1 3354 0
 8385 3572 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 8386 3574 002B     		cmp	r3, #0
 8387 3576 12D1     		bne	.L505
3355:../tasks/SDMMC/ff.c **** 		if (fp->err) {						/* Check error */
 8388              		.loc 1 3355 0
 8389 3578 7B68     		ldr	r3, [r7, #4]
 8390 357a 93F80732 		ldrb	r3, [r3, #519]	@ zero_extendqisi2
 8391 357e 002B     		cmp	r3, #0
 8392 3580 04D0     		beq	.L506
3356:../tasks/SDMMC/ff.c **** 			res = (FRESULT)fp->err;
 8393              		.loc 1 3356 0
 8394 3582 7B68     		ldr	r3, [r7, #4]
 8395 3584 93F80732 		ldrb	r3, [r3, #519]
 8396 3588 FB73     		strb	r3, [r7, #15]
 8397 358a 08E0     		b	.L505
 8398              	.L506:
3357:../tasks/SDMMC/ff.c **** 		} else {
3358:../tasks/SDMMC/ff.c **** 			if (!(fp->flag & FA_WRITE))		/* Check access mode */
 8399              		.loc 1 3358 0
 8400 358c 7B68     		ldr	r3, [r7, #4]
 8401 358e 93F80632 		ldrb	r3, [r3, #518]	@ zero_extendqisi2
 8402 3592 03F00203 		and	r3, r3, #2
 8403 3596 002B     		cmp	r3, #0
 8404 3598 01D1     		bne	.L505
3359:../tasks/SDMMC/ff.c **** 				res = FR_DENIED;
 8405              		.loc 1 3359 0
 8406 359a 0723     		movs	r3, #7
 8407 359c FB73     		strb	r3, [r7, #15]
 8408              	.L505:
3360:../tasks/SDMMC/ff.c **** 		}
3361:../tasks/SDMMC/ff.c **** 	}
3362:../tasks/SDMMC/ff.c **** 	if (res == FR_OK) {
 8409              		.loc 1 3362 0
 8410 359e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 8411 35a0 002B     		cmp	r3, #0
 8412 35a2 40F09A80 		bne	.L507
3363:../tasks/SDMMC/ff.c **** 		if (fp->fsize > fp->fptr) {
 8413              		.loc 1 3363 0
 8414 35a6 7B68     		ldr	r3, [r7, #4]
 8415 35a8 D3F80C22 		ldr	r2, [r3, #524]
 8416 35ac 7B68     		ldr	r3, [r7, #4]
 8417 35ae D3F80832 		ldr	r3, [r3, #520]
 8418 35b2 9A42     		cmp	r2, r3
 8419 35b4 40F28A80 		bls	.L508
3364:../tasks/SDMMC/ff.c **** 			fp->fsize = fp->fptr;	/* Set file size to current R/W point */
 8420              		.loc 1 3364 0
 8421 35b8 7B68     		ldr	r3, [r7, #4]
 8422 35ba D3F80822 		ldr	r2, [r3, #520]
 8423 35be 7B68     		ldr	r3, [r7, #4]
 8424 35c0 C3F80C22 		str	r2, [r3, #524]
3365:../tasks/SDMMC/ff.c **** 			fp->flag |= FA__WRITTEN;
 8425              		.loc 1 3365 0
 8426 35c4 7B68     		ldr	r3, [r7, #4]
 8427 35c6 93F80632 		ldrb	r3, [r3, #518]	@ zero_extendqisi2
 8428 35ca 43F02003 		orr	r3, r3, #32
 8429 35ce DAB2     		uxtb	r2, r3
 8430 35d0 7B68     		ldr	r3, [r7, #4]
 8431 35d2 83F80622 		strb	r2, [r3, #518]
3366:../tasks/SDMMC/ff.c **** 			if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
 8432              		.loc 1 3366 0
 8433 35d6 7B68     		ldr	r3, [r7, #4]
 8434 35d8 D3F80832 		ldr	r3, [r3, #520]
 8435 35dc 002B     		cmp	r3, #0
 8436 35de 10D1     		bne	.L509
3367:../tasks/SDMMC/ff.c **** 				res = remove_chain(fp->fs, fp->sclust);
 8437              		.loc 1 3367 0
 8438 35e0 7B68     		ldr	r3, [r7, #4]
 8439 35e2 D3F80022 		ldr	r2, [r3, #512]
 8440 35e6 7B68     		ldr	r3, [r7, #4]
 8441 35e8 D3F81032 		ldr	r3, [r3, #528]
 8442 35ec 1046     		mov	r0, r2
 8443 35ee 1946     		mov	r1, r3
 8444 35f0 FDF762FA 		bl	remove_chain
 8445 35f4 0346     		mov	r3, r0
 8446 35f6 FB73     		strb	r3, [r7, #15]
3368:../tasks/SDMMC/ff.c **** 				fp->sclust = 0;
 8447              		.loc 1 3368 0
 8448 35f8 7B68     		ldr	r3, [r7, #4]
 8449 35fa 0022     		movs	r2, #0
 8450 35fc C3F81022 		str	r2, [r3, #528]
 8451 3600 3CE0     		b	.L510
 8452              	.L509:
3369:../tasks/SDMMC/ff.c **** 			} else {				/* When truncate a part of the file, remove remaining clusters */
3370:../tasks/SDMMC/ff.c **** 				ncl = get_fat(fp->fs, fp->clust);
 8453              		.loc 1 3370 0
 8454 3602 7B68     		ldr	r3, [r7, #4]
 8455 3604 D3F80022 		ldr	r2, [r3, #512]
 8456 3608 7B68     		ldr	r3, [r7, #4]
 8457 360a D3F81432 		ldr	r3, [r3, #532]
 8458 360e 1046     		mov	r0, r2
 8459 3610 1946     		mov	r1, r3
 8460 3612 FFF7FEFF 		bl	get_fat
 8461 3616 B860     		str	r0, [r7, #8]
3371:../tasks/SDMMC/ff.c **** 				res = FR_OK;
 8462              		.loc 1 3371 0
 8463 3618 0023     		movs	r3, #0
 8464 361a FB73     		strb	r3, [r7, #15]
3372:../tasks/SDMMC/ff.c **** 				if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8465              		.loc 1 3372 0
 8466 361c BB68     		ldr	r3, [r7, #8]
 8467 361e B3F1FF3F 		cmp	r3, #-1
 8468 3622 01D1     		bne	.L511
 8469              		.loc 1 3372 0 is_stmt 0 discriminator 1
 8470 3624 0123     		movs	r3, #1
 8471 3626 FB73     		strb	r3, [r7, #15]
 8472              	.L511:
3373:../tasks/SDMMC/ff.c **** 				if (ncl == 1) res = FR_INT_ERR;
 8473              		.loc 1 3373 0 is_stmt 1
 8474 3628 BB68     		ldr	r3, [r7, #8]
 8475 362a 012B     		cmp	r3, #1
 8476 362c 01D1     		bne	.L512
 8477              		.loc 1 3373 0 is_stmt 0 discriminator 1
 8478 362e 0223     		movs	r3, #2
 8479 3630 FB73     		strb	r3, [r7, #15]
 8480              	.L512:
3374:../tasks/SDMMC/ff.c **** 				if (res == FR_OK && ncl < fp->fs->n_fatent) {
 8481              		.loc 1 3374 0 is_stmt 1
 8482 3632 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 8483 3634 002B     		cmp	r3, #0
 8484 3636 21D1     		bne	.L510
 8485              		.loc 1 3374 0 is_stmt 0 discriminator 1
 8486 3638 7B68     		ldr	r3, [r7, #4]
 8487 363a D3F80032 		ldr	r3, [r3, #512]
 8488 363e D3F81822 		ldr	r2, [r3, #536]
 8489 3642 BB68     		ldr	r3, [r7, #8]
 8490 3644 9A42     		cmp	r2, r3
 8491 3646 19D9     		bls	.L510
3375:../tasks/SDMMC/ff.c **** 					res = put_fat(fp->fs, fp->clust, 0x0FFFFFFF);
 8492              		.loc 1 3375 0 is_stmt 1
 8493 3648 7B68     		ldr	r3, [r7, #4]
 8494 364a D3F80022 		ldr	r2, [r3, #512]
 8495 364e 7B68     		ldr	r3, [r7, #4]
 8496 3650 D3F81432 		ldr	r3, [r3, #532]
 8497 3654 1046     		mov	r0, r2
 8498 3656 1946     		mov	r1, r3
 8499 3658 6FF07042 		mvn	r2, #-268435456
 8500 365c FFF7FEFF 		bl	put_fat
 8501 3660 0346     		mov	r3, r0
 8502 3662 FB73     		strb	r3, [r7, #15]
3376:../tasks/SDMMC/ff.c **** 					if (res == FR_OK) res = remove_chain(fp->fs, ncl);
 8503              		.loc 1 3376 0
 8504 3664 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 8505 3666 002B     		cmp	r3, #0
 8506 3668 08D1     		bne	.L510
 8507              		.loc 1 3376 0 is_stmt 0 discriminator 1
 8508 366a 7B68     		ldr	r3, [r7, #4]
 8509 366c D3F80032 		ldr	r3, [r3, #512]
 8510 3670 1846     		mov	r0, r3
 8511 3672 B968     		ldr	r1, [r7, #8]
 8512 3674 FDF720FA 		bl	remove_chain
 8513 3678 0346     		mov	r3, r0
 8514 367a FB73     		strb	r3, [r7, #15]
 8515              	.L510:
3377:../tasks/SDMMC/ff.c **** 				}
3378:../tasks/SDMMC/ff.c **** 			}
3379:../tasks/SDMMC/ff.c **** #if !_FS_TINY
3380:../tasks/SDMMC/ff.c **** 			if (res == FR_OK && (fp->flag & FA__DIRTY)) {
 8516              		.loc 1 3380 0 is_stmt 1
 8517 367c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 8518 367e 002B     		cmp	r3, #0
 8519 3680 24D1     		bne	.L508
 8520              		.loc 1 3380 0 is_stmt 0 discriminator 1
 8521 3682 7B68     		ldr	r3, [r7, #4]
 8522 3684 93F80632 		ldrb	r3, [r3, #518]	@ zero_extendqisi2
 8523 3688 03F04003 		and	r3, r3, #64
 8524 368c 002B     		cmp	r3, #0
 8525 368e 1DD0     		beq	.L508
3381:../tasks/SDMMC/ff.c **** 				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1))
 8526              		.loc 1 3381 0 is_stmt 1
 8527 3690 7B68     		ldr	r3, [r7, #4]
 8528 3692 D3F80032 		ldr	r3, [r3, #512]
 8529 3696 93F80112 		ldrb	r1, [r3, #513]	@ zero_extendqisi2
 8530 369a 7A68     		ldr	r2, [r7, #4]
 8531 369c 7B68     		ldr	r3, [r7, #4]
 8532 369e D3F81832 		ldr	r3, [r3, #536]
 8533 36a2 0846     		mov	r0, r1
 8534 36a4 1146     		mov	r1, r2
 8535 36a6 1A46     		mov	r2, r3
 8536 36a8 0123     		movs	r3, #1
 8537 36aa FFF7FEFF 		bl	disk_write
 8538 36ae 0346     		mov	r3, r0
 8539 36b0 002B     		cmp	r3, #0
 8540 36b2 02D0     		beq	.L513
3382:../tasks/SDMMC/ff.c **** 					res = FR_DISK_ERR;
 8541              		.loc 1 3382 0
 8542 36b4 0123     		movs	r3, #1
 8543 36b6 FB73     		strb	r3, [r7, #15]
 8544 36b8 08E0     		b	.L508
 8545              	.L513:
3383:../tasks/SDMMC/ff.c **** 				else
3384:../tasks/SDMMC/ff.c **** 					fp->flag &= ~FA__DIRTY;
 8546              		.loc 1 3384 0
 8547 36ba 7B68     		ldr	r3, [r7, #4]
 8548 36bc 93F80632 		ldrb	r3, [r3, #518]	@ zero_extendqisi2
 8549 36c0 23F04003 		bic	r3, r3, #64
 8550 36c4 DAB2     		uxtb	r2, r3
 8551 36c6 7B68     		ldr	r3, [r7, #4]
 8552 36c8 83F80622 		strb	r2, [r3, #518]
 8553              	.L508:
3385:../tasks/SDMMC/ff.c **** 			}
3386:../tasks/SDMMC/ff.c **** #endif
3387:../tasks/SDMMC/ff.c **** 		}
3388:../tasks/SDMMC/ff.c **** 		if (res != FR_OK) fp->err = (FRESULT)res;
 8554              		.loc 1 3388 0
 8555 36cc FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 8556 36ce 002B     		cmp	r3, #0
 8557 36d0 03D0     		beq	.L507
 8558              		.loc 1 3388 0 is_stmt 0 discriminator 1
 8559 36d2 7B68     		ldr	r3, [r7, #4]
 8560 36d4 FA7B     		ldrb	r2, [r7, #15]
 8561 36d6 83F80722 		strb	r2, [r3, #519]
 8562              	.L507:
3389:../tasks/SDMMC/ff.c **** 	}
3390:../tasks/SDMMC/ff.c **** 
3391:../tasks/SDMMC/ff.c **** 	LEAVE_FF(fp->fs, res);
 8563              		.loc 1 3391 0 is_stmt 1
 8564 36da FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
3392:../tasks/SDMMC/ff.c **** }
 8565              		.loc 1 3392 0
 8566 36dc 1846     		mov	r0, r3
 8567 36de 1037     		adds	r7, r7, #16
 8568 36e0 BD46     		mov	sp, r7
 8569              		@ sp needed
 8570 36e2 80BD     		pop	{r7, pc}
 8571              		.cfi_endproc
 8572              	.LFE103:
 8574              		.align	2
 8575              		.global	f_unlink
 8576              		.thumb
 8577              		.thumb_func
 8579              	f_unlink:
 8580              	.LFB104:
3393:../tasks/SDMMC/ff.c **** 
3394:../tasks/SDMMC/ff.c **** 
3395:../tasks/SDMMC/ff.c **** 
3396:../tasks/SDMMC/ff.c **** 
3397:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
3398:../tasks/SDMMC/ff.c **** /* Delete a File or Directory                                            */
3399:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
3400:../tasks/SDMMC/ff.c **** 
3401:../tasks/SDMMC/ff.c **** FRESULT f_unlink (
3402:../tasks/SDMMC/ff.c **** 	const TCHAR* path		/* Pointer to the file or directory path */
3403:../tasks/SDMMC/ff.c **** )
3404:../tasks/SDMMC/ff.c **** {
 8581              		.loc 1 3404 0
 8582              		.cfi_startproc
 8583              		@ args = 0, pretend = 0, frame = 1120
 8584              		@ frame_needed = 1, uses_anonymous_args = 0
 8585 36e4 80B5     		push	{r7, lr}
 8586              		.cfi_def_cfa_offset 8
 8587              		.cfi_offset 7, -8
 8588              		.cfi_offset 14, -4
 8589 36e6 ADF58C6D 		sub	sp, sp, #1120
 8590              		.cfi_def_cfa_offset 1128
 8591 36ea 00AF     		add	r7, sp, #0
 8592              		.cfi_def_cfa_register 7
 8593 36ec 3B1D     		adds	r3, r7, #4
 8594 36ee 1860     		str	r0, [r3]
3405:../tasks/SDMMC/ff.c **** 	FRESULT res;
3406:../tasks/SDMMC/ff.c **** 	DIR dj, sdj;
3407:../tasks/SDMMC/ff.c **** 	BYTE *dir;
3408:../tasks/SDMMC/ff.c **** 	DWORD dclst;
3409:../tasks/SDMMC/ff.c **** 	DEF_NAMEBUF;
3410:../tasks/SDMMC/ff.c **** 
3411:../tasks/SDMMC/ff.c **** 
3412:../tasks/SDMMC/ff.c **** 	/* Get logical drive number */
3413:../tasks/SDMMC/ff.c **** 	res = find_volume(&dj.fs, &path, 1);
 8595              		.loc 1 3413 0
 8596 36f0 07F50D73 		add	r3, r7, #564
 8597 36f4 03F50072 		add	r2, r3, #512
 8598 36f8 3B1D     		adds	r3, r7, #4
 8599 36fa 1046     		mov	r0, r2
 8600 36fc 1946     		mov	r1, r3
 8601 36fe 0122     		movs	r2, #1
 8602 3700 FEF7CEF8 		bl	find_volume
 8603 3704 0346     		mov	r3, r0
 8604 3706 87F85F34 		strb	r3, [r7, #1119]
3414:../tasks/SDMMC/ff.c **** 	if (res == FR_OK) {
 8605              		.loc 1 3414 0
 8606 370a 97F85F34 		ldrb	r3, [r7, #1119]	@ zero_extendqisi2
 8607 370e 002B     		cmp	r3, #0
 8608 3710 40F0D880 		bne	.L516
3415:../tasks/SDMMC/ff.c **** 		INIT_BUF(dj);
 8609              		.loc 1 3415 0
 8610 3714 07F50D73 		add	r3, r7, #564
 8611 3718 07F10802 		add	r2, r7, #8
 8612 371c C3F81822 		str	r2, [r3, #536]
3416:../tasks/SDMMC/ff.c **** 		res = follow_path(&dj, path);		/* Follow the file path */
 8613              		.loc 1 3416 0
 8614 3720 3B1D     		adds	r3, r7, #4
 8615 3722 1B68     		ldr	r3, [r3]
 8616 3724 07F50D72 		add	r2, r7, #564
 8617 3728 1046     		mov	r0, r2
 8618 372a 1946     		mov	r1, r3
 8619 372c FDF7C4FF 		bl	follow_path
 8620 3730 0346     		mov	r3, r0
 8621 3732 87F85F34 		strb	r3, [r7, #1119]
3417:../tasks/SDMMC/ff.c **** 		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
 8622              		.loc 1 3417 0
 8623 3736 97F85F34 		ldrb	r3, [r7, #1119]	@ zero_extendqisi2
 8624 373a 002B     		cmp	r3, #0
 8625 373c 0CD1     		bne	.L517
 8626              		.loc 1 3417 0 is_stmt 0 discriminator 1
 8627 373e 07F50D73 		add	r3, r7, #564
 8628 3742 D3F81832 		ldr	r3, [r3, #536]
 8629 3746 0B33     		adds	r3, r3, #11
 8630 3748 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8631 374a 03F02003 		and	r3, r3, #32
 8632 374e 002B     		cmp	r3, #0
 8633 3750 02D0     		beq	.L517
3418:../tasks/SDMMC/ff.c **** 			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 8634              		.loc 1 3418 0 is_stmt 1
 8635 3752 0623     		movs	r3, #6
 8636 3754 87F85F34 		strb	r3, [r7, #1119]
 8637              	.L517:
3419:../tasks/SDMMC/ff.c **** #if _FS_LOCK
3420:../tasks/SDMMC/ff.c **** 		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open file */
 8638              		.loc 1 3420 0
 8639 3758 97F85F34 		ldrb	r3, [r7, #1119]	@ zero_extendqisi2
 8640 375c 002B     		cmp	r3, #0
 8641 375e 08D1     		bne	.L518
 8642              		.loc 1 3420 0 is_stmt 0 discriminator 1
 8643 3760 07F50D73 		add	r3, r7, #564
 8644 3764 1846     		mov	r0, r3
 8645 3766 0221     		movs	r1, #2
 8646 3768 FCF7C6FC 		bl	chk_lock
 8647 376c 0346     		mov	r3, r0
 8648 376e 87F85F34 		strb	r3, [r7, #1119]
 8649              	.L518:
3421:../tasks/SDMMC/ff.c **** #endif
3422:../tasks/SDMMC/ff.c **** 		if (res == FR_OK) {					/* The object is accessible */
 8650              		.loc 1 3422 0 is_stmt 1
 8651 3772 97F85F34 		ldrb	r3, [r7, #1119]	@ zero_extendqisi2
 8652 3776 002B     		cmp	r3, #0
 8653 3778 40F0A480 		bne	.L516
3423:../tasks/SDMMC/ff.c **** 			dir = dj.dir;
 8654              		.loc 1 3423 0
 8655 377c 07F50D73 		add	r3, r7, #564
 8656 3780 D3F81432 		ldr	r3, [r3, #532]
 8657 3784 C7F85834 		str	r3, [r7, #1112]
3424:../tasks/SDMMC/ff.c **** 			if (!dir) {
 8658              		.loc 1 3424 0
 8659 3788 D7F85834 		ldr	r3, [r7, #1112]
 8660 378c 002B     		cmp	r3, #0
 8661 378e 03D1     		bne	.L519
3425:../tasks/SDMMC/ff.c **** 				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
 8662              		.loc 1 3425 0
 8663 3790 0623     		movs	r3, #6
 8664 3792 87F85F34 		strb	r3, [r7, #1119]
 8665 3796 0AE0     		b	.L520
 8666              	.L519:
3426:../tasks/SDMMC/ff.c **** 			} else {
3427:../tasks/SDMMC/ff.c **** 				if (dir[DIR_Attr] & AM_RDO)
 8667              		.loc 1 3427 0
 8668 3798 D7F85834 		ldr	r3, [r7, #1112]
 8669 379c 0B33     		adds	r3, r3, #11
 8670 379e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8671 37a0 03F00103 		and	r3, r3, #1
 8672 37a4 002B     		cmp	r3, #0
 8673 37a6 02D0     		beq	.L520
3428:../tasks/SDMMC/ff.c **** 					res = FR_DENIED;		/* Cannot remove R/O object */
 8674              		.loc 1 3428 0
 8675 37a8 0723     		movs	r3, #7
 8676 37aa 87F85F34 		strb	r3, [r7, #1119]
 8677              	.L520:
3429:../tasks/SDMMC/ff.c **** 			}
3430:../tasks/SDMMC/ff.c **** 			dclst = ld_clust(dj.fs, dir);
 8678              		.loc 1 3430 0
 8679 37ae 07F50D73 		add	r3, r7, #564
 8680 37b2 D3F80032 		ldr	r3, [r3, #512]
 8681 37b6 1846     		mov	r0, r3
 8682 37b8 D7F85814 		ldr	r1, [r7, #1112]
 8683 37bc FDF77CFC 		bl	ld_clust
 8684 37c0 C7F85404 		str	r0, [r7, #1108]
3431:../tasks/SDMMC/ff.c **** 			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
 8685              		.loc 1 3431 0
 8686 37c4 97F85F34 		ldrb	r3, [r7, #1119]	@ zero_extendqisi2
 8687 37c8 002B     		cmp	r3, #0
 8688 37ca 4DD1     		bne	.L521
 8689              		.loc 1 3431 0 is_stmt 0 discriminator 1
 8690 37cc D7F85834 		ldr	r3, [r7, #1112]
 8691 37d0 0B33     		adds	r3, r3, #11
 8692 37d2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8693 37d4 03F01003 		and	r3, r3, #16
 8694 37d8 002B     		cmp	r3, #0
 8695 37da 45D0     		beq	.L521
3432:../tasks/SDMMC/ff.c **** 				if (dclst < 2) {
 8696              		.loc 1 3432 0 is_stmt 1
 8697 37dc D7F85434 		ldr	r3, [r7, #1108]
 8698 37e0 012B     		cmp	r3, #1
 8699 37e2 03D8     		bhi	.L522
3433:../tasks/SDMMC/ff.c **** 					res = FR_INT_ERR;
 8700              		.loc 1 3433 0
 8701 37e4 0223     		movs	r3, #2
 8702 37e6 87F85F34 		strb	r3, [r7, #1119]
 8703 37ea 3DE0     		b	.L521
 8704              	.L522:
3434:../tasks/SDMMC/ff.c **** 				} else {
3435:../tasks/SDMMC/ff.c **** 					mem_cpy(&sdj, &dj, sizeof (DIR));	/* Check if the sub-directory is empty or not */
 8705              		.loc 1 3435 0
 8706 37ec 07F11402 		add	r2, r7, #20
 8707 37f0 07F50D73 		add	r3, r7, #564
 8708 37f4 1046     		mov	r0, r2
 8709 37f6 1946     		mov	r1, r3
 8710 37f8 4FF40872 		mov	r2, #544
 8711 37fc FCF700FC 		bl	mem_cpy
3436:../tasks/SDMMC/ff.c **** 					sdj.sclust = dclst;
 8712              		.loc 1 3436 0
 8713 3800 07F11403 		add	r3, r7, #20
 8714 3804 D7F85424 		ldr	r2, [r7, #1108]
 8715 3808 C3F80822 		str	r2, [r3, #520]
3437:../tasks/SDMMC/ff.c **** 					res = dir_sdi(&sdj, 2);		/* Exclude dot entries */
 8716              		.loc 1 3437 0
 8717 380c 07F11403 		add	r3, r7, #20
 8718 3810 1846     		mov	r0, r3
 8719 3812 0221     		movs	r1, #2
 8720 3814 FDF778FA 		bl	dir_sdi
 8721 3818 0346     		mov	r3, r0
 8722 381a 87F85F34 		strb	r3, [r7, #1119]
3438:../tasks/SDMMC/ff.c **** 					if (res == FR_OK) {
 8723              		.loc 1 3438 0
 8724 381e 97F85F34 		ldrb	r3, [r7, #1119]	@ zero_extendqisi2
 8725 3822 002B     		cmp	r3, #0
 8726 3824 20D1     		bne	.L521
3439:../tasks/SDMMC/ff.c **** 						res = dir_read(&sdj, 0);	/* Read an item */
 8727              		.loc 1 3439 0
 8728 3826 07F11403 		add	r3, r7, #20
 8729 382a 1846     		mov	r0, r3
 8730 382c 0021     		movs	r1, #0
 8731 382e FDF7E3FC 		bl	dir_read
 8732 3832 0346     		mov	r3, r0
 8733 3834 87F85F34 		strb	r3, [r7, #1119]
3440:../tasks/SDMMC/ff.c **** 						if (res == FR_OK		/* Not empty directory */
 8734              		.loc 1 3440 0
 8735 3838 97F85F34 		ldrb	r3, [r7, #1119]	@ zero_extendqisi2
 8736 383c 002B     		cmp	r3, #0
 8737 383e 09D0     		beq	.L523
3441:../tasks/SDMMC/ff.c **** #if _FS_RPATH
3442:../tasks/SDMMC/ff.c **** 						|| dclst == dj.fs->cdir	/* Current directory */
 8738              		.loc 1 3442 0
 8739 3840 07F50D73 		add	r3, r7, #564
 8740 3844 D3F80032 		ldr	r3, [r3, #512]
 8741 3848 D3F81422 		ldr	r2, [r3, #532]
 8742 384c D7F85434 		ldr	r3, [r7, #1108]
 8743 3850 9A42     		cmp	r2, r3
 8744 3852 02D1     		bne	.L524
 8745              	.L523:
3443:../tasks/SDMMC/ff.c **** #endif
3444:../tasks/SDMMC/ff.c **** 						) res = FR_DENIED;
 8746              		.loc 1 3444 0
 8747 3854 0723     		movs	r3, #7
 8748 3856 87F85F34 		strb	r3, [r7, #1119]
 8749              	.L524:
3445:../tasks/SDMMC/ff.c **** 						if (res == FR_NO_FILE) res = FR_OK;	/* Empty */
 8750              		.loc 1 3445 0
 8751 385a 97F85F34 		ldrb	r3, [r7, #1119]	@ zero_extendqisi2
 8752 385e 042B     		cmp	r3, #4
 8753 3860 02D1     		bne	.L521
 8754              		.loc 1 3445 0 is_stmt 0 discriminator 1
 8755 3862 0023     		movs	r3, #0
 8756 3864 87F85F34 		strb	r3, [r7, #1119]
 8757              	.L521:
3446:../tasks/SDMMC/ff.c **** 					}
3447:../tasks/SDMMC/ff.c **** 				}
3448:../tasks/SDMMC/ff.c **** 			}
3449:../tasks/SDMMC/ff.c **** 			if (res == FR_OK) {
 8758              		.loc 1 3449 0 is_stmt 1
 8759 3868 97F85F34 		ldrb	r3, [r7, #1119]	@ zero_extendqisi2
 8760 386c 002B     		cmp	r3, #0
 8761 386e 29D1     		bne	.L516
3450:../tasks/SDMMC/ff.c **** 				res = dir_remove(&dj);		/* Remove the directory entry */
 8762              		.loc 1 3450 0
 8763 3870 07F50D73 		add	r3, r7, #564
 8764 3874 1846     		mov	r0, r3
 8765 3876 FDF751FD 		bl	dir_remove
 8766 387a 0346     		mov	r3, r0
 8767 387c 87F85F34 		strb	r3, [r7, #1119]
3451:../tasks/SDMMC/ff.c **** 				if (res == FR_OK) {
 8768              		.loc 1 3451 0
 8769 3880 97F85F34 		ldrb	r3, [r7, #1119]	@ zero_extendqisi2
 8770 3884 002B     		cmp	r3, #0
 8771 3886 1DD1     		bne	.L516
3452:../tasks/SDMMC/ff.c **** 					if (dclst)				/* Remove the cluster chain if exist */
 8772              		.loc 1 3452 0
 8773 3888 D7F85434 		ldr	r3, [r7, #1108]
 8774 388c 002B     		cmp	r3, #0
 8775 388e 0BD0     		beq	.L525
3453:../tasks/SDMMC/ff.c **** 						res = remove_chain(dj.fs, dclst);
 8776              		.loc 1 3453 0
 8777 3890 07F50D73 		add	r3, r7, #564
 8778 3894 D3F80032 		ldr	r3, [r3, #512]
 8779 3898 1846     		mov	r0, r3
 8780 389a D7F85414 		ldr	r1, [r7, #1108]
 8781 389e FDF70BF9 		bl	remove_chain
 8782 38a2 0346     		mov	r3, r0
 8783 38a4 87F85F34 		strb	r3, [r7, #1119]
 8784              	.L525:
3454:../tasks/SDMMC/ff.c **** 					if (res == FR_OK) res = sync_fs(dj.fs);
 8785              		.loc 1 3454 0
 8786 38a8 97F85F34 		ldrb	r3, [r7, #1119]	@ zero_extendqisi2
 8787 38ac 002B     		cmp	r3, #0
 8788 38ae 09D1     		bne	.L516
 8789              		.loc 1 3454 0 is_stmt 0 discriminator 1
 8790 38b0 07F50D73 		add	r3, r7, #564
 8791 38b4 D3F80032 		ldr	r3, [r3, #512]
 8792 38b8 1846     		mov	r0, r3
 8793 38ba FCF781FE 		bl	sync_fs
 8794 38be 0346     		mov	r3, r0
 8795 38c0 87F85F34 		strb	r3, [r7, #1119]
 8796              	.L516:
3455:../tasks/SDMMC/ff.c **** 				}
3456:../tasks/SDMMC/ff.c **** 			}
3457:../tasks/SDMMC/ff.c **** 		}
3458:../tasks/SDMMC/ff.c **** 		FREE_BUF();
3459:../tasks/SDMMC/ff.c **** 	}
3460:../tasks/SDMMC/ff.c **** 
3461:../tasks/SDMMC/ff.c **** 	LEAVE_FF(dj.fs, res);
 8797              		.loc 1 3461 0 is_stmt 1
 8798 38c4 97F85F34 		ldrb	r3, [r7, #1119]	@ zero_extendqisi2
3462:../tasks/SDMMC/ff.c **** }
 8799              		.loc 1 3462 0
 8800 38c8 1846     		mov	r0, r3
 8801 38ca 07F58C67 		add	r7, r7, #1120
 8802 38ce BD46     		mov	sp, r7
 8803              		@ sp needed
 8804 38d0 80BD     		pop	{r7, pc}
 8805              		.cfi_endproc
 8806              	.LFE104:
 8808 38d2 00BF     		.align	2
 8809              		.global	f_mkdir
 8810              		.thumb
 8811              		.thumb_func
 8813              	f_mkdir:
 8814              	.LFB105:
3463:../tasks/SDMMC/ff.c **** 
3464:../tasks/SDMMC/ff.c **** 
3465:../tasks/SDMMC/ff.c **** 
3466:../tasks/SDMMC/ff.c **** 
3467:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
3468:../tasks/SDMMC/ff.c **** /* Create a Directory                                                    */
3469:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
3470:../tasks/SDMMC/ff.c **** 
3471:../tasks/SDMMC/ff.c **** FRESULT f_mkdir (
3472:../tasks/SDMMC/ff.c **** 	const TCHAR* path		/* Pointer to the directory path */
3473:../tasks/SDMMC/ff.c **** )
3474:../tasks/SDMMC/ff.c **** {
 8815              		.loc 1 3474 0
 8816              		.cfi_startproc
 8817              		@ args = 0, pretend = 0, frame = 592
 8818              		@ frame_needed = 1, uses_anonymous_args = 0
 8819 38d4 80B5     		push	{r7, lr}
 8820              		.cfi_def_cfa_offset 8
 8821              		.cfi_offset 7, -8
 8822              		.cfi_offset 14, -4
 8823 38d6 ADF5147D 		sub	sp, sp, #592
 8824              		.cfi_def_cfa_offset 600
 8825 38da 00AF     		add	r7, sp, #0
 8826              		.cfi_def_cfa_register 7
 8827 38dc 3B1D     		adds	r3, r7, #4
 8828 38de 1860     		str	r0, [r3]
3475:../tasks/SDMMC/ff.c **** 	FRESULT res;
3476:../tasks/SDMMC/ff.c **** 	DIR dj;
3477:../tasks/SDMMC/ff.c **** 	BYTE *dir, n;
3478:../tasks/SDMMC/ff.c **** 	DWORD dsc, dcl, pcl, tm = get_fattime();
 8829              		.loc 1 3478 0
 8830 38e0 FFF7FEFF 		bl	get_fattime
 8831 38e4 C7F84002 		str	r0, [r7, #576]
3479:../tasks/SDMMC/ff.c **** 	DEF_NAMEBUF;
3480:../tasks/SDMMC/ff.c **** 
3481:../tasks/SDMMC/ff.c **** 
3482:../tasks/SDMMC/ff.c **** 	/* Get logical drive number */
3483:../tasks/SDMMC/ff.c **** 	res = find_volume(&dj.fs, &path, 1);
 8832              		.loc 1 3483 0
 8833 38e8 07F11803 		add	r3, r7, #24
 8834 38ec 03F50072 		add	r2, r3, #512
 8835 38f0 3B1D     		adds	r3, r7, #4
 8836 38f2 1046     		mov	r0, r2
 8837 38f4 1946     		mov	r1, r3
 8838 38f6 0122     		movs	r2, #1
 8839 38f8 FDF7D2FF 		bl	find_volume
 8840 38fc 0346     		mov	r3, r0
 8841 38fe 87F84F32 		strb	r3, [r7, #591]
3484:../tasks/SDMMC/ff.c **** 	if (res == FR_OK) {
 8842              		.loc 1 3484 0
 8843 3902 97F84F32 		ldrb	r3, [r7, #591]	@ zero_extendqisi2
 8844 3906 002B     		cmp	r3, #0
 8845 3908 40F07A81 		bne	.L528
3485:../tasks/SDMMC/ff.c **** 		INIT_BUF(dj);
 8846              		.loc 1 3485 0
 8847 390c 07F11803 		add	r3, r7, #24
 8848 3910 07F10C02 		add	r2, r7, #12
 8849 3914 C3F81822 		str	r2, [r3, #536]
3486:../tasks/SDMMC/ff.c **** 		res = follow_path(&dj, path);			/* Follow the file path */
 8850              		.loc 1 3486 0
 8851 3918 3B1D     		adds	r3, r7, #4
 8852 391a 1B68     		ldr	r3, [r3]
 8853 391c 07F11802 		add	r2, r7, #24
 8854 3920 1046     		mov	r0, r2
 8855 3922 1946     		mov	r1, r3
 8856 3924 FDF7C8FE 		bl	follow_path
 8857 3928 0346     		mov	r3, r0
 8858 392a 87F84F32 		strb	r3, [r7, #591]
3487:../tasks/SDMMC/ff.c **** 		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8859              		.loc 1 3487 0
 8860 392e 97F84F32 		ldrb	r3, [r7, #591]	@ zero_extendqisi2
 8861 3932 002B     		cmp	r3, #0
 8862 3934 02D1     		bne	.L529
 8863              		.loc 1 3487 0 is_stmt 0 discriminator 1
 8864 3936 0823     		movs	r3, #8
 8865 3938 87F84F32 		strb	r3, [r7, #591]
 8866              	.L529:
3488:../tasks/SDMMC/ff.c **** 		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
 8867              		.loc 1 3488 0 is_stmt 1
 8868 393c 97F84F32 		ldrb	r3, [r7, #591]	@ zero_extendqisi2
 8869 3940 042B     		cmp	r3, #4
 8870 3942 0CD1     		bne	.L530
 8871              		.loc 1 3488 0 is_stmt 0 discriminator 1
 8872 3944 07F11803 		add	r3, r7, #24
 8873 3948 D3F81832 		ldr	r3, [r3, #536]
 8874 394c 0B33     		adds	r3, r3, #11
 8875 394e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8876 3950 03F02003 		and	r3, r3, #32
 8877 3954 002B     		cmp	r3, #0
 8878 3956 02D0     		beq	.L530
3489:../tasks/SDMMC/ff.c **** 			res = FR_INVALID_NAME;
 8879              		.loc 1 3489 0 is_stmt 1
 8880 3958 0623     		movs	r3, #6
 8881 395a 87F84F32 		strb	r3, [r7, #591]
 8882              	.L530:
3490:../tasks/SDMMC/ff.c **** 		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8883              		.loc 1 3490 0
 8884 395e 97F84F32 		ldrb	r3, [r7, #591]	@ zero_extendqisi2
 8885 3962 042B     		cmp	r3, #4
 8886 3964 40F04C81 		bne	.L528
3491:../tasks/SDMMC/ff.c **** 			dcl = create_chain(dj.fs, 0);		/* Allocate a cluster for the new directory table */
 8887              		.loc 1 3491 0
 8888 3968 07F11803 		add	r3, r7, #24
 8889 396c D3F80032 		ldr	r3, [r3, #512]
 8890 3970 1846     		mov	r0, r3
 8891 3972 0021     		movs	r1, #0
 8892 3974 FDF7F8F8 		bl	create_chain
 8893 3978 C7F83C02 		str	r0, [r7, #572]
3492:../tasks/SDMMC/ff.c **** 			res = FR_OK;
 8894              		.loc 1 3492 0
 8895 397c 0023     		movs	r3, #0
 8896 397e 87F84F32 		strb	r3, [r7, #591]
3493:../tasks/SDMMC/ff.c **** 			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8897              		.loc 1 3493 0
 8898 3982 D7F83C32 		ldr	r3, [r7, #572]
 8899 3986 002B     		cmp	r3, #0
 8900 3988 02D1     		bne	.L531
 8901              		.loc 1 3493 0 is_stmt 0 discriminator 1
 8902 398a 0723     		movs	r3, #7
 8903 398c 87F84F32 		strb	r3, [r7, #591]
 8904              	.L531:
3494:../tasks/SDMMC/ff.c **** 			if (dcl == 1) res = FR_INT_ERR;
 8905              		.loc 1 3494 0 is_stmt 1
 8906 3990 D7F83C32 		ldr	r3, [r7, #572]
 8907 3994 012B     		cmp	r3, #1
 8908 3996 02D1     		bne	.L532
 8909              		.loc 1 3494 0 is_stmt 0 discriminator 1
 8910 3998 0223     		movs	r3, #2
 8911 399a 87F84F32 		strb	r3, [r7, #591]
 8912              	.L532:
3495:../tasks/SDMMC/ff.c **** 			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8913              		.loc 1 3495 0 is_stmt 1
 8914 399e D7F83C32 		ldr	r3, [r7, #572]
 8915 39a2 B3F1FF3F 		cmp	r3, #-1
 8916 39a6 02D1     		bne	.L533
 8917              		.loc 1 3495 0 is_stmt 0 discriminator 1
 8918 39a8 0123     		movs	r3, #1
 8919 39aa 87F84F32 		strb	r3, [r7, #591]
 8920              	.L533:
3496:../tasks/SDMMC/ff.c **** 			if (res == FR_OK)					/* Flush FAT */
 8921              		.loc 1 3496 0 is_stmt 1
 8922 39ae 97F84F32 		ldrb	r3, [r7, #591]	@ zero_extendqisi2
 8923 39b2 002B     		cmp	r3, #0
 8924 39b4 09D1     		bne	.L534
3497:../tasks/SDMMC/ff.c **** 				res = sync_window(dj.fs);
 8925              		.loc 1 3497 0
 8926 39b6 07F11803 		add	r3, r7, #24
 8927 39ba D3F80032 		ldr	r3, [r3, #512]
 8928 39be 1846     		mov	r0, r3
 8929 39c0 FCF788FD 		bl	sync_window
 8930 39c4 0346     		mov	r3, r0
 8931 39c6 87F84F32 		strb	r3, [r7, #591]
 8932              	.L534:
3498:../tasks/SDMMC/ff.c **** 			if (res == FR_OK) {					/* Initialize the new directory table */
 8933              		.loc 1 3498 0
 8934 39ca 97F84F32 		ldrb	r3, [r7, #591]	@ zero_extendqisi2
 8935 39ce 002B     		cmp	r3, #0
 8936 39d0 40F0B980 		bne	.L535
3499:../tasks/SDMMC/ff.c **** 				dsc = clust2sect(dj.fs, dcl);
 8937              		.loc 1 3499 0
 8938 39d4 07F11803 		add	r3, r7, #24
 8939 39d8 D3F80032 		ldr	r3, [r3, #512]
 8940 39dc 1846     		mov	r0, r3
 8941 39de D7F83C12 		ldr	r1, [r7, #572]
 8942 39e2 FFF7FEFF 		bl	clust2sect
 8943 39e6 C7F84802 		str	r0, [r7, #584]
3500:../tasks/SDMMC/ff.c **** 				dir = dj.fs->win.d8;
 8944              		.loc 1 3500 0
 8945 39ea 07F11803 		add	r3, r7, #24
 8946 39ee D3F80032 		ldr	r3, [r3, #512]
 8947 39f2 C7F83832 		str	r3, [r7, #568]
3501:../tasks/SDMMC/ff.c **** 				mem_set(dir, 0, SS(dj.fs));
 8948              		.loc 1 3501 0
 8949 39f6 D7F83802 		ldr	r0, [r7, #568]
 8950 39fa 0021     		movs	r1, #0
 8951 39fc 4FF40072 		mov	r2, #512
 8952 3a00 FCF71CFB 		bl	mem_set
3502:../tasks/SDMMC/ff.c **** 				mem_set(dir+DIR_Name, ' ', 11);	/* Create "." entry */
 8953              		.loc 1 3502 0
 8954 3a04 D7F83802 		ldr	r0, [r7, #568]
 8955 3a08 2021     		movs	r1, #32
 8956 3a0a 0B22     		movs	r2, #11
 8957 3a0c FCF716FB 		bl	mem_set
3503:../tasks/SDMMC/ff.c **** 				dir[DIR_Name] = '.';
 8958              		.loc 1 3503 0
 8959 3a10 D7F83832 		ldr	r3, [r7, #568]
 8960 3a14 2E22     		movs	r2, #46
 8961 3a16 1A70     		strb	r2, [r3]
3504:../tasks/SDMMC/ff.c **** 				dir[DIR_Attr] = AM_DIR;
 8962              		.loc 1 3504 0
 8963 3a18 D7F83832 		ldr	r3, [r7, #568]
 8964 3a1c 0B33     		adds	r3, r3, #11
 8965 3a1e 1022     		movs	r2, #16
 8966 3a20 1A70     		strb	r2, [r3]
3505:../tasks/SDMMC/ff.c **** 				ST_DWORD(dir+DIR_WrtTime, tm);
 8967              		.loc 1 3505 0
 8968 3a22 D7F83832 		ldr	r3, [r7, #568]
 8969 3a26 1633     		adds	r3, r3, #22
 8970 3a28 D7F84022 		ldr	r2, [r7, #576]
 8971 3a2c D2B2     		uxtb	r2, r2
 8972 3a2e 1A70     		strb	r2, [r3]
 8973 3a30 D7F83832 		ldr	r3, [r7, #568]
 8974 3a34 1733     		adds	r3, r3, #23
 8975 3a36 D7F84022 		ldr	r2, [r7, #576]
 8976 3a3a 92B2     		uxth	r2, r2
 8977 3a3c 120A     		lsrs	r2, r2, #8
 8978 3a3e 92B2     		uxth	r2, r2
 8979 3a40 D2B2     		uxtb	r2, r2
 8980 3a42 1A70     		strb	r2, [r3]
 8981 3a44 D7F83832 		ldr	r3, [r7, #568]
 8982 3a48 1833     		adds	r3, r3, #24
 8983 3a4a D7F84022 		ldr	r2, [r7, #576]
 8984 3a4e 120C     		lsrs	r2, r2, #16
 8985 3a50 D2B2     		uxtb	r2, r2
 8986 3a52 1A70     		strb	r2, [r3]
 8987 3a54 D7F83832 		ldr	r3, [r7, #568]
 8988 3a58 1933     		adds	r3, r3, #25
 8989 3a5a D7F84022 		ldr	r2, [r7, #576]
 8990 3a5e 120E     		lsrs	r2, r2, #24
 8991 3a60 D2B2     		uxtb	r2, r2
 8992 3a62 1A70     		strb	r2, [r3]
3506:../tasks/SDMMC/ff.c **** 				st_clust(dir, dcl);
 8993              		.loc 1 3506 0
 8994 3a64 D7F83802 		ldr	r0, [r7, #568]
 8995 3a68 D7F83C12 		ldr	r1, [r7, #572]
 8996 3a6c FDF750FB 		bl	st_clust
3507:../tasks/SDMMC/ff.c **** 				mem_cpy(dir+SZ_DIR, dir, SZ_DIR); 	/* Create ".." entry */
 8997              		.loc 1 3507 0
 8998 3a70 D7F83832 		ldr	r3, [r7, #568]
 8999 3a74 2033     		adds	r3, r3, #32
 9000 3a76 1846     		mov	r0, r3
 9001 3a78 D7F83812 		ldr	r1, [r7, #568]
 9002 3a7c 2022     		movs	r2, #32
 9003 3a7e FCF7BFFA 		bl	mem_cpy
3508:../tasks/SDMMC/ff.c **** 				dir[SZ_DIR+1] = '.'; pcl = dj.sclust;
 9004              		.loc 1 3508 0
 9005 3a82 D7F83832 		ldr	r3, [r7, #568]
 9006 3a86 2133     		adds	r3, r3, #33
 9007 3a88 2E22     		movs	r2, #46
 9008 3a8a 1A70     		strb	r2, [r3]
 9009 3a8c 07F11803 		add	r3, r7, #24
 9010 3a90 D3F80832 		ldr	r3, [r3, #520]
 9011 3a94 C7F84432 		str	r3, [r7, #580]
3509:../tasks/SDMMC/ff.c **** 				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
 9012              		.loc 1 3509 0
 9013 3a98 07F11803 		add	r3, r7, #24
 9014 3a9c D3F80032 		ldr	r3, [r3, #512]
 9015 3aa0 93F80032 		ldrb	r3, [r3, #512]	@ zero_extendqisi2
 9016 3aa4 032B     		cmp	r3, #3
 9017 3aa6 0CD1     		bne	.L536
 9018              		.loc 1 3509 0 is_stmt 0 discriminator 1
 9019 3aa8 07F11803 		add	r3, r7, #24
 9020 3aac D3F80032 		ldr	r3, [r3, #512]
 9021 3ab0 D3F82822 		ldr	r2, [r3, #552]
 9022 3ab4 D7F84432 		ldr	r3, [r7, #580]
 9023 3ab8 9A42     		cmp	r2, r3
 9024 3aba 02D1     		bne	.L536
3510:../tasks/SDMMC/ff.c **** 					pcl = 0;
 9025              		.loc 1 3510 0 is_stmt 1
 9026 3abc 0023     		movs	r3, #0
 9027 3abe C7F84432 		str	r3, [r7, #580]
 9028              	.L536:
3511:../tasks/SDMMC/ff.c **** 				st_clust(dir+SZ_DIR, pcl);
 9029              		.loc 1 3511 0
 9030 3ac2 D7F83832 		ldr	r3, [r7, #568]
 9031 3ac6 2033     		adds	r3, r3, #32
 9032 3ac8 1846     		mov	r0, r3
 9033 3aca D7F84412 		ldr	r1, [r7, #580]
 9034 3ace FDF71FFB 		bl	st_clust
3512:../tasks/SDMMC/ff.c **** 				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 9035              		.loc 1 3512 0
 9036 3ad2 07F11803 		add	r3, r7, #24
 9037 3ad6 D3F80032 		ldr	r3, [r3, #512]
 9038 3ada 93F80232 		ldrb	r3, [r3, #514]
 9039 3ade 87F84E32 		strb	r3, [r7, #590]
 9040 3ae2 2CE0     		b	.L537
 9041              	.L539:
3513:../tasks/SDMMC/ff.c **** 					dj.fs->winsect = dsc++;
 9042              		.loc 1 3513 0
 9043 3ae4 07F11803 		add	r3, r7, #24
 9044 3ae8 D3F80022 		ldr	r2, [r3, #512]
 9045 3aec D7F84832 		ldr	r3, [r7, #584]
 9046 3af0 591C     		adds	r1, r3, #1
 9047 3af2 C7F84812 		str	r1, [r7, #584]
 9048 3af6 C2F83032 		str	r3, [r2, #560]
3514:../tasks/SDMMC/ff.c **** 					dj.fs->wflag = 1;
 9049              		.loc 1 3514 0
 9050 3afa 07F11803 		add	r3, r7, #24
 9051 3afe D3F80032 		ldr	r3, [r3, #512]
 9052 3b02 0122     		movs	r2, #1
 9053 3b04 83F80422 		strb	r2, [r3, #516]
3515:../tasks/SDMMC/ff.c **** 					res = sync_window(dj.fs);
 9054              		.loc 1 3515 0
 9055 3b08 07F11803 		add	r3, r7, #24
 9056 3b0c D3F80032 		ldr	r3, [r3, #512]
 9057 3b10 1846     		mov	r0, r3
 9058 3b12 FCF7DFFC 		bl	sync_window
 9059 3b16 0346     		mov	r3, r0
 9060 3b18 87F84F32 		strb	r3, [r7, #591]
3516:../tasks/SDMMC/ff.c **** 					if (res != FR_OK) break;
 9061              		.loc 1 3516 0
 9062 3b1c 97F84F32 		ldrb	r3, [r7, #591]	@ zero_extendqisi2
 9063 3b20 002B     		cmp	r3, #0
 9064 3b22 00D0     		beq	.L538
 9065              		.loc 1 3516 0 is_stmt 0 discriminator 1
 9066 3b24 0FE0     		b	.L535
 9067              	.L538:
3517:../tasks/SDMMC/ff.c **** 					mem_set(dir, 0, SS(dj.fs));
 9068              		.loc 1 3517 0 is_stmt 1
 9069 3b26 D7F83802 		ldr	r0, [r7, #568]
 9070 3b2a 0021     		movs	r1, #0
 9071 3b2c 4FF40072 		mov	r2, #512
 9072 3b30 FCF784FA 		bl	mem_set
3512:../tasks/SDMMC/ff.c **** 					dj.fs->winsect = dsc++;
 9073              		.loc 1 3512 0
 9074 3b34 97F84E32 		ldrb	r3, [r7, #590]	@ zero_extendqisi2
 9075 3b38 013B     		subs	r3, r3, #1
 9076 3b3a 87F84E32 		strb	r3, [r7, #590]
 9077              	.L537:
3512:../tasks/SDMMC/ff.c **** 					dj.fs->winsect = dsc++;
 9078              		.loc 1 3512 0 is_stmt 0 discriminator 1
 9079 3b3e 97F84E32 		ldrb	r3, [r7, #590]	@ zero_extendqisi2
 9080 3b42 002B     		cmp	r3, #0
 9081 3b44 CED1     		bne	.L539
 9082              	.L535:
3518:../tasks/SDMMC/ff.c **** 				}
3519:../tasks/SDMMC/ff.c **** 			}
3520:../tasks/SDMMC/ff.c **** 			if (res == FR_OK) res = dir_register(&dj);	/* Register the object to the directoy */
 9083              		.loc 1 3520 0 is_stmt 1
 9084 3b46 97F84F32 		ldrb	r3, [r7, #591]	@ zero_extendqisi2
 9085 3b4a 002B     		cmp	r3, #0
 9086 3b4c 07D1     		bne	.L540
 9087              		.loc 1 3520 0 is_stmt 0 discriminator 1
 9088 3b4e 07F11803 		add	r3, r7, #24
 9089 3b52 1846     		mov	r0, r3
 9090 3b54 FDF7A8FB 		bl	dir_register
 9091 3b58 0346     		mov	r3, r0
 9092 3b5a 87F84F32 		strb	r3, [r7, #591]
 9093              	.L540:
3521:../tasks/SDMMC/ff.c **** 			if (res != FR_OK) {
 9094              		.loc 1 3521 0 is_stmt 1
 9095 3b5e 97F84F32 		ldrb	r3, [r7, #591]	@ zero_extendqisi2
 9096 3b62 002B     		cmp	r3, #0
 9097 3b64 09D0     		beq	.L541
3522:../tasks/SDMMC/ff.c **** 				remove_chain(dj.fs, dcl);			/* Could not register, remove cluster chain */
 9098              		.loc 1 3522 0
 9099 3b66 07F11803 		add	r3, r7, #24
 9100 3b6a D3F80032 		ldr	r3, [r3, #512]
 9101 3b6e 1846     		mov	r0, r3
 9102 3b70 D7F83C12 		ldr	r1, [r7, #572]
 9103 3b74 FCF7A0FF 		bl	remove_chain
 9104 3b78 42E0     		b	.L528
 9105              	.L541:
3523:../tasks/SDMMC/ff.c **** 			} else {
3524:../tasks/SDMMC/ff.c **** 				dir = dj.dir;
 9106              		.loc 1 3524 0
 9107 3b7a 07F11803 		add	r3, r7, #24
 9108 3b7e D3F81432 		ldr	r3, [r3, #532]
 9109 3b82 C7F83832 		str	r3, [r7, #568]
3525:../tasks/SDMMC/ff.c **** 				dir[DIR_Attr] = AM_DIR;				/* Attribute */
 9110              		.loc 1 3525 0
 9111 3b86 D7F83832 		ldr	r3, [r7, #568]
 9112 3b8a 0B33     		adds	r3, r3, #11
 9113 3b8c 1022     		movs	r2, #16
 9114 3b8e 1A70     		strb	r2, [r3]
3526:../tasks/SDMMC/ff.c **** 				ST_DWORD(dir+DIR_WrtTime, tm);		/* Created time */
 9115              		.loc 1 3526 0
 9116 3b90 D7F83832 		ldr	r3, [r7, #568]
 9117 3b94 1633     		adds	r3, r3, #22
 9118 3b96 D7F84022 		ldr	r2, [r7, #576]
 9119 3b9a D2B2     		uxtb	r2, r2
 9120 3b9c 1A70     		strb	r2, [r3]
 9121 3b9e D7F83832 		ldr	r3, [r7, #568]
 9122 3ba2 1733     		adds	r3, r3, #23
 9123 3ba4 D7F84022 		ldr	r2, [r7, #576]
 9124 3ba8 92B2     		uxth	r2, r2
 9125 3baa 120A     		lsrs	r2, r2, #8
 9126 3bac 92B2     		uxth	r2, r2
 9127 3bae D2B2     		uxtb	r2, r2
 9128 3bb0 1A70     		strb	r2, [r3]
 9129 3bb2 D7F83832 		ldr	r3, [r7, #568]
 9130 3bb6 1833     		adds	r3, r3, #24
 9131 3bb8 D7F84022 		ldr	r2, [r7, #576]
 9132 3bbc 120C     		lsrs	r2, r2, #16
 9133 3bbe D2B2     		uxtb	r2, r2
 9134 3bc0 1A70     		strb	r2, [r3]
 9135 3bc2 D7F83832 		ldr	r3, [r7, #568]
 9136 3bc6 1933     		adds	r3, r3, #25
 9137 3bc8 D7F84022 		ldr	r2, [r7, #576]
 9138 3bcc 120E     		lsrs	r2, r2, #24
 9139 3bce D2B2     		uxtb	r2, r2
 9140 3bd0 1A70     		strb	r2, [r3]
3527:../tasks/SDMMC/ff.c **** 				st_clust(dir, dcl);					/* Table start cluster */
 9141              		.loc 1 3527 0
 9142 3bd2 D7F83802 		ldr	r0, [r7, #568]
 9143 3bd6 D7F83C12 		ldr	r1, [r7, #572]
 9144 3bda FDF799FA 		bl	st_clust
3528:../tasks/SDMMC/ff.c **** 				dj.fs->wflag = 1;
 9145              		.loc 1 3528 0
 9146 3bde 07F11803 		add	r3, r7, #24
 9147 3be2 D3F80032 		ldr	r3, [r3, #512]
 9148 3be6 0122     		movs	r2, #1
 9149 3be8 83F80422 		strb	r2, [r3, #516]
3529:../tasks/SDMMC/ff.c **** 				res = sync_fs(dj.fs);
 9150              		.loc 1 3529 0
 9151 3bec 07F11803 		add	r3, r7, #24
 9152 3bf0 D3F80032 		ldr	r3, [r3, #512]
 9153 3bf4 1846     		mov	r0, r3
 9154 3bf6 FCF7E3FC 		bl	sync_fs
 9155 3bfa 0346     		mov	r3, r0
 9156 3bfc 87F84F32 		strb	r3, [r7, #591]
 9157              	.L528:
3530:../tasks/SDMMC/ff.c **** 			}
3531:../tasks/SDMMC/ff.c **** 		}
3532:../tasks/SDMMC/ff.c **** 		FREE_BUF();
3533:../tasks/SDMMC/ff.c **** 	}
3534:../tasks/SDMMC/ff.c **** 
3535:../tasks/SDMMC/ff.c **** 	LEAVE_FF(dj.fs, res);
 9158              		.loc 1 3535 0
 9159 3c00 97F84F32 		ldrb	r3, [r7, #591]	@ zero_extendqisi2
3536:../tasks/SDMMC/ff.c **** }
 9160              		.loc 1 3536 0
 9161 3c04 1846     		mov	r0, r3
 9162 3c06 07F51477 		add	r7, r7, #592
 9163 3c0a BD46     		mov	sp, r7
 9164              		@ sp needed
 9165 3c0c 80BD     		pop	{r7, pc}
 9166              		.cfi_endproc
 9167              	.LFE105:
 9169 3c0e 00BF     		.align	2
 9170              		.global	f_chmod
 9171              		.thumb
 9172              		.thumb_func
 9174              	f_chmod:
 9175              	.LFB106:
3537:../tasks/SDMMC/ff.c **** 
3538:../tasks/SDMMC/ff.c **** 
3539:../tasks/SDMMC/ff.c **** 
3540:../tasks/SDMMC/ff.c **** 
3541:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
3542:../tasks/SDMMC/ff.c **** /* Change Attribute                                                      */
3543:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
3544:../tasks/SDMMC/ff.c **** 
3545:../tasks/SDMMC/ff.c **** FRESULT f_chmod (
3546:../tasks/SDMMC/ff.c **** 	const TCHAR* path,	/* Pointer to the file path */
3547:../tasks/SDMMC/ff.c **** 	BYTE value,			/* Attribute bits */
3548:../tasks/SDMMC/ff.c **** 	BYTE mask			/* Attribute mask to change */
3549:../tasks/SDMMC/ff.c **** )
3550:../tasks/SDMMC/ff.c **** {
 9176              		.loc 1 3550 0
 9177              		.cfi_startproc
 9178              		@ args = 0, pretend = 0, frame = 576
 9179              		@ frame_needed = 1, uses_anonymous_args = 0
 9180 3c10 80B5     		push	{r7, lr}
 9181              		.cfi_def_cfa_offset 8
 9182              		.cfi_offset 7, -8
 9183              		.cfi_offset 14, -4
 9184 3c12 ADF5107D 		sub	sp, sp, #576
 9185              		.cfi_def_cfa_offset 584
 9186 3c16 00AF     		add	r7, sp, #0
 9187              		.cfi_def_cfa_register 7
 9188 3c18 3B1D     		adds	r3, r7, #4
 9189 3c1a 1860     		str	r0, [r3]
 9190 3c1c FB1C     		adds	r3, r7, #3
 9191 3c1e 1970     		strb	r1, [r3]
 9192 3c20 BB1C     		adds	r3, r7, #2
 9193 3c22 1A70     		strb	r2, [r3]
3551:../tasks/SDMMC/ff.c **** 	FRESULT res;
3552:../tasks/SDMMC/ff.c **** 	DIR dj;
3553:../tasks/SDMMC/ff.c **** 	BYTE *dir;
3554:../tasks/SDMMC/ff.c **** 	DEF_NAMEBUF;
3555:../tasks/SDMMC/ff.c **** 
3556:../tasks/SDMMC/ff.c **** 
3557:../tasks/SDMMC/ff.c **** 	/* Get logical drive number */
3558:../tasks/SDMMC/ff.c **** 	res = find_volume(&dj.fs, &path, 1);
 9194              		.loc 1 3558 0
 9195 3c24 07F11803 		add	r3, r7, #24
 9196 3c28 03F50072 		add	r2, r3, #512
 9197 3c2c 3B1D     		adds	r3, r7, #4
 9198 3c2e 1046     		mov	r0, r2
 9199 3c30 1946     		mov	r1, r3
 9200 3c32 0122     		movs	r2, #1
 9201 3c34 FDF734FE 		bl	find_volume
 9202 3c38 0346     		mov	r3, r0
 9203 3c3a 87F83F32 		strb	r3, [r7, #575]
3559:../tasks/SDMMC/ff.c **** 	if (res == FR_OK) {
 9204              		.loc 1 3559 0
 9205 3c3e 97F83F32 		ldrb	r3, [r7, #575]	@ zero_extendqisi2
 9206 3c42 002B     		cmp	r3, #0
 9207 3c44 60D1     		bne	.L544
3560:../tasks/SDMMC/ff.c **** 		INIT_BUF(dj);
 9208              		.loc 1 3560 0
 9209 3c46 07F11803 		add	r3, r7, #24
 9210 3c4a 07F10C02 		add	r2, r7, #12
 9211 3c4e C3F81822 		str	r2, [r3, #536]
3561:../tasks/SDMMC/ff.c **** 		res = follow_path(&dj, path);		/* Follow the file path */
 9212              		.loc 1 3561 0
 9213 3c52 3B1D     		adds	r3, r7, #4
 9214 3c54 1B68     		ldr	r3, [r3]
 9215 3c56 07F11802 		add	r2, r7, #24
 9216 3c5a 1046     		mov	r0, r2
 9217 3c5c 1946     		mov	r1, r3
 9218 3c5e FDF72BFD 		bl	follow_path
 9219 3c62 0346     		mov	r3, r0
 9220 3c64 87F83F32 		strb	r3, [r7, #575]
3562:../tasks/SDMMC/ff.c **** 		FREE_BUF();
3563:../tasks/SDMMC/ff.c **** 		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
 9221              		.loc 1 3563 0
 9222 3c68 97F83F32 		ldrb	r3, [r7, #575]	@ zero_extendqisi2
 9223 3c6c 002B     		cmp	r3, #0
 9224 3c6e 0CD1     		bne	.L545
 9225              		.loc 1 3563 0 is_stmt 0 discriminator 1
 9226 3c70 07F11803 		add	r3, r7, #24
 9227 3c74 D3F81832 		ldr	r3, [r3, #536]
 9228 3c78 0B33     		adds	r3, r3, #11
 9229 3c7a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9230 3c7c 03F02003 		and	r3, r3, #32
 9231 3c80 002B     		cmp	r3, #0
 9232 3c82 02D0     		beq	.L545
3564:../tasks/SDMMC/ff.c **** 			res = FR_INVALID_NAME;
 9233              		.loc 1 3564 0 is_stmt 1
 9234 3c84 0623     		movs	r3, #6
 9235 3c86 87F83F32 		strb	r3, [r7, #575]
 9236              	.L545:
3565:../tasks/SDMMC/ff.c **** 		if (res == FR_OK) {
 9237              		.loc 1 3565 0
 9238 3c8a 97F83F32 		ldrb	r3, [r7, #575]	@ zero_extendqisi2
 9239 3c8e 002B     		cmp	r3, #0
 9240 3c90 3AD1     		bne	.L544
3566:../tasks/SDMMC/ff.c **** 			dir = dj.dir;
 9241              		.loc 1 3566 0
 9242 3c92 07F11803 		add	r3, r7, #24
 9243 3c96 D3F81432 		ldr	r3, [r3, #532]
 9244 3c9a C7F83832 		str	r3, [r7, #568]
3567:../tasks/SDMMC/ff.c **** 			if (!dir) {						/* Is it a root directory? */
 9245              		.loc 1 3567 0
 9246 3c9e D7F83832 		ldr	r3, [r7, #568]
 9247 3ca2 002B     		cmp	r3, #0
 9248 3ca4 03D1     		bne	.L546
3568:../tasks/SDMMC/ff.c **** 				res = FR_INVALID_NAME;
 9249              		.loc 1 3568 0
 9250 3ca6 0623     		movs	r3, #6
 9251 3ca8 87F83F32 		strb	r3, [r7, #575]
 9252 3cac 2CE0     		b	.L544
 9253              	.L546:
3569:../tasks/SDMMC/ff.c **** 			} else {						/* File or sub directory */
3570:../tasks/SDMMC/ff.c **** 				mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
 9254              		.loc 1 3570 0
 9255 3cae BB1C     		adds	r3, r7, #2
 9256 3cb0 BA1C     		adds	r2, r7, #2
 9257 3cb2 1278     		ldrb	r2, [r2]
 9258 3cb4 02F02702 		and	r2, r2, #39
 9259 3cb8 1A70     		strb	r2, [r3]
3571:../tasks/SDMMC/ff.c **** 				dir[DIR_Attr] = (value & mask) | (dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
 9260              		.loc 1 3571 0
 9261 3cba D7F83832 		ldr	r3, [r7, #568]
 9262 3cbe 0B33     		adds	r3, r3, #11
 9263 3cc0 F91C     		adds	r1, r7, #3
 9264 3cc2 BA1C     		adds	r2, r7, #2
 9265 3cc4 0978     		ldrb	r1, [r1]
 9266 3cc6 1278     		ldrb	r2, [r2]
 9267 3cc8 0A40     		ands	r2, r2, r1
 9268 3cca D1B2     		uxtb	r1, r2
 9269 3ccc D7F83822 		ldr	r2, [r7, #568]
 9270 3cd0 0B32     		adds	r2, r2, #11
 9271 3cd2 1078     		ldrb	r0, [r2]	@ zero_extendqisi2
 9272 3cd4 BA1C     		adds	r2, r7, #2
 9273 3cd6 1278     		ldrb	r2, [r2]
 9274 3cd8 D243     		mvns	r2, r2
 9275 3cda D2B2     		uxtb	r2, r2
 9276 3cdc 0240     		ands	r2, r2, r0
 9277 3cde D2B2     		uxtb	r2, r2
 9278 3ce0 0A43     		orrs	r2, r2, r1
 9279 3ce2 D2B2     		uxtb	r2, r2
 9280 3ce4 1A70     		strb	r2, [r3]
3572:../tasks/SDMMC/ff.c **** 				dj.fs->wflag = 1;
 9281              		.loc 1 3572 0
 9282 3ce6 07F11803 		add	r3, r7, #24
 9283 3cea D3F80032 		ldr	r3, [r3, #512]
 9284 3cee 0122     		movs	r2, #1
 9285 3cf0 83F80422 		strb	r2, [r3, #516]
3573:../tasks/SDMMC/ff.c **** 				res = sync_fs(dj.fs);
 9286              		.loc 1 3573 0
 9287 3cf4 07F11803 		add	r3, r7, #24
 9288 3cf8 D3F80032 		ldr	r3, [r3, #512]
 9289 3cfc 1846     		mov	r0, r3
 9290 3cfe FCF75FFC 		bl	sync_fs
 9291 3d02 0346     		mov	r3, r0
 9292 3d04 87F83F32 		strb	r3, [r7, #575]
 9293              	.L544:
3574:../tasks/SDMMC/ff.c **** 			}
3575:../tasks/SDMMC/ff.c **** 		}
3576:../tasks/SDMMC/ff.c **** 	}
3577:../tasks/SDMMC/ff.c **** 
3578:../tasks/SDMMC/ff.c **** 	LEAVE_FF(dj.fs, res);
 9294              		.loc 1 3578 0
 9295 3d08 97F83F32 		ldrb	r3, [r7, #575]	@ zero_extendqisi2
3579:../tasks/SDMMC/ff.c **** }
 9296              		.loc 1 3579 0
 9297 3d0c 1846     		mov	r0, r3
 9298 3d0e 07F51077 		add	r7, r7, #576
 9299 3d12 BD46     		mov	sp, r7
 9300              		@ sp needed
 9301 3d14 80BD     		pop	{r7, pc}
 9302              		.cfi_endproc
 9303              	.LFE106:
 9305 3d16 00BF     		.align	2
 9306              		.global	f_utime
 9307              		.thumb
 9308              		.thumb_func
 9310              	f_utime:
 9311              	.LFB107:
3580:../tasks/SDMMC/ff.c **** 
3581:../tasks/SDMMC/ff.c **** 
3582:../tasks/SDMMC/ff.c **** 
3583:../tasks/SDMMC/ff.c **** 
3584:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
3585:../tasks/SDMMC/ff.c **** /* Change Timestamp                                                      */
3586:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
3587:../tasks/SDMMC/ff.c **** 
3588:../tasks/SDMMC/ff.c **** FRESULT f_utime (
3589:../tasks/SDMMC/ff.c **** 	const TCHAR* path,	/* Pointer to the file/directory name */
3590:../tasks/SDMMC/ff.c **** 	const FILINFO* fno	/* Pointer to the time stamp to be set */
3591:../tasks/SDMMC/ff.c **** )
3592:../tasks/SDMMC/ff.c **** {
 9312              		.loc 1 3592 0
 9313              		.cfi_startproc
 9314              		@ args = 0, pretend = 0, frame = 576
 9315              		@ frame_needed = 1, uses_anonymous_args = 0
 9316 3d18 80B5     		push	{r7, lr}
 9317              		.cfi_def_cfa_offset 8
 9318              		.cfi_offset 7, -8
 9319              		.cfi_offset 14, -4
 9320 3d1a ADF5107D 		sub	sp, sp, #576
 9321              		.cfi_def_cfa_offset 584
 9322 3d1e 00AF     		add	r7, sp, #0
 9323              		.cfi_def_cfa_register 7
 9324 3d20 3B1D     		adds	r3, r7, #4
 9325 3d22 1860     		str	r0, [r3]
 9326 3d24 3B46     		mov	r3, r7
 9327 3d26 1960     		str	r1, [r3]
3593:../tasks/SDMMC/ff.c **** 	FRESULT res;
3594:../tasks/SDMMC/ff.c **** 	DIR dj;
3595:../tasks/SDMMC/ff.c **** 	BYTE *dir;
3596:../tasks/SDMMC/ff.c **** 	DEF_NAMEBUF;
3597:../tasks/SDMMC/ff.c **** 
3598:../tasks/SDMMC/ff.c **** 
3599:../tasks/SDMMC/ff.c **** 	/* Get logical drive number */
3600:../tasks/SDMMC/ff.c **** 	res = find_volume(&dj.fs, &path, 1);
 9328              		.loc 1 3600 0
 9329 3d28 07F11803 		add	r3, r7, #24
 9330 3d2c 03F50072 		add	r2, r3, #512
 9331 3d30 3B1D     		adds	r3, r7, #4
 9332 3d32 1046     		mov	r0, r2
 9333 3d34 1946     		mov	r1, r3
 9334 3d36 0122     		movs	r2, #1
 9335 3d38 FDF7B2FD 		bl	find_volume
 9336 3d3c 0346     		mov	r3, r0
 9337 3d3e 87F83F32 		strb	r3, [r7, #575]
3601:../tasks/SDMMC/ff.c **** 	if (res == FR_OK) {
 9338              		.loc 1 3601 0
 9339 3d42 97F83F32 		ldrb	r3, [r7, #575]	@ zero_extendqisi2
 9340 3d46 002B     		cmp	r3, #0
 9341 3d48 68D1     		bne	.L549
3602:../tasks/SDMMC/ff.c **** 		INIT_BUF(dj);
 9342              		.loc 1 3602 0
 9343 3d4a 07F11803 		add	r3, r7, #24
 9344 3d4e 07F10C02 		add	r2, r7, #12
 9345 3d52 C3F81822 		str	r2, [r3, #536]
3603:../tasks/SDMMC/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
 9346              		.loc 1 3603 0
 9347 3d56 3B1D     		adds	r3, r7, #4
 9348 3d58 1B68     		ldr	r3, [r3]
 9349 3d5a 07F11802 		add	r2, r7, #24
 9350 3d5e 1046     		mov	r0, r2
 9351 3d60 1946     		mov	r1, r3
 9352 3d62 FDF7A9FC 		bl	follow_path
 9353 3d66 0346     		mov	r3, r0
 9354 3d68 87F83F32 		strb	r3, [r7, #575]
3604:../tasks/SDMMC/ff.c **** 		FREE_BUF();
3605:../tasks/SDMMC/ff.c **** 		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
 9355              		.loc 1 3605 0
 9356 3d6c 97F83F32 		ldrb	r3, [r7, #575]	@ zero_extendqisi2
 9357 3d70 002B     		cmp	r3, #0
 9358 3d72 0CD1     		bne	.L550
 9359              		.loc 1 3605 0 is_stmt 0 discriminator 1
 9360 3d74 07F11803 		add	r3, r7, #24
 9361 3d78 D3F81832 		ldr	r3, [r3, #536]
 9362 3d7c 0B33     		adds	r3, r3, #11
 9363 3d7e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9364 3d80 03F02003 		and	r3, r3, #32
 9365 3d84 002B     		cmp	r3, #0
 9366 3d86 02D0     		beq	.L550
3606:../tasks/SDMMC/ff.c **** 			res = FR_INVALID_NAME;
 9367              		.loc 1 3606 0 is_stmt 1
 9368 3d88 0623     		movs	r3, #6
 9369 3d8a 87F83F32 		strb	r3, [r7, #575]
 9370              	.L550:
3607:../tasks/SDMMC/ff.c **** 		if (res == FR_OK) {
 9371              		.loc 1 3607 0
 9372 3d8e 97F83F32 		ldrb	r3, [r7, #575]	@ zero_extendqisi2
 9373 3d92 002B     		cmp	r3, #0
 9374 3d94 42D1     		bne	.L549
3608:../tasks/SDMMC/ff.c **** 			dir = dj.dir;
 9375              		.loc 1 3608 0
 9376 3d96 07F11803 		add	r3, r7, #24
 9377 3d9a D3F81432 		ldr	r3, [r3, #532]
 9378 3d9e C7F83832 		str	r3, [r7, #568]
3609:../tasks/SDMMC/ff.c **** 			if (!dir) {					/* Root directory */
 9379              		.loc 1 3609 0
 9380 3da2 D7F83832 		ldr	r3, [r7, #568]
 9381 3da6 002B     		cmp	r3, #0
 9382 3da8 03D1     		bne	.L551
3610:../tasks/SDMMC/ff.c **** 				res = FR_INVALID_NAME;
 9383              		.loc 1 3610 0
 9384 3daa 0623     		movs	r3, #6
 9385 3dac 87F83F32 		strb	r3, [r7, #575]
 9386 3db0 34E0     		b	.L549
 9387              	.L551:
3611:../tasks/SDMMC/ff.c **** 			} else {					/* File or sub-directory */
3612:../tasks/SDMMC/ff.c **** 				ST_WORD(dir+DIR_WrtTime, fno->ftime);
 9388              		.loc 1 3612 0
 9389 3db2 D7F83832 		ldr	r3, [r7, #568]
 9390 3db6 1633     		adds	r3, r3, #22
 9391 3db8 3A46     		mov	r2, r7
 9392 3dba 1268     		ldr	r2, [r2]
 9393 3dbc D288     		ldrh	r2, [r2, #6]
 9394 3dbe D2B2     		uxtb	r2, r2
 9395 3dc0 1A70     		strb	r2, [r3]
 9396 3dc2 D7F83832 		ldr	r3, [r7, #568]
 9397 3dc6 1733     		adds	r3, r3, #23
 9398 3dc8 3A46     		mov	r2, r7
 9399 3dca 1268     		ldr	r2, [r2]
 9400 3dcc D288     		ldrh	r2, [r2, #6]
 9401 3dce 120A     		lsrs	r2, r2, #8
 9402 3dd0 92B2     		uxth	r2, r2
 9403 3dd2 D2B2     		uxtb	r2, r2
 9404 3dd4 1A70     		strb	r2, [r3]
3613:../tasks/SDMMC/ff.c **** 				ST_WORD(dir+DIR_WrtDate, fno->fdate);
 9405              		.loc 1 3613 0
 9406 3dd6 D7F83832 		ldr	r3, [r7, #568]
 9407 3dda 1833     		adds	r3, r3, #24
 9408 3ddc 3A46     		mov	r2, r7
 9409 3dde 1268     		ldr	r2, [r2]
 9410 3de0 9288     		ldrh	r2, [r2, #4]
 9411 3de2 D2B2     		uxtb	r2, r2
 9412 3de4 1A70     		strb	r2, [r3]
 9413 3de6 D7F83832 		ldr	r3, [r7, #568]
 9414 3dea 1933     		adds	r3, r3, #25
 9415 3dec 3A46     		mov	r2, r7
 9416 3dee 1268     		ldr	r2, [r2]
 9417 3df0 9288     		ldrh	r2, [r2, #4]
 9418 3df2 120A     		lsrs	r2, r2, #8
 9419 3df4 92B2     		uxth	r2, r2
 9420 3df6 D2B2     		uxtb	r2, r2
 9421 3df8 1A70     		strb	r2, [r3]
3614:../tasks/SDMMC/ff.c **** 				dj.fs->wflag = 1;
 9422              		.loc 1 3614 0
 9423 3dfa 07F11803 		add	r3, r7, #24
 9424 3dfe D3F80032 		ldr	r3, [r3, #512]
 9425 3e02 0122     		movs	r2, #1
 9426 3e04 83F80422 		strb	r2, [r3, #516]
3615:../tasks/SDMMC/ff.c **** 				res = sync_fs(dj.fs);
 9427              		.loc 1 3615 0
 9428 3e08 07F11803 		add	r3, r7, #24
 9429 3e0c D3F80032 		ldr	r3, [r3, #512]
 9430 3e10 1846     		mov	r0, r3
 9431 3e12 FCF7D5FB 		bl	sync_fs
 9432 3e16 0346     		mov	r3, r0
 9433 3e18 87F83F32 		strb	r3, [r7, #575]
 9434              	.L549:
3616:../tasks/SDMMC/ff.c **** 			}
3617:../tasks/SDMMC/ff.c **** 		}
3618:../tasks/SDMMC/ff.c **** 	}
3619:../tasks/SDMMC/ff.c **** 
3620:../tasks/SDMMC/ff.c **** 	LEAVE_FF(dj.fs, res);
 9435              		.loc 1 3620 0
 9436 3e1c 97F83F32 		ldrb	r3, [r7, #575]	@ zero_extendqisi2
3621:../tasks/SDMMC/ff.c **** }
 9437              		.loc 1 3621 0
 9438 3e20 1846     		mov	r0, r3
 9439 3e22 07F51077 		add	r7, r7, #576
 9440 3e26 BD46     		mov	sp, r7
 9441              		@ sp needed
 9442 3e28 80BD     		pop	{r7, pc}
 9443              		.cfi_endproc
 9444              	.LFE107:
 9446 3e2a 00BF     		.align	2
 9447              		.global	f_rename
 9448              		.thumb
 9449              		.thumb_func
 9451              	f_rename:
 9452              	.LFB108:
3622:../tasks/SDMMC/ff.c **** 
3623:../tasks/SDMMC/ff.c **** 
3624:../tasks/SDMMC/ff.c **** 
3625:../tasks/SDMMC/ff.c **** 
3626:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
3627:../tasks/SDMMC/ff.c **** /* Rename File/Directory                                                 */
3628:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
3629:../tasks/SDMMC/ff.c **** 
3630:../tasks/SDMMC/ff.c **** FRESULT f_rename (
3631:../tasks/SDMMC/ff.c **** 	const TCHAR* path_old,	/* Pointer to the old name */
3632:../tasks/SDMMC/ff.c **** 	const TCHAR* path_new	/* Pointer to the new name */
3633:../tasks/SDMMC/ff.c **** )
3634:../tasks/SDMMC/ff.c **** {
 9453              		.loc 1 3634 0
 9454              		.cfi_startproc
 9455              		@ args = 0, pretend = 0, frame = 1144
 9456              		@ frame_needed = 1, uses_anonymous_args = 0
 9457 3e2c 90B5     		push	{r4, r7, lr}
 9458              		.cfi_def_cfa_offset 12
 9459              		.cfi_offset 4, -12
 9460              		.cfi_offset 7, -8
 9461              		.cfi_offset 14, -4
 9462 3e2e ADF27C4D 		subw	sp, sp, #1148
 9463              		.cfi_def_cfa_offset 1160
 9464 3e32 00AF     		add	r7, sp, #0
 9465              		.cfi_def_cfa_register 7
 9466 3e34 3B1D     		adds	r3, r7, #4
 9467 3e36 1860     		str	r0, [r3]
 9468 3e38 3B46     		mov	r3, r7
 9469 3e3a 1960     		str	r1, [r3]
3635:../tasks/SDMMC/ff.c **** 	FRESULT res;
3636:../tasks/SDMMC/ff.c **** 	DIR djo, djn;
3637:../tasks/SDMMC/ff.c **** 	BYTE buf[21], *dir;
3638:../tasks/SDMMC/ff.c **** 	DWORD dw;
3639:../tasks/SDMMC/ff.c **** 	DEF_NAMEBUF;
3640:../tasks/SDMMC/ff.c **** 
3641:../tasks/SDMMC/ff.c **** 
3642:../tasks/SDMMC/ff.c **** 	/* Get logical drive number of the source object */
3643:../tasks/SDMMC/ff.c **** 	res = find_volume(&djo.fs, &path_old, 1);
 9470              		.loc 1 3643 0
 9471 3e3c 07F51373 		add	r3, r7, #588
 9472 3e40 03F50072 		add	r2, r3, #512
 9473 3e44 3B1D     		adds	r3, r7, #4
 9474 3e46 1046     		mov	r0, r2
 9475 3e48 1946     		mov	r1, r3
 9476 3e4a 0122     		movs	r2, #1
 9477 3e4c FDF728FD 		bl	find_volume
 9478 3e50 0346     		mov	r3, r0
 9479 3e52 87F87734 		strb	r3, [r7, #1143]
3644:../tasks/SDMMC/ff.c **** 	if (res == FR_OK) {
 9480              		.loc 1 3644 0
 9481 3e56 97F87734 		ldrb	r3, [r7, #1143]	@ zero_extendqisi2
 9482 3e5a 002B     		cmp	r3, #0
 9483 3e5c 40F03081 		bne	.L554
3645:../tasks/SDMMC/ff.c **** 		djn.fs = djo.fs;
 9484              		.loc 1 3645 0
 9485 3e60 07F51373 		add	r3, r7, #588
 9486 3e64 D3F80022 		ldr	r2, [r3, #512]
 9487 3e68 07F12C03 		add	r3, r7, #44
 9488 3e6c C3F80022 		str	r2, [r3, #512]
3646:../tasks/SDMMC/ff.c **** 		INIT_BUF(djo);
 9489              		.loc 1 3646 0
 9490 3e70 07F51373 		add	r3, r7, #588
 9491 3e74 07F10802 		add	r2, r7, #8
 9492 3e78 C3F81822 		str	r2, [r3, #536]
3647:../tasks/SDMMC/ff.c **** 		res = follow_path(&djo, path_old);		/* Check old object */
 9493              		.loc 1 3647 0
 9494 3e7c 3B1D     		adds	r3, r7, #4
 9495 3e7e 1B68     		ldr	r3, [r3]
 9496 3e80 07F51372 		add	r2, r7, #588
 9497 3e84 1046     		mov	r0, r2
 9498 3e86 1946     		mov	r1, r3
 9499 3e88 FDF716FC 		bl	follow_path
 9500 3e8c 0346     		mov	r3, r0
 9501 3e8e 87F87734 		strb	r3, [r7, #1143]
3648:../tasks/SDMMC/ff.c **** 		if (_FS_RPATH && res == FR_OK && (djo.fn[NS] & NS_DOT))
 9502              		.loc 1 3648 0
 9503 3e92 97F87734 		ldrb	r3, [r7, #1143]	@ zero_extendqisi2
 9504 3e96 002B     		cmp	r3, #0
 9505 3e98 0CD1     		bne	.L555
 9506              		.loc 1 3648 0 is_stmt 0 discriminator 1
 9507 3e9a 07F51373 		add	r3, r7, #588
 9508 3e9e D3F81832 		ldr	r3, [r3, #536]
 9509 3ea2 0B33     		adds	r3, r3, #11
 9510 3ea4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9511 3ea6 03F02003 		and	r3, r3, #32
 9512 3eaa 002B     		cmp	r3, #0
 9513 3eac 02D0     		beq	.L555
3649:../tasks/SDMMC/ff.c **** 			res = FR_INVALID_NAME;
 9514              		.loc 1 3649 0 is_stmt 1
 9515 3eae 0623     		movs	r3, #6
 9516 3eb0 87F87734 		strb	r3, [r7, #1143]
 9517              	.L555:
3650:../tasks/SDMMC/ff.c **** #if _FS_LOCK
3651:../tasks/SDMMC/ff.c **** 		if (res == FR_OK) res = chk_lock(&djo, 2);
 9518              		.loc 1 3651 0
 9519 3eb4 97F87734 		ldrb	r3, [r7, #1143]	@ zero_extendqisi2
 9520 3eb8 002B     		cmp	r3, #0
 9521 3eba 08D1     		bne	.L556
 9522              		.loc 1 3651 0 is_stmt 0 discriminator 1
 9523 3ebc 07F51373 		add	r3, r7, #588
 9524 3ec0 1846     		mov	r0, r3
 9525 3ec2 0221     		movs	r1, #2
 9526 3ec4 FCF718F9 		bl	chk_lock
 9527 3ec8 0346     		mov	r3, r0
 9528 3eca 87F87734 		strb	r3, [r7, #1143]
 9529              	.L556:
3652:../tasks/SDMMC/ff.c **** #endif
3653:../tasks/SDMMC/ff.c **** 		if (res == FR_OK) {						/* Old object is found */
 9530              		.loc 1 3653 0 is_stmt 1
 9531 3ece 97F87734 		ldrb	r3, [r7, #1143]	@ zero_extendqisi2
 9532 3ed2 002B     		cmp	r3, #0
 9533 3ed4 40F0F480 		bne	.L554
3654:../tasks/SDMMC/ff.c **** 			if (!djo.dir) {						/* Is root dir? */
 9534              		.loc 1 3654 0
 9535 3ed8 07F51373 		add	r3, r7, #588
 9536 3edc D3F81432 		ldr	r3, [r3, #532]
 9537 3ee0 002B     		cmp	r3, #0
 9538 3ee2 03D1     		bne	.L557
3655:../tasks/SDMMC/ff.c **** 				res = FR_NO_FILE;
 9539              		.loc 1 3655 0
 9540 3ee4 0423     		movs	r3, #4
 9541 3ee6 87F87734 		strb	r3, [r7, #1143]
 9542 3eea E9E0     		b	.L554
 9543              	.L557:
3656:../tasks/SDMMC/ff.c **** 			} else {
3657:../tasks/SDMMC/ff.c **** 				mem_cpy(buf, djo.dir+DIR_Attr, 21);		/* Save the object information except for name */
 9544              		.loc 1 3657 0
 9545 3eec 07F51373 		add	r3, r7, #588
 9546 3ef0 D3F81432 		ldr	r3, [r3, #532]
 9547 3ef4 0B33     		adds	r3, r3, #11
 9548 3ef6 07F11402 		add	r2, r7, #20
 9549 3efa 1046     		mov	r0, r2
 9550 3efc 1946     		mov	r1, r3
 9551 3efe 1522     		movs	r2, #21
 9552 3f00 FCF77EF8 		bl	mem_cpy
3658:../tasks/SDMMC/ff.c **** 				mem_cpy(&djn, &djo, sizeof (DIR));		/* Check new object */
 9553              		.loc 1 3658 0
 9554 3f04 07F12C02 		add	r2, r7, #44
 9555 3f08 07F51373 		add	r3, r7, #588
 9556 3f0c 1046     		mov	r0, r2
 9557 3f0e 1946     		mov	r1, r3
 9558 3f10 4FF40872 		mov	r2, #544
 9559 3f14 FCF774F8 		bl	mem_cpy
3659:../tasks/SDMMC/ff.c **** 				res = follow_path(&djn, path_new);
 9560              		.loc 1 3659 0
 9561 3f18 07F12C02 		add	r2, r7, #44
 9562 3f1c 3B46     		mov	r3, r7
 9563 3f1e 1046     		mov	r0, r2
 9564 3f20 1968     		ldr	r1, [r3]
 9565 3f22 FDF7C9FB 		bl	follow_path
 9566 3f26 0346     		mov	r3, r0
 9567 3f28 87F87734 		strb	r3, [r7, #1143]
3660:../tasks/SDMMC/ff.c **** 				if (res == FR_OK) res = FR_EXIST;		/* The new object name is already existing */
 9568              		.loc 1 3660 0
 9569 3f2c 97F87734 		ldrb	r3, [r7, #1143]	@ zero_extendqisi2
 9570 3f30 002B     		cmp	r3, #0
 9571 3f32 02D1     		bne	.L558
 9572              		.loc 1 3660 0 is_stmt 0 discriminator 1
 9573 3f34 0823     		movs	r3, #8
 9574 3f36 87F87734 		strb	r3, [r7, #1143]
 9575              	.L558:
3661:../tasks/SDMMC/ff.c **** 				if (res == FR_NO_FILE) { 				/* Is it a valid path and no name collision? */
 9576              		.loc 1 3661 0 is_stmt 1
 9577 3f3a 97F87734 		ldrb	r3, [r7, #1143]	@ zero_extendqisi2
 9578 3f3e 042B     		cmp	r3, #4
 9579 3f40 40F0BE80 		bne	.L554
3662:../tasks/SDMMC/ff.c **** /* Start critical section that any interruption can cause a cross-link */
3663:../tasks/SDMMC/ff.c **** 					res = dir_register(&djn);			/* Register the new entry */
 9580              		.loc 1 3663 0
 9581 3f44 07F12C03 		add	r3, r7, #44
 9582 3f48 1846     		mov	r0, r3
 9583 3f4a FDF7ADF9 		bl	dir_register
 9584 3f4e 0346     		mov	r3, r0
 9585 3f50 87F87734 		strb	r3, [r7, #1143]
3664:../tasks/SDMMC/ff.c **** 					if (res == FR_OK) {
 9586              		.loc 1 3664 0
 9587 3f54 97F87734 		ldrb	r3, [r7, #1143]	@ zero_extendqisi2
 9588 3f58 002B     		cmp	r3, #0
 9589 3f5a 40F0B180 		bne	.L554
3665:../tasks/SDMMC/ff.c **** 						dir = djn.dir;					/* Copy object information except for name */
 9590              		.loc 1 3665 0
 9591 3f5e 07F12C03 		add	r3, r7, #44
 9592 3f62 D3F81432 		ldr	r3, [r3, #532]
 9593 3f66 C7F87034 		str	r3, [r7, #1136]
3666:../tasks/SDMMC/ff.c **** 						mem_cpy(dir+13, buf+2, 19);
 9594              		.loc 1 3666 0
 9595 3f6a D7F87034 		ldr	r3, [r7, #1136]
 9596 3f6e 03F10D02 		add	r2, r3, #13
 9597 3f72 07F11403 		add	r3, r7, #20
 9598 3f76 0233     		adds	r3, r3, #2
 9599 3f78 1046     		mov	r0, r2
 9600 3f7a 1946     		mov	r1, r3
 9601 3f7c 1322     		movs	r2, #19
 9602 3f7e FCF73FF8 		bl	mem_cpy
3667:../tasks/SDMMC/ff.c **** 						dir[DIR_Attr] = buf[0] | AM_ARC;
 9603              		.loc 1 3667 0
 9604 3f82 D7F87034 		ldr	r3, [r7, #1136]
 9605 3f86 0B33     		adds	r3, r3, #11
 9606 3f88 07F11402 		add	r2, r7, #20
 9607 3f8c 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 9608 3f8e 42F02002 		orr	r2, r2, #32
 9609 3f92 D2B2     		uxtb	r2, r2
 9610 3f94 1A70     		strb	r2, [r3]
3668:../tasks/SDMMC/ff.c **** 						djo.fs->wflag = 1;
 9611              		.loc 1 3668 0
 9612 3f96 07F51373 		add	r3, r7, #588
 9613 3f9a D3F80032 		ldr	r3, [r3, #512]
 9614 3f9e 0122     		movs	r2, #1
 9615 3fa0 83F80422 		strb	r2, [r3, #516]
3669:../tasks/SDMMC/ff.c **** 						if (djo.sclust != djn.sclust && (dir[DIR_Attr] & AM_DIR)) {		/* Update .. entry in the direct
 9616              		.loc 1 3669 0
 9617 3fa4 07F51373 		add	r3, r7, #588
 9618 3fa8 D3F80822 		ldr	r2, [r3, #520]
 9619 3fac 07F12C03 		add	r3, r7, #44
 9620 3fb0 D3F80832 		ldr	r3, [r3, #520]
 9621 3fb4 9A42     		cmp	r2, r3
 9622 3fb6 69D0     		beq	.L559
 9623              		.loc 1 3669 0 is_stmt 0 discriminator 1
 9624 3fb8 D7F87034 		ldr	r3, [r7, #1136]
 9625 3fbc 0B33     		adds	r3, r3, #11
 9626 3fbe 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9627 3fc0 03F01003 		and	r3, r3, #16
 9628 3fc4 002B     		cmp	r3, #0
 9629 3fc6 61D0     		beq	.L559
3670:../tasks/SDMMC/ff.c **** 							dw = clust2sect(djo.fs, ld_clust(djo.fs, dir));
 9630              		.loc 1 3670 0 is_stmt 1
 9631 3fc8 07F51373 		add	r3, r7, #588
 9632 3fcc D3F80042 		ldr	r4, [r3, #512]
 9633 3fd0 07F51373 		add	r3, r7, #588
 9634 3fd4 D3F80032 		ldr	r3, [r3, #512]
 9635 3fd8 1846     		mov	r0, r3
 9636 3fda D7F87014 		ldr	r1, [r7, #1136]
 9637 3fde FDF76BF8 		bl	ld_clust
 9638 3fe2 0346     		mov	r3, r0
 9639 3fe4 2046     		mov	r0, r4
 9640 3fe6 1946     		mov	r1, r3
 9641 3fe8 FFF7FEFF 		bl	clust2sect
 9642 3fec C7F86C04 		str	r0, [r7, #1132]
3671:../tasks/SDMMC/ff.c **** 							if (!dw) {
 9643              		.loc 1 3671 0
 9644 3ff0 D7F86C34 		ldr	r3, [r7, #1132]
 9645 3ff4 002B     		cmp	r3, #0
 9646 3ff6 03D1     		bne	.L560
3672:../tasks/SDMMC/ff.c **** 								res = FR_INT_ERR;
 9647              		.loc 1 3672 0
 9648 3ff8 0223     		movs	r3, #2
 9649 3ffa 87F87734 		strb	r3, [r7, #1143]
 9650 3ffe 45E0     		b	.L559
 9651              	.L560:
3673:../tasks/SDMMC/ff.c **** 							} else {
3674:../tasks/SDMMC/ff.c **** 								res = move_window(djo.fs, dw);
 9652              		.loc 1 3674 0
 9653 4000 07F51373 		add	r3, r7, #588
 9654 4004 D3F80032 		ldr	r3, [r3, #512]
 9655 4008 1846     		mov	r0, r3
 9656 400a D7F86C14 		ldr	r1, [r7, #1132]
 9657 400e FCF7ABFA 		bl	move_window
 9658 4012 0346     		mov	r3, r0
 9659 4014 87F87734 		strb	r3, [r7, #1143]
3675:../tasks/SDMMC/ff.c **** 								dir = djo.fs->win.d8+SZ_DIR;	/* .. entry */
 9660              		.loc 1 3675 0
 9661 4018 07F51373 		add	r3, r7, #588
 9662 401c D3F80032 		ldr	r3, [r3, #512]
 9663 4020 2033     		adds	r3, r3, #32
 9664 4022 C7F87034 		str	r3, [r7, #1136]
3676:../tasks/SDMMC/ff.c **** 								if (res == FR_OK && dir[1] == '.') {
 9665              		.loc 1 3676 0
 9666 4026 97F87734 		ldrb	r3, [r7, #1143]	@ zero_extendqisi2
 9667 402a 002B     		cmp	r3, #0
 9668 402c 2ED1     		bne	.L559
 9669              		.loc 1 3676 0 is_stmt 0 discriminator 1
 9670 402e D7F87034 		ldr	r3, [r7, #1136]
 9671 4032 0133     		adds	r3, r3, #1
 9672 4034 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9673 4036 2E2B     		cmp	r3, #46
 9674 4038 28D1     		bne	.L559
3677:../tasks/SDMMC/ff.c **** 									dw = (djo.fs->fs_type == FS_FAT32 && djn.sclust == djo.fs->dirbase) ? 0 : djn.sclust;
 9675              		.loc 1 3677 0 is_stmt 1
 9676 403a 07F51373 		add	r3, r7, #588
 9677 403e D3F80032 		ldr	r3, [r3, #512]
 9678 4042 93F80032 		ldrb	r3, [r3, #512]	@ zero_extendqisi2
 9679 4046 032B     		cmp	r3, #3
 9680 4048 0BD1     		bne	.L561
 9681              		.loc 1 3677 0 is_stmt 0 discriminator 2
 9682 404a 07F12C03 		add	r3, r7, #44
 9683 404e D3F80822 		ldr	r2, [r3, #520]
 9684 4052 07F51373 		add	r3, r7, #588
 9685 4056 D3F80032 		ldr	r3, [r3, #512]
 9686 405a D3F82832 		ldr	r3, [r3, #552]
 9687 405e 9A42     		cmp	r2, r3
 9688 4060 04D0     		beq	.L562
 9689              	.L561:
 9690              		.loc 1 3677 0 discriminator 1
 9691 4062 07F12C03 		add	r3, r7, #44
 9692 4066 D3F80832 		ldr	r3, [r3, #520]
 9693 406a 00E0     		b	.L563
 9694              	.L562:
 9695 406c 0023     		movs	r3, #0
 9696              	.L563:
 9697              		.loc 1 3677 0 discriminator 3
 9698 406e C7F86C34 		str	r3, [r7, #1132]
3678:../tasks/SDMMC/ff.c **** 									st_clust(dir, dw);
 9699              		.loc 1 3678 0 is_stmt 1 discriminator 3
 9700 4072 D7F87004 		ldr	r0, [r7, #1136]
 9701 4076 D7F86C14 		ldr	r1, [r7, #1132]
 9702 407a FDF749F8 		bl	st_clust
3679:../tasks/SDMMC/ff.c **** 									djo.fs->wflag = 1;
 9703              		.loc 1 3679 0 discriminator 3
 9704 407e 07F51373 		add	r3, r7, #588
 9705 4082 D3F80032 		ldr	r3, [r3, #512]
 9706 4086 0122     		movs	r2, #1
 9707 4088 83F80422 		strb	r2, [r3, #516]
 9708              	.L559:
3680:../tasks/SDMMC/ff.c **** 								}
3681:../tasks/SDMMC/ff.c **** 							}
3682:../tasks/SDMMC/ff.c **** 						}
3683:../tasks/SDMMC/ff.c **** 						if (res == FR_OK) {
 9709              		.loc 1 3683 0
 9710 408c 97F87734 		ldrb	r3, [r7, #1143]	@ zero_extendqisi2
 9711 4090 002B     		cmp	r3, #0
 9712 4092 15D1     		bne	.L554
3684:../tasks/SDMMC/ff.c **** 							res = dir_remove(&djo);		/* Remove old entry */
 9713              		.loc 1 3684 0
 9714 4094 07F51373 		add	r3, r7, #588
 9715 4098 1846     		mov	r0, r3
 9716 409a FDF73FF9 		bl	dir_remove
 9717 409e 0346     		mov	r3, r0
 9718 40a0 87F87734 		strb	r3, [r7, #1143]
3685:../tasks/SDMMC/ff.c **** 							if (res == FR_OK)
 9719              		.loc 1 3685 0
 9720 40a4 97F87734 		ldrb	r3, [r7, #1143]	@ zero_extendqisi2
 9721 40a8 002B     		cmp	r3, #0
 9722 40aa 09D1     		bne	.L554
3686:../tasks/SDMMC/ff.c **** 								res = sync_fs(djo.fs);
 9723              		.loc 1 3686 0
 9724 40ac 07F51373 		add	r3, r7, #588
 9725 40b0 D3F80032 		ldr	r3, [r3, #512]
 9726 40b4 1846     		mov	r0, r3
 9727 40b6 FCF783FA 		bl	sync_fs
 9728 40ba 0346     		mov	r3, r0
 9729 40bc 87F87734 		strb	r3, [r7, #1143]
 9730              	.L554:
3687:../tasks/SDMMC/ff.c **** 						}
3688:../tasks/SDMMC/ff.c **** 					}
3689:../tasks/SDMMC/ff.c **** /* End critical section */
3690:../tasks/SDMMC/ff.c **** 				}
3691:../tasks/SDMMC/ff.c **** 			}
3692:../tasks/SDMMC/ff.c **** 		}
3693:../tasks/SDMMC/ff.c **** 		FREE_BUF();
3694:../tasks/SDMMC/ff.c **** 	}
3695:../tasks/SDMMC/ff.c **** 
3696:../tasks/SDMMC/ff.c **** 	LEAVE_FF(djo.fs, res);
 9731              		.loc 1 3696 0
 9732 40c0 97F87734 		ldrb	r3, [r7, #1143]	@ zero_extendqisi2
3697:../tasks/SDMMC/ff.c **** }
 9733              		.loc 1 3697 0
 9734 40c4 1846     		mov	r0, r3
 9735 40c6 07F27C47 		addw	r7, r7, #1148
 9736 40ca BD46     		mov	sp, r7
 9737              		@ sp needed
 9738 40cc 90BD     		pop	{r4, r7, pc}
 9739              		.cfi_endproc
 9740              	.LFE108:
 9742 40ce 00BF     		.align	2
 9743              		.global	f_getlabel
 9744              		.thumb
 9745              		.thumb_func
 9747              	f_getlabel:
 9748              	.LFB109:
3698:../tasks/SDMMC/ff.c **** 
3699:../tasks/SDMMC/ff.c **** #endif /* !_FS_READONLY */
3700:../tasks/SDMMC/ff.c **** #endif /* _FS_MINIMIZE == 0 */
3701:../tasks/SDMMC/ff.c **** #endif /* _FS_MINIMIZE <= 1 */
3702:../tasks/SDMMC/ff.c **** #endif /* _FS_MINIMIZE <= 2 */
3703:../tasks/SDMMC/ff.c **** 
3704:../tasks/SDMMC/ff.c **** 
3705:../tasks/SDMMC/ff.c **** 
3706:../tasks/SDMMC/ff.c **** #if _USE_LABEL
3707:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
3708:../tasks/SDMMC/ff.c **** /* Get volume label                                                      */
3709:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
3710:../tasks/SDMMC/ff.c **** 
3711:../tasks/SDMMC/ff.c **** FRESULT f_getlabel (
3712:../tasks/SDMMC/ff.c **** 	const TCHAR* path,	/* Path name of the logical drive number */
3713:../tasks/SDMMC/ff.c **** 	TCHAR* label,		/* Pointer to a buffer to return the volume label */
3714:../tasks/SDMMC/ff.c **** 	DWORD* sn			/* Pointer to a variable to return the volume serial number */
3715:../tasks/SDMMC/ff.c **** )
3716:../tasks/SDMMC/ff.c **** {
 9749              		.loc 1 3716 0
 9750              		.cfi_startproc
 9751              		@ args = 0, pretend = 0, frame = 576
 9752              		@ frame_needed = 1, uses_anonymous_args = 0
 9753 40d0 80B5     		push	{r7, lr}
 9754              		.cfi_def_cfa_offset 8
 9755              		.cfi_offset 7, -8
 9756              		.cfi_offset 14, -4
 9757 40d2 ADF5107D 		sub	sp, sp, #576
 9758              		.cfi_def_cfa_offset 584
 9759 40d6 00AF     		add	r7, sp, #0
 9760              		.cfi_def_cfa_register 7
 9761 40d8 07F10C03 		add	r3, r7, #12
 9762 40dc 1860     		str	r0, [r3]
 9763 40de 07F10803 		add	r3, r7, #8
 9764 40e2 1960     		str	r1, [r3]
 9765 40e4 3B1D     		adds	r3, r7, #4
 9766 40e6 1A60     		str	r2, [r3]
3717:../tasks/SDMMC/ff.c **** 	FRESULT res;
3718:../tasks/SDMMC/ff.c **** 	DIR dj;
3719:../tasks/SDMMC/ff.c **** 	UINT i, j;
3720:../tasks/SDMMC/ff.c **** 
3721:../tasks/SDMMC/ff.c **** 
3722:../tasks/SDMMC/ff.c **** 	/* Get logical drive number */
3723:../tasks/SDMMC/ff.c **** 	res = find_volume(&dj.fs, &path, 0);
 9767              		.loc 1 3723 0
 9768 40e8 07F11403 		add	r3, r7, #20
 9769 40ec 03F50072 		add	r2, r3, #512
 9770 40f0 07F10C03 		add	r3, r7, #12
 9771 40f4 1046     		mov	r0, r2
 9772 40f6 1946     		mov	r1, r3
 9773 40f8 0022     		movs	r2, #0
 9774 40fa FDF7D1FB 		bl	find_volume
 9775 40fe 0346     		mov	r3, r0
 9776 4100 87F83F32 		strb	r3, [r7, #575]
3724:../tasks/SDMMC/ff.c **** 
3725:../tasks/SDMMC/ff.c **** 	/* Get volume label */
3726:../tasks/SDMMC/ff.c **** 	if (res == FR_OK && label) {
 9777              		.loc 1 3726 0
 9778 4104 97F83F32 		ldrb	r3, [r7, #575]	@ zero_extendqisi2
 9779 4108 002B     		cmp	r3, #0
 9780 410a 58D1     		bne	.L566
 9781              		.loc 1 3726 0 is_stmt 0 discriminator 1
 9782 410c 07F10803 		add	r3, r7, #8
 9783 4110 1B68     		ldr	r3, [r3]
 9784 4112 002B     		cmp	r3, #0
 9785 4114 53D0     		beq	.L566
3727:../tasks/SDMMC/ff.c **** 		dj.sclust = 0;					/* Open root directory */
 9786              		.loc 1 3727 0 is_stmt 1
 9787 4116 07F11403 		add	r3, r7, #20
 9788 411a 0022     		movs	r2, #0
 9789 411c C3F80822 		str	r2, [r3, #520]
3728:../tasks/SDMMC/ff.c **** 		res = dir_sdi(&dj, 0);
 9790              		.loc 1 3728 0
 9791 4120 07F11403 		add	r3, r7, #20
 9792 4124 1846     		mov	r0, r3
 9793 4126 0021     		movs	r1, #0
 9794 4128 FCF7EEFD 		bl	dir_sdi
 9795 412c 0346     		mov	r3, r0
 9796 412e 87F83F32 		strb	r3, [r7, #575]
3729:../tasks/SDMMC/ff.c **** 		if (res == FR_OK) {
 9797              		.loc 1 3729 0
 9798 4132 97F83F32 		ldrb	r3, [r7, #575]	@ zero_extendqisi2
 9799 4136 002B     		cmp	r3, #0
 9800 4138 41D1     		bne	.L566
3730:../tasks/SDMMC/ff.c **** 			res = dir_read(&dj, 1);		/* Get an entry with AM_VOL */
 9801              		.loc 1 3730 0
 9802 413a 07F11403 		add	r3, r7, #20
 9803 413e 1846     		mov	r0, r3
 9804 4140 0121     		movs	r1, #1
 9805 4142 FDF759F8 		bl	dir_read
 9806 4146 0346     		mov	r3, r0
 9807 4148 87F83F32 		strb	r3, [r7, #575]
3731:../tasks/SDMMC/ff.c **** 			if (res == FR_OK) {			/* A volume label is exist */
 9808              		.loc 1 3731 0
 9809 414c 97F83F32 		ldrb	r3, [r7, #575]	@ zero_extendqisi2
 9810 4150 002B     		cmp	r3, #0
 9811 4152 28D1     		bne	.L567
3732:../tasks/SDMMC/ff.c **** #if _LFN_UNICODE
3733:../tasks/SDMMC/ff.c **** 				WCHAR w;
3734:../tasks/SDMMC/ff.c **** 				i = j = 0;
3735:../tasks/SDMMC/ff.c **** 				do {
3736:../tasks/SDMMC/ff.c **** 					w = (i < 11) ? dj.dir[i++] : ' ';
3737:../tasks/SDMMC/ff.c **** 					if (IsDBCS1(w) && i < 11 && IsDBCS2(dj.dir[i]))
3738:../tasks/SDMMC/ff.c **** 						w = w << 8 | dj.dir[i++];
3739:../tasks/SDMMC/ff.c **** 					label[j++] = ff_convert(w, 1);	/* OEM -> Unicode */
3740:../tasks/SDMMC/ff.c **** 				} while (j < 11);
3741:../tasks/SDMMC/ff.c **** #else
3742:../tasks/SDMMC/ff.c **** 				mem_cpy(label, dj.dir, 11);
 9812              		.loc 1 3742 0
 9813 4154 07F11403 		add	r3, r7, #20
 9814 4158 D3F81432 		ldr	r3, [r3, #532]
 9815 415c 07F10802 		add	r2, r7, #8
 9816 4160 1068     		ldr	r0, [r2]
 9817 4162 1946     		mov	r1, r3
 9818 4164 0B22     		movs	r2, #11
 9819 4166 FBF74BFF 		bl	mem_cpy
3743:../tasks/SDMMC/ff.c **** #endif
3744:../tasks/SDMMC/ff.c **** 				j = 11;
 9820              		.loc 1 3744 0
 9821 416a 0B23     		movs	r3, #11
 9822 416c C7F83832 		str	r3, [r7, #568]
 9823              	.L569:
3745:../tasks/SDMMC/ff.c **** 				do {
3746:../tasks/SDMMC/ff.c **** 					label[j] = 0;
 9824              		.loc 1 3746 0
 9825 4170 07F10803 		add	r3, r7, #8
 9826 4174 1A68     		ldr	r2, [r3]
 9827 4176 D7F83832 		ldr	r3, [r7, #568]
 9828 417a 1344     		add	r3, r3, r2
 9829 417c 0022     		movs	r2, #0
 9830 417e 1A70     		strb	r2, [r3]
3747:../tasks/SDMMC/ff.c **** 					if (!j) break;
 9831              		.loc 1 3747 0
 9832 4180 D7F83832 		ldr	r3, [r7, #568]
 9833 4184 002B     		cmp	r3, #0
 9834 4186 00D1     		bne	.L568
 9835              		.loc 1 3747 0 is_stmt 0 discriminator 1
 9836 4188 0DE0     		b	.L567
 9837              	.L568:
3748:../tasks/SDMMC/ff.c **** 				} while (label[--j] == ' ');
 9838              		.loc 1 3748 0 is_stmt 1
 9839 418a D7F83832 		ldr	r3, [r7, #568]
 9840 418e 013B     		subs	r3, r3, #1
 9841 4190 C7F83832 		str	r3, [r7, #568]
 9842 4194 07F10803 		add	r3, r7, #8
 9843 4198 1A68     		ldr	r2, [r3]
 9844 419a D7F83832 		ldr	r3, [r7, #568]
 9845 419e 1344     		add	r3, r3, r2
 9846 41a0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9847 41a2 202B     		cmp	r3, #32
 9848 41a4 E4D0     		beq	.L569
 9849              	.L567:
3749:../tasks/SDMMC/ff.c **** 			}
3750:../tasks/SDMMC/ff.c **** 			if (res == FR_NO_FILE) {	/* No label, return nul string */
 9850              		.loc 1 3750 0
 9851 41a6 97F83F32 		ldrb	r3, [r7, #575]	@ zero_extendqisi2
 9852 41aa 042B     		cmp	r3, #4
 9853 41ac 07D1     		bne	.L566
3751:../tasks/SDMMC/ff.c **** 				label[0] = 0;
 9854              		.loc 1 3751 0
 9855 41ae 07F10803 		add	r3, r7, #8
 9856 41b2 1B68     		ldr	r3, [r3]
 9857 41b4 0022     		movs	r2, #0
 9858 41b6 1A70     		strb	r2, [r3]
3752:../tasks/SDMMC/ff.c **** 				res = FR_OK;
 9859              		.loc 1 3752 0
 9860 41b8 0023     		movs	r3, #0
 9861 41ba 87F83F32 		strb	r3, [r7, #575]
 9862              	.L566:
3753:../tasks/SDMMC/ff.c **** 			}
3754:../tasks/SDMMC/ff.c **** 		}
3755:../tasks/SDMMC/ff.c **** 	}
3756:../tasks/SDMMC/ff.c **** 
3757:../tasks/SDMMC/ff.c **** 	/* Get volume serial number */
3758:../tasks/SDMMC/ff.c **** 	if (res == FR_OK && sn) {
 9863              		.loc 1 3758 0
 9864 41be 97F83F32 		ldrb	r3, [r7, #575]	@ zero_extendqisi2
 9865 41c2 002B     		cmp	r3, #0
 9866 41c4 4ED1     		bne	.L570
 9867              		.loc 1 3758 0 is_stmt 0 discriminator 1
 9868 41c6 3B1D     		adds	r3, r7, #4
 9869 41c8 1B68     		ldr	r3, [r3]
 9870 41ca 002B     		cmp	r3, #0
 9871 41cc 4AD0     		beq	.L570
3759:../tasks/SDMMC/ff.c **** 		res = move_window(dj.fs, dj.fs->volbase);
 9872              		.loc 1 3759 0 is_stmt 1
 9873 41ce 07F11403 		add	r3, r7, #20
 9874 41d2 D3F80022 		ldr	r2, [r3, #512]
 9875 41d6 07F11403 		add	r3, r7, #20
 9876 41da D3F80032 		ldr	r3, [r3, #512]
 9877 41de D3F82032 		ldr	r3, [r3, #544]
 9878 41e2 1046     		mov	r0, r2
 9879 41e4 1946     		mov	r1, r3
 9880 41e6 FCF7BFF9 		bl	move_window
 9881 41ea 0346     		mov	r3, r0
 9882 41ec 87F83F32 		strb	r3, [r7, #575]
3760:../tasks/SDMMC/ff.c **** 		if (res == FR_OK) {
 9883              		.loc 1 3760 0
 9884 41f0 97F83F32 		ldrb	r3, [r7, #575]	@ zero_extendqisi2
 9885 41f4 002B     		cmp	r3, #0
 9886 41f6 35D1     		bne	.L570
3761:../tasks/SDMMC/ff.c **** 			i = dj.fs->fs_type == FS_FAT32 ? BS_VolID32 : BS_VolID;
 9887              		.loc 1 3761 0
 9888 41f8 07F11403 		add	r3, r7, #20
 9889 41fc D3F80032 		ldr	r3, [r3, #512]
 9890 4200 93F80032 		ldrb	r3, [r3, #512]	@ zero_extendqisi2
 9891 4204 032B     		cmp	r3, #3
 9892 4206 01D1     		bne	.L571
 9893              		.loc 1 3761 0 is_stmt 0 discriminator 1
 9894 4208 4323     		movs	r3, #67
 9895 420a 00E0     		b	.L572
 9896              	.L571:
 9897              		.loc 1 3761 0 discriminator 2
 9898 420c 2723     		movs	r3, #39
 9899              	.L572:
 9900              		.loc 1 3761 0 discriminator 3
 9901 420e C7F83432 		str	r3, [r7, #564]
3762:../tasks/SDMMC/ff.c **** 			*sn = LD_DWORD(&dj.fs->win.d8[i]);
 9902              		.loc 1 3762 0 is_stmt 1 discriminator 3
 9903 4212 07F11403 		add	r3, r7, #20
 9904 4216 D3F80022 		ldr	r2, [r3, #512]
 9905 421a D7F83432 		ldr	r3, [r7, #564]
 9906 421e 0333     		adds	r3, r3, #3
 9907 4220 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 9908 4222 1A06     		lsls	r2, r3, #24
 9909 4224 07F11403 		add	r3, r7, #20
 9910 4228 D3F80012 		ldr	r1, [r3, #512]
 9911 422c D7F83432 		ldr	r3, [r7, #564]
 9912 4230 0233     		adds	r3, r3, #2
 9913 4232 CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 9914 4234 1B04     		lsls	r3, r3, #16
 9915 4236 1A43     		orrs	r2, r2, r3
 9916 4238 07F11403 		add	r3, r7, #20
 9917 423c D3F80012 		ldr	r1, [r3, #512]
 9918 4240 D7F83432 		ldr	r3, [r7, #564]
 9919 4244 0133     		adds	r3, r3, #1
 9920 4246 CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 9921 4248 1B02     		lsls	r3, r3, #8
 9922 424a 1A43     		orrs	r2, r2, r3
 9923 424c 07F11403 		add	r3, r7, #20
 9924 4250 D3F80012 		ldr	r1, [r3, #512]
 9925 4254 D7F83432 		ldr	r3, [r7, #564]
 9926 4258 0B44     		add	r3, r3, r1
 9927 425a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9928 425c 1A43     		orrs	r2, r2, r3
 9929 425e 3B1D     		adds	r3, r7, #4
 9930 4260 1B68     		ldr	r3, [r3]
 9931 4262 1A60     		str	r2, [r3]
 9932              	.L570:
3763:../tasks/SDMMC/ff.c **** 		}
3764:../tasks/SDMMC/ff.c **** 	}
3765:../tasks/SDMMC/ff.c **** 
3766:../tasks/SDMMC/ff.c **** 	LEAVE_FF(dj.fs, res);
 9933              		.loc 1 3766 0
 9934 4264 97F83F32 		ldrb	r3, [r7, #575]	@ zero_extendqisi2
3767:../tasks/SDMMC/ff.c **** }
 9935              		.loc 1 3767 0
 9936 4268 1846     		mov	r0, r3
 9937 426a 07F51077 		add	r7, r7, #576
 9938 426e BD46     		mov	sp, r7
 9939              		@ sp needed
 9940 4270 80BD     		pop	{r7, pc}
 9941              		.cfi_endproc
 9942              	.LFE109:
 9944              		.section	.rodata
 9945 008f 00       		.align	2
 9946              	.LC1:
 9947 0090 222A2B2C 		.ascii	"\"*+,.:;<=>?[]|\177\000"
 9947      2E3A3B3C 
 9947      3D3E3F5B 
 9947      5D7C7F00 
 9948              		.text
 9949 4272 00BF     		.align	2
 9950              		.global	f_setlabel
 9951              		.thumb
 9952              		.thumb_func
 9954              	f_setlabel:
 9955              	.LFB110:
3768:../tasks/SDMMC/ff.c **** 
3769:../tasks/SDMMC/ff.c **** 
3770:../tasks/SDMMC/ff.c **** 
3771:../tasks/SDMMC/ff.c **** #if !_FS_READONLY
3772:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
3773:../tasks/SDMMC/ff.c **** /* Set volume label                                                      */
3774:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
3775:../tasks/SDMMC/ff.c **** 
3776:../tasks/SDMMC/ff.c **** FRESULT f_setlabel (
3777:../tasks/SDMMC/ff.c **** 	const TCHAR* label	/* Pointer to the volume label to set */
3778:../tasks/SDMMC/ff.c **** )
3779:../tasks/SDMMC/ff.c **** {
 9956              		.loc 1 3779 0
 9957              		.cfi_startproc
 9958              		@ args = 0, pretend = 0, frame = 592
 9959              		@ frame_needed = 1, uses_anonymous_args = 0
 9960 4274 80B5     		push	{r7, lr}
 9961              		.cfi_def_cfa_offset 8
 9962              		.cfi_offset 7, -8
 9963              		.cfi_offset 14, -4
 9964 4276 ADF5147D 		sub	sp, sp, #592
 9965              		.cfi_def_cfa_offset 600
 9966 427a 00AF     		add	r7, sp, #0
 9967              		.cfi_def_cfa_register 7
 9968 427c 3B1D     		adds	r3, r7, #4
 9969 427e 1860     		str	r0, [r3]
3780:../tasks/SDMMC/ff.c **** 	FRESULT res;
3781:../tasks/SDMMC/ff.c **** 	DIR dj;
3782:../tasks/SDMMC/ff.c **** 	BYTE vn[11];
3783:../tasks/SDMMC/ff.c **** 	UINT i, j, sl;
3784:../tasks/SDMMC/ff.c **** 	WCHAR w;
3785:../tasks/SDMMC/ff.c **** 	DWORD tm;
3786:../tasks/SDMMC/ff.c **** 
3787:../tasks/SDMMC/ff.c **** 
3788:../tasks/SDMMC/ff.c **** 	/* Get logical drive number */
3789:../tasks/SDMMC/ff.c **** 	res = find_volume(&dj.fs, &label, 1);
 9970              		.loc 1 3789 0
 9971 4280 07F11803 		add	r3, r7, #24
 9972 4284 03F50072 		add	r2, r3, #512
 9973 4288 3B1D     		adds	r3, r7, #4
 9974 428a 1046     		mov	r0, r2
 9975 428c 1946     		mov	r1, r3
 9976 428e 0122     		movs	r2, #1
 9977 4290 FDF706FB 		bl	find_volume
 9978 4294 0346     		mov	r3, r0
 9979 4296 87F84F32 		strb	r3, [r7, #591]
3790:../tasks/SDMMC/ff.c **** 	if (res) LEAVE_FF(dj.fs, res);
 9980              		.loc 1 3790 0
 9981 429a 97F84F32 		ldrb	r3, [r7, #591]	@ zero_extendqisi2
 9982 429e 002B     		cmp	r3, #0
 9983 42a0 02D0     		beq	.L575
 9984              		.loc 1 3790 0 is_stmt 0 discriminator 1
 9985 42a2 97F84F32 		ldrb	r3, [r7, #591]	@ zero_extendqisi2
 9986 42a6 90E1     		b	.L597
 9987              	.L575:
3791:../tasks/SDMMC/ff.c **** 
3792:../tasks/SDMMC/ff.c **** 	/* Create a volume label in directory form */
3793:../tasks/SDMMC/ff.c **** 	vn[0] = 0;
 9988              		.loc 1 3793 0 is_stmt 1
 9989 42a8 07F10C03 		add	r3, r7, #12
 9990 42ac 0022     		movs	r2, #0
 9991 42ae 1A70     		strb	r2, [r3]
3794:../tasks/SDMMC/ff.c **** 	for (sl = 0; label[sl]; sl++) ;				/* Get name length */
 9992              		.loc 1 3794 0
 9993 42b0 0023     		movs	r3, #0
 9994 42b2 C7F84032 		str	r3, [r7, #576]
 9995 42b6 04E0     		b	.L577
 9996              	.L578:
 9997              		.loc 1 3794 0 is_stmt 0 discriminator 2
 9998 42b8 D7F84032 		ldr	r3, [r7, #576]
 9999 42bc 0133     		adds	r3, r3, #1
 10000 42be C7F84032 		str	r3, [r7, #576]
 10001              	.L577:
 10002              		.loc 1 3794 0 discriminator 1
 10003 42c2 3B1D     		adds	r3, r7, #4
 10004 42c4 1A68     		ldr	r2, [r3]
 10005 42c6 D7F84032 		ldr	r3, [r7, #576]
 10006 42ca 1344     		add	r3, r3, r2
 10007 42cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10008 42ce 002B     		cmp	r3, #0
 10009 42d0 F2D1     		bne	.L578
3795:../tasks/SDMMC/ff.c **** 	for ( ; sl && label[sl-1] == ' '; sl--) ;	/* Remove trailing spaces */
 10010              		.loc 1 3795 0 is_stmt 1
 10011 42d2 04E0     		b	.L579
 10012              	.L581:
 10013              		.loc 1 3795 0 is_stmt 0 discriminator 1
 10014 42d4 D7F84032 		ldr	r3, [r7, #576]
 10015 42d8 013B     		subs	r3, r3, #1
 10016 42da C7F84032 		str	r3, [r7, #576]
 10017              	.L579:
 10018 42de D7F84032 		ldr	r3, [r7, #576]
 10019 42e2 002B     		cmp	r3, #0
 10020 42e4 08D0     		beq	.L580
 10021              		.loc 1 3795 0 discriminator 2
 10022 42e6 3B1D     		adds	r3, r7, #4
 10023 42e8 1A68     		ldr	r2, [r3]
 10024 42ea D7F84032 		ldr	r3, [r7, #576]
 10025 42ee 013B     		subs	r3, r3, #1
 10026 42f0 1344     		add	r3, r3, r2
 10027 42f2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10028 42f4 202B     		cmp	r3, #32
 10029 42f6 EDD0     		beq	.L581
 10030              	.L580:
3796:../tasks/SDMMC/ff.c **** 	if (sl) {	/* Create volume label in directory form */
 10031              		.loc 1 3796 0 is_stmt 1
 10032 42f8 D7F84032 		ldr	r3, [r7, #576]
 10033 42fc 002B     		cmp	r3, #0
 10034 42fe 7AD0     		beq	.L582
3797:../tasks/SDMMC/ff.c **** 		i = j = 0;
 10035              		.loc 1 3797 0
 10036 4300 0023     		movs	r3, #0
 10037 4302 C7F84432 		str	r3, [r7, #580]
 10038 4306 D7F84432 		ldr	r3, [r7, #580]
 10039 430a C7F84832 		str	r3, [r7, #584]
 10040              	.L590:
3798:../tasks/SDMMC/ff.c **** 		do {
3799:../tasks/SDMMC/ff.c **** #if _LFN_UNICODE
3800:../tasks/SDMMC/ff.c **** 			w = ff_convert(ff_wtoupper(label[i++]), 0);
3801:../tasks/SDMMC/ff.c **** #else
3802:../tasks/SDMMC/ff.c **** 			w = (BYTE)label[i++];
 10041              		.loc 1 3802 0
 10042 430e 3B1D     		adds	r3, r7, #4
 10043 4310 1A68     		ldr	r2, [r3]
 10044 4312 D7F84832 		ldr	r3, [r7, #584]
 10045 4316 591C     		adds	r1, r3, #1
 10046 4318 C7F84812 		str	r1, [r7, #584]
 10047 431c 1344     		add	r3, r3, r2
 10048 431e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10049 4320 A7F83E32 		strh	r3, [r7, #574]	@ movhi
3803:../tasks/SDMMC/ff.c **** 			if (IsDBCS1(w))
3804:../tasks/SDMMC/ff.c **** 				w = (j < 10 && i < sl && IsDBCS2(label[i])) ? w << 8 | (BYTE)label[i++] : 0;
3805:../tasks/SDMMC/ff.c **** #if _USE_LFN
3806:../tasks/SDMMC/ff.c **** 			w = ff_convert(ff_wtoupper(ff_convert(w, 1)), 0);
3807:../tasks/SDMMC/ff.c **** #else
3808:../tasks/SDMMC/ff.c **** 			if (IsLower(w)) w -= 0x20;			/* To upper ASCII characters */
 10050              		.loc 1 3808 0
 10051 4324 B7F83E32 		ldrh	r3, [r7, #574]
 10052 4328 602B     		cmp	r3, #96
 10053 432a 08D9     		bls	.L583
 10054              		.loc 1 3808 0 is_stmt 0 discriminator 1
 10055 432c B7F83E32 		ldrh	r3, [r7, #574]
 10056 4330 7A2B     		cmp	r3, #122
 10057 4332 04D8     		bhi	.L583
 10058 4334 B7F83E32 		ldrh	r3, [r7, #574]	@ movhi
 10059 4338 203B     		subs	r3, r3, #32
 10060 433a A7F83E32 		strh	r3, [r7, #574]	@ movhi
 10061              	.L583:
3809:../tasks/SDMMC/ff.c **** #ifdef _EXCVT
3810:../tasks/SDMMC/ff.c **** 			if (w >= 0x80) w = ExCvt[w - 0x80];	/* To upper extended characters (SBCS cfg) */
 10062              		.loc 1 3810 0 is_stmt 1
 10063 433e B7F83E32 		ldrh	r3, [r7, #574]
 10064 4342 7F2B     		cmp	r3, #127
 10065 4344 0AD9     		bls	.L584
 10066              		.loc 1 3810 0 is_stmt 0 discriminator 1
 10067 4346 B7F83E32 		ldrh	r3, [r7, #574]
 10068 434a A3F18002 		sub	r2, r3, #128
 10069 434e 40F20003 		movw	r3, #:lower16:ExCvt
 10070 4352 C0F20003 		movt	r3, #:upper16:ExCvt
 10071 4356 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 10072 4358 A7F83E32 		strh	r3, [r7, #574]	@ movhi
 10073              	.L584:
3811:../tasks/SDMMC/ff.c **** #else
3812:../tasks/SDMMC/ff.c **** 			if (!_DF1S && w >= 0x80) w = 0;		/* Reject extended characters (ASCII cfg) */
3813:../tasks/SDMMC/ff.c **** #endif
3814:../tasks/SDMMC/ff.c **** #endif
3815:../tasks/SDMMC/ff.c **** #endif
3816:../tasks/SDMMC/ff.c **** 			if (!w || chk_chr("\"*+,.:;<=>\?[]|\x7F", w) || j >= (UINT)((w >= 0x100) ? 10 : 11)) /* Reject i
 10074              		.loc 1 3816 0 is_stmt 1
 10075 435c B7F83E32 		ldrh	r3, [r7, #574]
 10076 4360 002B     		cmp	r3, #0
 10077 4362 16D0     		beq	.L585
 10078              		.loc 1 3816 0 is_stmt 0 discriminator 1
 10079 4364 B7F83E32 		ldrh	r3, [r7, #574]
 10080 4368 40F20000 		movw	r0, #:lower16:.LC1
 10081 436c C0F20000 		movt	r0, #:upper16:.LC1
 10082 4370 1946     		mov	r1, r3
 10083 4372 FBF7A5FE 		bl	chk_chr
 10084 4376 0346     		mov	r3, r0
 10085 4378 002B     		cmp	r3, #0
 10086 437a 0AD1     		bne	.L585
 10087 437c B7F83E32 		ldrh	r3, [r7, #574]
 10088 4380 FF2B     		cmp	r3, #255
 10089 4382 01D9     		bls	.L586
 10090 4384 0A23     		movs	r3, #10
 10091 4386 00E0     		b	.L587
 10092              	.L586:
 10093              		.loc 1 3816 0 discriminator 2
 10094 4388 0B23     		movs	r3, #11
 10095              	.L587:
 10096              		.loc 1 3816 0 discriminator 3
 10097 438a D7F84422 		ldr	r2, [r7, #580]
 10098 438e 9342     		cmp	r3, r2
 10099 4390 01D8     		bhi	.L588
 10100              	.L585:
3817:../tasks/SDMMC/ff.c **** 				LEAVE_FF(dj.fs, FR_INVALID_NAME);
 10101              		.loc 1 3817 0 is_stmt 1
 10102 4392 0623     		movs	r3, #6
 10103 4394 19E1     		b	.L597
 10104              	.L588:
3818:../tasks/SDMMC/ff.c **** 			if (w >= 0x100) vn[j++] = (BYTE)(w >> 8);
 10105              		.loc 1 3818 0
 10106 4396 B7F83E32 		ldrh	r3, [r7, #574]
 10107 439a FF2B     		cmp	r3, #255
 10108 439c 0CD9     		bls	.L589
 10109              		.loc 1 3818 0 is_stmt 0 discriminator 1
 10110 439e D7F84432 		ldr	r3, [r7, #580]
 10111 43a2 5A1C     		adds	r2, r3, #1
 10112 43a4 C7F84422 		str	r2, [r7, #580]
 10113 43a8 B7F83E22 		ldrh	r2, [r7, #574]
 10114 43ac 120A     		lsrs	r2, r2, #8
 10115 43ae 92B2     		uxth	r2, r2
 10116 43b0 D1B2     		uxtb	r1, r2
 10117 43b2 07F10C02 		add	r2, r7, #12
 10118 43b6 D154     		strb	r1, [r2, r3]
 10119              	.L589:
3819:../tasks/SDMMC/ff.c **** 			vn[j++] = (BYTE)w;
 10120              		.loc 1 3819 0 is_stmt 1
 10121 43b8 D7F84432 		ldr	r3, [r7, #580]
 10122 43bc 5A1C     		adds	r2, r3, #1
 10123 43be C7F84422 		str	r2, [r7, #580]
 10124 43c2 B7F83E22 		ldrh	r2, [r7, #574]	@ movhi
 10125 43c6 D1B2     		uxtb	r1, r2
 10126 43c8 07F10C02 		add	r2, r7, #12
 10127 43cc D154     		strb	r1, [r2, r3]
3820:../tasks/SDMMC/ff.c **** 		} while (i < sl);
 10128              		.loc 1 3820 0
 10129 43ce D7F84822 		ldr	r2, [r7, #584]
 10130 43d2 D7F84032 		ldr	r3, [r7, #576]
 10131 43d6 9A42     		cmp	r2, r3
 10132 43d8 99D3     		bcc	.L590
3821:../tasks/SDMMC/ff.c **** 		while (j < 11) vn[j++] = ' ';
 10133              		.loc 1 3821 0
 10134 43da 08E0     		b	.L591
 10135              	.L592:
 10136              		.loc 1 3821 0 is_stmt 0 discriminator 2
 10137 43dc D7F84432 		ldr	r3, [r7, #580]
 10138 43e0 5A1C     		adds	r2, r3, #1
 10139 43e2 C7F84422 		str	r2, [r7, #580]
 10140 43e6 07F10C02 		add	r2, r7, #12
 10141 43ea 2021     		movs	r1, #32
 10142 43ec D154     		strb	r1, [r2, r3]
 10143              	.L591:
 10144              		.loc 1 3821 0 discriminator 1
 10145 43ee D7F84432 		ldr	r3, [r7, #580]
 10146 43f2 0A2B     		cmp	r3, #10
 10147 43f4 F2D9     		bls	.L592
 10148              	.L582:
3822:../tasks/SDMMC/ff.c **** 	}
3823:../tasks/SDMMC/ff.c **** 
3824:../tasks/SDMMC/ff.c **** 	/* Set volume label */
3825:../tasks/SDMMC/ff.c **** 	dj.sclust = 0;					/* Open root directory */
 10149              		.loc 1 3825 0 is_stmt 1
 10150 43f6 07F11803 		add	r3, r7, #24
 10151 43fa 0022     		movs	r2, #0
 10152 43fc C3F80822 		str	r2, [r3, #520]
3826:../tasks/SDMMC/ff.c **** 	res = dir_sdi(&dj, 0);
 10153              		.loc 1 3826 0
 10154 4400 07F11803 		add	r3, r7, #24
 10155 4404 1846     		mov	r0, r3
 10156 4406 0021     		movs	r1, #0
 10157 4408 FCF77EFC 		bl	dir_sdi
 10158 440c 0346     		mov	r3, r0
 10159 440e 87F84F32 		strb	r3, [r7, #591]
3827:../tasks/SDMMC/ff.c **** 	if (res == FR_OK) {
 10160              		.loc 1 3827 0
 10161 4412 97F84F32 		ldrb	r3, [r7, #591]	@ zero_extendqisi2
 10162 4416 002B     		cmp	r3, #0
 10163 4418 40F0D580 		bne	.L593
3828:../tasks/SDMMC/ff.c **** 		res = dir_read(&dj, 1);		/* Get an entry with AM_VOL */
 10164              		.loc 1 3828 0
 10165 441c 07F11803 		add	r3, r7, #24
 10166 4420 1846     		mov	r0, r3
 10167 4422 0121     		movs	r1, #1
 10168 4424 FCF7E8FE 		bl	dir_read
 10169 4428 0346     		mov	r3, r0
 10170 442a 87F84F32 		strb	r3, [r7, #591]
3829:../tasks/SDMMC/ff.c **** 		if (res == FR_OK) {			/* A volume label is found */
 10171              		.loc 1 3829 0
 10172 442e 97F84F32 		ldrb	r3, [r7, #591]	@ zero_extendqisi2
 10173 4432 002B     		cmp	r3, #0
 10174 4434 55D1     		bne	.L594
3830:../tasks/SDMMC/ff.c **** 			if (vn[0]) {
 10175              		.loc 1 3830 0
 10176 4436 07F10C03 		add	r3, r7, #12
 10177 443a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10178 443c 002B     		cmp	r3, #0
 10179 443e 38D0     		beq	.L595
3831:../tasks/SDMMC/ff.c **** 				mem_cpy(dj.dir, vn, 11);	/* Change the volume label name */
 10180              		.loc 1 3831 0
 10181 4440 07F11803 		add	r3, r7, #24
 10182 4444 D3F81422 		ldr	r2, [r3, #532]
 10183 4448 07F10C03 		add	r3, r7, #12
 10184 444c 1046     		mov	r0, r2
 10185 444e 1946     		mov	r1, r3
 10186 4450 0B22     		movs	r2, #11
 10187 4452 FBF7D5FD 		bl	mem_cpy
3832:../tasks/SDMMC/ff.c **** 				tm = get_fattime();
 10188              		.loc 1 3832 0
 10189 4456 FFF7FEFF 		bl	get_fattime
 10190 445a C7F83802 		str	r0, [r7, #568]
3833:../tasks/SDMMC/ff.c **** 				ST_DWORD(dj.dir+DIR_WrtTime, tm);
 10191              		.loc 1 3833 0
 10192 445e 07F11803 		add	r3, r7, #24
 10193 4462 D3F81432 		ldr	r3, [r3, #532]
 10194 4466 1633     		adds	r3, r3, #22
 10195 4468 D7F83822 		ldr	r2, [r7, #568]
 10196 446c D2B2     		uxtb	r2, r2
 10197 446e 1A70     		strb	r2, [r3]
 10198 4470 07F11803 		add	r3, r7, #24
 10199 4474 D3F81432 		ldr	r3, [r3, #532]
 10200 4478 1733     		adds	r3, r3, #23
 10201 447a D7F83822 		ldr	r2, [r7, #568]
 10202 447e 92B2     		uxth	r2, r2
 10203 4480 120A     		lsrs	r2, r2, #8
 10204 4482 92B2     		uxth	r2, r2
 10205 4484 D2B2     		uxtb	r2, r2
 10206 4486 1A70     		strb	r2, [r3]
 10207 4488 07F11803 		add	r3, r7, #24
 10208 448c D3F81432 		ldr	r3, [r3, #532]
 10209 4490 1833     		adds	r3, r3, #24
 10210 4492 D7F83822 		ldr	r2, [r7, #568]
 10211 4496 120C     		lsrs	r2, r2, #16
 10212 4498 D2B2     		uxtb	r2, r2
 10213 449a 1A70     		strb	r2, [r3]
 10214 449c 07F11803 		add	r3, r7, #24
 10215 44a0 D3F81432 		ldr	r3, [r3, #532]
 10216 44a4 1933     		adds	r3, r3, #25
 10217 44a6 D7F83822 		ldr	r2, [r7, #568]
 10218 44aa 120E     		lsrs	r2, r2, #24
 10219 44ac D2B2     		uxtb	r2, r2
 10220 44ae 1A70     		strb	r2, [r3]
 10221 44b0 05E0     		b	.L596
 10222              	.L595:
3834:../tasks/SDMMC/ff.c **** 			} else {
3835:../tasks/SDMMC/ff.c **** 				dj.dir[0] = DDE;			/* Remove the volume label */
 10223              		.loc 1 3835 0
 10224 44b2 07F11803 		add	r3, r7, #24
 10225 44b6 D3F81432 		ldr	r3, [r3, #532]
 10226 44ba E522     		movs	r2, #229
 10227 44bc 1A70     		strb	r2, [r3]
 10228              	.L596:
3836:../tasks/SDMMC/ff.c **** 			}
3837:../tasks/SDMMC/ff.c **** 			dj.fs->wflag = 1;
 10229              		.loc 1 3837 0 discriminator 1
 10230 44be 07F11803 		add	r3, r7, #24
 10231 44c2 D3F80032 		ldr	r3, [r3, #512]
 10232 44c6 0122     		movs	r2, #1
 10233 44c8 83F80422 		strb	r2, [r3, #516]
3838:../tasks/SDMMC/ff.c **** 			res = sync_fs(dj.fs);
 10234              		.loc 1 3838 0 discriminator 1
 10235 44cc 07F11803 		add	r3, r7, #24
 10236 44d0 D3F80032 		ldr	r3, [r3, #512]
 10237 44d4 1846     		mov	r0, r3
 10238 44d6 FCF773F8 		bl	sync_fs
 10239 44da 0346     		mov	r3, r0
 10240 44dc 87F84F32 		strb	r3, [r7, #591]
 10241 44e0 71E0     		b	.L593
 10242              	.L594:
3839:../tasks/SDMMC/ff.c **** 		} else {					/* No volume label is found or error */
3840:../tasks/SDMMC/ff.c **** 			if (res == FR_NO_FILE) {
 10243              		.loc 1 3840 0
 10244 44e2 97F84F32 		ldrb	r3, [r7, #591]	@ zero_extendqisi2
 10245 44e6 042B     		cmp	r3, #4
 10246 44e8 6DD1     		bne	.L593
3841:../tasks/SDMMC/ff.c **** 				res = FR_OK;
 10247              		.loc 1 3841 0
 10248 44ea 0023     		movs	r3, #0
 10249 44ec 87F84F32 		strb	r3, [r7, #591]
3842:../tasks/SDMMC/ff.c **** 				if (vn[0]) {				/* Create volume label as new */
 10250              		.loc 1 3842 0
 10251 44f0 07F10C03 		add	r3, r7, #12
 10252 44f4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10253 44f6 002B     		cmp	r3, #0
 10254 44f8 65D0     		beq	.L593
3843:../tasks/SDMMC/ff.c **** 					res = dir_alloc(&dj, 1);	/* Allocate an entry for volume label */
 10255              		.loc 1 3843 0
 10256 44fa 07F11803 		add	r3, r7, #24
 10257 44fe 1846     		mov	r0, r3
 10258 4500 0121     		movs	r1, #1
 10259 4502 FCF78FFD 		bl	dir_alloc
 10260 4506 0346     		mov	r3, r0
 10261 4508 87F84F32 		strb	r3, [r7, #591]
3844:../tasks/SDMMC/ff.c **** 					if (res == FR_OK) {
 10262              		.loc 1 3844 0
 10263 450c 97F84F32 		ldrb	r3, [r7, #591]	@ zero_extendqisi2
 10264 4510 002B     		cmp	r3, #0
 10265 4512 58D1     		bne	.L593
3845:../tasks/SDMMC/ff.c **** 						mem_set(dj.dir, 0, SZ_DIR);	/* Set volume label */
 10266              		.loc 1 3845 0
 10267 4514 07F11803 		add	r3, r7, #24
 10268 4518 D3F81432 		ldr	r3, [r3, #532]
 10269 451c 1846     		mov	r0, r3
 10270 451e 0021     		movs	r1, #0
 10271 4520 2022     		movs	r2, #32
 10272 4522 FBF78BFD 		bl	mem_set
3846:../tasks/SDMMC/ff.c **** 						mem_cpy(dj.dir, vn, 11);
 10273              		.loc 1 3846 0
 10274 4526 07F11803 		add	r3, r7, #24
 10275 452a D3F81422 		ldr	r2, [r3, #532]
 10276 452e 07F10C03 		add	r3, r7, #12
 10277 4532 1046     		mov	r0, r2
 10278 4534 1946     		mov	r1, r3
 10279 4536 0B22     		movs	r2, #11
 10280 4538 FBF762FD 		bl	mem_cpy
3847:../tasks/SDMMC/ff.c **** 						dj.dir[DIR_Attr] = AM_VOL;
 10281              		.loc 1 3847 0
 10282 453c 07F11803 		add	r3, r7, #24
 10283 4540 D3F81432 		ldr	r3, [r3, #532]
 10284 4544 0B33     		adds	r3, r3, #11
 10285 4546 0822     		movs	r2, #8
 10286 4548 1A70     		strb	r2, [r3]
3848:../tasks/SDMMC/ff.c **** 						tm = get_fattime();
 10287              		.loc 1 3848 0
 10288 454a FFF7FEFF 		bl	get_fattime
 10289 454e C7F83802 		str	r0, [r7, #568]
3849:../tasks/SDMMC/ff.c **** 						ST_DWORD(dj.dir+DIR_WrtTime, tm);
 10290              		.loc 1 3849 0
 10291 4552 07F11803 		add	r3, r7, #24
 10292 4556 D3F81432 		ldr	r3, [r3, #532]
 10293 455a 1633     		adds	r3, r3, #22
 10294 455c D7F83822 		ldr	r2, [r7, #568]
 10295 4560 D2B2     		uxtb	r2, r2
 10296 4562 1A70     		strb	r2, [r3]
 10297 4564 07F11803 		add	r3, r7, #24
 10298 4568 D3F81432 		ldr	r3, [r3, #532]
 10299 456c 1733     		adds	r3, r3, #23
 10300 456e D7F83822 		ldr	r2, [r7, #568]
 10301 4572 92B2     		uxth	r2, r2
 10302 4574 120A     		lsrs	r2, r2, #8
 10303 4576 92B2     		uxth	r2, r2
 10304 4578 D2B2     		uxtb	r2, r2
 10305 457a 1A70     		strb	r2, [r3]
 10306 457c 07F11803 		add	r3, r7, #24
 10307 4580 D3F81432 		ldr	r3, [r3, #532]
 10308 4584 1833     		adds	r3, r3, #24
 10309 4586 D7F83822 		ldr	r2, [r7, #568]
 10310 458a 120C     		lsrs	r2, r2, #16
 10311 458c D2B2     		uxtb	r2, r2
 10312 458e 1A70     		strb	r2, [r3]
 10313 4590 07F11803 		add	r3, r7, #24
 10314 4594 D3F81432 		ldr	r3, [r3, #532]
 10315 4598 1933     		adds	r3, r3, #25
 10316 459a D7F83822 		ldr	r2, [r7, #568]
 10317 459e 120E     		lsrs	r2, r2, #24
 10318 45a0 D2B2     		uxtb	r2, r2
 10319 45a2 1A70     		strb	r2, [r3]
3850:../tasks/SDMMC/ff.c **** 						dj.fs->wflag = 1;
 10320              		.loc 1 3850 0
 10321 45a4 07F11803 		add	r3, r7, #24
 10322 45a8 D3F80032 		ldr	r3, [r3, #512]
 10323 45ac 0122     		movs	r2, #1
 10324 45ae 83F80422 		strb	r2, [r3, #516]
3851:../tasks/SDMMC/ff.c **** 						res = sync_fs(dj.fs);
 10325              		.loc 1 3851 0
 10326 45b2 07F11803 		add	r3, r7, #24
 10327 45b6 D3F80032 		ldr	r3, [r3, #512]
 10328 45ba 1846     		mov	r0, r3
 10329 45bc FCF700F8 		bl	sync_fs
 10330 45c0 0346     		mov	r3, r0
 10331 45c2 87F84F32 		strb	r3, [r7, #591]
 10332              	.L593:
3852:../tasks/SDMMC/ff.c **** 					}
3853:../tasks/SDMMC/ff.c **** 				}
3854:../tasks/SDMMC/ff.c **** 			}
3855:../tasks/SDMMC/ff.c **** 		}
3856:../tasks/SDMMC/ff.c **** 	}
3857:../tasks/SDMMC/ff.c **** 
3858:../tasks/SDMMC/ff.c **** 	LEAVE_FF(dj.fs, res);
 10333              		.loc 1 3858 0
 10334 45c6 97F84F32 		ldrb	r3, [r7, #591]	@ zero_extendqisi2
 10335              	.L597:
3859:../tasks/SDMMC/ff.c **** }
 10336              		.loc 1 3859 0
 10337 45ca 1846     		mov	r0, r3
 10338 45cc 07F51477 		add	r7, r7, #592
 10339 45d0 BD46     		mov	sp, r7
 10340              		@ sp needed
 10341 45d2 80BD     		pop	{r7, pc}
 10342              		.cfi_endproc
 10343              	.LFE110:
 10345              		.section	.rodata
 10346              		.align	2
 10347              	.LC2:
 10348 00a0 5B46465D 		.ascii	"[FF] I:f_mkfs - Create a partition in this function"
 10348      20493A66 
 10348      5F6D6B66 
 10348      73202D20 
 10348      43726561 
 10349 00d3 2000     		.ascii	" \000"
 10350 00d5 000000   		.align	2
 10351              	.LC3:
 10352 00d8 EBFE904D 		.ascii	"\353\376\220MSDOS5.0\000"
 10352      53444F53 
 10352      352E3000 
 10353              		.align	2
 10354              	.LC4:
 10355 00e4 4E4F204E 		.ascii	"NO NAME    FAT32   \000"
 10355      414D4520 
 10355      20202046 
 10355      41543332 
 10355      20202000 
 10356              		.align	2
 10357              	.LC5:
 10358 00f8 4E4F204E 		.ascii	"NO NAME    FAT     \000"
 10358      414D4520 
 10358      20202046 
 10358      41542020 
 10358      20202000 
 10359              		.text
 10360              		.align	2
 10361              		.global	f_mkfs
 10362              		.thumb
 10363              		.thumb_func
 10365              	f_mkfs:
 10366              	.LFB111:
3860:../tasks/SDMMC/ff.c **** 
3861:../tasks/SDMMC/ff.c **** #endif /* !_FS_READONLY */
3862:../tasks/SDMMC/ff.c **** #endif /* _USE_LABEL */
3863:../tasks/SDMMC/ff.c **** 
3864:../tasks/SDMMC/ff.c **** 
3865:../tasks/SDMMC/ff.c **** 
3866:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
3867:../tasks/SDMMC/ff.c **** /* Forward data to the stream directly (available on only tiny cfg)      */
3868:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
3869:../tasks/SDMMC/ff.c **** #if _USE_FORWARD && _FS_TINY
3870:../tasks/SDMMC/ff.c **** 
3871:../tasks/SDMMC/ff.c **** FRESULT f_forward (
3872:../tasks/SDMMC/ff.c **** 	FIL* fp, 						/* Pointer to the file object */
3873:../tasks/SDMMC/ff.c **** 	UINT (*func)(const BYTE*,UINT),	/* Pointer to the streaming function */
3874:../tasks/SDMMC/ff.c **** 	UINT btf,						/* Number of bytes to forward */
3875:../tasks/SDMMC/ff.c **** 	UINT* bf						/* Pointer to number of bytes forwarded */
3876:../tasks/SDMMC/ff.c **** )
3877:../tasks/SDMMC/ff.c **** {
3878:../tasks/SDMMC/ff.c **** 	FRESULT res;
3879:../tasks/SDMMC/ff.c **** 	DWORD remain, clst, sect;
3880:../tasks/SDMMC/ff.c **** 	UINT rcnt;
3881:../tasks/SDMMC/ff.c **** 	BYTE csect;
3882:../tasks/SDMMC/ff.c **** 
3883:../tasks/SDMMC/ff.c **** 
3884:../tasks/SDMMC/ff.c **** 	*bf = 0;	/* Clear transfer byte counter */
3885:../tasks/SDMMC/ff.c **** 
3886:../tasks/SDMMC/ff.c **** 	res = validate(fp);								/* Check validity of the object */
3887:../tasks/SDMMC/ff.c **** 	if (res != FR_OK) LEAVE_FF(fp->fs, res);
3888:../tasks/SDMMC/ff.c **** 	if (fp->err)									/* Check error */
3889:../tasks/SDMMC/ff.c **** 		LEAVE_FF(fp->fs, (FRESULT)fp->err);
3890:../tasks/SDMMC/ff.c **** 	if (!(fp->flag & FA_READ))						/* Check access mode */
3891:../tasks/SDMMC/ff.c **** 		LEAVE_FF(fp->fs, FR_DENIED);
3892:../tasks/SDMMC/ff.c **** 
3893:../tasks/SDMMC/ff.c **** 	remain = fp->fsize - fp->fptr;
3894:../tasks/SDMMC/ff.c **** 	if (btf > remain) btf = (UINT)remain;			/* Truncate btf by remaining bytes */
3895:../tasks/SDMMC/ff.c **** 
3896:../tasks/SDMMC/ff.c **** 	for ( ;  btf && (*func)(0, 0);					/* Repeat until all data transferred or stream becomes busy */
3897:../tasks/SDMMC/ff.c **** 		fp->fptr += rcnt, *bf += rcnt, btf -= rcnt) {
3898:../tasks/SDMMC/ff.c **** 		csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
3899:../tasks/SDMMC/ff.c **** 		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
3900:../tasks/SDMMC/ff.c **** 			if (!csect) {							/* On the cluster boundary? */
3901:../tasks/SDMMC/ff.c **** 				clst = (fp->fptr == 0) ?			/* On the top of the file? */
3902:../tasks/SDMMC/ff.c **** 					fp->sclust : get_fat(fp->fs, fp->clust);
3903:../tasks/SDMMC/ff.c **** 				if (clst <= 1) ABORT(fp->fs, FR_INT_ERR);
3904:../tasks/SDMMC/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
3905:../tasks/SDMMC/ff.c **** 				fp->clust = clst;					/* Update current cluster */
3906:../tasks/SDMMC/ff.c **** 			}
3907:../tasks/SDMMC/ff.c **** 		}
3908:../tasks/SDMMC/ff.c **** 		sect = clust2sect(fp->fs, fp->clust);		/* Get current data sector */
3909:../tasks/SDMMC/ff.c **** 		if (!sect) ABORT(fp->fs, FR_INT_ERR);
3910:../tasks/SDMMC/ff.c **** 		sect += csect;
3911:../tasks/SDMMC/ff.c **** 		if (move_window(fp->fs, sect))				/* Move sector window */
3912:../tasks/SDMMC/ff.c **** 			ABORT(fp->fs, FR_DISK_ERR);
3913:../tasks/SDMMC/ff.c **** 		fp->dsect = sect;
3914:../tasks/SDMMC/ff.c **** 		rcnt = SS(fp->fs) - (WORD)(fp->fptr % SS(fp->fs));	/* Forward data from sector window */
3915:../tasks/SDMMC/ff.c **** 		if (rcnt > btf) rcnt = btf;
3916:../tasks/SDMMC/ff.c **** 		rcnt = (*func)(&fp->fs->win.d8[(WORD)fp->fptr % SS(fp->fs)], rcnt);
3917:../tasks/SDMMC/ff.c **** 		if (!rcnt) ABORT(fp->fs, FR_INT_ERR);
3918:../tasks/SDMMC/ff.c **** 	}
3919:../tasks/SDMMC/ff.c **** 
3920:../tasks/SDMMC/ff.c **** 	LEAVE_FF(fp->fs, FR_OK);
3921:../tasks/SDMMC/ff.c **** }
3922:../tasks/SDMMC/ff.c **** #endif /* _USE_FORWARD */
3923:../tasks/SDMMC/ff.c **** 
3924:../tasks/SDMMC/ff.c **** 
3925:../tasks/SDMMC/ff.c **** 
3926:../tasks/SDMMC/ff.c **** #if _USE_MKFS && !_FS_READONLY
3927:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
3928:../tasks/SDMMC/ff.c **** /* Create File System on the Drive                                       */
3929:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
3930:../tasks/SDMMC/ff.c **** #define N_ROOTDIR	512		/* Number of root directory entries for FAT12/16 */
3931:../tasks/SDMMC/ff.c **** #define N_FATS		1		/* Number of FAT copies (1 or 2) */
3932:../tasks/SDMMC/ff.c **** 
3933:../tasks/SDMMC/ff.c **** 
3934:../tasks/SDMMC/ff.c **** FRESULT f_mkfs (
3935:../tasks/SDMMC/ff.c **** 	const TCHAR* path,	/* Logical drive number */
3936:../tasks/SDMMC/ff.c **** 	BYTE sfd,			/* Partitioning rule 0:FDISK, 1:SFD */
3937:../tasks/SDMMC/ff.c **** 	UINT au				/* Allocation unit [bytes] */
3938:../tasks/SDMMC/ff.c **** )
3939:../tasks/SDMMC/ff.c **** {
 10367              		.loc 1 3939 0
 10368              		.cfi_startproc
 10369              		@ args = 0, pretend = 0, frame = 88
 10370              		@ frame_needed = 1, uses_anonymous_args = 0
 10371 45d4 80B5     		push	{r7, lr}
 10372              		.cfi_def_cfa_offset 8
 10373              		.cfi_offset 7, -8
 10374              		.cfi_offset 14, -4
 10375 45d6 96B0     		sub	sp, sp, #88
 10376              		.cfi_def_cfa_offset 96
 10377 45d8 00AF     		add	r7, sp, #0
 10378              		.cfi_def_cfa_register 7
 10379 45da F860     		str	r0, [r7, #12]
 10380 45dc 0B46     		mov	r3, r1
 10381 45de 7A60     		str	r2, [r7, #4]
 10382 45e0 FB72     		strb	r3, [r7, #11]
3940:../tasks/SDMMC/ff.c **** 	static const WORD vst[] = { 1024,   512,  256,  128,   64,    32,   16,    8,    4,    2,   0};
3941:../tasks/SDMMC/ff.c **** 	static const WORD cst[] = {32768, 16384, 8192, 4096, 2048, 16384, 8192, 4096, 2048, 1024, 512};
3942:../tasks/SDMMC/ff.c **** 	int vol;
3943:../tasks/SDMMC/ff.c **** 	BYTE fmt, md, sys, *tbl, pdrv, part;
3944:../tasks/SDMMC/ff.c **** 	DWORD n_clst, vs, n, wsect;
3945:../tasks/SDMMC/ff.c **** 	UINT i;
3946:../tasks/SDMMC/ff.c **** 	DWORD b_vol, b_fat, b_dir, b_data;	/* LBA */
3947:../tasks/SDMMC/ff.c **** 	DWORD n_vol, n_rsv, n_fat, n_dir;	/* Size */
3948:../tasks/SDMMC/ff.c **** 	FATFS *fs;
3949:../tasks/SDMMC/ff.c **** 	DSTATUS stat;
3950:../tasks/SDMMC/ff.c **** 
3951:../tasks/SDMMC/ff.c **** 
3952:../tasks/SDMMC/ff.c **** 	/* Check mounted drive and clear work area */
3953:../tasks/SDMMC/ff.c **** 	vol = get_ldnumber(&path);
 10383              		.loc 1 3953 0
 10384 45e2 07F10C03 		add	r3, r7, #12
 10385 45e6 1846     		mov	r0, r3
 10386 45e8 FDF732F8 		bl	get_ldnumber
 10387 45ec B863     		str	r0, [r7, #56]
3954:../tasks/SDMMC/ff.c **** 	if (vol < 0) return FR_INVALID_DRIVE;
 10388              		.loc 1 3954 0
 10389 45ee BB6B     		ldr	r3, [r7, #56]
 10390 45f0 002B     		cmp	r3, #0
 10391 45f2 02DA     		bge	.L599
 10392              		.loc 1 3954 0 is_stmt 0 discriminator 1
 10393 45f4 0B23     		movs	r3, #11
 10394 45f6 00F0A1BC 		b	.L660
 10395              	.L599:
3955:../tasks/SDMMC/ff.c **** 	if (sfd > 1) return FR_INVALID_PARAMETER;
 10396              		.loc 1 3955 0 is_stmt 1
 10397 45fa FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 10398 45fc 012B     		cmp	r3, #1
 10399 45fe 02D9     		bls	.L601
 10400              		.loc 1 3955 0 is_stmt 0 discriminator 1
 10401 4600 1323     		movs	r3, #19
 10402 4602 00F09BBC 		b	.L660
 10403              	.L601:
3956:../tasks/SDMMC/ff.c **** 	if (au & (au - 1)) return FR_INVALID_PARAMETER;
 10404              		.loc 1 3956 0 is_stmt 1
 10405 4606 7B68     		ldr	r3, [r7, #4]
 10406 4608 5A1E     		subs	r2, r3, #1
 10407 460a 7B68     		ldr	r3, [r7, #4]
 10408 460c 1340     		ands	r3, r3, r2
 10409 460e 002B     		cmp	r3, #0
 10410 4610 02D0     		beq	.L602
 10411              		.loc 1 3956 0 is_stmt 0 discriminator 1
 10412 4612 1323     		movs	r3, #19
 10413 4614 00F092BC 		b	.L660
 10414              	.L602:
3957:../tasks/SDMMC/ff.c **** 	fs = FatFs[vol];
 10415              		.loc 1 3957 0 is_stmt 1
 10416 4618 40F20003 		movw	r3, #:lower16:FatFs
 10417 461c C0F20003 		movt	r3, #:upper16:FatFs
 10418 4620 BA6B     		ldr	r2, [r7, #56]
 10419 4622 53F82230 		ldr	r3, [r3, r2, lsl #2]
 10420 4626 7B63     		str	r3, [r7, #52]
3958:../tasks/SDMMC/ff.c **** 	if (!fs) return FR_NOT_ENABLED;
 10421              		.loc 1 3958 0
 10422 4628 7B6B     		ldr	r3, [r7, #52]
 10423 462a 002B     		cmp	r3, #0
 10424 462c 02D1     		bne	.L603
 10425              		.loc 1 3958 0 is_stmt 0 discriminator 1
 10426 462e 0C23     		movs	r3, #12
 10427 4630 00F084BC 		b	.L660
 10428              	.L603:
3959:../tasks/SDMMC/ff.c **** 	fs->fs_type = 0;
 10429              		.loc 1 3959 0 is_stmt 1
 10430 4634 7B6B     		ldr	r3, [r7, #52]
 10431 4636 0022     		movs	r2, #0
 10432 4638 83F80022 		strb	r2, [r3, #512]
3960:../tasks/SDMMC/ff.c **** 	pdrv = LD2PD(vol);	/* Physical drive */
 10433              		.loc 1 3960 0
 10434 463c BB6B     		ldr	r3, [r7, #56]
 10435 463e 87F83330 		strb	r3, [r7, #51]
3961:../tasks/SDMMC/ff.c **** 	part = LD2PT(vol);	/* Partition (0:auto detect, 1-4:get from partition table)*/
 10436              		.loc 1 3961 0
 10437 4642 0023     		movs	r3, #0
 10438 4644 87F83230 		strb	r3, [r7, #50]
3962:../tasks/SDMMC/ff.c **** 
3963:../tasks/SDMMC/ff.c **** 	/* Get disk statics */
3964:../tasks/SDMMC/ff.c **** 	stat = disk_initialize(pdrv);
 10439              		.loc 1 3964 0
 10440 4648 97F83330 		ldrb	r3, [r7, #51]	@ zero_extendqisi2
 10441 464c 1846     		mov	r0, r3
 10442 464e FFF7FEFF 		bl	disk_initialize
 10443 4652 0346     		mov	r3, r0
 10444 4654 87F83130 		strb	r3, [r7, #49]
3965:../tasks/SDMMC/ff.c **** 	if (stat & STA_NOINIT) return FR_NOT_READY;
 10445              		.loc 1 3965 0
 10446 4658 97F83130 		ldrb	r3, [r7, #49]	@ zero_extendqisi2
 10447 465c 03F00103 		and	r3, r3, #1
 10448 4660 002B     		cmp	r3, #0
 10449 4662 02D0     		beq	.L604
 10450              		.loc 1 3965 0 is_stmt 0 discriminator 1
 10451 4664 0323     		movs	r3, #3
 10452 4666 00F069BC 		b	.L660
 10453              	.L604:
3966:../tasks/SDMMC/ff.c **** 	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 10454              		.loc 1 3966 0 is_stmt 1
 10455 466a 97F83130 		ldrb	r3, [r7, #49]	@ zero_extendqisi2
 10456 466e 03F00403 		and	r3, r3, #4
 10457 4672 002B     		cmp	r3, #0
 10458 4674 02D0     		beq	.L605
 10459              		.loc 1 3966 0 is_stmt 0 discriminator 1
 10460 4676 0A23     		movs	r3, #10
 10461 4678 00F060BC 		b	.L660
 10462              	.L605:
3967:../tasks/SDMMC/ff.c **** #if _MAX_SS != 512					/* Get disk sector size */
3968:../tasks/SDMMC/ff.c **** 	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK || SS(fs) > _MAX_SS)
3969:../tasks/SDMMC/ff.c **** 		return FR_DISK_ERR;
3970:../tasks/SDMMC/ff.c **** #endif
3971:../tasks/SDMMC/ff.c **** 	if (_MULTI_PARTITION && part) {
3972:../tasks/SDMMC/ff.c **** 		/* Get partition information from partition table in the MBR */
3973:../tasks/SDMMC/ff.c **** 		if (disk_read(pdrv, fs->win.d8, 0, 1)) return FR_DISK_ERR;
3974:../tasks/SDMMC/ff.c **** 		if (LD_WORD(fs->win.d8+BS_55AA) != 0xAA55) return FR_MKFS_ABORTED;
3975:../tasks/SDMMC/ff.c **** 		tbl = &fs->win.d8[MBR_Table + (part - 1) * SZ_PTE];
3976:../tasks/SDMMC/ff.c **** 		if (!tbl[4]) return FR_MKFS_ABORTED;	/* No partition? */
3977:../tasks/SDMMC/ff.c **** 		b_vol = LD_DWORD(tbl+8);	/* Volume start sector */
3978:../tasks/SDMMC/ff.c **** 		n_vol = LD_DWORD(tbl+12);	/* Volume size */
3979:../tasks/SDMMC/ff.c **** 	} else {
3980:../tasks/SDMMC/ff.c **** 		/* Create a partition in this function */
3981:../tasks/SDMMC/ff.c **** 		printf("[FF] I:f_mkfs - Create a partition in this function \n");
 10463              		.loc 1 3981 0 is_stmt 1
 10464 467c 40F20000 		movw	r0, #:lower16:.LC2
 10465 4680 C0F20000 		movt	r0, #:upper16:.LC2
 10466 4684 FFF7FEFF 		bl	puts
3982:../tasks/SDMMC/ff.c **** 
3983:../tasks/SDMMC/ff.c **** 		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &n_vol) != RES_OK || n_vol < 128){
 10467              		.loc 1 3983 0
 10468 4688 97F83320 		ldrb	r2, [r7, #51]	@ zero_extendqisi2
 10469 468c 07F11003 		add	r3, r7, #16
 10470 4690 1046     		mov	r0, r2
 10471 4692 0121     		movs	r1, #1
 10472 4694 1A46     		mov	r2, r3
 10473 4696 FFF7FEFF 		bl	disk_ioctl
 10474 469a 0346     		mov	r3, r0
 10475 469c 002B     		cmp	r3, #0
 10476 469e 02D1     		bne	.L606
 10477              		.loc 1 3983 0 is_stmt 0 discriminator 1
 10478 46a0 3B69     		ldr	r3, [r7, #16]
 10479 46a2 7F2B     		cmp	r3, #127
 10480 46a4 02D8     		bhi	.L607
 10481              	.L606:
3984:../tasks/SDMMC/ff.c **** 	//		printf("[FF] E:f_mkfs - FR_DISK_ERR\n");
3985:../tasks/SDMMC/ff.c **** 			return FR_DISK_ERR;
 10482              		.loc 1 3985 0 is_stmt 1
 10483 46a6 0123     		movs	r3, #1
 10484 46a8 00F048BC 		b	.L660
 10485              	.L607:
3986:../tasks/SDMMC/ff.c **** 		} else {
3987:../tasks/SDMMC/ff.c **** 	//		printf("[FF] I:f_mkfs - Create a partition in this function .. ok \n");
3988:../tasks/SDMMC/ff.c **** 
3989:../tasks/SDMMC/ff.c **** 		}
3990:../tasks/SDMMC/ff.c **** 		b_vol = (sfd) ? 0 : 63;		/* Volume start sector */
 10486              		.loc 1 3990 0
 10487 46ac FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 10488 46ae 002B     		cmp	r3, #0
 10489 46b0 01D0     		beq	.L608
 10490              		.loc 1 3990 0 is_stmt 0 discriminator 1
 10491 46b2 0023     		movs	r3, #0
 10492 46b4 00E0     		b	.L609
 10493              	.L608:
 10494              		.loc 1 3990 0 discriminator 2
 10495 46b6 3F23     		movs	r3, #63
 10496              	.L609:
 10497              		.loc 1 3990 0 discriminator 3
 10498 46b8 FB62     		str	r3, [r7, #44]
3991:../tasks/SDMMC/ff.c **** 		n_vol -= b_vol;				/* Volume size */
 10499              		.loc 1 3991 0 is_stmt 1 discriminator 3
 10500 46ba 3A69     		ldr	r2, [r7, #16]
 10501 46bc FB6A     		ldr	r3, [r7, #44]
 10502 46be D31A     		subs	r3, r2, r3
 10503 46c0 3B61     		str	r3, [r7, #16]
3992:../tasks/SDMMC/ff.c **** 	}
3993:../tasks/SDMMC/ff.c **** 
3994:../tasks/SDMMC/ff.c **** 	if (!au) {				/* AU auto selection */
 10504              		.loc 1 3994 0 discriminator 3
 10505 46c2 7B68     		ldr	r3, [r7, #4]
 10506 46c4 002B     		cmp	r3, #0
 10507 46c6 21D1     		bne	.L610
3995:../tasks/SDMMC/ff.c **** 		vs = n_vol / (2000 / (SS(fs) / 512));
 10508              		.loc 1 3995 0
 10509 46c8 3A69     		ldr	r2, [r7, #16]
 10510 46ca 44F6D353 		movw	r3, #19923
 10511 46ce C1F26203 		movt	r3, 4194
 10512 46d2 A3FB0213 		umull	r1, r3, r3, r2
 10513 46d6 DB09     		lsrs	r3, r3, #7
 10514 46d8 BB62     		str	r3, [r7, #40]
3996:../tasks/SDMMC/ff.c **** 		for (i = 0; vs < vst[i]; i++) ;
 10515              		.loc 1 3996 0
 10516 46da 0023     		movs	r3, #0
 10517 46dc FB64     		str	r3, [r7, #76]
 10518 46de 02E0     		b	.L611
 10519              	.L612:
 10520              		.loc 1 3996 0 is_stmt 0 discriminator 2
 10521 46e0 FB6C     		ldr	r3, [r7, #76]
 10522 46e2 0133     		adds	r3, r3, #1
 10523 46e4 FB64     		str	r3, [r7, #76]
 10524              	.L611:
 10525              		.loc 1 3996 0 discriminator 1
 10526 46e6 40F20003 		movw	r3, #:lower16:vst.10219
 10527 46ea C0F20003 		movt	r3, #:upper16:vst.10219
 10528 46ee FA6C     		ldr	r2, [r7, #76]
 10529 46f0 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 10530 46f4 1A46     		mov	r2, r3
 10531 46f6 BB6A     		ldr	r3, [r7, #40]
 10532 46f8 9A42     		cmp	r2, r3
 10533 46fa F1D8     		bhi	.L612
3997:../tasks/SDMMC/ff.c **** 		au = cst[i];
 10534              		.loc 1 3997 0 is_stmt 1
 10535 46fc 40F20003 		movw	r3, #:lower16:cst.10220
 10536 4700 C0F20003 		movt	r3, #:upper16:cst.10220
 10537 4704 FA6C     		ldr	r2, [r7, #76]
 10538 4706 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 10539 470a 7B60     		str	r3, [r7, #4]
 10540              	.L610:
3998:../tasks/SDMMC/ff.c **** 	}
3999:../tasks/SDMMC/ff.c **** 	au /= SS(fs);		/* Number of sectors per cluster */
 10541              		.loc 1 3999 0
 10542 470c 7B68     		ldr	r3, [r7, #4]
 10543 470e 5B0A     		lsrs	r3, r3, #9
 10544 4710 7B60     		str	r3, [r7, #4]
4000:../tasks/SDMMC/ff.c **** 	if (au == 0) au = 1;
 10545              		.loc 1 4000 0
 10546 4712 7B68     		ldr	r3, [r7, #4]
 10547 4714 002B     		cmp	r3, #0
 10548 4716 01D1     		bne	.L613
 10549              		.loc 1 4000 0 is_stmt 0 discriminator 1
 10550 4718 0123     		movs	r3, #1
 10551 471a 7B60     		str	r3, [r7, #4]
 10552              	.L613:
4001:../tasks/SDMMC/ff.c **** 	if (au > 128) au = 128;
 10553              		.loc 1 4001 0 is_stmt 1
 10554 471c 7B68     		ldr	r3, [r7, #4]
 10555 471e 802B     		cmp	r3, #128
 10556 4720 01D9     		bls	.L614
 10557              		.loc 1 4001 0 is_stmt 0 discriminator 1
 10558 4722 8023     		movs	r3, #128
 10559 4724 7B60     		str	r3, [r7, #4]
 10560              	.L614:
4002:../tasks/SDMMC/ff.c **** 
4003:../tasks/SDMMC/ff.c **** 	/* Pre-compute number of clusters and FAT sub-type */
4004:../tasks/SDMMC/ff.c **** 	n_clst = n_vol / au;
 10561              		.loc 1 4004 0 is_stmt 1
 10562 4726 3A69     		ldr	r2, [r7, #16]
 10563 4728 7B68     		ldr	r3, [r7, #4]
 10564 472a B2FBF3F3 		udiv	r3, r2, r3
 10565 472e 7B62     		str	r3, [r7, #36]
4005:../tasks/SDMMC/ff.c **** 	fmt = FS_FAT12;
 10566              		.loc 1 4005 0
 10567 4730 0123     		movs	r3, #1
 10568 4732 87F85730 		strb	r3, [r7, #87]
4006:../tasks/SDMMC/ff.c **** 	if (n_clst >= MIN_FAT16) fmt = FS_FAT16;
 10569              		.loc 1 4006 0
 10570 4736 7A6A     		ldr	r2, [r7, #36]
 10571 4738 40F6F573 		movw	r3, #4085
 10572 473c 9A42     		cmp	r2, r3
 10573 473e 02D9     		bls	.L615
 10574              		.loc 1 4006 0 is_stmt 0 discriminator 1
 10575 4740 0223     		movs	r3, #2
 10576 4742 87F85730 		strb	r3, [r7, #87]
 10577              	.L615:
4007:../tasks/SDMMC/ff.c **** 	if (n_clst >= MIN_FAT32) fmt = FS_FAT32;
 10578              		.loc 1 4007 0 is_stmt 1
 10579 4746 7A6A     		ldr	r2, [r7, #36]
 10580 4748 4FF6F573 		movw	r3, #65525
 10581 474c 9A42     		cmp	r2, r3
 10582 474e 02D9     		bls	.L616
 10583              		.loc 1 4007 0 is_stmt 0 discriminator 1
 10584 4750 0323     		movs	r3, #3
 10585 4752 87F85730 		strb	r3, [r7, #87]
 10586              	.L616:
4008:../tasks/SDMMC/ff.c **** 
4009:../tasks/SDMMC/ff.c **** 	/* Determine offset and size of FAT structure */
4010:../tasks/SDMMC/ff.c **** 	if (fmt == FS_FAT32) {
 10587              		.loc 1 4010 0 is_stmt 1
 10588 4756 97F85730 		ldrb	r3, [r7, #87]	@ zero_extendqisi2
 10589 475a 032B     		cmp	r3, #3
 10590 475c 0AD1     		bne	.L617
4011:../tasks/SDMMC/ff.c **** 		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
 10591              		.loc 1 4011 0
 10592 475e 7B6A     		ldr	r3, [r7, #36]
 10593 4760 8233     		adds	r3, r3, #130
 10594 4762 9B00     		lsls	r3, r3, #2
 10595 4764 013B     		subs	r3, r3, #1
 10596 4766 5B0A     		lsrs	r3, r3, #9
 10597 4768 3B64     		str	r3, [r7, #64]
4012:../tasks/SDMMC/ff.c **** 		n_rsv = 32;
 10598              		.loc 1 4012 0
 10599 476a 2023     		movs	r3, #32
 10600 476c 7B64     		str	r3, [r7, #68]
4013:../tasks/SDMMC/ff.c **** 		n_dir = 0;
 10601              		.loc 1 4013 0
 10602 476e 0023     		movs	r3, #0
 10603 4770 FB63     		str	r3, [r7, #60]
 10604 4772 18E0     		b	.L618
 10605              	.L617:
4014:../tasks/SDMMC/ff.c **** 	} else {
4015:../tasks/SDMMC/ff.c **** 		n_fat = (fmt == FS_FAT12) ? (n_clst * 3 + 1) / 2 + 3 : (n_clst * 2) + 4;
 10606              		.loc 1 4015 0
 10607 4774 97F85730 		ldrb	r3, [r7, #87]	@ zero_extendqisi2
 10608 4778 012B     		cmp	r3, #1
 10609 477a 07D1     		bne	.L619
 10610              		.loc 1 4015 0 is_stmt 0 discriminator 1
 10611 477c 7A6A     		ldr	r2, [r7, #36]
 10612 477e 1346     		mov	r3, r2
 10613 4780 5B00     		lsls	r3, r3, #1
 10614 4782 1344     		add	r3, r3, r2
 10615 4784 0133     		adds	r3, r3, #1
 10616 4786 5B08     		lsrs	r3, r3, #1
 10617 4788 0333     		adds	r3, r3, #3
 10618 478a 02E0     		b	.L620
 10619              	.L619:
 10620              		.loc 1 4015 0 discriminator 2
 10621 478c 7B6A     		ldr	r3, [r7, #36]
 10622 478e 0233     		adds	r3, r3, #2
 10623 4790 5B00     		lsls	r3, r3, #1
 10624              	.L620:
 10625              		.loc 1 4015 0 discriminator 3
 10626 4792 3B64     		str	r3, [r7, #64]
4016:../tasks/SDMMC/ff.c **** 		n_fat = (n_fat + SS(fs) - 1) / SS(fs);
 10627              		.loc 1 4016 0 is_stmt 1 discriminator 3
 10628 4794 3B6C     		ldr	r3, [r7, #64]
 10629 4796 03F2FF13 		addw	r3, r3, #511
 10630 479a 5B0A     		lsrs	r3, r3, #9
 10631 479c 3B64     		str	r3, [r7, #64]
4017:../tasks/SDMMC/ff.c **** 		n_rsv = 1;
 10632              		.loc 1 4017 0 discriminator 3
 10633 479e 0123     		movs	r3, #1
 10634 47a0 7B64     		str	r3, [r7, #68]
4018:../tasks/SDMMC/ff.c **** 		n_dir = (DWORD)N_ROOTDIR * SZ_DIR / SS(fs);
 10635              		.loc 1 4018 0 discriminator 3
 10636 47a2 2023     		movs	r3, #32
 10637 47a4 FB63     		str	r3, [r7, #60]
 10638              	.L618:
4019:../tasks/SDMMC/ff.c **** 	}
4020:../tasks/SDMMC/ff.c **** 	b_fat = b_vol + n_rsv;				/* FAT area start sector */
 10639              		.loc 1 4020 0
 10640 47a6 FA6A     		ldr	r2, [r7, #44]
 10641 47a8 7B6C     		ldr	r3, [r7, #68]
 10642 47aa 1344     		add	r3, r3, r2
 10643 47ac BB64     		str	r3, [r7, #72]
4021:../tasks/SDMMC/ff.c **** 	b_dir = b_fat + n_fat * N_FATS;		/* Directory area start sector */
 10644              		.loc 1 4021 0
 10645 47ae BA6C     		ldr	r2, [r7, #72]
 10646 47b0 3B6C     		ldr	r3, [r7, #64]
 10647 47b2 1344     		add	r3, r3, r2
 10648 47b4 3B62     		str	r3, [r7, #32]
4022:../tasks/SDMMC/ff.c **** 	b_data = b_dir + n_dir;				/* Data area start sector */
 10649              		.loc 1 4022 0
 10650 47b6 3A6A     		ldr	r2, [r7, #32]
 10651 47b8 FB6B     		ldr	r3, [r7, #60]
 10652 47ba 1344     		add	r3, r3, r2
 10653 47bc FB61     		str	r3, [r7, #28]
4023:../tasks/SDMMC/ff.c **** 	if (n_vol < b_data + au - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 10654              		.loc 1 4023 0
 10655 47be FA69     		ldr	r2, [r7, #28]
 10656 47c0 7B68     		ldr	r3, [r7, #4]
 10657 47c2 1A44     		add	r2, r2, r3
 10658 47c4 FB6A     		ldr	r3, [r7, #44]
 10659 47c6 D21A     		subs	r2, r2, r3
 10660 47c8 3B69     		ldr	r3, [r7, #16]
 10661 47ca 9A42     		cmp	r2, r3
 10662 47cc 01D9     		bls	.L621
 10663              		.loc 1 4023 0 is_stmt 0 discriminator 1
 10664 47ce 0E23     		movs	r3, #14
 10665 47d0 B4E3     		b	.L660
 10666              	.L621:
4024:../tasks/SDMMC/ff.c **** 
4025:../tasks/SDMMC/ff.c **** 	/* Align data start sector to erase block boundary (for flash memory media) */
4026:../tasks/SDMMC/ff.c **** 	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &n) != RES_OK || !n || n > 32768) n = 1;
 10667              		.loc 1 4026 0 is_stmt 1
 10668 47d2 97F83320 		ldrb	r2, [r7, #51]	@ zero_extendqisi2
 10669 47d6 07F11403 		add	r3, r7, #20
 10670 47da 1046     		mov	r0, r2
 10671 47dc 0321     		movs	r1, #3
 10672 47de 1A46     		mov	r2, r3
 10673 47e0 FFF7FEFF 		bl	disk_ioctl
 10674 47e4 0346     		mov	r3, r0
 10675 47e6 002B     		cmp	r3, #0
 10676 47e8 06D1     		bne	.L622
 10677              		.loc 1 4026 0 is_stmt 0 discriminator 2
 10678 47ea 7B69     		ldr	r3, [r7, #20]
 10679 47ec 002B     		cmp	r3, #0
 10680 47ee 03D0     		beq	.L622
 10681              		.loc 1 4026 0 discriminator 1
 10682 47f0 7B69     		ldr	r3, [r7, #20]
 10683 47f2 B3F5004F 		cmp	r3, #32768
 10684 47f6 01D9     		bls	.L623
 10685              	.L622:
 10686 47f8 0123     		movs	r3, #1
 10687 47fa 7B61     		str	r3, [r7, #20]
 10688              	.L623:
4027:../tasks/SDMMC/ff.c **** 	n = (b_data + n - 1) & ~(n - 1);	/* Next nearest erase block from current data start */
 10689              		.loc 1 4027 0 is_stmt 1
 10690 47fc 7A69     		ldr	r2, [r7, #20]
 10691 47fe FB69     		ldr	r3, [r7, #28]
 10692 4800 1344     		add	r3, r3, r2
 10693 4802 5A1E     		subs	r2, r3, #1
 10694 4804 7B69     		ldr	r3, [r7, #20]
 10695 4806 5B42     		negs	r3, r3
 10696 4808 1340     		ands	r3, r3, r2
 10697 480a 7B61     		str	r3, [r7, #20]
4028:../tasks/SDMMC/ff.c **** 	n = (n - b_data) / N_FATS;
 10698              		.loc 1 4028 0
 10699 480c 7A69     		ldr	r2, [r7, #20]
 10700 480e FB69     		ldr	r3, [r7, #28]
 10701 4810 D31A     		subs	r3, r2, r3
 10702 4812 7B61     		str	r3, [r7, #20]
4029:../tasks/SDMMC/ff.c **** 	if (fmt == FS_FAT32) {		/* FAT32: Move FAT offset */
 10703              		.loc 1 4029 0
 10704 4814 97F85730 		ldrb	r3, [r7, #87]	@ zero_extendqisi2
 10705 4818 032B     		cmp	r3, #3
 10706 481a 08D1     		bne	.L624
4030:../tasks/SDMMC/ff.c **** 		n_rsv += n;
 10707              		.loc 1 4030 0
 10708 481c 7B69     		ldr	r3, [r7, #20]
 10709 481e 7A6C     		ldr	r2, [r7, #68]
 10710 4820 1344     		add	r3, r3, r2
 10711 4822 7B64     		str	r3, [r7, #68]
4031:../tasks/SDMMC/ff.c **** 		b_fat += n;
 10712              		.loc 1 4031 0
 10713 4824 7B69     		ldr	r3, [r7, #20]
 10714 4826 BA6C     		ldr	r2, [r7, #72]
 10715 4828 1344     		add	r3, r3, r2
 10716 482a BB64     		str	r3, [r7, #72]
 10717 482c 03E0     		b	.L625
 10718              	.L624:
4032:../tasks/SDMMC/ff.c **** 	} else {					/* FAT12/16: Expand FAT size */
4033:../tasks/SDMMC/ff.c **** 		n_fat += n;
 10719              		.loc 1 4033 0
 10720 482e 7B69     		ldr	r3, [r7, #20]
 10721 4830 3A6C     		ldr	r2, [r7, #64]
 10722 4832 1344     		add	r3, r3, r2
 10723 4834 3B64     		str	r3, [r7, #64]
 10724              	.L625:
4034:../tasks/SDMMC/ff.c **** 	}
4035:../tasks/SDMMC/ff.c **** 
4036:../tasks/SDMMC/ff.c **** 	/* Determine number of clusters and final check of validity of the FAT sub-type */
4037:../tasks/SDMMC/ff.c **** 	n_clst = (n_vol - n_rsv - n_fat * N_FATS - n_dir) / au;
 10725              		.loc 1 4037 0
 10726 4836 3A69     		ldr	r2, [r7, #16]
 10727 4838 7B6C     		ldr	r3, [r7, #68]
 10728 483a D21A     		subs	r2, r2, r3
 10729 483c 3B6C     		ldr	r3, [r7, #64]
 10730 483e D21A     		subs	r2, r2, r3
 10731 4840 FB6B     		ldr	r3, [r7, #60]
 10732 4842 D21A     		subs	r2, r2, r3
 10733 4844 7B68     		ldr	r3, [r7, #4]
 10734 4846 B2FBF3F3 		udiv	r3, r2, r3
 10735 484a 7B62     		str	r3, [r7, #36]
4038:../tasks/SDMMC/ff.c **** 	if (   (fmt == FS_FAT16 && n_clst < MIN_FAT16)
 10736              		.loc 1 4038 0
 10737 484c 97F85730 		ldrb	r3, [r7, #87]	@ zero_extendqisi2
 10738 4850 022B     		cmp	r3, #2
 10739 4852 04D1     		bne	.L626
 10740              		.loc 1 4038 0 is_stmt 0 discriminator 1
 10741 4854 7A6A     		ldr	r2, [r7, #36]
 10742 4856 40F6F573 		movw	r3, #4085
 10743 485a 9A42     		cmp	r2, r3
 10744 485c 08D9     		bls	.L627
 10745              	.L626:
4039:../tasks/SDMMC/ff.c **** 		|| (fmt == FS_FAT32 && n_clst < MIN_FAT32))
 10746              		.loc 1 4039 0 is_stmt 1
 10747 485e 97F85730 		ldrb	r3, [r7, #87]	@ zero_extendqisi2
 10748 4862 032B     		cmp	r3, #3
 10749 4864 06D1     		bne	.L628
 10750              		.loc 1 4039 0 is_stmt 0 discriminator 1
 10751 4866 7A6A     		ldr	r2, [r7, #36]
 10752 4868 4FF6F573 		movw	r3, #65525
 10753 486c 9A42     		cmp	r2, r3
 10754 486e 01D8     		bhi	.L628
 10755              	.L627:
4040:../tasks/SDMMC/ff.c **** 		return FR_MKFS_ABORTED;
 10756              		.loc 1 4040 0 is_stmt 1
 10757 4870 0E23     		movs	r3, #14
 10758 4872 63E3     		b	.L660
 10759              	.L628:
4041:../tasks/SDMMC/ff.c **** 
4042:../tasks/SDMMC/ff.c **** 	/* Determine system ID in the partition table */
4043:../tasks/SDMMC/ff.c **** 	if (fmt == FS_FAT32) {
 10760              		.loc 1 4043 0
 10761 4874 97F85730 		ldrb	r3, [r7, #87]	@ zero_extendqisi2
 10762 4878 032B     		cmp	r3, #3
 10763 487a 03D1     		bne	.L629
4044:../tasks/SDMMC/ff.c **** 		sys = 0x0C;		/* FAT32X */
 10764              		.loc 1 4044 0
 10765 487c 0C23     		movs	r3, #12
 10766 487e 87F85530 		strb	r3, [r7, #85]
 10767 4882 14E0     		b	.L661
 10768              	.L629:
4045:../tasks/SDMMC/ff.c **** 	} else {
4046:../tasks/SDMMC/ff.c **** 		if (fmt == FS_FAT12 && n_vol < 0x10000) {
 10769              		.loc 1 4046 0
 10770 4884 97F85730 		ldrb	r3, [r7, #87]	@ zero_extendqisi2
 10771 4888 012B     		cmp	r3, #1
 10772 488a 07D1     		bne	.L631
 10773              		.loc 1 4046 0 is_stmt 0 discriminator 1
 10774 488c 3B69     		ldr	r3, [r7, #16]
 10775 488e B3F5803F 		cmp	r3, #65536
 10776 4892 03D2     		bcs	.L631
4047:../tasks/SDMMC/ff.c **** 			sys = 0x01;	/* FAT12(<65536) */
 10777              		.loc 1 4047 0 is_stmt 1
 10778 4894 0123     		movs	r3, #1
 10779 4896 87F85530 		strb	r3, [r7, #85]
 10780 489a 08E0     		b	.L661
 10781              	.L631:
4048:../tasks/SDMMC/ff.c **** 		} else {
4049:../tasks/SDMMC/ff.c **** 			sys = (n_vol < 0x10000) ? 0x04 : 0x06;	/* FAT16(<65536) : FAT12/16(>=65536) */
 10782              		.loc 1 4049 0
 10783 489c 3B69     		ldr	r3, [r7, #16]
 10784 489e B3F5803F 		cmp	r3, #65536
 10785 48a2 01D2     		bcs	.L632
 10786              		.loc 1 4049 0 is_stmt 0 discriminator 1
 10787 48a4 0423     		movs	r3, #4
 10788 48a6 00E0     		b	.L633
 10789              	.L632:
 10790              		.loc 1 4049 0 discriminator 2
 10791 48a8 0623     		movs	r3, #6
 10792              	.L633:
 10793              		.loc 1 4049 0 discriminator 3
 10794 48aa 87F85530 		strb	r3, [r7, #85]
 10795              	.L661:
4050:../tasks/SDMMC/ff.c **** 		}
4051:../tasks/SDMMC/ff.c **** 	}
4052:../tasks/SDMMC/ff.c **** 
4053:../tasks/SDMMC/ff.c **** 	if (_MULTI_PARTITION && part) {
4054:../tasks/SDMMC/ff.c **** 		/* Update system ID in the partition table */
4055:../tasks/SDMMC/ff.c **** 		tbl = &fs->win.d8[MBR_Table + (part - 1) * SZ_PTE];
4056:../tasks/SDMMC/ff.c **** 		tbl[4] = sys;
4057:../tasks/SDMMC/ff.c **** 		if (disk_write(pdrv, fs->win.d8, 0, 1))	/* Write it to teh MBR */
4058:../tasks/SDMMC/ff.c **** 			return FR_DISK_ERR;
4059:../tasks/SDMMC/ff.c **** 		md = 0xF8;
4060:../tasks/SDMMC/ff.c **** 	} else {
4061:../tasks/SDMMC/ff.c **** 		if (sfd) {	/* No partition table (SFD) */
 10796              		.loc 1 4061 0 is_stmt 1
 10797 48ae FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 10798 48b0 002B     		cmp	r3, #0
 10799 48b2 03D0     		beq	.L634
4062:../tasks/SDMMC/ff.c **** 			md = 0xF0;
 10800              		.loc 1 4062 0
 10801 48b4 F023     		movs	r3, #240
 10802 48b6 87F85630 		strb	r3, [r7, #86]
 10803 48ba 7DE0     		b	.L635
 10804              	.L634:
4063:../tasks/SDMMC/ff.c **** 		} else {	/* Create partition table (FDISK) */
4064:../tasks/SDMMC/ff.c **** 			mem_set(fs->win.d8, 0, SS(fs));
 10805              		.loc 1 4064 0
 10806 48bc 7B6B     		ldr	r3, [r7, #52]
 10807 48be 1846     		mov	r0, r3
 10808 48c0 0021     		movs	r1, #0
 10809 48c2 4FF40072 		mov	r2, #512
 10810 48c6 FBF7B9FB 		bl	mem_set
4065:../tasks/SDMMC/ff.c **** 			tbl = fs->win.d8+MBR_Table;	/* Create partition table for single partition in the drive */
 10811              		.loc 1 4065 0
 10812 48ca 7B6B     		ldr	r3, [r7, #52]
 10813 48cc 03F5DF73 		add	r3, r3, #446
 10814 48d0 BB61     		str	r3, [r7, #24]
4066:../tasks/SDMMC/ff.c **** 			tbl[1] = 1;						/* Partition start head */
 10815              		.loc 1 4066 0
 10816 48d2 BB69     		ldr	r3, [r7, #24]
 10817 48d4 0133     		adds	r3, r3, #1
 10818 48d6 0122     		movs	r2, #1
 10819 48d8 1A70     		strb	r2, [r3]
4067:../tasks/SDMMC/ff.c **** 			tbl[2] = 1;						/* Partition start sector */
 10820              		.loc 1 4067 0
 10821 48da BB69     		ldr	r3, [r7, #24]
 10822 48dc 0233     		adds	r3, r3, #2
 10823 48de 0122     		movs	r2, #1
 10824 48e0 1A70     		strb	r2, [r3]
4068:../tasks/SDMMC/ff.c **** 			tbl[3] = 0;						/* Partition start cylinder */
 10825              		.loc 1 4068 0
 10826 48e2 BB69     		ldr	r3, [r7, #24]
 10827 48e4 0333     		adds	r3, r3, #3
 10828 48e6 0022     		movs	r2, #0
 10829 48e8 1A70     		strb	r2, [r3]
4069:../tasks/SDMMC/ff.c **** 			tbl[4] = sys;					/* System type */
 10830              		.loc 1 4069 0
 10831 48ea BB69     		ldr	r3, [r7, #24]
 10832 48ec 0433     		adds	r3, r3, #4
 10833 48ee 97F85520 		ldrb	r2, [r7, #85]
 10834 48f2 1A70     		strb	r2, [r3]
4070:../tasks/SDMMC/ff.c **** 			tbl[5] = 254;					/* Partition end head */
 10835              		.loc 1 4070 0
 10836 48f4 BB69     		ldr	r3, [r7, #24]
 10837 48f6 0533     		adds	r3, r3, #5
 10838 48f8 FE22     		movs	r2, #254
 10839 48fa 1A70     		strb	r2, [r3]
4071:../tasks/SDMMC/ff.c **** 			n = (b_vol + n_vol) / 63 / 255;
 10840              		.loc 1 4071 0
 10841 48fc 3A69     		ldr	r2, [r7, #16]
 10842 48fe FB6A     		ldr	r3, [r7, #44]
 10843 4900 1A44     		add	r2, r2, r3
 10844 4902 45F25B63 		movw	r3, #22107
 10845 4906 C0F21553 		movt	r3, 1301
 10846 490a A3FB0213 		umull	r1, r3, r3, r2
 10847 490e D21A     		subs	r2, r2, r3
 10848 4910 5208     		lsrs	r2, r2, #1
 10849 4912 1344     		add	r3, r3, r2
 10850 4914 5B0B     		lsrs	r3, r3, #13
 10851 4916 7B61     		str	r3, [r7, #20]
4072:../tasks/SDMMC/ff.c **** 			tbl[6] = (BYTE)(n >> 2 | 63);	/* Partition end sector */
 10852              		.loc 1 4072 0
 10853 4918 BB69     		ldr	r3, [r7, #24]
 10854 491a 0633     		adds	r3, r3, #6
 10855 491c 7A69     		ldr	r2, [r7, #20]
 10856 491e 9208     		lsrs	r2, r2, #2
 10857 4920 D2B2     		uxtb	r2, r2
 10858 4922 42F03F02 		orr	r2, r2, #63
 10859 4926 D2B2     		uxtb	r2, r2
 10860 4928 1A70     		strb	r2, [r3]
4073:../tasks/SDMMC/ff.c **** 			tbl[7] = (BYTE)n;				/* End cylinder */
 10861              		.loc 1 4073 0
 10862 492a BB69     		ldr	r3, [r7, #24]
 10863 492c 0733     		adds	r3, r3, #7
 10864 492e 7A69     		ldr	r2, [r7, #20]
 10865 4930 D2B2     		uxtb	r2, r2
 10866 4932 1A70     		strb	r2, [r3]
4074:../tasks/SDMMC/ff.c **** 			ST_DWORD(tbl+8, 63);			/* Partition start in LBA */
 10867              		.loc 1 4074 0
 10868 4934 BB69     		ldr	r3, [r7, #24]
 10869 4936 0833     		adds	r3, r3, #8
 10870 4938 3F22     		movs	r2, #63
 10871 493a 1A70     		strb	r2, [r3]
 10872 493c BB69     		ldr	r3, [r7, #24]
 10873 493e 0933     		adds	r3, r3, #9
 10874 4940 0022     		movs	r2, #0
 10875 4942 1A70     		strb	r2, [r3]
 10876 4944 BB69     		ldr	r3, [r7, #24]
 10877 4946 0A33     		adds	r3, r3, #10
 10878 4948 0022     		movs	r2, #0
 10879 494a 1A70     		strb	r2, [r3]
 10880 494c BB69     		ldr	r3, [r7, #24]
 10881 494e 0B33     		adds	r3, r3, #11
 10882 4950 0022     		movs	r2, #0
 10883 4952 1A70     		strb	r2, [r3]
4075:../tasks/SDMMC/ff.c **** 			ST_DWORD(tbl+12, n_vol);		/* Partition size in LBA */
 10884              		.loc 1 4075 0
 10885 4954 BB69     		ldr	r3, [r7, #24]
 10886 4956 0C33     		adds	r3, r3, #12
 10887 4958 3A69     		ldr	r2, [r7, #16]
 10888 495a D2B2     		uxtb	r2, r2
 10889 495c 1A70     		strb	r2, [r3]
 10890 495e BB69     		ldr	r3, [r7, #24]
 10891 4960 0D33     		adds	r3, r3, #13
 10892 4962 3A69     		ldr	r2, [r7, #16]
 10893 4964 92B2     		uxth	r2, r2
 10894 4966 120A     		lsrs	r2, r2, #8
 10895 4968 92B2     		uxth	r2, r2
 10896 496a D2B2     		uxtb	r2, r2
 10897 496c 1A70     		strb	r2, [r3]
 10898 496e BB69     		ldr	r3, [r7, #24]
 10899 4970 0E33     		adds	r3, r3, #14
 10900 4972 3A69     		ldr	r2, [r7, #16]
 10901 4974 120C     		lsrs	r2, r2, #16
 10902 4976 D2B2     		uxtb	r2, r2
 10903 4978 1A70     		strb	r2, [r3]
 10904 497a BB69     		ldr	r3, [r7, #24]
 10905 497c 0F33     		adds	r3, r3, #15
 10906 497e 3A69     		ldr	r2, [r7, #16]
 10907 4980 120E     		lsrs	r2, r2, #24
 10908 4982 D2B2     		uxtb	r2, r2
 10909 4984 1A70     		strb	r2, [r3]
4076:../tasks/SDMMC/ff.c **** 			ST_WORD(fs->win.d8+BS_55AA, 0xAA55);	/* MBR signature */
 10910              		.loc 1 4076 0
 10911 4986 7B6B     		ldr	r3, [r7, #52]
 10912 4988 5522     		movs	r2, #85
 10913 498a 83F8FE21 		strb	r2, [r3, #510]
 10914 498e 7B6B     		ldr	r3, [r7, #52]
 10915 4990 AA22     		movs	r2, #170
 10916 4992 83F8FF21 		strb	r2, [r3, #511]
4077:../tasks/SDMMC/ff.c **** 			if (disk_write(pdrv, fs->win.d8, 0, 1))	/* Write it to the MBR */
 10917              		.loc 1 4077 0
 10918 4996 7B6B     		ldr	r3, [r7, #52]
 10919 4998 97F83320 		ldrb	r2, [r7, #51]	@ zero_extendqisi2
 10920 499c 1046     		mov	r0, r2
 10921 499e 1946     		mov	r1, r3
 10922 49a0 0022     		movs	r2, #0
 10923 49a2 0123     		movs	r3, #1
 10924 49a4 FFF7FEFF 		bl	disk_write
 10925 49a8 0346     		mov	r3, r0
 10926 49aa 002B     		cmp	r3, #0
 10927 49ac 01D0     		beq	.L636
4078:../tasks/SDMMC/ff.c **** 				return FR_DISK_ERR;
 10928              		.loc 1 4078 0
 10929 49ae 0123     		movs	r3, #1
 10930 49b0 C4E2     		b	.L660
 10931              	.L636:
4079:../tasks/SDMMC/ff.c **** 			md = 0xF8;
 10932              		.loc 1 4079 0
 10933 49b2 F823     		movs	r3, #248
 10934 49b4 87F85630 		strb	r3, [r7, #86]
 10935              	.L635:
4080:../tasks/SDMMC/ff.c **** 		}
4081:../tasks/SDMMC/ff.c **** 	}
4082:../tasks/SDMMC/ff.c **** 
4083:../tasks/SDMMC/ff.c **** 	/* Create BPB in the VBR */
4084:../tasks/SDMMC/ff.c **** 	tbl = fs->win.d8;							/* Clear sector */
 10936              		.loc 1 4084 0
 10937 49b8 7B6B     		ldr	r3, [r7, #52]
 10938 49ba BB61     		str	r3, [r7, #24]
4085:../tasks/SDMMC/ff.c **** 	mem_set(tbl, 0, SS(fs));
 10939              		.loc 1 4085 0
 10940 49bc B869     		ldr	r0, [r7, #24]
 10941 49be 0021     		movs	r1, #0
 10942 49c0 4FF40072 		mov	r2, #512
 10943 49c4 FBF73AFB 		bl	mem_set
4086:../tasks/SDMMC/ff.c **** 	mem_cpy(tbl, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code, OEM name */
 10944              		.loc 1 4086 0
 10945 49c8 B869     		ldr	r0, [r7, #24]
 10946 49ca 40F20001 		movw	r1, #:lower16:.LC3
 10947 49ce C0F20001 		movt	r1, #:upper16:.LC3
 10948 49d2 0B22     		movs	r2, #11
 10949 49d4 FBF714FB 		bl	mem_cpy
4087:../tasks/SDMMC/ff.c **** 	i = SS(fs);								/* Sector size */
 10950              		.loc 1 4087 0
 10951 49d8 4FF40073 		mov	r3, #512
 10952 49dc FB64     		str	r3, [r7, #76]
4088:../tasks/SDMMC/ff.c **** 	ST_WORD(tbl+BPB_BytsPerSec, i);
 10953              		.loc 1 4088 0
 10954 49de BB69     		ldr	r3, [r7, #24]
 10955 49e0 0B33     		adds	r3, r3, #11
 10956 49e2 FA6C     		ldr	r2, [r7, #76]
 10957 49e4 D2B2     		uxtb	r2, r2
 10958 49e6 1A70     		strb	r2, [r3]
 10959 49e8 BB69     		ldr	r3, [r7, #24]
 10960 49ea 0C33     		adds	r3, r3, #12
 10961 49ec FA6C     		ldr	r2, [r7, #76]
 10962 49ee 92B2     		uxth	r2, r2
 10963 49f0 120A     		lsrs	r2, r2, #8
 10964 49f2 92B2     		uxth	r2, r2
 10965 49f4 D2B2     		uxtb	r2, r2
 10966 49f6 1A70     		strb	r2, [r3]
4089:../tasks/SDMMC/ff.c **** 	tbl[BPB_SecPerClus] = (BYTE)au;			/* Sectors per cluster */
 10967              		.loc 1 4089 0
 10968 49f8 BB69     		ldr	r3, [r7, #24]
 10969 49fa 0D33     		adds	r3, r3, #13
 10970 49fc 7A68     		ldr	r2, [r7, #4]
 10971 49fe D2B2     		uxtb	r2, r2
 10972 4a00 1A70     		strb	r2, [r3]
4090:../tasks/SDMMC/ff.c **** 	ST_WORD(tbl+BPB_RsvdSecCnt, n_rsv);		/* Reserved sectors */
 10973              		.loc 1 4090 0
 10974 4a02 BB69     		ldr	r3, [r7, #24]
 10975 4a04 0E33     		adds	r3, r3, #14
 10976 4a06 7A6C     		ldr	r2, [r7, #68]
 10977 4a08 D2B2     		uxtb	r2, r2
 10978 4a0a 1A70     		strb	r2, [r3]
 10979 4a0c BB69     		ldr	r3, [r7, #24]
 10980 4a0e 0F33     		adds	r3, r3, #15
 10981 4a10 7A6C     		ldr	r2, [r7, #68]
 10982 4a12 92B2     		uxth	r2, r2
 10983 4a14 120A     		lsrs	r2, r2, #8
 10984 4a16 92B2     		uxth	r2, r2
 10985 4a18 D2B2     		uxtb	r2, r2
 10986 4a1a 1A70     		strb	r2, [r3]
4091:../tasks/SDMMC/ff.c **** 	tbl[BPB_NumFATs] = N_FATS;				/* Number of FATs */
 10987              		.loc 1 4091 0
 10988 4a1c BB69     		ldr	r3, [r7, #24]
 10989 4a1e 1033     		adds	r3, r3, #16
 10990 4a20 0122     		movs	r2, #1
 10991 4a22 1A70     		strb	r2, [r3]
4092:../tasks/SDMMC/ff.c **** 	i = (fmt == FS_FAT32) ? 0 : N_ROOTDIR;	/* Number of root directory entries */
 10992              		.loc 1 4092 0
 10993 4a24 97F85730 		ldrb	r3, [r7, #87]	@ zero_extendqisi2
 10994 4a28 032B     		cmp	r3, #3
 10995 4a2a 01D1     		bne	.L637
 10996              		.loc 1 4092 0 is_stmt 0 discriminator 1
 10997 4a2c 0023     		movs	r3, #0
 10998 4a2e 01E0     		b	.L638
 10999              	.L637:
 11000              		.loc 1 4092 0 discriminator 2
 11001 4a30 4FF40073 		mov	r3, #512
 11002              	.L638:
 11003              		.loc 1 4092 0 discriminator 3
 11004 4a34 FB64     		str	r3, [r7, #76]
4093:../tasks/SDMMC/ff.c **** 	ST_WORD(tbl+BPB_RootEntCnt, i);
 11005              		.loc 1 4093 0 is_stmt 1 discriminator 3
 11006 4a36 BB69     		ldr	r3, [r7, #24]
 11007 4a38 1133     		adds	r3, r3, #17
 11008 4a3a FA6C     		ldr	r2, [r7, #76]
 11009 4a3c D2B2     		uxtb	r2, r2
 11010 4a3e 1A70     		strb	r2, [r3]
 11011 4a40 BB69     		ldr	r3, [r7, #24]
 11012 4a42 1233     		adds	r3, r3, #18
 11013 4a44 FA6C     		ldr	r2, [r7, #76]
 11014 4a46 92B2     		uxth	r2, r2
 11015 4a48 120A     		lsrs	r2, r2, #8
 11016 4a4a 92B2     		uxth	r2, r2
 11017 4a4c D2B2     		uxtb	r2, r2
 11018 4a4e 1A70     		strb	r2, [r3]
4094:../tasks/SDMMC/ff.c **** 	if (n_vol < 0x10000) {					/* Number of total sectors */
 11019              		.loc 1 4094 0 discriminator 3
 11020 4a50 3B69     		ldr	r3, [r7, #16]
 11021 4a52 B3F5803F 		cmp	r3, #65536
 11022 4a56 0DD2     		bcs	.L639
4095:../tasks/SDMMC/ff.c **** 		ST_WORD(tbl+BPB_TotSec16, n_vol);
 11023              		.loc 1 4095 0
 11024 4a58 BB69     		ldr	r3, [r7, #24]
 11025 4a5a 1333     		adds	r3, r3, #19
 11026 4a5c 3A69     		ldr	r2, [r7, #16]
 11027 4a5e D2B2     		uxtb	r2, r2
 11028 4a60 1A70     		strb	r2, [r3]
 11029 4a62 BB69     		ldr	r3, [r7, #24]
 11030 4a64 1433     		adds	r3, r3, #20
 11031 4a66 3A69     		ldr	r2, [r7, #16]
 11032 4a68 92B2     		uxth	r2, r2
 11033 4a6a 120A     		lsrs	r2, r2, #8
 11034 4a6c 92B2     		uxth	r2, r2
 11035 4a6e D2B2     		uxtb	r2, r2
 11036 4a70 1A70     		strb	r2, [r3]
 11037 4a72 18E0     		b	.L640
 11038              	.L639:
4096:../tasks/SDMMC/ff.c **** 	} else {
4097:../tasks/SDMMC/ff.c **** 		ST_DWORD(tbl+BPB_TotSec32, n_vol);
 11039              		.loc 1 4097 0
 11040 4a74 BB69     		ldr	r3, [r7, #24]
 11041 4a76 2033     		adds	r3, r3, #32
 11042 4a78 3A69     		ldr	r2, [r7, #16]
 11043 4a7a D2B2     		uxtb	r2, r2
 11044 4a7c 1A70     		strb	r2, [r3]
 11045 4a7e BB69     		ldr	r3, [r7, #24]
 11046 4a80 2133     		adds	r3, r3, #33
 11047 4a82 3A69     		ldr	r2, [r7, #16]
 11048 4a84 92B2     		uxth	r2, r2
 11049 4a86 120A     		lsrs	r2, r2, #8
 11050 4a88 92B2     		uxth	r2, r2
 11051 4a8a D2B2     		uxtb	r2, r2
 11052 4a8c 1A70     		strb	r2, [r3]
 11053 4a8e BB69     		ldr	r3, [r7, #24]
 11054 4a90 2233     		adds	r3, r3, #34
 11055 4a92 3A69     		ldr	r2, [r7, #16]
 11056 4a94 120C     		lsrs	r2, r2, #16
 11057 4a96 D2B2     		uxtb	r2, r2
 11058 4a98 1A70     		strb	r2, [r3]
 11059 4a9a BB69     		ldr	r3, [r7, #24]
 11060 4a9c 2333     		adds	r3, r3, #35
 11061 4a9e 3A69     		ldr	r2, [r7, #16]
 11062 4aa0 120E     		lsrs	r2, r2, #24
 11063 4aa2 D2B2     		uxtb	r2, r2
 11064 4aa4 1A70     		strb	r2, [r3]
 11065              	.L640:
4098:../tasks/SDMMC/ff.c **** 	}
4099:../tasks/SDMMC/ff.c **** 	tbl[BPB_Media] = md;					/* Media descriptor */
 11066              		.loc 1 4099 0
 11067 4aa6 BB69     		ldr	r3, [r7, #24]
 11068 4aa8 1533     		adds	r3, r3, #21
 11069 4aaa 97F85620 		ldrb	r2, [r7, #86]
 11070 4aae 1A70     		strb	r2, [r3]
4100:../tasks/SDMMC/ff.c **** 	ST_WORD(tbl+BPB_SecPerTrk, 63);			/* Number of sectors per track */
 11071              		.loc 1 4100 0
 11072 4ab0 BB69     		ldr	r3, [r7, #24]
 11073 4ab2 1833     		adds	r3, r3, #24
 11074 4ab4 3F22     		movs	r2, #63
 11075 4ab6 1A70     		strb	r2, [r3]
 11076 4ab8 BB69     		ldr	r3, [r7, #24]
 11077 4aba 1933     		adds	r3, r3, #25
 11078 4abc 0022     		movs	r2, #0
 11079 4abe 1A70     		strb	r2, [r3]
4101:../tasks/SDMMC/ff.c **** 	ST_WORD(tbl+BPB_NumHeads, 255);			/* Number of heads */
 11080              		.loc 1 4101 0
 11081 4ac0 BB69     		ldr	r3, [r7, #24]
 11082 4ac2 1A33     		adds	r3, r3, #26
 11083 4ac4 FF22     		movs	r2, #255
 11084 4ac6 1A70     		strb	r2, [r3]
 11085 4ac8 BB69     		ldr	r3, [r7, #24]
 11086 4aca 1B33     		adds	r3, r3, #27
 11087 4acc 0022     		movs	r2, #0
 11088 4ace 1A70     		strb	r2, [r3]
4102:../tasks/SDMMC/ff.c **** 	ST_DWORD(tbl+BPB_HiddSec, b_vol);		/* Hidden sectors */
 11089              		.loc 1 4102 0
 11090 4ad0 BB69     		ldr	r3, [r7, #24]
 11091 4ad2 1C33     		adds	r3, r3, #28
 11092 4ad4 FA6A     		ldr	r2, [r7, #44]
 11093 4ad6 D2B2     		uxtb	r2, r2
 11094 4ad8 1A70     		strb	r2, [r3]
 11095 4ada BB69     		ldr	r3, [r7, #24]
 11096 4adc 1D33     		adds	r3, r3, #29
 11097 4ade FA6A     		ldr	r2, [r7, #44]
 11098 4ae0 92B2     		uxth	r2, r2
 11099 4ae2 120A     		lsrs	r2, r2, #8
 11100 4ae4 92B2     		uxth	r2, r2
 11101 4ae6 D2B2     		uxtb	r2, r2
 11102 4ae8 1A70     		strb	r2, [r3]
 11103 4aea BB69     		ldr	r3, [r7, #24]
 11104 4aec 1E33     		adds	r3, r3, #30
 11105 4aee FA6A     		ldr	r2, [r7, #44]
 11106 4af0 120C     		lsrs	r2, r2, #16
 11107 4af2 D2B2     		uxtb	r2, r2
 11108 4af4 1A70     		strb	r2, [r3]
 11109 4af6 BB69     		ldr	r3, [r7, #24]
 11110 4af8 1F33     		adds	r3, r3, #31
 11111 4afa FA6A     		ldr	r2, [r7, #44]
 11112 4afc 120E     		lsrs	r2, r2, #24
 11113 4afe D2B2     		uxtb	r2, r2
 11114 4b00 1A70     		strb	r2, [r3]
4103:../tasks/SDMMC/ff.c **** 	n = get_fattime();						/* Use current time as VSN */
 11115              		.loc 1 4103 0
 11116 4b02 FFF7FEFF 		bl	get_fattime
 11117 4b06 0346     		mov	r3, r0
 11118 4b08 7B61     		str	r3, [r7, #20]
4104:../tasks/SDMMC/ff.c **** 	if (fmt == FS_FAT32) {
 11119              		.loc 1 4104 0
 11120 4b0a 97F85730 		ldrb	r3, [r7, #87]	@ zero_extendqisi2
 11121 4b0e 032B     		cmp	r3, #3
 11122 4b10 64D1     		bne	.L641
4105:../tasks/SDMMC/ff.c **** 		ST_DWORD(tbl+BS_VolID32, n);		/* VSN */
 11123              		.loc 1 4105 0
 11124 4b12 BB69     		ldr	r3, [r7, #24]
 11125 4b14 4333     		adds	r3, r3, #67
 11126 4b16 7A69     		ldr	r2, [r7, #20]
 11127 4b18 D2B2     		uxtb	r2, r2
 11128 4b1a 1A70     		strb	r2, [r3]
 11129 4b1c BB69     		ldr	r3, [r7, #24]
 11130 4b1e 4433     		adds	r3, r3, #68
 11131 4b20 7A69     		ldr	r2, [r7, #20]
 11132 4b22 92B2     		uxth	r2, r2
 11133 4b24 120A     		lsrs	r2, r2, #8
 11134 4b26 92B2     		uxth	r2, r2
 11135 4b28 D2B2     		uxtb	r2, r2
 11136 4b2a 1A70     		strb	r2, [r3]
 11137 4b2c BB69     		ldr	r3, [r7, #24]
 11138 4b2e 4533     		adds	r3, r3, #69
 11139 4b30 7A69     		ldr	r2, [r7, #20]
 11140 4b32 120C     		lsrs	r2, r2, #16
 11141 4b34 D2B2     		uxtb	r2, r2
 11142 4b36 1A70     		strb	r2, [r3]
 11143 4b38 BB69     		ldr	r3, [r7, #24]
 11144 4b3a 4633     		adds	r3, r3, #70
 11145 4b3c 7A69     		ldr	r2, [r7, #20]
 11146 4b3e 120E     		lsrs	r2, r2, #24
 11147 4b40 D2B2     		uxtb	r2, r2
 11148 4b42 1A70     		strb	r2, [r3]
4106:../tasks/SDMMC/ff.c **** 		ST_DWORD(tbl+BPB_FATSz32, n_fat);	/* Number of sectors per FAT */
 11149              		.loc 1 4106 0
 11150 4b44 BB69     		ldr	r3, [r7, #24]
 11151 4b46 2433     		adds	r3, r3, #36
 11152 4b48 3A6C     		ldr	r2, [r7, #64]
 11153 4b4a D2B2     		uxtb	r2, r2
 11154 4b4c 1A70     		strb	r2, [r3]
 11155 4b4e BB69     		ldr	r3, [r7, #24]
 11156 4b50 2533     		adds	r3, r3, #37
 11157 4b52 3A6C     		ldr	r2, [r7, #64]
 11158 4b54 92B2     		uxth	r2, r2
 11159 4b56 120A     		lsrs	r2, r2, #8
 11160 4b58 92B2     		uxth	r2, r2
 11161 4b5a D2B2     		uxtb	r2, r2
 11162 4b5c 1A70     		strb	r2, [r3]
 11163 4b5e BB69     		ldr	r3, [r7, #24]
 11164 4b60 2633     		adds	r3, r3, #38
 11165 4b62 3A6C     		ldr	r2, [r7, #64]
 11166 4b64 120C     		lsrs	r2, r2, #16
 11167 4b66 D2B2     		uxtb	r2, r2
 11168 4b68 1A70     		strb	r2, [r3]
 11169 4b6a BB69     		ldr	r3, [r7, #24]
 11170 4b6c 2733     		adds	r3, r3, #39
 11171 4b6e 3A6C     		ldr	r2, [r7, #64]
 11172 4b70 120E     		lsrs	r2, r2, #24
 11173 4b72 D2B2     		uxtb	r2, r2
 11174 4b74 1A70     		strb	r2, [r3]
4107:../tasks/SDMMC/ff.c **** 		ST_DWORD(tbl+BPB_RootClus, 2);		/* Root directory start cluster (2) */
 11175              		.loc 1 4107 0
 11176 4b76 BB69     		ldr	r3, [r7, #24]
 11177 4b78 2C33     		adds	r3, r3, #44
 11178 4b7a 0222     		movs	r2, #2
 11179 4b7c 1A70     		strb	r2, [r3]
 11180 4b7e BB69     		ldr	r3, [r7, #24]
 11181 4b80 2D33     		adds	r3, r3, #45
 11182 4b82 0022     		movs	r2, #0
 11183 4b84 1A70     		strb	r2, [r3]
 11184 4b86 BB69     		ldr	r3, [r7, #24]
 11185 4b88 2E33     		adds	r3, r3, #46
 11186 4b8a 0022     		movs	r2, #0
 11187 4b8c 1A70     		strb	r2, [r3]
 11188 4b8e BB69     		ldr	r3, [r7, #24]
 11189 4b90 2F33     		adds	r3, r3, #47
 11190 4b92 0022     		movs	r2, #0
 11191 4b94 1A70     		strb	r2, [r3]
4108:../tasks/SDMMC/ff.c **** 		ST_WORD(tbl+BPB_FSInfo, 1);			/* FSINFO record offset (VBR+1) */
 11192              		.loc 1 4108 0
 11193 4b96 BB69     		ldr	r3, [r7, #24]
 11194 4b98 3033     		adds	r3, r3, #48
 11195 4b9a 0122     		movs	r2, #1
 11196 4b9c 1A70     		strb	r2, [r3]
 11197 4b9e BB69     		ldr	r3, [r7, #24]
 11198 4ba0 3133     		adds	r3, r3, #49
 11199 4ba2 0022     		movs	r2, #0
 11200 4ba4 1A70     		strb	r2, [r3]
4109:../tasks/SDMMC/ff.c **** 		ST_WORD(tbl+BPB_BkBootSec, 6);		/* Backup boot record offset (VBR+6) */
 11201              		.loc 1 4109 0
 11202 4ba6 BB69     		ldr	r3, [r7, #24]
 11203 4ba8 3233     		adds	r3, r3, #50
 11204 4baa 0622     		movs	r2, #6
 11205 4bac 1A70     		strb	r2, [r3]
 11206 4bae BB69     		ldr	r3, [r7, #24]
 11207 4bb0 3333     		adds	r3, r3, #51
 11208 4bb2 0022     		movs	r2, #0
 11209 4bb4 1A70     		strb	r2, [r3]
4110:../tasks/SDMMC/ff.c **** 		tbl[BS_DrvNum32] = 0x80;			/* Drive number */
 11210              		.loc 1 4110 0
 11211 4bb6 BB69     		ldr	r3, [r7, #24]
 11212 4bb8 4033     		adds	r3, r3, #64
 11213 4bba 8022     		movs	r2, #128
 11214 4bbc 1A70     		strb	r2, [r3]
4111:../tasks/SDMMC/ff.c **** 		tbl[BS_BootSig32] = 0x29;			/* Extended boot signature */
 11215              		.loc 1 4111 0
 11216 4bbe BB69     		ldr	r3, [r7, #24]
 11217 4bc0 4233     		adds	r3, r3, #66
 11218 4bc2 2922     		movs	r2, #41
 11219 4bc4 1A70     		strb	r2, [r3]
4112:../tasks/SDMMC/ff.c **** 		mem_cpy(tbl+BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 11220              		.loc 1 4112 0
 11221 4bc6 BB69     		ldr	r3, [r7, #24]
 11222 4bc8 4733     		adds	r3, r3, #71
 11223 4bca 1846     		mov	r0, r3
 11224 4bcc 40F20001 		movw	r1, #:lower16:.LC4
 11225 4bd0 C0F20001 		movt	r1, #:upper16:.LC4
 11226 4bd4 1322     		movs	r2, #19
 11227 4bd6 FBF713FA 		bl	mem_cpy
 11228 4bda 37E0     		b	.L642
 11229              	.L641:
4113:../tasks/SDMMC/ff.c **** 	} else {
4114:../tasks/SDMMC/ff.c **** 		ST_DWORD(tbl+BS_VolID, n);			/* VSN */
 11230              		.loc 1 4114 0
 11231 4bdc BB69     		ldr	r3, [r7, #24]
 11232 4bde 2733     		adds	r3, r3, #39
 11233 4be0 7A69     		ldr	r2, [r7, #20]
 11234 4be2 D2B2     		uxtb	r2, r2
 11235 4be4 1A70     		strb	r2, [r3]
 11236 4be6 BB69     		ldr	r3, [r7, #24]
 11237 4be8 2833     		adds	r3, r3, #40
 11238 4bea 7A69     		ldr	r2, [r7, #20]
 11239 4bec 92B2     		uxth	r2, r2
 11240 4bee 120A     		lsrs	r2, r2, #8
 11241 4bf0 92B2     		uxth	r2, r2
 11242 4bf2 D2B2     		uxtb	r2, r2
 11243 4bf4 1A70     		strb	r2, [r3]
 11244 4bf6 BB69     		ldr	r3, [r7, #24]
 11245 4bf8 2933     		adds	r3, r3, #41
 11246 4bfa 7A69     		ldr	r2, [r7, #20]
 11247 4bfc 120C     		lsrs	r2, r2, #16
 11248 4bfe D2B2     		uxtb	r2, r2
 11249 4c00 1A70     		strb	r2, [r3]
 11250 4c02 BB69     		ldr	r3, [r7, #24]
 11251 4c04 2A33     		adds	r3, r3, #42
 11252 4c06 7A69     		ldr	r2, [r7, #20]
 11253 4c08 120E     		lsrs	r2, r2, #24
 11254 4c0a D2B2     		uxtb	r2, r2
 11255 4c0c 1A70     		strb	r2, [r3]
4115:../tasks/SDMMC/ff.c **** 		ST_WORD(tbl+BPB_FATSz16, n_fat);	/* Number of sectors per FAT */
 11256              		.loc 1 4115 0
 11257 4c0e BB69     		ldr	r3, [r7, #24]
 11258 4c10 1633     		adds	r3, r3, #22
 11259 4c12 3A6C     		ldr	r2, [r7, #64]
 11260 4c14 D2B2     		uxtb	r2, r2
 11261 4c16 1A70     		strb	r2, [r3]
 11262 4c18 BB69     		ldr	r3, [r7, #24]
 11263 4c1a 1733     		adds	r3, r3, #23
 11264 4c1c 3A6C     		ldr	r2, [r7, #64]
 11265 4c1e 92B2     		uxth	r2, r2
 11266 4c20 120A     		lsrs	r2, r2, #8
 11267 4c22 92B2     		uxth	r2, r2
 11268 4c24 D2B2     		uxtb	r2, r2
 11269 4c26 1A70     		strb	r2, [r3]
4116:../tasks/SDMMC/ff.c **** 		tbl[BS_DrvNum] = 0x80;				/* Drive number */
 11270              		.loc 1 4116 0
 11271 4c28 BB69     		ldr	r3, [r7, #24]
 11272 4c2a 2433     		adds	r3, r3, #36
 11273 4c2c 8022     		movs	r2, #128
 11274 4c2e 1A70     		strb	r2, [r3]
4117:../tasks/SDMMC/ff.c **** 		tbl[BS_BootSig] = 0x29;				/* Extended boot signature */
 11275              		.loc 1 4117 0
 11276 4c30 BB69     		ldr	r3, [r7, #24]
 11277 4c32 2633     		adds	r3, r3, #38
 11278 4c34 2922     		movs	r2, #41
 11279 4c36 1A70     		strb	r2, [r3]
4118:../tasks/SDMMC/ff.c **** 		mem_cpy(tbl+BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 11280              		.loc 1 4118 0
 11281 4c38 BB69     		ldr	r3, [r7, #24]
 11282 4c3a 2B33     		adds	r3, r3, #43
 11283 4c3c 1846     		mov	r0, r3
 11284 4c3e 40F20001 		movw	r1, #:lower16:.LC5
 11285 4c42 C0F20001 		movt	r1, #:upper16:.LC5
 11286 4c46 1322     		movs	r2, #19
 11287 4c48 FBF7DAF9 		bl	mem_cpy
 11288              	.L642:
4119:../tasks/SDMMC/ff.c **** 	}
4120:../tasks/SDMMC/ff.c **** 	ST_WORD(tbl+BS_55AA, 0xAA55);			/* Signature (Offset is fixed here regardless of sector size) */
 11289              		.loc 1 4120 0
 11290 4c4c BB69     		ldr	r3, [r7, #24]
 11291 4c4e 03F5FF73 		add	r3, r3, #510
 11292 4c52 5522     		movs	r2, #85
 11293 4c54 1A70     		strb	r2, [r3]
 11294 4c56 BB69     		ldr	r3, [r7, #24]
 11295 4c58 03F2FF13 		addw	r3, r3, #511
 11296 4c5c AA22     		movs	r2, #170
 11297 4c5e 1A70     		strb	r2, [r3]
4121:../tasks/SDMMC/ff.c **** 	if (disk_write(pdrv, tbl, b_vol, 1))	/* Write it to the VBR sector */
 11298              		.loc 1 4121 0
 11299 4c60 97F83330 		ldrb	r3, [r7, #51]	@ zero_extendqisi2
 11300 4c64 1846     		mov	r0, r3
 11301 4c66 B969     		ldr	r1, [r7, #24]
 11302 4c68 FA6A     		ldr	r2, [r7, #44]
 11303 4c6a 0123     		movs	r3, #1
 11304 4c6c FFF7FEFF 		bl	disk_write
 11305 4c70 0346     		mov	r3, r0
 11306 4c72 002B     		cmp	r3, #0
 11307 4c74 01D0     		beq	.L643
4122:../tasks/SDMMC/ff.c **** 		return FR_DISK_ERR;
 11308              		.loc 1 4122 0
 11309 4c76 0123     		movs	r3, #1
 11310 4c78 60E1     		b	.L660
 11311              	.L643:
4123:../tasks/SDMMC/ff.c **** 	if (fmt == FS_FAT32)					/* Write backup VBR if needed (VBR+6) */
 11312              		.loc 1 4123 0
 11313 4c7a 97F85730 		ldrb	r3, [r7, #87]	@ zero_extendqisi2
 11314 4c7e 032B     		cmp	r3, #3
 11315 4c80 09D1     		bne	.L644
4124:../tasks/SDMMC/ff.c **** 		disk_write(pdrv, tbl, b_vol + 6, 1);
 11316              		.loc 1 4124 0
 11317 4c82 FB6A     		ldr	r3, [r7, #44]
 11318 4c84 0633     		adds	r3, r3, #6
 11319 4c86 97F83320 		ldrb	r2, [r7, #51]	@ zero_extendqisi2
 11320 4c8a 1046     		mov	r0, r2
 11321 4c8c B969     		ldr	r1, [r7, #24]
 11322 4c8e 1A46     		mov	r2, r3
 11323 4c90 0123     		movs	r3, #1
 11324 4c92 FFF7FEFF 		bl	disk_write
 11325              	.L644:
4125:../tasks/SDMMC/ff.c **** 
4126:../tasks/SDMMC/ff.c **** 	/* Initialize FAT area */
4127:../tasks/SDMMC/ff.c **** 	wsect = b_fat;
 11326              		.loc 1 4127 0
 11327 4c96 BB6C     		ldr	r3, [r7, #72]
 11328 4c98 3B65     		str	r3, [r7, #80]
4128:../tasks/SDMMC/ff.c **** 	for (i = 0; i < N_FATS; i++) {		/* Initialize each FAT copy */
 11329              		.loc 1 4128 0
 11330 4c9a 0023     		movs	r3, #0
 11331 4c9c FB64     		str	r3, [r7, #76]
 11332 4c9e A2E0     		b	.L645
 11333              	.L654:
4129:../tasks/SDMMC/ff.c **** 		mem_set(tbl, 0, SS(fs));			/* 1st sector of the FAT  */
 11334              		.loc 1 4129 0
 11335 4ca0 B869     		ldr	r0, [r7, #24]
 11336 4ca2 0021     		movs	r1, #0
 11337 4ca4 4FF40072 		mov	r2, #512
 11338 4ca8 FBF7C8F9 		bl	mem_set
4130:../tasks/SDMMC/ff.c **** 		n = md;								/* Media descriptor byte */
 11339              		.loc 1 4130 0
 11340 4cac 97F85630 		ldrb	r3, [r7, #86]	@ zero_extendqisi2
 11341 4cb0 7B61     		str	r3, [r7, #20]
4131:../tasks/SDMMC/ff.c **** 		if (fmt != FS_FAT32) {
 11342              		.loc 1 4131 0
 11343 4cb2 97F85730 		ldrb	r3, [r7, #87]	@ zero_extendqisi2
 11344 4cb6 032B     		cmp	r3, #3
 11345 4cb8 26D0     		beq	.L646
4132:../tasks/SDMMC/ff.c **** 			n |= (fmt == FS_FAT12) ? 0x00FFFF00 : 0xFFFFFF00;
 11346              		.loc 1 4132 0
 11347 4cba 97F85730 		ldrb	r3, [r7, #87]	@ zero_extendqisi2
 11348 4cbe 012B     		cmp	r3, #1
 11349 4cc0 04D1     		bne	.L647
 11350              		.loc 1 4132 0 is_stmt 0 discriminator 1
 11351 4cc2 4FF47F43 		mov	r3, #65280
 11352 4cc6 C0F2FF03 		movt	r3, 255
 11353 4cca 01E0     		b	.L648
 11354              	.L647:
 11355              		.loc 1 4132 0 discriminator 2
 11356 4ccc 6FF0FF03 		mvn	r3, #255
 11357              	.L648:
 11358              		.loc 1 4132 0 discriminator 1
 11359 4cd0 7A69     		ldr	r2, [r7, #20]
 11360 4cd2 1343     		orrs	r3, r3, r2
 11361 4cd4 7B61     		str	r3, [r7, #20]
4133:../tasks/SDMMC/ff.c **** 			ST_DWORD(tbl+0, n);				/* Reserve cluster #0-1 (FAT12/16) */
 11362              		.loc 1 4133 0 is_stmt 1 discriminator 1
 11363 4cd6 7B69     		ldr	r3, [r7, #20]
 11364 4cd8 DAB2     		uxtb	r2, r3
 11365 4cda BB69     		ldr	r3, [r7, #24]
 11366 4cdc 1A70     		strb	r2, [r3]
 11367 4cde BB69     		ldr	r3, [r7, #24]
 11368 4ce0 0133     		adds	r3, r3, #1
 11369 4ce2 7A69     		ldr	r2, [r7, #20]
 11370 4ce4 92B2     		uxth	r2, r2
 11371 4ce6 120A     		lsrs	r2, r2, #8
 11372 4ce8 92B2     		uxth	r2, r2
 11373 4cea D2B2     		uxtb	r2, r2
 11374 4cec 1A70     		strb	r2, [r3]
 11375 4cee BB69     		ldr	r3, [r7, #24]
 11376 4cf0 0233     		adds	r3, r3, #2
 11377 4cf2 7A69     		ldr	r2, [r7, #20]
 11378 4cf4 120C     		lsrs	r2, r2, #16
 11379 4cf6 D2B2     		uxtb	r2, r2
 11380 4cf8 1A70     		strb	r2, [r3]
 11381 4cfa BB69     		ldr	r3, [r7, #24]
 11382 4cfc 0333     		adds	r3, r3, #3
 11383 4cfe 7A69     		ldr	r2, [r7, #20]
 11384 4d00 120E     		lsrs	r2, r2, #24
 11385 4d02 D2B2     		uxtb	r2, r2
 11386 4d04 1A70     		strb	r2, [r3]
 11387 4d06 3BE0     		b	.L649
 11388              	.L646:
4134:../tasks/SDMMC/ff.c **** 		} else {
4135:../tasks/SDMMC/ff.c **** 			n |= 0xFFFFFF00;
 11389              		.loc 1 4135 0
 11390 4d08 7B69     		ldr	r3, [r7, #20]
 11391 4d0a 63F0FF03 		orn	r3, r3, #255
 11392 4d0e 7B61     		str	r3, [r7, #20]
4136:../tasks/SDMMC/ff.c **** 			ST_DWORD(tbl+0, n);				/* Reserve cluster #0-1 (FAT32) */
 11393              		.loc 1 4136 0
 11394 4d10 7B69     		ldr	r3, [r7, #20]
 11395 4d12 DAB2     		uxtb	r2, r3
 11396 4d14 BB69     		ldr	r3, [r7, #24]
 11397 4d16 1A70     		strb	r2, [r3]
 11398 4d18 BB69     		ldr	r3, [r7, #24]
 11399 4d1a 0133     		adds	r3, r3, #1
 11400 4d1c 7A69     		ldr	r2, [r7, #20]
 11401 4d1e 92B2     		uxth	r2, r2
 11402 4d20 120A     		lsrs	r2, r2, #8
 11403 4d22 92B2     		uxth	r2, r2
 11404 4d24 D2B2     		uxtb	r2, r2
 11405 4d26 1A70     		strb	r2, [r3]
 11406 4d28 BB69     		ldr	r3, [r7, #24]
 11407 4d2a 0233     		adds	r3, r3, #2
 11408 4d2c 7A69     		ldr	r2, [r7, #20]
 11409 4d2e 120C     		lsrs	r2, r2, #16
 11410 4d30 D2B2     		uxtb	r2, r2
 11411 4d32 1A70     		strb	r2, [r3]
 11412 4d34 BB69     		ldr	r3, [r7, #24]
 11413 4d36 0333     		adds	r3, r3, #3
 11414 4d38 7A69     		ldr	r2, [r7, #20]
 11415 4d3a 120E     		lsrs	r2, r2, #24
 11416 4d3c D2B2     		uxtb	r2, r2
 11417 4d3e 1A70     		strb	r2, [r3]
4137:../tasks/SDMMC/ff.c **** 			ST_DWORD(tbl+4, 0xFFFFFFFF);
 11418              		.loc 1 4137 0
 11419 4d40 BB69     		ldr	r3, [r7, #24]
 11420 4d42 0433     		adds	r3, r3, #4
 11421 4d44 FF22     		movs	r2, #255
 11422 4d46 1A70     		strb	r2, [r3]
 11423 4d48 BB69     		ldr	r3, [r7, #24]
 11424 4d4a 0533     		adds	r3, r3, #5
 11425 4d4c FF22     		movs	r2, #255
 11426 4d4e 1A70     		strb	r2, [r3]
 11427 4d50 BB69     		ldr	r3, [r7, #24]
 11428 4d52 0633     		adds	r3, r3, #6
 11429 4d54 FF22     		movs	r2, #255
 11430 4d56 1A70     		strb	r2, [r3]
 11431 4d58 BB69     		ldr	r3, [r7, #24]
 11432 4d5a 0733     		adds	r3, r3, #7
 11433 4d5c FF22     		movs	r2, #255
 11434 4d5e 1A70     		strb	r2, [r3]
4138:../tasks/SDMMC/ff.c **** 			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root directory */
 11435              		.loc 1 4138 0
 11436 4d60 BB69     		ldr	r3, [r7, #24]
 11437 4d62 0833     		adds	r3, r3, #8
 11438 4d64 FF22     		movs	r2, #255
 11439 4d66 1A70     		strb	r2, [r3]
 11440 4d68 BB69     		ldr	r3, [r7, #24]
 11441 4d6a 0933     		adds	r3, r3, #9
 11442 4d6c FF22     		movs	r2, #255
 11443 4d6e 1A70     		strb	r2, [r3]
 11444 4d70 BB69     		ldr	r3, [r7, #24]
 11445 4d72 0A33     		adds	r3, r3, #10
 11446 4d74 FF22     		movs	r2, #255
 11447 4d76 1A70     		strb	r2, [r3]
 11448 4d78 BB69     		ldr	r3, [r7, #24]
 11449 4d7a 0B33     		adds	r3, r3, #11
 11450 4d7c 0F22     		movs	r2, #15
 11451 4d7e 1A70     		strb	r2, [r3]
 11452              	.L649:
4139:../tasks/SDMMC/ff.c **** 		}
4140:../tasks/SDMMC/ff.c **** 		if (disk_write(pdrv, tbl, wsect++, 1))
 11453              		.loc 1 4140 0
 11454 4d80 3B6D     		ldr	r3, [r7, #80]
 11455 4d82 5A1C     		adds	r2, r3, #1
 11456 4d84 3A65     		str	r2, [r7, #80]
 11457 4d86 97F83320 		ldrb	r2, [r7, #51]	@ zero_extendqisi2
 11458 4d8a 1046     		mov	r0, r2
 11459 4d8c B969     		ldr	r1, [r7, #24]
 11460 4d8e 1A46     		mov	r2, r3
 11461 4d90 0123     		movs	r3, #1
 11462 4d92 FFF7FEFF 		bl	disk_write
 11463 4d96 0346     		mov	r3, r0
 11464 4d98 002B     		cmp	r3, #0
 11465 4d9a 01D0     		beq	.L650
4141:../tasks/SDMMC/ff.c **** 			return FR_DISK_ERR;
 11466              		.loc 1 4141 0
 11467 4d9c 0123     		movs	r3, #1
 11468 4d9e CDE0     		b	.L660
 11469              	.L650:
4142:../tasks/SDMMC/ff.c **** 		mem_set(tbl, 0, SS(fs));			/* Fill following FAT entries with zero */
 11470              		.loc 1 4142 0
 11471 4da0 B869     		ldr	r0, [r7, #24]
 11472 4da2 0021     		movs	r1, #0
 11473 4da4 4FF40072 		mov	r2, #512
 11474 4da8 FBF748F9 		bl	mem_set
4143:../tasks/SDMMC/ff.c **** 		for (n = 1; n < n_fat; n++) {		/* This loop may take a time on FAT32 volume due to many single se
 11475              		.loc 1 4143 0
 11476 4dac 0123     		movs	r3, #1
 11477 4dae 7B61     		str	r3, [r7, #20]
 11478 4db0 12E0     		b	.L651
 11479              	.L653:
4144:../tasks/SDMMC/ff.c **** 			if (disk_write(pdrv, tbl, wsect++, 1))
 11480              		.loc 1 4144 0
 11481 4db2 3B6D     		ldr	r3, [r7, #80]
 11482 4db4 5A1C     		adds	r2, r3, #1
 11483 4db6 3A65     		str	r2, [r7, #80]
 11484 4db8 97F83320 		ldrb	r2, [r7, #51]	@ zero_extendqisi2
 11485 4dbc 1046     		mov	r0, r2
 11486 4dbe B969     		ldr	r1, [r7, #24]
 11487 4dc0 1A46     		mov	r2, r3
 11488 4dc2 0123     		movs	r3, #1
 11489 4dc4 FFF7FEFF 		bl	disk_write
 11490 4dc8 0346     		mov	r3, r0
 11491 4dca 002B     		cmp	r3, #0
 11492 4dcc 01D0     		beq	.L652
4145:../tasks/SDMMC/ff.c **** 				return FR_DISK_ERR;
 11493              		.loc 1 4145 0
 11494 4dce 0123     		movs	r3, #1
 11495 4dd0 B4E0     		b	.L660
 11496              	.L652:
4143:../tasks/SDMMC/ff.c **** 		for (n = 1; n < n_fat; n++) {		/* This loop may take a time on FAT32 volume due to many single se
 11497              		.loc 1 4143 0
 11498 4dd2 7B69     		ldr	r3, [r7, #20]
 11499 4dd4 0133     		adds	r3, r3, #1
 11500 4dd6 7B61     		str	r3, [r7, #20]
 11501              	.L651:
4143:../tasks/SDMMC/ff.c **** 		for (n = 1; n < n_fat; n++) {		/* This loop may take a time on FAT32 volume due to many single se
 11502              		.loc 1 4143 0 is_stmt 0 discriminator 1
 11503 4dd8 7A69     		ldr	r2, [r7, #20]
 11504 4dda 3B6C     		ldr	r3, [r7, #64]
 11505 4ddc 9A42     		cmp	r2, r3
 11506 4dde E8D3     		bcc	.L653
4128:../tasks/SDMMC/ff.c **** 		mem_set(tbl, 0, SS(fs));			/* 1st sector of the FAT  */
 11507              		.loc 1 4128 0 is_stmt 1
 11508 4de0 FB6C     		ldr	r3, [r7, #76]
 11509 4de2 0133     		adds	r3, r3, #1
 11510 4de4 FB64     		str	r3, [r7, #76]
 11511              	.L645:
4128:../tasks/SDMMC/ff.c **** 		mem_set(tbl, 0, SS(fs));			/* 1st sector of the FAT  */
 11512              		.loc 1 4128 0 is_stmt 0 discriminator 1
 11513 4de6 FB6C     		ldr	r3, [r7, #76]
 11514 4de8 002B     		cmp	r3, #0
 11515 4dea 3FF459AF 		beq	.L654
4146:../tasks/SDMMC/ff.c **** 		}
4147:../tasks/SDMMC/ff.c **** 	}
4148:../tasks/SDMMC/ff.c **** 
4149:../tasks/SDMMC/ff.c **** 	/* Initialize root directory */
4150:../tasks/SDMMC/ff.c **** 	i = (fmt == FS_FAT32) ? au : n_dir;
 11516              		.loc 1 4150 0 is_stmt 1
 11517 4dee 97F85730 		ldrb	r3, [r7, #87]	@ zero_extendqisi2
 11518 4df2 032B     		cmp	r3, #3
 11519 4df4 01D1     		bne	.L655
 11520              		.loc 1 4150 0 is_stmt 0 discriminator 1
 11521 4df6 7B68     		ldr	r3, [r7, #4]
 11522 4df8 00E0     		b	.L656
 11523              	.L655:
 11524              		.loc 1 4150 0 discriminator 2
 11525 4dfa FB6B     		ldr	r3, [r7, #60]
 11526              	.L656:
 11527              		.loc 1 4150 0 discriminator 3
 11528 4dfc FB64     		str	r3, [r7, #76]
 11529              	.L658:
4151:../tasks/SDMMC/ff.c **** 	do {
4152:../tasks/SDMMC/ff.c **** 		if (disk_write(pdrv, tbl, wsect++, 1))
 11530              		.loc 1 4152 0 is_stmt 1
 11531 4dfe 3B6D     		ldr	r3, [r7, #80]
 11532 4e00 5A1C     		adds	r2, r3, #1
 11533 4e02 3A65     		str	r2, [r7, #80]
 11534 4e04 97F83320 		ldrb	r2, [r7, #51]	@ zero_extendqisi2
 11535 4e08 1046     		mov	r0, r2
 11536 4e0a B969     		ldr	r1, [r7, #24]
 11537 4e0c 1A46     		mov	r2, r3
 11538 4e0e 0123     		movs	r3, #1
 11539 4e10 FFF7FEFF 		bl	disk_write
 11540 4e14 0346     		mov	r3, r0
 11541 4e16 002B     		cmp	r3, #0
 11542 4e18 01D0     		beq	.L657
4153:../tasks/SDMMC/ff.c **** 			return FR_DISK_ERR;
 11543              		.loc 1 4153 0
 11544 4e1a 0123     		movs	r3, #1
 11545 4e1c 8EE0     		b	.L660
 11546              	.L657:
4154:../tasks/SDMMC/ff.c **** 	} while (--i);
 11547              		.loc 1 4154 0
 11548 4e1e FB6C     		ldr	r3, [r7, #76]
 11549 4e20 013B     		subs	r3, r3, #1
 11550 4e22 FB64     		str	r3, [r7, #76]
 11551 4e24 FB6C     		ldr	r3, [r7, #76]
 11552 4e26 002B     		cmp	r3, #0
 11553 4e28 E9D1     		bne	.L658
4155:../tasks/SDMMC/ff.c **** 
4156:../tasks/SDMMC/ff.c **** #if _USE_ERASE	/* Erase data area if needed */
4157:../tasks/SDMMC/ff.c **** 	{
4158:../tasks/SDMMC/ff.c **** 		DWORD eb[2];
4159:../tasks/SDMMC/ff.c **** 
4160:../tasks/SDMMC/ff.c **** 		eb[0] = wsect; eb[1] = wsect + (n_clst - ((fmt == FS_FAT32) ? 1 : 0)) * au - 1;
4161:../tasks/SDMMC/ff.c **** 		disk_ioctl(pdrv, CTRL_ERASE_SECTOR, eb);
4162:../tasks/SDMMC/ff.c **** 	}
4163:../tasks/SDMMC/ff.c **** #endif
4164:../tasks/SDMMC/ff.c **** 
4165:../tasks/SDMMC/ff.c **** 	/* Create FSINFO if needed */
4166:../tasks/SDMMC/ff.c **** 	if (fmt == FS_FAT32) {
 11554              		.loc 1 4166 0
 11555 4e2a 97F85730 		ldrb	r3, [r7, #87]	@ zero_extendqisi2
 11556 4e2e 032B     		cmp	r3, #3
 11557 4e30 77D1     		bne	.L659
4167:../tasks/SDMMC/ff.c **** 		ST_DWORD(tbl+FSI_LeadSig, 0x41615252);
 11558              		.loc 1 4167 0
 11559 4e32 BB69     		ldr	r3, [r7, #24]
 11560 4e34 5222     		movs	r2, #82
 11561 4e36 1A70     		strb	r2, [r3]
 11562 4e38 BB69     		ldr	r3, [r7, #24]
 11563 4e3a 0133     		adds	r3, r3, #1
 11564 4e3c 5222     		movs	r2, #82
 11565 4e3e 1A70     		strb	r2, [r3]
 11566 4e40 BB69     		ldr	r3, [r7, #24]
 11567 4e42 0233     		adds	r3, r3, #2
 11568 4e44 6122     		movs	r2, #97
 11569 4e46 1A70     		strb	r2, [r3]
 11570 4e48 BB69     		ldr	r3, [r7, #24]
 11571 4e4a 0333     		adds	r3, r3, #3
 11572 4e4c 4122     		movs	r2, #65
 11573 4e4e 1A70     		strb	r2, [r3]
4168:../tasks/SDMMC/ff.c **** 		ST_DWORD(tbl+FSI_StrucSig, 0x61417272);
 11574              		.loc 1 4168 0
 11575 4e50 BB69     		ldr	r3, [r7, #24]
 11576 4e52 03F5F273 		add	r3, r3, #484
 11577 4e56 7222     		movs	r2, #114
 11578 4e58 1A70     		strb	r2, [r3]
 11579 4e5a BB69     		ldr	r3, [r7, #24]
 11580 4e5c 03F2E513 		addw	r3, r3, #485
 11581 4e60 7222     		movs	r2, #114
 11582 4e62 1A70     		strb	r2, [r3]
 11583 4e64 BB69     		ldr	r3, [r7, #24]
 11584 4e66 03F5F373 		add	r3, r3, #486
 11585 4e6a 4122     		movs	r2, #65
 11586 4e6c 1A70     		strb	r2, [r3]
 11587 4e6e BB69     		ldr	r3, [r7, #24]
 11588 4e70 03F2E713 		addw	r3, r3, #487
 11589 4e74 6122     		movs	r2, #97
 11590 4e76 1A70     		strb	r2, [r3]
4169:../tasks/SDMMC/ff.c **** 		ST_DWORD(tbl+FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 11591              		.loc 1 4169 0
 11592 4e78 BB69     		ldr	r3, [r7, #24]
 11593 4e7a 03F5F473 		add	r3, r3, #488
 11594 4e7e 7A6A     		ldr	r2, [r7, #36]
 11595 4e80 D2B2     		uxtb	r2, r2
 11596 4e82 013A     		subs	r2, r2, #1
 11597 4e84 D2B2     		uxtb	r2, r2
 11598 4e86 1A70     		strb	r2, [r3]
 11599 4e88 BB69     		ldr	r3, [r7, #24]
 11600 4e8a 03F2E913 		addw	r3, r3, #489
 11601 4e8e 7A6A     		ldr	r2, [r7, #36]
 11602 4e90 92B2     		uxth	r2, r2
 11603 4e92 013A     		subs	r2, r2, #1
 11604 4e94 92B2     		uxth	r2, r2
 11605 4e96 120A     		lsrs	r2, r2, #8
 11606 4e98 92B2     		uxth	r2, r2
 11607 4e9a D2B2     		uxtb	r2, r2
 11608 4e9c 1A70     		strb	r2, [r3]
 11609 4e9e BB69     		ldr	r3, [r7, #24]
 11610 4ea0 03F5F573 		add	r3, r3, #490
 11611 4ea4 7A6A     		ldr	r2, [r7, #36]
 11612 4ea6 013A     		subs	r2, r2, #1
 11613 4ea8 120C     		lsrs	r2, r2, #16
 11614 4eaa D2B2     		uxtb	r2, r2
 11615 4eac 1A70     		strb	r2, [r3]
 11616 4eae BB69     		ldr	r3, [r7, #24]
 11617 4eb0 03F2EB13 		addw	r3, r3, #491
 11618 4eb4 7A6A     		ldr	r2, [r7, #36]
 11619 4eb6 013A     		subs	r2, r2, #1
 11620 4eb8 120E     		lsrs	r2, r2, #24
 11621 4eba D2B2     		uxtb	r2, r2
 11622 4ebc 1A70     		strb	r2, [r3]
4170:../tasks/SDMMC/ff.c **** 		ST_DWORD(tbl+FSI_Nxt_Free, 2);				/* Last allocated cluster# */
 11623              		.loc 1 4170 0
 11624 4ebe BB69     		ldr	r3, [r7, #24]
 11625 4ec0 03F5F673 		add	r3, r3, #492
 11626 4ec4 0222     		movs	r2, #2
 11627 4ec6 1A70     		strb	r2, [r3]
 11628 4ec8 BB69     		ldr	r3, [r7, #24]
 11629 4eca 03F2ED13 		addw	r3, r3, #493
 11630 4ece 0022     		movs	r2, #0
 11631 4ed0 1A70     		strb	r2, [r3]
 11632 4ed2 BB69     		ldr	r3, [r7, #24]
 11633 4ed4 03F5F773 		add	r3, r3, #494
 11634 4ed8 0022     		movs	r2, #0
 11635 4eda 1A70     		strb	r2, [r3]
 11636 4edc BB69     		ldr	r3, [r7, #24]
 11637 4ede 03F2EF13 		addw	r3, r3, #495
 11638 4ee2 0022     		movs	r2, #0
 11639 4ee4 1A70     		strb	r2, [r3]
4171:../tasks/SDMMC/ff.c **** 		ST_WORD(tbl+BS_55AA, 0xAA55);
 11640              		.loc 1 4171 0
 11641 4ee6 BB69     		ldr	r3, [r7, #24]
 11642 4ee8 03F5FF73 		add	r3, r3, #510
 11643 4eec 5522     		movs	r2, #85
 11644 4eee 1A70     		strb	r2, [r3]
 11645 4ef0 BB69     		ldr	r3, [r7, #24]
 11646 4ef2 03F2FF13 		addw	r3, r3, #511
 11647 4ef6 AA22     		movs	r2, #170
 11648 4ef8 1A70     		strb	r2, [r3]
4172:../tasks/SDMMC/ff.c **** 		disk_write(pdrv, tbl, b_vol + 1, 1);	/* Write original (VBR+1) */
 11649              		.loc 1 4172 0
 11650 4efa FB6A     		ldr	r3, [r7, #44]
 11651 4efc 0133     		adds	r3, r3, #1
 11652 4efe 97F83320 		ldrb	r2, [r7, #51]	@ zero_extendqisi2
 11653 4f02 1046     		mov	r0, r2
 11654 4f04 B969     		ldr	r1, [r7, #24]
 11655 4f06 1A46     		mov	r2, r3
 11656 4f08 0123     		movs	r3, #1
 11657 4f0a FFF7FEFF 		bl	disk_write
4173:../tasks/SDMMC/ff.c **** 		disk_write(pdrv, tbl, b_vol + 7, 1);	/* Write backup (VBR+7) */
 11658              		.loc 1 4173 0
 11659 4f0e FB6A     		ldr	r3, [r7, #44]
 11660 4f10 0733     		adds	r3, r3, #7
 11661 4f12 97F83320 		ldrb	r2, [r7, #51]	@ zero_extendqisi2
 11662 4f16 1046     		mov	r0, r2
 11663 4f18 B969     		ldr	r1, [r7, #24]
 11664 4f1a 1A46     		mov	r2, r3
 11665 4f1c 0123     		movs	r3, #1
 11666 4f1e FFF7FEFF 		bl	disk_write
 11667              	.L659:
4174:../tasks/SDMMC/ff.c **** 	}
4175:../tasks/SDMMC/ff.c **** 
4176:../tasks/SDMMC/ff.c **** 	return (disk_ioctl(pdrv, CTRL_SYNC, 0) == RES_OK) ? FR_OK : FR_DISK_ERR;
 11668              		.loc 1 4176 0
 11669 4f22 97F83330 		ldrb	r3, [r7, #51]	@ zero_extendqisi2
 11670 4f26 1846     		mov	r0, r3
 11671 4f28 0021     		movs	r1, #0
 11672 4f2a 0022     		movs	r2, #0
 11673 4f2c FFF7FEFF 		bl	disk_ioctl
 11674 4f30 0346     		mov	r3, r0
 11675 4f32 002B     		cmp	r3, #0
 11676 4f34 0CBF     		ite	eq
 11677 4f36 0023     		moveq	r3, #0
 11678 4f38 0123     		movne	r3, #1
 11679 4f3a DBB2     		uxtb	r3, r3
 11680              	.L660:
4177:../tasks/SDMMC/ff.c **** }
 11681              		.loc 1 4177 0
 11682 4f3c 1846     		mov	r0, r3
 11683 4f3e 5837     		adds	r7, r7, #88
 11684 4f40 BD46     		mov	sp, r7
 11685              		@ sp needed
 11686 4f42 80BD     		pop	{r7, pc}
 11687              		.cfi_endproc
 11688              	.LFE111:
 11690              		.align	2
 11691              		.global	f_gets
 11692              		.thumb
 11693              		.thumb_func
 11695              	f_gets:
 11696              	.LFB112:
4178:../tasks/SDMMC/ff.c **** 
4179:../tasks/SDMMC/ff.c **** 
4180:../tasks/SDMMC/ff.c **** 
4181:../tasks/SDMMC/ff.c **** #if _MULTI_PARTITION
4182:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
4183:../tasks/SDMMC/ff.c **** /* Divide Physical Drive                                                 */
4184:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
4185:../tasks/SDMMC/ff.c **** 
4186:../tasks/SDMMC/ff.c **** FRESULT f_fdisk (
4187:../tasks/SDMMC/ff.c **** 	BYTE pdrv,			/* Physical drive number */
4188:../tasks/SDMMC/ff.c **** 	const DWORD szt[],	/* Pointer to the size table for each partitions */
4189:../tasks/SDMMC/ff.c **** 	void* work			/* Pointer to the working buffer */
4190:../tasks/SDMMC/ff.c **** )
4191:../tasks/SDMMC/ff.c **** {
4192:../tasks/SDMMC/ff.c **** 	UINT i, n, sz_cyl, tot_cyl, b_cyl, e_cyl, p_cyl;
4193:../tasks/SDMMC/ff.c **** 	BYTE s_hd, e_hd, *p, *buf = (BYTE*)work;
4194:../tasks/SDMMC/ff.c **** 	DSTATUS stat;
4195:../tasks/SDMMC/ff.c **** 	DWORD sz_disk, sz_part, s_part;
4196:../tasks/SDMMC/ff.c **** 
4197:../tasks/SDMMC/ff.c **** 
4198:../tasks/SDMMC/ff.c **** 	stat = disk_initialize(pdrv);
4199:../tasks/SDMMC/ff.c **** 	if (stat & STA_NOINIT) return FR_NOT_READY;
4200:../tasks/SDMMC/ff.c **** 	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
4201:../tasks/SDMMC/ff.c **** 	if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_disk)) return FR_DISK_ERR;
4202:../tasks/SDMMC/ff.c **** 
4203:../tasks/SDMMC/ff.c **** 	/* Determine CHS in the table regardless of the drive geometry */
4204:../tasks/SDMMC/ff.c **** 	for (n = 16; n < 256 && sz_disk / n / 63 > 1024; n *= 2) ;
4205:../tasks/SDMMC/ff.c **** 	if (n == 256) n--;
4206:../tasks/SDMMC/ff.c **** 	e_hd = n - 1;
4207:../tasks/SDMMC/ff.c **** 	sz_cyl = 63 * n;
4208:../tasks/SDMMC/ff.c **** 	tot_cyl = sz_disk / sz_cyl;
4209:../tasks/SDMMC/ff.c **** 
4210:../tasks/SDMMC/ff.c **** 	/* Create partition table */
4211:../tasks/SDMMC/ff.c **** 	mem_set(buf, 0, _MAX_SS);
4212:../tasks/SDMMC/ff.c **** 	p = buf + MBR_Table; b_cyl = 0;
4213:../tasks/SDMMC/ff.c **** 	for (i = 0; i < 4; i++, p += SZ_PTE) {
4214:../tasks/SDMMC/ff.c **** 		p_cyl = (szt[i] <= 100U) ? (DWORD)tot_cyl * szt[i] / 100 : szt[i] / sz_cyl;
4215:../tasks/SDMMC/ff.c **** 		if (!p_cyl) continue;
4216:../tasks/SDMMC/ff.c **** 		s_part = (DWORD)sz_cyl * b_cyl;
4217:../tasks/SDMMC/ff.c **** 		sz_part = (DWORD)sz_cyl * p_cyl;
4218:../tasks/SDMMC/ff.c **** 		if (i == 0) {	/* Exclude first track of cylinder 0 */
4219:../tasks/SDMMC/ff.c **** 			s_hd = 1;
4220:../tasks/SDMMC/ff.c **** 			s_part += 63; sz_part -= 63;
4221:../tasks/SDMMC/ff.c **** 		} else {
4222:../tasks/SDMMC/ff.c **** 			s_hd = 0;
4223:../tasks/SDMMC/ff.c **** 		}
4224:../tasks/SDMMC/ff.c **** 		e_cyl = b_cyl + p_cyl - 1;
4225:../tasks/SDMMC/ff.c **** 		if (e_cyl >= tot_cyl) return FR_INVALID_PARAMETER;
4226:../tasks/SDMMC/ff.c **** 
4227:../tasks/SDMMC/ff.c **** 		/* Set partition table */
4228:../tasks/SDMMC/ff.c **** 		p[1] = s_hd;						/* Start head */
4229:../tasks/SDMMC/ff.c **** 		p[2] = (BYTE)((b_cyl >> 2) + 1);	/* Start sector */
4230:../tasks/SDMMC/ff.c **** 		p[3] = (BYTE)b_cyl;					/* Start cylinder */
4231:../tasks/SDMMC/ff.c **** 		p[4] = 0x06;						/* System type (temporary setting) */
4232:../tasks/SDMMC/ff.c **** 		p[5] = e_hd;						/* End head */
4233:../tasks/SDMMC/ff.c **** 		p[6] = (BYTE)((e_cyl >> 2) + 63);	/* End sector */
4234:../tasks/SDMMC/ff.c **** 		p[7] = (BYTE)e_cyl;					/* End cylinder */
4235:../tasks/SDMMC/ff.c **** 		ST_DWORD(p + 8, s_part);			/* Start sector in LBA */
4236:../tasks/SDMMC/ff.c **** 		ST_DWORD(p + 12, sz_part);			/* Partition size */
4237:../tasks/SDMMC/ff.c **** 
4238:../tasks/SDMMC/ff.c **** 		/* Next partition */
4239:../tasks/SDMMC/ff.c **** 		b_cyl += p_cyl;
4240:../tasks/SDMMC/ff.c **** 	}
4241:../tasks/SDMMC/ff.c **** 	ST_WORD(p, 0xAA55);
4242:../tasks/SDMMC/ff.c **** 
4243:../tasks/SDMMC/ff.c **** 	/* Write it to the MBR */
4244:../tasks/SDMMC/ff.c **** 	return (disk_write(pdrv, buf, 0, 1) || disk_ioctl(pdrv, CTRL_SYNC, 0)) ? FR_DISK_ERR : FR_OK;
4245:../tasks/SDMMC/ff.c **** }
4246:../tasks/SDMMC/ff.c **** 
4247:../tasks/SDMMC/ff.c **** 
4248:../tasks/SDMMC/ff.c **** #endif /* _MULTI_PARTITION */
4249:../tasks/SDMMC/ff.c **** #endif /* _USE_MKFS && !_FS_READONLY */
4250:../tasks/SDMMC/ff.c **** 
4251:../tasks/SDMMC/ff.c **** 
4252:../tasks/SDMMC/ff.c **** 
4253:../tasks/SDMMC/ff.c **** 
4254:../tasks/SDMMC/ff.c **** #if _USE_STRFUNC
4255:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
4256:../tasks/SDMMC/ff.c **** /* Get a string from the file                                            */
4257:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
4258:../tasks/SDMMC/ff.c **** 
4259:../tasks/SDMMC/ff.c **** TCHAR* f_gets (
4260:../tasks/SDMMC/ff.c **** 	TCHAR* buff,	/* Pointer to the string buffer to read */
4261:../tasks/SDMMC/ff.c **** 	int len,		/* Size of string buffer (characters) */
4262:../tasks/SDMMC/ff.c **** 	FIL* fp			/* Pointer to the file object */
4263:../tasks/SDMMC/ff.c **** )
4264:../tasks/SDMMC/ff.c **** {
 11697              		.loc 1 4264 0
 11698              		.cfi_startproc
 11699              		@ args = 0, pretend = 0, frame = 32
 11700              		@ frame_needed = 1, uses_anonymous_args = 0
 11701 4f44 80B5     		push	{r7, lr}
 11702              		.cfi_def_cfa_offset 8
 11703              		.cfi_offset 7, -8
 11704              		.cfi_offset 14, -4
 11705 4f46 88B0     		sub	sp, sp, #32
 11706              		.cfi_def_cfa_offset 40
 11707 4f48 00AF     		add	r7, sp, #0
 11708              		.cfi_def_cfa_register 7
 11709 4f4a F860     		str	r0, [r7, #12]
 11710 4f4c B960     		str	r1, [r7, #8]
 11711 4f4e 7A60     		str	r2, [r7, #4]
4265:../tasks/SDMMC/ff.c **** 	int n = 0;
 11712              		.loc 1 4265 0
 11713 4f50 0023     		movs	r3, #0
 11714 4f52 FB61     		str	r3, [r7, #28]
4266:../tasks/SDMMC/ff.c **** 	TCHAR c, *p = buff;
 11715              		.loc 1 4266 0
 11716 4f54 FB68     		ldr	r3, [r7, #12]
 11717 4f56 BB61     		str	r3, [r7, #24]
4267:../tasks/SDMMC/ff.c **** 	BYTE s[2];
4268:../tasks/SDMMC/ff.c **** 	UINT rc;
4269:../tasks/SDMMC/ff.c **** 
4270:../tasks/SDMMC/ff.c **** 
4271:../tasks/SDMMC/ff.c **** 	while (n < len - 1) {	/* Read characters until buffer gets filled */
 11718              		.loc 1 4271 0
 11719 4f58 1EE0     		b	.L663
 11720              	.L667:
4272:../tasks/SDMMC/ff.c **** #if _LFN_UNICODE
4273:../tasks/SDMMC/ff.c **** #if _STRF_ENCODE == 3		/* Read a character in UTF-8 */
4274:../tasks/SDMMC/ff.c **** 		f_read(fp, s, 1, &rc);
4275:../tasks/SDMMC/ff.c **** 		if (rc != 1) break;
4276:../tasks/SDMMC/ff.c **** 		c = s[0];
4277:../tasks/SDMMC/ff.c **** 		if (c >= 0x80) {
4278:../tasks/SDMMC/ff.c **** 			if (c < 0xC0) continue;	/* Skip stray trailer */
4279:../tasks/SDMMC/ff.c **** 			if (c < 0xE0) {			/* Two-byte sequence */
4280:../tasks/SDMMC/ff.c **** 				f_read(fp, s, 1, &rc);
4281:../tasks/SDMMC/ff.c **** 				if (rc != 1) break;
4282:../tasks/SDMMC/ff.c **** 				c = (c & 0x1F) << 6 | (s[0] & 0x3F);
4283:../tasks/SDMMC/ff.c **** 				if (c < 0x80) c = '?';
4284:../tasks/SDMMC/ff.c **** 			} else {
4285:../tasks/SDMMC/ff.c **** 				if (c < 0xF0) {		/* Three-byte sequence */
4286:../tasks/SDMMC/ff.c **** 					f_read(fp, s, 2, &rc);
4287:../tasks/SDMMC/ff.c **** 					if (rc != 2) break;
4288:../tasks/SDMMC/ff.c **** 					c = c << 12 | (s[0] & 0x3F) << 6 | (s[1] & 0x3F);
4289:../tasks/SDMMC/ff.c **** 					if (c < 0x800) c = '?';
4290:../tasks/SDMMC/ff.c **** 				} else {			/* Reject four-byte sequence */
4291:../tasks/SDMMC/ff.c **** 					c = '?';
4292:../tasks/SDMMC/ff.c **** 				}
4293:../tasks/SDMMC/ff.c **** 			}
4294:../tasks/SDMMC/ff.c **** 		}
4295:../tasks/SDMMC/ff.c **** #elif _STRF_ENCODE == 2		/* Read a character in UTF-16BE */
4296:../tasks/SDMMC/ff.c **** 		f_read(fp, s, 2, &rc);
4297:../tasks/SDMMC/ff.c **** 		if (rc != 2) break;
4298:../tasks/SDMMC/ff.c **** 		c = s[1] + (s[0] << 8);
4299:../tasks/SDMMC/ff.c **** #elif _STRF_ENCODE == 1		/* Read a character in UTF-16LE */
4300:../tasks/SDMMC/ff.c **** 		f_read(fp, s, 2, &rc);
4301:../tasks/SDMMC/ff.c **** 		if (rc != 2) break;
4302:../tasks/SDMMC/ff.c **** 		c = s[0] + (s[1] << 8);
4303:../tasks/SDMMC/ff.c **** #else						/* Read a character in ANSI/OEM */
4304:../tasks/SDMMC/ff.c **** 		f_read(fp, s, 1, &rc);
4305:../tasks/SDMMC/ff.c **** 		if (rc != 1) break;
4306:../tasks/SDMMC/ff.c **** 		c = s[0];
4307:../tasks/SDMMC/ff.c **** 		if (IsDBCS1(c)) {
4308:../tasks/SDMMC/ff.c **** 			f_read(fp, s, 1, &rc);
4309:../tasks/SDMMC/ff.c **** 			if (rc != 1) break;
4310:../tasks/SDMMC/ff.c **** 			c = (c << 8) + s[0];
4311:../tasks/SDMMC/ff.c **** 		}
4312:../tasks/SDMMC/ff.c **** 		c = ff_convert(c, 1);	/* OEM -> Unicode */
4313:../tasks/SDMMC/ff.c **** 		if (!c) c = '?';
4314:../tasks/SDMMC/ff.c **** #endif
4315:../tasks/SDMMC/ff.c **** #else						/* Read a character without conversion */
4316:../tasks/SDMMC/ff.c **** 		f_read(fp, s, 1, &rc);
 11721              		.loc 1 4316 0
 11722 4f5a 07F11402 		add	r2, r7, #20
 11723 4f5e 07F11003 		add	r3, r7, #16
 11724 4f62 7868     		ldr	r0, [r7, #4]
 11725 4f64 1146     		mov	r1, r2
 11726 4f66 0122     		movs	r2, #1
 11727 4f68 FFF7FEFF 		bl	f_read
4317:../tasks/SDMMC/ff.c **** 		if (rc != 1) break;
 11728              		.loc 1 4317 0
 11729 4f6c 3B69     		ldr	r3, [r7, #16]
 11730 4f6e 012B     		cmp	r3, #1
 11731 4f70 00D0     		beq	.L664
 11732              		.loc 1 4317 0 is_stmt 0 discriminator 1
 11733 4f72 16E0     		b	.L665
 11734              	.L664:
4318:../tasks/SDMMC/ff.c **** 		c = s[0];
 11735              		.loc 1 4318 0 is_stmt 1
 11736 4f74 3B7D     		ldrb	r3, [r7, #20]
 11737 4f76 FB75     		strb	r3, [r7, #23]
4319:../tasks/SDMMC/ff.c **** #endif
4320:../tasks/SDMMC/ff.c **** 		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 11738              		.loc 1 4320 0
 11739 4f78 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 11740 4f7a 0D2B     		cmp	r3, #13
 11741 4f7c 00D1     		bne	.L666
 11742              		.loc 1 4320 0 is_stmt 0 discriminator 1
 11743 4f7e 0BE0     		b	.L663
 11744              	.L666:
4321:../tasks/SDMMC/ff.c **** 		*p++ = c;
 11745              		.loc 1 4321 0 is_stmt 1
 11746 4f80 BB69     		ldr	r3, [r7, #24]
 11747 4f82 5A1C     		adds	r2, r3, #1
 11748 4f84 BA61     		str	r2, [r7, #24]
 11749 4f86 FA7D     		ldrb	r2, [r7, #23]
 11750 4f88 1A70     		strb	r2, [r3]
4322:../tasks/SDMMC/ff.c **** 		n++;
 11751              		.loc 1 4322 0
 11752 4f8a FB69     		ldr	r3, [r7, #28]
 11753 4f8c 0133     		adds	r3, r3, #1
 11754 4f8e FB61     		str	r3, [r7, #28]
4323:../tasks/SDMMC/ff.c **** 		if (c == '\n') break;		/* Break on EOL */
 11755              		.loc 1 4323 0
 11756 4f90 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 11757 4f92 0A2B     		cmp	r3, #10
 11758 4f94 00D1     		bne	.L663
 11759              		.loc 1 4323 0 is_stmt 0 discriminator 1
 11760 4f96 04E0     		b	.L665
 11761              	.L663:
4271:../tasks/SDMMC/ff.c **** #if _LFN_UNICODE
 11762              		.loc 1 4271 0 is_stmt 1 discriminator 1
 11763 4f98 BB68     		ldr	r3, [r7, #8]
 11764 4f9a 5A1E     		subs	r2, r3, #1
 11765 4f9c FB69     		ldr	r3, [r7, #28]
 11766 4f9e 9A42     		cmp	r2, r3
 11767 4fa0 DBDC     		bgt	.L667
 11768              	.L665:
4324:../tasks/SDMMC/ff.c **** 	}
4325:../tasks/SDMMC/ff.c **** 	*p = 0;
 11769              		.loc 1 4325 0
 11770 4fa2 BB69     		ldr	r3, [r7, #24]
 11771 4fa4 0022     		movs	r2, #0
 11772 4fa6 1A70     		strb	r2, [r3]
4326:../tasks/SDMMC/ff.c **** 	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 11773              		.loc 1 4326 0
 11774 4fa8 FB69     		ldr	r3, [r7, #28]
 11775 4faa 002B     		cmp	r3, #0
 11776 4fac 01D0     		beq	.L668
 11777              		.loc 1 4326 0 is_stmt 0 discriminator 1
 11778 4fae FB68     		ldr	r3, [r7, #12]
 11779 4fb0 00E0     		b	.L669
 11780              	.L668:
 11781              		.loc 1 4326 0 discriminator 2
 11782 4fb2 0023     		movs	r3, #0
 11783              	.L669:
4327:../tasks/SDMMC/ff.c **** }
 11784              		.loc 1 4327 0 is_stmt 1 discriminator 3
 11785 4fb4 1846     		mov	r0, r3
 11786 4fb6 2037     		adds	r7, r7, #32
 11787 4fb8 BD46     		mov	sp, r7
 11788              		@ sp needed
 11789 4fba 80BD     		pop	{r7, pc}
 11790              		.cfi_endproc
 11791              	.LFE112:
 11793              		.align	2
 11794              		.thumb
 11795              		.thumb_func
 11797              	putc_bfd:
 11798              	.LFB113:
4328:../tasks/SDMMC/ff.c **** 
4329:../tasks/SDMMC/ff.c **** 
4330:../tasks/SDMMC/ff.c **** 
4331:../tasks/SDMMC/ff.c **** #if !_FS_READONLY
4332:../tasks/SDMMC/ff.c **** #include <stdarg.h>
4333:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
4334:../tasks/SDMMC/ff.c **** /* Put a character to the file                                           */
4335:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
4336:../tasks/SDMMC/ff.c **** 
4337:../tasks/SDMMC/ff.c **** typedef struct {
4338:../tasks/SDMMC/ff.c **** 	FIL* fp;
4339:../tasks/SDMMC/ff.c **** 	int idx, nchr;
4340:../tasks/SDMMC/ff.c **** 	BYTE buf[64];
4341:../tasks/SDMMC/ff.c **** } putbuff;
4342:../tasks/SDMMC/ff.c **** 
4343:../tasks/SDMMC/ff.c **** 
4344:../tasks/SDMMC/ff.c **** static
4345:../tasks/SDMMC/ff.c **** void putc_bfd (
4346:../tasks/SDMMC/ff.c **** 	putbuff* pb,
4347:../tasks/SDMMC/ff.c **** 	TCHAR c
4348:../tasks/SDMMC/ff.c **** )
4349:../tasks/SDMMC/ff.c **** {
 11799              		.loc 1 4349 0
 11800              		.cfi_startproc
 11801              		@ args = 0, pretend = 0, frame = 16
 11802              		@ frame_needed = 1, uses_anonymous_args = 0
 11803 4fbc 80B5     		push	{r7, lr}
 11804              		.cfi_def_cfa_offset 8
 11805              		.cfi_offset 7, -8
 11806              		.cfi_offset 14, -4
 11807 4fbe 84B0     		sub	sp, sp, #16
 11808              		.cfi_def_cfa_offset 24
 11809 4fc0 00AF     		add	r7, sp, #0
 11810              		.cfi_def_cfa_register 7
 11811 4fc2 7860     		str	r0, [r7, #4]
 11812 4fc4 0B46     		mov	r3, r1
 11813 4fc6 FB70     		strb	r3, [r7, #3]
4350:../tasks/SDMMC/ff.c **** 	UINT bw;
4351:../tasks/SDMMC/ff.c **** 	int i;
4352:../tasks/SDMMC/ff.c **** 
4353:../tasks/SDMMC/ff.c **** 
4354:../tasks/SDMMC/ff.c **** 	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 11814              		.loc 1 4354 0
 11815 4fc8 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 11816 4fca 0A2B     		cmp	r3, #10
 11817 4fcc 03D1     		bne	.L672
4355:../tasks/SDMMC/ff.c **** 		putc_bfd(pb, '\r');
 11818              		.loc 1 4355 0
 11819 4fce 7868     		ldr	r0, [r7, #4]
 11820 4fd0 0D21     		movs	r1, #13
 11821 4fd2 FFF7F3FF 		bl	putc_bfd
 11822              	.L672:
4356:../tasks/SDMMC/ff.c **** 
4357:../tasks/SDMMC/ff.c **** 	i = pb->idx;	/* Buffer write index (-1:error) */
 11823              		.loc 1 4357 0
 11824 4fd6 7B68     		ldr	r3, [r7, #4]
 11825 4fd8 5B68     		ldr	r3, [r3, #4]
 11826 4fda FB60     		str	r3, [r7, #12]
4358:../tasks/SDMMC/ff.c **** 	if (i < 0) return;
 11827              		.loc 1 4358 0
 11828 4fdc FB68     		ldr	r3, [r7, #12]
 11829 4fde 002B     		cmp	r3, #0
 11830 4fe0 24DB     		blt	.L671
4359:../tasks/SDMMC/ff.c **** 
4360:../tasks/SDMMC/ff.c **** #if _LFN_UNICODE
4361:../tasks/SDMMC/ff.c **** #if _STRF_ENCODE == 3			/* Write a character in UTF-8 */
4362:../tasks/SDMMC/ff.c **** 	if (c < 0x80) {				/* 7-bit */
4363:../tasks/SDMMC/ff.c **** 		pb->buf[i++] = (BYTE)c;
4364:../tasks/SDMMC/ff.c **** 	} else {
4365:../tasks/SDMMC/ff.c **** 		if (c < 0x800) {		/* 11-bit */
4366:../tasks/SDMMC/ff.c **** 			pb->buf[i++] = (BYTE)(0xC0 | c >> 6);
4367:../tasks/SDMMC/ff.c **** 		} else {				/* 16-bit */
4368:../tasks/SDMMC/ff.c **** 			pb->buf[i++] = (BYTE)(0xE0 | c >> 12);
4369:../tasks/SDMMC/ff.c **** 			pb->buf[i++] = (BYTE)(0x80 | (c >> 6 & 0x3F));
4370:../tasks/SDMMC/ff.c **** 		}
4371:../tasks/SDMMC/ff.c **** 		pb->buf[i++] = (BYTE)(0x80 | (c & 0x3F));
4372:../tasks/SDMMC/ff.c **** 	}
4373:../tasks/SDMMC/ff.c **** #elif _STRF_ENCODE == 2			/* Write a character in UTF-16BE */
4374:../tasks/SDMMC/ff.c **** 	pb->buf[i++] = (BYTE)(c >> 8);
4375:../tasks/SDMMC/ff.c **** 	pb->buf[i++] = (BYTE)c;
4376:../tasks/SDMMC/ff.c **** #elif _STRF_ENCODE == 1			/* Write a character in UTF-16LE */
4377:../tasks/SDMMC/ff.c **** 	pb->buf[i++] = (BYTE)c;
4378:../tasks/SDMMC/ff.c **** 	pb->buf[i++] = (BYTE)(c >> 8);
4379:../tasks/SDMMC/ff.c **** #else							/* Write a character in ANSI/OEM */
4380:../tasks/SDMMC/ff.c **** 	c = ff_convert(c, 0);	/* Unicode -> OEM */
4381:../tasks/SDMMC/ff.c **** 	if (!c) c = '?';
4382:../tasks/SDMMC/ff.c **** 	if (c >= 0x100)
4383:../tasks/SDMMC/ff.c **** 		pb->buf[i++] = (BYTE)(c >> 8);
4384:../tasks/SDMMC/ff.c **** 	pb->buf[i++] = (BYTE)c;
4385:../tasks/SDMMC/ff.c **** #endif
4386:../tasks/SDMMC/ff.c **** #else							/* Write a character without conversion */
4387:../tasks/SDMMC/ff.c **** 	pb->buf[i++] = (BYTE)c;
 11831              		.loc 1 4387 0
 11832 4fe2 FB68     		ldr	r3, [r7, #12]
 11833 4fe4 5A1C     		adds	r2, r3, #1
 11834 4fe6 FA60     		str	r2, [r7, #12]
 11835 4fe8 7A68     		ldr	r2, [r7, #4]
 11836 4fea 1344     		add	r3, r3, r2
 11837 4fec FA78     		ldrb	r2, [r7, #3]
 11838 4fee 1A73     		strb	r2, [r3, #12]
4388:../tasks/SDMMC/ff.c **** #endif
4389:../tasks/SDMMC/ff.c **** 
4390:../tasks/SDMMC/ff.c **** 	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 11839              		.loc 1 4390 0
 11840 4ff0 FB68     		ldr	r3, [r7, #12]
 11841 4ff2 3C2B     		cmp	r3, #60
 11842 4ff4 12DD     		ble	.L675
4391:../tasks/SDMMC/ff.c **** 		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 11843              		.loc 1 4391 0
 11844 4ff6 7B68     		ldr	r3, [r7, #4]
 11845 4ff8 1868     		ldr	r0, [r3]
 11846 4ffa 7B68     		ldr	r3, [r7, #4]
 11847 4ffc 03F10C01 		add	r1, r3, #12
 11848 5000 FA68     		ldr	r2, [r7, #12]
 11849 5002 07F10803 		add	r3, r7, #8
 11850 5006 FFF7FEFF 		bl	f_write
4392:../tasks/SDMMC/ff.c **** 		i = (bw == (UINT)i) ? 0 : -1;
 11851              		.loc 1 4392 0
 11852 500a FA68     		ldr	r2, [r7, #12]
 11853 500c BB68     		ldr	r3, [r7, #8]
 11854 500e 9A42     		cmp	r2, r3
 11855 5010 01D1     		bne	.L676
 11856              		.loc 1 4392 0 is_stmt 0 discriminator 1
 11857 5012 0023     		movs	r3, #0
 11858 5014 01E0     		b	.L677
 11859              	.L676:
 11860              		.loc 1 4392 0 discriminator 2
 11861 5016 4FF0FF33 		mov	r3, #-1
 11862              	.L677:
 11863              		.loc 1 4392 0 discriminator 3
 11864 501a FB60     		str	r3, [r7, #12]
 11865              	.L675:
4393:../tasks/SDMMC/ff.c **** 	}
4394:../tasks/SDMMC/ff.c **** 	pb->idx = i;
 11866              		.loc 1 4394 0 is_stmt 1
 11867 501c 7B68     		ldr	r3, [r7, #4]
 11868 501e FA68     		ldr	r2, [r7, #12]
 11869 5020 5A60     		str	r2, [r3, #4]
4395:../tasks/SDMMC/ff.c **** 	pb->nchr++;
 11870              		.loc 1 4395 0
 11871 5022 7B68     		ldr	r3, [r7, #4]
 11872 5024 9B68     		ldr	r3, [r3, #8]
 11873 5026 5A1C     		adds	r2, r3, #1
 11874 5028 7B68     		ldr	r3, [r7, #4]
 11875 502a 9A60     		str	r2, [r3, #8]
 11876              	.L671:
4396:../tasks/SDMMC/ff.c **** }
 11877              		.loc 1 4396 0
 11878 502c 1037     		adds	r7, r7, #16
 11879 502e BD46     		mov	sp, r7
 11880              		@ sp needed
 11881 5030 80BD     		pop	{r7, pc}
 11882              		.cfi_endproc
 11883              	.LFE113:
 11885 5032 00BF     		.align	2
 11886              		.global	f_putc
 11887              		.thumb
 11888              		.thumb_func
 11890              	f_putc:
 11891              	.LFB114:
4397:../tasks/SDMMC/ff.c **** 
4398:../tasks/SDMMC/ff.c **** 
4399:../tasks/SDMMC/ff.c **** 
4400:../tasks/SDMMC/ff.c **** int f_putc (
4401:../tasks/SDMMC/ff.c **** 	TCHAR c,	/* A character to be output */
4402:../tasks/SDMMC/ff.c **** 	FIL* fp		/* Pointer to the file object */
4403:../tasks/SDMMC/ff.c **** )
4404:../tasks/SDMMC/ff.c **** {
 11892              		.loc 1 4404 0
 11893              		.cfi_startproc
 11894              		@ args = 0, pretend = 0, frame = 88
 11895              		@ frame_needed = 1, uses_anonymous_args = 0
 11896 5034 80B5     		push	{r7, lr}
 11897              		.cfi_def_cfa_offset 8
 11898              		.cfi_offset 7, -8
 11899              		.cfi_offset 14, -4
 11900 5036 96B0     		sub	sp, sp, #88
 11901              		.cfi_def_cfa_offset 96
 11902 5038 00AF     		add	r7, sp, #0
 11903              		.cfi_def_cfa_register 7
 11904 503a 0346     		mov	r3, r0
 11905 503c 3960     		str	r1, [r7]
 11906 503e FB71     		strb	r3, [r7, #7]
4405:../tasks/SDMMC/ff.c **** 	putbuff pb;
4406:../tasks/SDMMC/ff.c **** 	UINT nw;
4407:../tasks/SDMMC/ff.c **** 
4408:../tasks/SDMMC/ff.c **** 
4409:../tasks/SDMMC/ff.c **** 	pb.fp = fp;			/* Initialize output buffer */
 11907              		.loc 1 4409 0
 11908 5040 3B68     		ldr	r3, [r7]
 11909 5042 FB60     		str	r3, [r7, #12]
4410:../tasks/SDMMC/ff.c **** 	pb.nchr = pb.idx = 0;
 11910              		.loc 1 4410 0
 11911 5044 0023     		movs	r3, #0
 11912 5046 3B61     		str	r3, [r7, #16]
 11913 5048 3B69     		ldr	r3, [r7, #16]
 11914 504a 7B61     		str	r3, [r7, #20]
4411:../tasks/SDMMC/ff.c **** 
4412:../tasks/SDMMC/ff.c **** 	putc_bfd(&pb, c);	/* Put a character */
 11915              		.loc 1 4412 0
 11916 504c 07F10C02 		add	r2, r7, #12
 11917 5050 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 11918 5052 1046     		mov	r0, r2
 11919 5054 1946     		mov	r1, r3
 11920 5056 FFF7B1FF 		bl	putc_bfd
4413:../tasks/SDMMC/ff.c **** 
4414:../tasks/SDMMC/ff.c **** 	if (   pb.idx >= 0	/* Flush buffered characters to the file */
 11921              		.loc 1 4414 0
 11922 505a 3B69     		ldr	r3, [r7, #16]
 11923 505c 002B     		cmp	r3, #0
 11924 505e 14DB     		blt	.L679
4415:../tasks/SDMMC/ff.c **** 		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 11925              		.loc 1 4415 0
 11926 5060 F868     		ldr	r0, [r7, #12]
 11927 5062 3B69     		ldr	r3, [r7, #16]
 11928 5064 1A46     		mov	r2, r3
 11929 5066 07F10C03 		add	r3, r7, #12
 11930 506a 03F10C01 		add	r1, r3, #12
 11931 506e 07F10803 		add	r3, r7, #8
 11932 5072 FFF7FEFF 		bl	f_write
 11933 5076 0346     		mov	r3, r0
 11934 5078 002B     		cmp	r3, #0
 11935 507a 06D1     		bne	.L679
4416:../tasks/SDMMC/ff.c **** 		&& (UINT)pb.idx == nw) return pb.nchr;
 11936              		.loc 1 4416 0
 11937 507c 3B69     		ldr	r3, [r7, #16]
 11938 507e 1A46     		mov	r2, r3
 11939 5080 BB68     		ldr	r3, [r7, #8]
 11940 5082 9A42     		cmp	r2, r3
 11941 5084 01D1     		bne	.L679
 11942              		.loc 1 4416 0 is_stmt 0 discriminator 1
 11943 5086 7B69     		ldr	r3, [r7, #20]
 11944 5088 01E0     		b	.L681
 11945              	.L679:
4417:../tasks/SDMMC/ff.c **** 	return EOF;
 11946              		.loc 1 4417 0 is_stmt 1
 11947 508a 4FF0FF33 		mov	r3, #-1
 11948              	.L681:
4418:../tasks/SDMMC/ff.c **** }
 11949              		.loc 1 4418 0
 11950 508e 1846     		mov	r0, r3
 11951 5090 5837     		adds	r7, r7, #88
 11952 5092 BD46     		mov	sp, r7
 11953              		@ sp needed
 11954 5094 80BD     		pop	{r7, pc}
 11955              		.cfi_endproc
 11956              	.LFE114:
 11958 5096 00BF     		.align	2
 11959              		.global	f_puts
 11960              		.thumb
 11961              		.thumb_func
 11963              	f_puts:
 11964              	.LFB115:
4419:../tasks/SDMMC/ff.c **** 
4420:../tasks/SDMMC/ff.c **** 
4421:../tasks/SDMMC/ff.c **** 
4422:../tasks/SDMMC/ff.c **** 
4423:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
4424:../tasks/SDMMC/ff.c **** /* Put a string to the file                                              */
4425:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
4426:../tasks/SDMMC/ff.c **** 
4427:../tasks/SDMMC/ff.c **** int f_puts (
4428:../tasks/SDMMC/ff.c **** 	const TCHAR* str,	/* Pointer to the string to be output */
4429:../tasks/SDMMC/ff.c **** 	FIL* fp				/* Pointer to the file object */
4430:../tasks/SDMMC/ff.c **** )
4431:../tasks/SDMMC/ff.c **** {
 11965              		.loc 1 4431 0
 11966              		.cfi_startproc
 11967              		@ args = 0, pretend = 0, frame = 88
 11968              		@ frame_needed = 1, uses_anonymous_args = 0
 11969 5098 80B5     		push	{r7, lr}
 11970              		.cfi_def_cfa_offset 8
 11971              		.cfi_offset 7, -8
 11972              		.cfi_offset 14, -4
 11973 509a 96B0     		sub	sp, sp, #88
 11974              		.cfi_def_cfa_offset 96
 11975 509c 00AF     		add	r7, sp, #0
 11976              		.cfi_def_cfa_register 7
 11977 509e 7860     		str	r0, [r7, #4]
 11978 50a0 3960     		str	r1, [r7]
4432:../tasks/SDMMC/ff.c **** 	putbuff pb;
4433:../tasks/SDMMC/ff.c **** 	UINT nw;
4434:../tasks/SDMMC/ff.c **** 
4435:../tasks/SDMMC/ff.c **** 
4436:../tasks/SDMMC/ff.c **** 	pb.fp = fp;				/* Initialize output buffer */
 11979              		.loc 1 4436 0
 11980 50a2 3B68     		ldr	r3, [r7]
 11981 50a4 FB60     		str	r3, [r7, #12]
4437:../tasks/SDMMC/ff.c **** 	pb.nchr = pb.idx = 0;
 11982              		.loc 1 4437 0
 11983 50a6 0023     		movs	r3, #0
 11984 50a8 3B61     		str	r3, [r7, #16]
 11985 50aa 3B69     		ldr	r3, [r7, #16]
 11986 50ac 7B61     		str	r3, [r7, #20]
4438:../tasks/SDMMC/ff.c **** 
4439:../tasks/SDMMC/ff.c **** 	while (*str)			/* Put the string */
 11987              		.loc 1 4439 0
 11988 50ae 09E0     		b	.L683
 11989              	.L684:
4440:../tasks/SDMMC/ff.c **** 		putc_bfd(&pb, *str++);
 11990              		.loc 1 4440 0
 11991 50b0 7B68     		ldr	r3, [r7, #4]
 11992 50b2 5A1C     		adds	r2, r3, #1
 11993 50b4 7A60     		str	r2, [r7, #4]
 11994 50b6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 11995 50b8 07F10C02 		add	r2, r7, #12
 11996 50bc 1046     		mov	r0, r2
 11997 50be 1946     		mov	r1, r3
 11998 50c0 FFF77CFF 		bl	putc_bfd
 11999              	.L683:
4439:../tasks/SDMMC/ff.c **** 		putc_bfd(&pb, *str++);
 12000              		.loc 1 4439 0 discriminator 1
 12001 50c4 7B68     		ldr	r3, [r7, #4]
 12002 50c6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 12003 50c8 002B     		cmp	r3, #0
 12004 50ca F1D1     		bne	.L684
4441:../tasks/SDMMC/ff.c **** 
4442:../tasks/SDMMC/ff.c **** 	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 12005              		.loc 1 4442 0
 12006 50cc 3B69     		ldr	r3, [r7, #16]
 12007 50ce 002B     		cmp	r3, #0
 12008 50d0 14DB     		blt	.L685
4443:../tasks/SDMMC/ff.c **** 		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 12009              		.loc 1 4443 0
 12010 50d2 F868     		ldr	r0, [r7, #12]
 12011 50d4 3B69     		ldr	r3, [r7, #16]
 12012 50d6 1A46     		mov	r2, r3
 12013 50d8 07F10C03 		add	r3, r7, #12
 12014 50dc 03F10C01 		add	r1, r3, #12
 12015 50e0 07F10803 		add	r3, r7, #8
 12016 50e4 FFF7FEFF 		bl	f_write
 12017 50e8 0346     		mov	r3, r0
 12018 50ea 002B     		cmp	r3, #0
 12019 50ec 06D1     		bne	.L685
4444:../tasks/SDMMC/ff.c **** 		&& (UINT)pb.idx == nw) return pb.nchr;
 12020              		.loc 1 4444 0
 12021 50ee 3B69     		ldr	r3, [r7, #16]
 12022 50f0 1A46     		mov	r2, r3
 12023 50f2 BB68     		ldr	r3, [r7, #8]
 12024 50f4 9A42     		cmp	r2, r3
 12025 50f6 01D1     		bne	.L685
 12026              		.loc 1 4444 0 is_stmt 0 discriminator 1
 12027 50f8 7B69     		ldr	r3, [r7, #20]
 12028 50fa 01E0     		b	.L687
 12029              	.L685:
4445:../tasks/SDMMC/ff.c **** 	return EOF;
 12030              		.loc 1 4445 0 is_stmt 1
 12031 50fc 4FF0FF33 		mov	r3, #-1
 12032              	.L687:
4446:../tasks/SDMMC/ff.c **** }
 12033              		.loc 1 4446 0
 12034 5100 1846     		mov	r0, r3
 12035 5102 5837     		adds	r7, r7, #88
 12036 5104 BD46     		mov	sp, r7
 12037              		@ sp needed
 12038 5106 80BD     		pop	{r7, pc}
 12039              		.cfi_endproc
 12040              	.LFE115:
 12042              		.align	2
 12043              		.global	f_printf
 12044              		.thumb
 12045              		.thumb_func
 12047              	f_printf:
 12048              	.LFB116:
4447:../tasks/SDMMC/ff.c **** 
4448:../tasks/SDMMC/ff.c **** 
4449:../tasks/SDMMC/ff.c **** 
4450:../tasks/SDMMC/ff.c **** 
4451:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
4452:../tasks/SDMMC/ff.c **** /* Put a formatted string to the file                                    */
4453:../tasks/SDMMC/ff.c **** /*-----------------------------------------------------------------------*/
4454:../tasks/SDMMC/ff.c **** 
4455:../tasks/SDMMC/ff.c **** int f_printf (
4456:../tasks/SDMMC/ff.c **** 	FIL* fp,			/* Pointer to the file object */
4457:../tasks/SDMMC/ff.c **** 	const TCHAR* fmt,	/* Pointer to the format string */
4458:../tasks/SDMMC/ff.c **** 	...					/* Optional arguments... */
4459:../tasks/SDMMC/ff.c **** )
4460:../tasks/SDMMC/ff.c **** {
 12049              		.loc 1 4460 0
 12050              		.cfi_startproc
 12051              		@ args = 4, pretend = 12, frame = 136
 12052              		@ frame_needed = 1, uses_anonymous_args = 1
 12053 5108 0EB4     		push	{r1, r2, r3}
 12054              		.cfi_def_cfa_offset 12
 12055              		.cfi_offset 1, -12
 12056              		.cfi_offset 2, -8
 12057              		.cfi_offset 3, -4
 12058 510a 80B5     		push	{r7, lr}
 12059              		.cfi_def_cfa_offset 20
 12060              		.cfi_offset 7, -20
 12061              		.cfi_offset 14, -16
 12062 510c A3B0     		sub	sp, sp, #140
 12063              		.cfi_def_cfa_offset 160
 12064 510e 00AF     		add	r7, sp, #0
 12065              		.cfi_def_cfa_register 7
 12066 5110 7860     		str	r0, [r7, #4]
4461:../tasks/SDMMC/ff.c **** 	va_list arp;
4462:../tasks/SDMMC/ff.c **** 	BYTE f, r;
4463:../tasks/SDMMC/ff.c **** 	UINT nw, i, j, w;
4464:../tasks/SDMMC/ff.c **** 	DWORD v;
4465:../tasks/SDMMC/ff.c **** 	TCHAR c, d, s[16], *p;
4466:../tasks/SDMMC/ff.c **** 	putbuff pb;
4467:../tasks/SDMMC/ff.c **** 
4468:../tasks/SDMMC/ff.c **** 
4469:../tasks/SDMMC/ff.c **** 	pb.fp = fp;				/* Initialize output buffer */
 12067              		.loc 1 4469 0
 12068 5112 7B68     		ldr	r3, [r7, #4]
 12069 5114 BB60     		str	r3, [r7, #8]
4470:../tasks/SDMMC/ff.c **** 	pb.nchr = pb.idx = 0;
 12070              		.loc 1 4470 0
 12071 5116 0023     		movs	r3, #0
 12072 5118 FB60     		str	r3, [r7, #12]
 12073 511a FB68     		ldr	r3, [r7, #12]
 12074 511c 3B61     		str	r3, [r7, #16]
4471:../tasks/SDMMC/ff.c **** 
4472:../tasks/SDMMC/ff.c **** 	va_start(arp, fmt);
 12075              		.loc 1 4472 0
 12076 511e 07F19803 		add	r3, r7, #152
 12077 5122 BB66     		str	r3, [r7, #104]
 12078              	.L738:
4473:../tasks/SDMMC/ff.c **** 
4474:../tasks/SDMMC/ff.c **** 	for (;;) {
4475:../tasks/SDMMC/ff.c **** 		c = *fmt++;
 12079              		.loc 1 4475 0
 12080 5124 D7F89430 		ldr	r3, [r7, #148]
 12081 5128 5A1C     		adds	r2, r3, #1
 12082 512a C7F89420 		str	r2, [r7, #148]
 12083 512e 1B78     		ldrb	r3, [r3]
 12084 5130 87F87330 		strb	r3, [r7, #115]
4476:../tasks/SDMMC/ff.c **** 		if (c == 0) break;			/* End of string */
 12085              		.loc 1 4476 0
 12086 5134 97F87330 		ldrb	r3, [r7, #115]	@ zero_extendqisi2
 12087 5138 002B     		cmp	r3, #0
 12088 513a 00D1     		bne	.L689
 12089              		.loc 1 4476 0 is_stmt 0 discriminator 1
 12090 513c D8E1     		b	.L690
 12091              	.L689:
4477:../tasks/SDMMC/ff.c **** 		if (c != '%') {				/* Non escape character */
 12092              		.loc 1 4477 0 is_stmt 1
 12093 513e 97F87330 		ldrb	r3, [r7, #115]	@ zero_extendqisi2
 12094 5142 252B     		cmp	r3, #37
 12095 5144 08D0     		beq	.L691
4478:../tasks/SDMMC/ff.c **** 			putc_bfd(&pb, c);
 12096              		.loc 1 4478 0
 12097 5146 07F10802 		add	r2, r7, #8
 12098 514a 97F87330 		ldrb	r3, [r7, #115]	@ zero_extendqisi2
 12099 514e 1046     		mov	r0, r2
 12100 5150 1946     		mov	r1, r3
 12101 5152 FFF733FF 		bl	putc_bfd
4479:../tasks/SDMMC/ff.c **** 			continue;
 12102              		.loc 1 4479 0
 12103 5156 CAE1     		b	.L692
 12104              	.L691:
4480:../tasks/SDMMC/ff.c **** 		}
4481:../tasks/SDMMC/ff.c **** 		w = f = 0;
 12105              		.loc 1 4481 0
 12106 5158 0023     		movs	r3, #0
 12107 515a 87F88730 		strb	r3, [r7, #135]
 12108 515e 0023     		movs	r3, #0
 12109 5160 BB67     		str	r3, [r7, #120]
4482:../tasks/SDMMC/ff.c **** 		c = *fmt++;
 12110              		.loc 1 4482 0
 12111 5162 D7F89430 		ldr	r3, [r7, #148]
 12112 5166 5A1C     		adds	r2, r3, #1
 12113 5168 C7F89420 		str	r2, [r7, #148]
 12114 516c 1B78     		ldrb	r3, [r3]
 12115 516e 87F87330 		strb	r3, [r7, #115]
4483:../tasks/SDMMC/ff.c **** 		if (c == '0') {				/* Flag: '0' padding */
 12116              		.loc 1 4483 0
 12117 5172 97F87330 		ldrb	r3, [r7, #115]	@ zero_extendqisi2
 12118 5176 302B     		cmp	r3, #48
 12119 5178 0BD1     		bne	.L693
4484:../tasks/SDMMC/ff.c **** 			f = 1; c = *fmt++;
 12120              		.loc 1 4484 0
 12121 517a 0123     		movs	r3, #1
 12122 517c 87F88730 		strb	r3, [r7, #135]
 12123 5180 D7F89430 		ldr	r3, [r7, #148]
 12124 5184 5A1C     		adds	r2, r3, #1
 12125 5186 C7F89420 		str	r2, [r7, #148]
 12126 518a 1B78     		ldrb	r3, [r3]
 12127 518c 87F87330 		strb	r3, [r7, #115]
 12128 5190 0FE0     		b	.L694
 12129              	.L693:
4485:../tasks/SDMMC/ff.c **** 		} else {
4486:../tasks/SDMMC/ff.c **** 			if (c == '-') {			/* Flag: left justified */
 12130              		.loc 1 4486 0
 12131 5192 97F87330 		ldrb	r3, [r7, #115]	@ zero_extendqisi2
 12132 5196 2D2B     		cmp	r3, #45
 12133 5198 0BD1     		bne	.L694
4487:../tasks/SDMMC/ff.c **** 				f = 2; c = *fmt++;
 12134              		.loc 1 4487 0
 12135 519a 0223     		movs	r3, #2
 12136 519c 87F88730 		strb	r3, [r7, #135]
 12137 51a0 D7F89430 		ldr	r3, [r7, #148]
 12138 51a4 5A1C     		adds	r2, r3, #1
 12139 51a6 C7F89420 		str	r2, [r7, #148]
 12140 51aa 1B78     		ldrb	r3, [r3]
 12141 51ac 87F87330 		strb	r3, [r7, #115]
4488:../tasks/SDMMC/ff.c **** 			}
4489:../tasks/SDMMC/ff.c **** 		}
4490:../tasks/SDMMC/ff.c **** 		while (IsDigit(c)) {		/* Precision */
 12142              		.loc 1 4490 0
 12143 51b0 13E0     		b	.L695
 12144              	.L694:
 12145 51b2 12E0     		b	.L695
 12146              	.L697:
4491:../tasks/SDMMC/ff.c **** 			w = w * 10 + c - '0';
 12147              		.loc 1 4491 0
 12148 51b4 BA6F     		ldr	r2, [r7, #120]
 12149 51b6 1346     		mov	r3, r2
 12150 51b8 9B00     		lsls	r3, r3, #2
 12151 51ba 1344     		add	r3, r3, r2
 12152 51bc 5B00     		lsls	r3, r3, #1
 12153 51be 1A46     		mov	r2, r3
 12154 51c0 97F87330 		ldrb	r3, [r7, #115]	@ zero_extendqisi2
 12155 51c4 1344     		add	r3, r3, r2
 12156 51c6 303B     		subs	r3, r3, #48
 12157 51c8 BB67     		str	r3, [r7, #120]
4492:../tasks/SDMMC/ff.c **** 			c = *fmt++;
 12158              		.loc 1 4492 0
 12159 51ca D7F89430 		ldr	r3, [r7, #148]
 12160 51ce 5A1C     		adds	r2, r3, #1
 12161 51d0 C7F89420 		str	r2, [r7, #148]
 12162 51d4 1B78     		ldrb	r3, [r3]
 12163 51d6 87F87330 		strb	r3, [r7, #115]
 12164              	.L695:
4490:../tasks/SDMMC/ff.c **** 			w = w * 10 + c - '0';
 12165              		.loc 1 4490 0 discriminator 1
 12166 51da 97F87330 		ldrb	r3, [r7, #115]	@ zero_extendqisi2
 12167 51de 2F2B     		cmp	r3, #47
 12168 51e0 03D9     		bls	.L696
4490:../tasks/SDMMC/ff.c **** 			w = w * 10 + c - '0';
 12169              		.loc 1 4490 0 is_stmt 0 discriminator 2
 12170 51e2 97F87330 		ldrb	r3, [r7, #115]	@ zero_extendqisi2
 12171 51e6 392B     		cmp	r3, #57
 12172 51e8 E4D9     		bls	.L697
 12173              	.L696:
4493:../tasks/SDMMC/ff.c **** 		}
4494:../tasks/SDMMC/ff.c **** 		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 12174              		.loc 1 4494 0 is_stmt 1
 12175 51ea 97F87330 		ldrb	r3, [r7, #115]	@ zero_extendqisi2
 12176 51ee 6C2B     		cmp	r3, #108
 12177 51f0 03D0     		beq	.L698
 12178              		.loc 1 4494 0 is_stmt 0 discriminator 1
 12179 51f2 97F87330 		ldrb	r3, [r7, #115]	@ zero_extendqisi2
 12180 51f6 4C2B     		cmp	r3, #76
 12181 51f8 0DD1     		bne	.L699
 12182              	.L698:
4495:../tasks/SDMMC/ff.c **** 			f |= 4; c = *fmt++;
 12183              		.loc 1 4495 0 is_stmt 1
 12184 51fa 97F88730 		ldrb	r3, [r7, #135]
 12185 51fe 43F00403 		orr	r3, r3, #4
 12186 5202 87F88730 		strb	r3, [r7, #135]
 12187 5206 D7F89430 		ldr	r3, [r7, #148]
 12188 520a 5A1C     		adds	r2, r3, #1
 12189 520c C7F89420 		str	r2, [r7, #148]
 12190 5210 1B78     		ldrb	r3, [r3]
 12191 5212 87F87330 		strb	r3, [r7, #115]
 12192              	.L699:
4496:../tasks/SDMMC/ff.c **** 		}
4497:../tasks/SDMMC/ff.c **** 		if (!c) break;
 12193              		.loc 1 4497 0
 12194 5216 97F87330 		ldrb	r3, [r7, #115]	@ zero_extendqisi2
 12195 521a 002B     		cmp	r3, #0
 12196 521c 00D1     		bne	.L700
 12197              		.loc 1 4497 0 is_stmt 0 discriminator 1
 12198 521e 67E1     		b	.L690
 12199              	.L700:
4498:../tasks/SDMMC/ff.c **** 		d = c;
 12200              		.loc 1 4498 0 is_stmt 1
 12201 5220 97F87330 		ldrb	r3, [r7, #115]
 12202 5224 87F87230 		strb	r3, [r7, #114]
4499:../tasks/SDMMC/ff.c **** 		if (IsLower(d)) d -= 0x20;
 12203              		.loc 1 4499 0
 12204 5228 97F87230 		ldrb	r3, [r7, #114]	@ zero_extendqisi2
 12205 522c 602B     		cmp	r3, #96
 12206 522e 08D9     		bls	.L701
 12207              		.loc 1 4499 0 is_stmt 0 discriminator 1
 12208 5230 97F87230 		ldrb	r3, [r7, #114]	@ zero_extendqisi2
 12209 5234 7A2B     		cmp	r3, #122
 12210 5236 04D8     		bhi	.L701
 12211 5238 97F87230 		ldrb	r3, [r7, #114]
 12212 523c 203B     		subs	r3, r3, #32
 12213 523e 87F87230 		strb	r3, [r7, #114]
 12214              	.L701:
4500:../tasks/SDMMC/ff.c **** 		switch (d) {				/* Type is... */
 12215              		.loc 1 4500 0 is_stmt 1
 12216 5242 97F87230 		ldrb	r3, [r7, #114]	@ zero_extendqisi2
 12217 5246 423B     		subs	r3, r3, #66
 12218 5248 162B     		cmp	r3, #22
 12219 524a 00F28E80 		bhi	.L702
 12220 524e 01A1     		adr	r1, .L704
 12221 5250 51F823F0 		ldr	pc, [r1, r3, lsl #2]
 12222              		.p2align 2
 12223              	.L704:
 12224 5254 4B530000 		.word	.L703+1
 12225 5258 33530000 		.word	.L705+1
 12226 525c 5B530000 		.word	.L706+1
 12227 5260 6B530000 		.word	.L702+1
 12228 5264 6B530000 		.word	.L702+1
 12229 5268 6B530000 		.word	.L702+1
 12230 526c 6B530000 		.word	.L702+1
 12231 5270 6B530000 		.word	.L702+1
 12232 5274 6B530000 		.word	.L702+1
 12233 5278 6B530000 		.word	.L702+1
 12234 527c 6B530000 		.word	.L702+1
 12235 5280 6B530000 		.word	.L702+1
 12236 5284 6B530000 		.word	.L702+1
 12237 5288 53530000 		.word	.L707+1
 12238 528c 6B530000 		.word	.L702+1
 12239 5290 6B530000 		.word	.L702+1
 12240 5294 6B530000 		.word	.L702+1
 12241 5298 B1520000 		.word	.L708+1
 12242 529c 6B530000 		.word	.L702+1
 12243 52a0 5B530000 		.word	.L706+1
 12244 52a4 6B530000 		.word	.L702+1
 12245 52a8 6B530000 		.word	.L702+1
 12246 52ac 63530000 		.word	.L709+1
 12247              	.L708:
4501:../tasks/SDMMC/ff.c **** 		case 'S' :					/* String */
4502:../tasks/SDMMC/ff.c **** 			p = va_arg(arp, TCHAR*);
 12248              		.loc 1 4502 0
 12249 52b0 BB6E     		ldr	r3, [r7, #104]
 12250 52b2 1A1D     		adds	r2, r3, #4
 12251 52b4 BA66     		str	r2, [r7, #104]
 12252 52b6 1B68     		ldr	r3, [r3]
 12253 52b8 FB66     		str	r3, [r7, #108]
4503:../tasks/SDMMC/ff.c **** 			for (j = 0; p[j]; j++) ;
 12254              		.loc 1 4503 0
 12255 52ba 0023     		movs	r3, #0
 12256 52bc FB67     		str	r3, [r7, #124]
 12257 52be 02E0     		b	.L710
 12258              	.L711:
 12259              		.loc 1 4503 0 is_stmt 0 discriminator 2
 12260 52c0 FB6F     		ldr	r3, [r7, #124]
 12261 52c2 0133     		adds	r3, r3, #1
 12262 52c4 FB67     		str	r3, [r7, #124]
 12263              	.L710:
 12264              		.loc 1 4503 0 discriminator 1
 12265 52c6 FA6E     		ldr	r2, [r7, #108]
 12266 52c8 FB6F     		ldr	r3, [r7, #124]
 12267 52ca 1344     		add	r3, r3, r2
 12268 52cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 12269 52ce 002B     		cmp	r3, #0
 12270 52d0 F6D1     		bne	.L711
4504:../tasks/SDMMC/ff.c **** 			if (!(f & 2)) {
 12271              		.loc 1 4504 0 is_stmt 1
 12272 52d2 97F88730 		ldrb	r3, [r7, #135]	@ zero_extendqisi2
 12273 52d6 03F00203 		and	r3, r3, #2
 12274 52da 002B     		cmp	r3, #0
 12275 52dc 0CD1     		bne	.L712
4505:../tasks/SDMMC/ff.c **** 				while (j++ < w) putc_bfd(&pb, ' ');
 12276              		.loc 1 4505 0
 12277 52de 05E0     		b	.L713
 12278              	.L714:
 12279              		.loc 1 4505 0 is_stmt 0 discriminator 2
 12280 52e0 07F10803 		add	r3, r7, #8
 12281 52e4 1846     		mov	r0, r3
 12282 52e6 2021     		movs	r1, #32
 12283 52e8 FFF768FE 		bl	putc_bfd
 12284              	.L713:
 12285              		.loc 1 4505 0 discriminator 1
 12286 52ec FB6F     		ldr	r3, [r7, #124]
 12287 52ee 5A1C     		adds	r2, r3, #1
 12288 52f0 FA67     		str	r2, [r7, #124]
 12289 52f2 BA6F     		ldr	r2, [r7, #120]
 12290 52f4 9342     		cmp	r3, r2
 12291 52f6 F3D3     		bcc	.L714
 12292              	.L712:
4506:../tasks/SDMMC/ff.c **** 			}
4507:../tasks/SDMMC/ff.c **** 			while (*p) putc_bfd(&pb, *p++);
 12293              		.loc 1 4507 0 is_stmt 1
 12294 52f8 09E0     		b	.L715
 12295              	.L716:
 12296              		.loc 1 4507 0 is_stmt 0 discriminator 2
 12297 52fa FB6E     		ldr	r3, [r7, #108]
 12298 52fc 5A1C     		adds	r2, r3, #1
 12299 52fe FA66     		str	r2, [r7, #108]
 12300 5300 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 12301 5302 07F10802 		add	r2, r7, #8
 12302 5306 1046     		mov	r0, r2
 12303 5308 1946     		mov	r1, r3
 12304 530a FFF757FE 		bl	putc_bfd
 12305              	.L715:
 12306              		.loc 1 4507 0 discriminator 1
 12307 530e FB6E     		ldr	r3, [r7, #108]
 12308 5310 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 12309 5312 002B     		cmp	r3, #0
 12310 5314 F1D1     		bne	.L716
4508:../tasks/SDMMC/ff.c **** 			while (j++ < w) putc_bfd(&pb, ' ');
 12311              		.loc 1 4508 0 is_stmt 1
 12312 5316 05E0     		b	.L717
 12313              	.L718:
 12314              		.loc 1 4508 0 is_stmt 0 discriminator 2
 12315 5318 07F10803 		add	r3, r7, #8
 12316 531c 1846     		mov	r0, r3
 12317 531e 2021     		movs	r1, #32
 12318 5320 FFF74CFE 		bl	putc_bfd
 12319              	.L717:
 12320              		.loc 1 4508 0 discriminator 1
 12321 5324 FB6F     		ldr	r3, [r7, #124]
 12322 5326 5A1C     		adds	r2, r3, #1
 12323 5328 FA67     		str	r2, [r7, #124]
 12324 532a BA6F     		ldr	r2, [r7, #120]
 12325 532c 9342     		cmp	r3, r2
 12326 532e F3D3     		bcc	.L718
4509:../tasks/SDMMC/ff.c **** 			continue;
 12327              		.loc 1 4509 0 is_stmt 1
 12328 5330 DDE0     		b	.L692
 12329              	.L705:
4510:../tasks/SDMMC/ff.c **** 		case 'C' :					/* Character */
4511:../tasks/SDMMC/ff.c **** 			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 12330              		.loc 1 4511 0
 12331 5332 BB6E     		ldr	r3, [r7, #104]
 12332 5334 1A1D     		adds	r2, r3, #4
 12333 5336 BA66     		str	r2, [r7, #104]
 12334 5338 1B68     		ldr	r3, [r3]
 12335 533a DBB2     		uxtb	r3, r3
 12336 533c 07F10802 		add	r2, r7, #8
 12337 5340 1046     		mov	r0, r2
 12338 5342 1946     		mov	r1, r3
 12339 5344 FFF73AFE 		bl	putc_bfd
 12340 5348 D1E0     		b	.L692
 12341              	.L703:
4512:../tasks/SDMMC/ff.c **** 		case 'B' :					/* Binary */
4513:../tasks/SDMMC/ff.c **** 			r = 2; break;
 12342              		.loc 1 4513 0
 12343 534a 0223     		movs	r3, #2
 12344 534c 87F88630 		strb	r3, [r7, #134]
 12345 5350 14E0     		b	.L719
 12346              	.L707:
4514:../tasks/SDMMC/ff.c **** 		case 'O' :					/* Octal */
4515:../tasks/SDMMC/ff.c **** 			r = 8; break;
 12347              		.loc 1 4515 0
 12348 5352 0823     		movs	r3, #8
 12349 5354 87F88630 		strb	r3, [r7, #134]
 12350 5358 10E0     		b	.L719
 12351              	.L706:
4516:../tasks/SDMMC/ff.c **** 		case 'D' :					/* Signed decimal */
4517:../tasks/SDMMC/ff.c **** 		case 'U' :					/* Unsigned decimal */
4518:../tasks/SDMMC/ff.c **** 			r = 10; break;
 12352              		.loc 1 4518 0
 12353 535a 0A23     		movs	r3, #10
 12354 535c 87F88630 		strb	r3, [r7, #134]
 12355 5360 0CE0     		b	.L719
 12356              	.L709:
4519:../tasks/SDMMC/ff.c **** 		case 'X' :					/* Hexdecimal */
4520:../tasks/SDMMC/ff.c **** 			r = 16; break;
 12357              		.loc 1 4520 0
 12358 5362 1023     		movs	r3, #16
 12359 5364 87F88630 		strb	r3, [r7, #134]
 12360 5368 08E0     		b	.L719
 12361              	.L702:
4521:../tasks/SDMMC/ff.c **** 		default:					/* Unknown type (pass-through) */
4522:../tasks/SDMMC/ff.c **** 			putc_bfd(&pb, c); continue;
 12362              		.loc 1 4522 0
 12363 536a 07F10802 		add	r2, r7, #8
 12364 536e 97F87330 		ldrb	r3, [r7, #115]	@ zero_extendqisi2
 12365 5372 1046     		mov	r0, r2
 12366 5374 1946     		mov	r1, r3
 12367 5376 FFF721FE 		bl	putc_bfd
 12368 537a B8E0     		b	.L692
 12369              	.L719:
4523:../tasks/SDMMC/ff.c **** 		}
4524:../tasks/SDMMC/ff.c **** 
4525:../tasks/SDMMC/ff.c **** 		/* Get an argument and put it in numeral */
4526:../tasks/SDMMC/ff.c **** 		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_
 12370              		.loc 1 4526 0
 12371 537c 97F88730 		ldrb	r3, [r7, #135]	@ zero_extendqisi2
 12372 5380 03F00403 		and	r3, r3, #4
 12373 5384 002B     		cmp	r3, #0
 12374 5386 04D0     		beq	.L720
 12375              		.loc 1 4526 0 is_stmt 0 discriminator 1
 12376 5388 BB6E     		ldr	r3, [r7, #104]
 12377 538a 1A1D     		adds	r2, r3, #4
 12378 538c BA66     		str	r2, [r7, #104]
 12379 538e 1B68     		ldr	r3, [r3]
 12380 5390 0CE0     		b	.L721
 12381              	.L720:
 12382              		.loc 1 4526 0 discriminator 2
 12383 5392 97F87230 		ldrb	r3, [r7, #114]	@ zero_extendqisi2
 12384 5396 442B     		cmp	r3, #68
 12385 5398 04D1     		bne	.L722
 12386              		.loc 1 4526 0 discriminator 1
 12387 539a BB6E     		ldr	r3, [r7, #104]
 12388 539c 1A1D     		adds	r2, r3, #4
 12389 539e BA66     		str	r2, [r7, #104]
 12390 53a0 1B68     		ldr	r3, [r3]
 12391 53a2 03E0     		b	.L721
 12392              	.L722:
 12393              		.loc 1 4526 0 discriminator 2
 12394 53a4 BB6E     		ldr	r3, [r7, #104]
 12395 53a6 1A1D     		adds	r2, r3, #4
 12396 53a8 BA66     		str	r2, [r7, #104]
 12397 53aa 1B68     		ldr	r3, [r3]
 12398              	.L721:
 12399              		.loc 1 4526 0 discriminator 3
 12400 53ac 7B67     		str	r3, [r7, #116]
4527:../tasks/SDMMC/ff.c **** 		if (d == 'D' && (v & 0x80000000)) {
 12401              		.loc 1 4527 0 is_stmt 1 discriminator 3
 12402 53ae 97F87230 		ldrb	r3, [r7, #114]	@ zero_extendqisi2
 12403 53b2 442B     		cmp	r3, #68
 12404 53b4 0BD1     		bne	.L724
 12405              		.loc 1 4527 0 is_stmt 0 discriminator 1
 12406 53b6 7B6F     		ldr	r3, [r7, #116]
 12407 53b8 002B     		cmp	r3, #0
 12408 53ba 08DA     		bge	.L724
4528:../tasks/SDMMC/ff.c **** 			v = 0 - v;
 12409              		.loc 1 4528 0 is_stmt 1
 12410 53bc 7B6F     		ldr	r3, [r7, #116]
 12411 53be 5B42     		negs	r3, r3
 12412 53c0 7B67     		str	r3, [r7, #116]
4529:../tasks/SDMMC/ff.c **** 			f |= 8;
 12413              		.loc 1 4529 0
 12414 53c2 97F88730 		ldrb	r3, [r7, #135]
 12415 53c6 43F00803 		orr	r3, r3, #8
 12416 53ca 87F88730 		strb	r3, [r7, #135]
 12417              	.L724:
4530:../tasks/SDMMC/ff.c **** 		}
4531:../tasks/SDMMC/ff.c **** 		i = 0;
 12418              		.loc 1 4531 0
 12419 53ce 0023     		movs	r3, #0
 12420 53d0 C7F88030 		str	r3, [r7, #128]
 12421              	.L729:
4532:../tasks/SDMMC/ff.c **** 		do {
4533:../tasks/SDMMC/ff.c **** 			d = (TCHAR)(v % r); v /= r;
 12422              		.loc 1 4533 0
 12423 53d4 97F88620 		ldrb	r2, [r7, #134]	@ zero_extendqisi2
 12424 53d8 7B6F     		ldr	r3, [r7, #116]
 12425 53da B3FBF2F1 		udiv	r1, r3, r2
 12426 53de 02FB01F2 		mul	r2, r2, r1
 12427 53e2 9B1A     		subs	r3, r3, r2
 12428 53e4 87F87230 		strb	r3, [r7, #114]
 12429 53e8 97F88630 		ldrb	r3, [r7, #134]	@ zero_extendqisi2
 12430 53ec 7A6F     		ldr	r2, [r7, #116]
 12431 53ee B2FBF3F3 		udiv	r3, r2, r3
 12432 53f2 7B67     		str	r3, [r7, #116]
4534:../tasks/SDMMC/ff.c **** 			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 12433              		.loc 1 4534 0
 12434 53f4 97F87230 		ldrb	r3, [r7, #114]	@ zero_extendqisi2
 12435 53f8 092B     		cmp	r3, #9
 12436 53fa 0BD9     		bls	.L725
 12437              		.loc 1 4534 0 is_stmt 0 discriminator 1
 12438 53fc 97F87330 		ldrb	r3, [r7, #115]	@ zero_extendqisi2
 12439 5400 782B     		cmp	r3, #120
 12440 5402 01D1     		bne	.L726
 12441 5404 2723     		movs	r3, #39
 12442 5406 00E0     		b	.L727
 12443              	.L726:
 12444              		.loc 1 4534 0 discriminator 2
 12445 5408 0723     		movs	r3, #7
 12446              	.L727:
 12447              		.loc 1 4534 0 discriminator 3
 12448 540a 97F87220 		ldrb	r2, [r7, #114]
 12449 540e 1344     		add	r3, r3, r2
 12450 5410 87F87230 		strb	r3, [r7, #114]
 12451              	.L725:
4535:../tasks/SDMMC/ff.c **** 			s[i++] = d + '0';
 12452              		.loc 1 4535 0 is_stmt 1
 12453 5414 D7F88030 		ldr	r3, [r7, #128]
 12454 5418 5A1C     		adds	r2, r3, #1
 12455 541a C7F88020 		str	r2, [r7, #128]
 12456 541e 97F87220 		ldrb	r2, [r7, #114]
 12457 5422 3032     		adds	r2, r2, #48
 12458 5424 D2B2     		uxtb	r2, r2
 12459 5426 07F18801 		add	r1, r7, #136
 12460 542a 0B44     		add	r3, r3, r1
 12461 542c 03F8342C 		strb	r2, [r3, #-52]
4536:../tasks/SDMMC/ff.c **** 		} while (v && i < sizeof s / sizeof s[0]);
 12462              		.loc 1 4536 0
 12463 5430 7B6F     		ldr	r3, [r7, #116]
 12464 5432 002B     		cmp	r3, #0
 12465 5434 03D0     		beq	.L728
 12466              		.loc 1 4536 0 is_stmt 0 discriminator 1
 12467 5436 D7F88030 		ldr	r3, [r7, #128]
 12468 543a 0F2B     		cmp	r3, #15
 12469 543c CAD9     		bls	.L729
 12470              	.L728:
4537:../tasks/SDMMC/ff.c **** 		if (f & 8) s[i++] = '-';
 12471              		.loc 1 4537 0 is_stmt 1
 12472 543e 97F88730 		ldrb	r3, [r7, #135]	@ zero_extendqisi2
 12473 5442 03F00803 		and	r3, r3, #8
 12474 5446 002B     		cmp	r3, #0
 12475 5448 0AD0     		beq	.L730
 12476              		.loc 1 4537 0 is_stmt 0 discriminator 1
 12477 544a D7F88030 		ldr	r3, [r7, #128]
 12478 544e 5A1C     		adds	r2, r3, #1
 12479 5450 C7F88020 		str	r2, [r7, #128]
 12480 5454 07F18802 		add	r2, r7, #136
 12481 5458 1344     		add	r3, r3, r2
 12482 545a 2D22     		movs	r2, #45
 12483 545c 03F8342C 		strb	r2, [r3, #-52]
 12484              	.L730:
4538:../tasks/SDMMC/ff.c **** 		j = i; d = (f & 1) ? '0' : ' ';
 12485              		.loc 1 4538 0 is_stmt 1
 12486 5460 D7F88030 		ldr	r3, [r7, #128]
 12487 5464 FB67     		str	r3, [r7, #124]
 12488 5466 97F88730 		ldrb	r3, [r7, #135]	@ zero_extendqisi2
 12489 546a 03F00103 		and	r3, r3, #1
 12490 546e 002B     		cmp	r3, #0
 12491 5470 01D0     		beq	.L731
 12492              		.loc 1 4538 0 is_stmt 0 discriminator 1
 12493 5472 3023     		movs	r3, #48
 12494 5474 00E0     		b	.L732
 12495              	.L731:
 12496              		.loc 1 4538 0 discriminator 2
 12497 5476 2023     		movs	r3, #32
 12498              	.L732:
 12499              		.loc 1 4538 0 discriminator 3
 12500 5478 87F87230 		strb	r3, [r7, #114]
4539:../tasks/SDMMC/ff.c **** 		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 12501              		.loc 1 4539 0 is_stmt 1 discriminator 3
 12502 547c 07E0     		b	.L733
 12503              	.L735:
 12504              		.loc 1 4539 0 is_stmt 0 discriminator 1
 12505 547e 07F10802 		add	r2, r7, #8
 12506 5482 97F87230 		ldrb	r3, [r7, #114]	@ zero_extendqisi2
 12507 5486 1046     		mov	r0, r2
 12508 5488 1946     		mov	r1, r3
 12509 548a FFF797FD 		bl	putc_bfd
 12510              	.L733:
 12511 548e 97F88730 		ldrb	r3, [r7, #135]	@ zero_extendqisi2
 12512 5492 03F00203 		and	r3, r3, #2
 12513 5496 002B     		cmp	r3, #0
 12514 5498 05D1     		bne	.L734
 12515              		.loc 1 4539 0 discriminator 2
 12516 549a FB6F     		ldr	r3, [r7, #124]
 12517 549c 5A1C     		adds	r2, r3, #1
 12518 549e FA67     		str	r2, [r7, #124]
 12519 54a0 BA6F     		ldr	r2, [r7, #120]
 12520 54a2 9342     		cmp	r3, r2
 12521 54a4 EBD3     		bcc	.L735
 12522              	.L734:
4540:../tasks/SDMMC/ff.c **** 		do putc_bfd(&pb, s[--i]); while (i);
 12523              		.loc 1 4540 0 is_stmt 1 discriminator 1
 12524 54a6 D7F88030 		ldr	r3, [r7, #128]
 12525 54aa 013B     		subs	r3, r3, #1
 12526 54ac C7F88030 		str	r3, [r7, #128]
 12527 54b0 07F15402 		add	r2, r7, #84
 12528 54b4 D7F88030 		ldr	r3, [r7, #128]
 12529 54b8 1344     		add	r3, r3, r2
 12530 54ba 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 12531 54bc 07F10802 		add	r2, r7, #8
 12532 54c0 1046     		mov	r0, r2
 12533 54c2 1946     		mov	r1, r3
 12534 54c4 FFF77AFD 		bl	putc_bfd
 12535 54c8 D7F88030 		ldr	r3, [r7, #128]
 12536 54cc 002B     		cmp	r3, #0
 12537 54ce EAD1     		bne	.L734
4541:../tasks/SDMMC/ff.c **** 		while (j++ < w) putc_bfd(&pb, d);
 12538              		.loc 1 4541 0
 12539 54d0 07E0     		b	.L736
 12540              	.L737:
 12541              		.loc 1 4541 0 is_stmt 0 discriminator 2
 12542 54d2 07F10802 		add	r2, r7, #8
 12543 54d6 97F87230 		ldrb	r3, [r7, #114]	@ zero_extendqisi2
 12544 54da 1046     		mov	r0, r2
 12545 54dc 1946     		mov	r1, r3
 12546 54de FFF76DFD 		bl	putc_bfd
 12547              	.L736:
 12548              		.loc 1 4541 0 discriminator 1
 12549 54e2 FB6F     		ldr	r3, [r7, #124]
 12550 54e4 5A1C     		adds	r2, r3, #1
 12551 54e6 FA67     		str	r2, [r7, #124]
 12552 54e8 BA6F     		ldr	r2, [r7, #120]
 12553 54ea 9342     		cmp	r3, r2
 12554 54ec F1D3     		bcc	.L737
 12555              	.L692:
4542:../tasks/SDMMC/ff.c **** 	}
 12556              		.loc 1 4542 0 is_stmt 1
 12557 54ee 19E6     		b	.L738
 12558              	.L690:
4543:../tasks/SDMMC/ff.c **** 
4544:../tasks/SDMMC/ff.c **** 	va_end(arp);
4545:../tasks/SDMMC/ff.c **** 
4546:../tasks/SDMMC/ff.c **** 	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 12559              		.loc 1 4546 0
 12560 54f0 FB68     		ldr	r3, [r7, #12]
 12561 54f2 002B     		cmp	r3, #0
 12562 54f4 14DB     		blt	.L739
4547:../tasks/SDMMC/ff.c **** 		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 12563              		.loc 1 4547 0
 12564 54f6 B868     		ldr	r0, [r7, #8]
 12565 54f8 FB68     		ldr	r3, [r7, #12]
 12566 54fa 1A46     		mov	r2, r3
 12567 54fc 07F10803 		add	r3, r7, #8
 12568 5500 03F10C01 		add	r1, r3, #12
 12569 5504 07F16403 		add	r3, r7, #100
 12570 5508 FFF7FEFF 		bl	f_write
 12571 550c 0346     		mov	r3, r0
 12572 550e 002B     		cmp	r3, #0
 12573 5510 06D1     		bne	.L739
4548:../tasks/SDMMC/ff.c **** 		&& (UINT)pb.idx == nw) return pb.nchr;
 12574              		.loc 1 4548 0
 12575 5512 FB68     		ldr	r3, [r7, #12]
 12576 5514 1A46     		mov	r2, r3
 12577 5516 7B6E     		ldr	r3, [r7, #100]
 12578 5518 9A42     		cmp	r2, r3
 12579 551a 01D1     		bne	.L739
 12580              		.loc 1 4548 0 is_stmt 0 discriminator 1
 12581 551c 3B69     		ldr	r3, [r7, #16]
 12582 551e 01E0     		b	.L741
 12583              	.L739:
4549:../tasks/SDMMC/ff.c **** 	return EOF;
 12584              		.loc 1 4549 0 is_stmt 1
 12585 5520 4FF0FF33 		mov	r3, #-1
 12586              	.L741:
4550:../tasks/SDMMC/ff.c **** }
 12587              		.loc 1 4550 0
 12588 5524 1846     		mov	r0, r3
 12589 5526 8C37     		adds	r7, r7, #140
 12590 5528 BD46     		mov	sp, r7
 12591              		@ sp needed
 12592 552a BDE88040 		pop	{r7, lr}
 12593 552e 03B0     		add	sp, sp, #12
 12594 5530 7047     		bx	lr
 12595              		.cfi_endproc
 12596              	.LFE116:
 12598              		.section	.rodata
 12599              		.align	2
 12602              	vst.10219:
 12603 010c 0004     		.short	1024
 12604 010e 0002     		.short	512
 12605 0110 0001     		.short	256
 12606 0112 8000     		.short	128
 12607 0114 4000     		.short	64
 12608 0116 2000     		.short	32
 12609 0118 1000     		.short	16
 12610 011a 0800     		.short	8
 12611 011c 0400     		.short	4
 12612 011e 0200     		.short	2
 12613 0120 0000     		.short	0
 12614 0122 0000     		.align	2
 12617              	cst.10220:
 12618 0124 0080     		.short	-32768
 12619 0126 0040     		.short	16384
 12620 0128 0020     		.short	8192
 12621 012a 0010     		.short	4096
 12622 012c 0008     		.short	2048
 12623 012e 0040     		.short	16384
 12624 0130 0020     		.short	8192
 12625 0132 0010     		.short	4096
 12626 0134 0008     		.short	2048
 12627 0136 0004     		.short	1024
 12628 0138 0002     		.short	512
 12629 013a 0000     		.text
 12630              	.Letext0:
 12631              		.file 2 "../tasks/SDMMC/integer.h"
 12632              		.file 3 "c:\\program files (x86)\\codesourcery\\arm-none-eabi\\include\\stdint.h"
 12633              		.file 4 "c:\\program files (x86)\\codesourcery\\lib\\gcc\\arm-none-eabi\\4.8.3\\include\\stdarg.h"
 12634              		.file 5 "../tasks/SDMMC/ff.h"
 12635              		.file 6 "../tasks/SDMMC/diskio.h"
 12636              		.file 7 "<built-in>"
 12637              		.file 8 "D:\\workspace\\console800480\\system/core_cm3.h"
DEFINED SYMBOLS
                            *ABS*:00000000 ff.c
C:\Users\sagok\AppData\Local\Temp\cchc5lCt.s:19     .bss:00000000 $d
C:\Users\sagok\AppData\Local\Temp\cchc5lCt.s:20     .bss:00000000 FatFs
C:\Users\sagok\AppData\Local\Temp\cchc5lCt.s:23     .bss:0000000c Fsid
C:\Users\sagok\AppData\Local\Temp\cchc5lCt.s:25     .bss:0000000e CurrVol
C:\Users\sagok\AppData\Local\Temp\cchc5lCt.s:28     .bss:00000010 Files
C:\Users\sagok\AppData\Local\Temp\cchc5lCt.s:31     .rodata:00000000 $d
C:\Users\sagok\AppData\Local\Temp\cchc5lCt.s:34     .rodata:00000000 ExCvt
C:\Users\sagok\AppData\Local\Temp\cchc5lCt.s:164    .text:00000000 $t
C:\Users\sagok\AppData\Local\Temp\cchc5lCt.s:168    .text:00000000 mem_cpy
C:\Users\sagok\AppData\Local\Temp\cchc5lCt.s:224    .text:0000003c mem_set
C:\Users\sagok\AppData\Local\Temp\cchc5lCt.s:274    .text:00000070 mem_cmp
C:\Users\sagok\AppData\Local\Temp\cchc5lCt.s:340    .text:000000c0 chk_chr
C:\Users\sagok\AppData\Local\Temp\cchc5lCt.s:393    .text:000000f8 chk_lock
C:\Users\sagok\AppData\Local\Temp\cchc5lCt.s:549    .text:000001ec enq_lock
C:\Users\sagok\AppData\Local\Temp\cchc5lCt.s:610    .text:00000238 inc_lock
C:\Users\sagok\AppData\Local\Temp\cchc5lCt.s:852    .text:000003e4 dec_lock
C:\Users\sagok\AppData\Local\Temp\cchc5lCt.s:956    .text:0000047c clear_lock
C:\Users\sagok\AppData\Local\Temp\cchc5lCt.s:1023   .text:000004d4 sync_window
C:\Users\sagok\AppData\Local\Temp\cchc5lCt.s:1123   .text:00000568 move_window
C:\Users\sagok\AppData\Local\Temp\cchc5lCt.s:1192   .text:000005c0 sync_fs
C:\Users\sagok\AppData\Local\Temp\cchc5lCt.s:1369   .text:00000720 clust2sect
C:\Users\sagok\AppData\Local\Temp\cchc5lCt.s:1424   .text:00000764 get_fat
C:\Users\sagok\AppData\Local\Temp\cchc5lCt.s:1632   .text:000008b8 put_fat
C:\Users\sagok\AppData\Local\Temp\cchc5lCt.s:1939   .text:00000ab8 remove_chain
C:\Users\sagok\AppData\Local\Temp\cchc5lCt.s:2066   .text:00000b68 create_chain
C:\Users\sagok\AppData\Local\Temp\cchc5lCt.s:2278   .text:00000c9c clmt_clust
C:\Users\sagok\AppData\Local\Temp\cchc5lCt.s:2361   .text:00000d08 dir_sdi
C:\Users\sagok\AppData\Local\Temp\cchc5lCt.s:2543   .text:00000e38 dir_next
C:\Users\sagok\AppData\Local\Temp\cchc5lCt.s:2816   .text:00001024 dir_alloc
C:\Users\sagok\AppData\Local\Temp\cchc5lCt.s:2928   .text:000010b8 ld_clust
C:\Users\sagok\AppData\Local\Temp\cchc5lCt.s:2995   .text:00001110 st_clust
C:\Users\sagok\AppData\Local\Temp\cchc5lCt.s:3054   .text:0000115c dir_find
C:\Users\sagok\AppData\Local\Temp\cchc5lCt.s:3164   .text:000011f8 dir_read
C:\Users\sagok\AppData\Local\Temp\cchc5lCt.s:3290   .text:000012a8 dir_register
C:\Users\sagok\AppData\Local\Temp\cchc5lCt.s:3366   .text:0000131c dir_remove
C:\Users\sagok\AppData\Local\Temp\cchc5lCt.s:3431   .rodata:00000080 .LC0
C:\Users\sagok\AppData\Local\Temp\cchc5lCt.s:3438   .text:0000137c create_name
C:\Users\sagok\AppData\Local\Temp\cchc5lCt.s:3780   .text:00001574 get_fileinfo
C:\Users\sagok\AppData\Local\Temp\cchc5lCt.s:3934   .text:00001650 get_ldnumber
C:\Users\sagok\AppData\Local\Temp\cchc5lCt.s:4014   .text:000016b8 follow_path
C:\Users\sagok\AppData\Local\Temp\cchc5lCt.s:4198   .text:000017d0 check_fs
C:\Users\sagok\AppData\Local\Temp\cchc5lCt.s:4314   .text:000018a0 find_volume
C:\Users\sagok\AppData\Local\Temp\cchc5lCt.s:5087   .text:00001e4c validate
C:\Users\sagok\AppData\Local\Temp\cchc5lCt.s:5162   .text:00001eb8 f_mount
C:\Users\sagok\AppData\Local\Temp\cchc5lCt.s:5268   .text:00001f54 f_open
C:\Users\sagok\AppData\Local\Temp\cchc5lCt.s:5739   .text:0000236c f_read
C:\Users\sagok\AppData\Local\Temp\cchc5lCt.s:6144   .text:00002654 f_write
C:\Users\sagok\AppData\Local\Temp\cchc5lCt.s:6604   .text:000029b0 f_sync
C:\Users\sagok\AppData\Local\Temp\cchc5lCt.s:6805   .text:00002b2c f_close
C:\Users\sagok\AppData\Local\Temp\cchc5lCt.s:6870   .text:00002b7c f_chdrive
C:\Users\sagok\AppData\Local\Temp\cchc5lCt.s:6921   .text:00002bb0 f_chdir
C:\Users\sagok\AppData\Local\Temp\cchc5lCt.s:7032   .text:00002c88 f_lseek
C:\Users\sagok\AppData\Local\Temp\cchc5lCt.s:7696   .text:00003154 f_opendir
C:\Users\sagok\AppData\Local\Temp\cchc5lCt.s:7861   .text:0000325c f_closedir
C:\Users\sagok\AppData\Local\Temp\cchc5lCt.s:7923   .text:000032a8 f_readdir
C:\Users\sagok\AppData\Local\Temp\cchc5lCt.s:8024   .text:00003334 f_stat
C:\Users\sagok\AppData\Local\Temp\cchc5lCt.s:8111   .text:000033c8 f_getfree
C:\Users\sagok\AppData\Local\Temp\cchc5lCt.s:8364   .text:00003560 f_truncate
C:\Users\sagok\AppData\Local\Temp\cchc5lCt.s:8579   .text:000036e4 f_unlink
C:\Users\sagok\AppData\Local\Temp\cchc5lCt.s:8813   .text:000038d4 f_mkdir
C:\Users\sagok\AppData\Local\Temp\cchc5lCt.s:9174   .text:00003c10 f_chmod
C:\Users\sagok\AppData\Local\Temp\cchc5lCt.s:9310   .text:00003d18 f_utime
C:\Users\sagok\AppData\Local\Temp\cchc5lCt.s:9451   .text:00003e2c f_rename
C:\Users\sagok\AppData\Local\Temp\cchc5lCt.s:9747   .text:000040d0 f_getlabel
C:\Users\sagok\AppData\Local\Temp\cchc5lCt.s:9946   .rodata:00000090 .LC1
C:\Users\sagok\AppData\Local\Temp\cchc5lCt.s:9954   .text:00004274 f_setlabel
C:\Users\sagok\AppData\Local\Temp\cchc5lCt.s:10347  .rodata:000000a0 .LC2
C:\Users\sagok\AppData\Local\Temp\cchc5lCt.s:10351  .rodata:000000d8 .LC3
C:\Users\sagok\AppData\Local\Temp\cchc5lCt.s:10354  .rodata:000000e4 .LC4
C:\Users\sagok\AppData\Local\Temp\cchc5lCt.s:10357  .rodata:000000f8 .LC5
C:\Users\sagok\AppData\Local\Temp\cchc5lCt.s:10365  .text:000045d4 f_mkfs
C:\Users\sagok\AppData\Local\Temp\cchc5lCt.s:12602  .rodata:0000010c vst.10219
C:\Users\sagok\AppData\Local\Temp\cchc5lCt.s:12617  .rodata:00000124 cst.10220
C:\Users\sagok\AppData\Local\Temp\cchc5lCt.s:11695  .text:00004f44 f_gets
C:\Users\sagok\AppData\Local\Temp\cchc5lCt.s:11797  .text:00004fbc putc_bfd
C:\Users\sagok\AppData\Local\Temp\cchc5lCt.s:11890  .text:00005034 f_putc
C:\Users\sagok\AppData\Local\Temp\cchc5lCt.s:11963  .text:00005098 f_puts
C:\Users\sagok\AppData\Local\Temp\cchc5lCt.s:12047  .text:00005108 f_printf
C:\Users\sagok\AppData\Local\Temp\cchc5lCt.s:12224  .text:00005254 $d
C:\Users\sagok\AppData\Local\Temp\cchc5lCt.s:12249  .text:000052b0 $t
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.7f551ac7fcad8b79b9df4bfdaa536673
                           .group:00000000 wm4.stm32f2xx_hal_conf.h.40.007126baefb9f966c36646edbf8040d2
                           .group:00000000 wm4.stm32f2xx.h.57.5ec1581efc43612c411d33a8686e9ec7
                           .group:00000000 wm4.stm32f217xx.h.52.9c940d76d00294b78837dc334c172fdd
                           .group:00000000 wm4.core_cm3.h.32.49180ccb4d36cabd2d7016d2a51d91ae
                           .group:00000000 wm4.newlib.h.8.384a112feabb3bef7b573ae48cde2e3b
                           .group:00000000 wm4.features.h.22.6a4ca7cd053637cc1d0db6c16f39b2d7
                           .group:00000000 wm4.config.h.183.aa62afef667fb61d15fa64c48beb2f14
                           .group:00000000 wm4._ansi.h.23.5644b60c990a4800b02a6e654e88f93a
                           .group:00000000 wm4.stdint.h.20.54ad762faa59e3c05491630641c8d8bf
                           .group:00000000 wm4.core_cmInstr.h.25.f50f886f2edf670cf199b35fd96f5c91
                           .group:00000000 wm4.core_cm3.h.130.63ab2348a6eed0fdb318040d970b676c
                           .group:00000000 wm4.stm32f217xx.h.978.a5c681952b2f704a0e7f2ba21d08adf5
                           .group:00000000 wm4.stm32f2xx.h.142.bc2155a1f7498bab16371e38413a9e41
                           .group:00000000 wm4.stm32f2xx_hal_def.h.74.8ad2dc8aa82c4fd02e5aeaae592641ba
                           .group:00000000 wm4.stm32f2xx_hal_rcc.h.142.ec0f91cc6576a6acebd17e6dd85829ae
                           .group:00000000 wm4.stm32f2xx_hal_rcc_ex.h.40.0829033e864455c6bdd0db01f8ba5a50
                           .group:00000000 wm4.stm32f2xx_hal_gpio.h.40.ba64e0bb94d9a68835f80159f39a86f1
                           .group:00000000 wm4.stm32f2xx_hal_gpio_ex.h.40.24e547fd402281923f446b510381083f
                           .group:00000000 wm4.stm32f2xx_hal_dma.h.40.5d9732ace2a21a4526ce8f0c52428fff
                           .group:00000000 wm4.stm32f2xx_hal_cortex.h.40.e10263d2ec5d4fa79b4180ce1a38aff1
                           .group:00000000 wm4.stm32f2xx_hal_adc.h.40.89ac8b78113cac4cf63847587daabac9
                           .group:00000000 wm4.stm32f2xx_hal_adc_ex.h.40.7de68ed256ef25526ee31cc017f2c291
                           .group:00000000 wm4.stm32f2xx_hal_flash.h.40.c3171719ce015e9cff20c795e44e886d
                           .group:00000000 wm4.stm32f2xx_hal_flash_ex.h.40.7389508bd24a0aeb077bde0c9fb651eb
                           .group:00000000 wm4.stm32f2xx_ll_fsmc.h.40.c1c32f2e1862f4dd342bd9b80fb895bb
                           .group:00000000 wm4.stm32f2xx_hal_pwr.h.40.812df32e5c31b609a128e9db0eb4cbd0
                           .group:00000000 wm4.stm32f2xx_hal_rtc.h.40.850fda5fe2cce8797446913dee18382f
                           .group:00000000 wm4.stm32f2xx_hal_rtc_ex.h.40.f3e0c408e3bf4e8a0352d7ec9a18a822
                           .group:00000000 wm4.stm32f2xx_ll_sdmmc.h.40.3719ab487c4b77401c572f459adf6eb7
                           .group:00000000 wm4.stm32f2xx_hal_sd.h.58.760215394dcc316161a6482c0af9b866
                           .group:00000000 wm4.stm32f2xx_hal_spi.h.40.7984243dbaba8b21c6392998a47e6987
                           .group:00000000 wm4.stm32f2xx_hal_tim.h.40.d79172f25d0e9a15dc346aba8515bdd6
                           .group:00000000 wm4.stm32f2xx_hal_tim_ex.h.40.361f280a7a3f60b4b238bb99ca728d83
                           .group:00000000 wm4.stm32f2xx_hal_uart.h.40.d74def561ae6f78f40f477c8426ecbef
                           .group:00000000 wm4.stm32f2xx_ll_usb.h.40.9b0206a05bc6ce3bec1648b51f22cb81
                           .group:00000000 wm4.stm32f2xx_hal_pcd.h.99.11faba414c39e357b2f23364912d0605
                           .group:00000000 wm4.stm32f2xx_hal_hcd.h.40.44ee5e972983ae0139ddbacdc75c44ef
                           .group:00000000 wm4.stm32f2xx_hal.h.64.ed79ee83e52b151b3c365392b398f866
                           .group:00000000 wm4.stdio.h.31.7c0e28c411445f3f9c5b11accf882760
                           .group:00000000 wm4.stddef.h.184.159df79b4ca79c76561572a55985524c
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4._default_types.h.6.5e12cd604db8ce00b62bb2f02708eaf3
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4._types.h.59.db8450f33c1f6150c0372fa1091a887a
                           .group:00000000 wm4.stddef.h.348.9a99de77b6ba3b4278b57e9cc6d6e349
                           .group:00000000 wm4.reent.h.16.567d760e6ae9ad7f917851a308bd7a57
                           .group:00000000 wm4.types.h.23.0d949686bbcadd1621462d4fa1f884f9
                           .group:00000000 wm4.stddef.h.39.7e3d906ac58942e0b374c527445f5de5
                           .group:00000000 wm4.types.h.2.e9cec8c90ab35f77d9f499e06ae02400
                           .group:00000000 wm4.types.h.80.5759fe41f87f5211a5952dfb1fc64f19
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.64.f9f1bb6b0d3d7e12f6a27968d859709c
                           .group:00000000 wm4.stdlib.h.18.8bab2fb43ac4e90235390733c30a4530
                           .group:00000000 wm4.stddef.h.158.a7efb00f6cbc6f43213b50e183c9830c
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.55.7091a050e07f1c4abd225630fe3d62f1
                           .group:00000000 wm4.cdefs.h.56.efab90f4d89fbc41d6b3a5c5fb0d3d0f
                           .group:00000000 wm4.string.h.15.dab3980bf35408a4c507182805e2de3a
                           .group:00000000 wm4.string.h.126.6ff3aa59129e7f66b2c273baf353e066
                           .group:00000000 wm4.LEDs.h.9.36ffa4b30bd168dc58d64fa6e53a9a30
                           .group:00000000 wm4.usbh_conf.h.41.d72a4a1e5e10d8f062cf3fa4bcd8aa54
                           .group:00000000 wm4.usbh_def.h.42.e5773f0fe2e07d0c2c7284f319cefcfb
                           .group:00000000 wm4.usbh_ioreq.h.53.3586266a62e1adb6014256f47bfe28ae
                           .group:00000000 wm4.usbh_ctlreq.h.30.baf76fe1032fc0ccc3b759e321acc69d
                           .group:00000000 wm4.usbh_core.h.60.126ed10f424484efe8e3332cf8789488
                           .group:00000000 wm4.usbh_msc_bot.h.150.7a573dd4700e98f78a08f0e60cd8a2e8
                           .group:00000000 wm4.usbh_msc_scsi.h.30.7ac65aef8ad2b1cb473eb44388537ea2
                           .group:00000000 wm4.usbh_msc.h.92.1eaed72009e45245618cff3cc0ab5900
                           .group:00000000 wm4.ffconf.h.19.cf478c53f215b23144e0b163e0b92c6c
                           .group:00000000 wm4.ff.h.45.ea85cd9763a25d97ae88799c83ef7c63
                           .group:00000000 wm4.diskio.h.6.151a9ddfcc41121be91a93057ab6f2f8
                           .group:00000000 wm4.stdarg.h.31.48e922dd0aaedfb616aafd8a7b7a4949

UNDEFINED SYMBOLS
disk_write
disk_read
disk_ioctl
disk_status
disk_initialize
get_fattime
puts
