   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"croutine.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.bss
  19              		.align	2
  20              	pxReadyCoRoutineLists:
  21 0000 00000000 		.space	40
  21      00000000 
  21      00000000 
  21      00000000 
  21      00000000 
  22              		.align	2
  23              	xDelayedCoRoutineList1:
  24 0028 00000000 		.space	20
  24      00000000 
  24      00000000 
  24      00000000 
  24      00000000 
  25              		.align	2
  26              	xDelayedCoRoutineList2:
  27 003c 00000000 		.space	20
  27      00000000 
  27      00000000 
  27      00000000 
  27      00000000 
  28              		.align	2
  29              	pxDelayedCoRoutineList:
  30 0050 00000000 		.space	4
  31              		.align	2
  32              	pxOverflowDelayedCoRoutineList:
  33 0054 00000000 		.space	4
  34              		.align	2
  35              	xPendingReadyCoRoutineList:
  36 0058 00000000 		.space	20
  36      00000000 
  36      00000000 
  36      00000000 
  36      00000000 
  37              		.global	pxCurrentCoRoutine
  38              		.align	2
  41              	pxCurrentCoRoutine:
  42 006c 00000000 		.space	4
  43              		.align	2
  44              	uxTopCoRoutineReadyPriority:
  45 0070 00000000 		.space	4
  46              		.align	2
  47              	xCoRoutineTickCount:
  48 0074 00000000 		.space	4
  49              		.align	2
  50              	xLastTickCount:
  51 0078 00000000 		.space	4
  52              		.align	2
  53              	xPassedTicks:
  54 007c 00000000 		.space	4
  55              		.text
  56              		.align	2
  57              		.global	xCoRoutineCreate
  58              		.thumb
  59              		.thumb_func
  61              	xCoRoutineCreate:
  62              	.LFB0:
  63              		.file 1 "../FreeRTOS/croutine.c"
   1:../FreeRTOS/croutine.c **** /*
   2:../FreeRTOS/croutine.c ****     FreeRTOS V8.0.1 - Copyright (C) 2014 Real Time Engineers Ltd.
   3:../FreeRTOS/croutine.c ****     All rights reserved
   4:../FreeRTOS/croutine.c **** 
   5:../FreeRTOS/croutine.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:../FreeRTOS/croutine.c **** 
   7:../FreeRTOS/croutine.c ****     ***************************************************************************
   8:../FreeRTOS/croutine.c ****      *                                                                       *
   9:../FreeRTOS/croutine.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  10:../FreeRTOS/croutine.c ****      *    robust, strictly quality controlled, supported, and cross          *
  11:../FreeRTOS/croutine.c ****      *    platform software that has become a de facto standard.             *
  12:../FreeRTOS/croutine.c ****      *                                                                       *
  13:../FreeRTOS/croutine.c ****      *    Help yourself get started quickly and support the FreeRTOS         *
  14:../FreeRTOS/croutine.c ****      *    project by purchasing a FreeRTOS tutorial book, reference          *
  15:../FreeRTOS/croutine.c ****      *    manual, or both from: http://www.FreeRTOS.org/Documentation        *
  16:../FreeRTOS/croutine.c ****      *                                                                       *
  17:../FreeRTOS/croutine.c ****      *    Thank you!                                                         *
  18:../FreeRTOS/croutine.c ****      *                                                                       *
  19:../FreeRTOS/croutine.c ****     ***************************************************************************
  20:../FreeRTOS/croutine.c **** 
  21:../FreeRTOS/croutine.c ****     This file is part of the FreeRTOS distribution.
  22:../FreeRTOS/croutine.c **** 
  23:../FreeRTOS/croutine.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  24:../FreeRTOS/croutine.c ****     the terms of the GNU General Public License (version 2) as published by the
  25:../FreeRTOS/croutine.c ****     Free Software Foundation >>!AND MODIFIED BY!<< the FreeRTOS exception.
  26:../FreeRTOS/croutine.c **** 
  27:../FreeRTOS/croutine.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  28:../FreeRTOS/croutine.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  29:../FreeRTOS/croutine.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  30:../FreeRTOS/croutine.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  31:../FreeRTOS/croutine.c **** 
  32:../FreeRTOS/croutine.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  33:../FreeRTOS/croutine.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  34:../FreeRTOS/croutine.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available from the following
  35:../FreeRTOS/croutine.c ****     link: http://www.freertos.org/a00114.html
  36:../FreeRTOS/croutine.c **** 
  37:../FreeRTOS/croutine.c ****     1 tab == 4 spaces!
  38:../FreeRTOS/croutine.c **** 
  39:../FreeRTOS/croutine.c ****     ***************************************************************************
  40:../FreeRTOS/croutine.c ****      *                                                                       *
  41:../FreeRTOS/croutine.c ****      *    Having a problem?  Start by reading the FAQ "My application does   *
  42:../FreeRTOS/croutine.c ****      *    not run, what could be wrong?"                                     *
  43:../FreeRTOS/croutine.c ****      *                                                                       *
  44:../FreeRTOS/croutine.c ****      *    http://www.FreeRTOS.org/FAQHelp.html                               *
  45:../FreeRTOS/croutine.c ****      *                                                                       *
  46:../FreeRTOS/croutine.c ****     ***************************************************************************
  47:../FreeRTOS/croutine.c **** 
  48:../FreeRTOS/croutine.c ****     http://www.FreeRTOS.org - Documentation, books, training, latest versions,
  49:../FreeRTOS/croutine.c ****     license and Real Time Engineers Ltd. contact details.
  50:../FreeRTOS/croutine.c **** 
  51:../FreeRTOS/croutine.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  52:../FreeRTOS/croutine.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  53:../FreeRTOS/croutine.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  54:../FreeRTOS/croutine.c **** 
  55:../FreeRTOS/croutine.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd license FreeRTOS to High
  56:../FreeRTOS/croutine.c ****     Integrity Systems to sell under the OpenRTOS brand.  Low cost OpenRTOS
  57:../FreeRTOS/croutine.c ****     licenses offer ticketed support, indemnification and middleware.
  58:../FreeRTOS/croutine.c **** 
  59:../FreeRTOS/croutine.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  60:../FreeRTOS/croutine.c ****     engineered and independently SIL3 certified version for use in safety and
  61:../FreeRTOS/croutine.c ****     mission critical applications that require provable dependability.
  62:../FreeRTOS/croutine.c **** 
  63:../FreeRTOS/croutine.c ****     1 tab == 4 spaces!
  64:../FreeRTOS/croutine.c **** */
  65:../FreeRTOS/croutine.c **** 
  66:../FreeRTOS/croutine.c **** #include "FreeRTOS.h"
  67:../FreeRTOS/croutine.c **** #include "task.h"
  68:../FreeRTOS/croutine.c **** #include "croutine.h"
  69:../FreeRTOS/croutine.c **** 
  70:../FreeRTOS/croutine.c **** /*
  71:../FreeRTOS/croutine.c ****  * Some kernel aware debuggers require data to be viewed to be global, rather
  72:../FreeRTOS/croutine.c ****  * than file scope.
  73:../FreeRTOS/croutine.c ****  */
  74:../FreeRTOS/croutine.c **** #ifdef portREMOVE_STATIC_QUALIFIER
  75:../FreeRTOS/croutine.c **** 	#define static
  76:../FreeRTOS/croutine.c **** #endif
  77:../FreeRTOS/croutine.c **** 
  78:../FreeRTOS/croutine.c **** 
  79:../FreeRTOS/croutine.c **** /* Lists for ready and blocked co-routines. --------------------*/
  80:../FreeRTOS/croutine.c **** static List_t pxReadyCoRoutineLists[ configMAX_CO_ROUTINE_PRIORITIES ];	/*< Prioritised ready co-ro
  81:../FreeRTOS/croutine.c **** static List_t xDelayedCoRoutineList1;									/*< Delayed co-routines. */
  82:../FreeRTOS/croutine.c **** static List_t xDelayedCoRoutineList2;									/*< Delayed co-routines (two lists are used - one for
  83:../FreeRTOS/croutine.c **** static List_t * pxDelayedCoRoutineList;									/*< Points to the delayed co-routine list currently
  84:../FreeRTOS/croutine.c **** static List_t * pxOverflowDelayedCoRoutineList;							/*< Points to the delayed co-routine list cur
  85:../FreeRTOS/croutine.c **** static List_t xPendingReadyCoRoutineList;								/*< Holds co-routines that have been readied by an
  86:../FreeRTOS/croutine.c **** 
  87:../FreeRTOS/croutine.c **** /* Other file private variables. --------------------------------*/
  88:../FreeRTOS/croutine.c **** CRCB_t * pxCurrentCoRoutine = NULL;
  89:../FreeRTOS/croutine.c **** static UBaseType_t uxTopCoRoutineReadyPriority = 0;
  90:../FreeRTOS/croutine.c **** static TickType_t xCoRoutineTickCount = 0, xLastTickCount = 0, xPassedTicks = 0;
  91:../FreeRTOS/croutine.c **** 
  92:../FreeRTOS/croutine.c **** /* The initial state of the co-routine when it is created. */
  93:../FreeRTOS/croutine.c **** #define corINITIAL_STATE	( 0 )
  94:../FreeRTOS/croutine.c **** 
  95:../FreeRTOS/croutine.c **** /*
  96:../FreeRTOS/croutine.c ****  * Place the co-routine represented by pxCRCB into the appropriate ready queue
  97:../FreeRTOS/croutine.c ****  * for the priority.  It is inserted at the end of the list.
  98:../FreeRTOS/croutine.c ****  *
  99:../FreeRTOS/croutine.c ****  * This macro accesses the co-routine ready lists and therefore must not be
 100:../FreeRTOS/croutine.c ****  * used from within an ISR.
 101:../FreeRTOS/croutine.c ****  */
 102:../FreeRTOS/croutine.c **** #define prvAddCoRoutineToReadyQueue( pxCRCB )																		\
 103:../FreeRTOS/croutine.c **** {																													\
 104:../FreeRTOS/croutine.c **** 	if( pxCRCB->uxPriority > uxTopCoRoutineReadyPriority )															\
 105:../FreeRTOS/croutine.c **** 	{																												\
 106:../FreeRTOS/croutine.c **** 		uxTopCoRoutineReadyPriority = pxCRCB->uxPriority;															\
 107:../FreeRTOS/croutine.c **** 	}																												\
 108:../FreeRTOS/croutine.c **** 	vListInsertEnd( ( List_t * ) &( pxReadyCoRoutineLists[ pxCRCB->uxPriority ] ), &( pxCRCB->xGeneric
 109:../FreeRTOS/croutine.c **** }
 110:../FreeRTOS/croutine.c **** 
 111:../FreeRTOS/croutine.c **** /*
 112:../FreeRTOS/croutine.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 113:../FreeRTOS/croutine.c ****  * automatically upon the creation of the first co-routine.
 114:../FreeRTOS/croutine.c ****  */
 115:../FreeRTOS/croutine.c **** static void prvInitialiseCoRoutineLists( void );
 116:../FreeRTOS/croutine.c **** 
 117:../FreeRTOS/croutine.c **** /*
 118:../FreeRTOS/croutine.c ****  * Co-routines that are readied by an interrupt cannot be placed directly into
 119:../FreeRTOS/croutine.c ****  * the ready lists (there is no mutual exclusion).  Instead they are placed in
 120:../FreeRTOS/croutine.c ****  * in the pending ready list in order that they can later be moved to the ready
 121:../FreeRTOS/croutine.c ****  * list by the co-routine scheduler.
 122:../FreeRTOS/croutine.c ****  */
 123:../FreeRTOS/croutine.c **** static void prvCheckPendingReadyList( void );
 124:../FreeRTOS/croutine.c **** 
 125:../FreeRTOS/croutine.c **** /*
 126:../FreeRTOS/croutine.c ****  * Macro that looks at the list of co-routines that are currently delayed to
 127:../FreeRTOS/croutine.c ****  * see if any require waking.
 128:../FreeRTOS/croutine.c ****  *
 129:../FreeRTOS/croutine.c ****  * Co-routines are stored in the queue in the order of their wake time -
 130:../FreeRTOS/croutine.c ****  * meaning once one co-routine has been found whose timer has not expired
 131:../FreeRTOS/croutine.c ****  * we need not look any further down the list.
 132:../FreeRTOS/croutine.c ****  */
 133:../FreeRTOS/croutine.c **** static void prvCheckDelayedList( void );
 134:../FreeRTOS/croutine.c **** 
 135:../FreeRTOS/croutine.c **** /*-----------------------------------------------------------*/
 136:../FreeRTOS/croutine.c **** 
 137:../FreeRTOS/croutine.c **** BaseType_t xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, UBaseType_t uxPriority, UBaseType_t 
 138:../FreeRTOS/croutine.c **** {
  64              		.loc 1 138 0
  65              		.cfi_startproc
  66              		@ args = 0, pretend = 0, frame = 24
  67              		@ frame_needed = 1, uses_anonymous_args = 0
  68 0000 80B5     		push	{r7, lr}
  69              		.cfi_def_cfa_offset 8
  70              		.cfi_offset 7, -8
  71              		.cfi_offset 14, -4
  72 0002 86B0     		sub	sp, sp, #24
  73              		.cfi_def_cfa_offset 32
  74 0004 00AF     		add	r7, sp, #0
  75              		.cfi_def_cfa_register 7
  76 0006 F860     		str	r0, [r7, #12]
  77 0008 B960     		str	r1, [r7, #8]
  78 000a 7A60     		str	r2, [r7, #4]
 139:../FreeRTOS/croutine.c **** BaseType_t xReturn;
 140:../FreeRTOS/croutine.c **** CRCB_t *pxCoRoutine;
 141:../FreeRTOS/croutine.c **** 
 142:../FreeRTOS/croutine.c **** 	/* Allocate the memory that will store the co-routine control block. */
 143:../FreeRTOS/croutine.c **** 	pxCoRoutine = ( CRCB_t * ) pvPortMalloc( sizeof( CRCB_t ) );
  79              		.loc 1 143 0
  80 000c 3820     		movs	r0, #56
  81 000e FFF7FEFF 		bl	pvPortMalloc
  82 0012 3861     		str	r0, [r7, #16]
 144:../FreeRTOS/croutine.c **** 	if( pxCoRoutine )
  83              		.loc 1 144 0
  84 0014 3B69     		ldr	r3, [r7, #16]
  85 0016 002B     		cmp	r3, #0
  86 0018 58D0     		beq	.L2
 145:../FreeRTOS/croutine.c **** 	{
 146:../FreeRTOS/croutine.c **** 		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
 147:../FreeRTOS/croutine.c **** 		be created and the co-routine data structures need initialising. */
 148:../FreeRTOS/croutine.c **** 		if( pxCurrentCoRoutine == NULL )
  87              		.loc 1 148 0
  88 001a 40F20003 		movw	r3, #:lower16:pxCurrentCoRoutine
  89 001e C0F20003 		movt	r3, #:upper16:pxCurrentCoRoutine
  90 0022 1B68     		ldr	r3, [r3]
  91 0024 002B     		cmp	r3, #0
  92 0026 07D1     		bne	.L3
 149:../FreeRTOS/croutine.c **** 		{
 150:../FreeRTOS/croutine.c **** 			pxCurrentCoRoutine = pxCoRoutine;
  93              		.loc 1 150 0
  94 0028 40F20003 		movw	r3, #:lower16:pxCurrentCoRoutine
  95 002c C0F20003 		movt	r3, #:upper16:pxCurrentCoRoutine
  96 0030 3A69     		ldr	r2, [r7, #16]
  97 0032 1A60     		str	r2, [r3]
 151:../FreeRTOS/croutine.c **** 			prvInitialiseCoRoutineLists();
  98              		.loc 1 151 0
  99 0034 00F002FA 		bl	prvInitialiseCoRoutineLists
 100              	.L3:
 152:../FreeRTOS/croutine.c **** 		}
 153:../FreeRTOS/croutine.c **** 
 154:../FreeRTOS/croutine.c **** 		/* Check the priority is within limits. */
 155:../FreeRTOS/croutine.c **** 		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
 101              		.loc 1 155 0
 102 0038 BB68     		ldr	r3, [r7, #8]
 103 003a 012B     		cmp	r3, #1
 104 003c 01D9     		bls	.L4
 156:../FreeRTOS/croutine.c **** 		{
 157:../FreeRTOS/croutine.c **** 			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
 105              		.loc 1 157 0
 106 003e 0123     		movs	r3, #1
 107 0040 BB60     		str	r3, [r7, #8]
 108              	.L4:
 158:../FreeRTOS/croutine.c **** 		}
 159:../FreeRTOS/croutine.c **** 
 160:../FreeRTOS/croutine.c **** 		/* Fill out the co-routine control block from the function parameters. */
 161:../FreeRTOS/croutine.c **** 		pxCoRoutine->uxState = corINITIAL_STATE;
 109              		.loc 1 161 0
 110 0042 3B69     		ldr	r3, [r7, #16]
 111 0044 0022     		movs	r2, #0
 112 0046 9A86     		strh	r2, [r3, #52]	@ movhi
 162:../FreeRTOS/croutine.c **** 		pxCoRoutine->uxPriority = uxPriority;
 113              		.loc 1 162 0
 114 0048 3B69     		ldr	r3, [r7, #16]
 115 004a BA68     		ldr	r2, [r7, #8]
 116 004c DA62     		str	r2, [r3, #44]
 163:../FreeRTOS/croutine.c **** 		pxCoRoutine->uxIndex = uxIndex;
 117              		.loc 1 163 0
 118 004e 3B69     		ldr	r3, [r7, #16]
 119 0050 7A68     		ldr	r2, [r7, #4]
 120 0052 1A63     		str	r2, [r3, #48]
 164:../FreeRTOS/croutine.c **** 		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
 121              		.loc 1 164 0
 122 0054 3B69     		ldr	r3, [r7, #16]
 123 0056 FA68     		ldr	r2, [r7, #12]
 124 0058 1A60     		str	r2, [r3]
 165:../FreeRTOS/croutine.c **** 
 166:../FreeRTOS/croutine.c **** 		/* Initialise all the other co-routine control block parameters. */
 167:../FreeRTOS/croutine.c **** 		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
 125              		.loc 1 167 0
 126 005a 3B69     		ldr	r3, [r7, #16]
 127 005c 0433     		adds	r3, r3, #4
 128 005e 1846     		mov	r0, r3
 129 0060 FFF7FEFF 		bl	vListInitialiseItem
 168:../FreeRTOS/croutine.c **** 		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
 130              		.loc 1 168 0
 131 0064 3B69     		ldr	r3, [r7, #16]
 132 0066 1833     		adds	r3, r3, #24
 133 0068 1846     		mov	r0, r3
 134 006a FFF7FEFF 		bl	vListInitialiseItem
 169:../FreeRTOS/croutine.c **** 
 170:../FreeRTOS/croutine.c **** 		/* Set the co-routine control block as a link back from the ListItem_t.
 171:../FreeRTOS/croutine.c **** 		This is so we can get back to the containing CRCB from a generic item
 172:../FreeRTOS/croutine.c **** 		in a list. */
 173:../FreeRTOS/croutine.c **** 		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
 135              		.loc 1 173 0
 136 006e 3B69     		ldr	r3, [r7, #16]
 137 0070 3A69     		ldr	r2, [r7, #16]
 138 0072 1A61     		str	r2, [r3, #16]
 174:../FreeRTOS/croutine.c **** 		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
 139              		.loc 1 174 0
 140 0074 3B69     		ldr	r3, [r7, #16]
 141 0076 3A69     		ldr	r2, [r7, #16]
 142 0078 5A62     		str	r2, [r3, #36]
 175:../FreeRTOS/croutine.c **** 
 176:../FreeRTOS/croutine.c **** 		/* Event lists are always in priority order. */
 177:../FreeRTOS/croutine.c **** 		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), ( ( TickType_t ) configMAX_CO_ROUTINE_
 143              		.loc 1 177 0
 144 007a BB68     		ldr	r3, [r7, #8]
 145 007c C3F10202 		rsb	r2, r3, #2
 146 0080 3B69     		ldr	r3, [r7, #16]
 147 0082 9A61     		str	r2, [r3, #24]
 178:../FreeRTOS/croutine.c **** 
 179:../FreeRTOS/croutine.c **** 		/* Now the co-routine has been initialised it can be added to the ready
 180:../FreeRTOS/croutine.c **** 		list at the correct priority. */
 181:../FreeRTOS/croutine.c **** 		prvAddCoRoutineToReadyQueue( pxCoRoutine );
 148              		.loc 1 181 0
 149 0084 3B69     		ldr	r3, [r7, #16]
 150 0086 DA6A     		ldr	r2, [r3, #44]
 151 0088 40F20003 		movw	r3, #:lower16:uxTopCoRoutineReadyPriority
 152 008c C0F20003 		movt	r3, #:upper16:uxTopCoRoutineReadyPriority
 153 0090 1B68     		ldr	r3, [r3]
 154 0092 9A42     		cmp	r2, r3
 155 0094 06D9     		bls	.L5
 156              		.loc 1 181 0 is_stmt 0 discriminator 1
 157 0096 3B69     		ldr	r3, [r7, #16]
 158 0098 DA6A     		ldr	r2, [r3, #44]
 159 009a 40F20003 		movw	r3, #:lower16:uxTopCoRoutineReadyPriority
 160 009e C0F20003 		movt	r3, #:upper16:uxTopCoRoutineReadyPriority
 161 00a2 1A60     		str	r2, [r3]
 162              	.L5:
 163              		.loc 1 181 0 discriminator 2
 164 00a4 3B69     		ldr	r3, [r7, #16]
 165 00a6 DA6A     		ldr	r2, [r3, #44]
 166 00a8 1346     		mov	r3, r2
 167 00aa 9B00     		lsls	r3, r3, #2
 168 00ac 1344     		add	r3, r3, r2
 169 00ae 9B00     		lsls	r3, r3, #2
 170 00b0 40F20002 		movw	r2, #:lower16:pxReadyCoRoutineLists
 171 00b4 C0F20002 		movt	r2, #:upper16:pxReadyCoRoutineLists
 172 00b8 1A44     		add	r2, r2, r3
 173 00ba 3B69     		ldr	r3, [r7, #16]
 174 00bc 0433     		adds	r3, r3, #4
 175 00be 1046     		mov	r0, r2
 176 00c0 1946     		mov	r1, r3
 177 00c2 FFF7FEFF 		bl	vListInsertEnd
 182:../FreeRTOS/croutine.c **** 
 183:../FreeRTOS/croutine.c **** 		xReturn = pdPASS;
 178              		.loc 1 183 0 is_stmt 1 discriminator 2
 179 00c6 0123     		movs	r3, #1
 180 00c8 7B61     		str	r3, [r7, #20]
 181 00ca 02E0     		b	.L6
 182              	.L2:
 184:../FreeRTOS/croutine.c **** 	}
 185:../FreeRTOS/croutine.c **** 	else
 186:../FreeRTOS/croutine.c **** 	{
 187:../FreeRTOS/croutine.c **** 		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 183              		.loc 1 187 0
 184 00cc 4FF0FF33 		mov	r3, #-1
 185 00d0 7B61     		str	r3, [r7, #20]
 186              	.L6:
 188:../FreeRTOS/croutine.c **** 	}
 189:../FreeRTOS/croutine.c **** 
 190:../FreeRTOS/croutine.c **** 	return xReturn;
 187              		.loc 1 190 0
 188 00d2 7B69     		ldr	r3, [r7, #20]
 191:../FreeRTOS/croutine.c **** }
 189              		.loc 1 191 0
 190 00d4 1846     		mov	r0, r3
 191 00d6 1837     		adds	r7, r7, #24
 192 00d8 BD46     		mov	sp, r7
 193              		@ sp needed
 194 00da 80BD     		pop	{r7, pc}
 195              		.cfi_endproc
 196              	.LFE0:
 198              		.align	2
 199              		.global	vCoRoutineAddToDelayedList
 200              		.thumb
 201              		.thumb_func
 203              	vCoRoutineAddToDelayedList:
 204              	.LFB1:
 192:../FreeRTOS/croutine.c **** /*-----------------------------------------------------------*/
 193:../FreeRTOS/croutine.c **** 
 194:../FreeRTOS/croutine.c **** void vCoRoutineAddToDelayedList( TickType_t xTicksToDelay, List_t *pxEventList )
 195:../FreeRTOS/croutine.c **** {
 205              		.loc 1 195 0
 206              		.cfi_startproc
 207              		@ args = 0, pretend = 0, frame = 16
 208              		@ frame_needed = 1, uses_anonymous_args = 0
 209 00dc 80B5     		push	{r7, lr}
 210              		.cfi_def_cfa_offset 8
 211              		.cfi_offset 7, -8
 212              		.cfi_offset 14, -4
 213 00de 84B0     		sub	sp, sp, #16
 214              		.cfi_def_cfa_offset 24
 215 00e0 00AF     		add	r7, sp, #0
 216              		.cfi_def_cfa_register 7
 217 00e2 7860     		str	r0, [r7, #4]
 218 00e4 3960     		str	r1, [r7]
 196:../FreeRTOS/croutine.c **** TickType_t xTimeToWake;
 197:../FreeRTOS/croutine.c **** 
 198:../FreeRTOS/croutine.c **** 	/* Calculate the time to wake - this may overflow but this is
 199:../FreeRTOS/croutine.c **** 	not a problem. */
 200:../FreeRTOS/croutine.c **** 	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
 219              		.loc 1 200 0
 220 00e6 40F20003 		movw	r3, #:lower16:xCoRoutineTickCount
 221 00ea C0F20003 		movt	r3, #:upper16:xCoRoutineTickCount
 222 00ee 1A68     		ldr	r2, [r3]
 223 00f0 7B68     		ldr	r3, [r7, #4]
 224 00f2 1344     		add	r3, r3, r2
 225 00f4 FB60     		str	r3, [r7, #12]
 201:../FreeRTOS/croutine.c **** 
 202:../FreeRTOS/croutine.c **** 	/* We must remove ourselves from the ready list before adding
 203:../FreeRTOS/croutine.c **** 	ourselves to the blocked list as the same list item is used for
 204:../FreeRTOS/croutine.c **** 	both lists. */
 205:../FreeRTOS/croutine.c **** 	( void ) uxListRemove( ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
 226              		.loc 1 205 0
 227 00f6 40F20003 		movw	r3, #:lower16:pxCurrentCoRoutine
 228 00fa C0F20003 		movt	r3, #:upper16:pxCurrentCoRoutine
 229 00fe 1B68     		ldr	r3, [r3]
 230 0100 0433     		adds	r3, r3, #4
 231 0102 1846     		mov	r0, r3
 232 0104 FFF7FEFF 		bl	uxListRemove
 206:../FreeRTOS/croutine.c **** 
 207:../FreeRTOS/croutine.c **** 	/* The list item will be inserted in wake time order. */
 208:../FreeRTOS/croutine.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
 233              		.loc 1 208 0
 234 0108 40F20003 		movw	r3, #:lower16:pxCurrentCoRoutine
 235 010c C0F20003 		movt	r3, #:upper16:pxCurrentCoRoutine
 236 0110 1B68     		ldr	r3, [r3]
 237 0112 FA68     		ldr	r2, [r7, #12]
 238 0114 5A60     		str	r2, [r3, #4]
 209:../FreeRTOS/croutine.c **** 
 210:../FreeRTOS/croutine.c **** 	if( xTimeToWake < xCoRoutineTickCount )
 239              		.loc 1 210 0
 240 0116 40F20003 		movw	r3, #:lower16:xCoRoutineTickCount
 241 011a C0F20003 		movt	r3, #:upper16:xCoRoutineTickCount
 242 011e 1B68     		ldr	r3, [r3]
 243 0120 FA68     		ldr	r2, [r7, #12]
 244 0122 9A42     		cmp	r2, r3
 245 0124 0FD2     		bcs	.L9
 211:../FreeRTOS/croutine.c **** 	{
 212:../FreeRTOS/croutine.c **** 		/* Wake time has overflowed.  Place this item in the
 213:../FreeRTOS/croutine.c **** 		overflow list. */
 214:../FreeRTOS/croutine.c **** 		vListInsert( ( List_t * ) pxOverflowDelayedCoRoutineList, ( ListItem_t * ) &( pxCurrentCoRoutine-
 246              		.loc 1 214 0
 247 0126 40F20003 		movw	r3, #:lower16:pxOverflowDelayedCoRoutineList
 248 012a C0F20003 		movt	r3, #:upper16:pxOverflowDelayedCoRoutineList
 249 012e 1A68     		ldr	r2, [r3]
 250 0130 40F20003 		movw	r3, #:lower16:pxCurrentCoRoutine
 251 0134 C0F20003 		movt	r3, #:upper16:pxCurrentCoRoutine
 252 0138 1B68     		ldr	r3, [r3]
 253 013a 0433     		adds	r3, r3, #4
 254 013c 1046     		mov	r0, r2
 255 013e 1946     		mov	r1, r3
 256 0140 FFF7FEFF 		bl	vListInsert
 257 0144 0EE0     		b	.L10
 258              	.L9:
 215:../FreeRTOS/croutine.c **** 	}
 216:../FreeRTOS/croutine.c **** 	else
 217:../FreeRTOS/croutine.c **** 	{
 218:../FreeRTOS/croutine.c **** 		/* The wake time has not overflowed, so we can use the
 219:../FreeRTOS/croutine.c **** 		current block list. */
 220:../FreeRTOS/croutine.c **** 		vListInsert( ( List_t * ) pxDelayedCoRoutineList, ( ListItem_t * ) &( pxCurrentCoRoutine->xGeneri
 259              		.loc 1 220 0
 260 0146 40F20003 		movw	r3, #:lower16:pxDelayedCoRoutineList
 261 014a C0F20003 		movt	r3, #:upper16:pxDelayedCoRoutineList
 262 014e 1A68     		ldr	r2, [r3]
 263 0150 40F20003 		movw	r3, #:lower16:pxCurrentCoRoutine
 264 0154 C0F20003 		movt	r3, #:upper16:pxCurrentCoRoutine
 265 0158 1B68     		ldr	r3, [r3]
 266 015a 0433     		adds	r3, r3, #4
 267 015c 1046     		mov	r0, r2
 268 015e 1946     		mov	r1, r3
 269 0160 FFF7FEFF 		bl	vListInsert
 270              	.L10:
 221:../FreeRTOS/croutine.c **** 	}
 222:../FreeRTOS/croutine.c **** 
 223:../FreeRTOS/croutine.c **** 	if( pxEventList )
 271              		.loc 1 223 0
 272 0164 3B68     		ldr	r3, [r7]
 273 0166 002B     		cmp	r3, #0
 274 0168 09D0     		beq	.L8
 224:../FreeRTOS/croutine.c **** 	{
 225:../FreeRTOS/croutine.c **** 		/* Also add the co-routine to an event list.  If this is done then the
 226:../FreeRTOS/croutine.c **** 		function must be called with interrupts disabled. */
 227:../FreeRTOS/croutine.c **** 		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
 275              		.loc 1 227 0
 276 016a 40F20003 		movw	r3, #:lower16:pxCurrentCoRoutine
 277 016e C0F20003 		movt	r3, #:upper16:pxCurrentCoRoutine
 278 0172 1B68     		ldr	r3, [r3]
 279 0174 1833     		adds	r3, r3, #24
 280 0176 3868     		ldr	r0, [r7]
 281 0178 1946     		mov	r1, r3
 282 017a FFF7FEFF 		bl	vListInsert
 283              	.L8:
 228:../FreeRTOS/croutine.c **** 	}
 229:../FreeRTOS/croutine.c **** }
 284              		.loc 1 229 0
 285 017e 1037     		adds	r7, r7, #16
 286 0180 BD46     		mov	sp, r7
 287              		@ sp needed
 288 0182 80BD     		pop	{r7, pc}
 289              		.cfi_endproc
 290              	.LFE1:
 292              		.align	2
 293              		.thumb
 294              		.thumb_func
 296              	prvCheckPendingReadyList:
 297              	.LFB2:
 230:../FreeRTOS/croutine.c **** /*-----------------------------------------------------------*/
 231:../FreeRTOS/croutine.c **** 
 232:../FreeRTOS/croutine.c **** static void prvCheckPendingReadyList( void )
 233:../FreeRTOS/croutine.c **** {
 298              		.loc 1 233 0
 299              		.cfi_startproc
 300              		@ args = 0, pretend = 0, frame = 8
 301              		@ frame_needed = 1, uses_anonymous_args = 0
 302 0184 80B5     		push	{r7, lr}
 303              		.cfi_def_cfa_offset 8
 304              		.cfi_offset 7, -8
 305              		.cfi_offset 14, -4
 306 0186 82B0     		sub	sp, sp, #8
 307              		.cfi_def_cfa_offset 16
 308 0188 00AF     		add	r7, sp, #0
 309              		.cfi_def_cfa_register 7
 234:../FreeRTOS/croutine.c **** 	/* Are there any co-routines waiting to get moved to the ready list?  These
 235:../FreeRTOS/croutine.c **** 	are co-routines that have been readied by an ISR.  The ISR cannot access
 236:../FreeRTOS/croutine.c **** 	the	ready lists itself. */
 237:../FreeRTOS/croutine.c **** 	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
 310              		.loc 1 237 0
 311 018a 36E0     		b	.L13
 312              	.L15:
 313              	.LBB2:
 238:../FreeRTOS/croutine.c **** 	{
 239:../FreeRTOS/croutine.c **** 		CRCB_t *pxUnblockedCRCB;
 240:../FreeRTOS/croutine.c **** 
 241:../FreeRTOS/croutine.c **** 		/* The pending ready list can be accessed by an ISR. */
 242:../FreeRTOS/croutine.c **** 		portDISABLE_INTERRUPTS();
 314              		.loc 1 242 0
 315 018c FFF7FEFF 		bl	ulPortSetInterruptMask
 243:../FreeRTOS/croutine.c **** 		{
 244:../FreeRTOS/croutine.c **** 			pxUnblockedCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );
 316              		.loc 1 244 0
 317 0190 40F20003 		movw	r3, #:lower16:xPendingReadyCoRoutineList
 318 0194 C0F20003 		movt	r3, #:upper16:xPendingReadyCoRoutineList
 319 0198 DB68     		ldr	r3, [r3, #12]
 320 019a DB68     		ldr	r3, [r3, #12]
 321 019c 7B60     		str	r3, [r7, #4]
 245:../FreeRTOS/croutine.c **** 			( void ) uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
 322              		.loc 1 245 0
 323 019e 7B68     		ldr	r3, [r7, #4]
 324 01a0 1833     		adds	r3, r3, #24
 325 01a2 1846     		mov	r0, r3
 326 01a4 FFF7FEFF 		bl	uxListRemove
 246:../FreeRTOS/croutine.c **** 		}
 247:../FreeRTOS/croutine.c **** 		portENABLE_INTERRUPTS();
 327              		.loc 1 247 0
 328 01a8 0020     		movs	r0, #0
 329 01aa FFF7FEFF 		bl	vPortClearInterruptMask
 248:../FreeRTOS/croutine.c **** 
 249:../FreeRTOS/croutine.c **** 		( void ) uxListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
 330              		.loc 1 249 0
 331 01ae 7B68     		ldr	r3, [r7, #4]
 332 01b0 0433     		adds	r3, r3, #4
 333 01b2 1846     		mov	r0, r3
 334 01b4 FFF7FEFF 		bl	uxListRemove
 250:../FreeRTOS/croutine.c **** 		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );
 335              		.loc 1 250 0
 336 01b8 7B68     		ldr	r3, [r7, #4]
 337 01ba DA6A     		ldr	r2, [r3, #44]
 338 01bc 40F20003 		movw	r3, #:lower16:uxTopCoRoutineReadyPriority
 339 01c0 C0F20003 		movt	r3, #:upper16:uxTopCoRoutineReadyPriority
 340 01c4 1B68     		ldr	r3, [r3]
 341 01c6 9A42     		cmp	r2, r3
 342 01c8 06D9     		bls	.L14
 343              		.loc 1 250 0 is_stmt 0 discriminator 1
 344 01ca 7B68     		ldr	r3, [r7, #4]
 345 01cc DA6A     		ldr	r2, [r3, #44]
 346 01ce 40F20003 		movw	r3, #:lower16:uxTopCoRoutineReadyPriority
 347 01d2 C0F20003 		movt	r3, #:upper16:uxTopCoRoutineReadyPriority
 348 01d6 1A60     		str	r2, [r3]
 349              	.L14:
 350              		.loc 1 250 0 discriminator 2
 351 01d8 7B68     		ldr	r3, [r7, #4]
 352 01da DA6A     		ldr	r2, [r3, #44]
 353 01dc 1346     		mov	r3, r2
 354 01de 9B00     		lsls	r3, r3, #2
 355 01e0 1344     		add	r3, r3, r2
 356 01e2 9B00     		lsls	r3, r3, #2
 357 01e4 40F20002 		movw	r2, #:lower16:pxReadyCoRoutineLists
 358 01e8 C0F20002 		movt	r2, #:upper16:pxReadyCoRoutineLists
 359 01ec 1A44     		add	r2, r2, r3
 360 01ee 7B68     		ldr	r3, [r7, #4]
 361 01f0 0433     		adds	r3, r3, #4
 362 01f2 1046     		mov	r0, r2
 363 01f4 1946     		mov	r1, r3
 364 01f6 FFF7FEFF 		bl	vListInsertEnd
 365              	.L13:
 366              	.LBE2:
 237:../FreeRTOS/croutine.c **** 	{
 367              		.loc 1 237 0 is_stmt 1 discriminator 1
 368 01fa 40F20003 		movw	r3, #:lower16:xPendingReadyCoRoutineList
 369 01fe C0F20003 		movt	r3, #:upper16:xPendingReadyCoRoutineList
 370 0202 1B68     		ldr	r3, [r3]
 371 0204 002B     		cmp	r3, #0
 372 0206 C1D1     		bne	.L15
 251:../FreeRTOS/croutine.c **** 	}
 252:../FreeRTOS/croutine.c **** }
 373              		.loc 1 252 0
 374 0208 0837     		adds	r7, r7, #8
 375 020a BD46     		mov	sp, r7
 376              		@ sp needed
 377 020c 80BD     		pop	{r7, pc}
 378              		.cfi_endproc
 379              	.LFE2:
 381 020e 00BF     		.align	2
 382              		.thumb
 383              		.thumb_func
 385              	prvCheckDelayedList:
 386              	.LFB3:
 253:../FreeRTOS/croutine.c **** /*-----------------------------------------------------------*/
 254:../FreeRTOS/croutine.c **** 
 255:../FreeRTOS/croutine.c **** static void prvCheckDelayedList( void )
 256:../FreeRTOS/croutine.c **** {
 387              		.loc 1 256 0
 388              		.cfi_startproc
 389              		@ args = 0, pretend = 0, frame = 8
 390              		@ frame_needed = 1, uses_anonymous_args = 0
 391 0210 80B5     		push	{r7, lr}
 392              		.cfi_def_cfa_offset 8
 393              		.cfi_offset 7, -8
 394              		.cfi_offset 14, -4
 395 0212 82B0     		sub	sp, sp, #8
 396              		.cfi_def_cfa_offset 16
 397 0214 00AF     		add	r7, sp, #0
 398              		.cfi_def_cfa_register 7
 257:../FreeRTOS/croutine.c **** CRCB_t *pxCRCB;
 258:../FreeRTOS/croutine.c **** 
 259:../FreeRTOS/croutine.c **** 	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
 399              		.loc 1 259 0
 400 0216 FFF7FEFF 		bl	xTaskGetTickCount
 401 021a 0246     		mov	r2, r0
 402 021c 40F20003 		movw	r3, #:lower16:xLastTickCount
 403 0220 C0F20003 		movt	r3, #:upper16:xLastTickCount
 404 0224 1B68     		ldr	r3, [r3]
 405 0226 D21A     		subs	r2, r2, r3
 406 0228 40F20003 		movw	r3, #:lower16:xPassedTicks
 407 022c C0F20003 		movt	r3, #:upper16:xPassedTicks
 408 0230 1A60     		str	r2, [r3]
 260:../FreeRTOS/croutine.c **** 	while( xPassedTicks )
 409              		.loc 1 260 0
 410 0232 82E0     		b	.L17
 411              	.L24:
 261:../FreeRTOS/croutine.c **** 	{
 262:../FreeRTOS/croutine.c **** 		xCoRoutineTickCount++;
 412              		.loc 1 262 0
 413 0234 40F20003 		movw	r3, #:lower16:xCoRoutineTickCount
 414 0238 C0F20003 		movt	r3, #:upper16:xCoRoutineTickCount
 415 023c 1B68     		ldr	r3, [r3]
 416 023e 5A1C     		adds	r2, r3, #1
 417 0240 40F20003 		movw	r3, #:lower16:xCoRoutineTickCount
 418 0244 C0F20003 		movt	r3, #:upper16:xCoRoutineTickCount
 419 0248 1A60     		str	r2, [r3]
 263:../FreeRTOS/croutine.c **** 		xPassedTicks--;
 420              		.loc 1 263 0
 421 024a 40F20003 		movw	r3, #:lower16:xPassedTicks
 422 024e C0F20003 		movt	r3, #:upper16:xPassedTicks
 423 0252 1B68     		ldr	r3, [r3]
 424 0254 5A1E     		subs	r2, r3, #1
 425 0256 40F20003 		movw	r3, #:lower16:xPassedTicks
 426 025a C0F20003 		movt	r3, #:upper16:xPassedTicks
 427 025e 1A60     		str	r2, [r3]
 264:../FreeRTOS/croutine.c **** 
 265:../FreeRTOS/croutine.c **** 		/* If the tick count has overflowed we need to swap the ready lists. */
 266:../FreeRTOS/croutine.c **** 		if( xCoRoutineTickCount == 0 )
 428              		.loc 1 266 0
 429 0260 40F20003 		movw	r3, #:lower16:xCoRoutineTickCount
 430 0264 C0F20003 		movt	r3, #:upper16:xCoRoutineTickCount
 431 0268 1B68     		ldr	r3, [r3]
 432 026a 002B     		cmp	r3, #0
 433 026c 16D1     		bne	.L18
 434              	.LBB3:
 267:../FreeRTOS/croutine.c **** 		{
 268:../FreeRTOS/croutine.c **** 			List_t * pxTemp;
 269:../FreeRTOS/croutine.c **** 
 270:../FreeRTOS/croutine.c **** 			/* Tick count has overflowed so we need to swap the delay lists.  If there are
 271:../FreeRTOS/croutine.c **** 			any items in pxDelayedCoRoutineList here then there is an error! */
 272:../FreeRTOS/croutine.c **** 			pxTemp = pxDelayedCoRoutineList;
 435              		.loc 1 272 0
 436 026e 40F20003 		movw	r3, #:lower16:pxDelayedCoRoutineList
 437 0272 C0F20003 		movt	r3, #:upper16:pxDelayedCoRoutineList
 438 0276 1B68     		ldr	r3, [r3]
 439 0278 7B60     		str	r3, [r7, #4]
 273:../FreeRTOS/croutine.c **** 			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
 440              		.loc 1 273 0
 441 027a 40F20003 		movw	r3, #:lower16:pxOverflowDelayedCoRoutineList
 442 027e C0F20003 		movt	r3, #:upper16:pxOverflowDelayedCoRoutineList
 443 0282 1A68     		ldr	r2, [r3]
 444 0284 40F20003 		movw	r3, #:lower16:pxDelayedCoRoutineList
 445 0288 C0F20003 		movt	r3, #:upper16:pxDelayedCoRoutineList
 446 028c 1A60     		str	r2, [r3]
 274:../FreeRTOS/croutine.c **** 			pxOverflowDelayedCoRoutineList = pxTemp;
 447              		.loc 1 274 0
 448 028e 40F20003 		movw	r3, #:lower16:pxOverflowDelayedCoRoutineList
 449 0292 C0F20003 		movt	r3, #:upper16:pxOverflowDelayedCoRoutineList
 450 0296 7A68     		ldr	r2, [r7, #4]
 451 0298 1A60     		str	r2, [r3]
 452              	.LBE3:
 275:../FreeRTOS/croutine.c **** 		}
 276:../FreeRTOS/croutine.c **** 
 277:../FreeRTOS/croutine.c **** 		/* See if this tick has made a timeout expire. */
 278:../FreeRTOS/croutine.c **** 		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
 453              		.loc 1 278 0
 454 029a 46E0     		b	.L19
 455              	.L18:
 456 029c 45E0     		b	.L19
 457              	.L23:
 279:../FreeRTOS/croutine.c **** 		{
 280:../FreeRTOS/croutine.c **** 			pxCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
 458              		.loc 1 280 0
 459 029e 40F20003 		movw	r3, #:lower16:pxDelayedCoRoutineList
 460 02a2 C0F20003 		movt	r3, #:upper16:pxDelayedCoRoutineList
 461 02a6 1B68     		ldr	r3, [r3]
 462 02a8 DB68     		ldr	r3, [r3, #12]
 463 02aa DB68     		ldr	r3, [r3, #12]
 464 02ac 3B60     		str	r3, [r7]
 281:../FreeRTOS/croutine.c **** 
 282:../FreeRTOS/croutine.c **** 			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )
 465              		.loc 1 282 0
 466 02ae 3B68     		ldr	r3, [r7]
 467 02b0 5A68     		ldr	r2, [r3, #4]
 468 02b2 40F20003 		movw	r3, #:lower16:xCoRoutineTickCount
 469 02b6 C0F20003 		movt	r3, #:upper16:xCoRoutineTickCount
 470 02ba 1B68     		ldr	r3, [r3]
 471 02bc 9A42     		cmp	r2, r3
 472 02be 00D9     		bls	.L20
 283:../FreeRTOS/croutine.c **** 			{
 284:../FreeRTOS/croutine.c **** 				/* Timeout not yet expired. */
 285:../FreeRTOS/croutine.c **** 				break;
 473              		.loc 1 285 0
 474 02c0 3BE0     		b	.L17
 475              	.L20:
 286:../FreeRTOS/croutine.c **** 			}
 287:../FreeRTOS/croutine.c **** 
 288:../FreeRTOS/croutine.c **** 			portDISABLE_INTERRUPTS();
 476              		.loc 1 288 0
 477 02c2 FFF7FEFF 		bl	ulPortSetInterruptMask
 289:../FreeRTOS/croutine.c **** 			{
 290:../FreeRTOS/croutine.c **** 				/* The event could have occurred just before this critical
 291:../FreeRTOS/croutine.c **** 				section.  If this is the case then the generic list item will
 292:../FreeRTOS/croutine.c **** 				have been moved to the pending ready list and the following
 293:../FreeRTOS/croutine.c **** 				line is still valid.  Also the pvContainer parameter will have
 294:../FreeRTOS/croutine.c **** 				been set to NULL so the following lines are also valid. */
 295:../FreeRTOS/croutine.c **** 				( void ) uxListRemove( &( pxCRCB->xGenericListItem ) );
 478              		.loc 1 295 0
 479 02c6 3B68     		ldr	r3, [r7]
 480 02c8 0433     		adds	r3, r3, #4
 481 02ca 1846     		mov	r0, r3
 482 02cc FFF7FEFF 		bl	uxListRemove
 296:../FreeRTOS/croutine.c **** 
 297:../FreeRTOS/croutine.c **** 				/* Is the co-routine waiting on an event also? */
 298:../FreeRTOS/croutine.c **** 				if( pxCRCB->xEventListItem.pvContainer )
 483              		.loc 1 298 0
 484 02d0 3B68     		ldr	r3, [r7]
 485 02d2 9B6A     		ldr	r3, [r3, #40]
 486 02d4 002B     		cmp	r3, #0
 487 02d6 04D0     		beq	.L21
 299:../FreeRTOS/croutine.c **** 				{
 300:../FreeRTOS/croutine.c **** 					( void ) uxListRemove( &( pxCRCB->xEventListItem ) );
 488              		.loc 1 300 0
 489 02d8 3B68     		ldr	r3, [r7]
 490 02da 1833     		adds	r3, r3, #24
 491 02dc 1846     		mov	r0, r3
 492 02de FFF7FEFF 		bl	uxListRemove
 493              	.L21:
 301:../FreeRTOS/croutine.c **** 				}
 302:../FreeRTOS/croutine.c **** 			}
 303:../FreeRTOS/croutine.c **** 			portENABLE_INTERRUPTS();
 494              		.loc 1 303 0
 495 02e2 0020     		movs	r0, #0
 496 02e4 FFF7FEFF 		bl	vPortClearInterruptMask
 304:../FreeRTOS/croutine.c **** 
 305:../FreeRTOS/croutine.c **** 			prvAddCoRoutineToReadyQueue( pxCRCB );
 497              		.loc 1 305 0
 498 02e8 3B68     		ldr	r3, [r7]
 499 02ea DA6A     		ldr	r2, [r3, #44]
 500 02ec 40F20003 		movw	r3, #:lower16:uxTopCoRoutineReadyPriority
 501 02f0 C0F20003 		movt	r3, #:upper16:uxTopCoRoutineReadyPriority
 502 02f4 1B68     		ldr	r3, [r3]
 503 02f6 9A42     		cmp	r2, r3
 504 02f8 06D9     		bls	.L22
 505              		.loc 1 305 0 is_stmt 0 discriminator 1
 506 02fa 3B68     		ldr	r3, [r7]
 507 02fc DA6A     		ldr	r2, [r3, #44]
 508 02fe 40F20003 		movw	r3, #:lower16:uxTopCoRoutineReadyPriority
 509 0302 C0F20003 		movt	r3, #:upper16:uxTopCoRoutineReadyPriority
 510 0306 1A60     		str	r2, [r3]
 511              	.L22:
 512              		.loc 1 305 0 discriminator 2
 513 0308 3B68     		ldr	r3, [r7]
 514 030a DA6A     		ldr	r2, [r3, #44]
 515 030c 1346     		mov	r3, r2
 516 030e 9B00     		lsls	r3, r3, #2
 517 0310 1344     		add	r3, r3, r2
 518 0312 9B00     		lsls	r3, r3, #2
 519 0314 40F20002 		movw	r2, #:lower16:pxReadyCoRoutineLists
 520 0318 C0F20002 		movt	r2, #:upper16:pxReadyCoRoutineLists
 521 031c 1A44     		add	r2, r2, r3
 522 031e 3B68     		ldr	r3, [r7]
 523 0320 0433     		adds	r3, r3, #4
 524 0322 1046     		mov	r0, r2
 525 0324 1946     		mov	r1, r3
 526 0326 FFF7FEFF 		bl	vListInsertEnd
 527              	.L19:
 278:../FreeRTOS/croutine.c **** 		{
 528              		.loc 1 278 0 is_stmt 1 discriminator 1
 529 032a 40F20003 		movw	r3, #:lower16:pxDelayedCoRoutineList
 530 032e C0F20003 		movt	r3, #:upper16:pxDelayedCoRoutineList
 531 0332 1B68     		ldr	r3, [r3]
 532 0334 1B68     		ldr	r3, [r3]
 533 0336 002B     		cmp	r3, #0
 534 0338 B1D1     		bne	.L23
 535              	.L17:
 260:../FreeRTOS/croutine.c **** 	{
 536              		.loc 1 260 0 discriminator 1
 537 033a 40F20003 		movw	r3, #:lower16:xPassedTicks
 538 033e C0F20003 		movt	r3, #:upper16:xPassedTicks
 539 0342 1B68     		ldr	r3, [r3]
 540 0344 002B     		cmp	r3, #0
 541 0346 7FF475AF 		bne	.L24
 306:../FreeRTOS/croutine.c **** 		}
 307:../FreeRTOS/croutine.c **** 	}
 308:../FreeRTOS/croutine.c **** 
 309:../FreeRTOS/croutine.c **** 	xLastTickCount = xCoRoutineTickCount;
 542              		.loc 1 309 0
 543 034a 40F20003 		movw	r3, #:lower16:xCoRoutineTickCount
 544 034e C0F20003 		movt	r3, #:upper16:xCoRoutineTickCount
 545 0352 1A68     		ldr	r2, [r3]
 546 0354 40F20003 		movw	r3, #:lower16:xLastTickCount
 547 0358 C0F20003 		movt	r3, #:upper16:xLastTickCount
 548 035c 1A60     		str	r2, [r3]
 310:../FreeRTOS/croutine.c **** }
 549              		.loc 1 310 0
 550 035e 0837     		adds	r7, r7, #8
 551 0360 BD46     		mov	sp, r7
 552              		@ sp needed
 553 0362 80BD     		pop	{r7, pc}
 554              		.cfi_endproc
 555              	.LFE3:
 557              		.align	2
 558              		.global	vCoRoutineSchedule
 559              		.thumb
 560              		.thumb_func
 562              	vCoRoutineSchedule:
 563              	.LFB4:
 311:../FreeRTOS/croutine.c **** /*-----------------------------------------------------------*/
 312:../FreeRTOS/croutine.c **** 
 313:../FreeRTOS/croutine.c **** void vCoRoutineSchedule( void )
 314:../FreeRTOS/croutine.c **** {
 564              		.loc 1 314 0
 565              		.cfi_startproc
 566              		@ args = 0, pretend = 0, frame = 8
 567              		@ frame_needed = 1, uses_anonymous_args = 0
 568 0364 80B5     		push	{r7, lr}
 569              		.cfi_def_cfa_offset 8
 570              		.cfi_offset 7, -8
 571              		.cfi_offset 14, -4
 572 0366 82B0     		sub	sp, sp, #8
 573              		.cfi_def_cfa_offset 16
 574 0368 00AF     		add	r7, sp, #0
 575              		.cfi_def_cfa_register 7
 315:../FreeRTOS/croutine.c **** 	/* See if any co-routines readied by events need moving to the ready lists. */
 316:../FreeRTOS/croutine.c **** 	prvCheckPendingReadyList();
 576              		.loc 1 316 0
 577 036a FFF70BFF 		bl	prvCheckPendingReadyList
 317:../FreeRTOS/croutine.c **** 
 318:../FreeRTOS/croutine.c **** 	/* See if any delayed co-routines have timed out. */
 319:../FreeRTOS/croutine.c **** 	prvCheckDelayedList();
 578              		.loc 1 319 0
 579 036e FFF74FFF 		bl	prvCheckDelayedList
 320:../FreeRTOS/croutine.c **** 
 321:../FreeRTOS/croutine.c **** 	/* Find the highest priority queue that contains ready co-routines. */
 322:../FreeRTOS/croutine.c **** 	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
 580              		.loc 1 322 0
 581 0372 12E0     		b	.L26
 582              	.L29:
 323:../FreeRTOS/croutine.c **** 	{
 324:../FreeRTOS/croutine.c **** 		if( uxTopCoRoutineReadyPriority == 0 )
 583              		.loc 1 324 0
 584 0374 40F20003 		movw	r3, #:lower16:uxTopCoRoutineReadyPriority
 585 0378 C0F20003 		movt	r3, #:upper16:uxTopCoRoutineReadyPriority
 586 037c 1B68     		ldr	r3, [r3]
 587 037e 002B     		cmp	r3, #0
 588 0380 00D1     		bne	.L27
 325:../FreeRTOS/croutine.c **** 		{
 326:../FreeRTOS/croutine.c **** 			/* No more co-routines to check. */
 327:../FreeRTOS/croutine.c **** 			return;
 589              		.loc 1 327 0
 590 0382 57E0     		b	.L25
 591              	.L27:
 328:../FreeRTOS/croutine.c **** 		}
 329:../FreeRTOS/croutine.c **** 		--uxTopCoRoutineReadyPriority;
 592              		.loc 1 329 0
 593 0384 40F20003 		movw	r3, #:lower16:uxTopCoRoutineReadyPriority
 594 0388 C0F20003 		movt	r3, #:upper16:uxTopCoRoutineReadyPriority
 595 038c 1B68     		ldr	r3, [r3]
 596 038e 5A1E     		subs	r2, r3, #1
 597 0390 40F20003 		movw	r3, #:lower16:uxTopCoRoutineReadyPriority
 598 0394 C0F20003 		movt	r3, #:upper16:uxTopCoRoutineReadyPriority
 599 0398 1A60     		str	r2, [r3]
 600              	.L26:
 322:../FreeRTOS/croutine.c **** 	{
 601              		.loc 1 322 0 discriminator 1
 602 039a 40F20003 		movw	r3, #:lower16:uxTopCoRoutineReadyPriority
 603 039e C0F20003 		movt	r3, #:upper16:uxTopCoRoutineReadyPriority
 604 03a2 1968     		ldr	r1, [r3]
 605 03a4 40F20002 		movw	r2, #:lower16:pxReadyCoRoutineLists
 606 03a8 C0F20002 		movt	r2, #:upper16:pxReadyCoRoutineLists
 607 03ac 0B46     		mov	r3, r1
 608 03ae 9B00     		lsls	r3, r3, #2
 609 03b0 0B44     		add	r3, r3, r1
 610 03b2 9B00     		lsls	r3, r3, #2
 611 03b4 1344     		add	r3, r3, r2
 612 03b6 1B68     		ldr	r3, [r3]
 613 03b8 002B     		cmp	r3, #0
 614 03ba DBD0     		beq	.L29
 615              	.LBB4:
 330:../FreeRTOS/croutine.c **** 	}
 331:../FreeRTOS/croutine.c **** 
 332:../FreeRTOS/croutine.c **** 	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
 333:../FreeRTOS/croutine.c **** 	 of the	same priority get an equal share of the processor time. */
 334:../FreeRTOS/croutine.c **** 	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPrio
 616              		.loc 1 334 0
 617 03bc 40F20003 		movw	r3, #:lower16:uxTopCoRoutineReadyPriority
 618 03c0 C0F20003 		movt	r3, #:upper16:uxTopCoRoutineReadyPriority
 619 03c4 1A68     		ldr	r2, [r3]
 620 03c6 1346     		mov	r3, r2
 621 03c8 9B00     		lsls	r3, r3, #2
 622 03ca 1344     		add	r3, r3, r2
 623 03cc 9B00     		lsls	r3, r3, #2
 624 03ce 40F20002 		movw	r2, #:lower16:pxReadyCoRoutineLists
 625 03d2 C0F20002 		movt	r2, #:upper16:pxReadyCoRoutineLists
 626 03d6 1344     		add	r3, r3, r2
 627 03d8 7B60     		str	r3, [r7, #4]
 628 03da 7B68     		ldr	r3, [r7, #4]
 629 03dc 5B68     		ldr	r3, [r3, #4]
 630 03de 5A68     		ldr	r2, [r3, #4]
 631 03e0 7B68     		ldr	r3, [r7, #4]
 632 03e2 5A60     		str	r2, [r3, #4]
 633 03e4 7B68     		ldr	r3, [r7, #4]
 634 03e6 5A68     		ldr	r2, [r3, #4]
 635 03e8 7B68     		ldr	r3, [r7, #4]
 636 03ea 0833     		adds	r3, r3, #8
 637 03ec 9A42     		cmp	r2, r3
 638 03ee 04D1     		bne	.L30
 639              		.loc 1 334 0 is_stmt 0 discriminator 1
 640 03f0 7B68     		ldr	r3, [r7, #4]
 641 03f2 5B68     		ldr	r3, [r3, #4]
 642 03f4 5A68     		ldr	r2, [r3, #4]
 643 03f6 7B68     		ldr	r3, [r7, #4]
 644 03f8 5A60     		str	r2, [r3, #4]
 645              	.L30:
 646              		.loc 1 334 0 discriminator 2
 647 03fa 7B68     		ldr	r3, [r7, #4]
 648 03fc 5B68     		ldr	r3, [r3, #4]
 649 03fe DA68     		ldr	r2, [r3, #12]
 650 0400 40F20003 		movw	r3, #:lower16:pxCurrentCoRoutine
 651 0404 C0F20003 		movt	r3, #:upper16:pxCurrentCoRoutine
 652 0408 1A60     		str	r2, [r3]
 653              	.LBE4:
 335:../FreeRTOS/croutine.c **** 
 336:../FreeRTOS/croutine.c **** 	/* Call the co-routine. */
 337:../FreeRTOS/croutine.c **** 	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
 654              		.loc 1 337 0 is_stmt 1 discriminator 2
 655 040a 40F20003 		movw	r3, #:lower16:pxCurrentCoRoutine
 656 040e C0F20003 		movt	r3, #:upper16:pxCurrentCoRoutine
 657 0412 1B68     		ldr	r3, [r3]
 658 0414 1A68     		ldr	r2, [r3]
 659 0416 40F20003 		movw	r3, #:lower16:pxCurrentCoRoutine
 660 041a C0F20003 		movt	r3, #:upper16:pxCurrentCoRoutine
 661 041e 1968     		ldr	r1, [r3]
 662 0420 40F20003 		movw	r3, #:lower16:pxCurrentCoRoutine
 663 0424 C0F20003 		movt	r3, #:upper16:pxCurrentCoRoutine
 664 0428 1B68     		ldr	r3, [r3]
 665 042a 1B6B     		ldr	r3, [r3, #48]
 666 042c 0846     		mov	r0, r1
 667 042e 1946     		mov	r1, r3
 668 0430 9047     		blx	r2
 338:../FreeRTOS/croutine.c **** 
 339:../FreeRTOS/croutine.c **** 	return;
 669              		.loc 1 339 0 discriminator 2
 670 0432 00BF     		nop
 671              	.L25:
 340:../FreeRTOS/croutine.c **** }
 672              		.loc 1 340 0
 673 0434 0837     		adds	r7, r7, #8
 674 0436 BD46     		mov	sp, r7
 675              		@ sp needed
 676 0438 80BD     		pop	{r7, pc}
 677              		.cfi_endproc
 678              	.LFE4:
 680 043a 00BF     		.align	2
 681              		.thumb
 682              		.thumb_func
 684              	prvInitialiseCoRoutineLists:
 685              	.LFB5:
 341:../FreeRTOS/croutine.c **** /*-----------------------------------------------------------*/
 342:../FreeRTOS/croutine.c **** 
 343:../FreeRTOS/croutine.c **** static void prvInitialiseCoRoutineLists( void )
 344:../FreeRTOS/croutine.c **** {
 686              		.loc 1 344 0
 687              		.cfi_startproc
 688              		@ args = 0, pretend = 0, frame = 8
 689              		@ frame_needed = 1, uses_anonymous_args = 0
 690 043c 80B5     		push	{r7, lr}
 691              		.cfi_def_cfa_offset 8
 692              		.cfi_offset 7, -8
 693              		.cfi_offset 14, -4
 694 043e 82B0     		sub	sp, sp, #8
 695              		.cfi_def_cfa_offset 16
 696 0440 00AF     		add	r7, sp, #0
 697              		.cfi_def_cfa_register 7
 345:../FreeRTOS/croutine.c **** UBaseType_t uxPriority;
 346:../FreeRTOS/croutine.c **** 
 347:../FreeRTOS/croutine.c **** 	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
 698              		.loc 1 347 0
 699 0442 0023     		movs	r3, #0
 700 0444 7B60     		str	r3, [r7, #4]
 701 0446 0FE0     		b	.L32
 702              	.L33:
 348:../FreeRTOS/croutine.c **** 	{
 349:../FreeRTOS/croutine.c **** 		vListInitialise( ( List_t * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
 703              		.loc 1 349 0 discriminator 2
 704 0448 7A68     		ldr	r2, [r7, #4]
 705 044a 1346     		mov	r3, r2
 706 044c 9B00     		lsls	r3, r3, #2
 707 044e 1344     		add	r3, r3, r2
 708 0450 9B00     		lsls	r3, r3, #2
 709 0452 40F20002 		movw	r2, #:lower16:pxReadyCoRoutineLists
 710 0456 C0F20002 		movt	r2, #:upper16:pxReadyCoRoutineLists
 711 045a 1344     		add	r3, r3, r2
 712 045c 1846     		mov	r0, r3
 713 045e FFF7FEFF 		bl	vListInitialise
 347:../FreeRTOS/croutine.c **** 	{
 714              		.loc 1 347 0 discriminator 2
 715 0462 7B68     		ldr	r3, [r7, #4]
 716 0464 0133     		adds	r3, r3, #1
 717 0466 7B60     		str	r3, [r7, #4]
 718              	.L32:
 347:../FreeRTOS/croutine.c **** 	{
 719              		.loc 1 347 0 is_stmt 0 discriminator 1
 720 0468 7B68     		ldr	r3, [r7, #4]
 721 046a 012B     		cmp	r3, #1
 722 046c ECD9     		bls	.L33
 350:../FreeRTOS/croutine.c **** 	}
 351:../FreeRTOS/croutine.c **** 
 352:../FreeRTOS/croutine.c **** 	vListInitialise( ( List_t * ) &xDelayedCoRoutineList1 );
 723              		.loc 1 352 0 is_stmt 1
 724 046e 40F20000 		movw	r0, #:lower16:xDelayedCoRoutineList1
 725 0472 C0F20000 		movt	r0, #:upper16:xDelayedCoRoutineList1
 726 0476 FFF7FEFF 		bl	vListInitialise
 353:../FreeRTOS/croutine.c **** 	vListInitialise( ( List_t * ) &xDelayedCoRoutineList2 );
 727              		.loc 1 353 0
 728 047a 40F20000 		movw	r0, #:lower16:xDelayedCoRoutineList2
 729 047e C0F20000 		movt	r0, #:upper16:xDelayedCoRoutineList2
 730 0482 FFF7FEFF 		bl	vListInitialise
 354:../FreeRTOS/croutine.c **** 	vListInitialise( ( List_t * ) &xPendingReadyCoRoutineList );
 731              		.loc 1 354 0
 732 0486 40F20000 		movw	r0, #:lower16:xPendingReadyCoRoutineList
 733 048a C0F20000 		movt	r0, #:upper16:xPendingReadyCoRoutineList
 734 048e FFF7FEFF 		bl	vListInitialise
 355:../FreeRTOS/croutine.c **** 
 356:../FreeRTOS/croutine.c **** 	/* Start with pxDelayedCoRoutineList using list1 and the
 357:../FreeRTOS/croutine.c **** 	pxOverflowDelayedCoRoutineList using list2. */
 358:../FreeRTOS/croutine.c **** 	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
 735              		.loc 1 358 0
 736 0492 40F20003 		movw	r3, #:lower16:pxDelayedCoRoutineList
 737 0496 C0F20003 		movt	r3, #:upper16:pxDelayedCoRoutineList
 738 049a 40F20002 		movw	r2, #:lower16:xDelayedCoRoutineList1
 739 049e C0F20002 		movt	r2, #:upper16:xDelayedCoRoutineList1
 740 04a2 1A60     		str	r2, [r3]
 359:../FreeRTOS/croutine.c **** 	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
 741              		.loc 1 359 0
 742 04a4 40F20003 		movw	r3, #:lower16:pxOverflowDelayedCoRoutineList
 743 04a8 C0F20003 		movt	r3, #:upper16:pxOverflowDelayedCoRoutineList
 744 04ac 40F20002 		movw	r2, #:lower16:xDelayedCoRoutineList2
 745 04b0 C0F20002 		movt	r2, #:upper16:xDelayedCoRoutineList2
 746 04b4 1A60     		str	r2, [r3]
 360:../FreeRTOS/croutine.c **** }
 747              		.loc 1 360 0
 748 04b6 0837     		adds	r7, r7, #8
 749 04b8 BD46     		mov	sp, r7
 750              		@ sp needed
 751 04ba 80BD     		pop	{r7, pc}
 752              		.cfi_endproc
 753              	.LFE5:
 755              		.align	2
 756              		.global	xCoRoutineRemoveFromEventList
 757              		.thumb
 758              		.thumb_func
 760              	xCoRoutineRemoveFromEventList:
 761              	.LFB6:
 361:../FreeRTOS/croutine.c **** /*-----------------------------------------------------------*/
 362:../FreeRTOS/croutine.c **** 
 363:../FreeRTOS/croutine.c **** BaseType_t xCoRoutineRemoveFromEventList( const List_t *pxEventList )
 364:../FreeRTOS/croutine.c **** {
 762              		.loc 1 364 0
 763              		.cfi_startproc
 764              		@ args = 0, pretend = 0, frame = 16
 765              		@ frame_needed = 1, uses_anonymous_args = 0
 766 04bc 80B5     		push	{r7, lr}
 767              		.cfi_def_cfa_offset 8
 768              		.cfi_offset 7, -8
 769              		.cfi_offset 14, -4
 770 04be 84B0     		sub	sp, sp, #16
 771              		.cfi_def_cfa_offset 24
 772 04c0 00AF     		add	r7, sp, #0
 773              		.cfi_def_cfa_register 7
 774 04c2 7860     		str	r0, [r7, #4]
 365:../FreeRTOS/croutine.c **** CRCB_t *pxUnblockedCRCB;
 366:../FreeRTOS/croutine.c **** BaseType_t xReturn;
 367:../FreeRTOS/croutine.c **** 
 368:../FreeRTOS/croutine.c **** 	/* This function is called from within an interrupt.  It can only access
 369:../FreeRTOS/croutine.c **** 	event lists and the pending ready list.  This function assumes that a
 370:../FreeRTOS/croutine.c **** 	check has already been made to ensure pxEventList is not empty. */
 371:../FreeRTOS/croutine.c **** 	pxUnblockedCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 775              		.loc 1 371 0
 776 04c4 7B68     		ldr	r3, [r7, #4]
 777 04c6 DB68     		ldr	r3, [r3, #12]
 778 04c8 DB68     		ldr	r3, [r3, #12]
 779 04ca BB60     		str	r3, [r7, #8]
 372:../FreeRTOS/croutine.c **** 	( void ) uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
 780              		.loc 1 372 0
 781 04cc BB68     		ldr	r3, [r7, #8]
 782 04ce 1833     		adds	r3, r3, #24
 783 04d0 1846     		mov	r0, r3
 784 04d2 FFF7FEFF 		bl	uxListRemove
 373:../FreeRTOS/croutine.c **** 	vListInsertEnd( ( List_t * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem )
 785              		.loc 1 373 0
 786 04d6 BB68     		ldr	r3, [r7, #8]
 787 04d8 1833     		adds	r3, r3, #24
 788 04da 40F20000 		movw	r0, #:lower16:xPendingReadyCoRoutineList
 789 04de C0F20000 		movt	r0, #:upper16:xPendingReadyCoRoutineList
 790 04e2 1946     		mov	r1, r3
 791 04e4 FFF7FEFF 		bl	vListInsertEnd
 374:../FreeRTOS/croutine.c **** 
 375:../FreeRTOS/croutine.c **** 	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
 792              		.loc 1 375 0
 793 04e8 BB68     		ldr	r3, [r7, #8]
 794 04ea DA6A     		ldr	r2, [r3, #44]
 795 04ec 40F20003 		movw	r3, #:lower16:pxCurrentCoRoutine
 796 04f0 C0F20003 		movt	r3, #:upper16:pxCurrentCoRoutine
 797 04f4 1B68     		ldr	r3, [r3]
 798 04f6 DB6A     		ldr	r3, [r3, #44]
 799 04f8 9A42     		cmp	r2, r3
 800 04fa 02D3     		bcc	.L35
 376:../FreeRTOS/croutine.c **** 	{
 377:../FreeRTOS/croutine.c **** 		xReturn = pdTRUE;
 801              		.loc 1 377 0
 802 04fc 0123     		movs	r3, #1
 803 04fe FB60     		str	r3, [r7, #12]
 804 0500 01E0     		b	.L36
 805              	.L35:
 378:../FreeRTOS/croutine.c **** 	}
 379:../FreeRTOS/croutine.c **** 	else
 380:../FreeRTOS/croutine.c **** 	{
 381:../FreeRTOS/croutine.c **** 		xReturn = pdFALSE;
 806              		.loc 1 381 0
 807 0502 0023     		movs	r3, #0
 808 0504 FB60     		str	r3, [r7, #12]
 809              	.L36:
 382:../FreeRTOS/croutine.c **** 	}
 383:../FreeRTOS/croutine.c **** 
 384:../FreeRTOS/croutine.c **** 	return xReturn;
 810              		.loc 1 384 0
 811 0506 FB68     		ldr	r3, [r7, #12]
 385:../FreeRTOS/croutine.c **** }
 812              		.loc 1 385 0
 813 0508 1846     		mov	r0, r3
 814 050a 1037     		adds	r7, r7, #16
 815 050c BD46     		mov	sp, r7
 816              		@ sp needed
 817 050e 80BD     		pop	{r7, pc}
 818              		.cfi_endproc
 819              	.LFE6:
 821              	.Letext0:
 822              		.file 2 "c:\\program files (x86)\\codesourcery\\arm-none-eabi\\include\\stdint.h"
 823              		.file 3 "D:\\workspace\\console800480\\FreeRTOS\\portable\\GCC\\ARM_CM3/portmacro.h"
 824              		.file 4 "D:\\workspace\\console800480\\FreeRTOS\\include/list.h"
 825              		.file 5 "D:\\workspace\\console800480\\FreeRTOS\\include/croutine.h"
DEFINED SYMBOLS
                            *ABS*:00000000 croutine.c
C:\Users\sagok\AppData\Local\Temp\ccCRPdTV.s:19     .bss:00000000 $d
C:\Users\sagok\AppData\Local\Temp\ccCRPdTV.s:20     .bss:00000000 pxReadyCoRoutineLists
C:\Users\sagok\AppData\Local\Temp\ccCRPdTV.s:23     .bss:00000028 xDelayedCoRoutineList1
C:\Users\sagok\AppData\Local\Temp\ccCRPdTV.s:26     .bss:0000003c xDelayedCoRoutineList2
C:\Users\sagok\AppData\Local\Temp\ccCRPdTV.s:29     .bss:00000050 pxDelayedCoRoutineList
C:\Users\sagok\AppData\Local\Temp\ccCRPdTV.s:32     .bss:00000054 pxOverflowDelayedCoRoutineList
C:\Users\sagok\AppData\Local\Temp\ccCRPdTV.s:35     .bss:00000058 xPendingReadyCoRoutineList
C:\Users\sagok\AppData\Local\Temp\ccCRPdTV.s:41     .bss:0000006c pxCurrentCoRoutine
C:\Users\sagok\AppData\Local\Temp\ccCRPdTV.s:44     .bss:00000070 uxTopCoRoutineReadyPriority
C:\Users\sagok\AppData\Local\Temp\ccCRPdTV.s:47     .bss:00000074 xCoRoutineTickCount
C:\Users\sagok\AppData\Local\Temp\ccCRPdTV.s:50     .bss:00000078 xLastTickCount
C:\Users\sagok\AppData\Local\Temp\ccCRPdTV.s:53     .bss:0000007c xPassedTicks
C:\Users\sagok\AppData\Local\Temp\ccCRPdTV.s:56     .text:00000000 $t
C:\Users\sagok\AppData\Local\Temp\ccCRPdTV.s:61     .text:00000000 xCoRoutineCreate
C:\Users\sagok\AppData\Local\Temp\ccCRPdTV.s:684    .text:0000043c prvInitialiseCoRoutineLists
C:\Users\sagok\AppData\Local\Temp\ccCRPdTV.s:203    .text:000000dc vCoRoutineAddToDelayedList
C:\Users\sagok\AppData\Local\Temp\ccCRPdTV.s:296    .text:00000184 prvCheckPendingReadyList
C:\Users\sagok\AppData\Local\Temp\ccCRPdTV.s:385    .text:00000210 prvCheckDelayedList
C:\Users\sagok\AppData\Local\Temp\ccCRPdTV.s:562    .text:00000364 vCoRoutineSchedule
C:\Users\sagok\AppData\Local\Temp\ccCRPdTV.s:760    .text:000004bc xCoRoutineRemoveFromEventList
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.7f551ac7fcad8b79b9df4bfdaa536673
                           .group:00000000 wm4.stddef.h.39.daafd3d79fe2f3a84d2d73d7d4e706f8
                           .group:00000000 wm4.newlib.h.8.384a112feabb3bef7b573ae48cde2e3b
                           .group:00000000 wm4.features.h.22.6a4ca7cd053637cc1d0db6c16f39b2d7
                           .group:00000000 wm4.config.h.183.aa62afef667fb61d15fa64c48beb2f14
                           .group:00000000 wm4._ansi.h.23.5644b60c990a4800b02a6e654e88f93a
                           .group:00000000 wm4.stdint.h.20.54ad762faa59e3c05491630641c8d8bf
                           .group:00000000 wm4.projdefs.h.67.1891ed3aab788f154f6e7a8ff42f2cfd
                           .group:00000000 wm4.FreeRTOSConfig.h.51.b259e2e835793b5f31e6fb224a543b76
                           .group:00000000 wm4.portmacro.h.68.b9ad41c1c2fd3fb36d97939d17ebacd9
                           .group:00000000 wm4.portable.h.325.a31e8973a246cd28421ddb595e37fd13
                           .group:00000000 wm4.mpu_wrappers.h.67.4bcfd12ce15e5313ce3efd77400f8168
                           .group:00000000 wm4.FreeRTOS.h.177.d801ec107caaf24697618049ed7605b1
                           .group:00000000 wm4.list.h.96.eaa3d29743bd681933f9f5e726c756a1
                           .group:00000000 wm4.task.h.84.ff846741c7bdac87bd4a7636d5320d68
                           .group:00000000 wm4.croutine.h.67.15a177d4677c614527d190c28b4a3937

UNDEFINED SYMBOLS
pvPortMalloc
vListInitialiseItem
vListInsertEnd
uxListRemove
vListInsert
ulPortSetInterruptMask
vPortClearInterruptMask
xTaskGetTickCount
vListInitialise
