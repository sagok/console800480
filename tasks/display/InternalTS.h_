/**
  ******************************************************************************
  * @file    stmpe811.h
  * @author  MCD Application Team
  * @version V1.0.0
  * @date    18-February-2014
  * @brief   This file contains all the functions prototypes for the
  *          stmpe811.c IO expander driver.
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; COPYRIGHT(c) 2014 STMicroelectronics</center></h2>
  *
  * Redistribution and use in source and binary forms, with or without modification,
  * are permitted provided that the following conditions are met:
  *   1. Redistributions of source code must retain the above copyright notice,
  *      this list of conditions and the following disclaimer.
  *   2. Redistributions in binary form must reproduce the above copyright notice,
  *      this list of conditions and the following disclaimer in the documentation
  *      and/or other materials provided with the distribution.
  *   3. Neither the name of STMicroelectronics nor the names of its contributors
  *      may be used to endorse or promote products derived from this software
  *      without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *
  ******************************************************************************
  */ 

/* Define to prevent recursive inclusion -------------------------------------*/
#ifndef __INTERNALTS_H
#define __INTERNALTS_H

#ifdef __cplusplus
 extern "C" {
#endif   
   
/* Includes ------------------------------------------------------------------*/
#include "ts.h"
#include "io.h"
#include "main.h"

/* Exported types ------------------------------------------------------------*/

/* Exported constants --------------------------------------------------------*/


 /* Definition for ADCx clock resources */
 #define ADCTS                           ADC3
 #define ADCTS_CLK_ENABLE()              __ADC3_CLK_ENABLE()
 #define DMATS_CLK_ENABLE()              __DMA2_CLK_ENABLE()

 #define ADCTS_CHANNEL_GPIO_CLK_ENABLE() __GPIOF_CLK_ENABLE()

 #define ADCTS_FORCE_RESET()             __ADC_FORCE_RESET()
 #define ADCTS_RELEASE_RESET()           __ADC_RELEASE_RESET()

 /* Definition for ADCx Channel Pin */
 #define ADCTS_CHANNELX_PIN               GPIO_PIN_4
 #define ADCTS_CHANNELY_PIN               GPIO_PIN_5
 #define ADCTS_CHANNEL_GPIO_PORT          GPIOF

 /* Definition for ADCx's Channel */
 #define ADCTS_CHANNELX                    ADC_CHANNEL_14
 #define ADCTS_CHANNELY                    ADC_CHANNEL_15

 /* Definition for ADCx's NVIC */
 #define ADCTS_IRQn                       ADC_IRQn
 #define ADCTS_IRQHandler                 ADC_IRQHandler

 /* Definition for TIMx clock resources */
 #define TIMTS                            TIM2
 #define TIMTS_CLK_ENABLE()               __TIM2_CLK_ENABLE()

 #define TIMTS_FORCE_RESET()              __TIM2_FORCE_RESET()
 #define TIMTS_RELEASE_RESET()            __TIM2_RELEASE_RESET()

 /* Definition for ADCx's DMA */
 #define ADCTS_DMA_CHANNEL                DMA_CHANNEL_2
 #define ADCTS_DMA_STREAM                 DMA2_Stream0

 /* Definition for ADCx's NVIC */
 #define ADCTS_DMA_IRQn                   DMA2_Stream0_IRQn
 #define ADCTS_DMA_IRQHandler             DMA2_Stream0_IRQHandler
/**
  * @}
  */
  
/* Exported macro ------------------------------------------------------------*/
   
/** @defgroup Internal_Exported_Macros
  * @{
  */ 

/* Exported functions --------------------------------------------------------*/
  
/** @defgroup Internal_Exported_Functions
  * @{
  */

/** 
  * @brief STMPE811 Control functions
  */
void     Internal_Init(uint16_t DeviceAddr);
//void     Internal_Reset(uint16_t DeviceAddr);
uint16_t Internal_ReadID(uint16_t DeviceAddr);
//void     Internal_EnableGlobalIT(uint16_t DeviceAddr);
//void     Internal_DisableGlobalIT(uint16_t DeviceAddr);
//void     Internal_EnableITSource(uint16_t DeviceAddr, uint8_t Source);
//void     Internal_DisableITSource(uint16_t DeviceAddr, uint8_t Source);
//void     Internal_SetITPolarity(uint16_t DeviceAddr, uint8_t Polarity);
//void     Internal_SetITType(uint16_t DeviceAddr, uint8_t Type);
//uint8_t  Internal_GlobalITStatus(uint16_t DeviceAddr, uint8_t Source);
//uint8_t  Internal_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source);
//void     Internal_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source);


/** 
  * @brief STMPE811 IO functionalities functions
  */
void     Internal_IO_Start(uint16_t DeviceAddr, uint16_t IO_Pin);
void     Internal_IO_Config(uint16_t DeviceAddr, uint16_t IO_Pin, IO_ModeTypedef IO_Mode);
//void     Internal_IO_InitPin(uint16_t DeviceAddr, uint16_t IO_Pin, uint8_t Direction);

/** 
  * @brief STMPE811 Touch screen functionalities functions
  */
void     Internal_TS_Start(uint16_t DeviceAddr);
void     Internal_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y);
uint8_t  Internal_TS_DetectTouch(uint16_t DeviceAddr);
void     Internal_TS_EnableIT(uint16_t DeviceAddr);


void     IOE_Init(void);
void     IOE_ITConfig (void);
void     IOE_Delay(uint32_t delay);
void     IOE_Write(uint8_t addr, uint8_t reg, uint8_t value);
uint8_t  IOE_Read(uint8_t addr, uint8_t reg);
uint16_t IOE_ReadMultiple(uint8_t addr, uint8_t reg, uint8_t *buffer, uint16_t length);

/* Touch screen driver structure */
extern TS_DrvTypeDef 	Internal_ts_drv;

/* IO driver structure */
extern IO_DrvTypeDef 	Internal_io_drv;

#ifdef __cplusplus
}
#endif
#endif /* __Internal_H */


/**
  * @}
  */ 

/**
  * @}
  */

/**
  * @}
  */ 

/**
  * @}
  */       
/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
