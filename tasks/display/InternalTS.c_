/**
  ******************************************************************************
  * @file    Internal.c
  * @author  MCD Application Team
  * @version V1.0.0
  * @date    18-February-2014
  * @brief   This file provides a set of functions needed to manage the Internal
  *          IO Expander devices.
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; COPYRIGHT(c) 2014 STMicroelectronics</center></h2>
  *
  * Redistribution and use in source and binary forms, with or without modification,
  * are permitted provided that the following conditions are met:
  *   1. Redistributions of source code must retain the above copyright notice,
  *      this list of conditions and the following disclaimer.
  *   2. Redistributions in binary form must reproduce the above copyright notice,
  *      this list of conditions and the following disclaimer in the documentation
  *      and/or other materials provided with the distribution.
  *   3. Neither the name of STMicroelectronics nor the names of its contributors
  *      may be used to endorse or promote products derived from this software
  *      without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *
  ******************************************************************************
  */  

/* Includes ------------------------------------------------------------------*/
#include "InternalTS.h"
#include "LEDs.h"
#include "Display.h"

#include "stm32f2xx_hal.h"
//#include "stm32f2xx_hal.h"
/* Private typedef -----------------------------------------------------------*/

/* Private define ------------------------------------------------------------*/

#define InternalTS_MAX_INSTANCE         2


/* Private variables ---------------------------------------------------------*/

/* ADC handler declaration */
ADC_HandleTypeDef    AdcHandleX,AdcHandleY;

/* TIM handler declaration */
static TIM_HandleTypeDef  htim;

/* Variable used to get converted value */
__IO uint32_t uhADCxConvertedValue = 0;

uint32_t ADCTSConvertedValue = 0;

/* Touch screen driver structure initialization */  
TS_DrvTypeDef Internal_ts_drv =
{
		Internal_Init,
		Internal_TS_Start,
		Internal_TS_DetectTouch,
		Internal_TS_GetXY
};

/* IO driver structure initialization */ 
IO_DrvTypeDef Internal_io_drv =
{
		Internal_Init,
		Internal_IO_Start,
		Internal_IO_Config
};


/* Internal instances by address */
uint8_t InternalTS[InternalTS_MAX_INSTANCE] = {0};
/**
  * @}
  */ 
    
/* Private function prototypes -----------------------------------------------*/
static void ADC_Config(void);
static void TIM_Config(void);
static uint8_t Internal_GetInstance(uint16_t DeviceAddr);
static void Error_Handler(void);
/* Private functions ---------------------------------------------------------*/

/** @defgroup Internal_Private_Functions
  * @{
  */

/**
  * @brief  Initialize the Internal and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void Internal_Init(uint16_t DeviceAddr)
{
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = Internal_GetInstance(DeviceAddr);

  printf("DeviceAddr: %d , instance: %d \n",DeviceAddr,instance);

  /* To prevent double initialization */
  if(instance == 0xFF)
  {
    /* Look for empty instance */
    empty = Internal_GetInstance(0);
    
    if(empty < InternalTS_MAX_INSTANCE)
    {
      /* Register the current device instance */
      InternalTS[empty] = DeviceAddr;
      
      /* Initialize IO  */
      IOE_Init(); printf("IOE_Init\n");
      
 //     TIM_Config();printf("TIM_Config\n");
      ADC_Config();printf("ADC_Config\n");
      if (HAL_ADC_Start(&AdcHandleX) != HAL_OK)         Error_Handler();
      if (HAL_ADC_Start(&AdcHandleY) != HAL_OK)         Error_Handler();

//      HAL_ADC_PollForConversion(&AdcHandleX, 10);
//      HAL_ADC_PollForConversion(&AdcHandleX, 10);



//      if (HAL_ADC_Start_IT(&AdcHandle) != HAL_OK)	Error_Handler();
//      if (HAL_ADC_Start_DMA(&AdcHandle,(uint32_t *) ADCTSConvertedValue, 1) != HAL_OK)        Error_Handler();
 //     printf("HAL_ADC_Start_DMA\n");
 //     if (HAL_TIM_Base_Start(&htim) != HAL_OK)		Error_Handler();
 //     printf("HAL_TIM_Base_Start\n");

    }
  }
}


void Internal_IO_Start(uint16_t DeviceAddr, uint16_t IO_Pin)
{

}

/**
  */
void Internal_IO_Config(uint16_t DeviceAddr, uint16_t IO_Pin, IO_ModeTypedef IO_Mode)
{


}

/**
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void Internal_TS_Start(uint16_t DeviceAddr)
{

}
/************************************************************
 *
 */
uint8_t Internal_TS_DetectTouch(uint16_t DeviceAddr)
{

uint8_t ret = 0;
static  uint32_t	Xt,Yt, DifXt, DifYt;
  // проверяем состояние ацп и решаем было ли касание тачскрина,
  // если было возвращаем 1


  ADC_ChannelConfTypeDef sConfig;


  sConfig.Channel = ADCTS_CHANNELY;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&AdcHandleX, &sConfig) != HAL_OK)	Error_Handler();
   if (HAL_ADC_Start(&AdcHandleY) != HAL_OK)         Error_Handler();


	IOTFT_TS_Init(IOTFT_YU,GPIO_MODE_OUTPUT_PP);IOLCD_High(IOTFT_YU);
	IOTFT_TS_Init(IOTFT_YD,GPIO_MODE_OUTPUT_PP);IOLCD_Low(IOTFT_YD);
	IOTFT_TS_Init(IOTFT_XL,GPIO_MODE_ANALOG);
	IOTFT_TS_Init(IOTFT_XR,GPIO_MODE_ANALOG);
    HAL_Delay(5);

    HAL_ADC_PollForConversion(&AdcHandleY, 10);
  if (HAL_ADC_GetState(&AdcHandleY) == HAL_ADC_STATE_EOC_REG)    {
	  uhADCxConvertedValue = HAL_ADC_GetValue(&AdcHandleY);
//	  printf("GetADC X: %d",uhADCxConvertedValue);
	  Xt = uhADCxConvertedValue;
  }

  sConfig.Channel = ADCTS_CHANNELX;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&AdcHandleX, &sConfig) != HAL_OK)	Error_Handler();
  if (HAL_ADC_Start(&AdcHandleX) != HAL_OK)         Error_Handler();

	IOTFT_TS_Init(IOTFT_YU,GPIO_MODE_ANALOG);
	IOTFT_TS_Init(IOTFT_YD,GPIO_MODE_ANALOG);
	IOTFT_TS_Init(IOTFT_XL,GPIO_MODE_OUTPUT_PP);IOLCD_High(IOTFT_XL);
	IOTFT_TS_Init(IOTFT_XR,GPIO_MODE_OUTPUT_PP);IOLCD_Low(IOTFT_XR);
	HAL_Delay(5);

	HAL_ADC_PollForConversion(&AdcHandleX, 10);
	if (HAL_ADC_GetState(&AdcHandleX) == HAL_ADC_STATE_EOC_REG)    {
	  uhADCxConvertedValue = HAL_ADC_GetValue(&AdcHandleX);
//	  printf(" Y: %d",uhADCxConvertedValue);
	  Yt = uhADCxConvertedValue;
	}

  if ((Xt>200) && (Yt>200)) {
	  ret = 1;

  }


  return ret;
}
/**
  * @brief  Get the touch screen X and Y positions values
  * @param  DeviceAddr: Device address on communication Bus.
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void Internal_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
//  uint8_t  dataXYZ[4]=0;
//  uint32_t uldataXYZ;
  ADC_ChannelConfTypeDef sConfig;


  sConfig.Channel = ADCTS_CHANNELY;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&AdcHandleX, &sConfig) != HAL_OK)	Error_Handler();
   if (HAL_ADC_Start(&AdcHandleY) != HAL_OK)         Error_Handler();


	IOTFT_TS_Init(IOTFT_YU,GPIO_MODE_OUTPUT_PP);IOLCD_High(IOTFT_YU);
	IOTFT_TS_Init(IOTFT_YD,GPIO_MODE_OUTPUT_PP);IOLCD_Low(IOTFT_YD);
	IOTFT_TS_Init(IOTFT_XL,GPIO_MODE_ANALOG);
	IOTFT_TS_Init(IOTFT_XR,GPIO_MODE_ANALOG);
    HAL_Delay(5);

    HAL_ADC_PollForConversion(&AdcHandleY, 10);
  if (HAL_ADC_GetState(&AdcHandleY) == HAL_ADC_STATE_EOC_REG)    {
	  uhADCxConvertedValue = HAL_ADC_GetValue(&AdcHandleY);
	  printf("GetADC X: %d",uhADCxConvertedValue);
	  *Y = uhADCxConvertedValue;
  }

  sConfig.Channel = ADCTS_CHANNELX;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&AdcHandleX, &sConfig) != HAL_OK)	Error_Handler();
  if (HAL_ADC_Start(&AdcHandleX) != HAL_OK)         Error_Handler();

	IOTFT_TS_Init(IOTFT_YU,GPIO_MODE_ANALOG);
	IOTFT_TS_Init(IOTFT_YD,GPIO_MODE_ANALOG);
	IOTFT_TS_Init(IOTFT_XL,GPIO_MODE_OUTPUT_PP);IOLCD_High(IOTFT_XL);
	IOTFT_TS_Init(IOTFT_XR,GPIO_MODE_OUTPUT_PP);IOLCD_Low(IOTFT_XR);
	HAL_Delay(5);

	HAL_ADC_PollForConversion(&AdcHandleX, 10);
	if (HAL_ADC_GetState(&AdcHandleX) == HAL_ADC_STATE_EOC_REG)    {
	  uhADCxConvertedValue = HAL_ADC_GetValue(&AdcHandleX);
	  printf(" Y: %d",uhADCxConvertedValue);
	  *X = uhADCxConvertedValue;
	}

	printf("\n");


//  IOE_ReadMultiple(DeviceAddr, Internal_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
//  DeviceAddr
//  uldataXYZ = uhADCxConvertedValue;
  /* Calculate positions values */
//  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);
//  *X = (uldataXYZ >> 20) & 0x00000FFF;
//  *Y = (uldataXYZ >>  8) & 0x00000FFF;

 // printf("Internal_TS_GetXY, X: %d, Y: %d \n",*X,*Y);


}
/**
  * @brief  Check if the device instance of the selected address is already registered
  *         and return its index
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t Internal_GetInstance(uint16_t DeviceAddr)
{
  uint8_t idx = 0;

  /* Check all the registered instances */
  for(idx = 0; idx < InternalTS_MAX_INSTANCE ; idx ++)
  {
    if(InternalTS[idx] == DeviceAddr)
    {
      return idx;
    }
  }

  return 0xFF;
}
/**********************************************************************************
 *
 **********************************************************************************/
static void ADC_Config(void)
{
  ADC_ChannelConfTypeDef sConfig;

  /* ADC Initialization */

  AdcHandleX.Instance          = 			ADCTS;

  AdcHandleX.Init.ClockPrescaler = 			ADC_CLOCKPRESCALER_PCLK_DIV2;
  AdcHandleX.Init.Resolution = 				ADC_RESOLUTION12b;
  AdcHandleX.Init.ScanConvMode = 			DISABLE;
  AdcHandleX.Init.ContinuousConvMode = 		ENABLE;
  AdcHandleX.Init.DiscontinuousConvMode = 	DISABLE;
  AdcHandleX.Init.NbrOfDiscConversion = 		0;
  AdcHandleX.Init.ExternalTrigConvEdge = 	ADC_EXTERNALTRIGCONVEDGE_NONE;
  AdcHandleX.Init.ExternalTrigConv = 		ADC_EXTERNALTRIGCONV_T1_CC1;
  AdcHandleX.Init.DataAlign = 				ADC_DATAALIGN_RIGHT;
  AdcHandleX.Init.NbrOfConversion = 			1;
  AdcHandleX.Init.DMAContinuousRequests = 	DISABLE;
  AdcHandleX.Init.EOCSelection = 			DISABLE;


  if (HAL_ADC_Init(&AdcHandleX) != HAL_OK)    Error_Handler();


  sConfig.Channel = ADCTS_CHANNELX;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
  sConfig.Offset = 0;

  if (HAL_ADC_ConfigChannel(&AdcHandleX, &sConfig) != HAL_OK)	Error_Handler();

  /* ADC Initialization */

  AdcHandleY.Instance          = 			ADCTS;

  AdcHandleY.Init.ClockPrescaler = 			ADC_CLOCKPRESCALER_PCLK_DIV2;
  AdcHandleY.Init.Resolution = 				ADC_RESOLUTION12b;
  AdcHandleY.Init.ScanConvMode = 			DISABLE;
  AdcHandleY.Init.ContinuousConvMode = 		ENABLE;
  AdcHandleY.Init.DiscontinuousConvMode = 	DISABLE;
  AdcHandleY.Init.NbrOfDiscConversion = 		0;
  AdcHandleY.Init.ExternalTrigConvEdge = 	ADC_EXTERNALTRIGCONVEDGE_NONE;
  AdcHandleY.Init.ExternalTrigConv = 		ADC_EXTERNALTRIGCONV_T1_CC1;
  AdcHandleY.Init.DataAlign = 				ADC_DATAALIGN_RIGHT;
  AdcHandleY.Init.NbrOfConversion = 			1;
  AdcHandleY.Init.DMAContinuousRequests = 	DISABLE;
  AdcHandleY.Init.EOCSelection = 			DISABLE;


  if (HAL_ADC_Init(&AdcHandleY) != HAL_OK)    Error_Handler();


  sConfig.Channel = ADCTS_CHANNELY;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
  sConfig.Offset = 0;

  if (HAL_ADC_ConfigChannel(&AdcHandleY, &sConfig) != HAL_OK)	Error_Handler();


}
/***********************************************************
*
***********************************************************/
static void TIM_Config(void)
{
  TIM_MasterConfigTypeDef sMasterConfig;

  /* Time Base configuration */
  htim.Instance = TIMTS;

  htim.Init.Period = 3000;
  htim.Init.Prescaler = 0;
  htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim.Init.RepetitionCounter = 0x0;

  if (HAL_TIM_Base_Init(&htim) != HAL_OK)    Error_Handler();

  /* Timer TRGO selection */
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;

  if (HAL_TIMEx_MasterConfigSynchronization(&htim, &sMasterConfig) != HAL_OK)    Error_Handler();

}

/**
  * @brief  Conversion complete callback in non blocking mode
  * @param  AdcHandle : AdcHandle handle
  * @note   This example shows a simple way to report end of conversion, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *AdcHandle)
{
  /* Get the converted value of regular channel */
  uhADCxConvertedValue = HAL_ADC_GetValue(AdcHandle);
//  printf("ADC_GetValue\n");
	 TST_Toggle(TST6);

	// HAL_ADC_Stop_DMA(&hadc);
}
/***********************************************************
*
***********************************************************/
void Error_Handler(void){
	  printf("Error INIT TS\n");
}
/**
  * @brief ADC MSP Initialization
  *        This function configures the hardware resources used in this example:
  *           - Peripheral's clock enable
  *           - Peripheral's GPIO Configuration
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef *hadc)
{
  GPIO_InitTypeDef          GPIO_InitStruct;
  static DMA_HandleTypeDef  hdma_adc;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO clock */
  ADCTS_CHANNEL_GPIO_CLK_ENABLE();

  /* ADCx Periph clock enable */
  ADCTS_CLK_ENABLE();

  /* Enable DMA2 clock */
//  DMATS_CLK_ENABLE();

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* ADC3 Channel8 GPIO pin configuration */
//  GPIO_InitStruct.Pin = ADCTS_CHANNELX_PIN;
//  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
//  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
//  HAL_GPIO_Init(ADCTS_CHANNEL_GPIO_PORT, &GPIO_InitStruct);

  /*##-3- Configure the DMA streams ##########################################*/
   /* Set the parameters to be configured */
/*   hdma_adc.Instance = ADCTS_DMA_STREAM;

   hdma_adc.Init.Channel  = ADCTS_DMA_CHANNEL;
   hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
   hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
   hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
   hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
   hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
   hdma_adc.Init.Mode = DMA_CIRCULAR;
   hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
   hdma_adc.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
   hdma_adc.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
   hdma_adc.Init.MemBurst = DMA_MBURST_SINGLE;
   hdma_adc.Init.PeriphBurst = DMA_PBURST_SINGLE;

   HAL_DMA_Init(&hdma_adc);
*/
   /* Associate the initialized DMA handle to the the UART handle */
 //  __HAL_LINKDMA(hadc, DMA_Handle, hdma_adc);

  /*##-3- Configure the NVIC #################################################*/
//  HAL_NVIC_SetPriority(ADCTS_IRQn, 0, 0);
//  HAL_NVIC_EnableIRQ(ADCTS_IRQn);
//  printf("HAL_ADC_MspInit\n");

}

/**
  * @brief ADC MSP De-Initialization
  *        This function frees the hardware resources used in this example:
  *          - Disable the Peripheral's clock
  *          - Revert GPIO to their default state
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspDeInit(ADC_HandleTypeDef *hadc)
{
  static DMA_HandleTypeDef  hdma_adc;

  /*##-1- Reset peripherals ##################################################*/
  ADCTS_FORCE_RESET();
  ADCTS_RELEASE_RESET();

  /*##-2- Disable peripherals and GPIO Clocks ################################*/
  /* De-initialize the ADC3 Channel9 GPIO pin */
//  HAL_GPIO_DeInit(ADCTS_CHANNEL_GPIO_PORT, ADCTS_CHANNELX_PIN);
  /*##-3- Disable the DMA Streams ############################################*/
  /* De-Initialize the DMA Stream associate to transmission process */
//  HAL_DMA_DeInit(&hdma_adc);

  /*##-4- Disable the NVIC for DMA ###########################################*/
//  HAL_NVIC_DisableIRQ(ADCTS_DMA_IRQn);

  printf("HAL_ADC_MspDeInit\n");

}

/**
  * @brief TIM MSP Initialization
  *        This function configures the hardware resources used in this example:
  *           - Peripheral's clock enable
  *           - Peripheral's GPIO Configuration
  * @param htim: TIM handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
  /* TIM8 Periph clock enable */
  TIMTS_CLK_ENABLE();
  printf("HAL_TIM_Base_MspInit\n");

}

/**
  * @brief TIM MSP De-Initialization
  *        This function frees the hardware resources used in this example:
  *          - Disable the Peripheral's clock
  *          - Revert GPIO to their default state
  * @param htim: TIM handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef *htim)
{

  /*##-1- Reset peripherals ##################################################*/
  TIMTS_FORCE_RESET();
  TIMTS_RELEASE_RESET();
  printf("HAL_TIM_Base_MspDeInit\n");

}
/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
